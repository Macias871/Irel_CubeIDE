/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @0 "Temperature sensor calibration"
    0x39, 0x2e, 0x31, 0x2e, 0x32, 0x2e, 0x20, 0x5a, 0x61, 0x142, 0x105, 0x63, 0x7a, 0x65, 0x6e, 0x69, 0x65, 0x20, 0x6f, 0x67, 0x72, 0x7a, 0x65, 0x77, 0x61, 0x6e, 0x69, 0x61, 0x0, // @31 "9.1.2. Za??czenie ogrzewania"
    0x39, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x20, 0x55, 0x73, 0x74, 0x61, 0x77, 0x69, 0x65, 0x6e, 0x69, 0x61, 0x20, 0x72, 0x6f, 0x7a, 0x73, 0x7a, 0x65, 0x72, 0x7a, 0x65, 0x144, 0x0, // @60 "9.1.4. Ustawienia rozszerze?"
    0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @89 "Temperature curve correction"
    0x39, 0x2e, 0x31, 0x2e, 0x33, 0x2e, 0x20, 0x55, 0x73, 0x74, 0x61, 0x77, 0x69, 0x6e, 0x69, 0x61, 0x20, 0x66, 0x61, 0x62, 0x72, 0x79, 0x63, 0x7a, 0x6e, 0x65, 0x0, // @118 "9.1.3. Ustawinia fabryczne"
    0x39, 0x2e, 0x34, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x61, 0x20, 0x7a, 0x65, 0x77, 0x6e, 0x119, 0x74, 0x72, 0x7a, 0x6e, 0x61, 0x0, // @145 "9.4 Temperatura zewn?trzna"
    0x4b, 0x6f, 0x72, 0x65, 0x6b, 0x74, 0x61, 0x20, 0x6b, 0x72, 0x7a, 0x79, 0x77, 0x65, 0x6a, 0x20, 0x67, 0x72, 0x7a, 0x65, 0x77, 0x63, 0x7a, 0x65, 0x6a, 0x0, // @172 "Korekta krzywej grzewczej"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x34, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @198 "9.2.1.4 Change Password"
    0x39, 0x2e, 0x34, 0x20, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x0, // @222 "9.4 Outside Temperature"
    0x39, 0x2e, 0x31, 0x20, 0x4e, 0x61, 0x73, 0x74, 0x61, 0x77, 0x79, 0x20, 0x70, 0x6f, 0x64, 0x73, 0x74, 0x61, 0x77, 0x6f, 0x77, 0x65, 0x0, // @246 "9.1 Nastawy podstawowe"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x20, 0x4d, 0x65, 0x6e, 0x75, 0x20, 0x73, 0x65, 0x72, 0x77, 0x69, 0x73, 0x6f, 0x77, 0x65, 0x0, // @269 "9.2.1. Menu serwisowe"
    0x43, 0x7a, 0x61, 0x73, 0x79, 0x20, 0x7a, 0x77, 0x142, 0x6f, 0x6b, 0x69, 0x20, 0x75, 0x72, 0x7a, 0x105, 0x64, 0x7a, 0x65, 0x144, 0x0, // @291 "Czasy zw?oki urz?dze?"
    0x4b, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x63, 0x6a, 0x61, 0x20, 0x63, 0x7a, 0x75, 0x6a, 0x6e, 0x69, 0x6b, 0xf3, 0x77, 0x20, 0x0, // @313 "Kalibracja czujnik?w "
    0x39, 0x2e, 0x31, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @335 "9.1 Default Settings"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x33, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @356 "9.2.1.3 Installation"
    0x39, 0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x20, 0x57, 0x65, 0x7a, 0x77, 0x69, 0x6a, 0x20, 0x73, 0x65, 0x72, 0x77, 0x69, 0x73, 0x0, // @377 "9.2.2. Wezwij serwis"
    0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6e, 0x65, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x79, 0x20, 0x77, 0x65, 0x6a, 0x15b, 0x107, 0x0, // @398 "Normalne stany wej??"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x76, 0x65, 0x20, 0x6d, 0x65, 0x6e, 0x75, 0x0, // @419 "9.2.1. Servive menu"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x32, 0x20, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x65, 0x73, 0x74, 0x0, // @439 "9.2.1.2 Manual test"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x32, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x72, 0x119, 0x63, 0x7a, 0x6e, 0x79, 0x0, // @459 "9.2.1.2 Test r?czny"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x34, 0x20, 0x5a, 0x6d, 0x69, 0x65, 0x144, 0x20, 0x68, 0x61, 0x73, 0x142, 0x6f, 0x0, // @479 "9.2.1.4 Zmie? has?o"
    0x39, 0x2e, 0x32, 0x2e, 0x32, 0x2e, 0x20, 0x43, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @499 "9.2.2. Call service"
    0x39, 0x2e, 0x36, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x0, // @519 "9.6 Change Programm"
    0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x0, // @539 "Normal input states"
    0x39, 0x2e, 0x31, 0x2e, 0x32, 0x2e, 0x20, 0x53, 0x65, 0x74, 0x20, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x0, // @559 "9.1.2. Set Heating"
    0x39, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x20, 0x45, 0x78, 0x74, 0x2e, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0, // @578 "9.1.4. Ext. config"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x33, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x61, 0x63, 0x6a, 0x61, 0x0, // @597 "9.2.1.3 Instalacja"
    0x39, 0x2e, 0x36, 0x20, 0x57, 0x79, 0x62, 0xf3, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x75, 0x0, // @616 "9.6 Wyb?r programu"
    0x43, 0x7a, 0x61, 0x73, 0x79, 0x20, 0x7a, 0x77, 0x142, 0x6f, 0x6b, 0x69, 0x20, 0x77, 0x65, 0x6a, 0x15b, 0x107, 0x0, // @635 "Czasy zw?oki wej??"
    0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x63, 0x7a, 0x61, 0x73, 0xf3, 0x77, 0x20, 0x70, 0x72, 0x61, 0x63, 0x79, 0x0, // @654 "Reset czas?w pracy"
    0x4e, 0x61, 0x73, 0x74, 0x61, 0x77, 0x79, 0x20, 0x66, 0x61, 0x62, 0x72, 0x79, 0x63, 0x7a, 0x6e, 0x65, 0x0, // @673 "Nastawy fabryczne"
    0x39, 0x2e, 0x32, 0x2e, 0x31, 0x2e, 0x31, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x0, // @691 "9.2.1.1 Integral"
    0x6e, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x75, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x0, // @708 "napis_numeu_menu"
    0x39, 0x2e, 0x31, 0x2e, 0x31, 0x2e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x0, // @725 "9.1.1. Language"
    0x39, 0x2e, 0x31, 0x2e, 0x33, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x0, // @741 "9.1.3. Defaults"
    0x39, 0x2e, 0x33, 0x20, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x79, 0x6b, 0x61, 0x0, // @757 "9.3 Diagnostyka"
    0x57, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x0, // @773 "Work time reset"
    0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x0, // @789 "menu_tree_title"
    0x39, 0x2e, 0x33, 0x20, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x0, // @805 "9.3 Diagnostic"
    0x39, 0x2e, 0x35, 0x20, 0x43, 0x7a, 0x61, 0x73, 0x20, 0x70, 0x72, 0x61, 0x63, 0x79, 0x0, // @820 "9.5 Czas pracy"
    0x43, 0x7a, 0x61, 0x73, 0x20, 0x70, 0x72, 0x7a, 0x65, 0x67, 0x6c, 0x105, 0x64, 0x75, 0x0, // @835 "Czas przegl?du"
    0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x0, // @850 "Default values"
    0x50, 0x57, 0x4d, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x0, // @865 "PWM parameters"
    0x6e, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x6c, 0x61, 0x77, 0x69, 0x73, 0x7a, 0x61, 0x0, // @880 "napis_klawisza"
    0x39, 0x2e, 0x35, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x0, // @895 "9.5 Work Time"
    0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @909 "Checking time"
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x0, // @923 "Devices delay"
    0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x20, 0x50, 0x57, 0x4d, 0x0, // @937 "Parametry PWM"
    0x53, 0x6c, 0x61, 0x76, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x0, // @951 "Slave modules"
    0x57, 0x65, 0x7a, 0x77, 0x69, 0x6a, 0x20, 0x53, 0x65, 0x72, 0x77, 0x69, 0x73, 0x0, // @965 "Wezwij Serwis"
    0x39, 0x2e, 0x31, 0x2e, 0x31, 0x2e, 0x20, 0x4a, 0x119, 0x7a, 0x79, 0x6b, 0x0, // @979 "9.1.1. J?zyk"
    0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x0, // @992 "Button_title"
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x0, // @1005 "Input delays"
    0x4d, 0x6f, 0x64, 0x75, 0x142, 0x79, 0x20, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x0, // @1018 "Modu?y slave"
    0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0xf3, 0x77, 0x20, 0x0, // @1031 "Reset log?w "
    0x39, 0x2e, 0x32, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @1044 "9.2 Service"
    0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x61, 0x0, // @1056 "Temperatura"
    0x54, 0x72, 0x79, 0x62, 0x20, 0x70, 0x72, 0x61, 0x63, 0x79, 0x3a, 0x0, // @1068 "Tryb pracy:"
    0x39, 0x2e, 0x32, 0x20, 0x53, 0x65, 0x72, 0x77, 0x69, 0x73, 0x0, // @1080 "9.2 Serwis"
    0x4c, 0x6f, 0x67, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x0, // @1091 "Logs reset"
    0x57, 0x6f, 0x72, 0x6b, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x0, // @1102 "Work mode"
    0x57, 0x6f, 0x72, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @1112 "Work time"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x0, // @1122 "New Text"
    0x39, 0x2e, 0x20, 0x4d, 0x65, 0x6e, 0x75, 0x0, // @1131 "9. Menu"
    0x57, 0x73, 0x74, 0x65, 0x63, 0x7a, 0x0, // @1139 "Wstecz"
    0x42, 0x61, 0x63, 0x6b, 0x0, // @1146 "Back"
    0x2, 0x0 // @1151 "<>"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesPl[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[2] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb,
    indicesPl
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 2)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
