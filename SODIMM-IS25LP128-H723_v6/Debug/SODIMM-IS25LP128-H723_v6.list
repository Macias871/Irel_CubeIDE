
SODIMM-IS25LP128-H723_v6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d950  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003020  0802dc20  0802dc20  0003dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 0000010c  08030c40  08030c40  00040c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08030d4c  08030d4c  00040d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08030d54  08030d54  00040d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000008  08030d68  08030d68  00040d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000664  24000000  08030d70  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24000664  080313d4  00050664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  240006c4  08031434  000506c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000d3b4  24000724  08031494  00050724  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2400dad8  08031494  0005dad8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00354b1c  2**0
                  CONTENTS, READONLY
 13 ExtFlashSection 002f2420  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 FontFlashSection 000017f8  902f2420  902f2420  00352420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000f04  902f3c18  902f3c18  00353c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   0010db7a  00000000  00000000  00354b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001abd7  00000000  00000000  004626c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000058d0  00000000  00000000  0047d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000050b0  00000000  00000000  00482b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004a3a8  00000000  00000000  00487c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006d9cc  00000000  00000000  004d1fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00199747  00000000  00000000  0053f994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  006d90db  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00017dc0  00000000  00000000  006d91ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000724 	.word	0x24000724
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802dc08 	.word	0x0802dc08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000728 	.word	0x24000728
 800030c:	0802dc08 	.word	0x0802dc08

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	24000740 	.word	0x24000740
 80006e4:	24000794 	.word	0x24000794

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f000 fd23 	bl	8001138 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 fd8b 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f835 	bl	8000764 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f8b5 	bl	8000868 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc05 	bl	8000f0c <MX_GPIO_Init>
  MX_ETH_Init();
 8000702:	f000 f905 	bl	8000910 <MX_ETH_Init>
  MX_FDCAN2_Init();
 8000706:	f000 f94f 	bl	80009a8 <MX_FDCAN2_Init>
  MX_FMC_Init();
 800070a:	f000 fbb1 	bl	8000e70 <MX_FMC_Init>
  MX_I2C1_Init();
 800070e:	f000 f9af 	bl	8000a70 <MX_I2C1_Init>
  MX_I2C4_Init();
 8000712:	f000 f9eb 	bl	8000aec <MX_I2C4_Init>
  MX_LTDC_Init();
 8000716:	f000 fa27 	bl	8000b68 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 800071a:	f000 faa7 	bl	8000c6c <MX_OCTOSPI1_Init>
  MX_SPI2_Init();
 800071e:	f000 fb05 	bl	8000d2c <MX_SPI2_Init>
  MX_UART7_Init();
 8000722:	f000 fb59 	bl	8000dd8 <MX_UART7_Init>
  MX_CRC_Init();
 8000726:	f000 f8d1 	bl	80008cc <MX_CRC_Init>
  MX_TouchGFX_Init();
 800072a:	f010 f96e 	bl	8010a0a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800072e:	f010 f965 	bl	80109fc <MX_TouchGFX_PreOSInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <main+0x74>)
 8000734:	1d3c      	adds	r4, r7, #4
 8000736:	461d      	mov	r5, r3
 8000738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00d fdee 	bl	800e32a <osThreadCreate>
 800074e:	4603      	mov	r3, r0
 8000750:	4a03      	ldr	r2, [pc, #12]	; (8000760 <main+0x78>)
 8000752:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000754:	f00d fde2 	bl	800e31c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x70>
 800075a:	bf00      	nop
 800075c:	0802dc2c 	.word	0x0802dc2c
 8000760:	24000e28 	.word	0x24000e28

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	224c      	movs	r2, #76	; 0x4c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f02c fa24 	bl	802cbc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f02c fa1e 	bl	802cbc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000784:	2002      	movs	r0, #2
 8000786:	f005 fe87 	bl	8006498 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <SystemClock_Config+0xfc>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a33      	ldr	r2, [pc, #204]	; (8000860 <SystemClock_Config+0xfc>)
 8000794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <SystemClock_Config+0xfc>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a6:	bf00      	nop
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <SystemClock_Config+0xfc>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	d1f8      	bne.n	80007a8 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <SystemClock_Config+0x100>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	f023 0303 	bic.w	r3, r3, #3
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <SystemClock_Config+0x100>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI
 80007c6:	2333      	movs	r3, #51	; 0x33
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007d0:	2301      	movs	r3, #1
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 127;
 80007f0:	237f      	movs	r3, #127	; 0x7f
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80007f8:	2306      	movs	r3, #6
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000800:	2308      	movs	r3, #8
 8000802:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000804:	2300      	movs	r3, #0
 8000806:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	4618      	mov	r0, r3
 8000814:	f005 fe8a 	bl	800652c <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800081e:	f000 fcc9 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	233f      	movs	r3, #63	; 0x3f
 8000824:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2303      	movs	r3, #3
 8000828:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800082e:	2308      	movs	r3, #8
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2103      	movs	r1, #3
 8000848:	4618      	mov	r0, r3
 800084a:	f006 fa1d 	bl	8006c88 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000854:	f000 fcae 	bl	80011b4 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3770      	adds	r7, #112	; 0x70
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024800 	.word	0x58024800
 8000864:	58024400 	.word	0x58024400

08000868 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b0ae      	sub	sp, #184	; 0xb8
 800086c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	22b4      	movs	r2, #180	; 0xb4
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f02c f9a3 	bl	802cbc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_FDCAN
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <PeriphCommonClock_Config+0x60>)
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000882:	2318      	movs	r3, #24
 8000884:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000892:	23c0      	movs	r3, #192	; 0xc0
 8000894:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80008a2:	2300      	movs	r3, #0
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80008a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 fdb8 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008ba:	f000 fc7b 	bl	80011b4 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	37b8      	adds	r7, #184	; 0xb8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	81008000 	.word	0x81008000

080008cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_CRC_Init+0x3c>)
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <MX_CRC_Init+0x40>)
 80008d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_CRC_Init+0x3c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_CRC_Init+0x3c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_CRC_Init+0x3c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_CRC_Init+0x3c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_CRC_Init+0x3c>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_CRC_Init+0x3c>)
 80008f6:	f001 fe79 	bl	80025ec <HAL_CRC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000900:	f000 fc58 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	240009cc 	.word	0x240009cc
 800090c:	58024c00 	.word	0x58024c00

08000910 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_ETH_Init+0x80>)
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <MX_ETH_Init+0x84>)
 8000918:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ETH_Init+0x88>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ETH_Init+0x88>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ETH_Init+0x88>)
 8000928:	22e1      	movs	r2, #225	; 0xe1
 800092a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ETH_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ETH_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ETH_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_ETH_Init+0x80>)
 8000940:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_ETH_Init+0x88>)
 8000942:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_ETH_Init+0x80>)
 8000946:	2201      	movs	r2, #1
 8000948:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ETH_Init+0x80>)
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_ETH_Init+0x8c>)
 800094e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_ETH_Init+0x80>)
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_ETH_Init+0x90>)
 8000954:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ETH_Init+0x80>)
 8000958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800095c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ETH_Init+0x80>)
 8000960:	f001 ff2e 	bl	80027c0 <HAL_ETH_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800096a:	f000 fc23 	bl	80011b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800096e:	2238      	movs	r2, #56	; 0x38
 8000970:	2100      	movs	r1, #0
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_ETH_Init+0x94>)
 8000974:	f02c f924 	bl	802cbc0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_ETH_Init+0x94>)
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_ETH_Init+0x94>)
 8000980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000984:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_ETH_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	240009f0 	.word	0x240009f0
 8000994:	40028000 	.word	0x40028000
 8000998:	24000e2c 	.word	0x24000e2c
 800099c:	240006c4 	.word	0x240006c4
 80009a0:	24000664 	.word	0x24000664
 80009a4:	24000994 	.word	0x24000994

080009a8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80009ac:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009ae:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <MX_FDCAN2_Init+0xc4>)
 80009b0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80009b8:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009d2:	2210      	movs	r2, #16
 80009d4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009d8:	2201      	movs	r2, #1
 80009da:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009de:	2202      	movs	r2, #2
 80009e0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_FDCAN2_Init+0xc0>)
 8000a56:	f002 fad7 	bl	8003008 <HAL_FDCAN_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000a60:	f000 fba8 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000aa0 	.word	0x24000aa0
 8000a6c:	4000a400 	.word	0x4000a400

08000a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_I2C1_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a7c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000a80:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000aae:	f002 ffd1 	bl	8003a54 <HAL_I2C_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ab8:	f000 fb7c 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000ac0:	f003 f858 	bl	8003b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aca:	f000 fb73 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_I2C1_Init+0x74>)
 8000ad2:	f003 f89a 	bl	8003c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000adc:	f000 fb6a 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000b40 	.word	0x24000b40
 8000ae8:	40005400 	.word	0x40005400

08000aec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_I2C4_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000af8:	f640 6214 	movw	r2, #3604	; 0xe14
 8000afc:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b2a:	f002 ff93 	bl	8003a54 <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fb3e 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b3c:	f003 f81a 	bl	8003b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8000b46:	f000 fb35 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_I2C4_Init+0x74>)
 8000b4e:	f003 f85c 	bl	8003c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000b58:	f000 fb2c 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	24000b8c 	.word	0x24000b8c
 8000b64:	58001c00 	.word	0x58001c00

08000b68 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2234      	movs	r2, #52	; 0x34
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f02c f823 	bl	802cbc0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b7c:	4a3a      	ldr	r2, [pc, #232]	; (8000c68 <MX_LTDC_Init+0x100>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000b9a:	2209      	movs	r2, #9
 8000b9c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b9e:	4b31      	ldr	r3, [pc, #196]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000ba6:	221d      	movs	r2, #29
 8000ba8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 829;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bb2:	f240 323d 	movw	r2, #829	; 0x33d
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 483;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bba:	f240 12e3 	movw	r2, #483	; 0x1e3
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 839;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bc2:	f240 3247 	movw	r2, #839	; 0x347
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bca:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000be8:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000bea:	f003 f85b 	bl	8003ca4 <HAL_LTDC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 fade 	bl	80011b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000bfc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c00:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000c06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c0a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 250;
 8000c10:	23fa      	movs	r3, #250	; 0xfa
 8000c12:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000c26:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8000c2c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_LTDC_Init+0xfc>)
 8000c4c:	f003 f8fa 	bl	8003e44 <HAL_LTDC_ConfigLayer>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000c56:	f000 faad 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	24000bd8 	.word	0x24000bd8
 8000c68:	50001000 	.word	0x50001000

08000c6c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000c84:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <MX_OCTOSPI1_Init+0xbc>)
 8000c86:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c9a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000c9e:	2218      	movs	r2, #24
 8000ca0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cd4:	2208      	movs	r2, #8
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ce4:	480f      	ldr	r0, [pc, #60]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000ce6:	f003 fa85 	bl	80041f4 <HAL_OSPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8000cf0:	f000 fa60 	bl	80011b4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000cfc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000d00:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_OCTOSPI1_Init+0xb8>)
 8000d0c:	f003 fb3e 	bl	800438c <HAL_OSPIM_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8000d16:	f000 fa4d 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000c80 	.word	0x24000c80
 8000d28:	52005000 	.word	0x52005000

08000d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d32:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <MX_SPI2_Init+0xa8>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d46:	2203      	movs	r2, #3
 8000d48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_SPI2_Init+0xa4>)
 8000dbc:	f007 fe8a 	bl	8008ad4 <HAL_SPI_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000dc6:	f000 f9f5 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	24000cdc 	.word	0x24000cdc
 8000dd4:	40003800 	.word	0x40003800

08000dd8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_UART7_Init+0x90>)
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_UART7_Init+0x94>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <MX_UART7_Init+0x90>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <MX_UART7_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_UART7_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_UART7_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_UART7_Init+0x90>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e20:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e22:	f008 fa6b 	bl	80092fc <HAL_UART_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f000 f9c2 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e30:	2100      	movs	r1, #0
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e34:	f009 fb0c 	bl	800a450 <HAL_UARTEx_SetTxFifoThreshold>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000e3e:	f000 f9b9 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e46:	f009 fb41 	bl	800a4cc <HAL_UARTEx_SetRxFifoThreshold>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000e50:	f000 f9b0 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	; (8000e68 <MX_UART7_Init+0x90>)
 8000e56:	f009 fac2 	bl	800a3de <HAL_UARTEx_DisableFifoMode>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000e60:	f000 f9a8 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	24000d64 	.word	0x24000d64
 8000e6c:	40007800 	.word	0x40007800

08000e70 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_FMC_Init+0x94>)
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <MX_FMC_Init+0x98>)
 8000e8c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_FMC_Init+0x94>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_FMC_Init+0x94>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_FMC_Init+0x94>)
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_FMC_Init+0x94>)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_FMC_Init+0x94>)
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_FMC_Init+0x94>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_FMC_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <MX_FMC_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_FMC_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_FMC_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000ed6:	2310      	movs	r3, #16
 8000ed8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000eda:	2310      	movs	r3, #16
 8000edc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_FMC_Init+0x94>)
 8000eec:	f007 fdb6 	bl	8008a5c <HAL_SDRAM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000ef6:	f000 f95d 	bl	80011b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000df4 	.word	0x24000df4
 8000f08:	52004140 	.word	0x52004140

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	; 0x38
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	4b79      	ldr	r3, [pc, #484]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a77      	ldr	r2, [pc, #476]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b75      	ldr	r3, [pc, #468]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f40:	4b71      	ldr	r3, [pc, #452]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a70      	ldr	r2, [pc, #448]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b6d      	ldr	r3, [pc, #436]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a68      	ldr	r2, [pc, #416]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b66      	ldr	r3, [pc, #408]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7c:	4b62      	ldr	r3, [pc, #392]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a61      	ldr	r2, [pc, #388]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	4a59      	ldr	r2, [pc, #356]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb8:	4b53      	ldr	r3, [pc, #332]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	4a52      	ldr	r2, [pc, #328]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe6:	4b48      	ldr	r3, [pc, #288]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a43      	ldr	r2, [pc, #268]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <MX_GPIO_Init+0x1fc>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BCK_LIGHT_Pin|CFG_Pin|BEEP_Pin|F_RST_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2178      	movs	r1, #120	; 0x78
 8001016:	483d      	ldr	r0, [pc, #244]	; (800110c <MX_GPIO_Init+0x200>)
 8001018:	f002 fd02 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_CS_Pin|S_CS_Pin|M_CE_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001022:	483b      	ldr	r0, [pc, #236]	; (8001110 <MX_GPIO_Init+0x204>)
 8001024:	f002 fcfc 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102e:	4839      	ldr	r0, [pc, #228]	; (8001114 <MX_GPIO_Init+0x208>)
 8001030:	f002 fcf6 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRVEN_GPIO_Port, DRVEN_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2110      	movs	r1, #16
 8001038:	4837      	ldr	r0, [pc, #220]	; (8001118 <MX_GPIO_Init+0x20c>)
 800103a:	f002 fcf1 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BCK_LIGHT_Pin CFG_Pin BEEP_Pin F_RST_Pin */
  GPIO_InitStruct.Pin = BCK_LIGHT_Pin|CFG_Pin|BEEP_Pin|F_RST_Pin;
 800103e:	2378      	movs	r3, #120	; 0x78
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	482d      	ldr	r0, [pc, #180]	; (800110c <MX_GPIO_Init+0x200>)
 8001056:	f002 fb3b 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_CS_Pin S_CS_Pin M_CE_Pin */
  GPIO_InitStruct.Pin = F_CS_Pin|S_CS_Pin|M_CE_Pin;
 800105a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4827      	ldr	r0, [pc, #156]	; (8001110 <MX_GPIO_Init+0x204>)
 8001074:	f002 fb2c 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8001078:	2301      	movs	r3, #1
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108a:	4619      	mov	r1, r3
 800108c:	4823      	ldr	r0, [pc, #140]	; (800111c <MX_GPIO_Init+0x210>)
 800108e:	f002 fb1f 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_RST_Pin */
  GPIO_InitStruct.Pin = TP_RST_Pin;
 8001092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP_RST_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	481a      	ldr	r0, [pc, #104]	; (8001114 <MX_GPIO_Init+0x208>)
 80010ac:	f002 fb10 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ERXER_Pin */
  GPIO_InitStruct.Pin = ERXER_Pin;
 80010b0:	2304      	movs	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ERXER_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <MX_GPIO_Init+0x214>)
 80010c6:	f002 fb03 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXCLK_Pin */
  GPIO_InitStruct.Pin = EXCLK_Pin;
 80010ca:	2308      	movs	r3, #8
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXCLK_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <MX_GPIO_Init+0x214>)
 80010de:	f002 faf7 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRVEN_Pin */
  GPIO_InitStruct.Pin = DRVEN_Pin;
 80010e2:	2310      	movs	r3, #16
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DRVEN_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_GPIO_Init+0x20c>)
 80010fa:	f002 fae9 	bl	80036d0 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3738      	adds	r7, #56	; 0x38
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	58024400 	.word	0x58024400
 800110c:	58021000 	.word	0x58021000
 8001110:	58020800 	.word	0x58020800
 8001114:	58020c00 	.word	0x58020c00
 8001118:	58020400 	.word	0x58020400
 800111c:	58020000 	.word	0x58020000
 8001120:	58021800 	.word	0x58021800

08001124 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800112c:	f016 fcca 	bl	8017ac4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f00d f946 	bl	800e3c2 <osDelay>
 8001136:	e7fb      	b.n	8001130 <StartDefaultTask+0xc>

08001138 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800114a:	f001 f9d3 	bl	80024f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800114e:	2301      	movs	r3, #1
 8001150:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001152:	2300      	movs	r3, #0
 8001154:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800115a:	231f      	movs	r3, #31
 800115c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800115e:	2387      	movs	r3, #135	; 0x87
 8001160:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001162:	2300      	movs	r3, #0
 8001164:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001166:	2300      	movs	r3, #0
 8001168:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800116a:	2301      	movs	r3, #1
 800116c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800116e:	2301      	movs	r3, #1
 8001170:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800117a:	463b      	mov	r3, r7
 800117c:	4618      	mov	r0, r3
 800117e:	f001 f9f1 	bl	8002564 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001182:	2004      	movs	r0, #4
 8001184:	f001 f9ce 	bl	8002524 <HAL_MPU_Enable>

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011a2:	f001 f86f 	bl	8002284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40001400 	.word	0x40001400

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x38>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_MspInit+0x38>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_MspInit+0x38>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	210f      	movs	r1, #15
 80011e8:	f06f 0001 	mvn.w	r0, #1
 80011ec:	f001 f95a 	bl	80024a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400

080011fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <HAL_CRC_MspInit+0x3c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_CRC_MspInit+0x40>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_CRC_MspInit+0x40>)
 8001216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_CRC_MspInit+0x40>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	58024c00 	.word	0x58024c00
 800123c:	58024400 	.word	0x58024400

08001240 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_ETH_MspInit+0x144>)
 800125e:	4293      	cmp	r3, r2
 8001260:	f040 808b 	bne.w	800137a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <HAL_ETH_MspInit+0x148>)
 8001266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <HAL_ETH_MspInit+0x148>)
 800126c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001270:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <HAL_ETH_MspInit+0x148>)
 8001276:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <HAL_ETH_MspInit+0x148>)
 8001284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <HAL_ETH_MspInit+0x148>)
 800128a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_ETH_MspInit+0x148>)
 8001294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a29      	ldr	r2, [pc, #164]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_ETH_MspInit+0x148>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_ETH_MspInit+0x148>)
 8001302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_ETH_MspInit+0x148>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001318:	2332      	movs	r3, #50	; 0x32
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001328:	230b      	movs	r3, #11
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <HAL_ETH_MspInit+0x14c>)
 8001334:	f002 f9cc 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001338:	2386      	movs	r3, #134	; 0x86
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001348:	230b      	movs	r3, #11
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	480f      	ldr	r0, [pc, #60]	; (8001390 <HAL_ETH_MspInit+0x150>)
 8001354:	f002 f9bc 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001358:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136a:	230b      	movs	r3, #11
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <HAL_ETH_MspInit+0x154>)
 8001376:	f002 f9ab 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3738      	adds	r7, #56	; 0x38
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40028000 	.word	0x40028000
 8001388:	58024400 	.word	0x58024400
 800138c:	58020800 	.word	0x58020800
 8001390:	58020000 	.word	0x58020000
 8001394:	58021800 	.word	0x58021800

08001398 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1a      	ldr	r2, [pc, #104]	; (8001420 <HAL_FDCAN_MspInit+0x88>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12e      	bne.n	8001418 <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_FDCAN_MspInit+0x8c>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80013f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001408:	2309      	movs	r3, #9
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_FDCAN_MspInit+0x90>)
 8001414:	f002 f95c 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	4000a400 	.word	0x4000a400
 8001424:	58024400 	.word	0x58024400
 8001428:	58020400 	.word	0x58020400

0800142c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0b8      	sub	sp, #224	; 0xe0
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	22b4      	movs	r2, #180	; 0xb4
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f02b fbb7 	bl	802cbc0 <memset>
  if(hi2c->Instance==I2C1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_I2C_MspInit+0x154>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d144      	bne.n	80014e6 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800145c:	2308      	movs	r3, #8
 800145e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8001460:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4618      	mov	r0, r3
 800146e:	f005 ffd9 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001478:	f7ff fe9c 	bl	80011b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_I2C_MspInit+0x158>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <HAL_I2C_MspInit+0x158>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_I2C_MspInit+0x158>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800149a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800149e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b4:	2304      	movs	r3, #4
 80014b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014be:	4619      	mov	r1, r3
 80014c0:	4831      	ldr	r0, [pc, #196]	; (8001588 <HAL_I2C_MspInit+0x15c>)
 80014c2:	f002 f905 	bl	80036d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_I2C_MspInit+0x158>)
 80014c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <HAL_I2C_MspInit+0x158>)
 80014ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_I2C_MspInit+0x158>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80014e4:	e048      	b.n	8001578 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C4)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_I2C_MspInit+0x160>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d143      	bne.n	8001578 <HAL_I2C_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80014f0:	2310      	movs	r3, #16
 80014f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 80014f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f005 ff8f 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_MspInit+0xe4>
      Error_Handler();
 800150c:	f7ff fe52 	bl	80011b4 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_I2C_MspInit+0x158>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_I2C_MspInit+0x158>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_I2C_MspInit+0x158>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800152e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001532:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001536:	2312      	movs	r3, #18
 8001538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001548:	2304      	movs	r3, #4
 800154a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001552:	4619      	mov	r1, r3
 8001554:	480e      	ldr	r0, [pc, #56]	; (8001590 <HAL_I2C_MspInit+0x164>)
 8001556:	f002 f8bb 	bl	80036d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_I2C_MspInit+0x158>)
 800155c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001560:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_I2C_MspInit+0x158>)
 8001562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001566:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_I2C_MspInit+0x158>)
 800156c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
}
 8001578:	bf00      	nop
 800157a:	37e0      	adds	r7, #224	; 0xe0
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005400 	.word	0x40005400
 8001584:	58024400 	.word	0x58024400
 8001588:	58020400 	.word	0x58020400
 800158c:	58001c00 	.word	0x58001c00
 8001590:	58020c00 	.word	0x58020c00

08001594 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0bc      	sub	sp, #240	; 0xf0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b0:	22b4      	movs	r2, #180	; 0xb4
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f02b fb03 	bl	802cbc0 <memset>
  if(hltdc->Instance==LTDC)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4abe      	ldr	r2, [pc, #760]	; (80018b8 <HAL_LTDC_MspInit+0x324>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	f040 8175 	bne.w	80018b0 <HAL_LTDC_MspInit+0x31c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3N = 100;
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3P = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3Q = 8;
 80015d8:	2308      	movs	r3, #8
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3R = 25;
 80015dc:	2319      	movs	r3, #25
 80015de:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80015e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015e4:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 ff16 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80015fe:	f7ff fdd9 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001602:	4bae      	ldr	r3, [pc, #696]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001608:	4aac      	ldr	r2, [pc, #688]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800160a:	f043 0308 	orr.w	r3, r3, #8
 800160e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001612:	4baa      	ldr	r3, [pc, #680]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001614:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001620:	4ba6      	ldr	r3, [pc, #664]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4aa5      	ldr	r2, [pc, #660]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001628:	f043 0320 	orr.w	r3, r3, #32
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4ba2      	ldr	r3, [pc, #648]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0320 	and.w	r3, r3, #32
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b9f      	ldr	r3, [pc, #636]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a9d      	ldr	r2, [pc, #628]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b9b      	ldr	r3, [pc, #620]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a96      	ldr	r2, [pc, #600]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
 8001678:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800167a:	4b90      	ldr	r3, [pc, #576]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a8e      	ldr	r2, [pc, #568]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b88      	ldr	r3, [pc, #544]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	4a87      	ldr	r2, [pc, #540]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a8:	4b84      	ldr	r3, [pc, #528]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 80016aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	4b81      	ldr	r3, [pc, #516]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	4a7f      	ldr	r2, [pc, #508]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c6:	4b7d      	ldr	r3, [pc, #500]	; (80018bc <HAL_LTDC_MspInit+0x328>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    PA15(JTDI)     ------> LTDC_B6
    PC10     ------> LTDC_R2
    PD2     ------> LTDC_B7
    PD6     ------> LTDC_B2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016ee:	230e      	movs	r3, #14
 80016f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f8:	4619      	mov	r1, r3
 80016fa:	4871      	ldr	r0, [pc, #452]	; (80018c0 <HAL_LTDC_MspInit+0x32c>)
 80016fc:	f001 ffe8 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001700:	f248 2378 	movw	r3, #33400	; 0x8278
 8001704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_9|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800171a:	230e      	movs	r3, #14
 800171c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001724:	4619      	mov	r1, r3
 8001726:	4867      	ldr	r0, [pc, #412]	; (80018c4 <HAL_LTDC_MspInit+0x330>)
 8001728:	f001 ffd2 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001744:	2309      	movs	r3, #9
 8001746:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800174e:	4619      	mov	r1, r3
 8001750:	485d      	ldr	r0, [pc, #372]	; (80018c8 <HAL_LTDC_MspInit+0x334>)
 8001752:	f001 ffbd 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 8001756:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001770:	230e      	movs	r3, #14
 8001772:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001776:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800177a:	4619      	mov	r1, r3
 800177c:	4852      	ldr	r0, [pc, #328]	; (80018c8 <HAL_LTDC_MspInit+0x334>)
 800177e:	f001 ffa7 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800179a:	230e      	movs	r3, #14
 800179c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017a4:	4619      	mov	r1, r3
 80017a6:	4849      	ldr	r0, [pc, #292]	; (80018cc <HAL_LTDC_MspInit+0x338>)
 80017a8:	f001 ff92 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80017ac:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80017b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017c6:	230e      	movs	r3, #14
 80017c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017d0:	4619      	mov	r1, r3
 80017d2:	483f      	ldr	r0, [pc, #252]	; (80018d0 <HAL_LTDC_MspInit+0x33c>)
 80017d4:	f001 ff7c 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 80017f2:	230a      	movs	r3, #10
 80017f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017fc:	4619      	mov	r1, r3
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <HAL_LTDC_MspInit+0x33c>)
 8001800:	f001 ff66 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 800181e:	230d      	movs	r3, #13
 8001820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001828:	4619      	mov	r1, r3
 800182a:	4826      	ldr	r0, [pc, #152]	; (80018c4 <HAL_LTDC_MspInit+0x330>)
 800182c:	f001 ff50 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001834:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 800184a:	230c      	movs	r3, #12
 800184c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001854:	4619      	mov	r1, r3
 8001856:	481b      	ldr	r0, [pc, #108]	; (80018c4 <HAL_LTDC_MspInit+0x330>)
 8001858:	f001 ff3a 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800185c:	2304      	movs	r3, #4
 800185e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001874:	2309      	movs	r3, #9
 8001876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800187e:	4619      	mov	r1, r3
 8001880:	4814      	ldr	r0, [pc, #80]	; (80018d4 <HAL_LTDC_MspInit+0x340>)
 8001882:	f001 ff25 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800189e:	230e      	movs	r3, #14
 80018a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018a8:	4619      	mov	r1, r3
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <HAL_LTDC_MspInit+0x340>)
 80018ac:	f001 ff10 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80018b0:	bf00      	nop
 80018b2:	37f0      	adds	r7, #240	; 0xf0
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	50001000 	.word	0x50001000
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58021400 	.word	0x58021400
 80018c4:	58020000 	.word	0x58020000
 80018c8:	58020400 	.word	0x58020400
 80018cc:	58021800 	.word	0x58021800
 80018d0:	58020800 	.word	0x58020800
 80018d4:	58020c00 	.word	0x58020c00

080018d8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0ba      	sub	sp, #232	; 0xe8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	22b4      	movs	r2, #180	; 0xb4
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f02b f961 	bl	802cbc0 <memset>
  if(hospi->Instance==OCTOSPI1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_OSPI_MspInit+0x1b8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f040 80bf 	bne.w	8001a88 <HAL_OSPI_MspInit+0x1b0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800190a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 8001910:	2310      	movs	r3, #16
 8001912:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	4618      	mov	r0, r3
 800191a:	f005 fd83 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001924:	f7ff fc46 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001928:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 800192a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800192e:	4a59      	ldr	r2, [pc, #356]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001934:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001938:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 800193a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001948:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800194c:	4a51      	ldr	r2, [pc, #324]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001956:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001958:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800195c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a4a      	ldr	r2, [pc, #296]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a42      	ldr	r2, [pc, #264]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 800198a:	f043 0320 	orr.w	r3, r3, #32
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	4a3b      	ldr	r2, [pc, #236]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_OSPI_MspInit+0x1bc>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PB2     ------> OCTOSPIM_P1_CLK
    PC11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019dc:	2304      	movs	r3, #4
 80019de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80019f4:	2309      	movs	r3, #9
 80019f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4825      	ldr	r0, [pc, #148]	; (8001a98 <HAL_OSPI_MspInit+0x1c0>)
 8001a02:	f001 fe65 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001a06:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001a20:	230a      	movs	r3, #10
 8001a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <HAL_OSPI_MspInit+0x1c4>)
 8001a2e:	f001 fe4f 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a32:	2304      	movs	r3, #4
 8001a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a4a:	2309      	movs	r3, #9
 8001a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <HAL_OSPI_MspInit+0x1c8>)
 8001a58:	f001 fe3a 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001a76:	2309      	movs	r3, #9
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_OSPI_MspInit+0x1cc>)
 8001a84:	f001 fe24 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001a88:	bf00      	nop
 8001a8a:	37e8      	adds	r7, #232	; 0xe8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	52005000 	.word	0x52005000
 8001a94:	58024400 	.word	0x58024400
 8001a98:	58021000 	.word	0x58021000
 8001a9c:	58021400 	.word	0x58021400
 8001aa0:	58020400 	.word	0x58020400
 8001aa4:	58020800 	.word	0x58020800

08001aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b8      	sub	sp, #224	; 0xe0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	22b4      	movs	r2, #180	; 0xb4
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f02b f879 	bl	802cbc0 <memset>
  if(hspi->Instance==SPI2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <HAL_SPI_MspInit+0x108>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d166      	bne.n	8001ba6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae4:	f107 0318 	add.w	r3, r7, #24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fc9b 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001af4:	f7ff fb5e 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b3c:	f043 0308 	orr.w	r3, r3, #8
 8001b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_SPI_MspInit+0x10c>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b52:	230c      	movs	r3, #12
 8001b54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b74:	4619      	mov	r1, r3
 8001b76:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <HAL_SPI_MspInit+0x110>)
 8001b78:	f001 fdaa 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b94:	2305      	movs	r3, #5
 8001b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <HAL_SPI_MspInit+0x114>)
 8001ba2:	f001 fd95 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	37e0      	adds	r7, #224	; 0xe0
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40003800 	.word	0x40003800
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58020800 	.word	0x58020800
 8001bbc:	58020c00 	.word	0x58020c00

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0b8      	sub	sp, #224	; 0xe0
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	22b4      	movs	r2, #180	; 0xb4
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f02a ffed 	bl	802cbc0 <memset>
  if(huart->Instance==UART7)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_UART_MspInit+0x104>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d165      	bne.n	8001cbc <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 fc10 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c0a:	f7ff fad3 	bl	80011b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c14:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_UART_MspInit+0x108>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <HAL_UART_MspInit+0x10c>)
 8001c8e:	f001 fd1f 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c92:	2308      	movs	r3, #8
 8001c94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001caa:	230b      	movs	r3, #11
 8001cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_UART_MspInit+0x110>)
 8001cb8:	f001 fd0a 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	37e0      	adds	r7, #224	; 0xe0
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40007800 	.word	0x40007800
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58021400 	.word	0x58021400
 8001cd0:	58020400 	.word	0x58020400

08001cd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_FMC_MspInit+0x108>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d170      	bne.n	8001dd2 <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_FMC_MspInit+0x108>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_FMC_MspInit+0x10c>)
 8001cf8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001cfc:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <HAL_FMC_MspInit+0x10c>)
 8001cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d02:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001d06:	4b36      	ldr	r3, [pc, #216]	; (8001de0 <HAL_FMC_MspInit+0x10c>)
 8001d08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d14:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d26:	230c      	movs	r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482d      	ldr	r0, [pc, #180]	; (8001de4 <HAL_FMC_MspInit+0x110>)
 8001d30:	f001 fcce 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d34:	2301      	movs	r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d44:	230c      	movs	r3, #12
 8001d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4826      	ldr	r0, [pc, #152]	; (8001de8 <HAL_FMC_MspInit+0x114>)
 8001d4e:	f001 fcbf 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001d52:	f248 1333 	movw	r3, #33075	; 0x8133
 8001d56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d64:	230c      	movs	r3, #12
 8001d66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481f      	ldr	r0, [pc, #124]	; (8001dec <HAL_FMC_MspInit+0x118>)
 8001d6e:	f001 fcaf 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d72:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d84:	230c      	movs	r3, #12
 8001d86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4818      	ldr	r0, [pc, #96]	; (8001df0 <HAL_FMC_MspInit+0x11c>)
 8001d8e:	f001 fc9f 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001d92:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001d96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001da4:	230c      	movs	r3, #12
 8001da6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <HAL_FMC_MspInit+0x120>)
 8001dae:	f001 fc8f 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001db2:	2360      	movs	r3, #96	; 0x60
 8001db4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480b      	ldr	r0, [pc, #44]	; (8001df8 <HAL_FMC_MspInit+0x124>)
 8001dcc:	f001 fc80 	bl	80036d0 <HAL_GPIO_Init>
 8001dd0:	e000      	b.n	8001dd4 <HAL_FMC_MspInit+0x100>
    return;
 8001dd2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	24000e34 	.word	0x24000e34
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58021400 	.word	0x58021400
 8001de8:	58020800 	.word	0x58020800
 8001dec:	58021800 	.word	0x58021800
 8001df0:	58021000 	.word	0x58021000
 8001df4:	58020c00 	.word	0x58020c00
 8001df8:	58020400 	.word	0x58020400

08001dfc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e04:	f7ff ff66 	bl	8001cd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b090      	sub	sp, #64	; 0x40
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d827      	bhi.n	8001e6e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	2037      	movs	r0, #55	; 0x37
 8001e24:	f000 fb3e 	bl	80024a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e28:	2037      	movs	r0, #55	; 0x37
 8001e2a:	f000 fb55 	bl	80024d8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001e2e:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_InitTick+0xc4>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_InitTick+0xc8>)
 8001e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3a:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <HAL_InitTick+0xc8>)
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_InitTick+0xc8>)
 8001e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e52:	f107 0210 	add.w	r2, r7, #16
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f005 fa9f 	bl	80073a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d106      	bne.n	8001e7a <HAL_InitTick+0x6a>
 8001e6c:	e001      	b.n	8001e72 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e02b      	b.n	8001eca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e72:	f005 fa69 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8001e76:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001e78:	e004      	b.n	8001e84 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e7a:	f005 fa65 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_InitTick+0xcc>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <HAL_InitTick+0xd4>)
 8001e96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001e9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e9e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001eb2:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001eb4:	f006 ff2f 	bl	8008d16 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <HAL_InitTick+0xd0>)
 8001ec0:	f006 ff8a 	bl	8008dd8 <HAL_TIM_Base_Start_IT>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	e000      	b.n	8001eca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3740      	adds	r7, #64	; 0x40
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2400000c 	.word	0x2400000c
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	24000e38 	.word	0x24000e38
 8001ee4:	40001400 	.word	0x40001400

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM7_IRQHandler+0x10>)
 8001f1a:	f006 ffe3 	bl	8008ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	24000e38 	.word	0x24000e38

08001f28 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <OTG_HS_IRQHandler+0x10>)
 8001f2e:	f003 f997 	bl	8005260 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2400cef4 	.word	0x2400cef4

08001f3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	return 1;
 8001f40:	2301      	movs	r3, #1
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_kill>:

int _kill(int pid, int sig)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f56:	f02a fdd9 	bl	802cb0c <__errno>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2216      	movs	r2, #22
 8001f5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_exit>:

void _exit (int status)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ffe7 	bl	8001f4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f7e:	e7fe      	b.n	8001f7e <_exit+0x12>

08001f80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e00a      	b.n	8001fa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f92:	f3af 8000 	nop.w
 8001f96:	4601      	mov	r1, r0
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	b2ca      	uxtb	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf0      	blt.n	8001f92 <_read+0x12>
	}

return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e009      	b.n	8001fe0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf1      	blt.n	8001fcc <_write+0x12>
	}
	return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_close>:

int _close(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201a:	605a      	str	r2, [r3, #4]
	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_isatty>:

int _isatty(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f02a fd3e 	bl	802cb0c <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	24050000 	.word	0x24050000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	24000e84 	.word	0x24000e84
 80020c4:	2400dad8 	.word	0x2400dad8

080020c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020cc:	4b32      	ldr	r3, [pc, #200]	; (8002198 <SystemInit+0xd0>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a31      	ldr	r2, [pc, #196]	; (8002198 <SystemInit+0xd0>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <SystemInit+0xd4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d807      	bhi.n	80020f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <SystemInit+0xd4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 030f 	bic.w	r3, r3, #15
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <SystemInit+0xd4>)
 80020f2:	f043 0307 	orr.w	r3, r3, #7
 80020f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <SystemInit+0xd8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <SystemInit+0xd8>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <SystemInit+0xd8>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <SystemInit+0xd8>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4924      	ldr	r1, [pc, #144]	; (80021a0 <SystemInit+0xd8>)
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <SystemInit+0xdc>)
 8002112:	4013      	ands	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <SystemInit+0xd4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <SystemInit+0xd4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 030f 	bic.w	r3, r3, #15
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <SystemInit+0xd4>)
 800212c:	f043 0307 	orr.w	r3, r3, #7
 8002130:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <SystemInit+0xd8>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <SystemInit+0xd8>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <SystemInit+0xd8>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <SystemInit+0xd8>)
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <SystemInit+0xe0>)
 8002148:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <SystemInit+0xd8>)
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <SystemInit+0xe4>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <SystemInit+0xd8>)
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <SystemInit+0xe8>)
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <SystemInit+0xd8>)
 8002158:	2200      	movs	r2, #0
 800215a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <SystemInit+0xd8>)
 800215e:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <SystemInit+0xe8>)
 8002160:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <SystemInit+0xd8>)
 8002164:	2200      	movs	r2, #0
 8002166:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <SystemInit+0xd8>)
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <SystemInit+0xe8>)
 800216c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <SystemInit+0xd8>)
 8002170:	2200      	movs	r2, #0
 8002172:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <SystemInit+0xd8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <SystemInit+0xd8>)
 800217a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <SystemInit+0xd8>)
 8002182:	2200      	movs	r2, #0
 8002184:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <SystemInit+0xec>)
 8002188:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800218c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00
 800219c:	52002000 	.word	0x52002000
 80021a0:	58024400 	.word	0x58024400
 80021a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80021a8:	02020200 	.word	0x02020200
 80021ac:	01ff0000 	.word	0x01ff0000
 80021b0:	01010280 	.word	0x01010280
 80021b4:	52004000 	.word	0x52004000

080021b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021bc:	f7ff ff84 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021c2:	490d      	ldr	r1, [pc, #52]	; (80021f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d8:	4c0a      	ldr	r4, [pc, #40]	; (8002204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021e6:	f02a fca9 	bl	802cb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ea:	f7fe fa7d 	bl	80006e8 <main>
  bx  lr
 80021ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80021f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021f8:	24000664 	.word	0x24000664
  ldr r2, =_sidata
 80021fc:	08030d70 	.word	0x08030d70
  ldr r2, =_sbss
 8002200:	24000724 	.word	0x24000724
  ldr r4, =_ebss
 8002204:	2400dad8 	.word	0x2400dad8

08002208 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC3_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002212:	2003      	movs	r0, #3
 8002214:	f000 f93b 	bl	800248e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002218:	f004 feec 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_Init+0x68>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	4913      	ldr	r1, [pc, #76]	; (8002278 <HAL_Init+0x6c>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_Init+0x68>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_Init+0x6c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_Init+0x70>)
 800224e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_Init+0x74>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002256:	200f      	movs	r0, #15
 8002258:	f7ff fdda 	bl	8001e10 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e002      	b.n	800226c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002266:	f7fe ffab 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024400 	.word	0x58024400
 8002278:	0802ec68 	.word	0x0802ec68
 800227c:	24000008 	.word	0x24000008
 8002280:	24000004 	.word	0x24000004

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	24000010 	.word	0x24000010
 80022a8:	24000e88 	.word	0x24000e88

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	24000e88 	.word	0x24000e88

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	24000010 	.word	0x24000010

0800230c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800231c:	4904      	ldr	r1, [pc, #16]	; (8002330 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	58000400 	.word	0x58000400

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x40>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	05fa0000 	.word	0x05fa0000

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff4c 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b2:	f7ff ff63 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	6978      	ldr	r0, [r7, #20]
 80024be:	f7ff ffb3 	bl	8002428 <NVIC_EncodePriority>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff82 	bl	80023d4 <__NVIC_SetPriority>
}
 80024d0:	bf00      	nop
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff56 	bl	8002398 <__NVIC_EnableIRQ>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80024f8:	f3bf 8f5f 	dmb	sy
}
 80024fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_MPU_Disable+0x28>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_MPU_Disable+0x28>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_MPU_Disable+0x2c>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	e000ed90 	.word	0xe000ed90

08002524 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_MPU_Enable+0x38>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_MPU_Enable+0x3c>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_MPU_Enable+0x3c>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002542:	f3bf 8f4f 	dsb	sy
}
 8002546:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002548:	f3bf 8f6f 	isb	sy
}
 800254c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed90 	.word	0xe000ed90
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	785a      	ldrb	r2, [r3, #1]
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_MPU_ConfigRegion+0x84>)
 8002572:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d029      	beq.n	80025d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_MPU_ConfigRegion+0x84>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7b1b      	ldrb	r3, [r3, #12]
 8002588:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7adb      	ldrb	r3, [r3, #11]
 800258e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002590:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7a9b      	ldrb	r3, [r3, #10]
 8002596:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002598:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7b9b      	ldrb	r3, [r3, #14]
 80025a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7bdb      	ldrb	r3, [r3, #15]
 80025ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7a5b      	ldrb	r3, [r3, #9]
 80025b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7a1b      	ldrb	r3, [r3, #8]
 80025be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80025ce:	e005      	b.n	80025dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_MPU_ConfigRegion+0x84>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_MPU_ConfigRegion+0x84>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed90 	.word	0xe000ed90

080025ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e054      	b.n	80026a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7f5b      	ldrb	r3, [r3, #29]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fdf4 	bl	80011fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	791b      	ldrb	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_CRC_Init+0xc4>)
 8002628:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0218 	bic.w	r2, r2, #24
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	e00c      	b.n	8002656 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	461a      	mov	r2, r3
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f834 	bl	80026b4 <HAL_CRCEx_Polynomial_Set>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e028      	b.n	80026a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	795b      	ldrb	r3, [r3, #5]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	e004      	b.n	8002674 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6912      	ldr	r2, [r2, #16]
 8002672:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	04c11db7 	.word	0x04c11db7

080026b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80026c4:	231f      	movs	r3, #31
 80026c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80026c8:	bf00      	nop
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	613a      	str	r2, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b18      	cmp	r3, #24
 80026ec:	d846      	bhi.n	800277c <HAL_CRCEx_Polynomial_Set+0xc8>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002783 	.word	0x08002783
 80026f8:	0800277d 	.word	0x0800277d
 80026fc:	0800277d 	.word	0x0800277d
 8002700:	0800277d 	.word	0x0800277d
 8002704:	0800277d 	.word	0x0800277d
 8002708:	0800277d 	.word	0x0800277d
 800270c:	0800277d 	.word	0x0800277d
 8002710:	0800277d 	.word	0x0800277d
 8002714:	08002771 	.word	0x08002771
 8002718:	0800277d 	.word	0x0800277d
 800271c:	0800277d 	.word	0x0800277d
 8002720:	0800277d 	.word	0x0800277d
 8002724:	0800277d 	.word	0x0800277d
 8002728:	0800277d 	.word	0x0800277d
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800277d 	.word	0x0800277d
 8002734:	08002765 	.word	0x08002765
 8002738:	0800277d 	.word	0x0800277d
 800273c:	0800277d 	.word	0x0800277d
 8002740:	0800277d 	.word	0x0800277d
 8002744:	0800277d 	.word	0x0800277d
 8002748:	0800277d 	.word	0x0800277d
 800274c:	0800277d 	.word	0x0800277d
 8002750:	0800277d 	.word	0x0800277d
 8002754:	08002759 	.word	0x08002759
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d913      	bls.n	8002786 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002762:	e010      	b.n	8002786 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b07      	cmp	r3, #7
 8002768:	d90f      	bls.n	800278a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800276e:	e00c      	b.n	800278a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0f      	cmp	r3, #15
 8002774:	d90b      	bls.n	800278e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800277a:	e008      	b.n	800278e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
      break;
 8002780:	e006      	b.n	8002790 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800278e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 0118 	bic.w	r1, r3, #24
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0cf      	b.n	8002972 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2223      	movs	r2, #35	; 0x23
 80027e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fd2b 	bl	8001240 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b64      	ldr	r3, [pc, #400]	; (800297c <HAL_ETH_Init+0x1bc>)
 80027ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <HAL_ETH_Init+0x1bc>)
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80027fa:	4b60      	ldr	r3, [pc, #384]	; (800297c <HAL_ETH_Init+0x1bc>)
 80027fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7a1b      	ldrb	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002810:	2000      	movs	r0, #0
 8002812:	f7ff fd7b 	bl	800230c <HAL_SYSCFG_ETHInterfaceSelect>
 8002816:	e003      	b.n	8002820 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002818:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800281c:	f7ff fd76 	bl	800230c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_ETH_Init+0x1c0>)
 8002822:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800283a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7ff fd36 	bl	80022ac <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002842:	e011      	b.n	8002868 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002844:	f7ff fd32 	bl	80022ac <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002852:	d909      	bls.n	8002868 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2204      	movs	r2, #4
 8002858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	22e0      	movs	r2, #224	; 0xe0
 8002860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e084      	b.n	8002972 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e4      	bne.n	8002844 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f886 	bl	800298c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002880:	f004 fd32 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8002884:	4603      	mov	r3, r0
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <HAL_ETH_Init+0x1c4>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	0c9a      	lsrs	r2, r3, #18
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3a01      	subs	r2, #1
 8002894:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 fa71 	bl	8002d80 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80028aa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028ba:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	22e0      	movs	r2, #224	; 0xe0
 80028d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e049      	b.n	8002972 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_ETH_Init+0x1c8>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6952      	ldr	r2, [r2, #20]
 80028f2:	0051      	lsls	r1, r2, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fad9 	bl	8002eba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb1f 	bl	8002f4c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	3305      	adds	r3, #5
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	3303      	adds	r3, #3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	3302      	adds	r3, #2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	041b      	lsls	r3, r3, #16
 8002940:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3301      	adds	r3, #1
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800294c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800295a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800295c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2210      	movs	r2, #16
 800296c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
 8002980:	58000400 	.word	0x58000400
 8002984:	431bde83 	.word	0x431bde83
 8002988:	ffff8001 	.word	0xffff8001

0800298c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800299c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029a6:	f004 fc9f 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 80029aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d908      	bls.n	80029c6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d804      	bhi.n	80029c6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e027      	b.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d908      	bls.n	80029e0 <HAL_ETH_SetMDIOClockRange+0x54>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d204      	bcs.n	80029e0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e01a      	b.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d303      	bcc.n	80029f0 <HAL_ETH_SetMDIOClockRange+0x64>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d911      	bls.n	8002a14 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d908      	bls.n	8002a0a <HAL_ETH_SetMDIOClockRange+0x7e>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_ETH_SetMDIOClockRange+0xac>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d804      	bhi.n	8002a0a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e005      	b.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e000      	b.n	8002a16 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a14:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	01312cff 	.word	0x01312cff
 8002a2c:	02160ebf 	.word	0x02160ebf
 8002a30:	03938700 	.word	0x03938700
 8002a34:	05f5e0ff 	.word	0x05f5e0ff
 8002a38:	08f0d17f 	.word	0x08f0d17f

08002a3c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	7b1b      	ldrb	r3, [r3, #12]
 8002a5c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7b5b      	ldrb	r3, [r3, #13]
 8002a64:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	7b9b      	ldrb	r3, [r3, #14]
 8002a6c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7bdb      	ldrb	r3, [r3, #15]
 8002a74:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	7c12      	ldrb	r2, [r2, #16]
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d102      	bne.n	8002a86 <ETH_SetMACConfig+0x4a>
 8002a80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a84:	e000      	b.n	8002a88 <ETH_SetMACConfig+0x4c>
 8002a86:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a88:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	7c52      	ldrb	r2, [r2, #17]
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d102      	bne.n	8002a98 <ETH_SetMACConfig+0x5c>
 8002a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a96:	e000      	b.n	8002a9a <ETH_SetMACConfig+0x5e>
 8002a98:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	7c9b      	ldrb	r3, [r3, #18]
 8002aa0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002aa2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002aa8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	7f1b      	ldrb	r3, [r3, #28]
 8002ab4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	7f5b      	ldrb	r3, [r3, #29]
 8002abc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002abe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	7f92      	ldrb	r2, [r2, #30]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d102      	bne.n	8002ace <ETH_SetMACConfig+0x92>
 8002ac8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002acc:	e000      	b.n	8002ad0 <ETH_SetMACConfig+0x94>
 8002ace:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ad0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	7fdb      	ldrb	r3, [r3, #31]
 8002ad6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ad8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d102      	bne.n	8002aea <ETH_SetMACConfig+0xae>
 8002ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae8:	e000      	b.n	8002aec <ETH_SetMACConfig+0xb0>
 8002aea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002aec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002af2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002afa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002afc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <ETH_SetMACConfig+0x22c>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b26:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b30:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002b32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b3a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002b3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002b44:	2a00      	cmp	r2, #0
 8002b46:	d102      	bne.n	8002b4e <ETH_SetMACConfig+0x112>
 8002b48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b4c:	e000      	b.n	8002b50 <ETH_SetMACConfig+0x114>
 8002b4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002b50:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <ETH_SetMACConfig+0x230>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b74:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <ETH_SetMACConfig+0x234>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	68f9      	ldr	r1, [r7, #12]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b98:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002b9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ba6:	2a00      	cmp	r2, #0
 8002ba8:	d101      	bne.n	8002bae <ETH_SetMACConfig+0x172>
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	e000      	b.n	8002bb0 <ETH_SetMACConfig+0x174>
 8002bae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002bb0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	430b      	orrs	r3, r1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002bd8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002be0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f023 0103 	bic.w	r1, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c06:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d101      	bne.n	8002c2a <ETH_SetMACConfig+0x1ee>
 8002c26:	2240      	movs	r2, #64	; 0x40
 8002c28:	e000      	b.n	8002c2c <ETH_SetMACConfig+0x1f0>
 8002c2a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c34:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002c3e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c4c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	00048083 	.word	0x00048083
 8002c6c:	c0f88000 	.word	0xc0f88000
 8002c70:	fffffef0 	.word	0xfffffef0

08002c74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <ETH_SetDMAConfig+0xf8>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6811      	ldr	r1, [r2, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c9a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	791b      	ldrb	r3, [r3, #4]
 8002ca0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002ca6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7b1b      	ldrb	r3, [r3, #12]
 8002cac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <ETH_SetDMAConfig+0xfc>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ccc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	7b5b      	ldrb	r3, [r3, #13]
 8002cd2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <ETH_SetDMAConfig+0x100>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	68f9      	ldr	r1, [r7, #12]
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cf8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	7d1b      	ldrb	r3, [r3, #20]
 8002d04:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	7f5b      	ldrb	r3, [r3, #29]
 8002d0c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <ETH_SetDMAConfig+0x104>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	68f9      	ldr	r1, [r7, #12]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d2e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	7f1b      	ldrb	r3, [r3, #28]
 8002d36:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d48:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <ETH_SetDMAConfig+0x108>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d5c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	ffff87fd 	.word	0xffff87fd
 8002d70:	ffff2ffe 	.word	0xffff2ffe
 8002d74:	fffec000 	.word	0xfffec000
 8002d78:	ffc0efef 	.word	0xffc0efef
 8002d7c:	7fc0ffff 	.word	0x7fc0ffff

08002d80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b0a4      	sub	sp, #144	; 0x90
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dc0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dd8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ddc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002de4:	2300      	movs	r3, #0
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e02:	2300      	movs	r3, #0
 8002e04:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e34:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fde6 	bl	8002a3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e70:	2301      	movs	r3, #1
 8002e72:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e74:	2301      	movs	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ea0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fee1 	bl	8002c74 <ETH_SetDMAConfig>
}
 8002eb2:	bf00      	nop
 8002eb4:	3790      	adds	r7, #144	; 0x90
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e01d      	b.n	8002f04 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	3206      	adds	r2, #6
 8002efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d9de      	bls.n	8002ec8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e023      	b.n	8002fa2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	3212      	adds	r2, #18
 8002f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d9d8      	bls.n	8002f5a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b098      	sub	sp, #96	; 0x60
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003010:	4a84      	ldr	r2, [pc, #528]	; (8003224 <HAL_FDCAN_Init+0x21c>)
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4611      	mov	r1, r2
 8003018:	224c      	movs	r2, #76	; 0x4c
 800301a:	4618      	mov	r0, r3
 800301c:	f029 fdc2 	bl	802cba4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1c6      	b.n	80033b8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7e      	ldr	r2, [pc, #504]	; (8003228 <HAL_FDCAN_Init+0x220>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d106      	bne.n	8003042 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800303c:	461a      	mov	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe f99e 	bl	8001398 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306c:	f7ff f91e 	bl	80022ac <HAL_GetTick>
 8003070:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003072:	e014      	b.n	800309e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003074:	f7ff f91a 	bl	80022ac <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b0a      	cmp	r3, #10
 8003080:	d90d      	bls.n	800309e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e18c      	b.n	80033b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d0e3      	beq.n	8003074 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030bc:	f7ff f8f6 	bl	80022ac <HAL_GetTick>
 80030c0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030c2:	e014      	b.n	80030ee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030c4:	f7ff f8f2 	bl	80022ac <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b0a      	cmp	r3, #10
 80030d0:	d90d      	bls.n	80030ee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e164      	b.n	80033b8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0e3      	beq.n	80030c4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0202 	orr.w	r2, r2, #2
 800310a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7c1b      	ldrb	r3, [r3, #16]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d108      	bne.n	8003126 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	619a      	str	r2, [r3, #24]
 8003124:	e007      	b.n	8003136 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003134:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	7c5b      	ldrb	r3, [r3, #17]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e007      	b.n	8003160 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800315e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7c9b      	ldrb	r3, [r3, #18]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d108      	bne.n	800317a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003176:	619a      	str	r2, [r3, #24]
 8003178:	e007      	b.n	800318a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003188:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80031ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0204 	orr.w	r2, r2, #4
 80031d6:	619a      	str	r2, [r3, #24]
 80031d8:	e030      	b.n	800323c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02c      	beq.n	800323c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d020      	beq.n	800322c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0210 	orr.w	r2, r2, #16
 8003208:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d114      	bne.n	800323c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	619a      	str	r2, [r3, #24]
 8003222:	e00b      	b.n	800323c <HAL_FDCAN_Init+0x234>
 8003224:	0802dc48 	.word	0x0802dc48
 8003228:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	3b01      	subs	r3, #1
 8003242:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	3b01      	subs	r3, #1
 800324a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800324c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003254:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	3b01      	subs	r3, #1
 800325e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003264:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003266:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003270:	d115      	bne.n	800329e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	3b01      	subs	r3, #1
 800327e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003280:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	3b01      	subs	r3, #1
 8003288:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800328a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800329a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800329c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c4:	4413      	add	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d011      	beq.n	80032ee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80032d2:	f023 0107 	bic.w	r1, r3, #7
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3360      	adds	r3, #96	; 0x60
 80032de:	443b      	add	r3, r7
 80032e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d011      	beq.n	800331a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032fe:	f023 0107 	bic.w	r1, r3, #7
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3360      	adds	r3, #96	; 0x60
 800330a:	443b      	add	r3, r7
 800330c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800332a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	3360      	adds	r3, #96	; 0x60
 8003336:	443b      	add	r3, r7
 8003338:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800333c:	011a      	lsls	r2, r3, #4
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	2b00      	cmp	r3, #0
 800334e:	d012      	beq.n	8003376 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003358:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	443b      	add	r3, r7
 8003366:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800336a:	021a      	lsls	r2, r3, #8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_FDCAN_Init+0x3b8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d107      	bne.n	8003390 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f022 0203 	bic.w	r2, r2, #3
 800338e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f80b 	bl	80033c4 <FDCAN_CalcultateRamBlockAddresses>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80033b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3760      	adds	r7, #96	; 0x60
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	4000a000 	.word	0x4000a000

080033c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80033da:	4ba7      	ldr	r3, [pc, #668]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80033dc:	4013      	ands	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	0091      	lsls	r1, r2, #2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	430b      	orrs	r3, r1
 80033e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4413      	add	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800341a:	4b97      	ldr	r3, [pc, #604]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800341c:	4013      	ands	r3, r2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	0091      	lsls	r1, r2, #2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	430b      	orrs	r3, r1
 8003428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800345c:	4b86      	ldr	r3, [pc, #536]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800345e:	4013      	ands	r3, r2
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	0091      	lsls	r1, r2, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003476:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	041a      	lsls	r2, r3, #16
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4413      	add	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034a4:	4b74      	ldr	r3, [pc, #464]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	0091      	lsls	r1, r2, #2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	041a      	lsls	r2, r3, #16
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	0091      	lsls	r1, r2, #2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003518:	4b57      	ldr	r3, [pc, #348]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	0091      	lsls	r1, r2, #2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	430b      	orrs	r3, r1
 8003526:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003532:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	4413      	add	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800355c:	4013      	ands	r3, r2
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	0091      	lsls	r1, r2, #2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	430b      	orrs	r3, r1
 8003568:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003574:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003590:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003598:	061a      	lsls	r2, r3, #24
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	4b34      	ldr	r3, [pc, #208]	; (800367c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80035aa:	4413      	add	r3, r2
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	441a      	add	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a04      	ldr	r2, [pc, #16]	; (8003680 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d915      	bls.n	80036a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003674:	e006      	b.n	8003684 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003676:	bf00      	nop
 8003678:	ffff0003 	.word	0xffff0003
 800367c:	10002b00 	.word	0x10002b00
 8003680:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368a:	f043 0220 	orr.w	r2, r3, #32
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2203      	movs	r2, #3
 8003698:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e010      	b.n	80036c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e005      	b.n	80036b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3304      	adds	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d3f3      	bcc.n	80036a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036de:	4b86      	ldr	r3, [pc, #536]	; (80038f8 <HAL_GPIO_Init+0x228>)
 80036e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036e2:	e18c      	b.n	80039fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 817e 	beq.w	80039f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d005      	beq.n	8003714 <HAL_GPIO_Init+0x44>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d130      	bne.n	8003776 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	2203      	movs	r2, #3
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374a:	2201      	movs	r2, #1
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	f003 0201 	and.w	r2, r3, #1
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d017      	beq.n	80037b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d123      	bne.n	8003806 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	69b9      	ldr	r1, [r7, #24]
 8003802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4013      	ands	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0203 	and.w	r2, r3, #3
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80d8 	beq.w	80039f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_GPIO_Init+0x22c>)
 800384a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <HAL_GPIO_Init+0x22c>)
 8003850:	f043 0302 	orr.w	r3, r3, #2
 8003854:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <HAL_GPIO_Init+0x22c>)
 800385a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003866:	4a26      	ldr	r2, [pc, #152]	; (8003900 <HAL_GPIO_Init+0x230>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	220f      	movs	r2, #15
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_GPIO_Init+0x234>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d04a      	beq.n	8003928 <HAL_GPIO_Init+0x258>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_GPIO_Init+0x238>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02b      	beq.n	80038f2 <HAL_GPIO_Init+0x222>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1b      	ldr	r2, [pc, #108]	; (800390c <HAL_GPIO_Init+0x23c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d025      	beq.n	80038ee <HAL_GPIO_Init+0x21e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1a      	ldr	r2, [pc, #104]	; (8003910 <HAL_GPIO_Init+0x240>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <HAL_GPIO_Init+0x21a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a19      	ldr	r2, [pc, #100]	; (8003914 <HAL_GPIO_Init+0x244>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d019      	beq.n	80038e6 <HAL_GPIO_Init+0x216>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_GPIO_Init+0x248>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_GPIO_Init+0x212>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_GPIO_Init+0x24c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00d      	beq.n	80038de <HAL_GPIO_Init+0x20e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_GPIO_Init+0x250>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <HAL_GPIO_Init+0x20a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a15      	ldr	r2, [pc, #84]	; (8003924 <HAL_GPIO_Init+0x254>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d101      	bne.n	80038d6 <HAL_GPIO_Init+0x206>
 80038d2:	2309      	movs	r3, #9
 80038d4:	e029      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038d6:	230a      	movs	r3, #10
 80038d8:	e027      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038da:	2307      	movs	r3, #7
 80038dc:	e025      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038de:	2306      	movs	r3, #6
 80038e0:	e023      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e021      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e01f      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e01d      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e01b      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e019      	b.n	800392a <HAL_GPIO_Init+0x25a>
 80038f6:	bf00      	nop
 80038f8:	58000080 	.word	0x58000080
 80038fc:	58024400 	.word	0x58024400
 8003900:	58000400 	.word	0x58000400
 8003904:	58020000 	.word	0x58020000
 8003908:	58020400 	.word	0x58020400
 800390c:	58020800 	.word	0x58020800
 8003910:	58020c00 	.word	0x58020c00
 8003914:	58021000 	.word	0x58021000
 8003918:	58021400 	.word	0x58021400
 800391c:	58021800 	.word	0x58021800
 8003920:	58021c00 	.word	0x58021c00
 8003924:	58022400 	.word	0x58022400
 8003928:	2300      	movs	r3, #0
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800393a:	4938      	ldr	r1, [pc, #224]	; (8003a1c <HAL_GPIO_Init+0x34c>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800396e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800399c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f ae6b 	bne.w	80036e4 <HAL_GPIO_Init+0x14>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3724      	adds	r7, #36	; 0x24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	58000400 	.word	0x58000400

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a3c:	e003      	b.n	8003a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	041a      	lsls	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fcd6 	bl	800142c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e006      	b.n	8003adc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d104      	bne.n	8003aee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_I2C_Init+0x11c>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69d9      	ldr	r1, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	02008000 	.word	0x02008000

08003b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d138      	bne.n	8003bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e032      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2224      	movs	r2, #36	; 0x24
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d139      	bne.n	8003c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e033      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0bf      	b.n	8003e36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fc62 	bl	8001594 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003ce6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003cfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <HAL_LTDC_Init+0x19c>)
 8003d18:	400b      	ands	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68d9      	ldr	r1, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b3e      	ldr	r3, [pc, #248]	; (8003e40 <HAL_LTDC_Init+0x19c>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68d9      	ldr	r1, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_LTDC_Init+0x19c>)
 8003d74:	400b      	ands	r3, r1
 8003d76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6919      	ldr	r1, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6959      	ldr	r1, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_LTDC_Init+0x19c>)
 8003da2:	400b      	ands	r3, r1
 8003da4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6959      	ldr	r1, [r3, #20]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0206 	orr.w	r2, r2, #6
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	f000f800 	.word	0xf000f800

08003e44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003e44:	b5b0      	push	{r4, r5, r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_LTDC_ConfigLayer+0x1a>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e02c      	b.n	8003eb8 <HAL_LTDC_ConfigLayer+0x74>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2134      	movs	r1, #52	; 0x34
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4614      	mov	r4, r2
 8003e82:	461d      	mov	r5, r3
 8003e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f811 	bl	8003ec0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bdb0      	pop	{r4, r5, r7, pc}

08003ec0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	4413      	add	r3, r2
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	01db      	lsls	r3, r3, #7
 8003eec:	4413      	add	r3, r2
 8003eee:	3384      	adds	r3, #132	; 0x84
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	01d2      	lsls	r2, r2, #7
 8003efc:	440a      	add	r2, r1
 8003efe:	3284      	adds	r2, #132	; 0x84
 8003f00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	01db      	lsls	r3, r3, #7
 8003f24:	440b      	add	r3, r1
 8003f26:	3384      	adds	r3, #132	; 0x84
 8003f28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003f2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3e:	4413      	add	r3, r2
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	01db      	lsls	r3, r3, #7
 8003f4e:	4413      	add	r3, r2
 8003f50:	3384      	adds	r3, #132	; 0x84
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	01d2      	lsls	r2, r2, #7
 8003f5e:	440a      	add	r2, r1
 8003f60:	3284      	adds	r2, #132	; 0x84
 8003f62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003f66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f76:	4413      	add	r3, r2
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	01db      	lsls	r3, r3, #7
 8003f84:	440b      	add	r3, r1
 8003f86:	3384      	adds	r3, #132	; 0x84
 8003f88:	4619      	mov	r1, r3
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	01db      	lsls	r3, r3, #7
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3384      	adds	r3, #132	; 0x84
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	01d2      	lsls	r2, r2, #7
 8003faa:	440a      	add	r2, r1
 8003fac:	3284      	adds	r2, #132	; 0x84
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	01db      	lsls	r3, r3, #7
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3384      	adds	r3, #132	; 0x84
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	061b      	lsls	r3, r3, #24
 8003fe4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	01db      	lsls	r3, r3, #7
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3384      	adds	r3, #132	; 0x84
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	01db      	lsls	r3, r3, #7
 8004000:	4413      	add	r3, r2
 8004002:	3384      	adds	r3, #132	; 0x84
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004010:	461a      	mov	r2, r3
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	431a      	orrs	r2, r3
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4619      	mov	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	01db      	lsls	r3, r3, #7
 8004024:	440b      	add	r3, r1
 8004026:	3384      	adds	r3, #132	; 0x84
 8004028:	4619      	mov	r1, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	01db      	lsls	r3, r3, #7
 800403a:	4413      	add	r3, r2
 800403c:	3384      	adds	r3, #132	; 0x84
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	4611      	mov	r1, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	01d2      	lsls	r2, r2, #7
 800404a:	440a      	add	r2, r1
 800404c:	3284      	adds	r2, #132	; 0x84
 800404e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004052:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	01db      	lsls	r3, r3, #7
 800405e:	4413      	add	r3, r2
 8004060:	3384      	adds	r3, #132	; 0x84
 8004062:	461a      	mov	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	4413      	add	r3, r2
 8004076:	3384      	adds	r3, #132	; 0x84
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4619      	mov	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	440b      	add	r3, r1
 8004086:	3384      	adds	r3, #132	; 0x84
 8004088:	4619      	mov	r1, r3
 800408a:	4b58      	ldr	r3, [pc, #352]	; (80041ec <LTDC_SetConfig+0x32c>)
 800408c:	4013      	ands	r3, r2
 800408e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	6809      	ldr	r1, [r1, #0]
 800409c:	4608      	mov	r0, r1
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	01c9      	lsls	r1, r1, #7
 80040a2:	4401      	add	r1, r0
 80040a4:	3184      	adds	r1, #132	; 0x84
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	01db      	lsls	r3, r3, #7
 80040b4:	4413      	add	r3, r2
 80040b6:	3384      	adds	r3, #132	; 0x84
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	01db      	lsls	r3, r3, #7
 80040c4:	4413      	add	r3, r2
 80040c6:	3384      	adds	r3, #132	; 0x84
 80040c8:	461a      	mov	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	4413      	add	r3, r2
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80040ec:	2304      	movs	r3, #4
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e01b      	b.n	800412a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d102      	bne.n	8004100 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80040fa:	2303      	movs	r3, #3
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	e014      	b.n	800412a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d00b      	beq.n	8004120 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800410c:	2b02      	cmp	r3, #2
 800410e:	d007      	beq.n	8004120 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004114:	2b03      	cmp	r3, #3
 8004116:	d003      	beq.n	8004120 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800411c:	2b07      	cmp	r3, #7
 800411e:	d102      	bne.n	8004126 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004120:	2302      	movs	r3, #2
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e001      	b.n	800412a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004126:	2301      	movs	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	01db      	lsls	r3, r3, #7
 8004134:	4413      	add	r3, r2
 8004136:	3384      	adds	r3, #132	; 0x84
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4611      	mov	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	01d2      	lsls	r2, r2, #7
 8004144:	440a      	add	r2, r1
 8004146:	3284      	adds	r2, #132	; 0x84
 8004148:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800414c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	1acb      	subs	r3, r1, r3
 8004164:	69f9      	ldr	r1, [r7, #28]
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	3307      	adds	r3, #7
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	6809      	ldr	r1, [r1, #0]
 8004170:	4608      	mov	r0, r1
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	01c9      	lsls	r1, r1, #7
 8004176:	4401      	add	r1, r0
 8004178:	3184      	adds	r1, #132	; 0x84
 800417a:	4313      	orrs	r3, r2
 800417c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	01db      	lsls	r3, r3, #7
 8004188:	4413      	add	r3, r2
 800418a:	3384      	adds	r3, #132	; 0x84
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4619      	mov	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	01db      	lsls	r3, r3, #7
 8004198:	440b      	add	r3, r1
 800419a:	3384      	adds	r3, #132	; 0x84
 800419c:	4619      	mov	r1, r3
 800419e:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <LTDC_SetConfig+0x330>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	01db      	lsls	r3, r3, #7
 80041ae:	4413      	add	r3, r2
 80041b0:	3384      	adds	r3, #132	; 0x84
 80041b2:	461a      	mov	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	01db      	lsls	r3, r3, #7
 80041c4:	4413      	add	r3, r2
 80041c6:	3384      	adds	r3, #132	; 0x84
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	4611      	mov	r1, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	01d2      	lsls	r2, r2, #7
 80041d4:	440a      	add	r2, r1
 80041d6:	3284      	adds	r2, #132	; 0x84
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
}
 80041de:	bf00      	nop
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	fffff8f8 	.word	0xfffff8f8
 80041f0:	fffff800 	.word	0xfffff800

080041f4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004200:	f7fe f854 	bl	80022ac <HAL_GetTick>
 8004204:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e0a5      	b.n	800435e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 809e 	bne.w	800435e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fb58 	bl	80018d8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004228:	f241 3188 	movw	r1, #5000	; 0x1388
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f89d 	bl	800436c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <HAL_OSPI_Init+0x174>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68d1      	ldr	r1, [r2, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6912      	ldr	r2, [r2, #16]
 8004244:	3a01      	subs	r2, #1
 8004246:	0412      	lsls	r2, r2, #16
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6952      	ldr	r2, [r2, #20]
 800424e:	3a01      	subs	r2, #1
 8004250:	0212      	lsls	r2, r2, #8
 8004252:	4311      	orrs	r1, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	69d2      	ldr	r2, [r2, #28]
 800425e:	4311      	orrs	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	430b      	orrs	r3, r1
 8004266:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004298:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	2120      	movs	r1, #32
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fd4b 	bl	8004d5c <OSPI_WaitFlagStateUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d146      	bne.n	800435e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004306:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d107      	bne.n	8004346 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0202 	orr.w	r2, r2, #2
 8004344:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800434e:	d103      	bne.n	8004358 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	651a      	str	r2, [r3, #80]	; 0x50
 8004356:	e002      	b.n	800435e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	f8e0f8f4 	.word	0xf8e0f8f4

0800436c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b094      	sub	sp, #80	; 0x50
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a9d      	ldr	r2, [pc, #628]	; (8004620 <HAL_OSPIM_Config+0x294>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d105      	bne.n	80043ba <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80043b8:	e004      	b.n	80043c4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80043ba:	2301      	movs	r3, #1
 80043bc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80043ca:	e01d      	b.n	8004408 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80043cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043d0:	3301      	adds	r3, #1
 80043d2:	b2d8      	uxtb	r0, r3
 80043d4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80043d8:	f107 0114 	add.w	r1, r7, #20
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	4619      	mov	r1, r3
 80043e8:	f000 fcf0 	bl	8004dcc <OSPIM_GetConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2208      	movs	r2, #8
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80043fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004402:	3301      	adds	r3, #1
 8004404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800440c:	2b01      	cmp	r3, #1
 800440e:	d9dd      	bls.n	80043cc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8004410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004414:	2b00      	cmp	r3, #0
 8004416:	f040 8495 	bne.w	8004d44 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800441a:	4b81      	ldr	r3, [pc, #516]	; (8004620 <HAL_OSPIM_Config+0x294>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004426:	4b7e      	ldr	r3, [pc, #504]	; (8004620 <HAL_OSPIM_Config+0x294>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7d      	ldr	r2, [pc, #500]	; (8004620 <HAL_OSPIM_Config+0x294>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004432:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800443e:	4b79      	ldr	r3, [pc, #484]	; (8004624 <HAL_OSPIM_Config+0x298>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_OSPIM_Config+0x298>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_OSPIM_Config+0x298>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004456:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004462:	4971      	ldr	r1, [pc, #452]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	3350      	adds	r3, #80	; 0x50
 8004470:	443b      	add	r3, r7
 8004472:	3b34      	subs	r3, #52	; 0x34
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3b01      	subs	r3, #1
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	486a      	ldr	r0, [pc, #424]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 8004480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	3350      	adds	r3, #80	; 0x50
 800448c:	443b      	add	r3, r7
 800448e:	3b34      	subs	r3, #52	; 0x34
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4403      	add	r3, r0
 800449c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800449e:	4b62      	ldr	r3, [pc, #392]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80c0 	beq.w	800462c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80044ac:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5d      	ldr	r2, [pc, #372]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80044b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 8162 	bne.w	8004786 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 80044c2:	4959      	ldr	r1, [pc, #356]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80044c4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	3350      	adds	r3, #80	; 0x50
 80044d2:	443b      	add	r3, r7
 80044d4:	3b3c      	subs	r3, #60	; 0x3c
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3b01      	subs	r3, #1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	4851      	ldr	r0, [pc, #324]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80044e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	3350      	adds	r3, #80	; 0x50
 80044f0:	443b      	add	r3, r7
 80044f2:	3b3c      	subs	r3, #60	; 0x3c
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	f041 0202 	orr.w	r2, r1, #2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4403      	add	r3, r0
 8004500:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004502:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	3350      	adds	r3, #80	; 0x50
 8004510:	443b      	add	r3, r7
 8004512:	3b38      	subs	r3, #56	; 0x38
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01f      	beq.n	800455a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800451a:	4943      	ldr	r1, [pc, #268]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 800451c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	3350      	adds	r3, #80	; 0x50
 800452a:	443b      	add	r3, r7
 800452c:	3b38      	subs	r3, #56	; 0x38
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	483b      	ldr	r0, [pc, #236]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 800453a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	3350      	adds	r3, #80	; 0x50
 8004548:	443b      	add	r3, r7
 800454a:	3b38      	subs	r3, #56	; 0x38
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	f041 0220 	orr.w	r2, r1, #32
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4403      	add	r3, r0
 8004558:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800455a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800455e:	4613      	mov	r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	3350      	adds	r3, #80	; 0x50
 8004568:	443b      	add	r3, r7
 800456a:	3b30      	subs	r3, #48	; 0x30
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d023      	beq.n	80045ba <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8004572:	492d      	ldr	r1, [pc, #180]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 8004574:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004578:	4613      	mov	r3, r2
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3350      	adds	r3, #80	; 0x50
 8004582:	443b      	add	r3, r7
 8004584:	3b30      	subs	r3, #48	; 0x30
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	4824      	ldr	r0, [pc, #144]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 8004596:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	3350      	adds	r3, #80	; 0x50
 80045a4:	443b      	add	r3, r7
 80045a6:	3b30      	subs	r3, #48	; 0x30
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4403      	add	r3, r0
 80045b8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80045ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	3350      	adds	r3, #80	; 0x50
 80045c8:	443b      	add	r3, r7
 80045ca:	3b2c      	subs	r3, #44	; 0x2c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80d9 	beq.w	8004786 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80045d4:	4914      	ldr	r1, [pc, #80]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80045d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045da:	4613      	mov	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	3350      	adds	r3, #80	; 0x50
 80045e4:	443b      	add	r3, r7
 80045e6:	3b2c      	subs	r3, #44	; 0x2c
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	6859      	ldr	r1, [r3, #4]
 80045f6:	480c      	ldr	r0, [pc, #48]	; (8004628 <HAL_OSPIM_Config+0x29c>)
 80045f8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	3350      	adds	r3, #80	; 0x50
 8004606:	443b      	add	r3, r7
 8004608:	3b2c      	subs	r3, #44	; 0x2c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	e0b3      	b.n	8004786 <HAL_OSPIM_Config+0x3fa>
 800461e:	bf00      	nop
 8004620:	52005000 	.word	0x52005000
 8004624:	5200a000 	.word	0x5200a000
 8004628:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800462c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	3350      	adds	r3, #80	; 0x50
 8004638:	443b      	add	r3, r7
 800463a:	3b3c      	subs	r3, #60	; 0x3c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80a1 	beq.w	8004786 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004644:	4993      	ldr	r1, [pc, #588]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3350      	adds	r3, #80	; 0x50
 8004652:	443b      	add	r3, r7
 8004654:	3b3c      	subs	r3, #60	; 0x3c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	6859      	ldr	r1, [r3, #4]
 8004660:	488c      	ldr	r0, [pc, #560]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004662:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	3350      	adds	r3, #80	; 0x50
 800466e:	443b      	add	r3, r7
 8004670:	3b3c      	subs	r3, #60	; 0x3c
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	f021 0201 	bic.w	r2, r1, #1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	3350      	adds	r3, #80	; 0x50
 800468c:	443b      	add	r3, r7
 800468e:	3b38      	subs	r3, #56	; 0x38
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01d      	beq.n	80046d2 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004696:	497f      	ldr	r1, [pc, #508]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	3350      	adds	r3, #80	; 0x50
 80046a4:	443b      	add	r3, r7
 80046a6:	3b38      	subs	r3, #56	; 0x38
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	4878      	ldr	r0, [pc, #480]	; (8004894 <HAL_OSPIM_Config+0x508>)
 80046b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	3350      	adds	r3, #80	; 0x50
 80046c0:	443b      	add	r3, r7
 80046c2:	3b38      	subs	r3, #56	; 0x38
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	f021 0210 	bic.w	r2, r1, #16
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4403      	add	r3, r0
 80046d0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80046d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d4:	4613      	mov	r3, r2
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4413      	add	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	3350      	adds	r3, #80	; 0x50
 80046de:	443b      	add	r3, r7
 80046e0:	3b30      	subs	r3, #48	; 0x30
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d021      	beq.n	800472c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80046e8:	496a      	ldr	r1, [pc, #424]	; (8004894 <HAL_OSPIM_Config+0x508>)
 80046ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	3350      	adds	r3, #80	; 0x50
 80046f6:	443b      	add	r3, r7
 80046f8:	3b30      	subs	r3, #48	; 0x30
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	4862      	ldr	r0, [pc, #392]	; (8004894 <HAL_OSPIM_Config+0x508>)
 800470a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	3350      	adds	r3, #80	; 0x50
 8004716:	443b      	add	r3, r7
 8004718:	3b30      	subs	r3, #48	; 0x30
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4403      	add	r3, r0
 800472a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800472c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	3350      	adds	r3, #80	; 0x50
 8004738:	443b      	add	r3, r7
 800473a:	3b2c      	subs	r3, #44	; 0x2c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d021      	beq.n	8004786 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004742:	4954      	ldr	r1, [pc, #336]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	3350      	adds	r3, #80	; 0x50
 8004750:	443b      	add	r3, r7
 8004752:	3b2c      	subs	r3, #44	; 0x2c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3b01      	subs	r3, #1
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	484c      	ldr	r0, [pc, #304]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	3350      	adds	r3, #80	; 0x50
 8004770:	443b      	add	r3, r7
 8004772:	3b2c      	subs	r3, #44	; 0x2c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4403      	add	r3, r0
 8004784:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	3350      	adds	r3, #80	; 0x50
 8004798:	443b      	add	r3, r7
 800479a:	3b3c      	subs	r3, #60	; 0x3c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4299      	cmp	r1, r3
 80047a0:	d038      	beq.n	8004814 <HAL_OSPIM_Config+0x488>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	3350      	adds	r3, #80	; 0x50
 80047b4:	443b      	add	r3, r7
 80047b6:	3b38      	subs	r3, #56	; 0x38
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4299      	cmp	r1, r3
 80047bc:	d02a      	beq.n	8004814 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6899      	ldr	r1, [r3, #8]
 80047c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	3350      	adds	r3, #80	; 0x50
 80047d0:	443b      	add	r3, r7
 80047d2:	3b34      	subs	r3, #52	; 0x34
 80047d4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80047d6:	4299      	cmp	r1, r3
 80047d8:	d01c      	beq.n	8004814 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	3350      	adds	r3, #80	; 0x50
 80047ec:	443b      	add	r3, r7
 80047ee:	3b30      	subs	r3, #48	; 0x30
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4299      	cmp	r1, r3
 80047f4:	d00e      	beq.n	8004814 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	3350      	adds	r3, #80	; 0x50
 8004808:	443b      	add	r3, r7
 800480a:	3b2c      	subs	r3, #44	; 0x2c
 800480c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800480e:	4299      	cmp	r1, r3
 8004810:	f040 810e 	bne.w	8004a30 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6819      	ldr	r1, [r3, #0]
 8004818:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800481c:	4613      	mov	r3, r2
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3350      	adds	r3, #80	; 0x50
 8004826:	443b      	add	r3, r7
 8004828:	3b3c      	subs	r3, #60	; 0x3c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4299      	cmp	r1, r3
 800482e:	d133      	bne.n	8004898 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	3350      	adds	r3, #80	; 0x50
 8004842:	443b      	add	r3, r7
 8004844:	3b38      	subs	r3, #56	; 0x38
 8004846:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004848:	4299      	cmp	r1, r3
 800484a:	d125      	bne.n	8004898 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	68d9      	ldr	r1, [r3, #12]
 8004850:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	3350      	adds	r3, #80	; 0x50
 800485e:	443b      	add	r3, r7
 8004860:	3b30      	subs	r3, #48	; 0x30
 8004862:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004864:	4299      	cmp	r1, r3
 8004866:	d117      	bne.n	8004898 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6919      	ldr	r1, [r3, #16]
 800486c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	3350      	adds	r3, #80	; 0x50
 800487a:	443b      	add	r3, r7
 800487c:	3b2c      	subs	r3, #44	; 0x2c
 800487e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004880:	4299      	cmp	r1, r3
 8004882:	d109      	bne.n	8004898 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_OSPIM_Config+0x508>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a02      	ldr	r2, [pc, #8]	; (8004894 <HAL_OSPIM_Config+0x508>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	e0ce      	b.n	8004a30 <HAL_OSPIM_Config+0x6a4>
 8004892:	bf00      	nop
 8004894:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004898:	49bb      	ldr	r1, [pc, #748]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 800489a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	3350      	adds	r3, #80	; 0x50
 80048a8:	443b      	add	r3, r7
 80048aa:	3b3c      	subs	r3, #60	; 0x3c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	48b4      	ldr	r0, [pc, #720]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 80048b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	3350      	adds	r3, #80	; 0x50
 80048c6:	443b      	add	r3, r7
 80048c8:	3b3c      	subs	r3, #60	; 0x3c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f021 0201 	bic.w	r2, r1, #1
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4403      	add	r3, r0
 80048d6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80048d8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	3350      	adds	r3, #80	; 0x50
 80048e6:	443b      	add	r3, r7
 80048e8:	3b38      	subs	r3, #56	; 0x38
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01f      	beq.n	8004930 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80048f0:	49a5      	ldr	r1, [pc, #660]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 80048f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	3350      	adds	r3, #80	; 0x50
 8004900:	443b      	add	r3, r7
 8004902:	3b38      	subs	r3, #56	; 0x38
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	489e      	ldr	r0, [pc, #632]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004910:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	3350      	adds	r3, #80	; 0x50
 800491e:	443b      	add	r3, r7
 8004920:	3b38      	subs	r3, #56	; 0x38
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3b01      	subs	r3, #1
 8004926:	f021 0210 	bic.w	r2, r1, #16
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4403      	add	r3, r0
 800492e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004930:	4995      	ldr	r1, [pc, #596]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004932:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	3350      	adds	r3, #80	; 0x50
 8004940:	443b      	add	r3, r7
 8004942:	3b34      	subs	r3, #52	; 0x34
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3b01      	subs	r3, #1
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	488e      	ldr	r0, [pc, #568]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004950:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004954:	4613      	mov	r3, r2
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3350      	adds	r3, #80	; 0x50
 800495e:	443b      	add	r3, r7
 8004960:	3b34      	subs	r3, #52	; 0x34
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4403      	add	r3, r0
 800496e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004970:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	3350      	adds	r3, #80	; 0x50
 800497e:	443b      	add	r3, r7
 8004980:	3b30      	subs	r3, #48	; 0x30
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d023      	beq.n	80049d0 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004988:	497f      	ldr	r1, [pc, #508]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 800498a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	3350      	adds	r3, #80	; 0x50
 8004998:	443b      	add	r3, r7
 800499a:	3b30      	subs	r3, #48	; 0x30
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	4877      	ldr	r0, [pc, #476]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 80049ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80049b0:	4613      	mov	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	3350      	adds	r3, #80	; 0x50
 80049ba:	443b      	add	r3, r7
 80049bc:	3b30      	subs	r3, #48	; 0x30
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4403      	add	r3, r0
 80049ce:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80049d4:	4613      	mov	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	3350      	adds	r3, #80	; 0x50
 80049de:	443b      	add	r3, r7
 80049e0:	3b2c      	subs	r3, #44	; 0x2c
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80049e8:	4967      	ldr	r1, [pc, #412]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 80049ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	3350      	adds	r3, #80	; 0x50
 80049f8:	443b      	add	r3, r7
 80049fa:	3b2c      	subs	r3, #44	; 0x2c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	485f      	ldr	r0, [pc, #380]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3350      	adds	r3, #80	; 0x50
 8004a1a:	443b      	add	r3, r7
 8004a1c:	3b2c      	subs	r3, #44	; 0x2c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004a30:	4a55      	ldr	r2, [pc, #340]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	431a      	orrs	r2, r3
 8004a48:	494f      	ldr	r1, [pc, #316]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	1e5a      	subs	r2, r3, #1
 8004a60:	4b49      	ldr	r3, [pc, #292]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0c1b      	lsrs	r3, r3, #16
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d90a      	bls.n	8004a82 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004a6c:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	4942      	ldr	r1, [pc, #264]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 809a 	beq.w	8004bc4 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004a90:	4a3d      	ldr	r2, [pc, #244]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f023 0203 	bic.w	r2, r3, #3
 8004aa2:	4939      	ldr	r1, [pc, #228]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d011      	beq.n	8004ae0 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004abc:	4a32      	ldr	r2, [pc, #200]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ace:	492e      	ldr	r1, [pc, #184]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	f042 0210 	orr.w	r2, r2, #16
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d016      	beq.n	8004b1a <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004aec:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b02:	4921      	ldr	r1, [pc, #132]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	e019      	b.n	8004b4e <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004b22:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b38:	4913      	ldr	r1, [pc, #76]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d018      	beq.n	8004b8c <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <HAL_OSPIM_Config+0x7fc>)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e0c5      	b.n	8004d14 <HAL_OSPIM_Config+0x988>
 8004b88:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80bf 	beq.w	8004d14 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004b96:	4a6e      	ldr	r2, [pc, #440]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bac:	4968      	ldr	r1, [pc, #416]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	e0a7      	b.n	8004d14 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004bc4:	4a62      	ldr	r2, [pc, #392]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f023 0203 	bic.w	r2, r3, #3
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	495c      	ldr	r1, [pc, #368]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	f042 0201 	orr.w	r2, r2, #1
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d014      	beq.n	8004c20 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004bf6:	4a56      	ldr	r2, [pc, #344]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0a:	015b      	lsls	r3, r3, #5
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	4950      	ldr	r1, [pc, #320]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	f042 0210 	orr.w	r2, r2, #16
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d019      	beq.n	8004c60 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004c2c:	4a48      	ldr	r2, [pc, #288]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	049b      	lsls	r3, r3, #18
 8004c46:	431a      	orrs	r2, r3
 8004c48:	4941      	ldr	r1, [pc, #260]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	e01c      	b.n	8004c9a <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d018      	beq.n	8004c9a <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004c68:	4a39      	ldr	r2, [pc, #228]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	069b      	lsls	r3, r3, #26
 8004c82:	431a      	orrs	r2, r3
 8004c84:	4932      	ldr	r1, [pc, #200]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d019      	beq.n	8004cda <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbe:	049b      	lsls	r3, r3, #18
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	4923      	ldr	r1, [pc, #140]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	e01c      	b.n	8004d14 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d018      	beq.n	8004d14 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8004ce2:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfa:	069b      	lsls	r3, r3, #26
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	4914      	ldr	r1, [pc, #80]	; (8004d50 <HAL_OSPIM_Config+0x9c4>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	3b01      	subs	r3, #1
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004d14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_OSPIM_Config+0x9c8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <HAL_OSPIM_Config+0x9c8>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004d2c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_OSPIM_Config+0x9cc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a06      	ldr	r2, [pc, #24]	; (8004d58 <HAL_OSPIM_Config+0x9cc>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004d44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3750      	adds	r7, #80	; 0x50
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	5200b400 	.word	0x5200b400
 8004d54:	52005000 	.word	0x52005000
 8004d58:	5200a000 	.word	0x5200a000

08004d5c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004d6c:	e01a      	b.n	8004da4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d016      	beq.n	8004da4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fd fa99 	bl	80022ac <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d92:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d98:	f043 0201 	orr.w	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e00e      	b.n	8004dc2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1d6      	bne.n	8004d6e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <OSPIM_GetConfig+0x26>
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d802      	bhi.n	8004df2 <OSPIM_GetConfig+0x26>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
 8004df6:	e098      	b.n	8004f2a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d10b      	bne.n	8004e34 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004e1c:	4b46      	ldr	r3, [pc, #280]	; (8004f38 <OSPIM_GetConfig+0x16c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004e28:	4b44      	ldr	r3, [pc, #272]	; (8004f3c <OSPIM_GetConfig+0x170>)
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e002      	b.n	8004e34 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e32:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e074      	b.n	8004f24 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004e3a:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <OSPIM_GetConfig+0x16c>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4053      	eors	r3, r2
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4053      	eors	r3, r2
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4053      	eors	r3, r2
 8004e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d018      	beq.n	8004ee2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4053      	eors	r3, r2
 8004eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d111      	bne.n	8004ee2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e005      	b.n	8004ee2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d018      	beq.n	8004f1e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4053      	eors	r3, r2
 8004ef2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d111      	bne.n	8004f1e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	611a      	str	r2, [r3, #16]
 8004f10:	e005      	b.n	8004f1e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d987      	bls.n	8004e3a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	5200b400 	.word	0x5200b400
 8004f3c:	04040222 	.word	0x04040222

08004f40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f42:	b08f      	sub	sp, #60	; 0x3c
 8004f44:	af0a      	add	r7, sp, #40	; 0x28
 8004f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e116      	b.n	8005180 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f012 ff31 	bl	8017dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2203      	movs	r2, #3
 8004f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f005 fd0e 	bl	800a9b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	687e      	ldr	r6, [r7, #4]
 8004f9e:	466d      	mov	r5, sp
 8004fa0:	f106 0410 	add.w	r4, r6, #16
 8004fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fb4:	1d33      	adds	r3, r6, #4
 8004fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fb8:	6838      	ldr	r0, [r7, #0]
 8004fba:	f005 fbd9 	bl	800a770 <USB_CoreInit>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0d7      	b.n	8005180 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f005 fcfc 	bl	800a9d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e04a      	b.n	8005078 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fe2:	7bfa      	ldrb	r2, [r7, #15]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	333d      	adds	r3, #61	; 0x3d
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	333c      	adds	r3, #60	; 0x3c
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	b298      	uxth	r0, r3
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3344      	adds	r3, #68	; 0x44
 800501e:	4602      	mov	r2, r0
 8005020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	3340      	adds	r3, #64	; 0x40
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005036:	7bfa      	ldrb	r2, [r7, #15]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	3348      	adds	r3, #72	; 0x48
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	334c      	adds	r3, #76	; 0x4c
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3354      	adds	r3, #84	; 0x54
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	3301      	adds	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	d3af      	bcc.n	8004fe2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
 8005086:	e044      	b.n	8005112 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80050b0:	7bfa      	ldrb	r2, [r7, #15]
 80050b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050e0:	7bfa      	ldrb	r2, [r7, #15]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050f6:	7bfa      	ldrb	r2, [r7, #15]
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	3301      	adds	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d3b5      	bcc.n	8005088 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	687e      	ldr	r6, [r7, #4]
 8005124:	466d      	mov	r5, sp
 8005126:	f106 0410 	add.w	r4, r6, #16
 800512a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800512c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800512e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005136:	e885 0003 	stmia.w	r5, {r0, r1}
 800513a:	1d33      	adds	r3, r6, #4
 800513c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f005 fc94 	bl	800aa6c <USB_DevInit>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e014      	b.n	8005180 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b01      	cmp	r3, #1
 800516c:	d102      	bne.n	8005174 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f001 f962 	bl	8006438 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f006 fd06 	bl	800bb8a <USB_DevDisconnect>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005188 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_PCD_Start+0x1c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e020      	b.n	80051e6 <HAL_PCD_Start+0x5e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d109      	bne.n	80051c8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d005      	beq.n	80051c8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f005 fbdf 	bl	800a990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f006 fcb6 	bl	800bb48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_PCD_Stop+0x1c>
 8005206:	2302      	movs	r3, #2
 8005208:	e026      	b.n	8005258 <HAL_PCD_Stop+0x6a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f005 fbcb 	bl	800a9b2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f006 fcb2 	bl	800bb8a <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2110      	movs	r1, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f005 fd7b 	bl	800ad28 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	2b01      	cmp	r3, #1
 8005238:	d109      	bne.n	800524e <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800523e:	2b01      	cmp	r3, #1
 8005240:	d005      	beq.n	800524e <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b08d      	sub	sp, #52	; 0x34
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f006 fd3b 	bl	800bcf2 <USB_GetMode>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 84b7 	bne.w	8005bf2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f006 fc9f 	bl	800bbcc <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 84ad 	beq.w	8005bf0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f006 fc8c 	bl	800bbcc <USB_ReadInterrupts>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d107      	bne.n	80052ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f002 0202 	and.w	r2, r2, #2
 80052cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f006 fc7a 	bl	800bbcc <USB_ReadInterrupts>
 80052d8:	4603      	mov	r3, r0
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d161      	bne.n	80053a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0210 	bic.w	r2, r2, #16
 80052f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f003 020f 	and.w	r2, r3, #15
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	3304      	adds	r3, #4
 8005310:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	0c5b      	lsrs	r3, r3, #17
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	2b02      	cmp	r3, #2
 800531c:	d124      	bne.n	8005368 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d035      	beq.n	8005396 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005338:	b29b      	uxth	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	6a38      	ldr	r0, [r7, #32]
 800533e:	f006 fab1 	bl	800b8a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800534e:	441a      	add	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005360:	441a      	add	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
 8005366:	e016      	b.n	8005396 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	0c5b      	lsrs	r3, r3, #17
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	2b06      	cmp	r3, #6
 8005372:	d110      	bne.n	8005396 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800537a:	2208      	movs	r2, #8
 800537c:	4619      	mov	r1, r3
 800537e:	6a38      	ldr	r0, [r7, #32]
 8005380:	f006 fa90 	bl	800b8a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005390:	441a      	add	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f042 0210 	orr.w	r2, r2, #16
 80053a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f006 fc0e 	bl	800bbcc <USB_ReadInterrupts>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053ba:	f040 80a7 	bne.w	800550c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 fc13 	bl	800bbf2 <USB_ReadDevAllOutEpInterrupt>
 80053cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80053ce:	e099      	b.n	8005504 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 808e 	beq.w	80054f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f006 fc37 	bl	800bc5a <USB_ReadDevOutEPInterrupt>
 80053ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	461a      	mov	r2, r3
 8005406:	2301      	movs	r3, #1
 8005408:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800540a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fe8d 	bl	800612c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00c      	beq.n	8005436 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005428:	461a      	mov	r2, r3
 800542a:	2308      	movs	r3, #8
 800542c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800542e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 ff63 	bl	80062fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	461a      	mov	r2, r3
 800544e:	2310      	movs	r3, #16
 8005450:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d030      	beq.n	80054be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	2b80      	cmp	r3, #128	; 0x80
 8005466:	d109      	bne.n	800547c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800547a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	3304      	adds	r3, #4
 8005490:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d108      	bne.n	80054ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f012 fd88 	bl	8017fbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	461a      	mov	r2, r3
 80054ba:	2302      	movs	r3, #2
 80054bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	2320      	movs	r3, #32
 80054d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3301      	adds	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	2b00      	cmp	r3, #0
 8005508:	f47f af62 	bne.w	80053d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f006 fb5b 	bl	800bbcc <USB_ReadInterrupts>
 8005516:	4603      	mov	r3, r0
 8005518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005520:	f040 80db 	bne.w	80056da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4618      	mov	r0, r3
 800552a:	f006 fb7c 	bl	800bc26 <USB_ReadDevAllInEpInterrupt>
 800552e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005534:	e0cd      	b.n	80056d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 80c2 	beq.w	80056c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f006 fba2 	bl	800bc96 <USB_ReadDevInEPInterrupt>
 8005552:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d057      	beq.n	800560e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2201      	movs	r2, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557e:	4013      	ands	r3, r2
 8005580:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	461a      	mov	r2, r3
 8005590:	2301      	movs	r3, #1
 8005592:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d132      	bne.n	8005602 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a0:	4613      	mov	r3, r2
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	334c      	adds	r3, #76	; 0x4c
 80055ac:	6819      	ldr	r1, [r3, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b2:	4613      	mov	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4403      	add	r3, r0
 80055bc:	3348      	adds	r3, #72	; 0x48
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4419      	add	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	4613      	mov	r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4403      	add	r3, r0
 80055d0:	334c      	adds	r3, #76	; 0x4c
 80055d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d113      	bne.n	8005602 <HAL_PCD_IRQHandler+0x3a2>
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	4613      	mov	r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3354      	adds	r3, #84	; 0x54
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d108      	bne.n	8005602 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6818      	ldr	r0, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055fa:	461a      	mov	r2, r3
 80055fc:	2101      	movs	r1, #1
 80055fe:	f006 fbab 	bl	800bd58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	b2db      	uxtb	r3, r3
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f012 fc52 	bl	8017eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	461a      	mov	r2, r3
 8005626:	2308      	movs	r3, #8
 8005628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	2310      	movs	r3, #16
 8005644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	461a      	mov	r2, r3
 800565e:	2340      	movs	r3, #64	; 0x40
 8005660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d023      	beq.n	80056b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800566c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800566e:	6a38      	ldr	r0, [r7, #32]
 8005670:	f005 fb5a 	bl	800ad28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	3338      	adds	r3, #56	; 0x38
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4413      	add	r3, r2
 8005684:	3304      	adds	r3, #4
 8005686:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	78db      	ldrb	r3, [r3, #3]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d108      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2200      	movs	r2, #0
 8005694:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	b2db      	uxtb	r3, r3
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f012 fc9f 	bl	8017fe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	461a      	mov	r2, r3
 80056b0:	2302      	movs	r3, #2
 80056b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fca6 	bl	8006012 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	3301      	adds	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f af2e 	bne.w	8005536 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f006 fa74 	bl	800bbcc <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ee:	d122      	bne.n	8005736 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800570a:	2b01      	cmp	r3, #1
 800570c:	d108      	bne.n	8005720 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005716:	2100      	movs	r1, #0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 feb1 	bl	8006480 <HAL_PCDEx_LPM_Callback>
 800571e:	e002      	b.n	8005726 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f012 fc3d 	bl	8017fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f006 fa46 	bl	800bbcc <USB_ReadInterrupts>
 8005740:	4603      	mov	r3, r0
 8005742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800574a:	d112      	bne.n	8005772 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f012 fbf9 	bl	8017f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005770:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f006 fa28 	bl	800bbcc <USB_ReadInterrupts>
 800577c:	4603      	mov	r3, r0
 800577e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d121      	bne.n	80057cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005796:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d111      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	089b      	lsrs	r3, r3, #2
 80057b2:	f003 020f 	and.w	r2, r3, #15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057bc:	2101      	movs	r1, #1
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fe5e 	bl	8006480 <HAL_PCDEx_LPM_Callback>
 80057c4:	e002      	b.n	80057cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f012 fbc4 	bl	8017f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f006 f9fb 	bl	800bbcc <USB_ReadInterrupts>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e0:	f040 80b7 	bne.w	8005952 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2110      	movs	r1, #16
 80057fe:	4618      	mov	r0, r3
 8005800:	f005 fa92 	bl	800ad28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005808:	e046      	b.n	8005898 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800581c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005850:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005890:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	3301      	adds	r3, #1
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3b3      	bcc.n	800580a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	69fa      	ldr	r2, [r7, #28]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80058b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ce:	f043 030b 	orr.w	r3, r3, #11
 80058d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e4:	f043 030b 	orr.w	r3, r3, #11
 80058e8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ea:	e015      	b.n	8005918 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	4619      	mov	r1, r3
 80058fc:	f242 032b 	movw	r3, #8235	; 0x202b
 8005900:	4313      	orrs	r3, r2
 8005902:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005912:	f043 030b 	orr.w	r3, r3, #11
 8005916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005926:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800592a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800593c:	461a      	mov	r2, r3
 800593e:	f006 fa0b 	bl	800bd58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f006 f938 	bl	800bbcc <USB_ReadInterrupts>
 800595c:	4603      	mov	r3, r0
 800595e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005966:	d124      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f006 f9cf 	bl	800bd10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f005 fa53 	bl	800ae22 <USB_GetDevSpeed>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681c      	ldr	r4, [r3, #0]
 8005988:	f001 fcae 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 800598c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	4620      	mov	r0, r4
 8005998:	f004 ff58 	bl	800a84c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f012 fab0 	bl	8017f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80059b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f006 f908 	bl	800bbcc <USB_ReadInterrupts>
 80059bc:	4603      	mov	r3, r0
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d10a      	bne.n	80059dc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f012 fa8d 	bl	8017ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f002 0208 	and.w	r2, r2, #8
 80059da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f006 f8f3 	bl	800bbcc <USB_ReadInterrupts>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	2b80      	cmp	r3, #128	; 0x80
 80059ee:	d122      	bne.n	8005a36 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059fc:	2301      	movs	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	e014      	b.n	8005a2c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d105      	bne.n	8005a26 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fac5 	bl	8005fb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	3301      	adds	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3e5      	bcc.n	8005a02 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f006 f8c6 	bl	800bbcc <USB_ReadInterrupts>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d13b      	bne.n	8005ac4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	e02b      	b.n	8005aaa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3340      	adds	r3, #64	; 0x40
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d115      	bne.n	8005aa4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da12      	bge.n	8005aa4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	333f      	adds	r3, #63	; 0x3f
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa86 	bl	8005fb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d3ce      	bcc.n	8005a52 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f006 f87f 	bl	800bbcc <USB_ReadInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad8:	d155      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ada:	2301      	movs	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	e045      	b.n	8005b6c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d12e      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da2b      	bge.n	8005b66 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b1a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d121      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b62:	6053      	str	r3, [r2, #4]
            break;
 8005b64:	e007      	b.n	8005b76 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3b4      	bcc.n	8005ae0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f006 f81e 	bl	800bbcc <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d10a      	bne.n	8005bb2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f012 fa31 	bl	8018004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f006 f808 	bl	800bbcc <USB_ReadInterrupts>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d115      	bne.n	8005bf2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f012 fa21 	bl	8018020 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	e000      	b.n	8005bf2 <HAL_PCD_IRQHandler+0x992>
      return;
 8005bf0:	bf00      	nop
    }
  }
}
 8005bf2:	3734      	adds	r7, #52	; 0x34
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd90      	pop	{r4, r7, pc}

08005bf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_PCD_SetAddress+0x1a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e013      	b.n	8005c3a <HAL_PCD_SetAddress+0x42>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f005 ff66 	bl	800bafc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	70fb      	strb	r3, [r7, #3]
 8005c54:	460b      	mov	r3, r1
 8005c56:	803b      	strh	r3, [r7, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da0f      	bge.n	8005c88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	3338      	adds	r3, #56	; 0x38
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	705a      	strb	r2, [r3, #1]
 8005c86:	e00f      	b.n	8005ca8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	4613      	mov	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005cb4:	883a      	ldrh	r2, [r7, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	78ba      	ldrb	r2, [r7, #2]
 8005cbe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005cd2:	78bb      	ldrb	r3, [r7, #2]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d102      	bne.n	8005cde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_PCD_EP_Open+0xaa>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e00e      	b.n	8005d0a <HAL_PCD_EP_Open+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f005 f8b6 	bl	800ae6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b086      	sub	sp, #24
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	3304      	adds	r3, #4
 8005d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d54:	7afb      	ldrb	r3, [r7, #11]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d102      	bne.n	8005d6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d6e:	7afb      	ldrb	r3, [r7, #11]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	6979      	ldr	r1, [r7, #20]
 8005d86:	f005 fb49 	bl	800b41c <USB_EP0StartXfer>
 8005d8a:	e008      	b.n	8005d9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	f005 f8ef 	bl	800af7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	607a      	str	r2, [r7, #4]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	460b      	mov	r3, r1
 8005db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	f003 020f 	and.w	r2, r3, #15
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	3338      	adds	r3, #56	; 0x38
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3304      	adds	r3, #4
 8005dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2201      	movs	r2, #1
 8005de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d102      	bne.n	8005e02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	f005 faff 	bl	800b41c <USB_EP0StartXfer>
 8005e1e:	e008      	b.n	8005e32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6979      	ldr	r1, [r7, #20]
 8005e2e:	f005 f8a5 	bl	800af7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d901      	bls.n	8005e5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e050      	b.n	8005efc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da0f      	bge.n	8005e82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	3338      	adds	r3, #56	; 0x38
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	3304      	adds	r3, #4
 8005e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	705a      	strb	r2, [r3, #1]
 8005e80:	e00d      	b.n	8005e9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_PCD_EP_SetStall+0x82>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e01e      	b.n	8005efc <HAL_PCD_EP_SetStall+0xc0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f005 fd41 	bl	800b954 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	b2d9      	uxtb	r1, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005eec:	461a      	mov	r2, r3
 8005eee:	f005 ff33 	bl	800bd58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	f003 020f 	and.w	r2, r3, #15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d901      	bls.n	8005f22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e042      	b.n	8005fa8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da0f      	bge.n	8005f4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 020f 	and.w	r2, r3, #15
 8005f30:	4613      	mov	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	3338      	adds	r3, #56	; 0x38
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3304      	adds	r3, #4
 8005f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	705a      	strb	r2, [r3, #1]
 8005f48:	e00f      	b.n	8005f6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d101      	bne.n	8005f8a <HAL_PCD_EP_ClrStall+0x86>
 8005f86:	2302      	movs	r3, #2
 8005f88:	e00e      	b.n	8005fa8 <HAL_PCD_EP_ClrStall+0xa4>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f005 fd49 	bl	800ba30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	da0c      	bge.n	8005fde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	4613      	mov	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	3338      	adds	r3, #56	; 0x38
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3304      	adds	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e00c      	b.n	8005ff8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f005 fb68 	bl	800b6d4 <USB_EPStopXfer>
 8006004:	4603      	mov	r3, r0
 8006006:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006008:	7afb      	ldrb	r3, [r7, #11]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b08a      	sub	sp, #40	; 0x28
 8006016:	af02      	add	r7, sp, #8
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	3338      	adds	r3, #56	; 0x38
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	429a      	cmp	r2, r3
 8006044:	d901      	bls.n	800604a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e06c      	b.n	8006124 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	429a      	cmp	r2, r3
 800605e:	d902      	bls.n	8006066 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3303      	adds	r3, #3
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800606e:	e02b      	b.n	80060c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	429a      	cmp	r2, r3
 8006084:	d902      	bls.n	800608c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3303      	adds	r3, #3
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6919      	ldr	r1, [r3, #16]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	4603      	mov	r3, r0
 80060aa:	6978      	ldr	r0, [r7, #20]
 80060ac:	f005 fbbc 	bl	800b828 <USB_WritePacket>

    ep->xfer_buff  += len;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	441a      	add	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d809      	bhi.n	80060f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1a      	ldr	r2, [r3, #32]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d203      	bcs.n	80060f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1be      	bne.n	8006070 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d811      	bhi.n	8006122 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2201      	movs	r2, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	43db      	mvns	r3, r3
 8006118:	6939      	ldr	r1, [r7, #16]
 800611a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611e:	4013      	ands	r3, r2
 8006120:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3720      	adds	r7, #32
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	333c      	adds	r3, #60	; 0x3c
 8006144:	3304      	adds	r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d17b      	bne.n	800625a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d015      	beq.n	8006198 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	4a61      	ldr	r2, [pc, #388]	; (80062f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	f240 80b9 	bls.w	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80b3 	beq.w	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	461a      	mov	r2, r3
 8006190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006194:	6093      	str	r3, [r2, #8]
 8006196:	e0a7      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	461a      	mov	r2, r3
 80061b0:	2320      	movs	r3, #32
 80061b2:	6093      	str	r3, [r2, #8]
 80061b4:	e098      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f040 8093 	bne.w	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4a4b      	ldr	r2, [pc, #300]	; (80062f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d90f      	bls.n	80061ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e6:	6093      	str	r3, [r2, #8]
 80061e8:	e07e      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	0159      	lsls	r1, r3, #5
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	440b      	add	r3, r1
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d114      	bne.n	800624c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d109      	bne.n	800623e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006234:	461a      	mov	r2, r3
 8006236:	2101      	movs	r1, #1
 8006238:	f005 fd8e 	bl	800bd58 <USB_EP0_OutStart>
 800623c:	e006      	b.n	800624c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	441a      	add	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f011 fe12 	bl	8017e7c <HAL_PCD_DataOutStageCallback>
 8006258:	e046      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4a26      	ldr	r2, [pc, #152]	; (80062f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d124      	bne.n	80062ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	461a      	mov	r2, r3
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	6093      	str	r3, [r2, #8]
 8006280:	e032      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	461a      	mov	r2, r3
 800629a:	2320      	movs	r3, #32
 800629c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f011 fde9 	bl	8017e7c <HAL_PCD_DataOutStageCallback>
 80062aa:	e01d      	b.n	80062e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d114      	bne.n	80062dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d108      	bne.n	80062dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062d4:	461a      	mov	r2, r3
 80062d6:	2100      	movs	r1, #0
 80062d8:	f005 fd3e 	bl	800bd58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f011 fdca 	bl	8017e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3720      	adds	r7, #32
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	4f54300a 	.word	0x4f54300a
 80062f8:	4f54310a 	.word	0x4f54310a

080062fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	333c      	adds	r3, #60	; 0x3c
 8006314:	3304      	adds	r3, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <PCD_EP_OutSetupPacket_int+0x88>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d90e      	bls.n	8006350 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006338:	2b00      	cmp	r3, #0
 800633a:	d009      	beq.n	8006350 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	461a      	mov	r2, r3
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f011 fd81 	bl	8017e58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <PCD_EP_OutSetupPacket_int+0x88>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d90c      	bls.n	8006378 <PCD_EP_OutSetupPacket_int+0x7c>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d108      	bne.n	8006378 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006370:	461a      	mov	r2, r3
 8006372:	2101      	movs	r1, #1
 8006374:	f005 fcf0 	bl	800bd58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	4f54300a 	.word	0x4f54300a

08006388 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
 8006394:	4613      	mov	r3, r2
 8006396:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80063a6:	883b      	ldrh	r3, [r7, #0]
 80063a8:	0419      	lsls	r1, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28
 80063b4:	e028      	b.n	8006408 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4413      	add	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
 80063c8:	e00d      	b.n	80063e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	3340      	adds	r3, #64	; 0x40
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4413      	add	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	3301      	adds	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d3ec      	bcc.n	80063ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063f0:	883b      	ldrh	r3, [r7, #0]
 80063f2:	0418      	lsls	r0, r3, #16
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6819      	ldr	r1, [r3, #0]
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4302      	orrs	r2, r0
 8006400:	3340      	adds	r3, #64	; 0x40
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	887a      	ldrh	r2, [r7, #2]
 8006428:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <HAL_PCDEx_ActivateLPM+0x44>)
 8006468:	4313      	orrs	r3, r2
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	10000003 	.word	0x10000003

08006480 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <HAL_PWREx_ConfigSupply+0x70>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d00a      	beq.n	80064c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064ac:	4b16      	ldr	r3, [pc, #88]	; (8006508 <HAL_PWREx_ConfigSupply+0x70>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d001      	beq.n	80064be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e01f      	b.n	80064fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e01d      	b.n	80064fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064c2:	4b11      	ldr	r3, [pc, #68]	; (8006508 <HAL_PWREx_ConfigSupply+0x70>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f023 0207 	bic.w	r2, r3, #7
 80064ca:	490f      	ldr	r1, [pc, #60]	; (8006508 <HAL_PWREx_ConfigSupply+0x70>)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064d2:	f7fb feeb 	bl	80022ac <HAL_GetTick>
 80064d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064d8:	e009      	b.n	80064ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064da:	f7fb fee7 	bl	80022ac <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e8:	d901      	bls.n	80064ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e007      	b.n	80064fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064ee:	4b06      	ldr	r3, [pc, #24]	; (8006508 <HAL_PWREx_ConfigSupply+0x70>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fa:	d1ee      	bne.n	80064da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	58024800 	.word	0x58024800

0800650c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a04      	ldr	r2, [pc, #16]	; (8006528 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800651a:	60d3      	str	r3, [r2, #12]
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	58024800 	.word	0x58024800

0800652c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b08c      	sub	sp, #48	; 0x30
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e39d      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 8087 	beq.w	800665a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800654c:	4b88      	ldr	r3, [pc, #544]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006556:	4b86      	ldr	r3, [pc, #536]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b10      	cmp	r3, #16
 8006560:	d007      	beq.n	8006572 <HAL_RCC_OscConfig+0x46>
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b18      	cmp	r3, #24
 8006566:	d110      	bne.n	800658a <HAL_RCC_OscConfig+0x5e>
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d10b      	bne.n	800658a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006572:	4b7f      	ldr	r3, [pc, #508]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d06c      	beq.n	8006658 <HAL_RCC_OscConfig+0x12c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d168      	bne.n	8006658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e377      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x76>
 8006594:	4b76      	ldr	r3, [pc, #472]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a75      	ldr	r2, [pc, #468]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800659a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e02e      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x98>
 80065aa:	4b71      	ldr	r3, [pc, #452]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a70      	ldr	r2, [pc, #448]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4b6e      	ldr	r3, [pc, #440]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6d      	ldr	r2, [pc, #436]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	e01d      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0xbc>
 80065ce:	4b68      	ldr	r3, [pc, #416]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a67      	ldr	r2, [pc, #412]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b65      	ldr	r3, [pc, #404]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a64      	ldr	r2, [pc, #400]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	e00b      	b.n	8006600 <HAL_RCC_OscConfig+0xd4>
 80065e8:	4b61      	ldr	r3, [pc, #388]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a60      	ldr	r2, [pc, #384]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b5e      	ldr	r3, [pc, #376]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a5d      	ldr	r2, [pc, #372]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80065fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006608:	f7fb fe50 	bl	80022ac <HAL_GetTick>
 800660c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006610:	f7fb fe4c 	bl	80022ac <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e32b      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006622:	4b53      	ldr	r3, [pc, #332]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <HAL_RCC_OscConfig+0xe4>
 800662e:	e014      	b.n	800665a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fb fe3c 	bl	80022ac <HAL_GetTick>
 8006634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006638:	f7fb fe38 	bl	80022ac <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b64      	cmp	r3, #100	; 0x64
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e317      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800664a:	4b49      	ldr	r3, [pc, #292]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x10c>
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 808c 	beq.w	8006780 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006668:	4b41      	ldr	r3, [pc, #260]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006670:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006672:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_RCC_OscConfig+0x162>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2b18      	cmp	r3, #24
 8006682:	d137      	bne.n	80066f4 <HAL_RCC_OscConfig+0x1c8>
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d132      	bne.n	80066f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668e:	4b38      	ldr	r3, [pc, #224]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_RCC_OscConfig+0x17a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e2e9      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066a6:	4b32      	ldr	r3, [pc, #200]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 0219 	bic.w	r2, r3, #25
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	492f      	ldr	r1, [pc, #188]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066b8:	f7fb fdf8 	bl	80022ac <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c0:	f7fb fdf4 	bl	80022ac <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e2d3      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d2:	4b27      	ldr	r3, [pc, #156]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	061b      	lsls	r3, r3, #24
 80066ec:	4920      	ldr	r1, [pc, #128]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f2:	e045      	b.n	8006780 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d026      	beq.n	800674a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066fc:	4b1c      	ldr	r3, [pc, #112]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f023 0219 	bic.w	r2, r3, #25
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4919      	ldr	r1, [pc, #100]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fb fdcd 	bl	80022ac <HAL_GetTick>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006716:	f7fb fdc9 	bl	80022ac <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e2a8      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006728:	4b11      	ldr	r3, [pc, #68]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	061b      	lsls	r3, r3, #24
 8006742:	490b      	ldr	r1, [pc, #44]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006744:	4313      	orrs	r3, r2
 8006746:	604b      	str	r3, [r1, #4]
 8006748:	e01a      	b.n	8006780 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a08      	ldr	r2, [pc, #32]	; (8006770 <HAL_RCC_OscConfig+0x244>)
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006756:	f7fb fda9 	bl	80022ac <HAL_GetTick>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800675c:	e00a      	b.n	8006774 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800675e:	f7fb fda5 	bl	80022ac <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d903      	bls.n	8006774 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e284      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
 8006770:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006774:	4b96      	ldr	r3, [pc, #600]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ee      	bne.n	800675e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d06a      	beq.n	8006862 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678c:	4b90      	ldr	r3, [pc, #576]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006794:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006796:	4b8e      	ldr	r3, [pc, #568]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d007      	beq.n	80067b2 <HAL_RCC_OscConfig+0x286>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b18      	cmp	r3, #24
 80067a6:	d11b      	bne.n	80067e0 <HAL_RCC_OscConfig+0x2b4>
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d116      	bne.n	80067e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067b2:	4b87      	ldr	r3, [pc, #540]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_RCC_OscConfig+0x29e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d001      	beq.n	80067ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e257      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ca:	4b81      	ldr	r3, [pc, #516]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	061b      	lsls	r3, r3, #24
 80067d8:	497d      	ldr	r1, [pc, #500]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067de:	e040      	b.n	8006862 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d023      	beq.n	8006830 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80067e8:	4b79      	ldr	r3, [pc, #484]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a78      	ldr	r2, [pc, #480]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fb fd5a 	bl	80022ac <HAL_GetTick>
 80067f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067fc:	f7fb fd56 	bl	80022ac <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e235      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800680e:	4b70      	ldr	r3, [pc, #448]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0f0      	beq.n	80067fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800681a:	4b6d      	ldr	r3, [pc, #436]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	4969      	ldr	r1, [pc, #420]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	60cb      	str	r3, [r1, #12]
 800682e:	e018      	b.n	8006862 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006830:	4b67      	ldr	r3, [pc, #412]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a66      	ldr	r2, [pc, #408]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fb fd36 	bl	80022ac <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006844:	f7fb fd32 	bl	80022ac <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e211      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006856:	4b5e      	ldr	r3, [pc, #376]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d036      	beq.n	80068dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d019      	beq.n	80068aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006876:	4b56      	ldr	r3, [pc, #344]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800687a:	4a55      	ldr	r2, [pc, #340]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006882:	f7fb fd13 	bl	80022ac <HAL_GetTick>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800688a:	f7fb fd0f 	bl	80022ac <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e1ee      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800689c:	4b4c      	ldr	r3, [pc, #304]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800689e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCC_OscConfig+0x35e>
 80068a8:	e018      	b.n	80068dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068aa:	4b49      	ldr	r3, [pc, #292]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80068ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ae:	4a48      	ldr	r2, [pc, #288]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fb fcf9 	bl	80022ac <HAL_GetTick>
 80068ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068be:	f7fb fcf5 	bl	80022ac <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e1d4      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068d0:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80068d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d036      	beq.n	8006956 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d019      	beq.n	8006924 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068f0:	4b37      	ldr	r3, [pc, #220]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a36      	ldr	r2, [pc, #216]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80068f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068fc:	f7fb fcd6 	bl	80022ac <HAL_GetTick>
 8006900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006904:	f7fb fcd2 	bl	80022ac <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e1b1      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006916:	4b2e      	ldr	r3, [pc, #184]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d0f0      	beq.n	8006904 <HAL_RCC_OscConfig+0x3d8>
 8006922:	e018      	b.n	8006956 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006924:	4b2a      	ldr	r3, [pc, #168]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800692a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800692e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006930:	f7fb fcbc 	bl	80022ac <HAL_GetTick>
 8006934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006938:	f7fb fcb8 	bl	80022ac <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e197      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800694a:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8086 	beq.w	8006a70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <HAL_RCC_OscConfig+0x4a8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <HAL_RCC_OscConfig+0x4a8>)
 800696a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006970:	f7fb fc9c 	bl	80022ac <HAL_GetTick>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fb fc98 	bl	80022ac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b64      	cmp	r3, #100	; 0x64
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e177      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <HAL_RCC_OscConfig+0x4a8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x480>
 800699e:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	4a0b      	ldr	r2, [pc, #44]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	6713      	str	r3, [r2, #112]	; 0x70
 80069aa:	e032      	b.n	8006a12 <HAL_RCC_OscConfig+0x4e6>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d111      	bne.n	80069d8 <HAL_RCC_OscConfig+0x4ac>
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	4a02      	ldr	r2, [pc, #8]	; (80069d0 <HAL_RCC_OscConfig+0x4a4>)
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	6713      	str	r3, [r2, #112]	; 0x70
 80069cc:	e021      	b.n	8006a12 <HAL_RCC_OscConfig+0x4e6>
 80069ce:	bf00      	nop
 80069d0:	58024400 	.word	0x58024400
 80069d4:	58024800 	.word	0x58024800
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d10c      	bne.n	80069fa <HAL_RCC_OscConfig+0x4ce>
 80069e0:	4b83      	ldr	r3, [pc, #524]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	4a82      	ldr	r2, [pc, #520]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	; 0x70
 80069ec:	4b80      	ldr	r3, [pc, #512]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 80069ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f0:	4a7f      	ldr	r2, [pc, #508]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6713      	str	r3, [r2, #112]	; 0x70
 80069f8:	e00b      	b.n	8006a12 <HAL_RCC_OscConfig+0x4e6>
 80069fa:	4b7d      	ldr	r3, [pc, #500]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	4a7c      	ldr	r2, [pc, #496]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6713      	str	r3, [r2, #112]	; 0x70
 8006a06:	4b7a      	ldr	r3, [pc, #488]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a79      	ldr	r2, [pc, #484]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d015      	beq.n	8006a46 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fb fc47 	bl	80022ac <HAL_GetTick>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fb fc43 	bl	80022ac <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e120      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a38:	4b6d      	ldr	r3, [pc, #436]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ee      	beq.n	8006a22 <HAL_RCC_OscConfig+0x4f6>
 8006a44:	e014      	b.n	8006a70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a46:	f7fb fc31 	bl	80022ac <HAL_GetTick>
 8006a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a4c:	e00a      	b.n	8006a64 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a4e:	f7fb fc2d 	bl	80022ac <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e10a      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a64:	4b62      	ldr	r3, [pc, #392]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ee      	bne.n	8006a4e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80ff 	beq.w	8006c78 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a82:	2b18      	cmp	r3, #24
 8006a84:	f000 80ba 	beq.w	8006bfc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	f040 8095 	bne.w	8006bbc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a56      	ldr	r2, [pc, #344]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9e:	f7fb fc05 	bl	80022ac <HAL_GetTick>
 8006aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aa6:	f7fb fc01 	bl	80022ac <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e0e0      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ab8:	4b4d      	ldr	r3, [pc, #308]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1f0      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac4:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac8:	4b4a      	ldr	r3, [pc, #296]	; (8006bf4 <HAL_RCC_OscConfig+0x6c8>)
 8006aca:	4013      	ands	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ad4:	0112      	lsls	r2, r2, #4
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	4945      	ldr	r1, [pc, #276]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	628b      	str	r3, [r1, #40]	; 0x28
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	3b01      	subs	r3, #1
 8006aee:	025b      	lsls	r3, r3, #9
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	3b01      	subs	r3, #1
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	3b01      	subs	r3, #1
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b0e:	4938      	ldr	r1, [pc, #224]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b14:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a35      	ldr	r2, [pc, #212]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b20:	4b33      	ldr	r3, [pc, #204]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b24:	4b34      	ldr	r3, [pc, #208]	; (8006bf8 <HAL_RCC_OscConfig+0x6cc>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b2c:	00d2      	lsls	r2, r2, #3
 8006b2e:	4930      	ldr	r1, [pc, #192]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b34:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f023 020c 	bic.w	r2, r3, #12
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b40:	492b      	ldr	r1, [pc, #172]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b46:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	f023 0202 	bic.w	r2, r3, #2
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	4927      	ldr	r1, [pc, #156]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b58:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b70:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b7c:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b82:	f043 0301 	orr.w	r3, r3, #1
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fb fb8a 	bl	80022ac <HAL_GetTick>
 8006b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b9a:	e008      	b.n	8006bae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b9c:	f7fb fb86 	bl	80022ac <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e065      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0f0      	beq.n	8006b9c <HAL_RCC_OscConfig+0x670>
 8006bba:	e05d      	b.n	8006c78 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fb fb70 	bl	80022ac <HAL_GetTick>
 8006bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd0:	f7fb fb6c 	bl	80022ac <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e04b      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006be2:	4b03      	ldr	r3, [pc, #12]	; (8006bf0 <HAL_RCC_OscConfig+0x6c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x6a4>
 8006bee:	e043      	b.n	8006c78 <HAL_RCC_OscConfig+0x74c>
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	fffffc0c 	.word	0xfffffc0c
 8006bf8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bfc:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <HAL_RCC_OscConfig+0x758>)
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c02:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <HAL_RCC_OscConfig+0x758>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d031      	beq.n	8006c74 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f003 0203 	and.w	r2, r3, #3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d12a      	bne.n	8006c74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	091b      	lsrs	r3, r3, #4
 8006c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d122      	bne.n	8006c74 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d11a      	bne.n	8006c74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	0a5b      	lsrs	r3, r3, #9
 8006c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d111      	bne.n	8006c74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	0c1b      	lsrs	r3, r3, #16
 8006c54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d108      	bne.n	8006c74 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	0e1b      	lsrs	r3, r3, #24
 8006c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3730      	adds	r7, #48	; 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	58024400 	.word	0x58024400

08006c88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e19c      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c9c:	4b8a      	ldr	r3, [pc, #552]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d910      	bls.n	8006ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006caa:	4b87      	ldr	r3, [pc, #540]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f023 020f 	bic.w	r2, r3, #15
 8006cb2:	4985      	ldr	r1, [pc, #532]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	4b83      	ldr	r3, [pc, #524]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d001      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e184      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	4b7b      	ldr	r3, [pc, #492]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d908      	bls.n	8006cfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ce8:	4b78      	ldr	r3, [pc, #480]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	4975      	ldr	r1, [pc, #468]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d010      	beq.n	8006d28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	4b70      	ldr	r3, [pc, #448]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d908      	bls.n	8006d28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d16:	4b6d      	ldr	r3, [pc, #436]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	496a      	ldr	r1, [pc, #424]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d010      	beq.n	8006d56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	4b64      	ldr	r3, [pc, #400]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d908      	bls.n	8006d56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d44:	4b61      	ldr	r3, [pc, #388]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	495e      	ldr	r1, [pc, #376]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d010      	beq.n	8006d84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d908      	bls.n	8006d84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d72:	4b56      	ldr	r3, [pc, #344]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4953      	ldr	r1, [pc, #332]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d010      	beq.n	8006db2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4b4d      	ldr	r3, [pc, #308]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d908      	bls.n	8006db2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da0:	4b4a      	ldr	r3, [pc, #296]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f023 020f 	bic.w	r2, r3, #15
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4947      	ldr	r1, [pc, #284]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d055      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dbe:	4b43      	ldr	r3, [pc, #268]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4940      	ldr	r1, [pc, #256]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dd8:	4b3c      	ldr	r3, [pc, #240]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d121      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0f6      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006df0:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d115      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0ea      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e08:	4b30      	ldr	r3, [pc, #192]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d109      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0de      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e18:	4b2c      	ldr	r3, [pc, #176]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0d6      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e28:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f023 0207 	bic.w	r2, r3, #7
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4925      	ldr	r1, [pc, #148]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fb fa37 	bl	80022ac <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e42:	f7fb fa33 	bl	80022ac <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0be      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e58:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d1eb      	bne.n	8006e42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d208      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f023 020f 	bic.w	r2, r3, #15
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	490e      	ldr	r1, [pc, #56]	; (8006ecc <HAL_RCC_ClockConfig+0x244>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e98:	4b0b      	ldr	r3, [pc, #44]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d214      	bcs.n	8006ed0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 020f 	bic.w	r2, r3, #15
 8006eae:	4906      	ldr	r1, [pc, #24]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb6:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <HAL_RCC_ClockConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e086      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x34e>
 8006ec8:	52002000 	.word	0x52002000
 8006ecc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691a      	ldr	r2, [r3, #16]
 8006ee0:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d208      	bcs.n	8006efe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006eec:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	4939      	ldr	r1, [pc, #228]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d010      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d208      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f1a:	4b31      	ldr	r3, [pc, #196]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	492e      	ldr	r1, [pc, #184]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d208      	bcs.n	8006f5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	4922      	ldr	r1, [pc, #136]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69da      	ldr	r2, [r3, #28]
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d208      	bcs.n	8006f88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4917      	ldr	r1, [pc, #92]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f88:	f000 f834 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	4912      	ldr	r1, [pc, #72]	; (8006fe4 <HAL_RCC_ClockConfig+0x35c>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	4a0d      	ldr	r2, [pc, #52]	; (8006fe4 <HAL_RCC_ClockConfig+0x35c>)
 8006fb0:	5cd3      	ldrb	r3, [r2, r3]
 8006fb2:	f003 031f 	and.w	r3, r3, #31
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <HAL_RCC_ClockConfig+0x360>)
 8006fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <HAL_RCC_ClockConfig+0x364>)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <HAL_RCC_ClockConfig+0x368>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fa ff20 	bl	8001e10 <HAL_InitTick>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	0802ec68 	.word	0x0802ec68
 8006fe8:	24000008 	.word	0x24000008
 8006fec:	24000004 	.word	0x24000004
 8006ff0:	2400000c 	.word	0x2400000c

08006ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	; 0x24
 8006ff8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ffa:	4bb3      	ldr	r3, [pc, #716]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007002:	2b18      	cmp	r3, #24
 8007004:	f200 8155 	bhi.w	80072b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_RCC_GetSysClockFreq+0x1c>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007075 	.word	0x08007075
 8007014:	080072b3 	.word	0x080072b3
 8007018:	080072b3 	.word	0x080072b3
 800701c:	080072b3 	.word	0x080072b3
 8007020:	080072b3 	.word	0x080072b3
 8007024:	080072b3 	.word	0x080072b3
 8007028:	080072b3 	.word	0x080072b3
 800702c:	080072b3 	.word	0x080072b3
 8007030:	0800709b 	.word	0x0800709b
 8007034:	080072b3 	.word	0x080072b3
 8007038:	080072b3 	.word	0x080072b3
 800703c:	080072b3 	.word	0x080072b3
 8007040:	080072b3 	.word	0x080072b3
 8007044:	080072b3 	.word	0x080072b3
 8007048:	080072b3 	.word	0x080072b3
 800704c:	080072b3 	.word	0x080072b3
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080072b3 	.word	0x080072b3
 8007058:	080072b3 	.word	0x080072b3
 800705c:	080072b3 	.word	0x080072b3
 8007060:	080072b3 	.word	0x080072b3
 8007064:	080072b3 	.word	0x080072b3
 8007068:	080072b3 	.word	0x080072b3
 800706c:	080072b3 	.word	0x080072b3
 8007070:	080070a7 	.word	0x080070a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007074:	4b94      	ldr	r3, [pc, #592]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0320 	and.w	r3, r3, #32
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007080:	4b91      	ldr	r3, [pc, #580]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	4a90      	ldr	r2, [pc, #576]	; (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
 8007090:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007092:	e111      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007094:	4b8d      	ldr	r3, [pc, #564]	; (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007096:	61bb      	str	r3, [r7, #24]
    break;
 8007098:	e10e      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800709a:	4b8d      	ldr	r3, [pc, #564]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800709c:	61bb      	str	r3, [r7, #24]
    break;
 800709e:	e10b      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80070a0:	4b8c      	ldr	r3, [pc, #560]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070a2:	61bb      	str	r3, [r7, #24]
    break;
 80070a4:	e108      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a6:	4b88      	ldr	r3, [pc, #544]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80070b0:	4b85      	ldr	r3, [pc, #532]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070bc:	4b82      	ldr	r3, [pc, #520]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80070c6:	4b80      	ldr	r3, [pc, #512]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	08db      	lsrs	r3, r3, #3
 80070cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	fb02 f303 	mul.w	r3, r2, r3
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80e1 	beq.w	80072ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f000 8083 	beq.w	80071f8 <HAL_RCC_GetSysClockFreq+0x204>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	f200 80a1 	bhi.w	800723c <HAL_RCC_GetSysClockFreq+0x248>
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_RCC_GetSysClockFreq+0x114>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d056      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007106:	e099      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007108:	4b6f      	ldr	r3, [pc, #444]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02d      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007114:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	4a6b      	ldr	r2, [pc, #428]	; (80072cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
 8007124:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b62      	ldr	r3, [pc, #392]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007152:	eddf 5a61 	vldr	s11, [pc, #388]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800716e:	e087      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800717e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007182:	4b51      	ldr	r3, [pc, #324]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a02 	vldr	s12, [r7, #8]
 8007196:	eddf 5a50 	vldr	s11, [pc, #320]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b2:	e065      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80072e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	4b40      	ldr	r3, [pc, #256]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f6:	e043      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	eddf 6a38 	vldr	s13, [pc, #224]	; 80072e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b2f      	ldr	r3, [pc, #188]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a02 	vldr	s12, [r7, #8]
 800721e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723a:	e021      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a26 	vldr	s13, [pc, #152]	; 80072e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007280:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	0a5b      	lsrs	r3, r3, #9
 8007286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728a:	3301      	adds	r3, #1
 800728c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007298:	edd7 6a07 	vldr	s13, [r7, #28]
 800729c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a4:	ee17 3a90 	vmov	r3, s15
 80072a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80072aa:	e005      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
    break;
 80072b0:	e002      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072b4:	61bb      	str	r3, [r7, #24]
    break;
 80072b6:	bf00      	nop
  }

  return sysclockfreq;
 80072b8:	69bb      	ldr	r3, [r7, #24]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3724      	adds	r7, #36	; 0x24
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	58024400 	.word	0x58024400
 80072cc:	03d09000 	.word	0x03d09000
 80072d0:	003d0900 	.word	0x003d0900
 80072d4:	007a1200 	.word	0x007a1200
 80072d8:	46000000 	.word	0x46000000
 80072dc:	4c742400 	.word	0x4c742400
 80072e0:	4a742400 	.word	0x4a742400
 80072e4:	4af42400 	.word	0x4af42400

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072ee:	f7ff fe81 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b10      	ldr	r3, [pc, #64]	; (8007338 <HAL_RCC_GetHCLKFreq+0x50>)
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	0a1b      	lsrs	r3, r3, #8
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	490f      	ldr	r1, [pc, #60]	; (800733c <HAL_RCC_GetHCLKFreq+0x54>)
 8007300:	5ccb      	ldrb	r3, [r1, r3]
 8007302:	f003 031f 	and.w	r3, r3, #31
 8007306:	fa22 f303 	lsr.w	r3, r2, r3
 800730a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <HAL_RCC_GetHCLKFreq+0x50>)
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	4a09      	ldr	r2, [pc, #36]	; (800733c <HAL_RCC_GetHCLKFreq+0x54>)
 8007316:	5cd3      	ldrb	r3, [r2, r3]
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	4a07      	ldr	r2, [pc, #28]	; (8007340 <HAL_RCC_GetHCLKFreq+0x58>)
 8007324:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007326:	4a07      	ldr	r2, [pc, #28]	; (8007344 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <HAL_RCC_GetHCLKFreq+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	58024400 	.word	0x58024400
 800733c:	0802ec68 	.word	0x0802ec68
 8007340:	24000008 	.word	0x24000008
 8007344:	24000004 	.word	0x24000004

08007348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800734c:	f7ff ffcc 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b06      	ldr	r3, [pc, #24]	; (800736c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	091b      	lsrs	r3, r3, #4
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4904      	ldr	r1, [pc, #16]	; (8007370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007368:	4618      	mov	r0, r3
 800736a:	bd80      	pop	{r7, pc}
 800736c:	58024400 	.word	0x58024400
 8007370:	0802ec68 	.word	0x0802ec68

08007374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007378:	f7ff ffb6 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 800737c:	4602      	mov	r2, r0
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	4904      	ldr	r1, [pc, #16]	; (800739c <HAL_RCC_GetPCLK2Freq+0x28>)
 800738a:	5ccb      	ldrb	r3, [r1, r3]
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58024400 	.word	0x58024400
 800739c:	0802ec68 	.word	0x0802ec68

080073a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	223f      	movs	r2, #63	; 0x3f
 80073ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0207 	and.w	r2, r3, #7
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80073bc:	4b17      	ldr	r3, [pc, #92]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80073c8:	4b14      	ldr	r3, [pc, #80]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80073e0:	4b0e      	ldr	r3, [pc, #56]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <HAL_RCC_GetClockConfig+0x7c>)
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007404:	4b06      	ldr	r3, [pc, #24]	; (8007420 <HAL_RCC_GetClockConfig+0x80>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	601a      	str	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	58024400 	.word	0x58024400
 8007420:	52002000 	.word	0x52002000

08007424 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007430:	2300      	movs	r3, #0
 8007432:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d03f      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007444:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007448:	d02a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800744a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800744e:	d824      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007454:	d018      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800745a:	d81e      	bhi.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007464:	d007      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007466:	e018      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007468:	4ba4      	ldr	r3, [pc, #656]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	4aa3      	ldr	r2, [pc, #652]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800746e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007474:	e015      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	2102      	movs	r1, #2
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f989 	bl	8008794 <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007486:	e00c      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3324      	adds	r3, #36	; 0x24
 800748c:	2102      	movs	r1, #2
 800748e:	4618      	mov	r0, r3
 8007490:	f001 fa32 	bl	80088f8 <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007498:	e003      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	75fb      	strb	r3, [r7, #23]
      break;
 800749e:	e000      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074a8:	4b94      	ldr	r3, [pc, #592]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	4991      	ldr	r1, [pc, #580]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	650b      	str	r3, [r1, #80]	; 0x50
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d03d      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d826      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	080074ff 	.word	0x080074ff
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007529 	.word	0x08007529
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074f0:	4b82      	ldr	r3, [pc, #520]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	4a81      	ldr	r2, [pc, #516]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074fc:	e015      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	2100      	movs	r1, #0
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f945 	bl	8008794 <RCCEx_PLL2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800750e:	e00c      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f9ee 	bl	80088f8 <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007520:	e003      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
      break;
 8007526:	e000      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007530:	4b72      	ldr	r3, [pc, #456]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	f023 0207 	bic.w	r2, r3, #7
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	496f      	ldr	r1, [pc, #444]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	650b      	str	r3, [r1, #80]	; 0x50
 8007542:	e001      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007550:	2b00      	cmp	r3, #0
 8007552:	d051      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800755a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800755e:	d036      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007560:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007564:	d830      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800756a:	d032      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800756c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007570:	d82a      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007572:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007576:	d02e      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007578:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800757c:	d824      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800757e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007582:	d018      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007588:	d81e      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800758e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007592:	d007      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007594:	e018      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007596:	4b59      	ldr	r3, [pc, #356]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	4a58      	ldr	r2, [pc, #352]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800759c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075a2:	e019      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 f8f2 	bl	8008794 <RCCEx_PLL2_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075b4:	e010      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3324      	adds	r3, #36	; 0x24
 80075ba:	2100      	movs	r1, #0
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f99b 	bl	80088f8 <RCCEx_PLL3_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c6:	e007      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
      break;
 80075cc:	e004      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80075d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075de:	4b47      	ldr	r3, [pc, #284]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075ec:	4943      	ldr	r1, [pc, #268]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	658b      	str	r3, [r1, #88]	; 0x58
 80075f2:	e001      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007600:	2b00      	cmp	r3, #0
 8007602:	d051      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800760a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800760e:	d036      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007610:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007614:	d830      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800761a:	d032      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800761c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007620:	d82a      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007622:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007626:	d02e      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007628:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800762c:	d824      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800762e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007632:	d018      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007638:	d81e      	bhi.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800763e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007642:	d007      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007644:	e018      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007646:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	4a2c      	ldr	r2, [pc, #176]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800764c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007652:	e019      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	2100      	movs	r1, #0
 800765a:	4618      	mov	r0, r3
 800765c:	f001 f89a 	bl	8008794 <RCCEx_PLL2_Config>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007664:	e010      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2100      	movs	r1, #0
 800766c:	4618      	mov	r0, r3
 800766e:	f001 f943 	bl	80088f8 <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007676:	e007      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	e004      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800767e:	bf00      	nop
 8007680:	e002      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800768e:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800769c:	4917      	ldr	r1, [pc, #92]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	658b      	str	r3, [r1, #88]	; 0x58
 80076a2:	e001      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d035      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d01c      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d817      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d00c      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d813      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d019      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d10f      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a09      	ldr	r2, [pc, #36]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80076dc:	e011      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f855 	bl	8008794 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80076ee:	e008      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e005      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80076f6:	bf00      	nop
 80076f8:	e003      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80076fa:	bf00      	nop
 80076fc:	58024400 	.word	0x58024400
      break;
 8007700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007708:	4ba3      	ldr	r3, [pc, #652]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800770a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	49a0      	ldr	r1, [pc, #640]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007716:	4313      	orrs	r3, r2
 8007718:	64cb      	str	r3, [r1, #76]	; 0x4c
 800771a:	e001      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d047      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007734:	d030      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773a:	d82a      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800773c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007740:	d02c      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8007742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007746:	d824      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774c:	d018      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	d81e      	bhi.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775c:	d007      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800775e:	e018      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4b8d      	ldr	r3, [pc, #564]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	4a8c      	ldr	r2, [pc, #560]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800776a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800776c:	e017      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3304      	adds	r3, #4
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f001 f80d 	bl	8008794 <RCCEx_PLL2_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800777e:	e00e      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3324      	adds	r3, #36	; 0x24
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f8b6 	bl	80088f8 <RCCEx_PLL3_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007790:	e005      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
      break;
 8007796:	e002      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007798:	bf00      	nop
 800779a:	e000      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800779c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077a4:	4b7c      	ldr	r3, [pc, #496]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80077a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	4979      	ldr	r1, [pc, #484]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	650b      	str	r3, [r1, #80]	; 0x50
 80077b6:	e001      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d049      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d0:	d02e      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80077d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d6:	d828      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80077d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077dc:	d02a      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80077de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e2:	d822      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80077e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077e8:	d026      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80077ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077ee:	d81c      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d010      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80077f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fa:	d816      	bhi.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01d      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d111      	bne.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	2101      	movs	r1, #1
 800780c:	4618      	mov	r0, r3
 800780e:	f000 ffc1 	bl	8008794 <RCCEx_PLL2_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007816:	e012      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3324      	adds	r3, #36	; 0x24
 800781c:	2101      	movs	r1, #1
 800781e:	4618      	mov	r0, r3
 8007820:	f001 f86a 	bl	80088f8 <RCCEx_PLL3_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007828:	e009      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	75fb      	strb	r3, [r7, #23]
      break;
 800782e:	e006      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007830:	bf00      	nop
 8007832:	e004      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800783c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007844:	4b54      	ldr	r3, [pc, #336]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007848:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	4951      	ldr	r1, [pc, #324]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007852:	4313      	orrs	r3, r2
 8007854:	650b      	str	r3, [r1, #80]	; 0x50
 8007856:	e001      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d04b      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800786e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007872:	d02e      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007878:	d828      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d02a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007884:	d822      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800788a:	d026      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800788c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007890:	d81c      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007896:	d010      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789c:	d816      	bhi.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01d      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80078a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a6:	d111      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3304      	adds	r3, #4
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 ff70 	bl	8008794 <RCCEx_PLL2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078b8:	e012      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3324      	adds	r3, #36	; 0x24
 80078be:	2101      	movs	r1, #1
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 f819 	bl	80088f8 <RCCEx_PLL3_Config>
 80078c6:	4603      	mov	r3, r0
 80078c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078ca:	e009      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
      break;
 80078d0:	e006      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80078d2:	bf00      	nop
 80078d4:	e004      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80078d6:	bf00      	nop
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80078da:	bf00      	nop
 80078dc:	e000      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80078de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078e6:	4b2c      	ldr	r3, [pc, #176]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80078e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078f4:	4928      	ldr	r1, [pc, #160]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	658b      	str	r3, [r1, #88]	; 0x58
 80078fa:	e001      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d02f      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007914:	d00e      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d814      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d015      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007924:	d10f      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a1b      	ldr	r2, [pc, #108]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800792c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007932:	e00c      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f000 ff2a 	bl	8008794 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
      break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007954:	4b10      	ldr	r3, [pc, #64]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007960:	490d      	ldr	r1, [pc, #52]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8007962:	4313      	orrs	r3, r2
 8007964:	650b      	str	r3, [r1, #80]	; 0x50
 8007966:	e001      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d034      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797c:	2b03      	cmp	r3, #3
 800797e:	d81d      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079c3 	.word	0x080079c3
 800798c:	0800799d 	.word	0x0800799d
 8007990:	080079ab 	.word	0x080079ab
 8007994:	080079c3 	.word	0x080079c3
 8007998:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799c:	4bb1      	ldr	r3, [pc, #708]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4ab0      	ldr	r2, [pc, #704]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079a8:	e00c      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3304      	adds	r3, #4
 80079ae:	2102      	movs	r1, #2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 feef 	bl	8008794 <RCCEx_PLL2_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079ba:	e003      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	e000      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80079c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079ca:	4ba6      	ldr	r3, [pc, #664]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ce:	f023 0203 	bic.w	r2, r3, #3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d6:	49a3      	ldr	r1, [pc, #652]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079dc:	e001      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8086 	beq.w	8007afc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f0:	4b9d      	ldr	r3, [pc, #628]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a9c      	ldr	r2, [pc, #624]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80079f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079fc:	f7fa fc56 	bl	80022ac <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a02:	e009      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a04:	f7fa fc52 	bl	80022ac <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b64      	cmp	r3, #100	; 0x64
 8007a10:	d902      	bls.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
        break;
 8007a16:	e005      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a18:	4b93      	ldr	r3, [pc, #588]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0ef      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d166      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a2a:	4b8e      	ldr	r3, [pc, #568]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a34:	4053      	eors	r3, r2
 8007a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d013      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a3e:	4b89      	ldr	r3, [pc, #548]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a48:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a85      	ldr	r2, [pc, #532]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a54:	4b83      	ldr	r3, [pc, #524]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a82      	ldr	r2, [pc, #520]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a60:	4a80      	ldr	r2, [pc, #512]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a70:	d115      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a72:	f7fa fc1b 	bl	80022ac <HAL_GetTick>
 8007a76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a78:	e00b      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7fa fc17 	bl	80022ac <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d902      	bls.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	75fb      	strb	r3, [r7, #23]
            break;
 8007a90:	e005      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a92:	4b74      	ldr	r3, [pc, #464]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0ed      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d126      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8007ab4:	4b6b      	ldr	r3, [pc, #428]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ac2:	0919      	lsrs	r1, r3, #4
 8007ac4:	4b69      	ldr	r3, [pc, #420]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ac6:	400b      	ands	r3, r1
 8007ac8:	4966      	ldr	r1, [pc, #408]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	610b      	str	r3, [r1, #16]
 8007ace:	e005      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8007ad0:	4b64      	ldr	r3, [pc, #400]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	4a63      	ldr	r2, [pc, #396]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ad6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ada:	6113      	str	r3, [r2, #16]
 8007adc:	4b61      	ldr	r3, [pc, #388]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007ade:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aea:	495e      	ldr	r1, [pc, #376]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	670b      	str	r3, [r1, #112]	; 0x70
 8007af0:	e004      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	75bb      	strb	r3, [r7, #22]
 8007af6:	e001      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d07e      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0c:	2b28      	cmp	r3, #40	; 0x28
 8007b0e:	d867      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007be7 	.word	0x08007be7
 8007b1c:	08007be1 	.word	0x08007be1
 8007b20:	08007be1 	.word	0x08007be1
 8007b24:	08007be1 	.word	0x08007be1
 8007b28:	08007be1 	.word	0x08007be1
 8007b2c:	08007be1 	.word	0x08007be1
 8007b30:	08007be1 	.word	0x08007be1
 8007b34:	08007be1 	.word	0x08007be1
 8007b38:	08007bbd 	.word	0x08007bbd
 8007b3c:	08007be1 	.word	0x08007be1
 8007b40:	08007be1 	.word	0x08007be1
 8007b44:	08007be1 	.word	0x08007be1
 8007b48:	08007be1 	.word	0x08007be1
 8007b4c:	08007be1 	.word	0x08007be1
 8007b50:	08007be1 	.word	0x08007be1
 8007b54:	08007be1 	.word	0x08007be1
 8007b58:	08007bcf 	.word	0x08007bcf
 8007b5c:	08007be1 	.word	0x08007be1
 8007b60:	08007be1 	.word	0x08007be1
 8007b64:	08007be1 	.word	0x08007be1
 8007b68:	08007be1 	.word	0x08007be1
 8007b6c:	08007be1 	.word	0x08007be1
 8007b70:	08007be1 	.word	0x08007be1
 8007b74:	08007be1 	.word	0x08007be1
 8007b78:	08007be7 	.word	0x08007be7
 8007b7c:	08007be1 	.word	0x08007be1
 8007b80:	08007be1 	.word	0x08007be1
 8007b84:	08007be1 	.word	0x08007be1
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007be1 	.word	0x08007be1
 8007b94:	08007be1 	.word	0x08007be1
 8007b98:	08007be7 	.word	0x08007be7
 8007b9c:	08007be1 	.word	0x08007be1
 8007ba0:	08007be1 	.word	0x08007be1
 8007ba4:	08007be1 	.word	0x08007be1
 8007ba8:	08007be1 	.word	0x08007be1
 8007bac:	08007be1 	.word	0x08007be1
 8007bb0:	08007be1 	.word	0x08007be1
 8007bb4:	08007be1 	.word	0x08007be1
 8007bb8:	08007be7 	.word	0x08007be7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fde6 	bl	8008794 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bcc:	e00c      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3324      	adds	r3, #36	; 0x24
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fe8f 	bl	80088f8 <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
      break;
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8007be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007bee:	4b1d      	ldr	r3, [pc, #116]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bfa:	491a      	ldr	r1, [pc, #104]	; (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007c00:	e001      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d03e      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d820      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c4b 	.word	0x08007c4b
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fda8 	bl	8008794 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c48:	e013      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3324      	adds	r3, #36	; 0x24
 8007c4e:	2101      	movs	r1, #1
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fe51 	bl	80088f8 <RCCEx_PLL3_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c5a:	e00a      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c60:	e007      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007c62:	bf00      	nop
 8007c64:	58024400 	.word	0x58024400
 8007c68:	58024800 	.word	0x58024800
 8007c6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c78:	4b9f      	ldr	r3, [pc, #636]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	f023 0207 	bic.w	r2, r3, #7
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c84:	499c      	ldr	r1, [pc, #624]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	654b      	str	r3, [r1, #84]	; 0x54
 8007c8a:	e001      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d039      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d820      	bhi.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007ca6:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cef 	.word	0x08007cef
 8007cb0:	08007cc5 	.word	0x08007cc5
 8007cb4:	08007cd7 	.word	0x08007cd7
 8007cb8:	08007cef 	.word	0x08007cef
 8007cbc:	08007cef 	.word	0x08007cef
 8007cc0:	08007cef 	.word	0x08007cef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	2101      	movs	r1, #1
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fd62 	bl	8008794 <RCCEx_PLL2_Config>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cd4:	e00c      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3324      	adds	r3, #36	; 0x24
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fe0b 	bl	80088f8 <RCCEx_PLL3_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	e000      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cf6:	4b80      	ldr	r3, [pc, #512]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	f023 0207 	bic.w	r2, r3, #7
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d04:	497c      	ldr	r1, [pc, #496]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	658b      	str	r3, [r1, #88]	; 0x58
 8007d0a:	e001      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d04b      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d26:	d02e      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d2c:	d828      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d32:	d02a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d822      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d3e:	d026      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d44:	d81c      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4a:	d010      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d50:	d816      	bhi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01d      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d5a:	d111      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	2100      	movs	r1, #0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fd16 	bl	8008794 <RCCEx_PLL2_Config>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d6c:	e012      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3324      	adds	r3, #36	; 0x24
 8007d72:	2102      	movs	r1, #2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fdbf 	bl	80088f8 <RCCEx_PLL3_Config>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d7e:	e009      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
      break;
 8007d84:	e006      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d86:	bf00      	nop
 8007d88:	e004      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d8a:	bf00      	nop
 8007d8c:	e002      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d9a:	4b57      	ldr	r3, [pc, #348]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da8:	4953      	ldr	r1, [pc, #332]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	654b      	str	r3, [r1, #84]	; 0x54
 8007dae:	e001      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d04b      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dca:	d02e      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007dcc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dd0:	d828      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd6:	d02a      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ddc:	d822      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de2:	d026      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de8:	d81c      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dee:	d010      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df4:	d816      	bhi.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01d      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfe:	d111      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fcc4 	bl	8008794 <RCCEx_PLL2_Config>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e10:	e012      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3324      	adds	r3, #36	; 0x24
 8007e16:	2102      	movs	r1, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fd6d 	bl	80088f8 <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e22:	e009      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
      break;
 8007e28:	e006      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e004      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e2e:	bf00      	nop
 8007e30:	e002      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e3e:	4b2e      	ldr	r3, [pc, #184]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e4c:	492a      	ldr	r1, [pc, #168]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	658b      	str	r3, [r1, #88]	; 0x58
 8007e52:	e001      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d04d      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e6e:	d02e      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007e70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e74:	d828      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7a:	d02a      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e80:	d822      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e86:	d026      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007e88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e8c:	d81c      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e92:	d010      	beq.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e98:	d816      	bhi.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d01d      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea2:	d111      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fc72 	bl	8008794 <RCCEx_PLL2_Config>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eb4:	e012      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3324      	adds	r3, #36	; 0x24
 8007eba:	2102      	movs	r1, #2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fd1b 	bl	80088f8 <RCCEx_PLL3_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ec6:	e009      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75fb      	strb	r3, [r7, #23]
      break;
 8007ecc:	e006      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e004      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ef0:	4901      	ldr	r1, [pc, #4]	; (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef6:	e003      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d018      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f14:	d10a      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3324      	adds	r3, #36	; 0x24
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fceb 	bl	80088f8 <RCCEx_PLL3_Config>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007f2c:	4b8a      	ldr	r3, [pc, #552]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f38:	4987      	ldr	r1, [pc, #540]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0310 	and.w	r3, r3, #16
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01a      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f54:	d10a      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3324      	adds	r3, #36	; 0x24
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fccb 	bl	80088f8 <RCCEx_PLL3_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f6c:	4b7a      	ldr	r3, [pc, #488]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7a:	4977      	ldr	r1, [pc, #476]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d034      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f96:	d01d      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f9c:	d817      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa6:	d009      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007fa8:	e011      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3304      	adds	r3, #4
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fbef 	bl	8008794 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fba:	e00c      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3324      	adds	r3, #36	; 0x24
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fc98 	bl	80088f8 <RCCEx_PLL3_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fcc:	e003      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd2:	e000      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fdc:	4b5e      	ldr	r3, [pc, #376]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fea:	495b      	ldr	r1, [pc, #364]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	658b      	str	r3, [r1, #88]	; 0x58
 8007ff0:	e001      	b.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d033      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008008:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800800c:	d01c      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800800e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008012:	d816      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800801a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800801e:	d007      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008020:	e00f      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008022:	4b4d      	ldr	r3, [pc, #308]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	4a4c      	ldr	r2, [pc, #304]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800802e:	e00c      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3324      	adds	r3, #36	; 0x24
 8008034:	2101      	movs	r1, #1
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fc5e 	bl	80088f8 <RCCEx_PLL3_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008040:	e003      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
      break;
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008050:	4b41      	ldr	r3, [pc, #260]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800805e:	493e      	ldr	r1, [pc, #248]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008060:	4313      	orrs	r3, r2
 8008062:	654b      	str	r3, [r1, #84]	; 0x54
 8008064:	e001      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
 8008068:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d029      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800807e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008082:	d007      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008084:	e00f      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008086:	4b34      	ldr	r3, [pc, #208]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	4a33      	ldr	r2, [pc, #204]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800808c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008092:	e00b      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3304      	adds	r3, #4
 8008098:	2102      	movs	r1, #2
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fb7a 	bl	8008794 <RCCEx_PLL2_Config>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080a4:	e002      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	75fb      	strb	r3, [r7, #23]
      break;
 80080aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080b2:	4b29      	ldr	r3, [pc, #164]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80080b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080be:	4926      	ldr	r1, [pc, #152]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080c4:	e001      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3324      	adds	r3, #36	; 0x24
 80080da:	2102      	movs	r1, #2
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc0b 	bl	80088f8 <RCCEx_PLL3_Config>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d033      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008100:	d017      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008106:	d811      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810c:	d013      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800810e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008112:	d80b      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d010      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8008118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811c:	d106      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811e:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800812a:	e007      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
      break;
 8008130:	e004      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008132:	bf00      	nop
 8008134:	e002      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008136:	bf00      	nop
 8008138:	e000      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800813a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10c      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800814e:	4902      	ldr	r1, [pc, #8]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008150:	4313      	orrs	r3, r2
 8008152:	654b      	str	r3, [r1, #84]	; 0x54
 8008154:	e004      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8008156:	bf00      	nop
 8008158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800816c:	4b29      	ldr	r3, [pc, #164]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800816e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008178:	4926      	ldr	r1, [pc, #152]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800817a:	4313      	orrs	r3, r2
 800817c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d008      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800818a:	4b22      	ldr	r3, [pc, #136]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800818c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008196:	491f      	ldr	r1, [pc, #124]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008198:	4313      	orrs	r3, r2
 800819a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00d      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081a8:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081b2:	6113      	str	r3, [r2, #16]
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081be:	4915      	ldr	r1, [pc, #84]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da08      	bge.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081cc:	4b11      	ldr	r3, [pc, #68]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	490e      	ldr	r1, [pc, #56]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d009      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081ea:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f8:	4906      	ldr	r1, [pc, #24]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	e000      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	58024400 	.word	0x58024400

08008218 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800821c:	f7ff f864 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8008220:	4602      	mov	r2, r0
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	091b      	lsrs	r3, r3, #4
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800822e:	5ccb      	ldrb	r3, [r1, r3]
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008238:	4618      	mov	r0, r3
 800823a:	bd80      	pop	{r7, pc}
 800823c:	58024400 	.word	0x58024400
 8008240:	0802ec68 	.word	0x0802ec68

08008244 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008244:	b480      	push	{r7}
 8008246:	b089      	sub	sp, #36	; 0x24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800824c:	4ba1      	ldr	r3, [pc, #644]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008256:	4b9f      	ldr	r3, [pc, #636]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	0b1b      	lsrs	r3, r3, #12
 800825c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008260:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008262:	4b9c      	ldr	r3, [pc, #624]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	091b      	lsrs	r3, r3, #4
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800826e:	4b99      	ldr	r3, [pc, #612]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	08db      	lsrs	r3, r3, #3
 8008274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8111 	beq.w	80084b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f000 8083 	beq.w	80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f200 80a1 	bhi.w	80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d056      	beq.n	800835c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082ae:	e099      	b.n	80083e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b0:	4b88      	ldr	r3, [pc, #544]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02d      	beq.n	8008318 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082bc:	4b85      	ldr	r3, [pc, #532]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	4a84      	ldr	r2, [pc, #528]	; (80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
 80082cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b7b      	ldr	r3, [pc, #492]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008316:	e087      	b.n	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832a:	4b6a      	ldr	r3, [pc, #424]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833a:	ed97 6a03 	vldr	s12, [r7, #12]
 800833e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800834e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800835a:	e065      	b.n	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800836a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836e:	4b59      	ldr	r3, [pc, #356]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008382:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800839e:	e043      	b.n	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b2:	4b48      	ldr	r3, [pc, #288]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083e2:	e021      	b.n	8008428 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f6:	4b37      	ldr	r3, [pc, #220]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	ed97 6a03 	vldr	s12, [r7, #12]
 800840a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800840e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800841a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008426:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008428:	4b2a      	ldr	r3, [pc, #168]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	0a5b      	lsrs	r3, r3, #9
 800842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800843e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008442:	edd7 6a07 	vldr	s13, [r7, #28]
 8008446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800844e:	ee17 2a90 	vmov	r2, s15
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008456:	4b1f      	ldr	r3, [pc, #124]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800846c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008470:	edd7 6a07 	vldr	s13, [r7, #28]
 8008474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847c:	ee17 2a90 	vmov	r2, s15
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	0e1b      	lsrs	r3, r3, #24
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	ee07 3a90 	vmov	s15, r3
 8008492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800849e:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084aa:	ee17 2a90 	vmov	r2, s15
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	609a      	str	r2, [r3, #8]
}
 80084c6:	bf00      	nop
 80084c8:	3724      	adds	r7, #36	; 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	58024400 	.word	0x58024400
 80084d8:	03d09000 	.word	0x03d09000
 80084dc:	46000000 	.word	0x46000000
 80084e0:	4c742400 	.word	0x4c742400
 80084e4:	4a742400 	.word	0x4a742400
 80084e8:	4af42400 	.word	0x4af42400

080084ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b089      	sub	sp, #36	; 0x24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084f4:	4ba1      	ldr	r3, [pc, #644]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80084fe:	4b9f      	ldr	r3, [pc, #636]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	0d1b      	lsrs	r3, r3, #20
 8008504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008508:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800850a:	4b9c      	ldr	r3, [pc, #624]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	0a1b      	lsrs	r3, r3, #8
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008516:	4b99      	ldr	r3, [pc, #612]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851a:	08db      	lsrs	r3, r3, #3
 800851c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8111 	beq.w	800875c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b02      	cmp	r3, #2
 800853e:	f000 8083 	beq.w	8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	2b02      	cmp	r3, #2
 8008546:	f200 80a1 	bhi.w	800868c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d056      	beq.n	8008604 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008556:	e099      	b.n	800868c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008558:	4b88      	ldr	r3, [pc, #544]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02d      	beq.n	80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008564:	4b85      	ldr	r3, [pc, #532]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	08db      	lsrs	r3, r3, #3
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	4a84      	ldr	r2, [pc, #528]	; (8008780 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008570:	fa22 f303 	lsr.w	r3, r2, r3
 8008574:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858e:	4b7b      	ldr	r3, [pc, #492]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859e:	ed97 6a03 	vldr	s12, [r7, #12]
 80085a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085be:	e087      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d2:	4b6a      	ldr	r3, [pc, #424]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008602:	e065      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008616:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	ed97 6a03 	vldr	s12, [r7, #12]
 800862a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800862e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800863a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008646:	e043      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800865a:	4b48      	ldr	r3, [pc, #288]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800866a:	ed97 6a03 	vldr	s12, [r7, #12]
 800866e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800867a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800867e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800868a:	e021      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800878c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800869a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869e:	4b37      	ldr	r3, [pc, #220]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80086b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80086d0:	4b2a      	ldr	r3, [pc, #168]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	0a5b      	lsrs	r3, r3, #9
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f6:	ee17 2a90 	vmov	r2, s15
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80086fe:	4b1f      	ldr	r3, [pc, #124]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	ee07 3a90 	vmov	s15, r3
 800870c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008718:	edd7 6a07 	vldr	s13, [r7, #28]
 800871c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008724:	ee17 2a90 	vmov	r2, s15
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800872c:	4b13      	ldr	r3, [pc, #76]	; (800877c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	0e1b      	lsrs	r3, r3, #24
 8008732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008746:	edd7 6a07 	vldr	s13, [r7, #28]
 800874a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800874e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008752:	ee17 2a90 	vmov	r2, s15
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800875a:	e008      	b.n	800876e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	609a      	str	r2, [r3, #8]
}
 800876e:	bf00      	nop
 8008770:	3724      	adds	r7, #36	; 0x24
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	58024400 	.word	0x58024400
 8008780:	03d09000 	.word	0x03d09000
 8008784:	46000000 	.word	0x46000000
 8008788:	4c742400 	.word	0x4c742400
 800878c:	4a742400 	.word	0x4a742400
 8008790:	4af42400 	.word	0x4af42400

08008794 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087a2:	4b53      	ldr	r3, [pc, #332]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d101      	bne.n	80087b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e099      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80087b2:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4e      	ldr	r2, [pc, #312]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087be:	f7f9 fd75 	bl	80022ac <HAL_GetTick>
 80087c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087c4:	e008      	b.n	80087d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80087c6:	f7f9 fd71 	bl	80022ac <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e086      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087d8:	4b45      	ldr	r3, [pc, #276]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80087e4:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	031b      	lsls	r3, r3, #12
 80087f2:	493f      	ldr	r1, [pc, #252]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	628b      	str	r3, [r1, #40]	; 0x28
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	3b01      	subs	r3, #1
 80087fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	025b      	lsls	r3, r3, #9
 800880a:	b29b      	uxth	r3, r3
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	3b01      	subs	r3, #1
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	3b01      	subs	r3, #1
 8008822:	061b      	lsls	r3, r3, #24
 8008824:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008828:	4931      	ldr	r1, [pc, #196]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800882a:	4313      	orrs	r3, r2
 800882c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	492d      	ldr	r1, [pc, #180]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800883c:	4313      	orrs	r3, r2
 800883e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008840:	4b2b      	ldr	r3, [pc, #172]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f023 0220 	bic.w	r2, r3, #32
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	4928      	ldr	r1, [pc, #160]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008852:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	4a26      	ldr	r2, [pc, #152]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008858:	f023 0310 	bic.w	r3, r3, #16
 800885c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008862:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <RCCEx_PLL2_Config+0x160>)
 8008864:	4013      	ands	r3, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	69d2      	ldr	r2, [r2, #28]
 800886a:	00d2      	lsls	r2, r2, #3
 800886c:	4920      	ldr	r1, [pc, #128]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800886e:	4313      	orrs	r3, r2
 8008870:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008872:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	4a1e      	ldr	r2, [pc, #120]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008878:	f043 0310 	orr.w	r3, r3, #16
 800887c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008884:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a19      	ldr	r2, [pc, #100]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800888a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008890:	e00f      	b.n	80088b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d106      	bne.n	80088a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	4a14      	ldr	r2, [pc, #80]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 800889e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80088a4:	e005      	b.n	80088b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80088a6:	4b12      	ldr	r3, [pc, #72]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a0e      	ldr	r2, [pc, #56]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088be:	f7f9 fcf5 	bl	80022ac <HAL_GetTick>
 80088c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088c4:	e008      	b.n	80088d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088c6:	f7f9 fcf1 	bl	80022ac <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d901      	bls.n	80088d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e006      	b.n	80088e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <RCCEx_PLL2_Config+0x15c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d0f0      	beq.n	80088c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	ffff0007 	.word	0xffff0007

080088f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008906:	4b53      	ldr	r3, [pc, #332]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	f003 0303 	and.w	r3, r3, #3
 800890e:	2b03      	cmp	r3, #3
 8008910:	d101      	bne.n	8008916 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e099      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008916:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a4e      	ldr	r2, [pc, #312]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800891c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008922:	f7f9 fcc3 	bl	80022ac <HAL_GetTick>
 8008926:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008928:	e008      	b.n	800893c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800892a:	f7f9 fcbf 	bl	80022ac <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e086      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800893c:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1f0      	bne.n	800892a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008948:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	051b      	lsls	r3, r3, #20
 8008956:	493f      	ldr	r1, [pc, #252]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	628b      	str	r3, [r1, #40]	; 0x28
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	3b01      	subs	r3, #1
 8008962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	3b01      	subs	r3, #1
 800896c:	025b      	lsls	r3, r3, #9
 800896e:	b29b      	uxth	r3, r3
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	3b01      	subs	r3, #1
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	3b01      	subs	r3, #1
 8008986:	061b      	lsls	r3, r3, #24
 8008988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800898c:	4931      	ldr	r1, [pc, #196]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 800898e:	4313      	orrs	r3, r2
 8008990:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	492d      	ldr	r1, [pc, #180]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80089a4:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	4928      	ldr	r1, [pc, #160]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80089b6:	4b27      	ldr	r3, [pc, #156]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	4a26      	ldr	r2, [pc, #152]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c6:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <RCCEx_PLL3_Config+0x160>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	69d2      	ldr	r2, [r2, #28]
 80089ce:	00d2      	lsls	r2, r2, #3
 80089d0:	4920      	ldr	r1, [pc, #128]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80089d6:	4b1f      	ldr	r3, [pc, #124]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a19      	ldr	r2, [pc, #100]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80089f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089f4:	e00f      	b.n	8008a16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d106      	bne.n	8008a0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 80089fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a00:	4a14      	ldr	r2, [pc, #80]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008a08:	e005      	b.n	8008a16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	4a11      	ldr	r2, [pc, #68]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a16:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a22:	f7f9 fc43 	bl	80022ac <HAL_GetTick>
 8008a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a28:	e008      	b.n	8008a3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a2a:	f7f9 fc3f 	bl	80022ac <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d901      	bls.n	8008a3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e006      	b.n	8008a4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a3c:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <RCCEx_PLL3_Config+0x15c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0f0      	beq.n	8008a2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	58024400 	.word	0x58024400
 8008a58:	ffff0007 	.word	0xffff0007

08008a5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e02b      	b.n	8008ac8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7f9 f9b9 	bl	8001dfc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f001 fda1 	bl	800a5e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	f001 fdf5 	bl	800a69c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <HAL_SDRAM_Init+0x74>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a06      	ldr	r2, [pc, #24]	; (8008ad0 <HAL_SDRAM_Init+0x74>)
 8008ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008abc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	52004000 	.word	0x52004000

08008ad4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e0f1      	b.n	8008cca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a78      	ldr	r2, [pc, #480]	; (8008cd4 <HAL_SPI_Init+0x200>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00f      	beq.n	8008b16 <HAL_SPI_Init+0x42>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a77      	ldr	r2, [pc, #476]	; (8008cd8 <HAL_SPI_Init+0x204>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00a      	beq.n	8008b16 <HAL_SPI_Init+0x42>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a75      	ldr	r2, [pc, #468]	; (8008cdc <HAL_SPI_Init+0x208>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d005      	beq.n	8008b16 <HAL_SPI_Init+0x42>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	2b0f      	cmp	r3, #15
 8008b10:	d901      	bls.n	8008b16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e0d9      	b.n	8008cca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f8e2 	bl	8008ce0 <SPI_GetPacketSize>
 8008b1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a6c      	ldr	r2, [pc, #432]	; (8008cd4 <HAL_SPI_Init+0x200>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00c      	beq.n	8008b42 <HAL_SPI_Init+0x6e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a6a      	ldr	r2, [pc, #424]	; (8008cd8 <HAL_SPI_Init+0x204>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d007      	beq.n	8008b42 <HAL_SPI_Init+0x6e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a69      	ldr	r2, [pc, #420]	; (8008cdc <HAL_SPI_Init+0x208>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d002      	beq.n	8008b42 <HAL_SPI_Init+0x6e>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d811      	bhi.n	8008b66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b46:	4a63      	ldr	r2, [pc, #396]	; (8008cd4 <HAL_SPI_Init+0x200>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d009      	beq.n	8008b60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a61      	ldr	r2, [pc, #388]	; (8008cd8 <HAL_SPI_Init+0x204>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d004      	beq.n	8008b60 <HAL_SPI_Init+0x8c>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a60      	ldr	r2, [pc, #384]	; (8008cdc <HAL_SPI_Init+0x208>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d104      	bne.n	8008b6a <HAL_SPI_Init+0x96>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d901      	bls.n	8008b6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0af      	b.n	8008cca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f8 ff92 	bl	8001aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008ba6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bb0:	d119      	bne.n	8008be6 <HAL_SPI_Init+0x112>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bba:	d103      	bne.n	8008bc4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d008      	beq.n	8008bd6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10c      	bne.n	8008be6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bd4:	d107      	bne.n	8008be6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008be4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69da      	ldr	r2, [r3, #28]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf8:	ea42 0103 	orr.w	r1, r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	431a      	orrs	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	431a      	orrs	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c46:	ea42 0103 	orr.w	r1, r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d113      	bne.n	8008c86 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0201 	bic.w	r2, r2, #1
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40013000 	.word	0x40013000
 8008cd8:	40003800 	.word	0x40003800
 8008cdc:	40003c00 	.word	0x40003c00

08008ce0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3307      	adds	r3, #7
 8008cfe:	08db      	lsrs	r3, r3, #3
 8008d00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e049      	b.n	8008dbc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f841 	bl	8008dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f000 fa0d 	bl	8009174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d001      	beq.n	8008df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e05e      	b.n	8008eae <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a2b      	ldr	r2, [pc, #172]	; (8008ebc <HAL_TIM_Base_Start_IT+0xe4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d02c      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1a:	d027      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a27      	ldr	r2, [pc, #156]	; (8008ec0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d022      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a26      	ldr	r2, [pc, #152]	; (8008ec4 <HAL_TIM_Base_Start_IT+0xec>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d01d      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a24      	ldr	r2, [pc, #144]	; (8008ec8 <HAL_TIM_Base_Start_IT+0xf0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d018      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a23      	ldr	r2, [pc, #140]	; (8008ecc <HAL_TIM_Base_Start_IT+0xf4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <HAL_TIM_Base_Start_IT+0xf8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a20      	ldr	r2, [pc, #128]	; (8008ed4 <HAL_TIM_Base_Start_IT+0xfc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <HAL_TIM_Base_Start_IT+0x100>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x94>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1d      	ldr	r2, [pc, #116]	; (8008edc <HAL_TIM_Base_Start_IT+0x104>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d115      	bne.n	8008e98 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_TIM_Base_Start_IT+0x108>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b06      	cmp	r3, #6
 8008e7c:	d015      	beq.n	8008eaa <HAL_TIM_Base_Start_IT+0xd2>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e84:	d011      	beq.n	8008eaa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	e008      	b.n	8008eaa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	e000      	b.n	8008eac <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40010000 	.word	0x40010000
 8008ec0:	40000400 	.word	0x40000400
 8008ec4:	40000800 	.word	0x40000800
 8008ec8:	40000c00 	.word	0x40000c00
 8008ecc:	40010400 	.word	0x40010400
 8008ed0:	40001800 	.word	0x40001800
 8008ed4:	40014000 	.word	0x40014000
 8008ed8:	4000e000 	.word	0x4000e000
 8008edc:	4000e400 	.word	0x4000e400
 8008ee0:	00010007 	.word	0x00010007

08008ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d122      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0302 	and.w	r3, r3, #2
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d11b      	bne.n	8008f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f06f 0202 	mvn.w	r2, #2
 8008f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f905 	bl	8009136 <HAL_TIM_IC_CaptureCallback>
 8008f2c:	e005      	b.n	8008f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8f7 	bl	8009122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f908 	bl	800914a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d122      	bne.n	8008f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	d11b      	bne.n	8008f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f06f 0204 	mvn.w	r2, #4
 8008f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f8db 	bl	8009136 <HAL_TIM_IC_CaptureCallback>
 8008f80:	e005      	b.n	8008f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f8cd 	bl	8009122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8de 	bl	800914a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d122      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b08      	cmp	r3, #8
 8008fae:	d11b      	bne.n	8008fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0208 	mvn.w	r2, #8
 8008fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2204      	movs	r2, #4
 8008fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f003 0303 	and.w	r3, r3, #3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f8b1 	bl	8009136 <HAL_TIM_IC_CaptureCallback>
 8008fd4:	e005      	b.n	8008fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f8a3 	bl	8009122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f8b4 	bl	800914a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d122      	bne.n	800903c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b10      	cmp	r3, #16
 8009002:	d11b      	bne.n	800903c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f06f 0210 	mvn.w	r2, #16
 800900c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2208      	movs	r2, #8
 8009012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f887 	bl	8009136 <HAL_TIM_IC_CaptureCallback>
 8009028:	e005      	b.n	8009036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f879 	bl	8009122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f88a 	bl	800914a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b01      	cmp	r3, #1
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b01      	cmp	r3, #1
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0201 	mvn.w	r2, #1
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7f8 f894 	bl	8001190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009072:	2b80      	cmp	r3, #128	; 0x80
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009080:	2b80      	cmp	r3, #128	; 0x80
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f920 	bl	80092d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a2:	d10e      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ae:	2b80      	cmp	r3, #128	; 0x80
 80090b0:	d107      	bne.n	80090c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f913 	bl	80092e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d10e      	bne.n	80090ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d107      	bne.n	80090ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f838 	bl	800915e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d10e      	bne.n	800911a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b20      	cmp	r3, #32
 8009108:	d107      	bne.n	800911a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f06f 0220 	mvn.w	r2, #32
 8009112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f8d3 	bl	80092c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800912a:	bf00      	nop
 800912c:	370c      	adds	r7, #12
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009166:	bf00      	nop
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a44      	ldr	r2, [pc, #272]	; (8009298 <TIM_Base_SetConfig+0x124>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <TIM_Base_SetConfig+0x40>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009192:	d00f      	beq.n	80091b4 <TIM_Base_SetConfig+0x40>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a41      	ldr	r2, [pc, #260]	; (800929c <TIM_Base_SetConfig+0x128>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d00b      	beq.n	80091b4 <TIM_Base_SetConfig+0x40>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	4a40      	ldr	r2, [pc, #256]	; (80092a0 <TIM_Base_SetConfig+0x12c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d007      	beq.n	80091b4 <TIM_Base_SetConfig+0x40>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a3f      	ldr	r2, [pc, #252]	; (80092a4 <TIM_Base_SetConfig+0x130>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d003      	beq.n	80091b4 <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a3e      	ldr	r2, [pc, #248]	; (80092a8 <TIM_Base_SetConfig+0x134>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d108      	bne.n	80091c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a33      	ldr	r2, [pc, #204]	; (8009298 <TIM_Base_SetConfig+0x124>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d027      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d4:	d023      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a30      	ldr	r2, [pc, #192]	; (800929c <TIM_Base_SetConfig+0x128>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d01f      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2f      	ldr	r2, [pc, #188]	; (80092a0 <TIM_Base_SetConfig+0x12c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01b      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a2e      	ldr	r2, [pc, #184]	; (80092a4 <TIM_Base_SetConfig+0x130>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d017      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a2d      	ldr	r2, [pc, #180]	; (80092a8 <TIM_Base_SetConfig+0x134>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d013      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <TIM_Base_SetConfig+0x138>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00f      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2b      	ldr	r2, [pc, #172]	; (80092b0 <TIM_Base_SetConfig+0x13c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00b      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <TIM_Base_SetConfig+0x140>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d007      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a29      	ldr	r2, [pc, #164]	; (80092b8 <TIM_Base_SetConfig+0x144>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_Base_SetConfig+0xaa>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a28      	ldr	r2, [pc, #160]	; (80092bc <TIM_Base_SetConfig+0x148>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d108      	bne.n	8009230 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	4313      	orrs	r3, r2
 800923c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a10      	ldr	r2, [pc, #64]	; (8009298 <TIM_Base_SetConfig+0x124>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00f      	beq.n	800927c <TIM_Base_SetConfig+0x108>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a12      	ldr	r2, [pc, #72]	; (80092a8 <TIM_Base_SetConfig+0x134>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00b      	beq.n	800927c <TIM_Base_SetConfig+0x108>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a11      	ldr	r2, [pc, #68]	; (80092ac <TIM_Base_SetConfig+0x138>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d007      	beq.n	800927c <TIM_Base_SetConfig+0x108>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a10      	ldr	r2, [pc, #64]	; (80092b0 <TIM_Base_SetConfig+0x13c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_Base_SetConfig+0x108>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a0f      	ldr	r2, [pc, #60]	; (80092b4 <TIM_Base_SetConfig+0x140>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d103      	bne.n	8009284 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	615a      	str	r2, [r3, #20]
}
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40010000 	.word	0x40010000
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40010400 	.word	0x40010400
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40014400 	.word	0x40014400
 80092b4:	40014800 	.word	0x40014800
 80092b8:	4000e000 	.word	0x4000e000
 80092bc:	4000e400 	.word	0x4000e400

080092c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e042      	b.n	8009394 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009314:	2b00      	cmp	r3, #0
 8009316:	d106      	bne.n	8009326 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7f8 fc4d 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2224      	movs	r2, #36	; 0x24
 800932a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0201 	bic.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f82c 	bl	800939c <UART_SetConfig>
 8009344:	4603      	mov	r3, r0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d101      	bne.n	800934e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e022      	b.n	8009394 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fe8c 	bl	800a074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800936a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800937a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0201 	orr.w	r2, r2, #1
 800938a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 ff13 	bl	800a1b8 <UART_CheckIdleState>
 8009392:	4603      	mov	r3, r0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800939c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093a0:	b092      	sub	sp, #72	; 0x48
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	431a      	orrs	r2, r3
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4bbe      	ldr	r3, [pc, #760]	; (80096c4 <UART_SetConfig+0x328>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093d4:	430b      	orrs	r3, r1
 80093d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4ab3      	ldr	r2, [pc, #716]	; (80096c8 <UART_SetConfig+0x32c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009404:	4313      	orrs	r3, r2
 8009406:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	4baf      	ldr	r3, [pc, #700]	; (80096cc <UART_SetConfig+0x330>)
 8009410:	4013      	ands	r3, r2
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009418:	430b      	orrs	r3, r1
 800941a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009422:	f023 010f 	bic.w	r1, r3, #15
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4aa6      	ldr	r2, [pc, #664]	; (80096d0 <UART_SetConfig+0x334>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d177      	bne.n	800952c <UART_SetConfig+0x190>
 800943c:	4ba5      	ldr	r3, [pc, #660]	; (80096d4 <UART_SetConfig+0x338>)
 800943e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009440:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009444:	2b28      	cmp	r3, #40	; 0x28
 8009446:	d86d      	bhi.n	8009524 <UART_SetConfig+0x188>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <UART_SetConfig+0xb4>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	080094f5 	.word	0x080094f5
 8009454:	08009525 	.word	0x08009525
 8009458:	08009525 	.word	0x08009525
 800945c:	08009525 	.word	0x08009525
 8009460:	08009525 	.word	0x08009525
 8009464:	08009525 	.word	0x08009525
 8009468:	08009525 	.word	0x08009525
 800946c:	08009525 	.word	0x08009525
 8009470:	080094fd 	.word	0x080094fd
 8009474:	08009525 	.word	0x08009525
 8009478:	08009525 	.word	0x08009525
 800947c:	08009525 	.word	0x08009525
 8009480:	08009525 	.word	0x08009525
 8009484:	08009525 	.word	0x08009525
 8009488:	08009525 	.word	0x08009525
 800948c:	08009525 	.word	0x08009525
 8009490:	08009505 	.word	0x08009505
 8009494:	08009525 	.word	0x08009525
 8009498:	08009525 	.word	0x08009525
 800949c:	08009525 	.word	0x08009525
 80094a0:	08009525 	.word	0x08009525
 80094a4:	08009525 	.word	0x08009525
 80094a8:	08009525 	.word	0x08009525
 80094ac:	08009525 	.word	0x08009525
 80094b0:	0800950d 	.word	0x0800950d
 80094b4:	08009525 	.word	0x08009525
 80094b8:	08009525 	.word	0x08009525
 80094bc:	08009525 	.word	0x08009525
 80094c0:	08009525 	.word	0x08009525
 80094c4:	08009525 	.word	0x08009525
 80094c8:	08009525 	.word	0x08009525
 80094cc:	08009525 	.word	0x08009525
 80094d0:	08009515 	.word	0x08009515
 80094d4:	08009525 	.word	0x08009525
 80094d8:	08009525 	.word	0x08009525
 80094dc:	08009525 	.word	0x08009525
 80094e0:	08009525 	.word	0x08009525
 80094e4:	08009525 	.word	0x08009525
 80094e8:	08009525 	.word	0x08009525
 80094ec:	08009525 	.word	0x08009525
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e326      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80094fc:	2304      	movs	r3, #4
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e322      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009504:	2308      	movs	r3, #8
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e31e      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800950c:	2310      	movs	r3, #16
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e31a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009514:	2320      	movs	r3, #32
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951a:	e316      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009522:	e312      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009524:	2380      	movs	r3, #128	; 0x80
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952a:	e30e      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a69      	ldr	r2, [pc, #420]	; (80096d8 <UART_SetConfig+0x33c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d130      	bne.n	8009598 <UART_SetConfig+0x1fc>
 8009536:	4b67      	ldr	r3, [pc, #412]	; (80096d4 <UART_SetConfig+0x338>)
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	2b05      	cmp	r3, #5
 8009540:	d826      	bhi.n	8009590 <UART_SetConfig+0x1f4>
 8009542:	a201      	add	r2, pc, #4	; (adr r2, 8009548 <UART_SetConfig+0x1ac>)
 8009544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009548:	08009561 	.word	0x08009561
 800954c:	08009569 	.word	0x08009569
 8009550:	08009571 	.word	0x08009571
 8009554:	08009579 	.word	0x08009579
 8009558:	08009581 	.word	0x08009581
 800955c:	08009589 	.word	0x08009589
 8009560:	2300      	movs	r3, #0
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e2f0      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009568:	2304      	movs	r3, #4
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956e:	e2ec      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009570:	2308      	movs	r3, #8
 8009572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009576:	e2e8      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009578:	2310      	movs	r3, #16
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957e:	e2e4      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009580:	2320      	movs	r3, #32
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009586:	e2e0      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009588:	2340      	movs	r3, #64	; 0x40
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958e:	e2dc      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009590:	2380      	movs	r3, #128	; 0x80
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009596:	e2d8      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a4f      	ldr	r2, [pc, #316]	; (80096dc <UART_SetConfig+0x340>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d130      	bne.n	8009604 <UART_SetConfig+0x268>
 80095a2:	4b4c      	ldr	r3, [pc, #304]	; (80096d4 <UART_SetConfig+0x338>)
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	f003 0307 	and.w	r3, r3, #7
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	d826      	bhi.n	80095fc <UART_SetConfig+0x260>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <UART_SetConfig+0x218>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	080095cd 	.word	0x080095cd
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	080095dd 	.word	0x080095dd
 80095c0:	080095e5 	.word	0x080095e5
 80095c4:	080095ed 	.word	0x080095ed
 80095c8:	080095f5 	.word	0x080095f5
 80095cc:	2300      	movs	r3, #0
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e2ba      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095d4:	2304      	movs	r3, #4
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095da:	e2b6      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095dc:	2308      	movs	r3, #8
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e2:	e2b2      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095e4:	2310      	movs	r3, #16
 80095e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ea:	e2ae      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f2:	e2aa      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fa:	e2a6      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80095fc:	2380      	movs	r3, #128	; 0x80
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009602:	e2a2      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a35      	ldr	r2, [pc, #212]	; (80096e0 <UART_SetConfig+0x344>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d130      	bne.n	8009670 <UART_SetConfig+0x2d4>
 800960e:	4b31      	ldr	r3, [pc, #196]	; (80096d4 <UART_SetConfig+0x338>)
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b05      	cmp	r3, #5
 8009618:	d826      	bhi.n	8009668 <UART_SetConfig+0x2cc>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <UART_SetConfig+0x284>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009639 	.word	0x08009639
 8009624:	08009641 	.word	0x08009641
 8009628:	08009649 	.word	0x08009649
 800962c:	08009651 	.word	0x08009651
 8009630:	08009659 	.word	0x08009659
 8009634:	08009661 	.word	0x08009661
 8009638:	2300      	movs	r3, #0
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e284      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009640:	2304      	movs	r3, #4
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009646:	e280      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009648:	2308      	movs	r3, #8
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964e:	e27c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009650:	2310      	movs	r3, #16
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009656:	e278      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009658:	2320      	movs	r3, #32
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965e:	e274      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009666:	e270      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009668:	2380      	movs	r3, #128	; 0x80
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966e:	e26c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a1b      	ldr	r2, [pc, #108]	; (80096e4 <UART_SetConfig+0x348>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d142      	bne.n	8009700 <UART_SetConfig+0x364>
 800967a:	4b16      	ldr	r3, [pc, #88]	; (80096d4 <UART_SetConfig+0x338>)
 800967c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	2b05      	cmp	r3, #5
 8009684:	d838      	bhi.n	80096f8 <UART_SetConfig+0x35c>
 8009686:	a201      	add	r2, pc, #4	; (adr r2, 800968c <UART_SetConfig+0x2f0>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096a5 	.word	0x080096a5
 8009690:	080096ad 	.word	0x080096ad
 8009694:	080096b5 	.word	0x080096b5
 8009698:	080096bd 	.word	0x080096bd
 800969c:	080096e9 	.word	0x080096e9
 80096a0:	080096f1 	.word	0x080096f1
 80096a4:	2300      	movs	r3, #0
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e24e      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096ac:	2304      	movs	r3, #4
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e24a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ba:	e246      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096bc:	2310      	movs	r3, #16
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c2:	e242      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096c4:	cfff69f3 	.word	0xcfff69f3
 80096c8:	58000c00 	.word	0x58000c00
 80096cc:	11fff4ff 	.word	0x11fff4ff
 80096d0:	40011000 	.word	0x40011000
 80096d4:	58024400 	.word	0x58024400
 80096d8:	40004400 	.word	0x40004400
 80096dc:	40004800 	.word	0x40004800
 80096e0:	40004c00 	.word	0x40004c00
 80096e4:	40005000 	.word	0x40005000
 80096e8:	2320      	movs	r3, #32
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ee:	e22c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096f0:	2340      	movs	r3, #64	; 0x40
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f6:	e228      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80096f8:	2380      	movs	r3, #128	; 0x80
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fe:	e224      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4ab1      	ldr	r2, [pc, #708]	; (80099cc <UART_SetConfig+0x630>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d176      	bne.n	80097f8 <UART_SetConfig+0x45c>
 800970a:	4bb1      	ldr	r3, [pc, #708]	; (80099d0 <UART_SetConfig+0x634>)
 800970c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009712:	2b28      	cmp	r3, #40	; 0x28
 8009714:	d86c      	bhi.n	80097f0 <UART_SetConfig+0x454>
 8009716:	a201      	add	r2, pc, #4	; (adr r2, 800971c <UART_SetConfig+0x380>)
 8009718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971c:	080097c1 	.word	0x080097c1
 8009720:	080097f1 	.word	0x080097f1
 8009724:	080097f1 	.word	0x080097f1
 8009728:	080097f1 	.word	0x080097f1
 800972c:	080097f1 	.word	0x080097f1
 8009730:	080097f1 	.word	0x080097f1
 8009734:	080097f1 	.word	0x080097f1
 8009738:	080097f1 	.word	0x080097f1
 800973c:	080097c9 	.word	0x080097c9
 8009740:	080097f1 	.word	0x080097f1
 8009744:	080097f1 	.word	0x080097f1
 8009748:	080097f1 	.word	0x080097f1
 800974c:	080097f1 	.word	0x080097f1
 8009750:	080097f1 	.word	0x080097f1
 8009754:	080097f1 	.word	0x080097f1
 8009758:	080097f1 	.word	0x080097f1
 800975c:	080097d1 	.word	0x080097d1
 8009760:	080097f1 	.word	0x080097f1
 8009764:	080097f1 	.word	0x080097f1
 8009768:	080097f1 	.word	0x080097f1
 800976c:	080097f1 	.word	0x080097f1
 8009770:	080097f1 	.word	0x080097f1
 8009774:	080097f1 	.word	0x080097f1
 8009778:	080097f1 	.word	0x080097f1
 800977c:	080097d9 	.word	0x080097d9
 8009780:	080097f1 	.word	0x080097f1
 8009784:	080097f1 	.word	0x080097f1
 8009788:	080097f1 	.word	0x080097f1
 800978c:	080097f1 	.word	0x080097f1
 8009790:	080097f1 	.word	0x080097f1
 8009794:	080097f1 	.word	0x080097f1
 8009798:	080097f1 	.word	0x080097f1
 800979c:	080097e1 	.word	0x080097e1
 80097a0:	080097f1 	.word	0x080097f1
 80097a4:	080097f1 	.word	0x080097f1
 80097a8:	080097f1 	.word	0x080097f1
 80097ac:	080097f1 	.word	0x080097f1
 80097b0:	080097f1 	.word	0x080097f1
 80097b4:	080097f1 	.word	0x080097f1
 80097b8:	080097f1 	.word	0x080097f1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e1c0      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097c8:	2304      	movs	r3, #4
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e1bc      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097d0:	2308      	movs	r3, #8
 80097d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d6:	e1b8      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097d8:	2310      	movs	r3, #16
 80097da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097de:	e1b4      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097e0:	2320      	movs	r3, #32
 80097e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e6:	e1b0      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ee:	e1ac      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097f0:	2380      	movs	r3, #128	; 0x80
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e1a8      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a75      	ldr	r2, [pc, #468]	; (80099d4 <UART_SetConfig+0x638>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d130      	bne.n	8009864 <UART_SetConfig+0x4c8>
 8009802:	4b73      	ldr	r3, [pc, #460]	; (80099d0 <UART_SetConfig+0x634>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	f003 0307 	and.w	r3, r3, #7
 800980a:	2b05      	cmp	r3, #5
 800980c:	d826      	bhi.n	800985c <UART_SetConfig+0x4c0>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <UART_SetConfig+0x478>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	0800982d 	.word	0x0800982d
 8009818:	08009835 	.word	0x08009835
 800981c:	0800983d 	.word	0x0800983d
 8009820:	08009845 	.word	0x08009845
 8009824:	0800984d 	.word	0x0800984d
 8009828:	08009855 	.word	0x08009855
 800982c:	2300      	movs	r3, #0
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009832:	e18a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009834:	2304      	movs	r3, #4
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983a:	e186      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800983c:	2308      	movs	r3, #8
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009842:	e182      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009844:	2310      	movs	r3, #16
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984a:	e17e      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800984c:	2320      	movs	r3, #32
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009852:	e17a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009854:	2340      	movs	r3, #64	; 0x40
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985a:	e176      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800985c:	2380      	movs	r3, #128	; 0x80
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009862:	e172      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a5b      	ldr	r2, [pc, #364]	; (80099d8 <UART_SetConfig+0x63c>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d130      	bne.n	80098d0 <UART_SetConfig+0x534>
 800986e:	4b58      	ldr	r3, [pc, #352]	; (80099d0 <UART_SetConfig+0x634>)
 8009870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b05      	cmp	r3, #5
 8009878:	d826      	bhi.n	80098c8 <UART_SetConfig+0x52c>
 800987a:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <UART_SetConfig+0x4e4>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009899 	.word	0x08009899
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098a9 	.word	0x080098a9
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2300      	movs	r3, #0
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e154      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e150      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ae:	e14c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b6:	e148      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098be:	e144      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098c0:	2340      	movs	r3, #64	; 0x40
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c6:	e140      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ce:	e13c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a41      	ldr	r2, [pc, #260]	; (80099dc <UART_SetConfig+0x640>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	f040 8082 	bne.w	80099e0 <UART_SetConfig+0x644>
 80098dc:	4b3c      	ldr	r3, [pc, #240]	; (80099d0 <UART_SetConfig+0x634>)
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e4:	2b28      	cmp	r3, #40	; 0x28
 80098e6:	d86d      	bhi.n	80099c4 <UART_SetConfig+0x628>
 80098e8:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <UART_SetConfig+0x554>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009995 	.word	0x08009995
 80098f4:	080099c5 	.word	0x080099c5
 80098f8:	080099c5 	.word	0x080099c5
 80098fc:	080099c5 	.word	0x080099c5
 8009900:	080099c5 	.word	0x080099c5
 8009904:	080099c5 	.word	0x080099c5
 8009908:	080099c5 	.word	0x080099c5
 800990c:	080099c5 	.word	0x080099c5
 8009910:	0800999d 	.word	0x0800999d
 8009914:	080099c5 	.word	0x080099c5
 8009918:	080099c5 	.word	0x080099c5
 800991c:	080099c5 	.word	0x080099c5
 8009920:	080099c5 	.word	0x080099c5
 8009924:	080099c5 	.word	0x080099c5
 8009928:	080099c5 	.word	0x080099c5
 800992c:	080099c5 	.word	0x080099c5
 8009930:	080099a5 	.word	0x080099a5
 8009934:	080099c5 	.word	0x080099c5
 8009938:	080099c5 	.word	0x080099c5
 800993c:	080099c5 	.word	0x080099c5
 8009940:	080099c5 	.word	0x080099c5
 8009944:	080099c5 	.word	0x080099c5
 8009948:	080099c5 	.word	0x080099c5
 800994c:	080099c5 	.word	0x080099c5
 8009950:	080099ad 	.word	0x080099ad
 8009954:	080099c5 	.word	0x080099c5
 8009958:	080099c5 	.word	0x080099c5
 800995c:	080099c5 	.word	0x080099c5
 8009960:	080099c5 	.word	0x080099c5
 8009964:	080099c5 	.word	0x080099c5
 8009968:	080099c5 	.word	0x080099c5
 800996c:	080099c5 	.word	0x080099c5
 8009970:	080099b5 	.word	0x080099b5
 8009974:	080099c5 	.word	0x080099c5
 8009978:	080099c5 	.word	0x080099c5
 800997c:	080099c5 	.word	0x080099c5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099c5 	.word	0x080099c5
 800998c:	080099c5 	.word	0x080099c5
 8009990:	080099bd 	.word	0x080099bd
 8009994:	2301      	movs	r3, #1
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e0d6      	b.n	8009b4a <UART_SetConfig+0x7ae>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e0d2      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e0ce      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b2:	e0ca      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099b4:	2320      	movs	r3, #32
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e0c6      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e0c2      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ca:	e0be      	b.n	8009b4a <UART_SetConfig+0x7ae>
 80099cc:	40011400 	.word	0x40011400
 80099d0:	58024400 	.word	0x58024400
 80099d4:	40007800 	.word	0x40007800
 80099d8:	40007c00 	.word	0x40007c00
 80099dc:	40011800 	.word	0x40011800
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4aad      	ldr	r2, [pc, #692]	; (8009c9c <UART_SetConfig+0x900>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d176      	bne.n	8009ad8 <UART_SetConfig+0x73c>
 80099ea:	4bad      	ldr	r3, [pc, #692]	; (8009ca0 <UART_SetConfig+0x904>)
 80099ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f2:	2b28      	cmp	r3, #40	; 0x28
 80099f4:	d86c      	bhi.n	8009ad0 <UART_SetConfig+0x734>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <UART_SetConfig+0x660>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009aa1 	.word	0x08009aa1
 8009a00:	08009ad1 	.word	0x08009ad1
 8009a04:	08009ad1 	.word	0x08009ad1
 8009a08:	08009ad1 	.word	0x08009ad1
 8009a0c:	08009ad1 	.word	0x08009ad1
 8009a10:	08009ad1 	.word	0x08009ad1
 8009a14:	08009ad1 	.word	0x08009ad1
 8009a18:	08009ad1 	.word	0x08009ad1
 8009a1c:	08009aa9 	.word	0x08009aa9
 8009a20:	08009ad1 	.word	0x08009ad1
 8009a24:	08009ad1 	.word	0x08009ad1
 8009a28:	08009ad1 	.word	0x08009ad1
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009ad1 	.word	0x08009ad1
 8009a34:	08009ad1 	.word	0x08009ad1
 8009a38:	08009ad1 	.word	0x08009ad1
 8009a3c:	08009ab1 	.word	0x08009ab1
 8009a40:	08009ad1 	.word	0x08009ad1
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009ad1 	.word	0x08009ad1
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ad1 	.word	0x08009ad1
 8009a54:	08009ad1 	.word	0x08009ad1
 8009a58:	08009ad1 	.word	0x08009ad1
 8009a5c:	08009ab9 	.word	0x08009ab9
 8009a60:	08009ad1 	.word	0x08009ad1
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009ad1 	.word	0x08009ad1
 8009a6c:	08009ad1 	.word	0x08009ad1
 8009a70:	08009ad1 	.word	0x08009ad1
 8009a74:	08009ad1 	.word	0x08009ad1
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ac1 	.word	0x08009ac1
 8009a80:	08009ad1 	.word	0x08009ad1
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad1 	.word	0x08009ad1
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ad1 	.word	0x08009ad1
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e050      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e04c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e048      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ab8:	2310      	movs	r3, #16
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e044      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e040      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ac8:	2340      	movs	r3, #64	; 0x40
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e03c      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e038      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a71      	ldr	r2, [pc, #452]	; (8009ca4 <UART_SetConfig+0x908>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d130      	bne.n	8009b44 <UART_SetConfig+0x7a8>
 8009ae2:	4b6f      	ldr	r3, [pc, #444]	; (8009ca0 <UART_SetConfig+0x904>)
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	d826      	bhi.n	8009b3c <UART_SetConfig+0x7a0>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <UART_SetConfig+0x758>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b0d 	.word	0x08009b0d
 8009af8:	08009b15 	.word	0x08009b15
 8009afc:	08009b1d 	.word	0x08009b1d
 8009b00:	08009b25 	.word	0x08009b25
 8009b04:	08009b2d 	.word	0x08009b2d
 8009b08:	08009b35 	.word	0x08009b35
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e01a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e016      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e012      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e00e      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e00a      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b34:	2340      	movs	r3, #64	; 0x40
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e006      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b3c:	2380      	movs	r3, #128	; 0x80
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e002      	b.n	8009b4a <UART_SetConfig+0x7ae>
 8009b44:	2380      	movs	r3, #128	; 0x80
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a55      	ldr	r2, [pc, #340]	; (8009ca4 <UART_SetConfig+0x908>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	f040 80f8 	bne.w	8009d46 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	dc46      	bgt.n	8009bec <UART_SetConfig+0x850>
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	db75      	blt.n	8009c4e <UART_SetConfig+0x8b2>
 8009b62:	3b02      	subs	r3, #2
 8009b64:	2b1e      	cmp	r3, #30
 8009b66:	d872      	bhi.n	8009c4e <UART_SetConfig+0x8b2>
 8009b68:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0x7d4>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009bf3 	.word	0x08009bf3
 8009b74:	08009c4f 	.word	0x08009c4f
 8009b78:	08009bfb 	.word	0x08009bfb
 8009b7c:	08009c4f 	.word	0x08009c4f
 8009b80:	08009c4f 	.word	0x08009c4f
 8009b84:	08009c4f 	.word	0x08009c4f
 8009b88:	08009c0b 	.word	0x08009c0b
 8009b8c:	08009c4f 	.word	0x08009c4f
 8009b90:	08009c4f 	.word	0x08009c4f
 8009b94:	08009c4f 	.word	0x08009c4f
 8009b98:	08009c4f 	.word	0x08009c4f
 8009b9c:	08009c4f 	.word	0x08009c4f
 8009ba0:	08009c4f 	.word	0x08009c4f
 8009ba4:	08009c4f 	.word	0x08009c4f
 8009ba8:	08009c1b 	.word	0x08009c1b
 8009bac:	08009c4f 	.word	0x08009c4f
 8009bb0:	08009c4f 	.word	0x08009c4f
 8009bb4:	08009c4f 	.word	0x08009c4f
 8009bb8:	08009c4f 	.word	0x08009c4f
 8009bbc:	08009c4f 	.word	0x08009c4f
 8009bc0:	08009c4f 	.word	0x08009c4f
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009c4f 	.word	0x08009c4f
 8009bcc:	08009c4f 	.word	0x08009c4f
 8009bd0:	08009c4f 	.word	0x08009c4f
 8009bd4:	08009c4f 	.word	0x08009c4f
 8009bd8:	08009c4f 	.word	0x08009c4f
 8009bdc:	08009c4f 	.word	0x08009c4f
 8009be0:	08009c4f 	.word	0x08009c4f
 8009be4:	08009c4f 	.word	0x08009c4f
 8009be8:	08009c41 	.word	0x08009c41
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d02a      	beq.n	8009c46 <UART_SetConfig+0x8aa>
 8009bf0:	e02d      	b.n	8009c4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bf2:	f7fe fb11 	bl	8008218 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009bf8:	e02f      	b.n	8009c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fb20 	bl	8008244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c08:	e027      	b.n	8009c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0a:	f107 0318 	add.w	r3, r7, #24
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fc6c 	bl	80084ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c18:	e01f      	b.n	8009c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c1a:	4b21      	ldr	r3, [pc, #132]	; (8009ca0 <UART_SetConfig+0x904>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c26:	4b1e      	ldr	r3, [pc, #120]	; (8009ca0 <UART_SetConfig+0x904>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	08db      	lsrs	r3, r3, #3
 8009c2c:	f003 0303 	and.w	r3, r3, #3
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <UART_SetConfig+0x90c>)
 8009c32:	fa22 f303 	lsr.w	r3, r2, r3
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c38:	e00f      	b.n	8009c5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <UART_SetConfig+0x90c>)
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c3e:	e00c      	b.n	8009c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c40:	4b1a      	ldr	r3, [pc, #104]	; (8009cac <UART_SetConfig+0x910>)
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c44:	e009      	b.n	8009c5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c4c:	e005      	b.n	8009c5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 81ee 	beq.w	800a03e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	4a12      	ldr	r2, [pc, #72]	; (8009cb0 <UART_SetConfig+0x914>)
 8009c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c74:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	4413      	add	r3, r2
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d305      	bcc.n	8009c92 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d910      	bls.n	8009cb4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c98:	e1d1      	b.n	800a03e <UART_SetConfig+0xca2>
 8009c9a:	bf00      	nop
 8009c9c:	40011c00 	.word	0x40011c00
 8009ca0:	58024400 	.word	0x58024400
 8009ca4:	58000c00 	.word	0x58000c00
 8009ca8:	03d09000 	.word	0x03d09000
 8009cac:	003d0900 	.word	0x003d0900
 8009cb0:	0802ec78 	.word	0x0802ec78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	60bb      	str	r3, [r7, #8]
 8009cba:	60fa      	str	r2, [r7, #12]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	4ac0      	ldr	r2, [pc, #768]	; (8009fc4 <UART_SetConfig+0xc28>)
 8009cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2200      	movs	r2, #0
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cd6:	f7f6 fb6b 	bl	80003b0 <__aeabi_uldivmod>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	020b      	lsls	r3, r1, #8
 8009cec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cf0:	0202      	lsls	r2, r0, #8
 8009cf2:	6979      	ldr	r1, [r7, #20]
 8009cf4:	6849      	ldr	r1, [r1, #4]
 8009cf6:	0849      	lsrs	r1, r1, #1
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	eb12 0804 	adds.w	r8, r2, r4
 8009d02:	eb43 0905 	adc.w	r9, r3, r5
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	469a      	mov	sl, r3
 8009d0e:	4693      	mov	fp, r2
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 fb4a 	bl	80003b0 <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4613      	mov	r3, r2
 8009d22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d2a:	d308      	bcc.n	8009d3e <UART_SetConfig+0x9a2>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d32:	d204      	bcs.n	8009d3e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d3a:	60da      	str	r2, [r3, #12]
 8009d3c:	e17f      	b.n	800a03e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d44:	e17b      	b.n	800a03e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4e:	f040 80bd 	bne.w	8009ecc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	dc48      	bgt.n	8009dec <UART_SetConfig+0xa50>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	db7b      	blt.n	8009e56 <UART_SetConfig+0xaba>
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	d879      	bhi.n	8009e56 <UART_SetConfig+0xaba>
 8009d62:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <UART_SetConfig+0x9cc>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009df3 	.word	0x08009df3
 8009d6c:	08009dfb 	.word	0x08009dfb
 8009d70:	08009e57 	.word	0x08009e57
 8009d74:	08009e57 	.word	0x08009e57
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e57 	.word	0x08009e57
 8009d80:	08009e57 	.word	0x08009e57
 8009d84:	08009e57 	.word	0x08009e57
 8009d88:	08009e13 	.word	0x08009e13
 8009d8c:	08009e57 	.word	0x08009e57
 8009d90:	08009e57 	.word	0x08009e57
 8009d94:	08009e57 	.word	0x08009e57
 8009d98:	08009e57 	.word	0x08009e57
 8009d9c:	08009e57 	.word	0x08009e57
 8009da0:	08009e57 	.word	0x08009e57
 8009da4:	08009e57 	.word	0x08009e57
 8009da8:	08009e23 	.word	0x08009e23
 8009dac:	08009e57 	.word	0x08009e57
 8009db0:	08009e57 	.word	0x08009e57
 8009db4:	08009e57 	.word	0x08009e57
 8009db8:	08009e57 	.word	0x08009e57
 8009dbc:	08009e57 	.word	0x08009e57
 8009dc0:	08009e57 	.word	0x08009e57
 8009dc4:	08009e57 	.word	0x08009e57
 8009dc8:	08009e57 	.word	0x08009e57
 8009dcc:	08009e57 	.word	0x08009e57
 8009dd0:	08009e57 	.word	0x08009e57
 8009dd4:	08009e57 	.word	0x08009e57
 8009dd8:	08009e57 	.word	0x08009e57
 8009ddc:	08009e57 	.word	0x08009e57
 8009de0:	08009e57 	.word	0x08009e57
 8009de4:	08009e57 	.word	0x08009e57
 8009de8:	08009e49 	.word	0x08009e49
 8009dec:	2b40      	cmp	r3, #64	; 0x40
 8009dee:	d02e      	beq.n	8009e4e <UART_SetConfig+0xab2>
 8009df0:	e031      	b.n	8009e56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df2:	f7fd faa9 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8009df6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009df8:	e033      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dfa:	f7fd fabb 	bl	8007374 <HAL_RCC_GetPCLK2Freq>
 8009dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e00:	e02f      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fa1c 	bl	8008244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e10:	e027      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e12:	f107 0318 	add.w	r3, r7, #24
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fe fb68 	bl	80084ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e20:	e01f      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e22:	4b69      	ldr	r3, [pc, #420]	; (8009fc8 <UART_SetConfig+0xc2c>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d009      	beq.n	8009e42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e2e:	4b66      	ldr	r3, [pc, #408]	; (8009fc8 <UART_SetConfig+0xc2c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	f003 0303 	and.w	r3, r3, #3
 8009e38:	4a64      	ldr	r2, [pc, #400]	; (8009fcc <UART_SetConfig+0xc30>)
 8009e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e40:	e00f      	b.n	8009e62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e42:	4b62      	ldr	r3, [pc, #392]	; (8009fcc <UART_SetConfig+0xc30>)
 8009e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e46:	e00c      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e48:	4b61      	ldr	r3, [pc, #388]	; (8009fd0 <UART_SetConfig+0xc34>)
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e4c:	e009      	b.n	8009e62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e54:	e005      	b.n	8009e62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 80ea 	beq.w	800a03e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	4a55      	ldr	r2, [pc, #340]	; (8009fc4 <UART_SetConfig+0xc28>)
 8009e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e74:	461a      	mov	r2, r3
 8009e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e7c:	005a      	lsls	r2, r3, #1
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	441a      	add	r2, r3
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	2b0f      	cmp	r3, #15
 8009e94:	d916      	bls.n	8009ec4 <UART_SetConfig+0xb28>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9c:	d212      	bcs.n	8009ec4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f023 030f 	bic.w	r3, r3, #15
 8009ea6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	085b      	lsrs	r3, r3, #1
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f003 0307 	and.w	r3, r3, #7
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009ec0:	60da      	str	r2, [r3, #12]
 8009ec2:	e0bc      	b.n	800a03e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009eca:	e0b8      	b.n	800a03e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ecc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	dc4b      	bgt.n	8009f6c <UART_SetConfig+0xbd0>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f2c0 8087 	blt.w	8009fe8 <UART_SetConfig+0xc4c>
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	f200 8084 	bhi.w	8009fe8 <UART_SetConfig+0xc4c>
 8009ee0:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0xb4c>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f73 	.word	0x08009f73
 8009eec:	08009f7b 	.word	0x08009f7b
 8009ef0:	08009fe9 	.word	0x08009fe9
 8009ef4:	08009fe9 	.word	0x08009fe9
 8009ef8:	08009f83 	.word	0x08009f83
 8009efc:	08009fe9 	.word	0x08009fe9
 8009f00:	08009fe9 	.word	0x08009fe9
 8009f04:	08009fe9 	.word	0x08009fe9
 8009f08:	08009f93 	.word	0x08009f93
 8009f0c:	08009fe9 	.word	0x08009fe9
 8009f10:	08009fe9 	.word	0x08009fe9
 8009f14:	08009fe9 	.word	0x08009fe9
 8009f18:	08009fe9 	.word	0x08009fe9
 8009f1c:	08009fe9 	.word	0x08009fe9
 8009f20:	08009fe9 	.word	0x08009fe9
 8009f24:	08009fe9 	.word	0x08009fe9
 8009f28:	08009fa3 	.word	0x08009fa3
 8009f2c:	08009fe9 	.word	0x08009fe9
 8009f30:	08009fe9 	.word	0x08009fe9
 8009f34:	08009fe9 	.word	0x08009fe9
 8009f38:	08009fe9 	.word	0x08009fe9
 8009f3c:	08009fe9 	.word	0x08009fe9
 8009f40:	08009fe9 	.word	0x08009fe9
 8009f44:	08009fe9 	.word	0x08009fe9
 8009f48:	08009fe9 	.word	0x08009fe9
 8009f4c:	08009fe9 	.word	0x08009fe9
 8009f50:	08009fe9 	.word	0x08009fe9
 8009f54:	08009fe9 	.word	0x08009fe9
 8009f58:	08009fe9 	.word	0x08009fe9
 8009f5c:	08009fe9 	.word	0x08009fe9
 8009f60:	08009fe9 	.word	0x08009fe9
 8009f64:	08009fe9 	.word	0x08009fe9
 8009f68:	08009fdb 	.word	0x08009fdb
 8009f6c:	2b40      	cmp	r3, #64	; 0x40
 8009f6e:	d037      	beq.n	8009fe0 <UART_SetConfig+0xc44>
 8009f70:	e03a      	b.n	8009fe8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f72:	f7fd f9e9 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8009f76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f78:	e03c      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f7a:	f7fd f9fb 	bl	8007374 <HAL_RCC_GetPCLK2Freq>
 8009f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f80:	e038      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe f95c 	bl	8008244 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f90:	e030      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f92:	f107 0318 	add.w	r3, r7, #24
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe faa8 	bl	80084ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa0:	e028      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <UART_SetConfig+0xc2c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0320 	and.w	r3, r3, #32
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d012      	beq.n	8009fd4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fae:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <UART_SetConfig+0xc2c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	4a04      	ldr	r2, [pc, #16]	; (8009fcc <UART_SetConfig+0xc30>)
 8009fba:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fc0:	e018      	b.n	8009ff4 <UART_SetConfig+0xc58>
 8009fc2:	bf00      	nop
 8009fc4:	0802ec78 	.word	0x0802ec78
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	03d09000 	.word	0x03d09000
 8009fd0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009fd4:	4b24      	ldr	r3, [pc, #144]	; (800a068 <UART_SetConfig+0xccc>)
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd8:	e00c      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <UART_SetConfig+0xcd0>)
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fde:	e009      	b.n	8009ff4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe6:	e005      	b.n	8009ff4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ff2:	bf00      	nop
    }

    if (pclk != 0U)
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d021      	beq.n	800a03e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	4a1c      	ldr	r2, [pc, #112]	; (800a070 <UART_SetConfig+0xcd4>)
 800a000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a004:	461a      	mov	r2, r3
 800a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a008:	fbb3 f2f2 	udiv	r2, r3, r2
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	085b      	lsrs	r3, r3, #1
 800a012:	441a      	add	r2, r3
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	fbb2 f3f3 	udiv	r3, r2, r3
 800a01c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	2b0f      	cmp	r3, #15
 800a022:	d909      	bls.n	800a038 <UART_SetConfig+0xc9c>
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a02a:	d205      	bcs.n	800a038 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	b29a      	uxth	r2, r3
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60da      	str	r2, [r3, #12]
 800a036:	e002      	b.n	800a03e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2201      	movs	r2, #1
 800a042:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2201      	movs	r2, #1
 800a04a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2200      	movs	r2, #0
 800a052:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a05a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3748      	adds	r7, #72	; 0x48
 800a062:	46bd      	mov	sp, r7
 800a064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a068:	03d09000 	.word	0x03d09000
 800a06c:	003d0900 	.word	0x003d0900
 800a070:	0802ec78 	.word	0x0802ec78

0800a074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	430a      	orrs	r2, r1
 800a09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	430a      	orrs	r2, r1
 800a102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	f003 0320 	and.w	r3, r3, #32
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00a      	beq.n	800a148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	430a      	orrs	r2, r1
 800a146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01a      	beq.n	800a18a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a172:	d10a      	bne.n	800a18a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	605a      	str	r2, [r3, #4]
  }
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af02      	add	r7, sp, #8
 800a1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1c8:	f7f8 f870 	bl	80022ac <HAL_GetTick>
 800a1cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0308 	and.w	r3, r3, #8
 800a1d8:	2b08      	cmp	r3, #8
 800a1da:	d10e      	bne.n	800a1fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f82f 	bl	800a24e <UART_WaitOnFlagUntilTimeout>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e025      	b.n	800a246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b04      	cmp	r3, #4
 800a206:	d10e      	bne.n	800a226 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f819 	bl	800a24e <UART_WaitOnFlagUntilTimeout>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e00f      	b.n	800a246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b09c      	sub	sp, #112	; 0x70
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	603b      	str	r3, [r7, #0]
 800a25a:	4613      	mov	r3, r2
 800a25c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a25e:	e0a9      	b.n	800a3b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a266:	f000 80a5 	beq.w	800a3b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a26a:	f7f8 f81f 	bl	80022ac <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a276:	429a      	cmp	r2, r3
 800a278:	d302      	bcc.n	800a280 <UART_WaitOnFlagUntilTimeout+0x32>
 800a27a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d140      	bne.n	800a302 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a294:	667b      	str	r3, [r7, #100]	; 0x64
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a2ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e6      	bne.n	800a280 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	f023 0301 	bic.w	r3, r3, #1
 800a2c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2d2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2220      	movs	r2, #32
 800a2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e069      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d051      	beq.n	800a3b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31e:	d149      	bne.n	800a3b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a33e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
 800a34a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	e853 3f00 	ldrex	r3, [r3]
 800a36a:	613b      	str	r3, [r7, #16]
   return(result);
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f023 0301 	bic.w	r3, r3, #1
 800a372:	66bb      	str	r3, [r7, #104]	; 0x68
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3308      	adds	r3, #8
 800a37a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a37c:	623a      	str	r2, [r7, #32]
 800a37e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a380:	69f9      	ldr	r1, [r7, #28]
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	e841 2300 	strex	r3, r2, [r1]
 800a388:	61bb      	str	r3, [r7, #24]
   return(result);
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e5      	bne.n	800a35c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e010      	b.n	800a3d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69da      	ldr	r2, [r3, #28]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	bf0c      	ite	eq
 800a3c4:	2301      	moveq	r3, #1
 800a3c6:	2300      	movne	r3, #0
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	f43f af46 	beq.w	800a260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3770      	adds	r7, #112	; 0x70
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b085      	sub	sp, #20
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d101      	bne.n	800a3f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e027      	b.n	800a444 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2224      	movs	r2, #36	; 0x24
 800a400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0201 	bic.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a460:	2b01      	cmp	r3, #1
 800a462:	d101      	bne.n	800a468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a464:	2302      	movs	r3, #2
 800a466:	e02d      	b.n	800a4c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2224      	movs	r2, #36	; 0x24
 800a474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 0201 	bic.w	r2, r2, #1
 800a48e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f84f 	bl	800a548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e02d      	b.n	800a540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2224      	movs	r2, #36	; 0x24
 800a4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f022 0201 	bic.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f811 	bl	800a548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2220      	movs	r2, #32
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a554:	2b00      	cmp	r3, #0
 800a556:	d108      	bne.n	800a56a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a568:	e031      	b.n	800a5ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a56a:	2310      	movs	r3, #16
 800a56c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a56e:	2310      	movs	r3, #16
 800a570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	0e5b      	lsrs	r3, r3, #25
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f003 0307 	and.w	r3, r3, #7
 800a580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	0f5b      	lsrs	r3, r3, #29
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0307 	and.w	r3, r3, #7
 800a590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	7b3a      	ldrb	r2, [r7, #12]
 800a596:	4911      	ldr	r1, [pc, #68]	; (800a5dc <UARTEx_SetNbDataToProcess+0x94>)
 800a598:	5c8a      	ldrb	r2, [r1, r2]
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a59e:	7b3a      	ldrb	r2, [r7, #12]
 800a5a0:	490f      	ldr	r1, [pc, #60]	; (800a5e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a5a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	7b7a      	ldrb	r2, [r7, #13]
 800a5b4:	4909      	ldr	r1, [pc, #36]	; (800a5dc <UARTEx_SetNbDataToProcess+0x94>)
 800a5b6:	5c8a      	ldrb	r2, [r1, r2]
 800a5b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5bc:	7b7a      	ldrb	r2, [r7, #13]
 800a5be:	4908      	ldr	r1, [pc, #32]	; (800a5e0 <UARTEx_SetNbDataToProcess+0x98>)
 800a5c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	0802ec90 	.word	0x0802ec90
 800a5e0:	0802ec98 	.word	0x0802ec98

0800a5e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d121      	bne.n	800a63a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b27      	ldr	r3, [pc, #156]	; (800a698 <FMC_SDRAM_Init+0xb4>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	6851      	ldr	r1, [r2, #4]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	6892      	ldr	r2, [r2, #8]
 800a606:	4311      	orrs	r1, r2
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	68d2      	ldr	r2, [r2, #12]
 800a60c:	4311      	orrs	r1, r2
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	6912      	ldr	r2, [r2, #16]
 800a612:	4311      	orrs	r1, r2
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	6952      	ldr	r2, [r2, #20]
 800a618:	4311      	orrs	r1, r2
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	6992      	ldr	r2, [r2, #24]
 800a61e:	4311      	orrs	r1, r2
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	69d2      	ldr	r2, [r2, #28]
 800a624:	4311      	orrs	r1, r2
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	6a12      	ldr	r2, [r2, #32]
 800a62a:	4311      	orrs	r1, r2
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a630:	430a      	orrs	r2, r1
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	e026      	b.n	800a688 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	69d9      	ldr	r1, [r3, #28]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	4319      	orrs	r1, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	430b      	orrs	r3, r1
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <FMC_SDRAM_Init+0xb4>)
 800a65e:	4013      	ands	r3, r2
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	6851      	ldr	r1, [r2, #4]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	6892      	ldr	r2, [r2, #8]
 800a668:	4311      	orrs	r1, r2
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	68d2      	ldr	r2, [r2, #12]
 800a66e:	4311      	orrs	r1, r2
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	6912      	ldr	r2, [r2, #16]
 800a674:	4311      	orrs	r1, r2
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	6952      	ldr	r2, [r2, #20]
 800a67a:	4311      	orrs	r1, r2
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	6992      	ldr	r2, [r2, #24]
 800a680:	430a      	orrs	r2, r1
 800a682:	431a      	orrs	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	ffff8000 	.word	0xffff8000

0800a69c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d128      	bne.n	800a700 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	1e59      	subs	r1, r3, #1
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	4319      	orrs	r1, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	021b      	lsls	r3, r3, #8
 800a6ce:	4319      	orrs	r1, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	031b      	lsls	r3, r3, #12
 800a6d8:	4319      	orrs	r1, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	041b      	lsls	r3, r3, #16
 800a6e2:	4319      	orrs	r1, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	051b      	lsls	r3, r3, #20
 800a6ec:	4319      	orrs	r1, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	699b      	ldr	r3, [r3, #24]
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	061b      	lsls	r3, r3, #24
 800a6f6:	430b      	orrs	r3, r1
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	609a      	str	r2, [r3, #8]
 800a6fe:	e02d      	b.n	800a75c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	4b19      	ldr	r3, [pc, #100]	; (800a76c <FMC_SDRAM_Timing_Init+0xd0>)
 800a706:	4013      	ands	r3, r2
 800a708:	68ba      	ldr	r2, [r7, #8]
 800a70a:	68d2      	ldr	r2, [r2, #12]
 800a70c:	3a01      	subs	r2, #1
 800a70e:	0311      	lsls	r1, r2, #12
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	6952      	ldr	r2, [r2, #20]
 800a714:	3a01      	subs	r2, #1
 800a716:	0512      	lsls	r2, r2, #20
 800a718:	430a      	orrs	r2, r1
 800a71a:	431a      	orrs	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	1e59      	subs	r1, r3, #1
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	3b01      	subs	r3, #1
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	4319      	orrs	r1, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	021b      	lsls	r3, r3, #8
 800a740:	4319      	orrs	r1, r3
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	3b01      	subs	r3, #1
 800a748:	041b      	lsls	r3, r3, #16
 800a74a:	4319      	orrs	r1, r3
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	3b01      	subs	r3, #1
 800a752:	061b      	lsls	r3, r3, #24
 800a754:	430b      	orrs	r3, r1
 800a756:	431a      	orrs	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	ff0f0fff 	.word	0xff0f0fff

0800a770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a770:	b084      	sub	sp, #16
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	f107 001c 	add.w	r0, r7, #28
 800a77e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a784:	2b01      	cmp	r3, #1
 800a786:	d120      	bne.n	800a7ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	4b2a      	ldr	r3, [pc, #168]	; (800a844 <USB_CoreInit+0xd4>)
 800a79a:	4013      	ands	r3, r2
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d105      	bne.n	800a7be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fb28 	bl	800be14 <USB_CoreReset>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
 800a7c8:	e01a      	b.n	800a800 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f001 fb1c 	bl	800be14 <USB_CoreReset>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38
 800a7f2:	e005      	b.n	800a800 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	2b01      	cmp	r3, #1
 800a804:	d116      	bne.n	800a834 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a814:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <USB_CoreInit+0xd8>)
 800a816:	4313      	orrs	r3, r2
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f043 0206 	orr.w	r2, r3, #6
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f043 0220 	orr.w	r2, r3, #32
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a834:	7bfb      	ldrb	r3, [r7, #15]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a840:	b004      	add	sp, #16
 800a842:	4770      	bx	lr
 800a844:	ffbdffbf 	.word	0xffbdffbf
 800a848:	03ee0000 	.word	0x03ee0000

0800a84c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d165      	bne.n	800a92c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4a41      	ldr	r2, [pc, #260]	; (800a968 <USB_SetTurnaroundTime+0x11c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d906      	bls.n	800a876 <USB_SetTurnaroundTime+0x2a>
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4a40      	ldr	r2, [pc, #256]	; (800a96c <USB_SetTurnaroundTime+0x120>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d202      	bcs.n	800a876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a870:	230f      	movs	r3, #15
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	e062      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	4a3c      	ldr	r2, [pc, #240]	; (800a96c <USB_SetTurnaroundTime+0x120>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d306      	bcc.n	800a88c <USB_SetTurnaroundTime+0x40>
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4a3b      	ldr	r2, [pc, #236]	; (800a970 <USB_SetTurnaroundTime+0x124>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d202      	bcs.n	800a88c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a886:	230e      	movs	r3, #14
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e057      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4a38      	ldr	r2, [pc, #224]	; (800a970 <USB_SetTurnaroundTime+0x124>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d306      	bcc.n	800a8a2 <USB_SetTurnaroundTime+0x56>
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4a37      	ldr	r2, [pc, #220]	; (800a974 <USB_SetTurnaroundTime+0x128>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d202      	bcs.n	800a8a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a89c:	230d      	movs	r3, #13
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	e04c      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	4a33      	ldr	r2, [pc, #204]	; (800a974 <USB_SetTurnaroundTime+0x128>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d306      	bcc.n	800a8b8 <USB_SetTurnaroundTime+0x6c>
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	4a32      	ldr	r2, [pc, #200]	; (800a978 <USB_SetTurnaroundTime+0x12c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d802      	bhi.n	800a8b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	617b      	str	r3, [r7, #20]
 800a8b6:	e041      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4a2f      	ldr	r2, [pc, #188]	; (800a978 <USB_SetTurnaroundTime+0x12c>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d906      	bls.n	800a8ce <USB_SetTurnaroundTime+0x82>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	4a2e      	ldr	r2, [pc, #184]	; (800a97c <USB_SetTurnaroundTime+0x130>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d802      	bhi.n	800a8ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8c8:	230b      	movs	r3, #11
 800a8ca:	617b      	str	r3, [r7, #20]
 800a8cc:	e036      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4a2a      	ldr	r2, [pc, #168]	; (800a97c <USB_SetTurnaroundTime+0x130>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d906      	bls.n	800a8e4 <USB_SetTurnaroundTime+0x98>
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	4a29      	ldr	r2, [pc, #164]	; (800a980 <USB_SetTurnaroundTime+0x134>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d802      	bhi.n	800a8e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8de:	230a      	movs	r3, #10
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e02b      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4a26      	ldr	r2, [pc, #152]	; (800a980 <USB_SetTurnaroundTime+0x134>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d906      	bls.n	800a8fa <USB_SetTurnaroundTime+0xae>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	4a25      	ldr	r2, [pc, #148]	; (800a984 <USB_SetTurnaroundTime+0x138>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d202      	bcs.n	800a8fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8f4:	2309      	movs	r3, #9
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	e020      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4a21      	ldr	r2, [pc, #132]	; (800a984 <USB_SetTurnaroundTime+0x138>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d306      	bcc.n	800a910 <USB_SetTurnaroundTime+0xc4>
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	4a20      	ldr	r2, [pc, #128]	; (800a988 <USB_SetTurnaroundTime+0x13c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d802      	bhi.n	800a910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a90a:	2308      	movs	r3, #8
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	e015      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4a1d      	ldr	r2, [pc, #116]	; (800a988 <USB_SetTurnaroundTime+0x13c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d906      	bls.n	800a926 <USB_SetTurnaroundTime+0xda>
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <USB_SetTurnaroundTime+0x140>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d202      	bcs.n	800a926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a920:	2307      	movs	r3, #7
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e00a      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a926:	2306      	movs	r3, #6
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	e007      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a932:	2309      	movs	r3, #9
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	e001      	b.n	800a93c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a938:	2309      	movs	r3, #9
 800a93a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	029b      	lsls	r3, r3, #10
 800a950:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a954:	431a      	orrs	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	371c      	adds	r7, #28
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	00d8acbf 	.word	0x00d8acbf
 800a96c:	00e4e1c0 	.word	0x00e4e1c0
 800a970:	00f42400 	.word	0x00f42400
 800a974:	01067380 	.word	0x01067380
 800a978:	011a499f 	.word	0x011a499f
 800a97c:	01312cff 	.word	0x01312cff
 800a980:	014ca43f 	.word	0x014ca43f
 800a984:	016e3600 	.word	0x016e3600
 800a988:	01a6ab1f 	.word	0x01a6ab1f
 800a98c:	01e84800 	.word	0x01e84800

0800a990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f043 0201 	orr.w	r2, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f023 0201 	bic.w	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d115      	bne.n	800aa22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa02:	2001      	movs	r0, #1
 800aa04:	f7f7 fc5e 	bl	80022c4 <HAL_Delay>
      ms++;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 f96f 	bl	800bcf2 <USB_GetMode>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d01e      	beq.n	800aa58 <USB_SetCurrentMode+0x84>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b31      	cmp	r3, #49	; 0x31
 800aa1e:	d9f0      	bls.n	800aa02 <USB_SetCurrentMode+0x2e>
 800aa20:	e01a      	b.n	800aa58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d115      	bne.n	800aa54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa34:	2001      	movs	r0, #1
 800aa36:	f7f7 fc45 	bl	80022c4 <HAL_Delay>
      ms++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f956 	bl	800bcf2 <USB_GetMode>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d005      	beq.n	800aa58 <USB_SetCurrentMode+0x84>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b31      	cmp	r3, #49	; 0x31
 800aa50:	d9f0      	bls.n	800aa34 <USB_SetCurrentMode+0x60>
 800aa52:	e001      	b.n	800aa58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e005      	b.n	800aa64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b32      	cmp	r3, #50	; 0x32
 800aa5c:	d101      	bne.n	800aa62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b086      	sub	sp, #24
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa86:	2300      	movs	r3, #0
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	e009      	b.n	800aaa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	3340      	adds	r3, #64	; 0x40
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	613b      	str	r3, [r7, #16]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b0e      	cmp	r3, #14
 800aaa4:	d9f2      	bls.n	800aa8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aaa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d11c      	bne.n	800aae6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaba:	f043 0302 	orr.w	r3, r3, #2
 800aabe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	e005      	b.n	800aaf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2300      	movs	r3, #0
 800aafc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab04:	4619      	mov	r1, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	680b      	ldr	r3, [r1, #0]
 800ab10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d10c      	bne.n	800ab32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d104      	bne.n	800ab28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab1e:	2100      	movs	r1, #0
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f965 	bl	800adf0 <USB_SetDevSpeed>
 800ab26:	e008      	b.n	800ab3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab28:	2101      	movs	r1, #1
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f960 	bl	800adf0 <USB_SetDevSpeed>
 800ab30:	e003      	b.n	800ab3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab32:	2103      	movs	r1, #3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f95b 	bl	800adf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab3a:	2110      	movs	r1, #16
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f8f3 	bl	800ad28 <USB_FlushTxFifo>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f91f 	bl	800ad90 <USB_FlushRxFifo>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab62:	461a      	mov	r2, r3
 800ab64:	2300      	movs	r3, #0
 800ab66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	461a      	mov	r2, r3
 800ab70:	2300      	movs	r3, #0
 800ab72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab80:	2300      	movs	r3, #0
 800ab82:	613b      	str	r3, [r7, #16]
 800ab84:	e043      	b.n	800ac0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab9c:	d118      	bne.n	800abd0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	015a      	lsls	r2, r3, #5
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	4413      	add	r3, r2
 800abac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb0:	461a      	mov	r2, r3
 800abb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	e013      	b.n	800abe2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	015a      	lsls	r2, r3, #5
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4413      	add	r3, r2
 800abc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc6:	461a      	mov	r2, r3
 800abc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	e008      	b.n	800abe2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abdc:	461a      	mov	r2, r3
 800abde:	2300      	movs	r3, #0
 800abe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	015a      	lsls	r2, r3, #5
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4413      	add	r3, r2
 800abea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abee:	461a      	mov	r2, r3
 800abf0:	2300      	movs	r3, #0
 800abf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac00:	461a      	mov	r2, r3
 800ac02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d3b7      	bcc.n	800ab86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	e043      	b.n	800aca4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac32:	d118      	bne.n	800ac66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	461a      	mov	r2, r3
 800ac48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	e013      	b.n	800ac78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	e008      	b.n	800ac78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac72:	461a      	mov	r2, r3
 800ac74:	2300      	movs	r3, #0
 800ac76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	461a      	mov	r2, r3
 800ac86:	2300      	movs	r3, #0
 800ac88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac96:	461a      	mov	r2, r3
 800ac98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	3301      	adds	r3, #1
 800aca2:	613b      	str	r3, [r7, #16]
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d3b7      	bcc.n	800ac1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800accc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	f043 0210 	orr.w	r2, r3, #16
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	4b0e      	ldr	r3, [pc, #56]	; (800ad20 <USB_DevInit+0x2b4>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800acec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d005      	beq.n	800acfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	f043 0208 	orr.w	r2, r3, #8
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800acfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d105      	bne.n	800ad10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699a      	ldr	r2, [r3, #24]
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <USB_DevInit+0x2b8>)
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad1c:	b004      	add	sp, #16
 800ad1e:	4770      	bx	lr
 800ad20:	803c3800 	.word	0x803c3800
 800ad24:	40000004 	.word	0x40000004

0800ad28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4a13      	ldr	r2, [pc, #76]	; (800ad8c <USB_FlushTxFifo+0x64>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d901      	bls.n	800ad48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e01b      	b.n	800ad80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	daf2      	bge.n	800ad36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	019b      	lsls	r3, r3, #6
 800ad58:	f043 0220 	orr.w	r2, r3, #32
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4a08      	ldr	r2, [pc, #32]	; (800ad8c <USB_FlushTxFifo+0x64>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d901      	bls.n	800ad72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e006      	b.n	800ad80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b20      	cmp	r3, #32
 800ad7c:	d0f0      	beq.n	800ad60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	00030d40 	.word	0x00030d40

0800ad90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4a11      	ldr	r2, [pc, #68]	; (800adec <USB_FlushRxFifo+0x5c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d901      	bls.n	800adae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e018      	b.n	800ade0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	daf2      	bge.n	800ad9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2210      	movs	r2, #16
 800adbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3301      	adds	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	4a08      	ldr	r2, [pc, #32]	; (800adec <USB_FlushRxFifo+0x5c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d901      	bls.n	800add2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e006      	b.n	800ade0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b10      	cmp	r3, #16
 800addc:	d0f0      	beq.n	800adc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	00030d40 	.word	0x00030d40

0800adf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae10:	4313      	orrs	r3, r2
 800ae12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b087      	sub	sp, #28
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f003 0306 	and.w	r3, r3, #6
 800ae3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75fb      	strb	r3, [r7, #23]
 800ae46:	e00a      	b.n	800ae5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d002      	beq.n	800ae54 <USB_GetDevSpeed+0x32>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b06      	cmp	r3, #6
 800ae52:	d102      	bne.n	800ae5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae54:	2302      	movs	r3, #2
 800ae56:	75fb      	strb	r3, [r7, #23]
 800ae58:	e001      	b.n	800ae5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae5a:	230f      	movs	r3, #15
 800ae5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d139      	bne.n	800aefc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	2101      	movs	r1, #1
 800ae9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	68f9      	ldr	r1, [r7, #12]
 800aea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea6:	4313      	orrs	r3, r2
 800aea8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d153      	bne.n	800af68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	791b      	ldrb	r3, [r3, #4]
 800aeda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aedc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	059b      	lsls	r3, r3, #22
 800aee2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aee4:	431a      	orrs	r2, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	0159      	lsls	r1, r3, #5
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	440b      	add	r3, r1
 800aeee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef2:	4619      	mov	r1, r3
 800aef4:	4b20      	ldr	r3, [pc, #128]	; (800af78 <USB_ActivateEndpoint+0x10c>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	600b      	str	r3, [r1, #0]
 800aefa:	e035      	b.n	800af68 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af02:	69da      	ldr	r2, [r3, #28]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 030f 	and.w	r3, r3, #15
 800af0c:	2101      	movs	r1, #1
 800af0e:	fa01 f303 	lsl.w	r3, r1, r3
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	68f9      	ldr	r1, [r7, #12]
 800af16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1a:	4313      	orrs	r3, r2
 800af1c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	015a      	lsls	r2, r3, #5
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	4413      	add	r3, r2
 800af26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d119      	bne.n	800af68 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	791b      	ldrb	r3, [r3, #4]
 800af4e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af50:	430b      	orrs	r3, r1
 800af52:	431a      	orrs	r2, r3
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	0159      	lsls	r1, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	440b      	add	r3, r1
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	4619      	mov	r1, r3
 800af62:	4b05      	ldr	r3, [pc, #20]	; (800af78 <USB_ActivateEndpoint+0x10c>)
 800af64:	4313      	orrs	r3, r2
 800af66:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	10008000 	.word	0x10008000

0800af7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	; 0x28
 800af80:	af02      	add	r7, sp, #8
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4613      	mov	r3, r2
 800af88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	785b      	ldrb	r3, [r3, #1]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	f040 8163 	bne.w	800b264 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d132      	bne.n	800b00c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb2:	691a      	ldr	r2, [r3, #16]
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	0159      	lsls	r1, r3, #5
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	440b      	add	r3, r1
 800afbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc0:	4619      	mov	r1, r3
 800afc2:	4ba5      	ldr	r3, [pc, #660]	; (800b258 <USB_EPStartXfer+0x2dc>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	015a      	lsls	r2, r3, #5
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	4413      	add	r3, r2
 800afd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	69ba      	ldr	r2, [r7, #24]
 800afd8:	0151      	lsls	r1, r2, #5
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	440a      	add	r2, r1
 800afde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	0159      	lsls	r1, r3, #5
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	440b      	add	r3, r1
 800affe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b002:	4619      	mov	r1, r3
 800b004:	4b95      	ldr	r3, [pc, #596]	; (800b25c <USB_EPStartXfer+0x2e0>)
 800b006:	4013      	ands	r3, r2
 800b008:	610b      	str	r3, [r1, #16]
 800b00a:	e074      	b.n	800b0f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	4413      	add	r3, r2
 800b014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	0159      	lsls	r1, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	440b      	add	r3, r1
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	4619      	mov	r1, r3
 800b028:	4b8c      	ldr	r3, [pc, #560]	; (800b25c <USB_EPStartXfer+0x2e0>)
 800b02a:	4013      	ands	r3, r2
 800b02c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b03a:	691a      	ldr	r2, [r3, #16]
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	0159      	lsls	r1, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	440b      	add	r3, r1
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	4619      	mov	r1, r3
 800b04a:	4b83      	ldr	r3, [pc, #524]	; (800b258 <USB_EPStartXfer+0x2dc>)
 800b04c:	4013      	ands	r3, r2
 800b04e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	6999      	ldr	r1, [r3, #24]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	440b      	add	r3, r1
 800b068:	1e59      	subs	r1, r3, #1
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b072:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b074:	4b7a      	ldr	r3, [pc, #488]	; (800b260 <USB_EPStartXfer+0x2e4>)
 800b076:	400b      	ands	r3, r1
 800b078:	69b9      	ldr	r1, [r7, #24]
 800b07a:	0148      	lsls	r0, r1, #5
 800b07c:	69f9      	ldr	r1, [r7, #28]
 800b07e:	4401      	add	r1, r0
 800b080:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b084:	4313      	orrs	r3, r2
 800b086:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b09e:	69b9      	ldr	r1, [r7, #24]
 800b0a0:	0148      	lsls	r0, r1, #5
 800b0a2:	69f9      	ldr	r1, [r7, #28]
 800b0a4:	4401      	add	r1, r0
 800b0a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	791b      	ldrb	r3, [r3, #4]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d11f      	bne.n	800b0f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	69fa      	ldr	r2, [r7, #28]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0d6:	69bb      	ldr	r3, [r7, #24]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	69fa      	ldr	r2, [r7, #28]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d14b      	bne.n	800b194 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d009      	beq.n	800b118 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b110:	461a      	mov	r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	695b      	ldr	r3, [r3, #20]
 800b116:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	791b      	ldrb	r3, [r3, #4]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d128      	bne.n	800b172 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d110      	bne.n	800b152 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	015a      	lsls	r2, r3, #5
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	4413      	add	r3, r2
 800b138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	0151      	lsls	r1, r2, #5
 800b142:	69fa      	ldr	r2, [r7, #28]
 800b144:	440a      	add	r2, r1
 800b146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b14e:	6013      	str	r3, [r2, #0]
 800b150:	e00f      	b.n	800b172 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	015a      	lsls	r2, r3, #5
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	440a      	add	r2, r1
 800b168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b170:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	015a      	lsls	r2, r3, #5
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	0151      	lsls	r1, r2, #5
 800b184:	69fa      	ldr	r2, [r7, #28]
 800b186:	440a      	add	r2, r1
 800b188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b18c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	e137      	b.n	800b404 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69ba      	ldr	r2, [r7, #24]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	69fa      	ldr	r2, [r7, #28]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d015      	beq.n	800b1e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 811f 	beq.w	800b404 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1dc:	69f9      	ldr	r1, [r7, #28]
 800b1de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	634b      	str	r3, [r1, #52]	; 0x34
 800b1e6:	e10d      	b.n	800b404 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d110      	bne.n	800b21a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	e00f      	b.n	800b23a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	015a      	lsls	r2, r3, #5
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	4413      	add	r3, r2
 800b222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	0151      	lsls	r1, r2, #5
 800b22c:	69fa      	ldr	r2, [r7, #28]
 800b22e:	440a      	add	r2, r1
 800b230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b238:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	6919      	ldr	r1, [r3, #16]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	781a      	ldrb	r2, [r3, #0]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	b298      	uxth	r0, r3
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	4603      	mov	r3, r0
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f000 faea 	bl	800b828 <USB_WritePacket>
 800b254:	e0d6      	b.n	800b404 <USB_EPStartXfer+0x488>
 800b256:	bf00      	nop
 800b258:	e007ffff 	.word	0xe007ffff
 800b25c:	fff80000 	.word	0xfff80000
 800b260:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b270:	691a      	ldr	r2, [r3, #16]
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	0159      	lsls	r1, r3, #5
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	440b      	add	r3, r1
 800b27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27e:	4619      	mov	r1, r3
 800b280:	4b63      	ldr	r3, [pc, #396]	; (800b410 <USB_EPStartXfer+0x494>)
 800b282:	4013      	ands	r3, r2
 800b284:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	0159      	lsls	r1, r3, #5
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	440b      	add	r3, r1
 800b29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4b5c      	ldr	r3, [pc, #368]	; (800b414 <USB_EPStartXfer+0x498>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d123      	bne.n	800b2f8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c6:	69b9      	ldr	r1, [r7, #24]
 800b2c8:	0148      	lsls	r0, r1, #5
 800b2ca:	69f9      	ldr	r1, [r7, #28]
 800b2cc:	4401      	add	r1, r0
 800b2ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	015a      	lsls	r2, r3, #5
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	4413      	add	r3, r2
 800b2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	0151      	lsls	r1, r2, #5
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	440a      	add	r2, r1
 800b2ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2f4:	6113      	str	r3, [r2, #16]
 800b2f6:	e037      	b.n	800b368 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	699a      	ldr	r2, [r3, #24]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	4413      	add	r3, r2
 800b302:	1e5a      	subs	r2, r3, #1
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	fbb2 f3f3 	udiv	r3, r2, r3
 800b30c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	8afa      	ldrh	r2, [r7, #22]
 800b314:	fb03 f202 	mul.w	r2, r3, r2
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	691a      	ldr	r2, [r3, #16]
 800b32a:	8afb      	ldrh	r3, [r7, #22]
 800b32c:	04d9      	lsls	r1, r3, #19
 800b32e:	4b3a      	ldr	r3, [pc, #232]	; (800b418 <USB_EPStartXfer+0x49c>)
 800b330:	400b      	ands	r3, r1
 800b332:	69b9      	ldr	r1, [r7, #24]
 800b334:	0148      	lsls	r0, r1, #5
 800b336:	69f9      	ldr	r1, [r7, #28]
 800b338:	4401      	add	r1, r0
 800b33a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b33e:	4313      	orrs	r3, r2
 800b340:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34e:	691a      	ldr	r2, [r3, #16]
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b358:	69b9      	ldr	r1, [r7, #24]
 800b35a:	0148      	lsls	r0, r1, #5
 800b35c:	69f9      	ldr	r1, [r7, #28]
 800b35e:	4401      	add	r1, r0
 800b360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b364:	4313      	orrs	r3, r2
 800b366:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d10d      	bne.n	800b38a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d009      	beq.n	800b38a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6919      	ldr	r1, [r3, #16]
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b386:	460a      	mov	r2, r1
 800b388:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	791b      	ldrb	r3, [r3, #4]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d128      	bne.n	800b3e4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d110      	bne.n	800b3c4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	0151      	lsls	r1, r2, #5
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	440a      	add	r2, r1
 800b3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	e00f      	b.n	800b3e4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	0151      	lsls	r1, r2, #5
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	440a      	add	r2, r1
 800b3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	0151      	lsls	r1, r2, #5
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	440a      	add	r2, r1
 800b3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	fff80000 	.word	0xfff80000
 800b414:	e007ffff 	.word	0xe007ffff
 800b418:	1ff80000 	.word	0x1ff80000

0800b41c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	f040 80ce 	bne.w	800b5da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d132      	bne.n	800b4ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b452:	691a      	ldr	r2, [r3, #16]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	0159      	lsls	r1, r3, #5
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	440b      	add	r3, r1
 800b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b460:	4619      	mov	r1, r3
 800b462:	4b9a      	ldr	r3, [pc, #616]	; (800b6cc <USB_EP0StartXfer+0x2b0>)
 800b464:	4013      	ands	r3, r2
 800b466:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	0151      	lsls	r1, r2, #5
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	440a      	add	r2, r1
 800b47e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b494:	691a      	ldr	r2, [r3, #16]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	0159      	lsls	r1, r3, #5
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	440b      	add	r3, r1
 800b49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4b8a      	ldr	r3, [pc, #552]	; (800b6d0 <USB_EP0StartXfer+0x2b4>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	610b      	str	r3, [r1, #16]
 800b4aa:	e04e      	b.n	800b54a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	0159      	lsls	r1, r3, #5
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	440b      	add	r3, r1
 800b4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4b81      	ldr	r3, [pc, #516]	; (800b6d0 <USB_EP0StartXfer+0x2b4>)
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	015a      	lsls	r2, r3, #5
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	0159      	lsls	r1, r3, #5
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	440b      	add	r3, r1
 800b4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4b78      	ldr	r3, [pc, #480]	; (800b6cc <USB_EP0StartXfer+0x2b0>)
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	699a      	ldr	r2, [r3, #24]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d903      	bls.n	800b504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b51e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b530:	691a      	ldr	r2, [r3, #16]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b53a:	6939      	ldr	r1, [r7, #16]
 800b53c:	0148      	lsls	r0, r1, #5
 800b53e:	6979      	ldr	r1, [r7, #20]
 800b540:	4401      	add	r1, r0
 800b542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b546:	4313      	orrs	r3, r2
 800b548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d11e      	bne.n	800b58e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d009      	beq.n	800b56c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b564:	461a      	mov	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	e097      	b.n	800b6be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	4413      	add	r3, r2
 800b596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	0151      	lsls	r1, r2, #5
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	440a      	add	r2, r1
 800b5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 8083 	beq.w	800b6be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ce:	6979      	ldr	r1, [r7, #20]
 800b5d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	634b      	str	r3, [r1, #52]	; 0x34
 800b5d8:	e071      	b.n	800b6be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	0159      	lsls	r1, r3, #5
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	440b      	add	r3, r1
 800b5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <USB_EP0StartXfer+0x2b4>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	015a      	lsls	r2, r3, #5
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	4413      	add	r3, r2
 800b604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	0159      	lsls	r1, r3, #5
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	440b      	add	r3, r1
 800b612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b616:	4619      	mov	r1, r3
 800b618:	4b2c      	ldr	r3, [pc, #176]	; (800b6cc <USB_EP0StartXfer+0x2b0>)
 800b61a:	4013      	ands	r3, r2
 800b61c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	0151      	lsls	r1, r2, #5
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	440a      	add	r2, r1
 800b64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b66c:	6939      	ldr	r1, [r7, #16]
 800b66e:	0148      	lsls	r0, r1, #5
 800b670:	6979      	ldr	r1, [r7, #20]
 800b672:	4401      	add	r1, r0
 800b674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b678:	4313      	orrs	r3, r2
 800b67a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d10d      	bne.n	800b69e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d009      	beq.n	800b69e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6919      	ldr	r1, [r3, #16]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69a:	460a      	mov	r2, r1
 800b69c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	0151      	lsls	r1, r2, #5
 800b6b0:	697a      	ldr	r2, [r7, #20]
 800b6b2:	440a      	add	r2, r1
 800b6b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	e007ffff 	.word	0xe007ffff
 800b6d0:	fff80000 	.word	0xfff80000

0800b6d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b087      	sub	sp, #28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	785b      	ldrb	r3, [r3, #1]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d14a      	bne.n	800b788 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b70a:	f040 8086 	bne.w	800b81a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	7812      	ldrb	r2, [r2, #0]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b730:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	7812      	ldrb	r2, [r2, #0]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b754:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b762:	4293      	cmp	r3, r2
 800b764:	d902      	bls.n	800b76c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]
          break;
 800b76a:	e056      	b.n	800b81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b784:	d0e7      	beq.n	800b756 <USB_EPStopXfer+0x82>
 800b786:	e048      	b.n	800b81a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	015a      	lsls	r2, r3, #5
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	4413      	add	r3, r2
 800b792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7a0:	d13b      	bne.n	800b81a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	7812      	ldrb	r2, [r2, #0]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	7812      	ldrb	r2, [r2, #0]
 800b7da:	0151      	lsls	r1, r2, #5
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	440a      	add	r2, r1
 800b7e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d902      	bls.n	800b800 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b7fe:	e00c      	b.n	800b81a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b818:	d0e7      	beq.n	800b7ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b828:	b480      	push	{r7}
 800b82a:	b089      	sub	sp, #36	; 0x24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4611      	mov	r1, r2
 800b834:	461a      	mov	r2, r3
 800b836:	460b      	mov	r3, r1
 800b838:	71fb      	strb	r3, [r7, #7]
 800b83a:	4613      	mov	r3, r2
 800b83c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d123      	bne.n	800b896 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b84e:	88bb      	ldrh	r3, [r7, #4]
 800b850:	3303      	adds	r3, #3
 800b852:	089b      	lsrs	r3, r3, #2
 800b854:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b856:	2300      	movs	r3, #0
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	e018      	b.n	800b88e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	031a      	lsls	r2, r3, #12
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	4413      	add	r3, r2
 800b864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b868:	461a      	mov	r2, r3
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	3301      	adds	r3, #1
 800b874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	3301      	adds	r3, #1
 800b87a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	3301      	adds	r3, #1
 800b880:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	3301      	adds	r3, #1
 800b886:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	3301      	adds	r3, #1
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	429a      	cmp	r2, r3
 800b894:	d3e2      	bcc.n	800b85c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3724      	adds	r7, #36	; 0x24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b08b      	sub	sp, #44	; 0x2c
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	089b      	lsrs	r3, r3, #2
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8c2:	88fb      	ldrh	r3, [r7, #6]
 800b8c4:	f003 0303 	and.w	r3, r3, #3
 800b8c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	623b      	str	r3, [r7, #32]
 800b8ce:	e014      	b.n	800b8fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	3301      	adds	r3, #1
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	623b      	str	r3, [r7, #32]
 800b8fa:	6a3a      	ldr	r2, [r7, #32]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d3e6      	bcc.n	800b8d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b902:	8bfb      	ldrh	r3, [r7, #30]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d01e      	beq.n	800b946 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b912:	461a      	mov	r2, r3
 800b914:	f107 0310 	add.w	r3, r7, #16
 800b918:	6812      	ldr	r2, [r2, #0]
 800b91a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	00db      	lsls	r3, r3, #3
 800b924:	fa22 f303 	lsr.w	r3, r2, r3
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	701a      	strb	r2, [r3, #0]
      i++;
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	3301      	adds	r3, #1
 800b932:	623b      	str	r3, [r7, #32]
      pDest++;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	3301      	adds	r3, #1
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b93a:	8bfb      	ldrh	r3, [r7, #30]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b940:	8bfb      	ldrh	r3, [r7, #30]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1ea      	bne.n	800b91c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b948:	4618      	mov	r0, r3
 800b94a:	372c      	adds	r7, #44	; 0x2c
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	785b      	ldrb	r3, [r3, #1]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d12c      	bne.n	800b9ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4413      	add	r3, r2
 800b978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	db12      	blt.n	800b9a8 <USB_EPSetStall+0x54>
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00f      	beq.n	800b9a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	0151      	lsls	r1, r2, #5
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	440a      	add	r2, r1
 800b99e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	0151      	lsls	r1, r2, #5
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	440a      	add	r2, r1
 800b9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	e02b      	b.n	800ba22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	015a      	lsls	r2, r3, #5
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	db12      	blt.n	800ba02 <USB_EPSetStall+0xae>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00f      	beq.n	800ba02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	0151      	lsls	r1, r2, #5
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	440a      	add	r2, r1
 800b9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	0151      	lsls	r1, r2, #5
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	440a      	add	r2, r1
 800ba18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	785b      	ldrb	r3, [r3, #1]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d128      	bne.n	800ba9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	0151      	lsls	r1, r2, #5
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	440a      	add	r2, r1
 800ba62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	791b      	ldrb	r3, [r3, #4]
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d003      	beq.n	800ba7c <USB_EPClearStall+0x4c>
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	791b      	ldrb	r3, [r3, #4]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d138      	bne.n	800baee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	e027      	b.n	800baee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	0151      	lsls	r1, r2, #5
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	440a      	add	r2, r1
 800bab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800babc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	791b      	ldrb	r3, [r3, #4]
 800bac2:	2b03      	cmp	r3, #3
 800bac4:	d003      	beq.n	800bace <USB_EPClearStall+0x9e>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	791b      	ldrb	r3, [r3, #4]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d10f      	bne.n	800baee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	0151      	lsls	r1, r2, #5
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	440a      	add	r2, r1
 800bae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3714      	adds	r7, #20
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb30:	68f9      	ldr	r1, [r7, #12]
 800bb32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb36:	4313      	orrs	r3, r2
 800bb38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb76:	f023 0302 	bic.w	r3, r3, #2
 800bb7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bba4:	f023 0303 	bic.w	r3, r3, #3
 800bba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbb8:	f043 0302 	orr.w	r3, r3, #2
 800bbbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc04:	699b      	ldr	r3, [r3, #24]
 800bc06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	68ba      	ldr	r2, [r7, #8]
 800bc12:	4013      	ands	r3, r2
 800bc14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	0c1b      	lsrs	r3, r3, #16
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b085      	sub	sp, #20
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	4013      	ands	r3, r2
 800bc48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	b29b      	uxth	r3, r3
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b085      	sub	sp, #20
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	460b      	mov	r3, r1
 800bc64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	4013      	ands	r3, r2
 800bc86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc88:	68bb      	ldr	r3, [r7, #8]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b087      	sub	sp, #28
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	f003 030f 	and.w	r3, r3, #15
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc6:	01db      	lsls	r3, r3, #7
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bcd0:	78fb      	ldrb	r3, [r7, #3]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	693a      	ldr	r2, [r7, #16]
 800bce0:	4013      	ands	r3, r2
 800bce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bce4:	68bb      	ldr	r3, [r7, #8]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf2:	b480      	push	{r7}
 800bcf4:	b083      	sub	sp, #12
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
	...

0800bd10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4b09      	ldr	r3, [pc, #36]	; (800bd54 <USB_ActivateSetup+0x44>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	fffff800 	.word	0xfffff800

0800bd58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	460b      	mov	r3, r1
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	333c      	adds	r3, #60	; 0x3c
 800bd6e:	3304      	adds	r3, #4
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	4a26      	ldr	r2, [pc, #152]	; (800be10 <USB_EP0_OutStart+0xb8>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d90a      	bls.n	800bd92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd8c:	d101      	bne.n	800bd92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e037      	b.n	800be02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc0:	f043 0318 	orr.w	r3, r3, #24
 800bdc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bdd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bdda:	7afb      	ldrb	r3, [r7, #11]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d10f      	bne.n	800be00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	461a      	mov	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	4f54300a 	.word	0x4f54300a

0800be14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3301      	adds	r3, #1
 800be24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4a13      	ldr	r2, [pc, #76]	; (800be78 <USB_CoreReset+0x64>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d901      	bls.n	800be32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e01b      	b.n	800be6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	daf2      	bge.n	800be20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	f043 0201 	orr.w	r2, r3, #1
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a09      	ldr	r2, [pc, #36]	; (800be78 <USB_CoreReset+0x64>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d901      	bls.n	800be5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	e006      	b.n	800be6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b01      	cmp	r3, #1
 800be66:	d0f0      	beq.n	800be4a <USB_CoreReset+0x36>

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
 800be76:	bf00      	nop
 800be78:	00030d40 	.word	0x00030d40

0800be7c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800be80:	f3bf 8f4f 	dsb	sy
}
 800be84:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800be86:	4b06      	ldr	r3, [pc, #24]	; (800bea0 <__NVIC_SystemReset+0x24>)
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800be8e:	4904      	ldr	r1, [pc, #16]	; (800bea0 <__NVIC_SystemReset+0x24>)
 800be90:	4b04      	ldr	r3, [pc, #16]	; (800bea4 <__NVIC_SystemReset+0x28>)
 800be92:	4313      	orrs	r3, r2
 800be94:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800be96:	f3bf 8f4f 	dsb	sy
}
 800be9a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800be9c:	bf00      	nop
 800be9e:	e7fd      	b.n	800be9c <__NVIC_SystemReset+0x20>
 800bea0:	e000ed00 	.word	0xe000ed00
 800bea4:	05fa0004 	.word	0x05fa0004

0800bea8 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800beb4:	f240 401c 	movw	r0, #1052	; 0x41c
 800beb8:	f00c fa3a 	bl	8018330 <USBD_static_malloc>
 800bebc:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32b0      	adds	r2, #176	; 0xb0
 800bece:	2100      	movs	r1, #0
 800bed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bed4:	2302      	movs	r3, #2
 800bed6:	e052      	b.n	800bf7e <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	32b0      	adds	r2, #176	; 0xb0
 800bee2:	68f9      	ldr	r1, [r7, #12]
 800bee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32b0      	adds	r2, #176	; 0xb0
 800bef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bf0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2202      	movs	r2, #2
 800bf2a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	33b0      	adds	r3, #176	; 0xb0
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4798      	blx	r3
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e000      	b.n	800bf7e <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	32b0      	adds	r2, #176	; 0xb0
 800bf9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	e03c      	b.n	800c022 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32b0      	adds	r2, #176	; 0xb0
 800bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb6:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	33b0      	adds	r3, #176	; 0xb0
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	32b0      	adds	r2, #176	; 0xb0
 800bffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c002:	4618      	mov	r0, r3
 800c004:	f00c f9a2 	bl	801834c <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32b0      	adds	r2, #176	; 0xb0
 800c012:	2100      	movs	r1, #0
 800c014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
	...

0800c02c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	32b0      	adds	r2, #176	; 0xb0
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c054:	2303      	movs	r3, #3
 800c056:	e0e8      	b.n	800c22a <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c060:	2b00      	cmp	r3, #0
 800c062:	d03e      	beq.n	800c0e2 <USBD_DFU_Setup+0xb6>
 800c064:	2b20      	cmp	r3, #32
 800c066:	f040 80d8 	bne.w	800c21a <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	785b      	ldrb	r3, [r3, #1]
 800c06e:	2b06      	cmp	r3, #6
 800c070:	d82f      	bhi.n	800c0d2 <USBD_DFU_Setup+0xa6>
 800c072:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <USBD_DFU_Setup+0x4c>)
 800c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c078:	0800c0c9 	.word	0x0800c0c9
 800c07c:	0800c095 	.word	0x0800c095
 800c080:	0800c09f 	.word	0x0800c09f
 800c084:	0800c0a9 	.word	0x0800c0a9
 800c088:	0800c0b1 	.word	0x0800c0b1
 800c08c:	0800c0b9 	.word	0x0800c0b9
 800c090:	0800c0c1 	.word	0x0800c0c1
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 faa0 	bl	800c5dc <DFU_Download>
          break;
 800c09c:	e020      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fb11 	bl	800c6c8 <DFU_Upload>
          break;
 800c0a6:	e01b      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fbf5 	bl	800c898 <DFU_GetStatus>
          break;
 800c0ae:	e017      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fcbd 	bl	800ca30 <DFU_ClearStatus>
          break;
 800c0b6:	e013      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fd11 	bl	800cae0 <DFU_GetState>
          break;
 800c0be:	e00f      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fd29 	bl	800cb18 <DFU_Abort>
          break;
 800c0c6:	e00b      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa16 	bl	800c4fc <DFU_Detach>
          break;
 800c0d0:	e006      	b.n	800c0e0 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800c0d2:	6839      	ldr	r1, [r7, #0]
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f002 f806 	bl	800e0e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c0de:	bf00      	nop
      }
      break;
 800c0e0:	e0a2      	b.n	800c228 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	785b      	ldrb	r3, [r3, #1]
 800c0e6:	2b0b      	cmp	r3, #11
 800c0e8:	f200 808c 	bhi.w	800c204 <USBD_DFU_Setup+0x1d8>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <USBD_DFU_Setup+0xc8>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c125 	.word	0x0800c125
 800c0f8:	0800c213 	.word	0x0800c213
 800c0fc:	0800c205 	.word	0x0800c205
 800c100:	0800c205 	.word	0x0800c205
 800c104:	0800c205 	.word	0x0800c205
 800c108:	0800c205 	.word	0x0800c205
 800c10c:	0800c14f 	.word	0x0800c14f
 800c110:	0800c205 	.word	0x0800c205
 800c114:	0800c205 	.word	0x0800c205
 800c118:	0800c205 	.word	0x0800c205
 800c11c:	0800c197 	.word	0x0800c197
 800c120:	0800c1c3 	.word	0x0800c1c3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d107      	bne.n	800c140 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c130:	f107 0308 	add.w	r3, r7, #8
 800c134:	2202      	movs	r2, #2
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f002 f845 	bl	800e1c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c13e:	e06b      	b.n	800c218 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 ffcf 	bl	800e0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	75fb      	strb	r3, [r7, #23]
          break;
 800c14c:	e064      	b.n	800c218 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	885b      	ldrh	r3, [r3, #2]
 800c152:	0a1b      	lsrs	r3, r3, #8
 800c154:	b29b      	uxth	r3, r3
 800c156:	2b21      	cmp	r3, #33	; 0x21
 800c158:	d15d      	bne.n	800c216 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c160:	4618      	mov	r0, r3
 800c162:	f000 fd87 	bl	800cc74 <USBD_DFU_GetDfuFuncDesc>
 800c166:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00c      	beq.n	800c188 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	88db      	ldrh	r3, [r3, #6]
 800c172:	2b09      	cmp	r3, #9
 800c174:	bf28      	it	cs
 800c176:	2309      	movcs	r3, #9
 800c178:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800c17a:	897b      	ldrh	r3, [r7, #10]
 800c17c:	461a      	mov	r2, r3
 800c17e:	68f9      	ldr	r1, [r7, #12]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f002 f821 	bl	800e1c8 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800c186:	e046      	b.n	800c216 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 ffab 	bl	800e0e6 <USBD_CtlError>
              ret = USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	75fb      	strb	r3, [r7, #23]
          break;
 800c194:	e03f      	b.n	800c216 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d108      	bne.n	800c1b4 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f002 f80b 	bl	800e1c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1b2:	e031      	b.n	800c218 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 ff95 	bl	800e0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	75fb      	strb	r3, [r7, #23]
          break;
 800c1c0:	e02a      	b.n	800c218 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d114      	bne.n	800c1f6 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d107      	bne.n	800c1e8 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	885b      	ldrh	r3, [r3, #2]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	461a      	mov	r2, r3
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1e6:	e017      	b.n	800c218 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 ff7b 	bl	800e0e6 <USBD_CtlError>
              ret = USBD_FAIL;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	75fb      	strb	r3, [r7, #23]
          break;
 800c1f4:	e010      	b.n	800c218 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f001 ff74 	bl	800e0e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1fe:	2303      	movs	r3, #3
 800c200:	75fb      	strb	r3, [r7, #23]
          break;
 800c202:	e009      	b.n	800c218 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f001 ff6d 	bl	800e0e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	75fb      	strb	r3, [r7, #23]
          break;
 800c210:	e002      	b.n	800c218 <USBD_DFU_Setup+0x1ec>
          break;
 800c212:	bf00      	nop
 800c214:	e008      	b.n	800c228 <USBD_DFU_Setup+0x1fc>
          break;
 800c216:	bf00      	nop
      }
      break;
 800c218:	e006      	b.n	800c228 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 ff62 	bl	800e0e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c222:	2303      	movs	r3, #3
 800c224:	75fb      	strb	r3, [r7, #23]
      break;
 800c226:	bf00      	nop
  }

  return (uint8_t)ret;
 800c228:	7dfb      	ldrb	r3, [r7, #23]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop

0800c234 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	221b      	movs	r2, #27
 800c240:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800c242:	4b03      	ldr	r3, [pc, #12]	; (800c250 <USBD_DFU_GetCfgDesc+0x1c>)
}
 800c244:	4618      	mov	r0, r3
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	24000050 	.word	0x24000050

0800c254 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b088      	sub	sp, #32
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	32b0      	adds	r2, #176	; 0xb0
 800c27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c280:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	33b0      	adds	r3, #176	; 0xb0
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d101      	bne.n	800c29e <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e0ce      	b.n	800c43c <USBD_DFU_EP0_TxReady+0x1d2>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c2a4:	2b04      	cmp	r3, #4
 800c2a6:	f040 80bd 	bne.w	800c424 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d17c      	bne.n	800c3ae <USBD_DFU_EP0_TxReady+0x144>
    {
      if (hdfu->wlength == 1U)
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	f000 8093 	beq.w	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c2c6:	2b05      	cmp	r3, #5
 800c2c8:	d15e      	bne.n	800c388 <USBD_DFU_EP0_TxReady+0x11e>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b21      	cmp	r3, #33	; 0x21
 800c2d0:	d124      	bne.n	800c31c <USBD_DFU_EP0_TxReady+0xb2>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	785b      	ldrb	r3, [r3, #1]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	789b      	ldrb	r3, [r3, #2]
 800c2e8:	021b      	lsls	r3, r3, #8
 800c2ea:	441a      	add	r2, r3
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	78db      	ldrb	r3, [r3, #3]
 800c2fc:	041b      	lsls	r3, r3, #16
 800c2fe:	441a      	add	r2, r3
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	791b      	ldrb	r3, [r3, #4]
 800c310:	061b      	lsls	r3, r3, #24
 800c312:	441a      	add	r2, r3
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800c31a:	e064      	b.n	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b41      	cmp	r3, #65	; 0x41
 800c322:	d12f      	bne.n	800c384 <USBD_DFU_EP0_TxReady+0x11a>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	461a      	mov	r2, r3
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	789b      	ldrb	r3, [r3, #2]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	441a      	add	r2, r3
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	78db      	ldrb	r3, [r3, #3]
 800c34e:	041b      	lsls	r3, r3, #16
 800c350:	441a      	add	r2, r3
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	791b      	ldrb	r3, [r3, #4]
 800c362:	061b      	lsls	r3, r3, #24
 800c364:	441a      	add	r2, r3
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	69fa      	ldr	r2, [r7, #28]
 800c372:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800c376:	4610      	mov	r0, r2
 800c378:	4798      	blx	r3
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d032      	beq.n	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
          {
            return (uint8_t)USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	e05b      	b.n	800c43c <USBD_DFU_EP0_TxReady+0x1d2>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e059      	b.n	800c43c <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	2200      	movs	r2, #0
 800c394:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800c39c:	2301      	movs	r3, #1
 800c39e:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800c3a0:	f107 030c 	add.w	r3, r7, #12
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f001 fe9d 	bl	800e0e6 <USBD_CtlError>
 800c3ac:	e01b      	b.n	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d916      	bls.n	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c3be:	3b02      	subs	r3, #2
 800c3c0:	029a      	lsls	r2, r3, #10
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c3c8:	4413      	add	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	69f8      	ldr	r0, [r7, #28]
 800c3d2:	6979      	ldr	r1, [r7, #20]
 800c3d4:	69fa      	ldr	r2, [r7, #28]
 800c3d6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800c3da:	4798      	blx	r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <USBD_DFU_EP0_TxReady+0x17c>
        {
          return (uint8_t)USBD_FAIL;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e02a      	b.n	800c43c <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800c3f6:	69fb      	ldr	r3, [r7, #28]
 800c3f8:	2203      	movs	r2, #3
 800c3fa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	2200      	movs	r2, #0
 800c40a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c422:	e00a      	b.n	800c43a <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	d103      	bne.n	800c436 <USBD_DFU_EP0_TxReady+0x1cc>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fbc7 	bl	800cbc2 <DFU_Leave>
 800c434:	e001      	b.n	800c43a <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800c436:	2303      	movs	r3, #3
 800c438:	e000      	b.n	800c43c <USBD_DFU_EP0_TxReady+0x1d2>
  }

  return (uint8_t)USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3720      	adds	r7, #32
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
	...

0800c45c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	220a      	movs	r2, #10
 800c468:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800c46a:	4b03      	ldr	r3, [pc, #12]	; (800c478 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	2400006c 	.word	0x2400006c

0800c47c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b086      	sub	sp, #24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	460b      	mov	r3, r1
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	33b0      	adds	r3, #176	; 0xb0
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	2b06      	cmp	r3, #6
 800c4a0:	d808      	bhi.n	800c4b4 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	4906      	ldr	r1, [pc, #24]	; (800c4c4 <USBD_DFU_GetUsrStringDesc+0x48>)
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 fe2c 	bl	800e108 <USBD_GetString>
    return USBD_StrDesc;
 800c4b0:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <USBD_DFU_GetUsrStringDesc+0x48>)
 800c4b2:	e002      	b.n	800c4ba <USBD_DFU_GetUsrStringDesc+0x3e>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    length = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	607b      	str	r3, [r7, #4]
    return NULL;
 800c4b8:	2300      	movs	r3, #0
  }
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	24000e8c 	.word	0x24000e8c

0800c4c8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e009      	b.n	800c4f0 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	33b0      	adds	r3, #176	; 0xb0
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c4ee:	2300      	movs	r3, #0
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	32b0      	adds	r2, #176	; 0xb0
 800c510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c514:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fba9 	bl	800cc74 <USBD_DFU_GetDfuFuncDesc>
 800c522:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d054      	beq.n	800c5d4 <DFU_Detach+0xd8>
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d051      	beq.n	800c5d4 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c536:	2b02      	cmp	r3, #2
 800c538:	d013      	beq.n	800c562 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800c540:	2b03      	cmp	r3, #3
 800c542:	d00e      	beq.n	800c562 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800c54a:	2b05      	cmp	r3, #5
 800c54c:	d009      	beq.n	800c562 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800c554:	2b06      	cmp	r3, #6
 800c556:	d004      	beq.n	800c562 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800c55e:	2b09      	cmp	r3, #9
 800c560:	d125      	bne.n	800c5ae <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2202      	movs	r2, #2
 800c566:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	789b      	ldrb	r3, [r3, #2]
 800c5b2:	f003 0308 	and.w	r3, r3, #8
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d006      	beq.n	800c5c8 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fbfc 	bl	800cdb8 <USBD_Stop>
    (void)USBD_Start(pdev);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fbed 	bl	800cda0 <USBD_Start>
 800c5c6:	e006      	b.n	800c5d6 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	885b      	ldrh	r3, [r3, #2]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7f5 fe79 	bl	80022c4 <HAL_Delay>
 800c5d2:	e000      	b.n	800c5d6 <DFU_Detach+0xda>
    return;
 800c5d4:	bf00      	nop
  }
}
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	32b0      	adds	r2, #176	; 0xb0
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d061      	beq.n	800c6c0 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	88db      	ldrh	r3, [r3, #6]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d033      	beq.n	800c66c <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d004      	beq.n	800c618 <DFU_Download+0x3c>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c614:	2b05      	cmp	r3, #5
 800c616:	d124      	bne.n	800c662 <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	885b      	ldrh	r3, [r3, #2]
 800c61c:	461a      	mov	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	88db      	ldrh	r3, [r3, #6]
 800c628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c62c:	bf28      	it	cs
 800c62e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800c632:	b29b      	uxth	r3, r3
 800c634:	461a      	mov	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2203      	movs	r2, #3
 800c640:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800c650:	68f9      	ldr	r1, [r7, #12]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c658:	461a      	mov	r2, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f001 fde0 	bl	800e220 <USBD_CtlPrepareRx>
 800c660:	e02f      	b.n	800c6c2 <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 fd3e 	bl	800e0e6 <USBD_CtlError>
 800c66a:	e02a      	b.n	800c6c2 <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c672:	2b05      	cmp	r3, #5
 800c674:	d004      	beq.n	800c680 <DFU_Download+0xa4>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d11a      	bne.n	800c6b6 <DFU_Download+0xda>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2206      	movs	r2, #6
 800c68c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c6b4:	e005      	b.n	800c6c2 <DFU_Download+0xe6>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f001 fd14 	bl	800e0e6 <USBD_CtlError>
 800c6be:	e000      	b.n	800c6c2 <DFU_Download+0xe6>
    return;
 800c6c0:	bf00      	nop
    }
  }
}
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	32b0      	adds	r2, #176	; 0xb0
 800c6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e0:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	33b0      	adds	r3, #176	; 0xb0
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80ca 	beq.w	800c890 <DFU_Upload+0x1c8>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	88db      	ldrh	r3, [r3, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80ae 	beq.w	800c862 <DFU_Upload+0x19a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	d005      	beq.n	800c71c <DFU_Upload+0x54>
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c716:	2b09      	cmp	r3, #9
 800c718:	f040 8096 	bne.w	800c848 <DFU_Upload+0x180>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	885b      	ldrh	r3, [r3, #2]
 800c720:	461a      	mov	r2, r3
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	88db      	ldrh	r3, [r3, #6]
 800c72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c730:	bf28      	it	cs
 800c732:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800c736:	b29b      	uxth	r3, r3
 800c738:	461a      	mov	r2, r3
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c746:	2b00      	cmp	r3, #0
 800c748:	d12c      	bne.n	800c7a4 <DFU_Upload+0xdc>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c750:	2b03      	cmp	r3, #3
 800c752:	d901      	bls.n	800c758 <DFU_Upload+0x90>
 800c754:	2202      	movs	r2, #2
 800c756:	e000      	b.n	800c75a <DFU_Upload+0x92>
 800c758:	2209      	movs	r2, #9
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2200      	movs	r2, #0
 800c788:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2221      	movs	r2, #33	; 0x21
 800c78e:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	2241      	movs	r2, #65	; 0x41
 800c794:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2203      	movs	r2, #3
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f001 fd13 	bl	800e1c8 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800c7a2:	e076      	b.n	800c892 <DFU_Upload+0x1ca>
      }
      else if (hdfu->wblock_num > 1U)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d931      	bls.n	800c812 <DFU_Upload+0x14a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2209      	movs	r2, #9
 800c7b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c7e0:	3b02      	subs	r3, #2
 800c7e2:	029a      	lsls	r2, r3, #10
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c7ea:	4413      	add	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	6979      	ldr	r1, [r7, #20]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800c7fc:	4798      	blx	r3
 800c7fe:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c806:	461a      	mov	r2, r3
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f001 fcdc 	bl	800e1c8 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800c810:	e03f      	b.n	800c892 <DFU_Upload+0x1ca>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	220f      	movs	r2, #15
 800c816:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800c83e:	6839      	ldr	r1, [r7, #0]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f001 fc50 	bl	800e0e6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800c846:	e024      	b.n	800c892 <DFU_Upload+0x1ca>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2200      	movs	r2, #0
 800c854:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f001 fc43 	bl	800e0e6 <USBD_CtlError>
 800c860:	e017      	b.n	800c892 <DFU_Upload+0x1ca>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	2202      	movs	r2, #2
 800c866:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c88e:	e000      	b.n	800c892 <DFU_Upload+0x1ca>
    return;
 800c890:	bf00      	nop
  }
}
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	32b0      	adds	r2, #176	; 0xb0
 800c8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ae:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	33b0      	adds	r3, #176	; 0xb0
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f9d3 	bl	800cc74 <USBD_DFU_GetDfuFuncDesc>
 800c8ce:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f000 80a8 	beq.w	800ca28 <DFU_GetStatus+0x190>
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80a4 	beq.w	800ca28 <DFU_GetStatus+0x190>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80a0 	beq.w	800ca28 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d002      	beq.n	800c8f8 <DFU_GetStatus+0x60>
 800c8f2:	2b06      	cmp	r3, #6
 800c8f4:	d051      	beq.n	800c99a <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800c8f6:	e08e      	b.n	800ca16 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d034      	beq.n	800c96c <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2204      	movs	r2, #4
 800c906:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	2200      	movs	r2, #0
 800c90e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10e      	bne.n	800c956 <DFU_GetStatus+0xbe>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b41      	cmp	r3, #65	; 0x41
 800c93e:	d10a      	bne.n	800c956 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800c950:	2100      	movs	r1, #0
 800c952:	4798      	blx	r3
      break;
 800c954:	e05f      	b.n	800ca16 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800c966:	2101      	movs	r1, #1
 800c968:	4798      	blx	r3
      break;
 800c96a:	e054      	b.n	800ca16 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2205      	movs	r2, #5
 800c970:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800c998:	e03d      	b.n	800ca16 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d116      	bne.n	800c9d2 <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2207      	movs	r2, #7
 800c9a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800c9d0:	e020      	b.n	800ca14 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d11b      	bne.n	800ca14 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	789b      	ldrb	r3, [r3, #2]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d015      	beq.n	800ca14 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800ca14:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800ca1c:	2206      	movs	r2, #6
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 fbd1 	bl	800e1c8 <USBD_CtlSendData>
 800ca26:	e000      	b.n	800ca2a <DFU_GetStatus+0x192>
    return;
 800ca28:	bf00      	nop
}
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	32b0      	adds	r2, #176	; 0xb0
 800ca42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca46:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d042      	beq.n	800cad4 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ca54:	2b0a      	cmp	r3, #10
 800ca56:	d11e      	bne.n	800ca96 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800ca94:	e01f      	b.n	800cad6 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	220a      	movs	r2, #10
 800ca9a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	220e      	movs	r2, #14
 800caa2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800cad2:	e000      	b.n	800cad6 <DFU_ClearStatus+0xa6>
    return;
 800cad4:	bf00      	nop
  }
}
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	32b0      	adds	r2, #176	; 0xb0
 800caf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d008      	beq.n	800cb10 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800cb04:	2201      	movs	r2, #1
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f001 fb5d 	bl	800e1c8 <USBD_CtlSendData>
 800cb0e:	e000      	b.n	800cb12 <DFU_GetState+0x32>
    return;
 800cb10:	bf00      	nop
}
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	32b0      	adds	r2, #176	; 0xb0
 800cb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d03f      	beq.n	800cbb6 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d013      	beq.n	800cb68 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	d00e      	beq.n	800cb68 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800cb50:	2b05      	cmp	r3, #5
 800cb52:	d009      	beq.n	800cb68 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800cb5a:	2b06      	cmp	r3, #6
 800cb5c:	d004      	beq.n	800cb68 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	d127      	bne.n	800cbb8 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800cbb4:	e000      	b.n	800cbb8 <DFU_Abort+0xa0>
    return;
 800cbb6:	bf00      	nop
  }
}
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	32b0      	adds	r2, #176	; 0xb0
 800cbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd8:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 f847 	bl	800cc74 <USBD_DFU_GetDfuFuncDesc>
 800cbe6:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d03e      	beq.n	800cc6c <DFU_Leave+0xaa>
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d03b      	beq.n	800cc6c <DFU_Leave+0xaa>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	789b      	ldrb	r3, [r3, #2]
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d016      	beq.n	800cc36 <DFU_Leave+0x74>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2206      	movs	r2, #6
 800cc0c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800cc34:	e01b      	b.n	800cc6e <DFU_Leave+0xac>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2208      	movs	r2, #8
 800cc3a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f8a8 	bl	800cdb8 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800cc68:	f7ff f908 	bl	800be7c <__NVIC_SystemReset>
    return;
 800cc6c:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800cc84:	2300      	movs	r3, #0
 800cc86:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	885b      	ldrh	r3, [r3, #2]
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d918      	bls.n	800ccca <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cca0:	e00d      	b.n	800ccbe <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cca2:	f107 030a 	add.w	r3, r7, #10
 800cca6:	4619      	mov	r1, r3
 800cca8:	6978      	ldr	r0, [r7, #20]
 800ccaa:	f000 fbf7 	bl	800d49c <USBD_GetNextDesc>
 800ccae:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	785b      	ldrb	r3, [r3, #1]
 800ccb4:	2b21      	cmp	r3, #33	; 0x21
 800ccb6:	d102      	bne.n	800ccbe <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	613b      	str	r3, [r7, #16]
        break;
 800ccbc:	e005      	b.n	800ccca <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	897b      	ldrh	r3, [r7, #10]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d8eb      	bhi.n	800cca2 <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800ccca:	693b      	ldr	r3, [r7, #16]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3718      	adds	r7, #24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cce8:	2303      	movs	r3, #3
 800ccea:	e01f      	b.n	800cd2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2201      	movs	r2, #1
 800cd16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	79fa      	ldrb	r2, [r7, #7]
 800cd1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f00b f98b 	bl	801803c <USBD_LL_Init>
 800cd26:	4603      	mov	r3, r0
 800cd28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e025      	b.n	800cd98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32ae      	adds	r2, #174	; 0xae
 800cd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00f      	beq.n	800cd88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	32ae      	adds	r2, #174	; 0xae
 800cd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	f107 020e 	add.w	r2, r7, #14
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	4602      	mov	r2, r0
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cd8e:	1c5a      	adds	r2, r3, #1
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f00b f999 	bl	80180e0 <USBD_LL_Start>
 800cdae:	4603      	mov	r3, r0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f00b f9a8 	bl	8018116 <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	6852      	ldr	r2, [r2, #4]
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	4611      	mov	r1, r2
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b083      	sub	sp, #12
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdf6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d009      	beq.n	800ce32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	78fa      	ldrb	r2, [r7, #3]
 800ce28:	4611      	mov	r1, r2
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	4798      	blx	r3
 800ce2e:	4603      	mov	r3, r0
 800ce30:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	78fa      	ldrb	r2, [r7, #3]
 800ce56:	4611      	mov	r1, r2
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	4798      	blx	r3
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce62:	2303      	movs	r3, #3
 800ce64:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f001 f8f5 	bl	800e072 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce96:	461a      	mov	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cea4:	f003 031f 	and.w	r3, r3, #31
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d01a      	beq.n	800cee2 <USBD_LL_SetupStage+0x72>
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d822      	bhi.n	800cef6 <USBD_LL_SetupStage+0x86>
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <USBD_LL_SetupStage+0x4a>
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d00a      	beq.n	800cece <USBD_LL_SetupStage+0x5e>
 800ceb8:	e01d      	b.n	800cef6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fb26 	bl	800d514 <USBD_StdDevReq>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]
      break;
 800cecc:	e020      	b.n	800cf10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fb8e 	bl	800d5f8 <USBD_StdItfReq>
 800cedc:	4603      	mov	r3, r0
 800cede:	73fb      	strb	r3, [r7, #15]
      break;
 800cee0:	e016      	b.n	800cf10 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cee8:	4619      	mov	r1, r3
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fbf0 	bl	800d6d0 <USBD_StdEPReq>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
      break;
 800cef4:	e00c      	b.n	800cf10 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cefc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f00b f947 	bl	8018198 <USBD_LL_StallEP>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
      break;
 800cf0e:	bf00      	nop
  }

  return ret;
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b086      	sub	sp, #24
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	60f8      	str	r0, [r7, #12]
 800cf22:	460b      	mov	r3, r1
 800cf24:	607a      	str	r2, [r7, #4]
 800cf26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf2c:	7afb      	ldrb	r3, [r7, #11]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d16e      	bne.n	800d010 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf40:	2b03      	cmp	r3, #3
 800cf42:	f040 8098 	bne.w	800d076 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	689a      	ldr	r2, [r3, #8]
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d913      	bls.n	800cf7a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	689a      	ldr	r2, [r3, #8]
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	1ad2      	subs	r2, r2, r3
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	bf28      	it	cs
 800cf6c:	4613      	movcs	r3, r2
 800cf6e:	461a      	mov	r2, r3
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f001 f971 	bl	800e25a <USBD_CtlContinueRx>
 800cf78:	e07d      	b.n	800d076 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf80:	f003 031f 	and.w	r3, r3, #31
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d014      	beq.n	800cfb2 <USBD_LL_DataOutStage+0x98>
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d81d      	bhi.n	800cfc8 <USBD_LL_DataOutStage+0xae>
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d002      	beq.n	800cf96 <USBD_LL_DataOutStage+0x7c>
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d003      	beq.n	800cf9c <USBD_LL_DataOutStage+0x82>
 800cf94:	e018      	b.n	800cfc8 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf96:	2300      	movs	r3, #0
 800cf98:	75bb      	strb	r3, [r7, #22]
            break;
 800cf9a:	e018      	b.n	800cfce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f000 fa5e 	bl	800d468 <USBD_CoreFindIF>
 800cfac:	4603      	mov	r3, r0
 800cfae:	75bb      	strb	r3, [r7, #22]
            break;
 800cfb0:	e00d      	b.n	800cfce <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	4619      	mov	r1, r3
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 fa60 	bl	800d482 <USBD_CoreFindEP>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	75bb      	strb	r3, [r7, #22]
            break;
 800cfc6:	e002      	b.n	800cfce <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	75bb      	strb	r3, [r7, #22]
            break;
 800cfcc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cfce:	7dbb      	ldrb	r3, [r7, #22]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d119      	bne.n	800d008 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d113      	bne.n	800d008 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cfe0:	7dba      	ldrb	r2, [r7, #22]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	32ae      	adds	r2, #174	; 0xae
 800cfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00b      	beq.n	800d008 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cff0:	7dba      	ldrb	r2, [r7, #22]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cff8:	7dba      	ldrb	r2, [r7, #22]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	32ae      	adds	r2, #174	; 0xae
 800cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f001 f937 	bl	800e27c <USBD_CtlSendStatus>
 800d00e:	e032      	b.n	800d076 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d010:	7afb      	ldrb	r3, [r7, #11]
 800d012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d016:	b2db      	uxtb	r3, r3
 800d018:	4619      	mov	r1, r3
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f000 fa31 	bl	800d482 <USBD_CoreFindEP>
 800d020:	4603      	mov	r3, r0
 800d022:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d024:	7dbb      	ldrb	r3, [r7, #22]
 800d026:	2bff      	cmp	r3, #255	; 0xff
 800d028:	d025      	beq.n	800d076 <USBD_LL_DataOutStage+0x15c>
 800d02a:	7dbb      	ldrb	r3, [r7, #22]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d122      	bne.n	800d076 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d036:	b2db      	uxtb	r3, r3
 800d038:	2b03      	cmp	r3, #3
 800d03a:	d117      	bne.n	800d06c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d03c:	7dba      	ldrb	r2, [r7, #22]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	32ae      	adds	r2, #174	; 0xae
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00f      	beq.n	800d06c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d04c:	7dba      	ldrb	r2, [r7, #22]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d054:	7dba      	ldrb	r2, [r7, #22]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	32ae      	adds	r2, #174	; 0xae
 800d05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	7afa      	ldrb	r2, [r7, #11]
 800d062:	4611      	mov	r1, r2
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	4798      	blx	r3
 800d068:	4603      	mov	r3, r0
 800d06a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	e000      	b.n	800d078 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b086      	sub	sp, #24
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	460b      	mov	r3, r1
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d08e:	7afb      	ldrb	r3, [r7, #11]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d16f      	bne.n	800d174 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3314      	adds	r3, #20
 800d098:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d15a      	bne.n	800d15a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	689a      	ldr	r2, [r3, #8]
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d914      	bls.n	800d0da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	689a      	ldr	r2, [r3, #8]
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	1ad2      	subs	r2, r2, r3
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	6879      	ldr	r1, [r7, #4]
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f001 f899 	bl	800e1fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2100      	movs	r1, #0
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f00b f90a 	bl	80182ec <USBD_LL_PrepareReceive>
 800d0d8:	e03f      	b.n	800d15a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	68da      	ldr	r2, [r3, #12]
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d11c      	bne.n	800d120 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d316      	bcc.n	800d120 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d20f      	bcs.n	800d120 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d100:	2200      	movs	r2, #0
 800d102:	2100      	movs	r1, #0
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f001 f87a 	bl	800e1fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d112:	2300      	movs	r3, #0
 800d114:	2200      	movs	r2, #0
 800d116:	2100      	movs	r1, #0
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f00b f8e7 	bl	80182ec <USBD_LL_PrepareReceive>
 800d11e:	e01c      	b.n	800d15a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d10f      	bne.n	800d14c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d009      	beq.n	800d14c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d14c:	2180      	movs	r1, #128	; 0x80
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f00b f822 	bl	8018198 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f001 f8a4 	bl	800e2a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d03a      	beq.n	800d1da <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d164:	68f8      	ldr	r0, [r7, #12]
 800d166:	f7ff fe42 	bl	800cdee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d172:	e032      	b.n	800d1da <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d174:	7afb      	ldrb	r3, [r7, #11]
 800d176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	4619      	mov	r1, r3
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f000 f97f 	bl	800d482 <USBD_CoreFindEP>
 800d184:	4603      	mov	r3, r0
 800d186:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d188:	7dfb      	ldrb	r3, [r7, #23]
 800d18a:	2bff      	cmp	r3, #255	; 0xff
 800d18c:	d025      	beq.n	800d1da <USBD_LL_DataInStage+0x15a>
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d122      	bne.n	800d1da <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b03      	cmp	r3, #3
 800d19e:	d11c      	bne.n	800d1da <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d1a0:	7dfa      	ldrb	r2, [r7, #23]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	32ae      	adds	r2, #174	; 0xae
 800d1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1aa:	695b      	ldr	r3, [r3, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d014      	beq.n	800d1da <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1b0:	7dfa      	ldrb	r2, [r7, #23]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1b8:	7dfa      	ldrb	r2, [r7, #23]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	32ae      	adds	r2, #174	; 0xae
 800d1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	7afa      	ldrb	r2, [r7, #11]
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	4798      	blx	r3
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d1d0:	7dbb      	ldrb	r3, [r7, #22]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d1d6:	7dbb      	ldrb	r3, [r7, #22]
 800d1d8:	e000      	b.n	800d1dc <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d014      	beq.n	800d24a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00e      	beq.n	800d24a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	6852      	ldr	r2, [r2, #4]
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	4611      	mov	r1, r2
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	4798      	blx	r3
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d246:	2303      	movs	r3, #3
 800d248:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d24a:	2340      	movs	r3, #64	; 0x40
 800d24c:	2200      	movs	r2, #0
 800d24e:	2100      	movs	r1, #0
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f00a ff7b 	bl	801814c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2240      	movs	r2, #64	; 0x40
 800d262:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d266:	2340      	movs	r3, #64	; 0x40
 800d268:	2200      	movs	r2, #0
 800d26a:	2180      	movs	r1, #128	; 0x80
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f00a ff6d 	bl	801814c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2240      	movs	r2, #64	; 0x40
 800d27c:	621a      	str	r2, [r3, #32]

  return ret;
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	78fa      	ldrb	r2, [r7, #3]
 800d298:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	d106      	bne.n	800d2f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b03      	cmp	r3, #3
 800d316:	d110      	bne.n	800d33a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00b      	beq.n	800d33a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d005      	beq.n	800d33a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d334:	69db      	ldr	r3, [r3, #28]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	32ae      	adds	r2, #174	; 0xae
 800d35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d362:	2303      	movs	r3, #3
 800d364:	e01c      	b.n	800d3a0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d115      	bne.n	800d39e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	32ae      	adds	r2, #174	; 0xae
 800d37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00b      	beq.n	800d39e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	32ae      	adds	r2, #174	; 0xae
 800d390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	4611      	mov	r1, r2
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	32ae      	adds	r2, #174	; 0xae
 800d3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d101      	bne.n	800d3ca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e01c      	b.n	800d404 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d115      	bne.n	800d402 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	32ae      	adds	r2, #174	; 0xae
 800d3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	32ae      	adds	r2, #174	; 0xae
 800d3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fa:	78fa      	ldrb	r2, [r7, #3]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d402:	2300      	movs	r3, #0
}
 800d404:	4618      	mov	r0, r3
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00e      	beq.n	800d45e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	6852      	ldr	r2, [r2, #4]
 800d44c:	b2d2      	uxtb	r2, r2
 800d44e:	4611      	mov	r1, r2
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	4798      	blx	r3
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d474:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d476:	4618      	mov	r0, r3
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d482:	b480      	push	{r7}
 800d484:	b083      	sub	sp, #12
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	460b      	mov	r3, r1
 800d48c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d48e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	881a      	ldrh	r2, [r3, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4413      	add	r3, r2
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3714      	adds	r7, #20
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d4d6:	b480      	push	{r7}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d4f4:	8a3b      	ldrh	r3, [r7, #16]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	b21a      	sxth	r2, r3
 800d4fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	b21b      	sxth	r3, r3
 800d502:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d504:	89fb      	ldrh	r3, [r7, #14]
}
 800d506:	4618      	mov	r0, r3
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
	...

0800d514 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d52a:	2b40      	cmp	r3, #64	; 0x40
 800d52c:	d005      	beq.n	800d53a <USBD_StdDevReq+0x26>
 800d52e:	2b40      	cmp	r3, #64	; 0x40
 800d530:	d857      	bhi.n	800d5e2 <USBD_StdDevReq+0xce>
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00f      	beq.n	800d556 <USBD_StdDevReq+0x42>
 800d536:	2b20      	cmp	r3, #32
 800d538:	d153      	bne.n	800d5e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	32ae      	adds	r2, #174	; 0xae
 800d544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
      break;
 800d554:	e04a      	b.n	800d5ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	785b      	ldrb	r3, [r3, #1]
 800d55a:	2b09      	cmp	r3, #9
 800d55c:	d83b      	bhi.n	800d5d6 <USBD_StdDevReq+0xc2>
 800d55e:	a201      	add	r2, pc, #4	; (adr r2, 800d564 <USBD_StdDevReq+0x50>)
 800d560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d564:	0800d5b9 	.word	0x0800d5b9
 800d568:	0800d5cd 	.word	0x0800d5cd
 800d56c:	0800d5d7 	.word	0x0800d5d7
 800d570:	0800d5c3 	.word	0x0800d5c3
 800d574:	0800d5d7 	.word	0x0800d5d7
 800d578:	0800d597 	.word	0x0800d597
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d5d7 	.word	0x0800d5d7
 800d584:	0800d5af 	.word	0x0800d5af
 800d588:	0800d5a1 	.word	0x0800d5a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fa3c 	bl	800da0c <USBD_GetDescriptor>
          break;
 800d594:	e024      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fbc7 	bl	800dd2c <USBD_SetAddress>
          break;
 800d59e:	e01f      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fc06 	bl	800ddb4 <USBD_SetConfig>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	73fb      	strb	r3, [r7, #15]
          break;
 800d5ac:	e018      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fca9 	bl	800df08 <USBD_GetConfig>
          break;
 800d5b6:	e013      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fcda 	bl	800df74 <USBD_GetStatus>
          break;
 800d5c0:	e00e      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fd09 	bl	800dfdc <USBD_SetFeature>
          break;
 800d5ca:	e009      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fd2d 	bl	800e02e <USBD_ClrFeature>
          break;
 800d5d4:	e004      	b.n	800d5e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d5d6:	6839      	ldr	r1, [r7, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fd84 	bl	800e0e6 <USBD_CtlError>
          break;
 800d5de:	bf00      	nop
      }
      break;
 800d5e0:	e004      	b.n	800d5ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fd7e 	bl	800e0e6 <USBD_CtlError>
      break;
 800d5ea:	bf00      	nop
  }

  return ret;
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop

0800d5f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d60e:	2b40      	cmp	r3, #64	; 0x40
 800d610:	d005      	beq.n	800d61e <USBD_StdItfReq+0x26>
 800d612:	2b40      	cmp	r3, #64	; 0x40
 800d614:	d852      	bhi.n	800d6bc <USBD_StdItfReq+0xc4>
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <USBD_StdItfReq+0x26>
 800d61a:	2b20      	cmp	r3, #32
 800d61c:	d14e      	bne.n	800d6bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d624:	b2db      	uxtb	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d840      	bhi.n	800d6ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	889b      	ldrh	r3, [r3, #4]
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b01      	cmp	r3, #1
 800d634:	d836      	bhi.n	800d6a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	889b      	ldrh	r3, [r3, #4]
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7ff ff12 	bl	800d468 <USBD_CoreFindIF>
 800d644:	4603      	mov	r3, r0
 800d646:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2bff      	cmp	r3, #255	; 0xff
 800d64c:	d01d      	beq.n	800d68a <USBD_StdItfReq+0x92>
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11a      	bne.n	800d68a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d654:	7bba      	ldrb	r2, [r7, #14]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	32ae      	adds	r2, #174	; 0xae
 800d65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00f      	beq.n	800d684 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d664:	7bba      	ldrb	r2, [r7, #14]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d66c:	7bba      	ldrb	r2, [r7, #14]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	32ae      	adds	r2, #174	; 0xae
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
 800d67e:	4603      	mov	r3, r0
 800d680:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d682:	e004      	b.n	800d68e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d684:	2303      	movs	r3, #3
 800d686:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d688:	e001      	b.n	800d68e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d68a:	2303      	movs	r3, #3
 800d68c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	88db      	ldrh	r3, [r3, #6]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d110      	bne.n	800d6b8 <USBD_StdItfReq+0xc0>
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10d      	bne.n	800d6b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fded 	bl	800e27c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6a2:	e009      	b.n	800d6b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fd1d 	bl	800e0e6 <USBD_CtlError>
          break;
 800d6ac:	e004      	b.n	800d6b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 fd18 	bl	800e0e6 <USBD_CtlError>
          break;
 800d6b6:	e000      	b.n	800d6ba <USBD_StdItfReq+0xc2>
          break;
 800d6b8:	bf00      	nop
      }
      break;
 800d6ba:	e004      	b.n	800d6c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fd11 	bl	800e0e6 <USBD_CtlError>
      break;
 800d6c4:	bf00      	nop
  }

  return ret;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	889b      	ldrh	r3, [r3, #4]
 800d6e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6ec:	2b40      	cmp	r3, #64	; 0x40
 800d6ee:	d007      	beq.n	800d700 <USBD_StdEPReq+0x30>
 800d6f0:	2b40      	cmp	r3, #64	; 0x40
 800d6f2:	f200 817f 	bhi.w	800d9f4 <USBD_StdEPReq+0x324>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d02a      	beq.n	800d750 <USBD_StdEPReq+0x80>
 800d6fa:	2b20      	cmp	r3, #32
 800d6fc:	f040 817a 	bne.w	800d9f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7ff febc 	bl	800d482 <USBD_CoreFindEP>
 800d70a:	4603      	mov	r3, r0
 800d70c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d70e:	7b7b      	ldrb	r3, [r7, #13]
 800d710:	2bff      	cmp	r3, #255	; 0xff
 800d712:	f000 8174 	beq.w	800d9fe <USBD_StdEPReq+0x32e>
 800d716:	7b7b      	ldrb	r3, [r7, #13]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f040 8170 	bne.w	800d9fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d71e:	7b7a      	ldrb	r2, [r7, #13]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d726:	7b7a      	ldrb	r2, [r7, #13]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	32ae      	adds	r2, #174	; 0xae
 800d72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 8163 	beq.w	800d9fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d738:	7b7a      	ldrb	r2, [r7, #13]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	32ae      	adds	r2, #174	; 0xae
 800d73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	4798      	blx	r3
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d74e:	e156      	b.n	800d9fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	785b      	ldrb	r3, [r3, #1]
 800d754:	2b03      	cmp	r3, #3
 800d756:	d008      	beq.n	800d76a <USBD_StdEPReq+0x9a>
 800d758:	2b03      	cmp	r3, #3
 800d75a:	f300 8145 	bgt.w	800d9e8 <USBD_StdEPReq+0x318>
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 809b 	beq.w	800d89a <USBD_StdEPReq+0x1ca>
 800d764:	2b01      	cmp	r3, #1
 800d766:	d03c      	beq.n	800d7e2 <USBD_StdEPReq+0x112>
 800d768:	e13e      	b.n	800d9e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d770:	b2db      	uxtb	r3, r3
 800d772:	2b02      	cmp	r3, #2
 800d774:	d002      	beq.n	800d77c <USBD_StdEPReq+0xac>
 800d776:	2b03      	cmp	r3, #3
 800d778:	d016      	beq.n	800d7a8 <USBD_StdEPReq+0xd8>
 800d77a:	e02c      	b.n	800d7d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00d      	beq.n	800d79e <USBD_StdEPReq+0xce>
 800d782:	7bbb      	ldrb	r3, [r7, #14]
 800d784:	2b80      	cmp	r3, #128	; 0x80
 800d786:	d00a      	beq.n	800d79e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f00a fd03 	bl	8018198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d792:	2180      	movs	r1, #128	; 0x80
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f00a fcff 	bl	8018198 <USBD_LL_StallEP>
 800d79a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d79c:	e020      	b.n	800d7e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d79e:	6839      	ldr	r1, [r7, #0]
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fca0 	bl	800e0e6 <USBD_CtlError>
              break;
 800d7a6:	e01b      	b.n	800d7e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	885b      	ldrh	r3, [r3, #2]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10e      	bne.n	800d7ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00b      	beq.n	800d7ce <USBD_StdEPReq+0xfe>
 800d7b6:	7bbb      	ldrb	r3, [r7, #14]
 800d7b8:	2b80      	cmp	r3, #128	; 0x80
 800d7ba:	d008      	beq.n	800d7ce <USBD_StdEPReq+0xfe>
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	88db      	ldrh	r3, [r3, #6]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7c4:	7bbb      	ldrb	r3, [r7, #14]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f00a fce5 	bl	8018198 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fd54 	bl	800e27c <USBD_CtlSendStatus>

              break;
 800d7d4:	e004      	b.n	800d7e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fc84 	bl	800e0e6 <USBD_CtlError>
              break;
 800d7de:	bf00      	nop
          }
          break;
 800d7e0:	e107      	b.n	800d9f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d002      	beq.n	800d7f4 <USBD_StdEPReq+0x124>
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d016      	beq.n	800d820 <USBD_StdEPReq+0x150>
 800d7f2:	e04b      	b.n	800d88c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7f4:	7bbb      	ldrb	r3, [r7, #14]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00d      	beq.n	800d816 <USBD_StdEPReq+0x146>
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	2b80      	cmp	r3, #128	; 0x80
 800d7fe:	d00a      	beq.n	800d816 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d800:	7bbb      	ldrb	r3, [r7, #14]
 800d802:	4619      	mov	r1, r3
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f00a fcc7 	bl	8018198 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d80a:	2180      	movs	r1, #128	; 0x80
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f00a fcc3 	bl	8018198 <USBD_LL_StallEP>
 800d812:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d814:	e040      	b.n	800d898 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 fc64 	bl	800e0e6 <USBD_CtlError>
              break;
 800d81e:	e03b      	b.n	800d898 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	885b      	ldrh	r3, [r3, #2]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d136      	bne.n	800d896 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d004      	beq.n	800d83c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	4619      	mov	r1, r3
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f00a fccd 	bl	80181d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 fd1d 	bl	800e27c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d842:	7bbb      	ldrb	r3, [r7, #14]
 800d844:	4619      	mov	r1, r3
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7ff fe1b 	bl	800d482 <USBD_CoreFindEP>
 800d84c:	4603      	mov	r3, r0
 800d84e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d850:	7b7b      	ldrb	r3, [r7, #13]
 800d852:	2bff      	cmp	r3, #255	; 0xff
 800d854:	d01f      	beq.n	800d896 <USBD_StdEPReq+0x1c6>
 800d856:	7b7b      	ldrb	r3, [r7, #13]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d11c      	bne.n	800d896 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d85c:	7b7a      	ldrb	r2, [r7, #13]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d864:	7b7a      	ldrb	r2, [r7, #13]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	32ae      	adds	r2, #174	; 0xae
 800d86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d010      	beq.n	800d896 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d874:	7b7a      	ldrb	r2, [r7, #13]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	32ae      	adds	r2, #174	; 0xae
 800d87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	4798      	blx	r3
 800d886:	4603      	mov	r3, r0
 800d888:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d88a:	e004      	b.n	800d896 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fc29 	bl	800e0e6 <USBD_CtlError>
              break;
 800d894:	e000      	b.n	800d898 <USBD_StdEPReq+0x1c8>
              break;
 800d896:	bf00      	nop
          }
          break;
 800d898:	e0ab      	b.n	800d9f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d002      	beq.n	800d8ac <USBD_StdEPReq+0x1dc>
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d032      	beq.n	800d910 <USBD_StdEPReq+0x240>
 800d8aa:	e097      	b.n	800d9dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8ac:	7bbb      	ldrb	r3, [r7, #14]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d007      	beq.n	800d8c2 <USBD_StdEPReq+0x1f2>
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b80      	cmp	r3, #128	; 0x80
 800d8b6:	d004      	beq.n	800d8c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d8b8:	6839      	ldr	r1, [r7, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 fc13 	bl	800e0e6 <USBD_CtlError>
                break;
 800d8c0:	e091      	b.n	800d9e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	da0b      	bge.n	800d8e2 <USBD_StdEPReq+0x212>
 800d8ca:	7bbb      	ldrb	r3, [r7, #14]
 800d8cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	3310      	adds	r3, #16
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	3304      	adds	r3, #4
 800d8e0:	e00b      	b.n	800d8fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2202      	movs	r2, #2
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 fc5d 	bl	800e1c8 <USBD_CtlSendData>
              break;
 800d90e:	e06a      	b.n	800d9e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d914:	2b00      	cmp	r3, #0
 800d916:	da11      	bge.n	800d93c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	f003 020f 	and.w	r2, r3, #15
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4613      	mov	r3, r2
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	440b      	add	r3, r1
 800d92a:	3324      	adds	r3, #36	; 0x24
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d117      	bne.n	800d962 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fbd6 	bl	800e0e6 <USBD_CtlError>
                  break;
 800d93a:	e054      	b.n	800d9e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	f003 020f 	and.w	r2, r3, #15
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	4613      	mov	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	4413      	add	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	440b      	add	r3, r1
 800d94e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d952:	881b      	ldrh	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d104      	bne.n	800d962 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fbc3 	bl	800e0e6 <USBD_CtlError>
                  break;
 800d960:	e041      	b.n	800d9e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d966:	2b00      	cmp	r3, #0
 800d968:	da0b      	bge.n	800d982 <USBD_StdEPReq+0x2b2>
 800d96a:	7bbb      	ldrb	r3, [r7, #14]
 800d96c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d970:	4613      	mov	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	3310      	adds	r3, #16
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	3304      	adds	r3, #4
 800d980:	e00b      	b.n	800d99a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	4413      	add	r3, r2
 800d998:	3304      	adds	r3, #4
 800d99a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <USBD_StdEPReq+0x2d8>
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	2b80      	cmp	r3, #128	; 0x80
 800d9a6:	d103      	bne.n	800d9b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	e00e      	b.n	800d9ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d9b0:	7bbb      	ldrb	r3, [r7, #14]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f00a fc2d 	bl	8018214 <USBD_LL_IsStallEP>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	e002      	b.n	800d9ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fbf7 	bl	800e1c8 <USBD_CtlSendData>
              break;
 800d9da:	e004      	b.n	800d9e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fb81 	bl	800e0e6 <USBD_CtlError>
              break;
 800d9e4:	bf00      	nop
          }
          break;
 800d9e6:	e004      	b.n	800d9f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fb7b 	bl	800e0e6 <USBD_CtlError>
          break;
 800d9f0:	bf00      	nop
      }
      break;
 800d9f2:	e005      	b.n	800da00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d9f4:	6839      	ldr	r1, [r7, #0]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fb75 	bl	800e0e6 <USBD_CtlError>
      break;
 800d9fc:	e000      	b.n	800da00 <USBD_StdEPReq+0x330>
      break;
 800d9fe:	bf00      	nop
  }

  return ret;
 800da00:	7bfb      	ldrb	r3, [r7, #15]
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
	...

0800da0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da16:	2300      	movs	r3, #0
 800da18:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800da1e:	2300      	movs	r3, #0
 800da20:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	885b      	ldrh	r3, [r3, #2]
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	b29b      	uxth	r3, r3
 800da2a:	3b01      	subs	r3, #1
 800da2c:	2b06      	cmp	r3, #6
 800da2e:	f200 814f 	bhi.w	800dcd0 <USBD_GetDescriptor+0x2c4>
 800da32:	a201      	add	r2, pc, #4	; (adr r2, 800da38 <USBD_GetDescriptor+0x2c>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800da55 	.word	0x0800da55
 800da3c:	0800da6d 	.word	0x0800da6d
 800da40:	0800daad 	.word	0x0800daad
 800da44:	0800dcd1 	.word	0x0800dcd1
 800da48:	0800dcd1 	.word	0x0800dcd1
 800da4c:	0800dc71 	.word	0x0800dc71
 800da50:	0800dc9d 	.word	0x0800dc9d
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	7c12      	ldrb	r2, [r2, #16]
 800da60:	f107 010a 	add.w	r1, r7, #10
 800da64:	4610      	mov	r0, r2
 800da66:	4798      	blx	r3
 800da68:	6178      	str	r0, [r7, #20]
      break;
 800da6a:	e139      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7c1b      	ldrb	r3, [r3, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10d      	bne.n	800da90 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7c:	f107 020a 	add.w	r2, r7, #10
 800da80:	4610      	mov	r0, r2
 800da82:	4798      	blx	r3
 800da84:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	3301      	adds	r3, #1
 800da8a:	2202      	movs	r2, #2
 800da8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800da8e:	e127      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	f107 020a 	add.w	r2, r7, #10
 800da9c:	4610      	mov	r0, r2
 800da9e:	4798      	blx	r3
 800daa0:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	3301      	adds	r3, #1
 800daa6:	2202      	movs	r2, #2
 800daa8:	701a      	strb	r2, [r3, #0]
      break;
 800daaa:	e119      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	885b      	ldrh	r3, [r3, #2]
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	2b05      	cmp	r3, #5
 800dab4:	f200 80ac 	bhi.w	800dc10 <USBD_GetDescriptor+0x204>
 800dab8:	a201      	add	r2, pc, #4	; (adr r2, 800dac0 <USBD_GetDescriptor+0xb4>)
 800daba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabe:	bf00      	nop
 800dac0:	0800dad9 	.word	0x0800dad9
 800dac4:	0800db0d 	.word	0x0800db0d
 800dac8:	0800db41 	.word	0x0800db41
 800dacc:	0800db75 	.word	0x0800db75
 800dad0:	0800dba9 	.word	0x0800dba9
 800dad4:	0800dbdd 	.word	0x0800dbdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	7c12      	ldrb	r2, [r2, #16]
 800daf0:	f107 010a 	add.w	r1, r7, #10
 800daf4:	4610      	mov	r0, r2
 800daf6:	4798      	blx	r3
 800daf8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dafa:	e0b8      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 faf1 	bl	800e0e6 <USBD_CtlError>
            err++;
 800db04:	7cfb      	ldrb	r3, [r7, #19]
 800db06:	3301      	adds	r3, #1
 800db08:	74fb      	strb	r3, [r7, #19]
          break;
 800db0a:	e0b0      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00b      	beq.n	800db30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	7c12      	ldrb	r2, [r2, #16]
 800db24:	f107 010a 	add.w	r1, r7, #10
 800db28:	4610      	mov	r0, r2
 800db2a:	4798      	blx	r3
 800db2c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db2e:	e09e      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fad7 	bl	800e0e6 <USBD_CtlError>
            err++;
 800db38:	7cfb      	ldrb	r3, [r7, #19]
 800db3a:	3301      	adds	r3, #1
 800db3c:	74fb      	strb	r3, [r7, #19]
          break;
 800db3e:	e096      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00b      	beq.n	800db64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	7c12      	ldrb	r2, [r2, #16]
 800db58:	f107 010a 	add.w	r1, r7, #10
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db62:	e084      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fabd 	bl	800e0e6 <USBD_CtlError>
            err++;
 800db6c:	7cfb      	ldrb	r3, [r7, #19]
 800db6e:	3301      	adds	r3, #1
 800db70:	74fb      	strb	r3, [r7, #19]
          break;
 800db72:	e07c      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00b      	beq.n	800db98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	7c12      	ldrb	r2, [r2, #16]
 800db8c:	f107 010a 	add.w	r1, r7, #10
 800db90:	4610      	mov	r0, r2
 800db92:	4798      	blx	r3
 800db94:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db96:	e06a      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800db98:	6839      	ldr	r1, [r7, #0]
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 faa3 	bl	800e0e6 <USBD_CtlError>
            err++;
 800dba0:	7cfb      	ldrb	r3, [r7, #19]
 800dba2:	3301      	adds	r3, #1
 800dba4:	74fb      	strb	r3, [r7, #19]
          break;
 800dba6:	e062      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d00b      	beq.n	800dbcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	7c12      	ldrb	r2, [r2, #16]
 800dbc0:	f107 010a 	add.w	r1, r7, #10
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	4798      	blx	r3
 800dbc8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbca:	e050      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 fa89 	bl	800e0e6 <USBD_CtlError>
            err++;
 800dbd4:	7cfb      	ldrb	r3, [r7, #19]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	74fb      	strb	r3, [r7, #19]
          break;
 800dbda:	e048      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe2:	699b      	ldr	r3, [r3, #24]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00b      	beq.n	800dc00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	7c12      	ldrb	r2, [r2, #16]
 800dbf4:	f107 010a 	add.w	r1, r7, #10
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	4798      	blx	r3
 800dbfc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbfe:	e036      	b.n	800dc6e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa6f 	bl	800e0e6 <USBD_CtlError>
            err++;
 800dc08:	7cfb      	ldrb	r3, [r7, #19]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	74fb      	strb	r3, [r7, #19]
          break;
 800dc0e:	e02e      	b.n	800dc6e <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]


          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800dc14:	2300      	movs	r3, #0
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	e020      	b.n	800dc5c <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	32ae      	adds	r2, #174	; 0xae
 800dc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d015      	beq.n	800dc56 <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	32ae      	adds	r2, #174	; 0xae
 800dc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	8852      	ldrh	r2, [r2, #2]
 800dc42:	b2d1      	uxtb	r1, r2
 800dc44:	f107 020a 	add.w	r2, r7, #10
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	4798      	blx	r3
 800dc4c:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10a      	bne.n	800dc6a <USBD_GetDescriptor+0x25e>
              {
                continue;
 800dc54:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d3d8      	bcc.n	800dc1a <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dc68:	e000      	b.n	800dc6c <USBD_GetDescriptor+0x260>
                break;
 800dc6a:	bf00      	nop
          break;
 800dc6c:	bf00      	nop
      }
      break;
 800dc6e:	e037      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	7c1b      	ldrb	r3, [r3, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d109      	bne.n	800dc8c <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	f107 020a 	add.w	r2, r7, #10
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc8a:	e029      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa29 	bl	800e0e6 <USBD_CtlError>
        err++;
 800dc94:	7cfb      	ldrb	r3, [r7, #19]
 800dc96:	3301      	adds	r3, #1
 800dc98:	74fb      	strb	r3, [r7, #19]
      break;
 800dc9a:	e021      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	7c1b      	ldrb	r3, [r3, #16]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10d      	bne.n	800dcc0 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcac:	f107 020a 	add.w	r2, r7, #10
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	4798      	blx	r3
 800dcb4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	2207      	movs	r2, #7
 800dcbc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcbe:	e00f      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa0f 	bl	800e0e6 <USBD_CtlError>
        err++;
 800dcc8:	7cfb      	ldrb	r3, [r7, #19]
 800dcca:	3301      	adds	r3, #1
 800dccc:	74fb      	strb	r3, [r7, #19]
      break;
 800dcce:	e007      	b.n	800dce0 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fa07 	bl	800e0e6 <USBD_CtlError>
      err++;
 800dcd8:	7cfb      	ldrb	r3, [r7, #19]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	74fb      	strb	r3, [r7, #19]
      break;
 800dcde:	bf00      	nop
  }

  if (err != 0U)
 800dce0:	7cfb      	ldrb	r3, [r7, #19]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d11e      	bne.n	800dd24 <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	88db      	ldrh	r3, [r3, #6]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d016      	beq.n	800dd1c <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 800dcee:	897b      	ldrh	r3, [r7, #10]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00e      	beq.n	800dd12 <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	88da      	ldrh	r2, [r3, #6]
 800dcf8:	897b      	ldrh	r3, [r7, #10]
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	bf28      	it	cs
 800dcfe:	4613      	movcs	r3, r2
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd04:	897b      	ldrh	r3, [r7, #10]
 800dd06:	461a      	mov	r2, r3
 800dd08:	6979      	ldr	r1, [r7, #20]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fa5c 	bl	800e1c8 <USBD_CtlSendData>
 800dd10:	e009      	b.n	800dd26 <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f9e6 	bl	800e0e6 <USBD_CtlError>
 800dd1a:	e004      	b.n	800dd26 <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 faad 	bl	800e27c <USBD_CtlSendStatus>
 800dd22:	e000      	b.n	800dd26 <USBD_GetDescriptor+0x31a>
    return;
 800dd24:	bf00      	nop
  }
}
 800dd26:	3718      	adds	r7, #24
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	889b      	ldrh	r3, [r3, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d131      	bne.n	800dda2 <USBD_SetAddress+0x76>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	88db      	ldrh	r3, [r3, #6]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d12d      	bne.n	800dda2 <USBD_SetAddress+0x76>
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	885b      	ldrh	r3, [r3, #2]
 800dd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd4c:	d829      	bhi.n	800dda2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	885b      	ldrh	r3, [r3, #2]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d104      	bne.n	800dd70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f9bc 	bl	800e0e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd6e:	e01d      	b.n	800ddac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	7bfa      	ldrb	r2, [r7, #15]
 800dd74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f00a fa75 	bl	801826c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 fa7a 	bl	800e27c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d004      	beq.n	800dd98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2202      	movs	r2, #2
 800dd92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd96:	e009      	b.n	800ddac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dda0:	e004      	b.n	800ddac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dda2:	6839      	ldr	r1, [r7, #0]
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f99e 	bl	800e0e6 <USBD_CtlError>
  }
}
 800ddaa:	bf00      	nop
 800ddac:	bf00      	nop
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	885b      	ldrh	r3, [r3, #2]
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	4b4e      	ldr	r3, [pc, #312]	; (800df04 <USBD_SetConfig+0x150>)
 800ddca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ddcc:	4b4d      	ldr	r3, [pc, #308]	; (800df04 <USBD_SetConfig+0x150>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d905      	bls.n	800dde0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ddd4:	6839      	ldr	r1, [r7, #0]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f985 	bl	800e0e6 <USBD_CtlError>
    return USBD_FAIL;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e08c      	b.n	800defa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d002      	beq.n	800ddf2 <USBD_SetConfig+0x3e>
 800ddec:	2b03      	cmp	r3, #3
 800ddee:	d029      	beq.n	800de44 <USBD_SetConfig+0x90>
 800ddf0:	e075      	b.n	800dede <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddf2:	4b44      	ldr	r3, [pc, #272]	; (800df04 <USBD_SetConfig+0x150>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d020      	beq.n	800de3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ddfa:	4b42      	ldr	r3, [pc, #264]	; (800df04 <USBD_SetConfig+0x150>)
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de04:	4b3f      	ldr	r3, [pc, #252]	; (800df04 <USBD_SetConfig+0x150>)
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	4619      	mov	r1, r3
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fe fffa 	bl	800ce04 <USBD_SetClassConfig>
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de14:	7bfb      	ldrb	r3, [r7, #15]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d008      	beq.n	800de2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f962 	bl	800e0e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2202      	movs	r2, #2
 800de26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de2a:	e065      	b.n	800def8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 fa25 	bl	800e27c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2203      	movs	r2, #3
 800de36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de3a:	e05d      	b.n	800def8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fa1d 	bl	800e27c <USBD_CtlSendStatus>
      break;
 800de42:	e059      	b.n	800def8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de44:	4b2f      	ldr	r3, [pc, #188]	; (800df04 <USBD_SetConfig+0x150>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d112      	bne.n	800de72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2202      	movs	r2, #2
 800de50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de54:	4b2b      	ldr	r3, [pc, #172]	; (800df04 <USBD_SetConfig+0x150>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	461a      	mov	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de5e:	4b29      	ldr	r3, [pc, #164]	; (800df04 <USBD_SetConfig+0x150>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fe ffe9 	bl	800ce3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 fa06 	bl	800e27c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de70:	e042      	b.n	800def8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800de72:	4b24      	ldr	r3, [pc, #144]	; (800df04 <USBD_SetConfig+0x150>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d02a      	beq.n	800ded6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	b2db      	uxtb	r3, r3
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f7fe ffd7 	bl	800ce3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de8e:	4b1d      	ldr	r3, [pc, #116]	; (800df04 <USBD_SetConfig+0x150>)
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	461a      	mov	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de98:	4b1a      	ldr	r3, [pc, #104]	; (800df04 <USBD_SetConfig+0x150>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	4619      	mov	r1, r3
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f7fe ffb0 	bl	800ce04 <USBD_SetClassConfig>
 800dea4:	4603      	mov	r3, r0
 800dea6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00f      	beq.n	800dece <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f918 	bl	800e0e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	b2db      	uxtb	r3, r3
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7fe ffbc 	bl	800ce3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800decc:	e014      	b.n	800def8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f9d4 	bl	800e27c <USBD_CtlSendStatus>
      break;
 800ded4:	e010      	b.n	800def8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 f9d0 	bl	800e27c <USBD_CtlSendStatus>
      break;
 800dedc:	e00c      	b.n	800def8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dede:	6839      	ldr	r1, [r7, #0]
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 f900 	bl	800e0e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dee6:	4b07      	ldr	r3, [pc, #28]	; (800df04 <USBD_SetConfig+0x150>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	4619      	mov	r1, r3
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7fe ffa5 	bl	800ce3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800def2:	2303      	movs	r3, #3
 800def4:	73fb      	strb	r3, [r7, #15]
      break;
 800def6:	bf00      	nop
  }

  return ret;
 800def8:	7bfb      	ldrb	r3, [r7, #15]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	24000f8b 	.word	0x24000f8b

0800df08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	88db      	ldrh	r3, [r3, #6]
 800df16:	2b01      	cmp	r3, #1
 800df18:	d004      	beq.n	800df24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f8e2 	bl	800e0e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df22:	e023      	b.n	800df6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	dc02      	bgt.n	800df36 <USBD_GetConfig+0x2e>
 800df30:	2b00      	cmp	r3, #0
 800df32:	dc03      	bgt.n	800df3c <USBD_GetConfig+0x34>
 800df34:	e015      	b.n	800df62 <USBD_GetConfig+0x5a>
 800df36:	2b03      	cmp	r3, #3
 800df38:	d00b      	beq.n	800df52 <USBD_GetConfig+0x4a>
 800df3a:	e012      	b.n	800df62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3308      	adds	r3, #8
 800df46:	2201      	movs	r2, #1
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f93c 	bl	800e1c8 <USBD_CtlSendData>
        break;
 800df50:	e00c      	b.n	800df6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	3304      	adds	r3, #4
 800df56:	2201      	movs	r2, #1
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f934 	bl	800e1c8 <USBD_CtlSendData>
        break;
 800df60:	e004      	b.n	800df6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 f8be 	bl	800e0e6 <USBD_CtlError>
        break;
 800df6a:	bf00      	nop
}
 800df6c:	bf00      	nop
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df84:	b2db      	uxtb	r3, r3
 800df86:	3b01      	subs	r3, #1
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d81e      	bhi.n	800dfca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	88db      	ldrh	r3, [r3, #6]
 800df90:	2b02      	cmp	r3, #2
 800df92:	d004      	beq.n	800df9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f8a5 	bl	800e0e6 <USBD_CtlError>
        break;
 800df9c:	e01a      	b.n	800dfd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d005      	beq.n	800dfba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	f043 0202 	orr.w	r2, r3, #2
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	330c      	adds	r3, #12
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f900 	bl	800e1c8 <USBD_CtlSendData>
      break;
 800dfc8:	e004      	b.n	800dfd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dfca:	6839      	ldr	r1, [r7, #0]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f88a 	bl	800e0e6 <USBD_CtlError>
      break;
 800dfd2:	bf00      	nop
  }
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	885b      	ldrh	r3, [r3, #2]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d107      	bne.n	800dffe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f940 	bl	800e27c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dffc:	e013      	b.n	800e026 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	885b      	ldrh	r3, [r3, #2]
 800e002:	2b02      	cmp	r3, #2
 800e004:	d10b      	bne.n	800e01e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	889b      	ldrh	r3, [r3, #4]
 800e00a:	0a1b      	lsrs	r3, r3, #8
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f930 	bl	800e27c <USBD_CtlSendStatus>
}
 800e01c:	e003      	b.n	800e026 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f860 	bl	800e0e6 <USBD_CtlError>
}
 800e026:	bf00      	nop
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	3b01      	subs	r3, #1
 800e042:	2b02      	cmp	r3, #2
 800e044:	d80b      	bhi.n	800e05e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	885b      	ldrh	r3, [r3, #2]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d10c      	bne.n	800e068 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f910 	bl	800e27c <USBD_CtlSendStatus>
      }
      break;
 800e05c:	e004      	b.n	800e068 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e05e:	6839      	ldr	r1, [r7, #0]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 f840 	bl	800e0e6 <USBD_CtlError>
      break;
 800e066:	e000      	b.n	800e06a <USBD_ClrFeature+0x3c>
      break;
 800e068:	bf00      	nop
  }
}
 800e06a:	bf00      	nop
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	3301      	adds	r3, #1
 800e08c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	781a      	ldrb	r2, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3301      	adds	r3, #1
 800e09a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fa1a 	bl	800d4d6 <SWAPBYTE>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff fa0d 	bl	800d4d6 <SWAPBYTE>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	461a      	mov	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7ff fa00 	bl	800d4d6 <SWAPBYTE>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	461a      	mov	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	80da      	strh	r2, [r3, #6]
}
 800e0de:	bf00      	nop
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b082      	sub	sp, #8
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0f0:	2180      	movs	r1, #128	; 0x80
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f00a f850 	bl	8018198 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f00a f84c 	bl	8018198 <USBD_LL_StallEP>
}
 800e100:	bf00      	nop
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d036      	beq.n	800e18c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e122:	6938      	ldr	r0, [r7, #16]
 800e124:	f000 f836 	bl	800e194 <USBD_GetLen>
 800e128:	4603      	mov	r3, r0
 800e12a:	3301      	adds	r3, #1
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	005b      	lsls	r3, r3, #1
 800e130:	b29a      	uxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	4413      	add	r3, r2
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	7812      	ldrb	r2, [r2, #0]
 800e140:	701a      	strb	r2, [r3, #0]
  idx++;
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	3301      	adds	r3, #1
 800e146:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	4413      	add	r3, r2
 800e14e:	2203      	movs	r2, #3
 800e150:	701a      	strb	r2, [r3, #0]
  idx++;
 800e152:	7dfb      	ldrb	r3, [r7, #23]
 800e154:	3301      	adds	r3, #1
 800e156:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e158:	e013      	b.n	800e182 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	4413      	add	r3, r2
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	7812      	ldrb	r2, [r2, #0]
 800e164:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	3301      	adds	r3, #1
 800e16a:	613b      	str	r3, [r7, #16]
    idx++;
 800e16c:	7dfb      	ldrb	r3, [r7, #23]
 800e16e:	3301      	adds	r3, #1
 800e170:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e172:	7dfb      	ldrb	r3, [r7, #23]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	4413      	add	r3, r2
 800e178:	2200      	movs	r2, #0
 800e17a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e17c:	7dfb      	ldrb	r3, [r7, #23]
 800e17e:	3301      	adds	r3, #1
 800e180:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1e7      	bne.n	800e15a <USBD_GetString+0x52>
 800e18a:	e000      	b.n	800e18e <USBD_GetString+0x86>
    return;
 800e18c:	bf00      	nop
  }
}
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e1a4:	e005      	b.n	800e1b2 <USBD_GetLen+0x1e>
  {
    len++;
 800e1a6:	7bfb      	ldrb	r3, [r7, #15]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f5      	bne.n	800e1a6 <USBD_GetLen+0x12>
  }

  return len;
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f00a f85b 	bl	80182aa <USBD_LL_Transmit>

  return USBD_OK;
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b084      	sub	sp, #16
 800e202:	af00      	add	r7, sp, #0
 800e204:	60f8      	str	r0, [r7, #12]
 800e206:	60b9      	str	r1, [r7, #8]
 800e208:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	2100      	movs	r1, #0
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f00a f84a 	bl	80182aa <USBD_LL_Transmit>

  return USBD_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2203      	movs	r2, #3
 800e230:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	2100      	movs	r1, #0
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f00a f84e 	bl	80182ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e250:	2300      	movs	r3, #0
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	60f8      	str	r0, [r7, #12]
 800e262:	60b9      	str	r1, [r7, #8]
 800e264:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	2100      	movs	r1, #0
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f00a f83d 	bl	80182ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2204      	movs	r2, #4
 800e288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e28c:	2300      	movs	r3, #0
 800e28e:	2200      	movs	r2, #0
 800e290:	2100      	movs	r1, #0
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f00a f809 	bl	80182aa <USBD_LL_Transmit>

  return USBD_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b082      	sub	sp, #8
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2205      	movs	r2, #5
 800e2ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f00a f817 	bl	80182ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e2d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e2da:	2b84      	cmp	r3, #132	; 0x84
 800e2dc:	d005      	beq.n	800e2ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e2de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	3303      	adds	r3, #3
 800e2e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2fe:	f3ef 8305 	mrs	r3, IPSR
 800e302:	607b      	str	r3, [r7, #4]
  return(result);
 800e304:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e306:	2b00      	cmp	r3, #0
 800e308:	bf14      	ite	ne
 800e30a:	2301      	movne	r3, #1
 800e30c:	2300      	moveq	r3, #0
 800e30e:	b2db      	uxtb	r3, r3
}
 800e310:	4618      	mov	r0, r3
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e320:	f001 f910 	bl	800f544 <vTaskStartScheduler>
  
  return osOK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	bd80      	pop	{r7, pc}

0800e32a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e32a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e32c:	b089      	sub	sp, #36	; 0x24
 800e32e:	af04      	add	r7, sp, #16
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	695b      	ldr	r3, [r3, #20]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d020      	beq.n	800e37e <osThreadCreate+0x54>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	699b      	ldr	r3, [r3, #24]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d01c      	beq.n	800e37e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685c      	ldr	r4, [r3, #4]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681d      	ldr	r5, [r3, #0]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	691e      	ldr	r6, [r3, #16]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ffb6 	bl	800e2c8 <makeFreeRtosPriority>
 800e35c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e366:	9202      	str	r2, [sp, #8]
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	9100      	str	r1, [sp, #0]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	4632      	mov	r2, r6
 800e370:	4629      	mov	r1, r5
 800e372:	4620      	mov	r0, r4
 800e374:	f000 ff1e 	bl	800f1b4 <xTaskCreateStatic>
 800e378:	4603      	mov	r3, r0
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e01c      	b.n	800e3b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	685c      	ldr	r4, [r3, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e38a:	b29e      	uxth	r6, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e392:	4618      	mov	r0, r3
 800e394:	f7ff ff98 	bl	800e2c8 <makeFreeRtosPriority>
 800e398:	4602      	mov	r2, r0
 800e39a:	f107 030c 	add.w	r3, r7, #12
 800e39e:	9301      	str	r3, [sp, #4]
 800e3a0:	9200      	str	r2, [sp, #0]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 ff60 	bl	800f26e <xTaskCreate>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d001      	beq.n	800e3b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e000      	b.n	800e3ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e3c2:	b580      	push	{r7, lr}
 800e3c4:	b084      	sub	sp, #16
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <osDelay+0x16>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	e000      	b.n	800e3da <osDelay+0x18>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f001 f87e 	bl	800f4dc <vTaskDelay>
  
  return osOK;
 800e3e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b086      	sub	sp, #24
 800e3ee:	af02      	add	r7, sp, #8
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00f      	beq.n	800e41c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d10a      	bne.n	800e418 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	2203      	movs	r2, #3
 800e408:	9200      	str	r2, [sp, #0]
 800e40a:	2200      	movs	r2, #0
 800e40c:	2100      	movs	r1, #0
 800e40e:	2001      	movs	r0, #1
 800e410:	f000 f9be 	bl	800e790 <xQueueGenericCreateStatic>
 800e414:	4603      	mov	r3, r0
 800e416:	e016      	b.n	800e446 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e418:	2300      	movs	r3, #0
 800e41a:	e014      	b.n	800e446 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d110      	bne.n	800e444 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800e422:	2203      	movs	r2, #3
 800e424:	2100      	movs	r1, #0
 800e426:	2001      	movs	r0, #1
 800e428:	f000 fa2a 	bl	800e880 <xQueueGenericCreate>
 800e42c:	60f8      	str	r0, [r7, #12]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d005      	beq.n	800e440 <osSemaphoreCreate+0x56>
 800e434:	2300      	movs	r3, #0
 800e436:	2200      	movs	r2, #0
 800e438:	2100      	movs	r1, #0
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f000 fa7a 	bl	800e934 <xQueueGenericSend>
      return sema;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	e000      	b.n	800e446 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e444:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e464:	2380      	movs	r3, #128	; 0x80
 800e466:	e03a      	b.n	800e4de <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e472:	d103      	bne.n	800e47c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e474:	f04f 33ff 	mov.w	r3, #4294967295
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	e009      	b.n	800e490 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d006      	beq.n	800e490 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <osSemaphoreWait+0x40>
      ticks = 1;
 800e48c:	2301      	movs	r3, #1
 800e48e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e490:	f7ff ff32 	bl	800e2f8 <inHandlerMode>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d017      	beq.n	800e4ca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e49a:	f107 0308 	add.w	r3, r7, #8
 800e49e:	461a      	mov	r2, r3
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fcde 	bl	800ee64 <xQueueReceiveFromISR>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d001      	beq.n	800e4b2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e4ae:	23ff      	movs	r3, #255	; 0xff
 800e4b0:	e015      	b.n	800e4de <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d011      	beq.n	800e4dc <osSemaphoreWait+0x8c>
 800e4b8:	4b0b      	ldr	r3, [pc, #44]	; (800e4e8 <osSemaphoreWait+0x98>)
 800e4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	e008      	b.n	800e4dc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e4ca:	68f9      	ldr	r1, [r7, #12]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fbbd 	bl	800ec4c <xQueueSemaphoreTake>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d001      	beq.n	800e4dc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e4d8:	23ff      	movs	r3, #255	; 0xff
 800e4da:	e000      	b.n	800e4de <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	e000ed04 	.word	0xe000ed04

0800e4ec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e4fc:	f7ff fefc 	bl	800e2f8 <inHandlerMode>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d016      	beq.n	800e534 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e506:	f107 0308 	add.w	r3, r7, #8
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 fb0f 	bl	800eb30 <xQueueGiveFromISR>
 800e512:	4603      	mov	r3, r0
 800e514:	2b01      	cmp	r3, #1
 800e516:	d001      	beq.n	800e51c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e518:	23ff      	movs	r3, #255	; 0xff
 800e51a:	e017      	b.n	800e54c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d013      	beq.n	800e54a <osSemaphoreRelease+0x5e>
 800e522:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <osSemaphoreRelease+0x68>)
 800e524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e528:	601a      	str	r2, [r3, #0]
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	e00a      	b.n	800e54a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e534:	2300      	movs	r3, #0
 800e536:	2200      	movs	r2, #0
 800e538:	2100      	movs	r1, #0
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f9fa 	bl	800e934 <xQueueGenericSend>
 800e540:	4603      	mov	r3, r0
 800e542:	2b01      	cmp	r3, #1
 800e544:	d001      	beq.n	800e54a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e546:	23ff      	movs	r3, #255	; 0xff
 800e548:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e54a:	68fb      	ldr	r3, [r7, #12]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	e000ed04 	.word	0xe000ed04

0800e558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f103 0208 	add.w	r2, r3, #8
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f04f 32ff 	mov.w	r2, #4294967295
 800e570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f103 0208 	add.w	r2, r3, #8
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f103 0208 	add.w	r2, r3, #8
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5a6:	bf00      	nop
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b085      	sub	sp, #20
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	689a      	ldr	r2, [r3, #8]
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	689b      	ldr	r3, [r3, #8]
 800e5d4:	683a      	ldr	r2, [r7, #0]
 800e5d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
}
 800e5ee:	bf00      	nop
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b085      	sub	sp, #20
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
 800e602:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e610:	d103      	bne.n	800e61a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	60fb      	str	r3, [r7, #12]
 800e618:	e00c      	b.n	800e634 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	3308      	adds	r3, #8
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	e002      	b.n	800e628 <vListInsert+0x2e>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	429a      	cmp	r2, r3
 800e632:	d2f6      	bcs.n	800e622 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685a      	ldr	r2, [r3, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	683a      	ldr	r2, [r7, #0]
 800e642:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	1c5a      	adds	r2, r3, #1
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	601a      	str	r2, [r3, #0]
}
 800e660:	bf00      	nop
 800e662:	3714      	adds	r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	6892      	ldr	r2, [r2, #8]
 800e682:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6852      	ldr	r2, [r2, #4]
 800e68c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	429a      	cmp	r2, r3
 800e696:	d103      	bne.n	800e6a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689a      	ldr	r2, [r3, #8]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	1e5a      	subs	r2, r3, #1
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3714      	adds	r7, #20
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10a      	bne.n	800e6ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e6e6:	bf00      	nop
 800e6e8:	e7fe      	b.n	800e6e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e6ea:	f001 fe7b 	bl	80103e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f6:	68f9      	ldr	r1, [r7, #12]
 800e6f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e6fa:	fb01 f303 	mul.w	r3, r1, r3
 800e6fe:	441a      	add	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e71a:	3b01      	subs	r3, #1
 800e71c:	68f9      	ldr	r1, [r7, #12]
 800e71e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e720:	fb01 f303 	mul.w	r3, r1, r3
 800e724:	441a      	add	r2, r3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	22ff      	movs	r2, #255	; 0xff
 800e72e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	22ff      	movs	r2, #255	; 0xff
 800e736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d114      	bne.n	800e76a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01a      	beq.n	800e77e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3310      	adds	r3, #16
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 f93b 	bl	800f9c8 <xTaskRemoveFromEventList>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d012      	beq.n	800e77e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e758:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <xQueueGenericReset+0xcc>)
 800e75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e75e:	601a      	str	r2, [r3, #0]
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	e009      	b.n	800e77e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3310      	adds	r3, #16
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff fef2 	bl	800e558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3324      	adds	r3, #36	; 0x24
 800e778:	4618      	mov	r0, r3
 800e77a:	f7ff feed 	bl	800e558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e77e:	f001 fe61 	bl	8010444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e782:	2301      	movs	r3, #1
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e790:	b580      	push	{r7, lr}
 800e792:	b08e      	sub	sp, #56	; 0x38
 800e794:	af02      	add	r7, sp, #8
 800e796:	60f8      	str	r0, [r7, #12]
 800e798:	60b9      	str	r1, [r7, #8]
 800e79a:	607a      	str	r2, [r7, #4]
 800e79c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10a      	bne.n	800e7ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e7b6:	bf00      	nop
 800e7b8:	e7fe      	b.n	800e7b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10a      	bne.n	800e7d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7d2:	bf00      	nop
 800e7d4:	e7fe      	b.n	800e7d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <xQueueGenericCreateStatic+0x52>
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d001      	beq.n	800e7e6 <xQueueGenericCreateStatic+0x56>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e000      	b.n	800e7e8 <xQueueGenericCreateStatic+0x58>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d10a      	bne.n	800e802 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	623b      	str	r3, [r7, #32]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d102      	bne.n	800e80e <xQueueGenericCreateStatic+0x7e>
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d101      	bne.n	800e812 <xQueueGenericCreateStatic+0x82>
 800e80e:	2301      	movs	r3, #1
 800e810:	e000      	b.n	800e814 <xQueueGenericCreateStatic+0x84>
 800e812:	2300      	movs	r3, #0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d10a      	bne.n	800e82e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81c:	f383 8811 	msr	BASEPRI, r3
 800e820:	f3bf 8f6f 	isb	sy
 800e824:	f3bf 8f4f 	dsb	sy
 800e828:	61fb      	str	r3, [r7, #28]
}
 800e82a:	bf00      	nop
 800e82c:	e7fe      	b.n	800e82c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e82e:	2348      	movs	r3, #72	; 0x48
 800e830:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	2b48      	cmp	r3, #72	; 0x48
 800e836:	d00a      	beq.n	800e84e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83c:	f383 8811 	msr	BASEPRI, r3
 800e840:	f3bf 8f6f 	isb	sy
 800e844:	f3bf 8f4f 	dsb	sy
 800e848:	61bb      	str	r3, [r7, #24]
}
 800e84a:	bf00      	nop
 800e84c:	e7fe      	b.n	800e84c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e84e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00d      	beq.n	800e876 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e862:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	4613      	mov	r3, r2
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	68b9      	ldr	r1, [r7, #8]
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f000 f83f 	bl	800e8f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e878:	4618      	mov	r0, r3
 800e87a:	3730      	adds	r7, #48	; 0x30
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e880:	b580      	push	{r7, lr}
 800e882:	b08a      	sub	sp, #40	; 0x28
 800e884:	af02      	add	r7, sp, #8
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	4613      	mov	r3, r2
 800e88c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <xQueueGenericCreate+0x2a>
	__asm volatile
 800e894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	613b      	str	r3, [r7, #16]
}
 800e8a6:	bf00      	nop
 800e8a8:	e7fe      	b.n	800e8a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	fb02 f303 	mul.w	r3, r2, r3
 800e8b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	3348      	adds	r3, #72	; 0x48
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f001 feb5 	bl	8010628 <pvPortMalloc>
 800e8be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d011      	beq.n	800e8ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	3348      	adds	r3, #72	; 0x48
 800e8ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e8d8:	79fa      	ldrb	r2, [r7, #7]
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f000 f805 	bl	800e8f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e8ea:	69bb      	ldr	r3, [r7, #24]
	}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3720      	adds	r7, #32
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
 800e900:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	e002      	b.n	800e916 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e922:	2101      	movs	r1, #1
 800e924:	69b8      	ldr	r0, [r7, #24]
 800e926:	f7ff fecb 	bl	800e6c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e92a:	bf00      	nop
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
	...

0800e934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08e      	sub	sp, #56	; 0x38
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e942:	2300      	movs	r3, #0
 800e944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10a      	bne.n	800e966 <xQueueGenericSend+0x32>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	f383 8811 	msr	BASEPRI, r3
 800e958:	f3bf 8f6f 	isb	sy
 800e95c:	f3bf 8f4f 	dsb	sy
 800e960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e962:	bf00      	nop
 800e964:	e7fe      	b.n	800e964 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <xQueueGenericSend+0x40>
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e970:	2b00      	cmp	r3, #0
 800e972:	d101      	bne.n	800e978 <xQueueGenericSend+0x44>
 800e974:	2301      	movs	r3, #1
 800e976:	e000      	b.n	800e97a <xQueueGenericSend+0x46>
 800e978:	2300      	movs	r3, #0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10a      	bne.n	800e994 <xQueueGenericSend+0x60>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e990:	bf00      	nop
 800e992:	e7fe      	b.n	800e992 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d103      	bne.n	800e9a2 <xQueueGenericSend+0x6e>
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d101      	bne.n	800e9a6 <xQueueGenericSend+0x72>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <xQueueGenericSend+0x74>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d10a      	bne.n	800e9c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800e9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b0:	f383 8811 	msr	BASEPRI, r3
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	623b      	str	r3, [r7, #32]
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e9c2:	f001 f9bd 	bl	800fd40 <xTaskGetSchedulerState>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d102      	bne.n	800e9d2 <xQueueGenericSend+0x9e>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <xQueueGenericSend+0xa2>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e000      	b.n	800e9d8 <xQueueGenericSend+0xa4>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e0:	f383 8811 	msr	BASEPRI, r3
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	61fb      	str	r3, [r7, #28]
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9f2:	f001 fcf7 	bl	80103e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d302      	bcc.n	800ea08 <xQueueGenericSend+0xd4>
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	d129      	bne.n	800ea5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea0e:	f000 fac1 	bl	800ef94 <prvCopyDataToQueue>
 800ea12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d010      	beq.n	800ea3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1e:	3324      	adds	r3, #36	; 0x24
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 ffd1 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d013      	beq.n	800ea54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea2c:	4b3f      	ldr	r3, [pc, #252]	; (800eb2c <xQueueGenericSend+0x1f8>)
 800ea2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	e00a      	b.n	800ea54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d007      	beq.n	800ea54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea44:	4b39      	ldr	r3, [pc, #228]	; (800eb2c <xQueueGenericSend+0x1f8>)
 800ea46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea54:	f001 fcf6 	bl	8010444 <vPortExitCritical>
				return pdPASS;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e063      	b.n	800eb24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d103      	bne.n	800ea6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea62:	f001 fcef 	bl	8010444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	e05c      	b.n	800eb24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d106      	bne.n	800ea7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea70:	f107 0314 	add.w	r3, r7, #20
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 f809 	bl	800fa8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea7e:	f001 fce1 	bl	8010444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea82:	f000 fdbf 	bl	800f604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea86:	f001 fcad 	bl	80103e4 <vPortEnterCritical>
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea90:	b25b      	sxtb	r3, r3
 800ea92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea96:	d103      	bne.n	800eaa0 <xQueueGenericSend+0x16c>
 800ea98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eaa6:	b25b      	sxtb	r3, r3
 800eaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaac:	d103      	bne.n	800eab6 <xQueueGenericSend+0x182>
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eab6:	f001 fcc5 	bl	8010444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eaba:	1d3a      	adds	r2, r7, #4
 800eabc:	f107 0314 	add.w	r3, r7, #20
 800eac0:	4611      	mov	r1, r2
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 fff8 	bl	800fab8 <xTaskCheckForTimeOut>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d124      	bne.n	800eb18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead0:	f000 fb58 	bl	800f184 <prvIsQueueFull>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d018      	beq.n	800eb0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	3310      	adds	r3, #16
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	4611      	mov	r1, r2
 800eae2:	4618      	mov	r0, r3
 800eae4:	f000 ff4c 	bl	800f980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaea:	f000 fae3 	bl	800f0b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eaee:	f000 fd97 	bl	800f620 <xTaskResumeAll>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f47f af7c 	bne.w	800e9f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800eafa:	4b0c      	ldr	r3, [pc, #48]	; (800eb2c <xQueueGenericSend+0x1f8>)
 800eafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	e772      	b.n	800e9f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb0e:	f000 fad1 	bl	800f0b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb12:	f000 fd85 	bl	800f620 <xTaskResumeAll>
 800eb16:	e76c      	b.n	800e9f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eb18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb1a:	f000 facb 	bl	800f0b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb1e:	f000 fd7f 	bl	800f620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eb22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3738      	adds	r7, #56	; 0x38
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	e000ed04 	.word	0xe000ed04

0800eb30 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08e      	sub	sp, #56	; 0x38
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d10a      	bne.n	800eb5a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb48:	f383 8811 	msr	BASEPRI, r3
 800eb4c:	f3bf 8f6f 	isb	sy
 800eb50:	f3bf 8f4f 	dsb	sy
 800eb54:	623b      	str	r3, [r7, #32]
}
 800eb56:	bf00      	nop
 800eb58:	e7fe      	b.n	800eb58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00a      	beq.n	800eb78 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	61fb      	str	r3, [r7, #28]
}
 800eb74:	bf00      	nop
 800eb76:	e7fe      	b.n	800eb76 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d103      	bne.n	800eb88 <xQueueGiveFromISR+0x58>
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <xQueueGiveFromISR+0x5c>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e000      	b.n	800eb8e <xQueueGiveFromISR+0x5e>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10a      	bne.n	800eba8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	61bb      	str	r3, [r7, #24]
}
 800eba4:	bf00      	nop
 800eba6:	e7fe      	b.n	800eba6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eba8:	f001 fcfe 	bl	80105a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ebac:	f3ef 8211 	mrs	r2, BASEPRI
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	617a      	str	r2, [r7, #20]
 800ebc2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ebc4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebcc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d22b      	bcs.n	800ec30 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf2:	d112      	bne.n	800ec1a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d016      	beq.n	800ec2a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfe:	3324      	adds	r3, #36	; 0x24
 800ec00:	4618      	mov	r0, r3
 800ec02:	f000 fee1 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00e      	beq.n	800ec2a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d00b      	beq.n	800ec2a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2201      	movs	r2, #1
 800ec16:	601a      	str	r2, [r3, #0]
 800ec18:	e007      	b.n	800ec2a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec1e:	3301      	adds	r3, #1
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	b25a      	sxtb	r2, r3
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec2e:	e001      	b.n	800ec34 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec30:	2300      	movs	r3, #0
 800ec32:	637b      	str	r3, [r7, #52]	; 0x34
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ec3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3738      	adds	r7, #56	; 0x38
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08e      	sub	sp, #56	; 0x38
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec56:	2300      	movs	r3, #0
 800ec58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d10a      	bne.n	800ec7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ec68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	623b      	str	r3, [r7, #32]
}
 800ec7a:	bf00      	nop
 800ec7c:	e7fe      	b.n	800ec7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00a      	beq.n	800ec9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	61fb      	str	r3, [r7, #28]
}
 800ec98:	bf00      	nop
 800ec9a:	e7fe      	b.n	800ec9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec9c:	f001 f850 	bl	800fd40 <xTaskGetSchedulerState>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <xQueueSemaphoreTake+0x60>
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <xQueueSemaphoreTake+0x64>
 800ecac:	2301      	movs	r3, #1
 800ecae:	e000      	b.n	800ecb2 <xQueueSemaphoreTake+0x66>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d10a      	bne.n	800eccc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	61bb      	str	r3, [r7, #24]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eccc:	f001 fb8a 	bl	80103e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d024      	beq.n	800ed26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	1e5a      	subs	r2, r3, #1
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ece4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d104      	bne.n	800ecf6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ecec:	f001 f9d0 	bl	8010090 <pvTaskIncrementMutexHeldCount>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf8:	691b      	ldr	r3, [r3, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00f      	beq.n	800ed1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed00:	3310      	adds	r3, #16
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fe60 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d007      	beq.n	800ed1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed0e:	4b54      	ldr	r3, [pc, #336]	; (800ee60 <xQueueSemaphoreTake+0x214>)
 800ed10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed1e:	f001 fb91 	bl	8010444 <vPortExitCritical>
				return pdPASS;
 800ed22:	2301      	movs	r3, #1
 800ed24:	e097      	b.n	800ee56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d111      	bne.n	800ed50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00a      	beq.n	800ed48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	f383 8811 	msr	BASEPRI, r3
 800ed3a:	f3bf 8f6f 	isb	sy
 800ed3e:	f3bf 8f4f 	dsb	sy
 800ed42:	617b      	str	r3, [r7, #20]
}
 800ed44:	bf00      	nop
 800ed46:	e7fe      	b.n	800ed46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed48:	f001 fb7c 	bl	8010444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e082      	b.n	800ee56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fe96 	bl	800fa8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed60:	2301      	movs	r3, #1
 800ed62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed64:	f001 fb6e 	bl	8010444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed68:	f000 fc4c 	bl	800f604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed6c:	f001 fb3a 	bl	80103e4 <vPortEnterCritical>
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed76:	b25b      	sxtb	r3, r3
 800ed78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7c:	d103      	bne.n	800ed86 <xQueueSemaphoreTake+0x13a>
 800ed7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed80:	2200      	movs	r2, #0
 800ed82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed8c:	b25b      	sxtb	r3, r3
 800ed8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed92:	d103      	bne.n	800ed9c <xQueueSemaphoreTake+0x150>
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed9c:	f001 fb52 	bl	8010444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eda0:	463a      	mov	r2, r7
 800eda2:	f107 030c 	add.w	r3, r7, #12
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 fe85 	bl	800fab8 <xTaskCheckForTimeOut>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d132      	bne.n	800ee1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edb6:	f000 f9cf 	bl	800f158 <prvIsQueueEmpty>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d026      	beq.n	800ee0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d109      	bne.n	800eddc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800edc8:	f001 fb0c 	bl	80103e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f000 ffd3 	bl	800fd7c <xTaskPriorityInherit>
 800edd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800edd8:	f001 fb34 	bl	8010444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	3324      	adds	r3, #36	; 0x24
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 fdcb 	bl	800f980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edec:	f000 f962 	bl	800f0b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edf0:	f000 fc16 	bl	800f620 <xTaskResumeAll>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f47f af68 	bne.w	800eccc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800edfc:	4b18      	ldr	r3, [pc, #96]	; (800ee60 <xQueueSemaphoreTake+0x214>)
 800edfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee02:	601a      	str	r2, [r3, #0]
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	e75e      	b.n	800eccc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee10:	f000 f950 	bl	800f0b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee14:	f000 fc04 	bl	800f620 <xTaskResumeAll>
 800ee18:	e758      	b.n	800eccc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee1c:	f000 f94a 	bl	800f0b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee20:	f000 fbfe 	bl	800f620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee26:	f000 f997 	bl	800f158 <prvIsQueueEmpty>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f43f af4d 	beq.w	800eccc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00d      	beq.n	800ee54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ee38:	f001 fad4 	bl	80103e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee3e:	f000 f891 	bl	800ef64 <prvGetDisinheritPriorityAfterTimeout>
 800ee42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f001 f892 	bl	800ff74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee50:	f001 faf8 	bl	8010444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3738      	adds	r7, #56	; 0x38
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	e000ed04 	.word	0xe000ed04

0800ee64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08e      	sub	sp, #56	; 0x38
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d10a      	bne.n	800ee90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	623b      	str	r3, [r7, #32]
}
 800ee8c:	bf00      	nop
 800ee8e:	e7fe      	b.n	800ee8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d103      	bne.n	800ee9e <xQueueReceiveFromISR+0x3a>
 800ee96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d101      	bne.n	800eea2 <xQueueReceiveFromISR+0x3e>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e000      	b.n	800eea4 <xQueueReceiveFromISR+0x40>
 800eea2:	2300      	movs	r3, #0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d10a      	bne.n	800eebe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeac:	f383 8811 	msr	BASEPRI, r3
 800eeb0:	f3bf 8f6f 	isb	sy
 800eeb4:	f3bf 8f4f 	dsb	sy
 800eeb8:	61fb      	str	r3, [r7, #28]
}
 800eeba:	bf00      	nop
 800eebc:	e7fe      	b.n	800eebc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eebe:	f001 fb73 	bl	80105a8 <vPortValidateInterruptPriority>
	__asm volatile
 800eec2:	f3ef 8211 	mrs	r2, BASEPRI
 800eec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeca:	f383 8811 	msr	BASEPRI, r3
 800eece:	f3bf 8f6f 	isb	sy
 800eed2:	f3bf 8f4f 	dsb	sy
 800eed6:	61ba      	str	r2, [r7, #24]
 800eed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eeda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eedc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d02f      	beq.n	800ef4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eef4:	68b9      	ldr	r1, [r7, #8]
 800eef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eef8:	f000 f8b6 	bl	800f068 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	1e5a      	subs	r2, r3, #1
 800ef00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0c:	d112      	bne.n	800ef34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d016      	beq.n	800ef44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	3310      	adds	r3, #16
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fd54 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00e      	beq.n	800ef44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00b      	beq.n	800ef44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	e007      	b.n	800ef44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef38:	3301      	adds	r3, #1
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	b25a      	sxtb	r2, r3
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ef44:	2301      	movs	r3, #1
 800ef46:	637b      	str	r3, [r7, #52]	; 0x34
 800ef48:	e001      	b.n	800ef4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	f383 8811 	msr	BASEPRI, r3
}
 800ef58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3738      	adds	r7, #56	; 0x38
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ef64:	b480      	push	{r7}
 800ef66:	b085      	sub	sp, #20
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f1c3 0307 	rsb	r3, r3, #7
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	e001      	b.n	800ef86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ef82:	2300      	movs	r3, #0
 800ef84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef86:	68fb      	ldr	r3, [r7, #12]
	}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800efa0:	2300      	movs	r3, #0
 800efa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10d      	bne.n	800efce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d14d      	bne.n	800f056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f000 ff52 	bl	800fe68 <xTaskPriorityDisinherit>
 800efc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	609a      	str	r2, [r3, #8]
 800efcc:	e043      	b.n	800f056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d119      	bne.n	800f008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6858      	ldr	r0, [r3, #4]
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efdc:	461a      	mov	r2, r3
 800efde:	68b9      	ldr	r1, [r7, #8]
 800efe0:	f01d fde0 	bl	802cba4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efec:	441a      	add	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	685a      	ldr	r2, [r3, #4]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	689b      	ldr	r3, [r3, #8]
 800effa:	429a      	cmp	r2, r3
 800effc:	d32b      	bcc.n	800f056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	605a      	str	r2, [r3, #4]
 800f006:	e026      	b.n	800f056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68d8      	ldr	r0, [r3, #12]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f010:	461a      	mov	r2, r3
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	f01d fdc6 	bl	802cba4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	68da      	ldr	r2, [r3, #12]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f020:	425b      	negs	r3, r3
 800f022:	441a      	add	r2, r3
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	68da      	ldr	r2, [r3, #12]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d207      	bcs.n	800f044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f03c:	425b      	negs	r3, r3
 800f03e:	441a      	add	r2, r3
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d105      	bne.n	800f056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	3b01      	subs	r3, #1
 800f054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	1c5a      	adds	r2, r3, #1
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f05e:	697b      	ldr	r3, [r7, #20]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3718      	adds	r7, #24
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f076:	2b00      	cmp	r3, #0
 800f078:	d018      	beq.n	800f0ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68da      	ldr	r2, [r3, #12]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f082:	441a      	add	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	68da      	ldr	r2, [r3, #12]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	429a      	cmp	r2, r3
 800f092:	d303      	bcc.n	800f09c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	68d9      	ldr	r1, [r3, #12]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	6838      	ldr	r0, [r7, #0]
 800f0a8:	f01d fd7c 	bl	802cba4 <memcpy>
	}
}
 800f0ac:	bf00      	nop
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f0bc:	f001 f992 	bl	80103e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0c8:	e011      	b.n	800f0ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d012      	beq.n	800f0f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3324      	adds	r3, #36	; 0x24
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 fc76 	bl	800f9c8 <xTaskRemoveFromEventList>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f0e2:	f000 fd4b 	bl	800fb7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f0ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dce9      	bgt.n	800f0ca <prvUnlockQueue+0x16>
 800f0f6:	e000      	b.n	800f0fa <prvUnlockQueue+0x46>
					break;
 800f0f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	22ff      	movs	r2, #255	; 0xff
 800f0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f102:	f001 f99f 	bl	8010444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f106:	f001 f96d 	bl	80103e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f112:	e011      	b.n	800f138 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	691b      	ldr	r3, [r3, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d012      	beq.n	800f142 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3310      	adds	r3, #16
 800f120:	4618      	mov	r0, r3
 800f122:	f000 fc51 	bl	800f9c8 <xTaskRemoveFromEventList>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d001      	beq.n	800f130 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f12c:	f000 fd26 	bl	800fb7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f130:	7bbb      	ldrb	r3, [r7, #14]
 800f132:	3b01      	subs	r3, #1
 800f134:	b2db      	uxtb	r3, r3
 800f136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	dce9      	bgt.n	800f114 <prvUnlockQueue+0x60>
 800f140:	e000      	b.n	800f144 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	22ff      	movs	r2, #255	; 0xff
 800f148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f14c:	f001 f97a 	bl	8010444 <vPortExitCritical>
}
 800f150:	bf00      	nop
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f160:	f001 f940 	bl	80103e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d102      	bne.n	800f172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f16c:	2301      	movs	r3, #1
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	e001      	b.n	800f176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f172:	2300      	movs	r3, #0
 800f174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f176:	f001 f965 	bl	8010444 <vPortExitCritical>

	return xReturn;
 800f17a:	68fb      	ldr	r3, [r7, #12]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f18c:	f001 f92a 	bl	80103e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f198:	429a      	cmp	r2, r3
 800f19a:	d102      	bne.n	800f1a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f19c:	2301      	movs	r3, #1
 800f19e:	60fb      	str	r3, [r7, #12]
 800f1a0:	e001      	b.n	800f1a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f1a6:	f001 f94d 	bl	8010444 <vPortExitCritical>

	return xReturn;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b08e      	sub	sp, #56	; 0x38
 800f1b8:	af04      	add	r7, sp, #16
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
 800f1c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10a      	bne.n	800f1de <xTaskCreateStatic+0x2a>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	f383 8811 	msr	BASEPRI, r3
 800f1d0:	f3bf 8f6f 	isb	sy
 800f1d4:	f3bf 8f4f 	dsb	sy
 800f1d8:	623b      	str	r3, [r7, #32]
}
 800f1da:	bf00      	nop
 800f1dc:	e7fe      	b.n	800f1dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <xTaskCreateStatic+0x46>
	__asm volatile
 800f1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e8:	f383 8811 	msr	BASEPRI, r3
 800f1ec:	f3bf 8f6f 	isb	sy
 800f1f0:	f3bf 8f4f 	dsb	sy
 800f1f4:	61fb      	str	r3, [r7, #28]
}
 800f1f6:	bf00      	nop
 800f1f8:	e7fe      	b.n	800f1f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1fa:	2354      	movs	r3, #84	; 0x54
 800f1fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	2b54      	cmp	r3, #84	; 0x54
 800f202:	d00a      	beq.n	800f21a <xTaskCreateStatic+0x66>
	__asm volatile
 800f204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f208:	f383 8811 	msr	BASEPRI, r3
 800f20c:	f3bf 8f6f 	isb	sy
 800f210:	f3bf 8f4f 	dsb	sy
 800f214:	61bb      	str	r3, [r7, #24]
}
 800f216:	bf00      	nop
 800f218:	e7fe      	b.n	800f218 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f21a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d01e      	beq.n	800f260 <xTaskCreateStatic+0xac>
 800f222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01b      	beq.n	800f260 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f230:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	2202      	movs	r2, #2
 800f236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f23a:	2300      	movs	r3, #0
 800f23c:	9303      	str	r3, [sp, #12]
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	9302      	str	r3, [sp, #8]
 800f242:	f107 0314 	add.w	r3, r7, #20
 800f246:	9301      	str	r3, [sp, #4]
 800f248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	68b9      	ldr	r1, [r7, #8]
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f000 f850 	bl	800f2f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f25a:	f000 f8d5 	bl	800f408 <prvAddNewTaskToReadyList>
 800f25e:	e001      	b.n	800f264 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f260:	2300      	movs	r3, #0
 800f262:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f264:	697b      	ldr	r3, [r7, #20]
	}
 800f266:	4618      	mov	r0, r3
 800f268:	3728      	adds	r7, #40	; 0x28
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b08c      	sub	sp, #48	; 0x30
 800f272:	af04      	add	r7, sp, #16
 800f274:	60f8      	str	r0, [r7, #12]
 800f276:	60b9      	str	r1, [r7, #8]
 800f278:	603b      	str	r3, [r7, #0]
 800f27a:	4613      	mov	r3, r2
 800f27c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f27e:	88fb      	ldrh	r3, [r7, #6]
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4618      	mov	r0, r3
 800f284:	f001 f9d0 	bl	8010628 <pvPortMalloc>
 800f288:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00e      	beq.n	800f2ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f290:	2054      	movs	r0, #84	; 0x54
 800f292:	f001 f9c9 	bl	8010628 <pvPortMalloc>
 800f296:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	631a      	str	r2, [r3, #48]	; 0x30
 800f2a4:	e005      	b.n	800f2b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2a6:	6978      	ldr	r0, [r7, #20]
 800f2a8:	f001 fa8a 	bl	80107c0 <vPortFree>
 800f2ac:	e001      	b.n	800f2b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d017      	beq.n	800f2e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2c0:	88fa      	ldrh	r2, [r7, #6]
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9303      	str	r3, [sp, #12]
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	9302      	str	r3, [sp, #8]
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	9301      	str	r3, [sp, #4]
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	9300      	str	r3, [sp, #0]
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 f80e 	bl	800f2f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2dc:	69f8      	ldr	r0, [r7, #28]
 800f2de:	f000 f893 	bl	800f408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	61bb      	str	r3, [r7, #24]
 800f2e6:	e002      	b.n	800f2ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2ee:	69bb      	ldr	r3, [r7, #24]
	}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3720      	adds	r7, #32
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b088      	sub	sp, #32
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	607a      	str	r2, [r7, #4]
 800f304:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f310:	440b      	add	r3, r1
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	f023 0307 	bic.w	r3, r3, #7
 800f31e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	f003 0307 	and.w	r3, r3, #7
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00a      	beq.n	800f340 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	617b      	str	r3, [r7, #20]
}
 800f33c:	bf00      	nop
 800f33e:	e7fe      	b.n	800f33e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d01f      	beq.n	800f386 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f346:	2300      	movs	r3, #0
 800f348:	61fb      	str	r3, [r7, #28]
 800f34a:	e012      	b.n	800f372 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	4413      	add	r3, r2
 800f352:	7819      	ldrb	r1, [r3, #0]
 800f354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	4413      	add	r3, r2
 800f35a:	3334      	adds	r3, #52	; 0x34
 800f35c:	460a      	mov	r2, r1
 800f35e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	4413      	add	r3, r2
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d006      	beq.n	800f37a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	3301      	adds	r3, #1
 800f370:	61fb      	str	r3, [r7, #28]
 800f372:	69fb      	ldr	r3, [r7, #28]
 800f374:	2b0f      	cmp	r3, #15
 800f376:	d9e9      	bls.n	800f34c <prvInitialiseNewTask+0x54>
 800f378:	e000      	b.n	800f37c <prvInitialiseNewTask+0x84>
			{
				break;
 800f37a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f384:	e003      	b.n	800f38e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	2b06      	cmp	r3, #6
 800f392:	d901      	bls.n	800f398 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f394:	2306      	movs	r3, #6
 800f396:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f39c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7ff f8f2 	bl	800e598 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	3318      	adds	r3, #24
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff f8ed 	bl	800e598 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	f1c3 0207 	rsb	r2, r3, #7
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	68f9      	ldr	r1, [r7, #12]
 800f3e6:	69b8      	ldr	r0, [r7, #24]
 800f3e8:	f000 fecc 	bl	8010184 <pxPortInitialiseStack>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d002      	beq.n	800f3fe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3fe:	bf00      	nop
 800f400:	3720      	adds	r7, #32
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f410:	f000 ffe8 	bl	80103e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f414:	4b2a      	ldr	r3, [pc, #168]	; (800f4c0 <prvAddNewTaskToReadyList+0xb8>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	3301      	adds	r3, #1
 800f41a:	4a29      	ldr	r2, [pc, #164]	; (800f4c0 <prvAddNewTaskToReadyList+0xb8>)
 800f41c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f41e:	4b29      	ldr	r3, [pc, #164]	; (800f4c4 <prvAddNewTaskToReadyList+0xbc>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d109      	bne.n	800f43a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f426:	4a27      	ldr	r2, [pc, #156]	; (800f4c4 <prvAddNewTaskToReadyList+0xbc>)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f42c:	4b24      	ldr	r3, [pc, #144]	; (800f4c0 <prvAddNewTaskToReadyList+0xb8>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d110      	bne.n	800f456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f434:	f000 fbc6 	bl	800fbc4 <prvInitialiseTaskLists>
 800f438:	e00d      	b.n	800f456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f43a:	4b23      	ldr	r3, [pc, #140]	; (800f4c8 <prvAddNewTaskToReadyList+0xc0>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d109      	bne.n	800f456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f442:	4b20      	ldr	r3, [pc, #128]	; (800f4c4 <prvAddNewTaskToReadyList+0xbc>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d802      	bhi.n	800f456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f450:	4a1c      	ldr	r2, [pc, #112]	; (800f4c4 <prvAddNewTaskToReadyList+0xbc>)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f456:	4b1d      	ldr	r3, [pc, #116]	; (800f4cc <prvAddNewTaskToReadyList+0xc4>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3301      	adds	r3, #1
 800f45c:	4a1b      	ldr	r2, [pc, #108]	; (800f4cc <prvAddNewTaskToReadyList+0xc4>)
 800f45e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f464:	2201      	movs	r2, #1
 800f466:	409a      	lsls	r2, r3
 800f468:	4b19      	ldr	r3, [pc, #100]	; (800f4d0 <prvAddNewTaskToReadyList+0xc8>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	4a18      	ldr	r2, [pc, #96]	; (800f4d0 <prvAddNewTaskToReadyList+0xc8>)
 800f470:	6013      	str	r3, [r2, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f476:	4613      	mov	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4a15      	ldr	r2, [pc, #84]	; (800f4d4 <prvAddNewTaskToReadyList+0xcc>)
 800f480:	441a      	add	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	3304      	adds	r3, #4
 800f486:	4619      	mov	r1, r3
 800f488:	4610      	mov	r0, r2
 800f48a:	f7ff f892 	bl	800e5b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f48e:	f000 ffd9 	bl	8010444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f492:	4b0d      	ldr	r3, [pc, #52]	; (800f4c8 <prvAddNewTaskToReadyList+0xc0>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00e      	beq.n	800f4b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f49a:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <prvAddNewTaskToReadyList+0xbc>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d207      	bcs.n	800f4b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4a8:	4b0b      	ldr	r3, [pc, #44]	; (800f4d8 <prvAddNewTaskToReadyList+0xd0>)
 800f4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ae:	601a      	str	r2, [r3, #0]
 800f4b0:	f3bf 8f4f 	dsb	sy
 800f4b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4b8:	bf00      	nop
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	2400108c 	.word	0x2400108c
 800f4c4:	24000f8c 	.word	0x24000f8c
 800f4c8:	24001098 	.word	0x24001098
 800f4cc:	240010a8 	.word	0x240010a8
 800f4d0:	24001094 	.word	0x24001094
 800f4d4:	24000f90 	.word	0x24000f90
 800f4d8:	e000ed04 	.word	0xe000ed04

0800f4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d017      	beq.n	800f51e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <vTaskDelay+0x60>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00a      	beq.n	800f50c <vTaskDelay+0x30>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	60bb      	str	r3, [r7, #8]
}
 800f508:	bf00      	nop
 800f50a:	e7fe      	b.n	800f50a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f50c:	f000 f87a 	bl	800f604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f510:	2100      	movs	r1, #0
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fdd0 	bl	80100b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f518:	f000 f882 	bl	800f620 <xTaskResumeAll>
 800f51c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d107      	bne.n	800f534 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <vTaskDelay+0x64>)
 800f526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f534:	bf00      	nop
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	240010b4 	.word	0x240010b4
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08a      	sub	sp, #40	; 0x28
 800f548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f54a:	2300      	movs	r3, #0
 800f54c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f54e:	2300      	movs	r3, #0
 800f550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f552:	463a      	mov	r2, r7
 800f554:	1d39      	adds	r1, r7, #4
 800f556:	f107 0308 	add.w	r3, r7, #8
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7f1 f8aa 	bl	80006b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f560:	6839      	ldr	r1, [r7, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	9202      	str	r2, [sp, #8]
 800f568:	9301      	str	r3, [sp, #4]
 800f56a:	2300      	movs	r3, #0
 800f56c:	9300      	str	r3, [sp, #0]
 800f56e:	2300      	movs	r3, #0
 800f570:	460a      	mov	r2, r1
 800f572:	491e      	ldr	r1, [pc, #120]	; (800f5ec <vTaskStartScheduler+0xa8>)
 800f574:	481e      	ldr	r0, [pc, #120]	; (800f5f0 <vTaskStartScheduler+0xac>)
 800f576:	f7ff fe1d 	bl	800f1b4 <xTaskCreateStatic>
 800f57a:	4603      	mov	r3, r0
 800f57c:	4a1d      	ldr	r2, [pc, #116]	; (800f5f4 <vTaskStartScheduler+0xb0>)
 800f57e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f580:	4b1c      	ldr	r3, [pc, #112]	; (800f5f4 <vTaskStartScheduler+0xb0>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d002      	beq.n	800f58e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f588:	2301      	movs	r3, #1
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	e001      	b.n	800f592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f58e:	2300      	movs	r3, #0
 800f590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d116      	bne.n	800f5c6 <vTaskStartScheduler+0x82>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	613b      	str	r3, [r7, #16]
}
 800f5aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f5ac:	4b12      	ldr	r3, [pc, #72]	; (800f5f8 <vTaskStartScheduler+0xb4>)
 800f5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5b4:	4b11      	ldr	r3, [pc, #68]	; (800f5fc <vTaskStartScheduler+0xb8>)
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5ba:	4b11      	ldr	r3, [pc, #68]	; (800f600 <vTaskStartScheduler+0xbc>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5c0:	f000 fe6e 	bl	80102a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5c4:	e00e      	b.n	800f5e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5cc:	d10a      	bne.n	800f5e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	60fb      	str	r3, [r7, #12]
}
 800f5e0:	bf00      	nop
 800f5e2:	e7fe      	b.n	800f5e2 <vTaskStartScheduler+0x9e>
}
 800f5e4:	bf00      	nop
 800f5e6:	3718      	adds	r7, #24
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	0802dc94 	.word	0x0802dc94
 800f5f0:	0800fb95 	.word	0x0800fb95
 800f5f4:	240010b0 	.word	0x240010b0
 800f5f8:	240010ac 	.word	0x240010ac
 800f5fc:	24001098 	.word	0x24001098
 800f600:	24001090 	.word	0x24001090

0800f604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f604:	b480      	push	{r7}
 800f606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f608:	4b04      	ldr	r3, [pc, #16]	; (800f61c <vTaskSuspendAll+0x18>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	3301      	adds	r3, #1
 800f60e:	4a03      	ldr	r2, [pc, #12]	; (800f61c <vTaskSuspendAll+0x18>)
 800f610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f612:	bf00      	nop
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	240010b4 	.word	0x240010b4

0800f620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f626:	2300      	movs	r3, #0
 800f628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f62a:	2300      	movs	r3, #0
 800f62c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f62e:	4b41      	ldr	r3, [pc, #260]	; (800f734 <xTaskResumeAll+0x114>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10a      	bne.n	800f64c <xTaskResumeAll+0x2c>
	__asm volatile
 800f636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f63a:	f383 8811 	msr	BASEPRI, r3
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	f3bf 8f4f 	dsb	sy
 800f646:	603b      	str	r3, [r7, #0]
}
 800f648:	bf00      	nop
 800f64a:	e7fe      	b.n	800f64a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f64c:	f000 feca 	bl	80103e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f650:	4b38      	ldr	r3, [pc, #224]	; (800f734 <xTaskResumeAll+0x114>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3b01      	subs	r3, #1
 800f656:	4a37      	ldr	r2, [pc, #220]	; (800f734 <xTaskResumeAll+0x114>)
 800f658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f65a:	4b36      	ldr	r3, [pc, #216]	; (800f734 <xTaskResumeAll+0x114>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d161      	bne.n	800f726 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f662:	4b35      	ldr	r3, [pc, #212]	; (800f738 <xTaskResumeAll+0x118>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d05d      	beq.n	800f726 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f66a:	e02e      	b.n	800f6ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f66c:	4b33      	ldr	r3, [pc, #204]	; (800f73c <xTaskResumeAll+0x11c>)
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	3318      	adds	r3, #24
 800f678:	4618      	mov	r0, r3
 800f67a:	f7fe fff7 	bl	800e66c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	3304      	adds	r3, #4
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe fff2 	bl	800e66c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68c:	2201      	movs	r2, #1
 800f68e:	409a      	lsls	r2, r3
 800f690:	4b2b      	ldr	r3, [pc, #172]	; (800f740 <xTaskResumeAll+0x120>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4313      	orrs	r3, r2
 800f696:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <xTaskResumeAll+0x120>)
 800f698:	6013      	str	r3, [r2, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f69e:	4613      	mov	r3, r2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4a27      	ldr	r2, [pc, #156]	; (800f744 <xTaskResumeAll+0x124>)
 800f6a8:	441a      	add	r2, r3
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	f7fe ff7e 	bl	800e5b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ba:	4b23      	ldr	r3, [pc, #140]	; (800f748 <xTaskResumeAll+0x128>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d302      	bcc.n	800f6ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f6c4:	4b21      	ldr	r3, [pc, #132]	; (800f74c <xTaskResumeAll+0x12c>)
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6ca:	4b1c      	ldr	r3, [pc, #112]	; (800f73c <xTaskResumeAll+0x11c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1cc      	bne.n	800f66c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f6d8:	f000 fb12 	bl	800fd00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6dc:	4b1c      	ldr	r3, [pc, #112]	; (800f750 <xTaskResumeAll+0x130>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d010      	beq.n	800f70a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f6e8:	f000 f836 	bl	800f758 <xTaskIncrementTick>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d002      	beq.n	800f6f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f6f2:	4b16      	ldr	r3, [pc, #88]	; (800f74c <xTaskResumeAll+0x12c>)
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f1      	bne.n	800f6e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f704:	4b12      	ldr	r3, [pc, #72]	; (800f750 <xTaskResumeAll+0x130>)
 800f706:	2200      	movs	r2, #0
 800f708:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f70a:	4b10      	ldr	r3, [pc, #64]	; (800f74c <xTaskResumeAll+0x12c>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d009      	beq.n	800f726 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f712:	2301      	movs	r3, #1
 800f714:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f716:	4b0f      	ldr	r3, [pc, #60]	; (800f754 <xTaskResumeAll+0x134>)
 800f718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f71c:	601a      	str	r2, [r3, #0]
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f726:	f000 fe8d 	bl	8010444 <vPortExitCritical>

	return xAlreadyYielded;
 800f72a:	68bb      	ldr	r3, [r7, #8]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	240010b4 	.word	0x240010b4
 800f738:	2400108c 	.word	0x2400108c
 800f73c:	2400104c 	.word	0x2400104c
 800f740:	24001094 	.word	0x24001094
 800f744:	24000f90 	.word	0x24000f90
 800f748:	24000f8c 	.word	0x24000f8c
 800f74c:	240010a0 	.word	0x240010a0
 800f750:	2400109c 	.word	0x2400109c
 800f754:	e000ed04 	.word	0xe000ed04

0800f758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b086      	sub	sp, #24
 800f75c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f75e:	2300      	movs	r3, #0
 800f760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f762:	4b4e      	ldr	r3, [pc, #312]	; (800f89c <xTaskIncrementTick+0x144>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2b00      	cmp	r3, #0
 800f768:	f040 808e 	bne.w	800f888 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f76c:	4b4c      	ldr	r3, [pc, #304]	; (800f8a0 <xTaskIncrementTick+0x148>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3301      	adds	r3, #1
 800f772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f774:	4a4a      	ldr	r2, [pc, #296]	; (800f8a0 <xTaskIncrementTick+0x148>)
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d120      	bne.n	800f7c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f780:	4b48      	ldr	r3, [pc, #288]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00a      	beq.n	800f7a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	603b      	str	r3, [r7, #0]
}
 800f79c:	bf00      	nop
 800f79e:	e7fe      	b.n	800f79e <xTaskIncrementTick+0x46>
 800f7a0:	4b40      	ldr	r3, [pc, #256]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60fb      	str	r3, [r7, #12]
 800f7a6:	4b40      	ldr	r3, [pc, #256]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a3e      	ldr	r2, [pc, #248]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	4a3e      	ldr	r2, [pc, #248]	; (800f8a8 <xTaskIncrementTick+0x150>)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	4b3d      	ldr	r3, [pc, #244]	; (800f8ac <xTaskIncrementTick+0x154>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	4a3c      	ldr	r2, [pc, #240]	; (800f8ac <xTaskIncrementTick+0x154>)
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	f000 fa9f 	bl	800fd00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f7c2:	4b3b      	ldr	r3, [pc, #236]	; (800f8b0 <xTaskIncrementTick+0x158>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d348      	bcc.n	800f85e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7cc:	4b35      	ldr	r3, [pc, #212]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d104      	bne.n	800f7e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7d6:	4b36      	ldr	r3, [pc, #216]	; (800f8b0 <xTaskIncrementTick+0x158>)
 800f7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7dc:	601a      	str	r2, [r3, #0]
					break;
 800f7de:	e03e      	b.n	800f85e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7e0:	4b30      	ldr	r3, [pc, #192]	; (800f8a4 <xTaskIncrementTick+0x14c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d203      	bcs.n	800f800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7f8:	4a2d      	ldr	r2, [pc, #180]	; (800f8b0 <xTaskIncrementTick+0x158>)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7fe:	e02e      	b.n	800f85e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	3304      	adds	r3, #4
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe ff31 	bl	800e66c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d004      	beq.n	800f81c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	3318      	adds	r3, #24
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe ff28 	bl	800e66c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f820:	2201      	movs	r2, #1
 800f822:	409a      	lsls	r2, r3
 800f824:	4b23      	ldr	r3, [pc, #140]	; (800f8b4 <xTaskIncrementTick+0x15c>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4313      	orrs	r3, r2
 800f82a:	4a22      	ldr	r2, [pc, #136]	; (800f8b4 <xTaskIncrementTick+0x15c>)
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f832:	4613      	mov	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4a1f      	ldr	r2, [pc, #124]	; (800f8b8 <xTaskIncrementTick+0x160>)
 800f83c:	441a      	add	r2, r3
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	3304      	adds	r3, #4
 800f842:	4619      	mov	r1, r3
 800f844:	4610      	mov	r0, r2
 800f846:	f7fe feb4 	bl	800e5b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84e:	4b1b      	ldr	r3, [pc, #108]	; (800f8bc <xTaskIncrementTick+0x164>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f854:	429a      	cmp	r2, r3
 800f856:	d3b9      	bcc.n	800f7cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f858:	2301      	movs	r3, #1
 800f85a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f85c:	e7b6      	b.n	800f7cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f85e:	4b17      	ldr	r3, [pc, #92]	; (800f8bc <xTaskIncrementTick+0x164>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f864:	4914      	ldr	r1, [pc, #80]	; (800f8b8 <xTaskIncrementTick+0x160>)
 800f866:	4613      	mov	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	440b      	add	r3, r1
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d901      	bls.n	800f87a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f876:	2301      	movs	r3, #1
 800f878:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f87a:	4b11      	ldr	r3, [pc, #68]	; (800f8c0 <xTaskIncrementTick+0x168>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d007      	beq.n	800f892 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f882:	2301      	movs	r3, #1
 800f884:	617b      	str	r3, [r7, #20]
 800f886:	e004      	b.n	800f892 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f888:	4b0e      	ldr	r3, [pc, #56]	; (800f8c4 <xTaskIncrementTick+0x16c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3301      	adds	r3, #1
 800f88e:	4a0d      	ldr	r2, [pc, #52]	; (800f8c4 <xTaskIncrementTick+0x16c>)
 800f890:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f892:	697b      	ldr	r3, [r7, #20]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	240010b4 	.word	0x240010b4
 800f8a0:	24001090 	.word	0x24001090
 800f8a4:	24001044 	.word	0x24001044
 800f8a8:	24001048 	.word	0x24001048
 800f8ac:	240010a4 	.word	0x240010a4
 800f8b0:	240010ac 	.word	0x240010ac
 800f8b4:	24001094 	.word	0x24001094
 800f8b8:	24000f90 	.word	0x24000f90
 800f8bc:	24000f8c 	.word	0x24000f8c
 800f8c0:	240010a0 	.word	0x240010a0
 800f8c4:	2400109c 	.word	0x2400109c

0800f8c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8ce:	4b27      	ldr	r3, [pc, #156]	; (800f96c <vTaskSwitchContext+0xa4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8d6:	4b26      	ldr	r3, [pc, #152]	; (800f970 <vTaskSwitchContext+0xa8>)
 800f8d8:	2201      	movs	r2, #1
 800f8da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8dc:	e03f      	b.n	800f95e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f8de:	4b24      	ldr	r3, [pc, #144]	; (800f970 <vTaskSwitchContext+0xa8>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8e4:	4b23      	ldr	r3, [pc, #140]	; (800f974 <vTaskSwitchContext+0xac>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	fab3 f383 	clz	r3, r3
 800f8f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f8f2:	7afb      	ldrb	r3, [r7, #11]
 800f8f4:	f1c3 031f 	rsb	r3, r3, #31
 800f8f8:	617b      	str	r3, [r7, #20]
 800f8fa:	491f      	ldr	r1, [pc, #124]	; (800f978 <vTaskSwitchContext+0xb0>)
 800f8fc:	697a      	ldr	r2, [r7, #20]
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d10a      	bne.n	800f924 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	607b      	str	r3, [r7, #4]
}
 800f920:	bf00      	nop
 800f922:	e7fe      	b.n	800f922 <vTaskSwitchContext+0x5a>
 800f924:	697a      	ldr	r2, [r7, #20]
 800f926:	4613      	mov	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4413      	add	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	4a12      	ldr	r2, [pc, #72]	; (800f978 <vTaskSwitchContext+0xb0>)
 800f930:	4413      	add	r3, r2
 800f932:	613b      	str	r3, [r7, #16]
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	685a      	ldr	r2, [r3, #4]
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	605a      	str	r2, [r3, #4]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	3308      	adds	r3, #8
 800f946:	429a      	cmp	r2, r3
 800f948:	d104      	bne.n	800f954 <vTaskSwitchContext+0x8c>
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	685a      	ldr	r2, [r3, #4]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	605a      	str	r2, [r3, #4]
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	68db      	ldr	r3, [r3, #12]
 800f95a:	4a08      	ldr	r2, [pc, #32]	; (800f97c <vTaskSwitchContext+0xb4>)
 800f95c:	6013      	str	r3, [r2, #0]
}
 800f95e:	bf00      	nop
 800f960:	371c      	adds	r7, #28
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	240010b4 	.word	0x240010b4
 800f970:	240010a0 	.word	0x240010a0
 800f974:	24001094 	.word	0x24001094
 800f978:	24000f90 	.word	0x24000f90
 800f97c:	24000f8c 	.word	0x24000f8c

0800f980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10a      	bne.n	800f9a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	60fb      	str	r3, [r7, #12]
}
 800f9a2:	bf00      	nop
 800f9a4:	e7fe      	b.n	800f9a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9a6:	4b07      	ldr	r3, [pc, #28]	; (800f9c4 <vTaskPlaceOnEventList+0x44>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3318      	adds	r3, #24
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fe fe23 	bl	800e5fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	6838      	ldr	r0, [r7, #0]
 800f9b8:	f000 fb7e 	bl	80100b8 <prvAddCurrentTaskToDelayedList>
}
 800f9bc:	bf00      	nop
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	24000f8c 	.word	0x24000f8c

0800f9c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10a      	bne.n	800f9f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	60fb      	str	r3, [r7, #12]
}
 800f9f0:	bf00      	nop
 800f9f2:	e7fe      	b.n	800f9f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	3318      	adds	r3, #24
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fe fe37 	bl	800e66c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9fe:	4b1d      	ldr	r3, [pc, #116]	; (800fa74 <xTaskRemoveFromEventList+0xac>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d11c      	bne.n	800fa40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe fe2e 	bl	800e66c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa14:	2201      	movs	r2, #1
 800fa16:	409a      	lsls	r2, r3
 800fa18:	4b17      	ldr	r3, [pc, #92]	; (800fa78 <xTaskRemoveFromEventList+0xb0>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	4a16      	ldr	r2, [pc, #88]	; (800fa78 <xTaskRemoveFromEventList+0xb0>)
 800fa20:	6013      	str	r3, [r2, #0]
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4a13      	ldr	r2, [pc, #76]	; (800fa7c <xTaskRemoveFromEventList+0xb4>)
 800fa30:	441a      	add	r2, r3
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	3304      	adds	r3, #4
 800fa36:	4619      	mov	r1, r3
 800fa38:	4610      	mov	r0, r2
 800fa3a:	f7fe fdba 	bl	800e5b2 <vListInsertEnd>
 800fa3e:	e005      	b.n	800fa4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	3318      	adds	r3, #24
 800fa44:	4619      	mov	r1, r3
 800fa46:	480e      	ldr	r0, [pc, #56]	; (800fa80 <xTaskRemoveFromEventList+0xb8>)
 800fa48:	f7fe fdb3 	bl	800e5b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa50:	4b0c      	ldr	r3, [pc, #48]	; (800fa84 <xTaskRemoveFromEventList+0xbc>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d905      	bls.n	800fa66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fa5e:	4b0a      	ldr	r3, [pc, #40]	; (800fa88 <xTaskRemoveFromEventList+0xc0>)
 800fa60:	2201      	movs	r2, #1
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	e001      	b.n	800fa6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fa66:	2300      	movs	r3, #0
 800fa68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fa6a:	697b      	ldr	r3, [r7, #20]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	240010b4 	.word	0x240010b4
 800fa78:	24001094 	.word	0x24001094
 800fa7c:	24000f90 	.word	0x24000f90
 800fa80:	2400104c 	.word	0x2400104c
 800fa84:	24000f8c 	.word	0x24000f8c
 800fa88:	240010a0 	.word	0x240010a0

0800fa8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fa94:	4b06      	ldr	r3, [pc, #24]	; (800fab0 <vTaskInternalSetTimeOutState+0x24>)
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fa9c:	4b05      	ldr	r3, [pc, #20]	; (800fab4 <vTaskInternalSetTimeOutState+0x28>)
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	605a      	str	r2, [r3, #4]
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	240010a4 	.word	0x240010a4
 800fab4:	24001090 	.word	0x24001090

0800fab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b088      	sub	sp, #32
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10a      	bne.n	800fade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	613b      	str	r3, [r7, #16]
}
 800fada:	bf00      	nop
 800fadc:	e7fe      	b.n	800fadc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10a      	bne.n	800fafa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae8:	f383 8811 	msr	BASEPRI, r3
 800faec:	f3bf 8f6f 	isb	sy
 800faf0:	f3bf 8f4f 	dsb	sy
 800faf4:	60fb      	str	r3, [r7, #12]
}
 800faf6:	bf00      	nop
 800faf8:	e7fe      	b.n	800faf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fafa:	f000 fc73 	bl	80103e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fafe:	4b1d      	ldr	r3, [pc, #116]	; (800fb74 <xTaskCheckForTimeOut+0xbc>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	69ba      	ldr	r2, [r7, #24]
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb16:	d102      	bne.n	800fb1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	61fb      	str	r3, [r7, #28]
 800fb1c:	e023      	b.n	800fb66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	4b15      	ldr	r3, [pc, #84]	; (800fb78 <xTaskCheckForTimeOut+0xc0>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d007      	beq.n	800fb3a <xTaskCheckForTimeOut+0x82>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	69ba      	ldr	r2, [r7, #24]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d302      	bcc.n	800fb3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fb34:	2301      	movs	r3, #1
 800fb36:	61fb      	str	r3, [r7, #28]
 800fb38:	e015      	b.n	800fb66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d20b      	bcs.n	800fb5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	1ad2      	subs	r2, r2, r3
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff ff9b 	bl	800fa8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fb56:	2300      	movs	r3, #0
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	e004      	b.n	800fb66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fb62:	2301      	movs	r3, #1
 800fb64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fb66:	f000 fc6d 	bl	8010444 <vPortExitCritical>

	return xReturn;
 800fb6a:	69fb      	ldr	r3, [r7, #28]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3720      	adds	r7, #32
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	24001090 	.word	0x24001090
 800fb78:	240010a4 	.word	0x240010a4

0800fb7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fb80:	4b03      	ldr	r3, [pc, #12]	; (800fb90 <vTaskMissedYield+0x14>)
 800fb82:	2201      	movs	r2, #1
 800fb84:	601a      	str	r2, [r3, #0]
}
 800fb86:	bf00      	nop
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr
 800fb90:	240010a0 	.word	0x240010a0

0800fb94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fb9c:	f000 f852 	bl	800fc44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fba0:	4b06      	ldr	r3, [pc, #24]	; (800fbbc <prvIdleTask+0x28>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d9f9      	bls.n	800fb9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fba8:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <prvIdleTask+0x2c>)
 800fbaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbae:	601a      	str	r2, [r3, #0]
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fbb8:	e7f0      	b.n	800fb9c <prvIdleTask+0x8>
 800fbba:	bf00      	nop
 800fbbc:	24000f90 	.word	0x24000f90
 800fbc0:	e000ed04 	.word	0xe000ed04

0800fbc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbca:	2300      	movs	r3, #0
 800fbcc:	607b      	str	r3, [r7, #4]
 800fbce:	e00c      	b.n	800fbea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4413      	add	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4a12      	ldr	r2, [pc, #72]	; (800fc24 <prvInitialiseTaskLists+0x60>)
 800fbdc:	4413      	add	r3, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fe fcba 	bl	800e558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	607b      	str	r3, [r7, #4]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b06      	cmp	r3, #6
 800fbee:	d9ef      	bls.n	800fbd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fbf0:	480d      	ldr	r0, [pc, #52]	; (800fc28 <prvInitialiseTaskLists+0x64>)
 800fbf2:	f7fe fcb1 	bl	800e558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fbf6:	480d      	ldr	r0, [pc, #52]	; (800fc2c <prvInitialiseTaskLists+0x68>)
 800fbf8:	f7fe fcae 	bl	800e558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fbfc:	480c      	ldr	r0, [pc, #48]	; (800fc30 <prvInitialiseTaskLists+0x6c>)
 800fbfe:	f7fe fcab 	bl	800e558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc02:	480c      	ldr	r0, [pc, #48]	; (800fc34 <prvInitialiseTaskLists+0x70>)
 800fc04:	f7fe fca8 	bl	800e558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc08:	480b      	ldr	r0, [pc, #44]	; (800fc38 <prvInitialiseTaskLists+0x74>)
 800fc0a:	f7fe fca5 	bl	800e558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc0e:	4b0b      	ldr	r3, [pc, #44]	; (800fc3c <prvInitialiseTaskLists+0x78>)
 800fc10:	4a05      	ldr	r2, [pc, #20]	; (800fc28 <prvInitialiseTaskLists+0x64>)
 800fc12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc14:	4b0a      	ldr	r3, [pc, #40]	; (800fc40 <prvInitialiseTaskLists+0x7c>)
 800fc16:	4a05      	ldr	r2, [pc, #20]	; (800fc2c <prvInitialiseTaskLists+0x68>)
 800fc18:	601a      	str	r2, [r3, #0]
}
 800fc1a:	bf00      	nop
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	24000f90 	.word	0x24000f90
 800fc28:	2400101c 	.word	0x2400101c
 800fc2c:	24001030 	.word	0x24001030
 800fc30:	2400104c 	.word	0x2400104c
 800fc34:	24001060 	.word	0x24001060
 800fc38:	24001078 	.word	0x24001078
 800fc3c:	24001044 	.word	0x24001044
 800fc40:	24001048 	.word	0x24001048

0800fc44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc4a:	e019      	b.n	800fc80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc4c:	f000 fbca 	bl	80103e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc50:	4b10      	ldr	r3, [pc, #64]	; (800fc94 <prvCheckTasksWaitingTermination+0x50>)
 800fc52:	68db      	ldr	r3, [r3, #12]
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3304      	adds	r3, #4
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fe fd05 	bl	800e66c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fc62:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <prvCheckTasksWaitingTermination+0x54>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	4a0b      	ldr	r2, [pc, #44]	; (800fc98 <prvCheckTasksWaitingTermination+0x54>)
 800fc6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fc6c:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <prvCheckTasksWaitingTermination+0x58>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	4a0a      	ldr	r2, [pc, #40]	; (800fc9c <prvCheckTasksWaitingTermination+0x58>)
 800fc74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc76:	f000 fbe5 	bl	8010444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f810 	bl	800fca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc80:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <prvCheckTasksWaitingTermination+0x58>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1e1      	bne.n	800fc4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc88:	bf00      	nop
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	24001060 	.word	0x24001060
 800fc98:	2400108c 	.word	0x2400108c
 800fc9c:	24001074 	.word	0x24001074

0800fca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d108      	bne.n	800fcc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f000 fd82 	bl	80107c0 <vPortFree>
				vPortFree( pxTCB );
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f000 fd7f 	bl	80107c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fcc2:	e018      	b.n	800fcf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d103      	bne.n	800fcd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fd76 	bl	80107c0 <vPortFree>
	}
 800fcd4:	e00f      	b.n	800fcf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d00a      	beq.n	800fcf6 <prvDeleteTCB+0x56>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	60fb      	str	r3, [r7, #12]
}
 800fcf2:	bf00      	nop
 800fcf4:	e7fe      	b.n	800fcf4 <prvDeleteTCB+0x54>
	}
 800fcf6:	bf00      	nop
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
	...

0800fd00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <prvResetNextTaskUnblockTime+0x38>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d104      	bne.n	800fd1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd10:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <prvResetNextTaskUnblockTime+0x3c>)
 800fd12:	f04f 32ff 	mov.w	r2, #4294967295
 800fd16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fd18:	e008      	b.n	800fd2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd1a:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <prvResetNextTaskUnblockTime+0x38>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	4a04      	ldr	r2, [pc, #16]	; (800fd3c <prvResetNextTaskUnblockTime+0x3c>)
 800fd2a:	6013      	str	r3, [r2, #0]
}
 800fd2c:	bf00      	nop
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	24001044 	.word	0x24001044
 800fd3c:	240010ac 	.word	0x240010ac

0800fd40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fd46:	4b0b      	ldr	r3, [pc, #44]	; (800fd74 <xTaskGetSchedulerState+0x34>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	607b      	str	r3, [r7, #4]
 800fd52:	e008      	b.n	800fd66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd54:	4b08      	ldr	r3, [pc, #32]	; (800fd78 <xTaskGetSchedulerState+0x38>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d102      	bne.n	800fd62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	607b      	str	r3, [r7, #4]
 800fd60:	e001      	b.n	800fd66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fd62:	2300      	movs	r3, #0
 800fd64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fd66:	687b      	ldr	r3, [r7, #4]
	}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr
 800fd74:	24001098 	.word	0x24001098
 800fd78:	240010b4 	.word	0x240010b4

0800fd7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d05e      	beq.n	800fe50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd96:	4b31      	ldr	r3, [pc, #196]	; (800fe5c <xTaskPriorityInherit+0xe0>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d24e      	bcs.n	800fe3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	699b      	ldr	r3, [r3, #24]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	db06      	blt.n	800fdb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fda8:	4b2c      	ldr	r3, [pc, #176]	; (800fe5c <xTaskPriorityInherit+0xe0>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdae:	f1c3 0207 	rsb	r2, r3, #7
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	6959      	ldr	r1, [r3, #20]
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4a26      	ldr	r2, [pc, #152]	; (800fe60 <xTaskPriorityInherit+0xe4>)
 800fdc8:	4413      	add	r3, r2
 800fdca:	4299      	cmp	r1, r3
 800fdcc:	d12f      	bne.n	800fe2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fc4a 	bl	800e66c <uxListRemove>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10a      	bne.n	800fdf4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde2:	2201      	movs	r2, #1
 800fde4:	fa02 f303 	lsl.w	r3, r2, r3
 800fde8:	43da      	mvns	r2, r3
 800fdea:	4b1e      	ldr	r3, [pc, #120]	; (800fe64 <xTaskPriorityInherit+0xe8>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4013      	ands	r3, r2
 800fdf0:	4a1c      	ldr	r2, [pc, #112]	; (800fe64 <xTaskPriorityInherit+0xe8>)
 800fdf2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fdf4:	4b19      	ldr	r3, [pc, #100]	; (800fe5c <xTaskPriorityInherit+0xe0>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe02:	2201      	movs	r2, #1
 800fe04:	409a      	lsls	r2, r3
 800fe06:	4b17      	ldr	r3, [pc, #92]	; (800fe64 <xTaskPriorityInherit+0xe8>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	4a15      	ldr	r2, [pc, #84]	; (800fe64 <xTaskPriorityInherit+0xe8>)
 800fe0e:	6013      	str	r3, [r2, #0]
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe14:	4613      	mov	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4413      	add	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4a10      	ldr	r2, [pc, #64]	; (800fe60 <xTaskPriorityInherit+0xe4>)
 800fe1e:	441a      	add	r2, r3
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	3304      	adds	r3, #4
 800fe24:	4619      	mov	r1, r3
 800fe26:	4610      	mov	r0, r2
 800fe28:	f7fe fbc3 	bl	800e5b2 <vListInsertEnd>
 800fe2c:	e004      	b.n	800fe38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe2e:	4b0b      	ldr	r3, [pc, #44]	; (800fe5c <xTaskPriorityInherit+0xe0>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	60fb      	str	r3, [r7, #12]
 800fe3c:	e008      	b.n	800fe50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe42:	4b06      	ldr	r3, [pc, #24]	; (800fe5c <xTaskPriorityInherit+0xe0>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d201      	bcs.n	800fe50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe50:	68fb      	ldr	r3, [r7, #12]
	}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	24000f8c 	.word	0x24000f8c
 800fe60:	24000f90 	.word	0x24000f90
 800fe64:	24001094 	.word	0x24001094

0800fe68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe74:	2300      	movs	r3, #0
 800fe76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d06e      	beq.n	800ff5c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe7e:	4b3a      	ldr	r3, [pc, #232]	; (800ff68 <xTaskPriorityDisinherit+0x100>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	693a      	ldr	r2, [r7, #16]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d00a      	beq.n	800fe9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	60fb      	str	r3, [r7, #12]
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10a      	bne.n	800febc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	60bb      	str	r3, [r7, #8]
}
 800feb8:	bf00      	nop
 800feba:	e7fe      	b.n	800feba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fec0:	1e5a      	subs	r2, r3, #1
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fece:	429a      	cmp	r2, r3
 800fed0:	d044      	beq.n	800ff5c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d140      	bne.n	800ff5c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	3304      	adds	r3, #4
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fbc4 	bl	800e66c <uxListRemove>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d115      	bne.n	800ff16 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800feee:	491f      	ldr	r1, [pc, #124]	; (800ff6c <xTaskPriorityDisinherit+0x104>)
 800fef0:	4613      	mov	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4413      	add	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	440b      	add	r3, r1
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10a      	bne.n	800ff16 <xTaskPriorityDisinherit+0xae>
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff04:	2201      	movs	r2, #1
 800ff06:	fa02 f303 	lsl.w	r3, r2, r3
 800ff0a:	43da      	mvns	r2, r3
 800ff0c:	4b18      	ldr	r3, [pc, #96]	; (800ff70 <xTaskPriorityDisinherit+0x108>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4013      	ands	r3, r2
 800ff12:	4a17      	ldr	r2, [pc, #92]	; (800ff70 <xTaskPriorityDisinherit+0x108>)
 800ff14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff22:	f1c3 0207 	rsb	r2, r3, #7
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2e:	2201      	movs	r2, #1
 800ff30:	409a      	lsls	r2, r3
 800ff32:	4b0f      	ldr	r3, [pc, #60]	; (800ff70 <xTaskPriorityDisinherit+0x108>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	4a0d      	ldr	r2, [pc, #52]	; (800ff70 <xTaskPriorityDisinherit+0x108>)
 800ff3a:	6013      	str	r3, [r2, #0]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff40:	4613      	mov	r3, r2
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	4413      	add	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	4a08      	ldr	r2, [pc, #32]	; (800ff6c <xTaskPriorityDisinherit+0x104>)
 800ff4a:	441a      	add	r2, r3
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	3304      	adds	r3, #4
 800ff50:	4619      	mov	r1, r3
 800ff52:	4610      	mov	r0, r2
 800ff54:	f7fe fb2d 	bl	800e5b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff58:	2301      	movs	r3, #1
 800ff5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff5c:	697b      	ldr	r3, [r7, #20]
	}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3718      	adds	r7, #24
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	24000f8c 	.word	0x24000f8c
 800ff6c:	24000f90 	.word	0x24000f90
 800ff70:	24001094 	.word	0x24001094

0800ff74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ff82:	2301      	movs	r3, #1
 800ff84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d077      	beq.n	801007c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d10a      	bne.n	800ffaa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ff94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	60fb      	str	r3, [r7, #12]
}
 800ffa6:	bf00      	nop
 800ffa8:	e7fe      	b.n	800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d902      	bls.n	800ffba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	61fb      	str	r3, [r7, #28]
 800ffb8:	e002      	b.n	800ffc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffbe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc4:	69fa      	ldr	r2, [r7, #28]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d058      	beq.n	801007c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ffca:	69bb      	ldr	r3, [r7, #24]
 800ffcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d153      	bne.n	801007c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ffd4:	4b2b      	ldr	r3, [pc, #172]	; (8010084 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	69ba      	ldr	r2, [r7, #24]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d10a      	bne.n	800fff4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ffde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe2:	f383 8811 	msr	BASEPRI, r3
 800ffe6:	f3bf 8f6f 	isb	sy
 800ffea:	f3bf 8f4f 	dsb	sy
 800ffee:	60bb      	str	r3, [r7, #8]
}
 800fff0:	bf00      	nop
 800fff2:	e7fe      	b.n	800fff2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fffa:	69bb      	ldr	r3, [r7, #24]
 800fffc:	69fa      	ldr	r2, [r7, #28]
 800fffe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	699b      	ldr	r3, [r3, #24]
 8010004:	2b00      	cmp	r3, #0
 8010006:	db04      	blt.n	8010012 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	f1c3 0207 	rsb	r2, r3, #7
 801000e:	69bb      	ldr	r3, [r7, #24]
 8010010:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	6959      	ldr	r1, [r3, #20]
 8010016:	693a      	ldr	r2, [r7, #16]
 8010018:	4613      	mov	r3, r2
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4a19      	ldr	r2, [pc, #100]	; (8010088 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010022:	4413      	add	r3, r2
 8010024:	4299      	cmp	r1, r3
 8010026:	d129      	bne.n	801007c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	3304      	adds	r3, #4
 801002c:	4618      	mov	r0, r3
 801002e:	f7fe fb1d 	bl	800e66c <uxListRemove>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10a      	bne.n	801004e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	2201      	movs	r2, #1
 801003e:	fa02 f303 	lsl.w	r3, r2, r3
 8010042:	43da      	mvns	r2, r3
 8010044:	4b11      	ldr	r3, [pc, #68]	; (801008c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4013      	ands	r3, r2
 801004a:	4a10      	ldr	r2, [pc, #64]	; (801008c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801004c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801004e:	69bb      	ldr	r3, [r7, #24]
 8010050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010052:	2201      	movs	r2, #1
 8010054:	409a      	lsls	r2, r3
 8010056:	4b0d      	ldr	r3, [pc, #52]	; (801008c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4313      	orrs	r3, r2
 801005c:	4a0b      	ldr	r2, [pc, #44]	; (801008c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801005e:	6013      	str	r3, [r2, #0]
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010064:	4613      	mov	r3, r2
 8010066:	009b      	lsls	r3, r3, #2
 8010068:	4413      	add	r3, r2
 801006a:	009b      	lsls	r3, r3, #2
 801006c:	4a06      	ldr	r2, [pc, #24]	; (8010088 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801006e:	441a      	add	r2, r3
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	3304      	adds	r3, #4
 8010074:	4619      	mov	r1, r3
 8010076:	4610      	mov	r0, r2
 8010078:	f7fe fa9b 	bl	800e5b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801007c:	bf00      	nop
 801007e:	3720      	adds	r7, #32
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	24000f8c 	.word	0x24000f8c
 8010088:	24000f90 	.word	0x24000f90
 801008c:	24001094 	.word	0x24001094

08010090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010090:	b480      	push	{r7}
 8010092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010094:	4b07      	ldr	r3, [pc, #28]	; (80100b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d004      	beq.n	80100a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801009c:	4b05      	ldr	r3, [pc, #20]	; (80100b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80100a2:	3201      	adds	r2, #1
 80100a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80100a6:	4b03      	ldr	r3, [pc, #12]	; (80100b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80100a8:	681b      	ldr	r3, [r3, #0]
	}
 80100aa:	4618      	mov	r0, r3
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	24000f8c 	.word	0x24000f8c

080100b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80100c2:	4b29      	ldr	r3, [pc, #164]	; (8010168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100c8:	4b28      	ldr	r3, [pc, #160]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	3304      	adds	r3, #4
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe facc 	bl	800e66c <uxListRemove>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10b      	bne.n	80100f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80100da:	4b24      	ldr	r3, [pc, #144]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e0:	2201      	movs	r2, #1
 80100e2:	fa02 f303 	lsl.w	r3, r2, r3
 80100e6:	43da      	mvns	r2, r3
 80100e8:	4b21      	ldr	r3, [pc, #132]	; (8010170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4013      	ands	r3, r2
 80100ee:	4a20      	ldr	r2, [pc, #128]	; (8010170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80100f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f8:	d10a      	bne.n	8010110 <prvAddCurrentTaskToDelayedList+0x58>
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d007      	beq.n	8010110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010100:	4b1a      	ldr	r3, [pc, #104]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	3304      	adds	r3, #4
 8010106:	4619      	mov	r1, r3
 8010108:	481a      	ldr	r0, [pc, #104]	; (8010174 <prvAddCurrentTaskToDelayedList+0xbc>)
 801010a:	f7fe fa52 	bl	800e5b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801010e:	e026      	b.n	801015e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4413      	add	r3, r2
 8010116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010118:	4b14      	ldr	r3, [pc, #80]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010120:	68ba      	ldr	r2, [r7, #8]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	429a      	cmp	r2, r3
 8010126:	d209      	bcs.n	801013c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010128:	4b13      	ldr	r3, [pc, #76]	; (8010178 <prvAddCurrentTaskToDelayedList+0xc0>)
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	4b0f      	ldr	r3, [pc, #60]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3304      	adds	r3, #4
 8010132:	4619      	mov	r1, r3
 8010134:	4610      	mov	r0, r2
 8010136:	f7fe fa60 	bl	800e5fa <vListInsert>
}
 801013a:	e010      	b.n	801015e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801013c:	4b0f      	ldr	r3, [pc, #60]	; (801017c <prvAddCurrentTaskToDelayedList+0xc4>)
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	4b0a      	ldr	r3, [pc, #40]	; (801016c <prvAddCurrentTaskToDelayedList+0xb4>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	3304      	adds	r3, #4
 8010146:	4619      	mov	r1, r3
 8010148:	4610      	mov	r0, r2
 801014a:	f7fe fa56 	bl	800e5fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801014e:	4b0c      	ldr	r3, [pc, #48]	; (8010180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68ba      	ldr	r2, [r7, #8]
 8010154:	429a      	cmp	r2, r3
 8010156:	d202      	bcs.n	801015e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010158:	4a09      	ldr	r2, [pc, #36]	; (8010180 <prvAddCurrentTaskToDelayedList+0xc8>)
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	6013      	str	r3, [r2, #0]
}
 801015e:	bf00      	nop
 8010160:	3710      	adds	r7, #16
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	24001090 	.word	0x24001090
 801016c:	24000f8c 	.word	0x24000f8c
 8010170:	24001094 	.word	0x24001094
 8010174:	24001078 	.word	0x24001078
 8010178:	24001048 	.word	0x24001048
 801017c:	24001044 	.word	0x24001044
 8010180:	240010ac 	.word	0x240010ac

08010184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	60f8      	str	r0, [r7, #12]
 801018c:	60b9      	str	r1, [r7, #8]
 801018e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	3b04      	subs	r3, #4
 8010194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801019c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3b04      	subs	r3, #4
 80101a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	f023 0201 	bic.w	r2, r3, #1
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3b04      	subs	r3, #4
 80101b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80101b4:	4a0c      	ldr	r2, [pc, #48]	; (80101e8 <pxPortInitialiseStack+0x64>)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	3b14      	subs	r3, #20
 80101be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	3b04      	subs	r3, #4
 80101ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f06f 0202 	mvn.w	r2, #2
 80101d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3b20      	subs	r3, #32
 80101d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80101da:	68fb      	ldr	r3, [r7, #12]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	080101ed 	.word	0x080101ed

080101ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101f6:	4b12      	ldr	r3, [pc, #72]	; (8010240 <prvTaskExitError+0x54>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fe:	d00a      	beq.n	8010216 <prvTaskExitError+0x2a>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	60fb      	str	r3, [r7, #12]
}
 8010212:	bf00      	nop
 8010214:	e7fe      	b.n	8010214 <prvTaskExitError+0x28>
	__asm volatile
 8010216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	60bb      	str	r3, [r7, #8]
}
 8010228:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801022a:	bf00      	nop
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0fc      	beq.n	801022c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010232:	bf00      	nop
 8010234:	bf00      	nop
 8010236:	3714      	adds	r7, #20
 8010238:	46bd      	mov	sp, r7
 801023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023e:	4770      	bx	lr
 8010240:	24000078 	.word	0x24000078
	...

08010250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010250:	4b07      	ldr	r3, [pc, #28]	; (8010270 <pxCurrentTCBConst2>)
 8010252:	6819      	ldr	r1, [r3, #0]
 8010254:	6808      	ldr	r0, [r1, #0]
 8010256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025a:	f380 8809 	msr	PSP, r0
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f04f 0000 	mov.w	r0, #0
 8010266:	f380 8811 	msr	BASEPRI, r0
 801026a:	4770      	bx	lr
 801026c:	f3af 8000 	nop.w

08010270 <pxCurrentTCBConst2>:
 8010270:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010274:	bf00      	nop
 8010276:	bf00      	nop

08010278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010278:	4808      	ldr	r0, [pc, #32]	; (801029c <prvPortStartFirstTask+0x24>)
 801027a:	6800      	ldr	r0, [r0, #0]
 801027c:	6800      	ldr	r0, [r0, #0]
 801027e:	f380 8808 	msr	MSP, r0
 8010282:	f04f 0000 	mov.w	r0, #0
 8010286:	f380 8814 	msr	CONTROL, r0
 801028a:	b662      	cpsie	i
 801028c:	b661      	cpsie	f
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	df00      	svc	0
 8010298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801029a:	bf00      	nop
 801029c:	e000ed08 	.word	0xe000ed08

080102a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80102a6:	4b46      	ldr	r3, [pc, #280]	; (80103c0 <xPortStartScheduler+0x120>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4a46      	ldr	r2, [pc, #280]	; (80103c4 <xPortStartScheduler+0x124>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d10a      	bne.n	80102c6 <xPortStartScheduler+0x26>
	__asm volatile
 80102b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b4:	f383 8811 	msr	BASEPRI, r3
 80102b8:	f3bf 8f6f 	isb	sy
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	613b      	str	r3, [r7, #16]
}
 80102c2:	bf00      	nop
 80102c4:	e7fe      	b.n	80102c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80102c6:	4b3e      	ldr	r3, [pc, #248]	; (80103c0 <xPortStartScheduler+0x120>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a3f      	ldr	r2, [pc, #252]	; (80103c8 <xPortStartScheduler+0x128>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d10a      	bne.n	80102e6 <xPortStartScheduler+0x46>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	60fb      	str	r3, [r7, #12]
}
 80102e2:	bf00      	nop
 80102e4:	e7fe      	b.n	80102e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80102e6:	4b39      	ldr	r3, [pc, #228]	; (80103cc <xPortStartScheduler+0x12c>)
 80102e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	22ff      	movs	r2, #255	; 0xff
 80102f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010300:	78fb      	ldrb	r3, [r7, #3]
 8010302:	b2db      	uxtb	r3, r3
 8010304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010308:	b2da      	uxtb	r2, r3
 801030a:	4b31      	ldr	r3, [pc, #196]	; (80103d0 <xPortStartScheduler+0x130>)
 801030c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801030e:	4b31      	ldr	r3, [pc, #196]	; (80103d4 <xPortStartScheduler+0x134>)
 8010310:	2207      	movs	r2, #7
 8010312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010314:	e009      	b.n	801032a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010316:	4b2f      	ldr	r3, [pc, #188]	; (80103d4 <xPortStartScheduler+0x134>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3b01      	subs	r3, #1
 801031c:	4a2d      	ldr	r2, [pc, #180]	; (80103d4 <xPortStartScheduler+0x134>)
 801031e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	b2db      	uxtb	r3, r3
 8010324:	005b      	lsls	r3, r3, #1
 8010326:	b2db      	uxtb	r3, r3
 8010328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801032a:	78fb      	ldrb	r3, [r7, #3]
 801032c:	b2db      	uxtb	r3, r3
 801032e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010332:	2b80      	cmp	r3, #128	; 0x80
 8010334:	d0ef      	beq.n	8010316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010336:	4b27      	ldr	r3, [pc, #156]	; (80103d4 <xPortStartScheduler+0x134>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f1c3 0307 	rsb	r3, r3, #7
 801033e:	2b04      	cmp	r3, #4
 8010340:	d00a      	beq.n	8010358 <xPortStartScheduler+0xb8>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	60bb      	str	r3, [r7, #8]
}
 8010354:	bf00      	nop
 8010356:	e7fe      	b.n	8010356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010358:	4b1e      	ldr	r3, [pc, #120]	; (80103d4 <xPortStartScheduler+0x134>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	021b      	lsls	r3, r3, #8
 801035e:	4a1d      	ldr	r2, [pc, #116]	; (80103d4 <xPortStartScheduler+0x134>)
 8010360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010362:	4b1c      	ldr	r3, [pc, #112]	; (80103d4 <xPortStartScheduler+0x134>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801036a:	4a1a      	ldr	r2, [pc, #104]	; (80103d4 <xPortStartScheduler+0x134>)
 801036c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	b2da      	uxtb	r2, r3
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010376:	4b18      	ldr	r3, [pc, #96]	; (80103d8 <xPortStartScheduler+0x138>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a17      	ldr	r2, [pc, #92]	; (80103d8 <xPortStartScheduler+0x138>)
 801037c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010382:	4b15      	ldr	r3, [pc, #84]	; (80103d8 <xPortStartScheduler+0x138>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a14      	ldr	r2, [pc, #80]	; (80103d8 <xPortStartScheduler+0x138>)
 8010388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801038c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801038e:	f000 f8dd 	bl	801054c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010392:	4b12      	ldr	r3, [pc, #72]	; (80103dc <xPortStartScheduler+0x13c>)
 8010394:	2200      	movs	r2, #0
 8010396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010398:	f000 f8fc 	bl	8010594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801039c:	4b10      	ldr	r3, [pc, #64]	; (80103e0 <xPortStartScheduler+0x140>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a0f      	ldr	r2, [pc, #60]	; (80103e0 <xPortStartScheduler+0x140>)
 80103a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80103a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80103a8:	f7ff ff66 	bl	8010278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80103ac:	f7ff fa8c 	bl	800f8c8 <vTaskSwitchContext>
	prvTaskExitError();
 80103b0:	f7ff ff1c 	bl	80101ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80103b4:	2300      	movs	r3, #0
}
 80103b6:	4618      	mov	r0, r3
 80103b8:	3718      	adds	r7, #24
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	e000ed00 	.word	0xe000ed00
 80103c4:	410fc271 	.word	0x410fc271
 80103c8:	410fc270 	.word	0x410fc270
 80103cc:	e000e400 	.word	0xe000e400
 80103d0:	240010b8 	.word	0x240010b8
 80103d4:	240010bc 	.word	0x240010bc
 80103d8:	e000ed20 	.word	0xe000ed20
 80103dc:	24000078 	.word	0x24000078
 80103e0:	e000ef34 	.word	0xe000ef34

080103e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	607b      	str	r3, [r7, #4]
}
 80103fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103fe:	4b0f      	ldr	r3, [pc, #60]	; (801043c <vPortEnterCritical+0x58>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3301      	adds	r3, #1
 8010404:	4a0d      	ldr	r2, [pc, #52]	; (801043c <vPortEnterCritical+0x58>)
 8010406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010408:	4b0c      	ldr	r3, [pc, #48]	; (801043c <vPortEnterCritical+0x58>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d10f      	bne.n	8010430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010410:	4b0b      	ldr	r3, [pc, #44]	; (8010440 <vPortEnterCritical+0x5c>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	b2db      	uxtb	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00a      	beq.n	8010430 <vPortEnterCritical+0x4c>
	__asm volatile
 801041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041e:	f383 8811 	msr	BASEPRI, r3
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	603b      	str	r3, [r7, #0]
}
 801042c:	bf00      	nop
 801042e:	e7fe      	b.n	801042e <vPortEnterCritical+0x4a>
	}
}
 8010430:	bf00      	nop
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr
 801043c:	24000078 	.word	0x24000078
 8010440:	e000ed04 	.word	0xe000ed04

08010444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801044a:	4b12      	ldr	r3, [pc, #72]	; (8010494 <vPortExitCritical+0x50>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10a      	bne.n	8010468 <vPortExitCritical+0x24>
	__asm volatile
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	607b      	str	r3, [r7, #4]
}
 8010464:	bf00      	nop
 8010466:	e7fe      	b.n	8010466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010468:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <vPortExitCritical+0x50>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	3b01      	subs	r3, #1
 801046e:	4a09      	ldr	r2, [pc, #36]	; (8010494 <vPortExitCritical+0x50>)
 8010470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010472:	4b08      	ldr	r3, [pc, #32]	; (8010494 <vPortExitCritical+0x50>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d105      	bne.n	8010486 <vPortExitCritical+0x42>
 801047a:	2300      	movs	r3, #0
 801047c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	f383 8811 	msr	BASEPRI, r3
}
 8010484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010486:	bf00      	nop
 8010488:	370c      	adds	r7, #12
 801048a:	46bd      	mov	sp, r7
 801048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010490:	4770      	bx	lr
 8010492:	bf00      	nop
 8010494:	24000078 	.word	0x24000078
	...

080104a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80104a0:	f3ef 8009 	mrs	r0, PSP
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	4b15      	ldr	r3, [pc, #84]	; (8010500 <pxCurrentTCBConst>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	f01e 0f10 	tst.w	lr, #16
 80104b0:	bf08      	it	eq
 80104b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80104b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ba:	6010      	str	r0, [r2, #0]
 80104bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80104c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80104c4:	f380 8811 	msr	BASEPRI, r0
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	f7ff f9fa 	bl	800f8c8 <vTaskSwitchContext>
 80104d4:	f04f 0000 	mov.w	r0, #0
 80104d8:	f380 8811 	msr	BASEPRI, r0
 80104dc:	bc09      	pop	{r0, r3}
 80104de:	6819      	ldr	r1, [r3, #0]
 80104e0:	6808      	ldr	r0, [r1, #0]
 80104e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e6:	f01e 0f10 	tst.w	lr, #16
 80104ea:	bf08      	it	eq
 80104ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104f0:	f380 8809 	msr	PSP, r0
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	f3af 8000 	nop.w

08010500 <pxCurrentTCBConst>:
 8010500:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010504:	bf00      	nop
 8010506:	bf00      	nop

08010508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
	__asm volatile
 801050e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010512:	f383 8811 	msr	BASEPRI, r3
 8010516:	f3bf 8f6f 	isb	sy
 801051a:	f3bf 8f4f 	dsb	sy
 801051e:	607b      	str	r3, [r7, #4]
}
 8010520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010522:	f7ff f919 	bl	800f758 <xTaskIncrementTick>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d003      	beq.n	8010534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801052c:	4b06      	ldr	r3, [pc, #24]	; (8010548 <SysTick_Handler+0x40>)
 801052e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	2300      	movs	r3, #0
 8010536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	f383 8811 	msr	BASEPRI, r3
}
 801053e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	e000ed04 	.word	0xe000ed04

0801054c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010550:	4b0b      	ldr	r3, [pc, #44]	; (8010580 <vPortSetupTimerInterrupt+0x34>)
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010556:	4b0b      	ldr	r3, [pc, #44]	; (8010584 <vPortSetupTimerInterrupt+0x38>)
 8010558:	2200      	movs	r2, #0
 801055a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801055c:	4b0a      	ldr	r3, [pc, #40]	; (8010588 <vPortSetupTimerInterrupt+0x3c>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a0a      	ldr	r2, [pc, #40]	; (801058c <vPortSetupTimerInterrupt+0x40>)
 8010562:	fba2 2303 	umull	r2, r3, r2, r3
 8010566:	099b      	lsrs	r3, r3, #6
 8010568:	4a09      	ldr	r2, [pc, #36]	; (8010590 <vPortSetupTimerInterrupt+0x44>)
 801056a:	3b01      	subs	r3, #1
 801056c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801056e:	4b04      	ldr	r3, [pc, #16]	; (8010580 <vPortSetupTimerInterrupt+0x34>)
 8010570:	2207      	movs	r2, #7
 8010572:	601a      	str	r2, [r3, #0]
}
 8010574:	bf00      	nop
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	e000e010 	.word	0xe000e010
 8010584:	e000e018 	.word	0xe000e018
 8010588:	24000004 	.word	0x24000004
 801058c:	10624dd3 	.word	0x10624dd3
 8010590:	e000e014 	.word	0xe000e014

08010594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80105a4 <vPortEnableVFP+0x10>
 8010598:	6801      	ldr	r1, [r0, #0]
 801059a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801059e:	6001      	str	r1, [r0, #0]
 80105a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80105a2:	bf00      	nop
 80105a4:	e000ed88 	.word	0xe000ed88

080105a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80105ae:	f3ef 8305 	mrs	r3, IPSR
 80105b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b0f      	cmp	r3, #15
 80105b8:	d914      	bls.n	80105e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80105ba:	4a17      	ldr	r2, [pc, #92]	; (8010618 <vPortValidateInterruptPriority+0x70>)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4413      	add	r3, r2
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80105c4:	4b15      	ldr	r3, [pc, #84]	; (801061c <vPortValidateInterruptPriority+0x74>)
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	7afa      	ldrb	r2, [r7, #11]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d20a      	bcs.n	80105e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80105ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d2:	f383 8811 	msr	BASEPRI, r3
 80105d6:	f3bf 8f6f 	isb	sy
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	607b      	str	r3, [r7, #4]
}
 80105e0:	bf00      	nop
 80105e2:	e7fe      	b.n	80105e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80105e4:	4b0e      	ldr	r3, [pc, #56]	; (8010620 <vPortValidateInterruptPriority+0x78>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80105ec:	4b0d      	ldr	r3, [pc, #52]	; (8010624 <vPortValidateInterruptPriority+0x7c>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d90a      	bls.n	801060a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	603b      	str	r3, [r7, #0]
}
 8010606:	bf00      	nop
 8010608:	e7fe      	b.n	8010608 <vPortValidateInterruptPriority+0x60>
	}
 801060a:	bf00      	nop
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010614:	4770      	bx	lr
 8010616:	bf00      	nop
 8010618:	e000e3f0 	.word	0xe000e3f0
 801061c:	240010b8 	.word	0x240010b8
 8010620:	e000ed0c 	.word	0xe000ed0c
 8010624:	240010bc 	.word	0x240010bc

08010628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	; 0x28
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010630:	2300      	movs	r3, #0
 8010632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010634:	f7fe ffe6 	bl	800f604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010638:	4b5b      	ldr	r3, [pc, #364]	; (80107a8 <pvPortMalloc+0x180>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010640:	f000 f920 	bl	8010884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010644:	4b59      	ldr	r3, [pc, #356]	; (80107ac <pvPortMalloc+0x184>)
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	4013      	ands	r3, r2
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 8093 	bne.w	8010778 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d01d      	beq.n	8010694 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010658:	2208      	movs	r2, #8
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4413      	add	r3, r2
 801065e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f003 0307 	and.w	r3, r3, #7
 8010666:	2b00      	cmp	r3, #0
 8010668:	d014      	beq.n	8010694 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f023 0307 	bic.w	r3, r3, #7
 8010670:	3308      	adds	r3, #8
 8010672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	f003 0307 	and.w	r3, r3, #7
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00a      	beq.n	8010694 <pvPortMalloc+0x6c>
	__asm volatile
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	617b      	str	r3, [r7, #20]
}
 8010690:	bf00      	nop
 8010692:	e7fe      	b.n	8010692 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d06e      	beq.n	8010778 <pvPortMalloc+0x150>
 801069a:	4b45      	ldr	r3, [pc, #276]	; (80107b0 <pvPortMalloc+0x188>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d869      	bhi.n	8010778 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80106a4:	4b43      	ldr	r3, [pc, #268]	; (80107b4 <pvPortMalloc+0x18c>)
 80106a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80106a8:	4b42      	ldr	r3, [pc, #264]	; (80107b4 <pvPortMalloc+0x18c>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106ae:	e004      	b.n	80106ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80106b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80106ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d903      	bls.n	80106cc <pvPortMalloc+0xa4>
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f1      	bne.n	80106b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80106cc:	4b36      	ldr	r3, [pc, #216]	; (80107a8 <pvPortMalloc+0x180>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d2:	429a      	cmp	r2, r3
 80106d4:	d050      	beq.n	8010778 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2208      	movs	r2, #8
 80106dc:	4413      	add	r3, r2
 80106de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	6a3b      	ldr	r3, [r7, #32]
 80106e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	685a      	ldr	r2, [r3, #4]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	1ad2      	subs	r2, r2, r3
 80106f0:	2308      	movs	r3, #8
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d91f      	bls.n	8010738 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4413      	add	r3, r2
 80106fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	f003 0307 	and.w	r3, r3, #7
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00a      	beq.n	8010720 <pvPortMalloc+0xf8>
	__asm volatile
 801070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070e:	f383 8811 	msr	BASEPRI, r3
 8010712:	f3bf 8f6f 	isb	sy
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	613b      	str	r3, [r7, #16]
}
 801071c:	bf00      	nop
 801071e:	e7fe      	b.n	801071e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010722:	685a      	ldr	r2, [r3, #4]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	1ad2      	subs	r2, r2, r3
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010732:	69b8      	ldr	r0, [r7, #24]
 8010734:	f000 f908 	bl	8010948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010738:	4b1d      	ldr	r3, [pc, #116]	; (80107b0 <pvPortMalloc+0x188>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	4a1b      	ldr	r2, [pc, #108]	; (80107b0 <pvPortMalloc+0x188>)
 8010744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010746:	4b1a      	ldr	r3, [pc, #104]	; (80107b0 <pvPortMalloc+0x188>)
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	4b1b      	ldr	r3, [pc, #108]	; (80107b8 <pvPortMalloc+0x190>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	429a      	cmp	r2, r3
 8010750:	d203      	bcs.n	801075a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010752:	4b17      	ldr	r3, [pc, #92]	; (80107b0 <pvPortMalloc+0x188>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4a18      	ldr	r2, [pc, #96]	; (80107b8 <pvPortMalloc+0x190>)
 8010758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	685a      	ldr	r2, [r3, #4]
 801075e:	4b13      	ldr	r3, [pc, #76]	; (80107ac <pvPortMalloc+0x184>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	431a      	orrs	r2, r3
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	2200      	movs	r2, #0
 801076c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801076e:	4b13      	ldr	r3, [pc, #76]	; (80107bc <pvPortMalloc+0x194>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3301      	adds	r3, #1
 8010774:	4a11      	ldr	r2, [pc, #68]	; (80107bc <pvPortMalloc+0x194>)
 8010776:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010778:	f7fe ff52 	bl	800f620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	f003 0307 	and.w	r3, r3, #7
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00a      	beq.n	801079c <pvPortMalloc+0x174>
	__asm volatile
 8010786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078a:	f383 8811 	msr	BASEPRI, r3
 801078e:	f3bf 8f6f 	isb	sy
 8010792:	f3bf 8f4f 	dsb	sy
 8010796:	60fb      	str	r3, [r7, #12]
}
 8010798:	bf00      	nop
 801079a:	e7fe      	b.n	801079a <pvPortMalloc+0x172>
	return pvReturn;
 801079c:	69fb      	ldr	r3, [r7, #28]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3728      	adds	r7, #40	; 0x28
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	24004cc8 	.word	0x24004cc8
 80107ac:	24004cdc 	.word	0x24004cdc
 80107b0:	24004ccc 	.word	0x24004ccc
 80107b4:	24004cc0 	.word	0x24004cc0
 80107b8:	24004cd0 	.word	0x24004cd0
 80107bc:	24004cd4 	.word	0x24004cd4

080107c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b086      	sub	sp, #24
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d04d      	beq.n	801086e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80107d2:	2308      	movs	r3, #8
 80107d4:	425b      	negs	r3, r3
 80107d6:	697a      	ldr	r2, [r7, #20]
 80107d8:	4413      	add	r3, r2
 80107da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	685a      	ldr	r2, [r3, #4]
 80107e4:	4b24      	ldr	r3, [pc, #144]	; (8010878 <vPortFree+0xb8>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4013      	ands	r3, r2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d10a      	bne.n	8010804 <vPortFree+0x44>
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f2:	f383 8811 	msr	BASEPRI, r3
 80107f6:	f3bf 8f6f 	isb	sy
 80107fa:	f3bf 8f4f 	dsb	sy
 80107fe:	60fb      	str	r3, [r7, #12]
}
 8010800:	bf00      	nop
 8010802:	e7fe      	b.n	8010802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00a      	beq.n	8010822 <vPortFree+0x62>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	60bb      	str	r3, [r7, #8]
}
 801081e:	bf00      	nop
 8010820:	e7fe      	b.n	8010820 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	685a      	ldr	r2, [r3, #4]
 8010826:	4b14      	ldr	r3, [pc, #80]	; (8010878 <vPortFree+0xb8>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4013      	ands	r3, r2
 801082c:	2b00      	cmp	r3, #0
 801082e:	d01e      	beq.n	801086e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d11a      	bne.n	801086e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	685a      	ldr	r2, [r3, #4]
 801083c:	4b0e      	ldr	r3, [pc, #56]	; (8010878 <vPortFree+0xb8>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	43db      	mvns	r3, r3
 8010842:	401a      	ands	r2, r3
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010848:	f7fe fedc 	bl	800f604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	4b0a      	ldr	r3, [pc, #40]	; (801087c <vPortFree+0xbc>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4413      	add	r3, r2
 8010856:	4a09      	ldr	r2, [pc, #36]	; (801087c <vPortFree+0xbc>)
 8010858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801085a:	6938      	ldr	r0, [r7, #16]
 801085c:	f000 f874 	bl	8010948 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010860:	4b07      	ldr	r3, [pc, #28]	; (8010880 <vPortFree+0xc0>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	3301      	adds	r3, #1
 8010866:	4a06      	ldr	r2, [pc, #24]	; (8010880 <vPortFree+0xc0>)
 8010868:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801086a:	f7fe fed9 	bl	800f620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801086e:	bf00      	nop
 8010870:	3718      	adds	r7, #24
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	24004cdc 	.word	0x24004cdc
 801087c:	24004ccc 	.word	0x24004ccc
 8010880:	24004cd8 	.word	0x24004cd8

08010884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801088a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801088e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010890:	4b27      	ldr	r3, [pc, #156]	; (8010930 <prvHeapInit+0xac>)
 8010892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f003 0307 	and.w	r3, r3, #7
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00c      	beq.n	80108b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	3307      	adds	r3, #7
 80108a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f023 0307 	bic.w	r3, r3, #7
 80108aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80108ac:	68ba      	ldr	r2, [r7, #8]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	4a1f      	ldr	r2, [pc, #124]	; (8010930 <prvHeapInit+0xac>)
 80108b4:	4413      	add	r3, r2
 80108b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80108bc:	4a1d      	ldr	r2, [pc, #116]	; (8010934 <prvHeapInit+0xb0>)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80108c2:	4b1c      	ldr	r3, [pc, #112]	; (8010934 <prvHeapInit+0xb0>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	4413      	add	r3, r2
 80108ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80108d0:	2208      	movs	r2, #8
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	1a9b      	subs	r3, r3, r2
 80108d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f023 0307 	bic.w	r3, r3, #7
 80108de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	4a15      	ldr	r2, [pc, #84]	; (8010938 <prvHeapInit+0xb4>)
 80108e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80108e6:	4b14      	ldr	r3, [pc, #80]	; (8010938 <prvHeapInit+0xb4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	2200      	movs	r2, #0
 80108ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80108ee:	4b12      	ldr	r3, [pc, #72]	; (8010938 <prvHeapInit+0xb4>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	1ad2      	subs	r2, r2, r3
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010904:	4b0c      	ldr	r3, [pc, #48]	; (8010938 <prvHeapInit+0xb4>)
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	4a0a      	ldr	r2, [pc, #40]	; (801093c <prvHeapInit+0xb8>)
 8010912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	4a09      	ldr	r2, [pc, #36]	; (8010940 <prvHeapInit+0xbc>)
 801091a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801091c:	4b09      	ldr	r3, [pc, #36]	; (8010944 <prvHeapInit+0xc0>)
 801091e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010922:	601a      	str	r2, [r3, #0]
}
 8010924:	bf00      	nop
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr
 8010930:	240010c0 	.word	0x240010c0
 8010934:	24004cc0 	.word	0x24004cc0
 8010938:	24004cc8 	.word	0x24004cc8
 801093c:	24004cd0 	.word	0x24004cd0
 8010940:	24004ccc 	.word	0x24004ccc
 8010944:	24004cdc 	.word	0x24004cdc

08010948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010950:	4b28      	ldr	r3, [pc, #160]	; (80109f4 <prvInsertBlockIntoFreeList+0xac>)
 8010952:	60fb      	str	r3, [r7, #12]
 8010954:	e002      	b.n	801095c <prvInsertBlockIntoFreeList+0x14>
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d8f7      	bhi.n	8010956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	68ba      	ldr	r2, [r7, #8]
 8010970:	4413      	add	r3, r2
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	429a      	cmp	r2, r3
 8010976:	d108      	bne.n	801098a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	685a      	ldr	r2, [r3, #4]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	441a      	add	r2, r3
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	441a      	add	r2, r3
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	429a      	cmp	r2, r3
 801099c:	d118      	bne.n	80109d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	4b15      	ldr	r3, [pc, #84]	; (80109f8 <prvInsertBlockIntoFreeList+0xb0>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d00d      	beq.n	80109c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	685a      	ldr	r2, [r3, #4]
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	441a      	add	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	681a      	ldr	r2, [r3, #0]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	601a      	str	r2, [r3, #0]
 80109c4:	e008      	b.n	80109d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109c6:	4b0c      	ldr	r3, [pc, #48]	; (80109f8 <prvInsertBlockIntoFreeList+0xb0>)
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	e003      	b.n	80109d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d002      	beq.n	80109e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109e6:	bf00      	nop
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	24004cc0 	.word	0x24004cc0
 80109f8:	24004cc8 	.word	0x24004cc8

080109fc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80109fc:	b480      	push	{r7}
 80109fe:	af00      	add	r7, sp, #0
}
 8010a00:	bf00      	nop
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr

08010a0a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8010a0e:	f006 fba7 	bl	8017160 <touchgfx_init>
}
 8010a12:	bf00      	nop
 8010a14:	bd80      	pop	{r7, pc}
	...

08010a18 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
    {
 8010a20:	4a04      	ldr	r2, [pc, #16]	; (8010a34 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	601a      	str	r2, [r3, #0]
    }
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr
 8010a34:	0802ecbc 	.word	0x0802ecbc

08010a38 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b082      	sub	sp, #8
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
    }
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff ffe9 	bl	8010a18 <_ZN8touchgfx12FontProviderD1Ev>
 8010a46:	2104      	movs	r1, #4
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f01b ffff 	bl	802ca4c <_ZdlPvj>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	460b      	mov	r3, r1
 8010a62:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010a64:	887b      	ldrh	r3, [r7, #2]
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d010      	beq.n	8010a8c <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8010a6a:	2b02      	cmp	r3, #2
 8010a6c:	dc13      	bgt.n	8010a96 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d005      	beq.n	8010a82 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8010a76:	e00e      	b.n	8010a96 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8010a78:	f004 fc98 	bl	80153ac <_ZN17TypedTextDatabase8getFontsEv>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	e00a      	b.n	8010a98 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8010a82:	f004 fc93 	bl	80153ac <_ZN17TypedTextDatabase8getFontsEv>
 8010a86:	4603      	mov	r3, r0
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	e005      	b.n	8010a98 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010a8c:	f004 fc8e 	bl	80153ac <_ZN17TypedTextDatabase8getFontsEv>
 8010a90:	4603      	mov	r3, r0
 8010a92:	689b      	ldr	r3, [r3, #8]
 8010a94:	e000      	b.n	8010a98 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8010a96:	2300      	movs	r3, #0
    }
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	4a05      	ldr	r2, [pc, #20]	; (8010ac0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	601a      	str	r2, [r3, #0]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7ff ffb1 	bl	8010a18 <_ZN8touchgfx12FontProviderD1Ev>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	0802eca8 	.word	0x0802eca8

08010ac4 <_ZN23ApplicationFontProviderD0Ev>:
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7ff ffe7 	bl	8010aa0 <_ZN23ApplicationFontProviderD1Ev>
 8010ad2:	2104      	movs	r1, #4
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f01b ffb9 	bl	802ca4c <_ZdlPvj>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
    {
 8010aec:	4a04      	ldr	r2, [pc, #16]	; (8010b00 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	601a      	str	r2, [r3, #0]
    }
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	0802f670 	.word	0x0802f670

08010b04 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
    }
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f7ff ffe9 	bl	8010ae4 <_ZN8touchgfx4FontD1Ev>
 8010b12:	2110      	movs	r1, #16
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f01b ff99 	bl	802ca4c <_ZdlPvj>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3708      	adds	r7, #8
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8010b24:	b590      	push	{r4, r7, lr}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8010b30:	887b      	ldrh	r3, [r7, #2]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d101      	bne.n	8010b3a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8010b36:	2300      	movs	r3, #0
 8010b38:	e010      	b.n	8010b5c <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3308      	adds	r3, #8
 8010b48:	681c      	ldr	r4, [r3, #0]
 8010b4a:	f107 030f 	add.w	r3, r7, #15
 8010b4e:	f107 0210 	add.w	r2, r7, #16
 8010b52:	8879      	ldrh	r1, [r7, #2]
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	47a0      	blx	r4
 8010b58:	6178      	str	r0, [r7, #20]
        return glyph;
 8010b5a:	697b      	ldr	r3, [r7, #20]
    }
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	371c      	adds	r7, #28
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}

08010b64 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	895b      	ldrh	r3, [r3, #10]
    }
 8010b70:	4618      	mov	r0, r3
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr

08010b7c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	899b      	ldrh	r3, [r3, #12]
    }
 8010b88:	4618      	mov	r0, r3
 8010b8a:	370c      	adds	r7, #12
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b92:	4770      	bx	lr

08010b94 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	889b      	ldrh	r3, [r3, #4]
    }
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	370c      	adds	r7, #12
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr

08010bac <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	889a      	ldrh	r2, [r3, #4]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	799b      	ldrb	r3, [r3, #6]
 8010bbc:	b29b      	uxth	r3, r3
 8010bbe:	4413      	add	r3, r2
 8010bc0:	b29b      	uxth	r3, r3
    }
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	370c      	adds	r7, #12
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr

08010bce <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8010bce:	b480      	push	{r7}
 8010bd0:	b083      	sub	sp, #12
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	79db      	ldrb	r3, [r3, #7]
 8010bda:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8010bde:	b2db      	uxtb	r3, r3
    }
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	79db      	ldrb	r3, [r3, #7]
 8010bf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010bfc:	b2db      	uxtb	r3, r3
    }
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
	...

08010c0c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	4a05      	ldr	r2, [pc, #20]	; (8010c2c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff ff61 	bl	8010ae4 <_ZN8touchgfx4FontD1Ev>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4618      	mov	r0, r3
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	08030848 	.word	0x08030848

08010c30 <_ZN8touchgfx9ConstFontD0Ev>:
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	f7ff ffe7 	bl	8010c0c <_ZN8touchgfx9ConstFontD1Ev>
 8010c3e:	2118      	movs	r1, #24
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f01b ff03 	bl	802ca4c <_ZdlPvj>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	4a05      	ldr	r2, [pc, #20]	; (8010c70 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff ffd3 	bl	8010c0c <_ZN8touchgfx9ConstFontD1Ev>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	0802ece0 	.word	0x0802ece0

08010c74 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7ff ffe7 	bl	8010c50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010c82:	2128      	movs	r1, #40	; 0x28
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f01b fee1 	bl	802ca4c <_ZdlPvj>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
    {
 8010c9c:	4a04      	ldr	r2, [pc, #16]	; (8010cb0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	601a      	str	r2, [r3, #0]
    }
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr
 8010cb0:	0802ecd0 	.word	0x0802ecd0

08010cb4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
    }
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ffe9 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
 8010cc2:	2108      	movs	r1, #8
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f01b fec1 	bl	802ca4c <_ZdlPvj>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a1b      	ldr	r3, [r3, #32]
    }
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr

08010cec <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr

08010d04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08c      	sub	sp, #48	; 0x30
 8010d08:	af08      	add	r7, sp, #32
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	4611      	mov	r1, r2
 8010d10:	461a      	mov	r2, r3
 8010d12:	460b      	mov	r3, r1
 8010d14:	80fb      	strh	r3, [r7, #6]
 8010d16:	4613      	mov	r3, r2
 8010d18:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	88b9      	ldrh	r1, [r7, #4]
 8010d1e:	88fa      	ldrh	r2, [r7, #6]
 8010d20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010d22:	9306      	str	r3, [sp, #24]
 8010d24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010d26:	9305      	str	r3, [sp, #20]
 8010d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d2c:	9304      	str	r3, [sp, #16]
 8010d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d32:	9303      	str	r3, [sp, #12]
 8010d34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d38:	9302      	str	r3, [sp, #8]
 8010d3a:	7f3b      	ldrb	r3, [r7, #28]
 8010d3c:	9301      	str	r3, [sp, #4]
 8010d3e:	7e3b      	ldrb	r3, [r7, #24]
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	460b      	mov	r3, r1
 8010d44:	68b9      	ldr	r1, [r7, #8]
 8010d46:	f00e fbbd 	bl	801f4c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8010d4a:	4a0a      	ldr	r2, [pc, #40]	; (8010d74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	601a      	str	r2, [r3, #0]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d54:	619a      	str	r2, [r3, #24]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d5a:	61da      	str	r2, [r3, #28]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d60:	621a      	str	r2, [r3, #32]
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d66:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	0802ece0 	.word	0x0802ece0

08010d78 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b085      	sub	sp, #20
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	889b      	ldrh	r3, [r3, #4]
 8010d8c:	0adb      	lsrs	r3, r3, #11
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	68fa      	ldr	r2, [r7, #12]
 8010d94:	4413      	add	r3, r2
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4413      	add	r3, r2
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3714      	adds	r7, #20
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr

08010daa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010daa:	b480      	push	{r7}
 8010dac:	b089      	sub	sp, #36	; 0x24
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	60f8      	str	r0, [r7, #12]
 8010db2:	460b      	mov	r3, r1
 8010db4:	607a      	str	r2, [r7, #4]
 8010db6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	7b1b      	ldrb	r3, [r3, #12]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d101      	bne.n	8010dca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	e030      	b.n	8010e2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	69da      	ldr	r2, [r3, #28]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	7b5b      	ldrb	r3, [r3, #13]
 8010dd6:	021b      	lsls	r3, r3, #8
 8010dd8:	b21b      	sxth	r3, r3
 8010dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010dde:	b219      	sxth	r1, r3
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	7adb      	ldrb	r3, [r3, #11]
 8010de4:	b21b      	sxth	r3, r3
 8010de6:	430b      	orrs	r3, r1
 8010de8:	b21b      	sxth	r3, r3
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	7b1b      	ldrb	r3, [r3, #12]
 8010df6:	837b      	strh	r3, [r7, #26]
 8010df8:	8b7b      	ldrh	r3, [r7, #26]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d015      	beq.n	8010e2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	897a      	ldrh	r2, [r7, #10]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d103      	bne.n	8010e10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8010e0e:	e00d      	b.n	8010e2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	897a      	ldrh	r2, [r7, #10]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d306      	bcc.n	8010e28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8010e1a:	8b7b      	ldrh	r3, [r7, #26]
 8010e1c:	3b01      	subs	r3, #1
 8010e1e:	837b      	strh	r3, [r7, #26]
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	3304      	adds	r3, #4
 8010e24:	61fb      	str	r3, [r7, #28]
 8010e26:	e7e7      	b.n	8010df8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8010e28:	bf00      	nop
        }
    }
    return 0;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3724      	adds	r7, #36	; 0x24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	4801      	ldr	r0, [pc, #4]	; (8010e44 <__tcf_0+0xc>)
 8010e3e:	f7ff ff07 	bl	8010c50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	24004ce0 	.word	0x24004ce0

08010e48 <_Z23getFont_verdana_10_4bppv>:
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b08c      	sub	sp, #48	; 0x30
 8010e4c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8010e4e:	4b1f      	ldr	r3, [pc, #124]	; (8010ecc <_Z23getFont_verdana_10_4bppv+0x84>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	f3bf 8f5b 	dmb	ish
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bf0c      	ite	eq
 8010e60:	2301      	moveq	r3, #1
 8010e62:	2300      	movne	r3, #0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d02c      	beq.n	8010ec4 <_Z23getFont_verdana_10_4bppv+0x7c>
 8010e6a:	4818      	ldr	r0, [pc, #96]	; (8010ecc <_Z23getFont_verdana_10_4bppv+0x84>)
 8010e6c:	f01b fdf0 	bl	802ca50 <__cxa_guard_acquire>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	bf14      	ite	ne
 8010e76:	2301      	movne	r3, #1
 8010e78:	2300      	moveq	r3, #0
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d021      	beq.n	8010ec4 <_Z23getFont_verdana_10_4bppv+0x7c>
 8010e80:	2300      	movs	r3, #0
 8010e82:	930a      	str	r3, [sp, #40]	; 0x28
 8010e84:	2300      	movs	r3, #0
 8010e86:	9309      	str	r3, [sp, #36]	; 0x24
 8010e88:	2300      	movs	r3, #0
 8010e8a:	9308      	str	r3, [sp, #32]
 8010e8c:	233f      	movs	r3, #63	; 0x3f
 8010e8e:	9307      	str	r3, [sp, #28]
 8010e90:	4b0f      	ldr	r3, [pc, #60]	; (8010ed0 <_Z23getFont_verdana_10_4bppv+0x88>)
 8010e92:	9306      	str	r3, [sp, #24]
 8010e94:	4b0f      	ldr	r3, [pc, #60]	; (8010ed4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8010e96:	9305      	str	r3, [sp, #20]
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9304      	str	r3, [sp, #16]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	9303      	str	r3, [sp, #12]
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	9302      	str	r3, [sp, #8]
 8010ea4:	2304      	movs	r3, #4
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	230a      	movs	r3, #10
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4909      	ldr	r1, [pc, #36]	; (8010ed8 <_Z23getFont_verdana_10_4bppv+0x90>)
 8010eb2:	480a      	ldr	r0, [pc, #40]	; (8010edc <_Z23getFont_verdana_10_4bppv+0x94>)
 8010eb4:	f7ff ff26 	bl	8010d04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010eb8:	4809      	ldr	r0, [pc, #36]	; (8010ee0 <_Z23getFont_verdana_10_4bppv+0x98>)
 8010eba:	f01b fe13 	bl	802cae4 <atexit>
 8010ebe:	4803      	ldr	r0, [pc, #12]	; (8010ecc <_Z23getFont_verdana_10_4bppv+0x84>)
 8010ec0:	f01b fdd2 	bl	802ca68 <__cxa_guard_release>
    return verdana_10_4bpp;
 8010ec4:	4b05      	ldr	r3, [pc, #20]	; (8010edc <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	24004d08 	.word	0x24004d08
 8010ed0:	08030c40 	.word	0x08030c40
 8010ed4:	08030d40 	.word	0x08030d40
 8010ed8:	902f385c 	.word	0x902f385c
 8010edc:	24004ce0 	.word	0x24004ce0
 8010ee0:	08010e39 	.word	0x08010e39

08010ee4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	4801      	ldr	r0, [pc, #4]	; (8010ef0 <__tcf_0+0xc>)
 8010eea:	f7ff feb1 	bl	8010c50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	24004d0c 	.word	0x24004d0c

08010ef4 <_Z23getFont_verdana_20_4bppv>:
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b08c      	sub	sp, #48	; 0x30
 8010ef8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8010efa:	4b1f      	ldr	r3, [pc, #124]	; (8010f78 <_Z23getFont_verdana_20_4bppv+0x84>)
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	f3bf 8f5b 	dmb	ish
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	f003 0301 	and.w	r3, r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	bf0c      	ite	eq
 8010f0c:	2301      	moveq	r3, #1
 8010f0e:	2300      	movne	r3, #0
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d02c      	beq.n	8010f70 <_Z23getFont_verdana_20_4bppv+0x7c>
 8010f16:	4818      	ldr	r0, [pc, #96]	; (8010f78 <_Z23getFont_verdana_20_4bppv+0x84>)
 8010f18:	f01b fd9a 	bl	802ca50 <__cxa_guard_acquire>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	bf14      	ite	ne
 8010f22:	2301      	movne	r3, #1
 8010f24:	2300      	moveq	r3, #0
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d021      	beq.n	8010f70 <_Z23getFont_verdana_20_4bppv+0x7c>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f30:	2300      	movs	r3, #0
 8010f32:	9309      	str	r3, [sp, #36]	; 0x24
 8010f34:	2300      	movs	r3, #0
 8010f36:	9308      	str	r3, [sp, #32]
 8010f38:	233f      	movs	r3, #63	; 0x3f
 8010f3a:	9307      	str	r3, [sp, #28]
 8010f3c:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <_Z23getFont_verdana_20_4bppv+0x88>)
 8010f3e:	9306      	str	r3, [sp, #24]
 8010f40:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8010f42:	9305      	str	r3, [sp, #20]
 8010f44:	2301      	movs	r3, #1
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	9303      	str	r3, [sp, #12]
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	9302      	str	r3, [sp, #8]
 8010f50:	2304      	movs	r3, #4
 8010f52:	9301      	str	r3, [sp, #4]
 8010f54:	2304      	movs	r3, #4
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	2314      	movs	r3, #20
 8010f5a:	2242      	movs	r2, #66	; 0x42
 8010f5c:	4909      	ldr	r1, [pc, #36]	; (8010f84 <_Z23getFont_verdana_20_4bppv+0x90>)
 8010f5e:	480a      	ldr	r0, [pc, #40]	; (8010f88 <_Z23getFont_verdana_20_4bppv+0x94>)
 8010f60:	f7ff fed0 	bl	8010d04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8010f64:	4809      	ldr	r0, [pc, #36]	; (8010f8c <_Z23getFont_verdana_20_4bppv+0x98>)
 8010f66:	f01b fdbd 	bl	802cae4 <atexit>
 8010f6a:	4803      	ldr	r0, [pc, #12]	; (8010f78 <_Z23getFont_verdana_20_4bppv+0x84>)
 8010f6c:	f01b fd7c 	bl	802ca68 <__cxa_guard_release>
    return verdana_20_4bpp;
 8010f70:	4b05      	ldr	r3, [pc, #20]	; (8010f88 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	24004d34 	.word	0x24004d34
 8010f7c:	08030c44 	.word	0x08030c44
 8010f80:	08030d44 	.word	0x08030d44
 8010f84:	902f386c 	.word	0x902f386c
 8010f88:	24004d0c 	.word	0x24004d0c
 8010f8c:	08010ee5 	.word	0x08010ee5

08010f90 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8010f90:	b580      	push	{r7, lr}
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	4801      	ldr	r0, [pc, #4]	; (8010f9c <__tcf_0+0xc>)
 8010f96:	f7ff fe5b 	bl	8010c50 <_ZN8touchgfx13GeneratedFontD1Ev>
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	24004d38 	.word	0x24004d38

08010fa0 <_Z23getFont_verdana_40_4bppv>:
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b08c      	sub	sp, #48	; 0x30
 8010fa4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8010fa6:	4b1f      	ldr	r3, [pc, #124]	; (8011024 <_Z23getFont_verdana_40_4bppv+0x84>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	f3bf 8f5b 	dmb	ish
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	bf0c      	ite	eq
 8010fb8:	2301      	moveq	r3, #1
 8010fba:	2300      	movne	r3, #0
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d02c      	beq.n	801101c <_Z23getFont_verdana_40_4bppv+0x7c>
 8010fc2:	4818      	ldr	r0, [pc, #96]	; (8011024 <_Z23getFont_verdana_40_4bppv+0x84>)
 8010fc4:	f01b fd44 	bl	802ca50 <__cxa_guard_acquire>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	bf14      	ite	ne
 8010fce:	2301      	movne	r3, #1
 8010fd0:	2300      	moveq	r3, #0
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d021      	beq.n	801101c <_Z23getFont_verdana_40_4bppv+0x7c>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	930a      	str	r3, [sp, #40]	; 0x28
 8010fdc:	2300      	movs	r3, #0
 8010fde:	9309      	str	r3, [sp, #36]	; 0x24
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	9308      	str	r3, [sp, #32]
 8010fe4:	233f      	movs	r3, #63	; 0x3f
 8010fe6:	9307      	str	r3, [sp, #28]
 8010fe8:	4b0f      	ldr	r3, [pc, #60]	; (8011028 <_Z23getFont_verdana_40_4bppv+0x88>)
 8010fea:	9306      	str	r3, [sp, #24]
 8010fec:	4b0f      	ldr	r3, [pc, #60]	; (801102c <_Z23getFont_verdana_40_4bppv+0x8c>)
 8010fee:	9305      	str	r3, [sp, #20]
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	9304      	str	r3, [sp, #16]
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	9303      	str	r3, [sp, #12]
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	9302      	str	r3, [sp, #8]
 8010ffc:	2304      	movs	r3, #4
 8010ffe:	9301      	str	r3, [sp, #4]
 8011000:	2300      	movs	r3, #0
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	2328      	movs	r3, #40	; 0x28
 8011006:	2201      	movs	r2, #1
 8011008:	4909      	ldr	r1, [pc, #36]	; (8011030 <_Z23getFont_verdana_40_4bppv+0x90>)
 801100a:	480a      	ldr	r0, [pc, #40]	; (8011034 <_Z23getFont_verdana_40_4bppv+0x94>)
 801100c:	f7ff fe7a 	bl	8010d04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8011010:	4809      	ldr	r0, [pc, #36]	; (8011038 <_Z23getFont_verdana_40_4bppv+0x98>)
 8011012:	f01b fd67 	bl	802cae4 <atexit>
 8011016:	4803      	ldr	r0, [pc, #12]	; (8011024 <_Z23getFont_verdana_40_4bppv+0x84>)
 8011018:	f01b fd26 	bl	802ca68 <__cxa_guard_release>
    return verdana_40_4bpp;
 801101c:	4b05      	ldr	r3, [pc, #20]	; (8011034 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 801101e:	4618      	mov	r0, r3
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	24004d60 	.word	0x24004d60
 8011028:	08030d3c 	.word	0x08030d3c
 801102c:	08030d48 	.word	0x08030d48
 8011030:	902f3c08 	.word	0x902f3c08
 8011034:	24004d38 	.word	0x24004d38
 8011038:	08010f91 	.word	0x08010f91

0801103c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	370c      	adds	r7, #12
 801104c:	46bd      	mov	sp, r7
 801104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011052:	4770      	bx	lr

08011054 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801106a:	b480      	push	{r7}
 801106c:	b083      	sub	sp, #12
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8011074:	bf00      	nop
 8011076:	370c      	adds	r7, #12
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr

08011080 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801108a:	bf00      	nop
 801108c:	370c      	adds	r7, #12
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr

08011096 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8011096:	b480      	push	{r7}
 8011098:	b083      	sub	sp, #12
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	460b      	mov	r3, r1
 80110a0:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80110a2:	bf00      	nop
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80110ae:	b480      	push	{r7}
 80110b0:	b083      	sub	sp, #12
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
    {
    }
 80110b6:	bf00      	nop
 80110b8:	370c      	adds	r7, #12
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr

080110c2 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80110c2:	b480      	push	{r7}
 80110c4:	b083      	sub	sp, #12
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
    {
    }
 80110ca:	bf00      	nop
 80110cc:	370c      	adds	r7, #12
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
	...

080110d8 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
    {
 80110e0:	4a04      	ldr	r2, [pc, #16]	; (80110f4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
    }
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4618      	mov	r0, r3
 80110ea:	370c      	adds	r7, #12
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr
 80110f4:	0802ee48 	.word	0x0802ee48

080110f8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
    }
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f7ff ffe9 	bl	80110d8 <_ZN8touchgfx15UIEventListenerD1Ev>
 8011106:	2104      	movs	r1, #4
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f01b fc9f 	bl	802ca4c <_ZdlPvj>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8011118:	b480      	push	{r7}
 801111a:	b083      	sub	sp, #12
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
    {
    }
 8011120:	bf00      	nop
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	460b      	mov	r3, r1
 8011136:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	683a      	ldr	r2, [r7, #0]
 8011152:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8011156:	6810      	ldr	r0, [r2, #0]
 8011158:	6851      	ldr	r1, [r2, #4]
 801115a:	c303      	stmia	r3!, {r0, r1}
    }
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    {
 8011170:	4a04      	ldr	r2, [pc, #16]	; (8011184 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	601a      	str	r2, [r3, #0]
    }
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	0802ee30 	.word	0x0802ee30

08011188 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
    }
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7ff ffe9 	bl	8011168 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011196:	2104      	movs	r1, #4
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f01b fc57 	bl	802ca4c <_ZdlPvj>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	4618      	mov	r0, r3
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80111a8:	b480      	push	{r7}
 80111aa:	af00      	add	r7, sp, #0
    {
        return instance;
 80111ac:	4b03      	ldr	r3, [pc, #12]	; (80111bc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80111ae:	681b      	ldr	r3, [r3, #0]
    }
 80111b0:	4618      	mov	r0, r3
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	2400d82c 	.word	0x2400d82c

080111c0 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80111c0:	b480      	push	{r7}
 80111c2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80111c4:	4b0b      	ldr	r3, [pc, #44]	; (80111f4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d008      	beq.n	80111e2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80111d0:	4b08      	ldr	r3, [pc, #32]	; (80111f4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d003      	beq.n	80111e2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80111da:	4b06      	ldr	r3, [pc, #24]	; (80111f4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111e0:	e002      	b.n	80111e8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 80111e2:	4b04      	ldr	r3, [pc, #16]	; (80111f4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	689b      	ldr	r3, [r3, #8]
    }
 80111e8:	4618      	mov	r0, r3
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr
 80111f2:	bf00      	nop
 80111f4:	2400d82c 	.word	0x2400d82c

080111f8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8011200:	4a07      	ldr	r2, [pc, #28]	; (8011220 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	601a      	str	r2, [r3, #0]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	605a      	str	r2, [r3, #4]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2200      	movs	r2, #0
 8011210:	721a      	strb	r2, [r3, #8]
    {
    }
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	0802ee0c 	.word	0x0802ee0c

08011224 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
    {
 801122c:	4a04      	ldr	r2, [pc, #16]	; (8011240 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	601a      	str	r2, [r3, #0]
    }
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4618      	mov	r0, r3
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	0802ee0c 	.word	0x0802ee0c

08011244 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
    }
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f7ff ffe9 	bl	8011224 <_ZN8touchgfx10TransitionD1Ev>
 8011252:	210c      	movs	r1, #12
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f01b fbf9 	bl	802ca4c <_ZdlPvj>
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
    {
    }
 801126c:	bf00      	nop
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
    {
    }
 8011280:	bf00      	nop
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 801128c:	b480      	push	{r7}
 801128e:	b083      	sub	sp, #12
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
    {
    }
 8011294:	bf00      	nop
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80112a8:	f00d f88a 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 80112ac:	4603      	mov	r3, r0
 80112ae:	4618      	mov	r0, r3
 80112b0:	f00d fc68 	bl	801eb84 <_ZN8touchgfx11Application10invalidateEv>
    }
 80112b4:	bf00      	nop
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	683a      	ldr	r2, [r7, #0]
 80112ca:	605a      	str	r2, [r3, #4]
    }
 80112cc:	bf00      	nop
 80112ce:	370c      	adds	r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr

080112d8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	4a05      	ldr	r2, [pc, #20]	; (80112f8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7ff fef5 	bl	80110d8 <_ZN8touchgfx15UIEventListenerD1Ev>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	08030794 	.word	0x08030794

080112fc <_ZN8touchgfx11ApplicationD0Ev>:
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7ff ffe7 	bl	80112d8 <_ZN8touchgfx11ApplicationD1Ev>
 801130a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f01b fb9c 	bl	802ca4c <_ZdlPvj>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4618      	mov	r0, r3
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
	...

08011320 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	4618      	mov	r0, r3
 801132c:	f00d f8a6 	bl	801e47c <_ZN8touchgfx11ApplicationC1Ev>
 8011330:	4a09      	ldr	r2, [pc, #36]	; (8011358 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	601a      	str	r2, [r3, #0]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a04      	ldr	r2, [pc, #16]	; (801135c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801134a:	6013      	str	r3, [r2, #0]
    }
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	0802edc0 	.word	0x0802edc0
 801135c:	2400d880 	.word	0x2400d880

08011360 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f000 f804 	bl	8011376 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8011376:	b580      	push	{r7, lr}
 8011378:	b082      	sub	sp, #8
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8011384:	2b00      	cmp	r3, #0
 8011386:	d00f      	beq.n	80113a8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	330c      	adds	r3, #12
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4610      	mov	r0, r2
 801139c:	4798      	blx	r3
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d001      	beq.n	80113a8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80113a4:	2301      	movs	r3, #1
 80113a6:	e000      	b.n	80113aa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 80113a8:	2300      	movs	r3, #0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00e      	beq.n	80113cc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3308      	adds	r3, #8
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4610      	mov	r0, r2
 80113c2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80113cc:	bf00      	nop
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	601a      	str	r2, [r3, #0]
    }
 80113e4:	bf00      	nop
 80113e6:	370c      	adds	r7, #12
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr

080113f0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	4a05      	ldr	r2, [pc, #20]	; (8011410 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff ff69 	bl	80112d8 <_ZN8touchgfx11ApplicationD1Ev>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0802edc0 	.word	0x0802edc0

08011414 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7ff ffe7 	bl	80113f0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8011422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f01b fb10 	bl	802ca4c <_ZdlPvj>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4618      	mov	r0, r3
 8011430:	3708      	adds	r7, #8
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	4a08      	ldr	r2, [pc, #32]	; (8011464 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	601a      	str	r2, [r3, #0]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801144c:	4618      	mov	r0, r3
 801144e:	f000 fc61 	bl	8011d14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff ffcb 	bl	80113f0 <_ZN8touchgfx14MVPApplicationD1Ev>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	0802ed5c 	.word	0x0802ed5c

08011468 <_ZN23FrontendApplicationBaseD0Ev>:
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff ffe1 	bl	8011438 <_ZN23FrontendApplicationBaseD1Ev>
 8011476:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f01b fae6 	bl	802ca4c <_ZdlPvj>
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 801148a:	b580      	push	{r7, lr}
 801148c:	b082      	sub	sp, #8
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
    {
        gotoMain_screenScreenNoTransition();
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f000 f87c 	bl	8011590 <_ZN23FrontendApplicationBase33gotoMain_screenScreenNoTransitionEv>
    }
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2201      	movs	r2, #1
 80114ac:	721a      	strb	r2, [r3, #8]
    }
 80114ae:	bf00      	nop
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 80114ba:	b480      	push	{r7}
 80114bc:	b083      	sub	sp, #12
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	605a      	str	r2, [r3, #4]
    }
 80114ca:	bf00      	nop
 80114cc:	370c      	adds	r7, #12
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
	...

080114d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/menu_9_screen/Menu_9View.hpp>
#include <gui/menu_9_screen/Menu_9Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7ff ff1a 	bl	8011320 <_ZN8touchgfx14MVPApplicationC1Ev>
 80114ec:	4a13      	ldr	r2, [pc, #76]	; (801153c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	601a      	str	r2, [r3, #0]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80114f8:	4618      	mov	r0, r3
 80114fa:	f000 f8e5 	bl	80116c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	68ba      	ldr	r2, [r7, #8]
 801150a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 801150e:	f7ff fe4b 	bl	80111a8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011512:	4603      	mov	r3, r0
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	3208      	adds	r2, #8
 8011518:	6812      	ldr	r2, [r2, #0]
 801151a:	2101      	movs	r1, #1
 801151c:	4618      	mov	r0, r3
 801151e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(PL);
 8011520:	2001      	movs	r0, #1
 8011522:	f003 fec9 	bl	80152b8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8011526:	f7ff fe4b 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801152a:	4603      	mov	r3, r0
 801152c:	4618      	mov	r0, r3
 801152e:	f014 f93a 	bl	80257a6 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
}
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	4618      	mov	r0, r3
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0802ed5c 	.word	0x0802ed5c

08011540 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	4611      	mov	r1, r2
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff ffe9 	bl	8011540 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	685a      	ldr	r2, [r3, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	605a      	str	r2, [r3, #4]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	683a      	ldr	r2, [r7, #0]
 801157a:	3308      	adds	r3, #8
 801157c:	3208      	adds	r2, #8
 801157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011582:	e883 0003 	stmia.w	r3, {r0, r1}
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <_ZN23FrontendApplicationBase33gotoMain_screenScreenNoTransitionEv>:
 */

// Main_screen

void FrontendApplicationBase::gotoMain_screenScreenNoTransition()
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b089      	sub	sp, #36	; 0x24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMain_screenScreenNoTransitionImpl);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801159e:	4b10      	ldr	r3, [pc, #64]	; (80115e0 <_ZN23FrontendApplicationBase33gotoMain_screenScreenNoTransitionEv+0x50>)
 80115a0:	61bb      	str	r3, [r7, #24]
 80115a2:	2300      	movs	r3, #0
 80115a4:	61fb      	str	r3, [r7, #28]
 80115a6:	f107 0008 	add.w	r0, r7, #8
 80115aa:	f107 0318 	add.w	r3, r7, #24
 80115ae:	cb0c      	ldmia	r3, {r2, r3}
 80115b0:	6879      	ldr	r1, [r7, #4]
 80115b2:	f000 f8a5 	bl	8011700 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80115b6:	f107 0308 	add.w	r3, r7, #8
 80115ba:	4619      	mov	r1, r3
 80115bc:	4620      	mov	r0, r4
 80115be:	f7ff ffcb 	bl	8011558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80115c2:	f107 0308 	add.w	r3, r7, #8
 80115c6:	4618      	mov	r0, r3
 80115c8:	f000 fba4 	bl	8011d14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80115d8:	bf00      	nop
 80115da:	3724      	adds	r7, #36	; 0x24
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd90      	pop	{r4, r7, pc}
 80115e0:	080115e5 	.word	0x080115e5

080115e4 <_ZN23FrontendApplicationBase37gotoMain_screenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMain_screenScreenNoTransitionImpl()
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af02      	add	r7, sp, #8
 80115ea:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Main_screenView, Main_screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80115f8:	461a      	mov	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	4b04      	ldr	r3, [pc, #16]	; (8011614 <_ZN23FrontendApplicationBase37gotoMain_screenScreenNoTransitionImplEv+0x30>)
 8011604:	4804      	ldr	r0, [pc, #16]	; (8011618 <_ZN23FrontendApplicationBase37gotoMain_screenScreenNoTransitionImplEv+0x34>)
 8011606:	f000 f8ad 	bl	8011764 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801160a:	bf00      	nop
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	2400d874 	.word	0x2400d874
 8011618:	2400d870 	.word	0x2400d870

0801161c <_ZN23FrontendApplicationBase28gotoMenu_9ScreenNoTransitionEv>:

// Menu_9

void FrontendApplicationBase::gotoMenu_9ScreenNoTransition()
{
 801161c:	b590      	push	{r4, r7, lr}
 801161e:	b089      	sub	sp, #36	; 0x24
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMenu_9ScreenNoTransitionImpl);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801162a:	4b10      	ldr	r3, [pc, #64]	; (801166c <_ZN23FrontendApplicationBase28gotoMenu_9ScreenNoTransitionEv+0x50>)
 801162c:	61bb      	str	r3, [r7, #24]
 801162e:	2300      	movs	r3, #0
 8011630:	61fb      	str	r3, [r7, #28]
 8011632:	f107 0008 	add.w	r0, r7, #8
 8011636:	f107 0318 	add.w	r3, r7, #24
 801163a:	cb0c      	ldmia	r3, {r2, r3}
 801163c:	6879      	ldr	r1, [r7, #4]
 801163e:	f000 f85f 	bl	8011700 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011642:	f107 0308 	add.w	r3, r7, #8
 8011646:	4619      	mov	r1, r3
 8011648:	4620      	mov	r0, r4
 801164a:	f7ff ff85 	bl	8011558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801164e:	f107 0308 	add.w	r3, r7, #8
 8011652:	4618      	mov	r0, r3
 8011654:	f000 fb5e 	bl	8011d14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8011664:	bf00      	nop
 8011666:	3724      	adds	r7, #36	; 0x24
 8011668:	46bd      	mov	sp, r7
 801166a:	bd90      	pop	{r4, r7, pc}
 801166c:	08011671 	.word	0x08011671

08011670 <_ZN23FrontendApplicationBase32gotoMenu_9ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMenu_9ScreenNoTransitionImpl()
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af02      	add	r7, sp, #8
 8011676:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Menu_9View, Menu_9Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8011684:	461a      	mov	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	4b04      	ldr	r3, [pc, #16]	; (80116a0 <_ZN23FrontendApplicationBase32gotoMenu_9ScreenNoTransitionImplEv+0x30>)
 8011690:	4804      	ldr	r0, [pc, #16]	; (80116a4 <_ZN23FrontendApplicationBase32gotoMenu_9ScreenNoTransitionImplEv+0x34>)
 8011692:	f000 f983 	bl	801199c <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011696:	bf00      	nop
 8011698:	3708      	adds	r7, #8
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	2400d874 	.word	0x2400d874
 80116a4:	2400d870 	.word	0x2400d870

080116a8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	4a04      	ldr	r2, [pc, #16]	; (80116c4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	601a      	str	r2, [r3, #0]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	0802ee30 	.word	0x0802ee30

080116c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7ff ffe8 	bl	80116a8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80116d8:	4a08      	ldr	r2, [pc, #32]	; (80116fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	601a      	str	r2, [r3, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2200      	movs	r2, #0
 80116e2:	605a      	str	r2, [r3, #4]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	609a      	str	r2, [r3, #8]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	2200      	movs	r2, #0
 80116ee:	60da      	str	r2, [r3, #12]
    {
    }
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	4618      	mov	r0, r3
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	0802eda8 	.word	0x0802eda8

08011700 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	4639      	mov	r1, r7
 801170c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff ffc8 	bl	80116a8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8011718:	4a08      	ldr	r2, [pc, #32]	; (801173c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	601a      	str	r2, [r3, #0]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	605a      	str	r2, [r3, #4]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	3308      	adds	r3, #8
 8011728:	463a      	mov	r2, r7
 801172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801172e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	0802eda8 	.word	0x0802eda8

08011740 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff fd54 	bl	80111f8 <_ZN8touchgfx10TransitionC1Ev>
 8011750:	4a03      	ldr	r2, [pc, #12]	; (8011760 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	601a      	str	r2, [r3, #0]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	4618      	mov	r0, r3
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	0802ed38 	.word	0x0802ed38

08011764 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b08f      	sub	sp, #60	; 0x3c
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	689a      	ldr	r2, [r3, #8]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3320      	adds	r3, #32
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4610      	mov	r0, r2
 8011782:	4798      	blx	r3
 8011784:	4603      	mov	r3, r0
 8011786:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 801178a:	d205      	bcs.n	8011798 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801178c:	4b7e      	ldr	r3, [pc, #504]	; (8011988 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 801178e:	4a7f      	ldr	r2, [pc, #508]	; (801198c <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011790:	21a3      	movs	r1, #163	; 0xa3
 8011792:	487f      	ldr	r0, [pc, #508]	; (8011990 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011794:	f01b f988 	bl	802caa8 <__assert_func>
 8011798:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	685a      	ldr	r2, [r3, #4]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	3320      	adds	r3, #32
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4610      	mov	r0, r2
 80117aa:	4798      	blx	r3
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b0f      	cmp	r3, #15
 80117b0:	d805      	bhi.n	80117be <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80117b2:	4b78      	ldr	r3, [pc, #480]	; (8011994 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80117b4:	4a75      	ldr	r2, [pc, #468]	; (801198c <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80117b6:	21a4      	movs	r1, #164	; 0xa4
 80117b8:	4875      	ldr	r0, [pc, #468]	; (8011990 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80117ba:	f01b f975 	bl	802caa8 <__assert_func>
 80117be:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	68da      	ldr	r2, [r3, #12]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	3320      	adds	r3, #32
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4610      	mov	r0, r2
 80117d0:	4798      	blx	r3
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b0b      	cmp	r3, #11
 80117d6:	d805      	bhi.n	80117e4 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80117d8:	4b6f      	ldr	r3, [pc, #444]	; (8011998 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80117da:	4a6c      	ldr	r2, [pc, #432]	; (801198c <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80117dc:	21a5      	movs	r1, #165	; 0xa5
 80117de:	486c      	ldr	r0, [pc, #432]	; (8011990 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80117e0:	f01b f962 	bl	802caa8 <__assert_func>
 80117e4:	bf00      	nop
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	627b      	str	r3, [r7, #36]	; 0x24
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80117f2:	f00c fde5 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 80117f6:	4603      	mov	r3, r0
 80117f8:	4618      	mov	r0, r3
 80117fa:	f00c fe22 	bl	801e442 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80117fe:	6a3b      	ldr	r3, [r7, #32]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d008      	beq.n	8011818 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8011806:	6a3b      	ldr	r3, [r7, #32]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	330c      	adds	r3, #12
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	4610      	mov	r0, r2
 8011816:	4798      	blx	r3
    if (*currentTrans)
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d007      	beq.n	8011830 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8011820:	6a3b      	ldr	r3, [r7, #32]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4610      	mov	r0, r2
 801182e:	4798      	blx	r3
    if (*currentScreen)
 8011830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d008      	beq.n	801184a <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	3314      	adds	r3, #20
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4610      	mov	r0, r2
 8011848:	4798      	blx	r3
    if (*currentPresenter)
 801184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d008      	beq.n	8011864 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8011852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3304      	adds	r3, #4
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	4610      	mov	r0, r2
 8011862:	4798      	blx	r3
    if (*currentScreen)
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d007      	beq.n	801187c <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4610      	mov	r0, r2
 801187a:	4798      	blx	r3
    if (*currentPresenter)
 801187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d008      	beq.n	8011896 <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	3308      	adds	r3, #8
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4610      	mov	r0, r2
 8011894:	4798      	blx	r3
}
 8011896:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	2100      	movs	r1, #0
 801189e:	4618      	mov	r0, r3
 80118a0:	f000 f99a 	bl	8011bd8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80118a4:	4603      	mov	r3, r0
 80118a6:	4619      	mov	r1, r3
 80118a8:	200c      	movs	r0, #12
 80118aa:	f7ff fbc7 	bl	801103c <_ZnwjPv>
 80118ae:	4604      	mov	r4, r0
 80118b0:	4620      	mov	r0, r4
 80118b2:	f7ff ff45 	bl	8011740 <_ZN8touchgfx12NoTransitionC1Ev>
 80118b6:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	2100      	movs	r1, #0
 80118be:	4618      	mov	r0, r3
 80118c0:	f000 f99d 	bl	8011bfe <_ZN8touchgfx17AbstractPartition2atI15Main_screenViewEERT_t>
 80118c4:	4603      	mov	r3, r0
 80118c6:	4619      	mov	r1, r3
 80118c8:	f44f 7098 	mov.w	r0, #304	; 0x130
 80118cc:	f7ff fbb6 	bl	801103c <_ZnwjPv>
 80118d0:	4604      	mov	r4, r0
 80118d2:	4620      	mov	r0, r4
 80118d4:	f004 f88a 	bl	80159ec <_ZN15Main_screenViewC1Ev>
 80118d8:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	2100      	movs	r1, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f000 f99f 	bl	8011c24 <_ZN8touchgfx17AbstractPartition2atI20Main_screenPresenterEERT_t>
 80118e6:	4603      	mov	r3, r0
 80118e8:	4619      	mov	r1, r3
 80118ea:	2010      	movs	r0, #16
 80118ec:	f7ff fba6 	bl	801103c <_ZnwjPv>
 80118f0:	4604      	mov	r4, r0
 80118f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118f4:	4620      	mov	r0, r4
 80118f6:	f004 f821 	bl	801593c <_ZN20Main_screenPresenterC1ER15Main_screenView>
 80118fa:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011900:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011906:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801190c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	3304      	adds	r3, #4
 8011918:	e000      	b.n	801191c <_ZN8touchgfx14makeTransitionI15Main_screenView20Main_screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 801191a:	2300      	movs	r3, #0
 801191c:	4619      	mov	r1, r3
 801191e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011920:	f7ff fd58 	bl	80113d4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011926:	3304      	adds	r3, #4
 8011928:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff fdc5 	bl	80114ba <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011934:	4618      	mov	r0, r3
 8011936:	f000 f988 	bl	8011c4a <_ZN8touchgfx4ViewI20Main_screenPresenterE4bindERS1_>
 801193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193c:	61fb      	str	r3, [r7, #28]
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	61bb      	str	r3, [r7, #24]
 8011942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011944:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	330c      	adds	r3, #12
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	69f8      	ldr	r0, [r7, #28]
 8011950:	4798      	blx	r3
    newPresenter->activate();
 8011952:	69bb      	ldr	r3, [r7, #24]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	69b8      	ldr	r0, [r7, #24]
 801195a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801195c:	6979      	ldr	r1, [r7, #20]
 801195e:	69f8      	ldr	r0, [r7, #28]
 8011960:	f00e f9fe 	bl	801fd60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3310      	adds	r3, #16
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	6978      	ldr	r0, [r7, #20]
 801196e:	4798      	blx	r3
    newTransition->invalidate();
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	3314      	adds	r3, #20
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	6978      	ldr	r0, [r7, #20]
 801197a:	4798      	blx	r3
}
 801197c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 801197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011980:	4618      	mov	r0, r3
 8011982:	373c      	adds	r7, #60	; 0x3c
 8011984:	46bd      	mov	sp, r7
 8011986:	bd90      	pop	{r4, r7, pc}
 8011988:	0802dc9c 	.word	0x0802dc9c
 801198c:	0802dd2c 	.word	0x0802dd2c
 8011990:	0802de38 	.word	0x0802de38
 8011994:	0802de7c 	.word	0x0802de7c
 8011998:	0802df20 	.word	0x0802df20

0801199c <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801199c:	b590      	push	{r4, r7, lr}
 801199e:	b08f      	sub	sp, #60	; 0x3c
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	689a      	ldr	r2, [r3, #8]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	689b      	ldr	r3, [r3, #8]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	3320      	adds	r3, #32
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4610      	mov	r0, r2
 80119ba:	4798      	blx	r3
 80119bc:	4603      	mov	r3, r0
 80119be:	f647 1203 	movw	r2, #30979	; 0x7903
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d805      	bhi.n	80119d2 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80119c6:	4b7f      	ldr	r3, [pc, #508]	; (8011bc4 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80119c8:	4a7f      	ldr	r2, [pc, #508]	; (8011bc8 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80119ca:	21a3      	movs	r1, #163	; 0xa3
 80119cc:	487f      	ldr	r0, [pc, #508]	; (8011bcc <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80119ce:	f01b f86b 	bl	802caa8 <__assert_func>
 80119d2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	685a      	ldr	r2, [r3, #4]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	3320      	adds	r3, #32
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	4610      	mov	r0, r2
 80119e4:	4798      	blx	r3
 80119e6:	4603      	mov	r3, r0
 80119e8:	2b0f      	cmp	r3, #15
 80119ea:	d805      	bhi.n	80119f8 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80119ec:	4b78      	ldr	r3, [pc, #480]	; (8011bd0 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80119ee:	4a76      	ldr	r2, [pc, #472]	; (8011bc8 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80119f0:	21a4      	movs	r1, #164	; 0xa4
 80119f2:	4876      	ldr	r0, [pc, #472]	; (8011bcc <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80119f4:	f01b f858 	bl	802caa8 <__assert_func>
 80119f8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	68da      	ldr	r2, [r3, #12]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3320      	adds	r3, #32
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4610      	mov	r0, r2
 8011a0a:	4798      	blx	r3
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b0b      	cmp	r3, #11
 8011a10:	d805      	bhi.n	8011a1e <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011a12:	4b70      	ldr	r3, [pc, #448]	; (8011bd4 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8011a14:	4a6c      	ldr	r2, [pc, #432]	; (8011bc8 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011a16:	21a5      	movs	r1, #165	; 0xa5
 8011a18:	486c      	ldr	r0, [pc, #432]	; (8011bcc <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011a1a:	f01b f845 	bl	802caa8 <__assert_func>
 8011a1e:	bf00      	nop
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	627b      	str	r3, [r7, #36]	; 0x24
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8011a2c:	f00c fcc8 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8011a30:	4603      	mov	r3, r0
 8011a32:	4618      	mov	r0, r3
 8011a34:	f00c fd05 	bl	801e442 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d008      	beq.n	8011a52 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8011a40:	6a3b      	ldr	r3, [r7, #32]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	6a3b      	ldr	r3, [r7, #32]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	330c      	adds	r3, #12
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4610      	mov	r0, r2
 8011a50:	4798      	blx	r3
    if (*currentTrans)
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d007      	beq.n	8011a6a <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4610      	mov	r0, r2
 8011a68:	4798      	blx	r3
    if (*currentScreen)
 8011a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d008      	beq.n	8011a84 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8011a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	3314      	adds	r3, #20
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4610      	mov	r0, r2
 8011a82:	4798      	blx	r3
    if (*currentPresenter)
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d008      	beq.n	8011a9e <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3304      	adds	r3, #4
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	4798      	blx	r3
    if (*currentScreen)
 8011a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d007      	beq.n	8011ab6 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8011aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	4798      	blx	r3
    if (*currentPresenter)
 8011ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d008      	beq.n	8011ad0 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8011abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	3308      	adds	r3, #8
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4610      	mov	r0, r2
 8011ace:	4798      	blx	r3
}
 8011ad0:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f000 f87d 	bl	8011bd8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	200c      	movs	r0, #12
 8011ae4:	f7ff faaa 	bl	801103c <_ZnwjPv>
 8011ae8:	4604      	mov	r4, r0
 8011aea:	4620      	mov	r0, r4
 8011aec:	f7ff fe28 	bl	8011740 <_ZN8touchgfx12NoTransitionC1Ev>
 8011af0:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	2100      	movs	r1, #0
 8011af8:	4618      	mov	r0, r3
 8011afa:	f000 f8b4 	bl	8011c66 <_ZN8touchgfx17AbstractPartition2atI10Menu_9ViewEERT_t>
 8011afe:	4603      	mov	r3, r0
 8011b00:	4619      	mov	r1, r3
 8011b02:	f647 1004 	movw	r0, #30980	; 0x7904
 8011b06:	f7ff fa99 	bl	801103c <_ZnwjPv>
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f004 f873 	bl	8015bf8 <_ZN10Menu_9ViewC1Ev>
 8011b12:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	2100      	movs	r1, #0
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 f8b6 	bl	8011c8c <_ZN8touchgfx17AbstractPartition2atI15Menu_9PresenterEERT_t>
 8011b20:	4603      	mov	r3, r0
 8011b22:	4619      	mov	r1, r3
 8011b24:	2010      	movs	r0, #16
 8011b26:	f7ff fa89 	bl	801103c <_ZnwjPv>
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f003 ffba 	bl	8015aa8 <_ZN15Menu_9PresenterC1ER10Menu_9View>
 8011b34:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b3a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b40:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b46:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d002      	beq.n	8011b54 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8011b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b50:	3304      	adds	r3, #4
 8011b52:	e000      	b.n	8011b56 <_ZN8touchgfx14makeTransitionI10Menu_9View15Menu_9PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8011b54:	2300      	movs	r3, #0
 8011b56:	4619      	mov	r1, r3
 8011b58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011b5a:	f7ff fc3b 	bl	80113d4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	3304      	adds	r3, #4
 8011b62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fca8 	bl	80114ba <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f000 f89f 	bl	8011cb2 <_ZN8touchgfx4ViewI15Menu_9PresenterE4bindERS1_>
 8011b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b76:	61fb      	str	r3, [r7, #28]
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	61bb      	str	r3, [r7, #24]
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	330c      	adds	r3, #12
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	69f8      	ldr	r0, [r7, #28]
 8011b8a:	4798      	blx	r3
    newPresenter->activate();
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	69b8      	ldr	r0, [r7, #24]
 8011b94:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011b96:	6979      	ldr	r1, [r7, #20]
 8011b98:	69f8      	ldr	r0, [r7, #28]
 8011b9a:	f00e f8e1 	bl	801fd60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	3310      	adds	r3, #16
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	6978      	ldr	r0, [r7, #20]
 8011ba8:	4798      	blx	r3
    newTransition->invalidate();
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	3314      	adds	r3, #20
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	6978      	ldr	r0, [r7, #20]
 8011bb4:	4798      	blx	r3
}
 8011bb6:	bf00      	nop
    return newPresenter;
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	373c      	adds	r7, #60	; 0x3c
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd90      	pop	{r4, r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	0802dc9c 	.word	0x0802dc9c
 8011bc8:	0802dfc4 	.word	0x0802dfc4
 8011bcc:	0802de38 	.word	0x0802de38
 8011bd0:	0802de7c 	.word	0x0802de7c
 8011bd4:	0802df20 	.word	0x0802df20

08011bd8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	460b      	mov	r3, r1
 8011be2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3324      	adds	r3, #36	; 0x24
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	887a      	ldrh	r2, [r7, #2]
 8011bee:	4611      	mov	r1, r2
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	4798      	blx	r3
 8011bf4:	4603      	mov	r3, r0
    }
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3708      	adds	r7, #8
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <_ZN8touchgfx17AbstractPartition2atI15Main_screenViewEERT_t>:
    T& at(const uint16_t index)
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	460b      	mov	r3, r1
 8011c08:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	3324      	adds	r3, #36	; 0x24
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	887a      	ldrh	r2, [r7, #2]
 8011c14:	4611      	mov	r1, r2
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	4798      	blx	r3
 8011c1a:	4603      	mov	r3, r0
    }
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZN8touchgfx17AbstractPartition2atI20Main_screenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3324      	adds	r3, #36	; 0x24
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	887a      	ldrh	r2, [r7, #2]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	4798      	blx	r3
 8011c40:	4603      	mov	r3, r0
    }
 8011c42:	4618      	mov	r0, r3
 8011c44:	3708      	adds	r7, #8
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <_ZN8touchgfx4ViewI20Main_screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8011c4a:	b480      	push	{r7}
 8011c4c:	b083      	sub	sp, #12
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011c5a:	bf00      	nop
 8011c5c:	370c      	adds	r7, #12
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr

08011c66 <_ZN8touchgfx17AbstractPartition2atI10Menu_9ViewEERT_t>:
    T& at(const uint16_t index)
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b082      	sub	sp, #8
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
 8011c6e:	460b      	mov	r3, r1
 8011c70:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	3324      	adds	r3, #36	; 0x24
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	887a      	ldrh	r2, [r7, #2]
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	4798      	blx	r3
 8011c82:	4603      	mov	r3, r0
    }
 8011c84:	4618      	mov	r0, r3
 8011c86:	3708      	adds	r7, #8
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <_ZN8touchgfx17AbstractPartition2atI15Menu_9PresenterEERT_t>:
    T& at(const uint16_t index)
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	460b      	mov	r3, r1
 8011c96:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	3324      	adds	r3, #36	; 0x24
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	887a      	ldrh	r2, [r7, #2]
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	4798      	blx	r3
 8011ca8:	4603      	mov	r3, r0
    }
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}

08011cb2 <_ZN8touchgfx4ViewI15Menu_9PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8011cb2:	b480      	push	{r7}
 8011cb4:	b083      	sub	sp, #12
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
 8011cba:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	683a      	ldr	r2, [r7, #0]
 8011cc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011cc2:	bf00      	nop
 8011cc4:	370c      	adds	r7, #12
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
	...

08011cd0 <_ZN8touchgfx12NoTransitionD1Ev>:
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	4a05      	ldr	r2, [pc, #20]	; (8011cf0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	601a      	str	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7ff fa9f 	bl	8011224 <_ZN8touchgfx10TransitionD1Ev>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3708      	adds	r7, #8
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	0802ed38 	.word	0x0802ed38

08011cf4 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7ff ffe7 	bl	8011cd0 <_ZN8touchgfx12NoTransitionD1Ev>
 8011d02:	210c      	movs	r1, #12
 8011d04:	6878      	ldr	r0, [r7, #4]
 8011d06:	f01a fea1 	bl	802ca4c <_ZdlPvj>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3708      	adds	r7, #8
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b082      	sub	sp, #8
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	4a05      	ldr	r2, [pc, #20]	; (8011d34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	601a      	str	r2, [r3, #0]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7ff fa1f 	bl	8011168 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3708      	adds	r7, #8
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}
 8011d34:	0802eda8 	.word	0x0802eda8

08011d38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff ffe7 	bl	8011d14 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011d46:	2110      	movs	r1, #16
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	f01a fe7f 	bl	802ca4c <_ZdlPvj>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	4618      	mov	r0, r3
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	68d2      	ldr	r2, [r2, #12]
 8011d68:	1052      	asrs	r2, r2, #1
 8011d6a:	1899      	adds	r1, r3, r2
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f003 0301 	and.w	r3, r3, #1
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d102      	bne.n	8011d7e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	689b      	ldr	r3, [r3, #8]
 8011d7c:	e00a      	b.n	8011d94 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	68d2      	ldr	r2, [r2, #12]
 8011d86:	1052      	asrs	r2, r2, #1
 8011d88:	4413      	add	r3, r2
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	6892      	ldr	r2, [r2, #8]
 8011d90:	4413      	add	r3, r2
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4608      	mov	r0, r1
 8011d96:	4798      	blx	r3
    }
 8011d98:	bf00      	nop
 8011d9a:	3708      	adds	r7, #8
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d010      	beq.n	8011dd2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d107      	bne.n	8011dc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	f003 0301 	and.w	r3, r3, #1
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e000      	b.n	8011dca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d001      	beq.n	8011dd2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	e000      	b.n	8011dd4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8011dd2:	2300      	movs	r3, #0
    }
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
        : color(0)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	601a      	str	r2, [r3, #0]
    {
    }
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	4618      	mov	r0, r3
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr

08011dfc <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
        : color(col)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	601a      	str	r2, [r3, #0]
    {
    }
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr

08011e1a <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8011e1a:	b480      	push	{r7}
 8011e1c:	b083      	sub	sp, #12
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	6078      	str	r0, [r7, #4]
    {
        return color;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
    }
 8011e26:	4618      	mov	r0, r3
 8011e28:	370c      	adds	r7, #12
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8011e32:	b480      	push	{r7}
 8011e34:	b083      	sub	sp, #12
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	801a      	strh	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	805a      	strh	r2, [r3, #2]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	809a      	strh	r2, [r3, #4]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2200      	movs	r2, #0
 8011e50:	80da      	strh	r2, [r3, #6]
    {
    }
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4618      	mov	r0, r3
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8011e60:	b480      	push	{r7}
 8011e62:	b085      	sub	sp, #20
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	4608      	mov	r0, r1
 8011e6a:	4611      	mov	r1, r2
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4603      	mov	r3, r0
 8011e70:	817b      	strh	r3, [r7, #10]
 8011e72:	460b      	mov	r3, r1
 8011e74:	813b      	strh	r3, [r7, #8]
 8011e76:	4613      	mov	r3, r2
 8011e78:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	897a      	ldrh	r2, [r7, #10]
 8011e7e:	801a      	strh	r2, [r3, #0]
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	893a      	ldrh	r2, [r7, #8]
 8011e84:	805a      	strh	r2, [r3, #2]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	88fa      	ldrh	r2, [r7, #6]
 8011e8a:	809a      	strh	r2, [r3, #4]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	8b3a      	ldrh	r2, [r7, #24]
 8011e90:	80da      	strh	r2, [r3, #6]
    {
    }
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	4618      	mov	r0, r3
 8011e96:	3714      	adds	r7, #20
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr

08011ea0 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	887a      	ldrh	r2, [r7, #2]
 8011eb0:	801a      	strh	r2, [r3, #0]
    {
    }
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8011ec8:	4a14      	ldr	r2, [pc, #80]	; (8011f1c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	601a      	str	r2, [r3, #0]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7ff ffad 	bl	8011e32 <_ZN8touchgfx4RectC1Ev>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	330c      	adds	r3, #12
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7ff ffa8 	bl	8011e32 <_ZN8touchgfx4RectC1Ev>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	615a      	str	r2, [r3, #20]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	619a      	str	r2, [r3, #24]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	61da      	str	r2, [r3, #28]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	841a      	strh	r2, [r3, #32]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	845a      	strh	r2, [r3, #34]	; 0x22
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	4618      	mov	r0, r3
 8011f14:	3708      	adds	r7, #8
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	080307e0 	.word	0x080307e0

08011f20 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
    {
 8011f28:	4a04      	ldr	r2, [pc, #16]	; (8011f3c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	601a      	str	r2, [r3, #0]
    }
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4618      	mov	r0, r3
 8011f32:	370c      	adds	r7, #12
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	080307e0 	.word	0x080307e0

08011f40 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
    }
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7ff ffe9 	bl	8011f20 <_ZN8touchgfx8DrawableD1Ev>
 8011f4e:	2128      	movs	r1, #40	; 0x28
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f01a fd7b 	bl	802ca4c <_ZdlPvj>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d005      	beq.n	8011f7e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3314      	adds	r3, #20
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	4798      	blx	r3
        }
    }
 8011f7e:	bf00      	nop
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}

08011f86 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8011f86:	b480      	push	{r7}
 8011f88:	b083      	sub	sp, #12
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011f8e:	2300      	movs	r3, #0
    }
 8011f90:	4618      	mov	r0, r3
 8011f92:	370c      	adds	r7, #12
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr

08011f9c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	4608      	mov	r0, r1
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	461a      	mov	r2, r3
 8011faa:	4603      	mov	r3, r0
 8011fac:	817b      	strh	r3, [r7, #10]
 8011fae:	460b      	mov	r3, r1
 8011fb0:	813b      	strh	r3, [r7, #8]
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8011fb6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8011fba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	68f8      	ldr	r0, [r7, #12]
 8011fc2:	f000 f82a 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8011fc6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8011fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011fce:	4619      	mov	r1, r3
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f000 f87e 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8011fd6:	bf00      	nop
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}

08011fde <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8011fde:	b480      	push	{r7}
 8011fe0:	b083      	sub	sp, #12
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	887a      	ldrh	r2, [r7, #2]
 8011fee:	809a      	strh	r2, [r3, #4]
    }
 8011ff0:	bf00      	nop
 8011ff2:	370c      	adds	r7, #12
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr

08011ffc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	460b      	mov	r3, r1
 8012006:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	887a      	ldrh	r2, [r7, #2]
 801200c:	80da      	strh	r2, [r3, #6]
    }
 801200e:	bf00      	nop
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr

0801201a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801201a:	b580      	push	{r7, lr}
 801201c:	b082      	sub	sp, #8
 801201e:	af00      	add	r7, sp, #0
 8012020:	6078      	str	r0, [r7, #4]
 8012022:	460b      	mov	r3, r1
 8012024:	807b      	strh	r3, [r7, #2]
 8012026:	4613      	mov	r3, r2
 8012028:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	3330      	adds	r3, #48	; 0x30
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012036:	4611      	mov	r1, r2
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	4798      	blx	r3
        setY(y);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	3334      	adds	r3, #52	; 0x34
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012048:	4611      	mov	r1, r2
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	4798      	blx	r3
    }
 801204e:	bf00      	nop
 8012050:	3708      	adds	r7, #8
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8012056:	b480      	push	{r7}
 8012058:	b083      	sub	sp, #12
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
 801205e:	460b      	mov	r3, r1
 8012060:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	887a      	ldrh	r2, [r7, #2]
 8012066:	811a      	strh	r2, [r3, #8]
    }
 8012068:	bf00      	nop
 801206a:	370c      	adds	r7, #12
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	460b      	mov	r3, r1
 801207e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	887a      	ldrh	r2, [r7, #2]
 8012084:	815a      	strh	r2, [r3, #10]
    }
 8012086:	bf00      	nop
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr

08012092 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8012092:	b480      	push	{r7}
 8012094:	b083      	sub	sp, #12
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
    {
    }
 801209a:	bf00      	nop
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80120a6:	b480      	push	{r7}
 80120a8:	b083      	sub	sp, #12
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80120c6:	bf00      	nop
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr

080120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b082      	sub	sp, #8
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
 80120da:	460b      	mov	r3, r1
 80120dc:	807b      	strh	r3, [r7, #2]
 80120de:	4613      	mov	r3, r2
 80120e0:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	3338      	adds	r3, #56	; 0x38
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80120ee:	4611      	mov	r1, r2
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	4798      	blx	r3
        setHeight(height);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	333c      	adds	r3, #60	; 0x3c
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012100:	4611      	mov	r1, r2
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	4798      	blx	r3
    }
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801210e:	b480      	push	{r7}
 8012110:	b083      	sub	sp, #12
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
    {
    }
 801212c:	bf00      	nop
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	460b      	mov	r3, r1
 8012142:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	78fa      	ldrb	r2, [r7, #3]
 8012148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801214c:	bf00      	nop
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012166:	4618      	mov	r0, r3
 8012168:	370c      	adds	r7, #12
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr

08012172 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012172:	b480      	push	{r7}
 8012174:	b083      	sub	sp, #12
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012180:	4618      	mov	r0, r3
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	460b      	mov	r3, r1
 8012196:	807b      	strh	r3, [r7, #2]
 8012198:	4613      	mov	r3, r2
 801219a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	3354      	adds	r3, #84	; 0x54
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	8879      	ldrh	r1, [r7, #2]
 80121a6:	687a      	ldr	r2, [r7, #4]
 80121a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80121ac:	b292      	uxth	r2, r2
 80121ae:	1a8a      	subs	r2, r1, r2
 80121b0:	b292      	uxth	r2, r2
 80121b2:	b210      	sxth	r0, r2
 80121b4:	8839      	ldrh	r1, [r7, #0]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80121bc:	b292      	uxth	r2, r2
 80121be:	1a8a      	subs	r2, r1, r2
 80121c0:	b292      	uxth	r2, r2
 80121c2:	b212      	sxth	r2, r2
 80121c4:	4601      	mov	r1, r0
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	4798      	blx	r3
    }
 80121ca:	bf00      	nop
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80121d2:	b480      	push	{r7}
 80121d4:	b083      	sub	sp, #12
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121e0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121e8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121f0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80121f2:	bf00      	nop
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80121fe:	b580      	push	{r7, lr}
 8012200:	b084      	sub	sp, #16
 8012202:	af00      	add	r7, sp, #0
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7ff ffe1 	bl	80121d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	601a      	str	r2, [r3, #0]
    }
 801221e:	bf00      	nop
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
	...

08012228 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	4618      	mov	r0, r3
 8012234:	f7ff fe44 	bl	8011ec0 <_ZN8touchgfx8DrawableC1Ev>
 8012238:	4a05      	ldr	r2, [pc, #20]	; (8012250 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2200      	movs	r2, #0
 8012242:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	0802fea8 	.word	0x0802fea8

08012254 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8012260:	4618      	mov	r0, r3
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 801228c:	4a06      	ldr	r2, [pc, #24]	; (80122a8 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	601a      	str	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	2200      	movs	r2, #0
 8012296:	809a      	strh	r2, [r3, #4]
    {
    }
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4618      	mov	r0, r3
 801229c:	370c      	adds	r7, #12
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	0802efd4 	.word	0x0802efd4

080122ac <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80122ac:	b480      	push	{r7}
 80122ae:	b083      	sub	sp, #12
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
    {
 80122b4:	4a04      	ldr	r2, [pc, #16]	; (80122c8 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	601a      	str	r2, [r3, #0]
    }
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr
 80122c8:	0802efd4 	.word	0x0802efd4

080122cc <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
    }
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff ffe9 	bl	80122ac <_ZN8touchgfx15AbstractPainterD1Ev>
 80122da:	2108      	movs	r1, #8
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f01a fbb5 	bl	802ca4c <_ZdlPvj>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 80122f4:	2300      	movs	r3, #0
    }
 80122f6:	4618      	mov	r0, r3
 80122f8:	370c      	adds	r7, #12
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr

08012302 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 8012302:	b480      	push	{r7}
 8012304:	b083      	sub	sp, #12
 8012306:	af00      	add	r7, sp, #0
 8012308:	6078      	str	r0, [r7, #4]
 801230a:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	809a      	strh	r2, [r3, #4]
        return true;
 8012316:	2301      	movs	r3, #1
    }
 8012318:	4618      	mov	r0, r3
 801231a:	370c      	adds	r7, #12
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr

08012324 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
    {
        return;
 801232c:	bf00      	nop
    }
 801232e:	370c      	adds	r7, #12
 8012330:	46bd      	mov	sp, r7
 8012332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012336:	4770      	bx	lr

08012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
            : v(i)
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	683a      	ldr	r2, [r7, #0]
 8012346:	601a      	str	r2, [r3, #0]
        {
        }
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr

08012356 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 8012356:	b480      	push	{r7}
 8012358:	b083      	sub	sp, #12
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
        {
            return v;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
        }
 8012362:	4618      	mov	r0, r3
 8012364:	370c      	adds	r7, #12
 8012366:	46bd      	mov	sp, r7
 8012368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236c:	4770      	bx	lr

0801236e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 801236e:	b580      	push	{r7, lr}
 8012370:	b084      	sub	sp, #16
 8012372:	af00      	add	r7, sp, #0
 8012374:	60f8      	str	r0, [r7, #12]
 8012376:	607b      	str	r3, [r7, #4]
 8012378:	460b      	mov	r3, r1
 801237a:	817b      	strh	r3, [r7, #10]
 801237c:	4613      	mov	r3, r2
 801237e:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4618      	mov	r0, r3
 8012384:	f7ff fee8 	bl	8012158 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d008      	beq.n	80123a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	4618      	mov	r0, r3
 8012392:	f7ff feee 	bl	8012172 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 801239c:	2301      	movs	r3, #1
 801239e:	e000      	b.n	80123a2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80123a0:	2300      	movs	r3, #0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d002      	beq.n	80123ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80123a6:	68fa      	ldr	r2, [r7, #12]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	601a      	str	r2, [r3, #0]
        }
    }
 80123ac:	bf00      	nop
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	683a      	ldr	r2, [r7, #0]
 80123c2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80123c4:	bf00      	nop
 80123c6:	370c      	adds	r7, #12
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80123d0:	b590      	push	{r4, r7, lr}
 80123d2:	b083      	sub	sp, #12
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	333c      	adds	r3, #60	; 0x3c
 80123de:	4618      	mov	r0, r3
 80123e0:	f7ff ffb9 	bl	8012356 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80123e4:	4604      	mov	r4, r0
 80123e6:	463b      	mov	r3, r7
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7ff ffb4 	bl	8012356 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80123ee:	4603      	mov	r3, r0
 80123f0:	429c      	cmp	r4, r3
 80123f2:	bf0c      	ite	eq
 80123f4:	2301      	moveq	r3, #1
 80123f6:	2300      	movne	r3, #0
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d106      	bne.n	801240c <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f008 fcab 	bl	801ad60 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801240a:	e000      	b.n	801240e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801240c:	bf00      	nop
    }
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	bd90      	pop	{r4, r7, pc}

08012414 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	4618      	mov	r0, r3
 8012420:	f7ff ff30 	bl	8012284 <_ZN8touchgfx15AbstractPainterC1Ev>
 8012424:	4a26      	ldr	r2, [pc, #152]	; (80124c0 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	601a      	str	r2, [r3, #0]
 801242a:	2302      	movs	r3, #2
 801242c:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 801242e:	f7fe fec7 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8012432:	4603      	mov	r3, r0
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	322c      	adds	r2, #44	; 0x2c
 8012438:	6812      	ldr	r2, [r2, #0]
 801243a:	4618      	mov	r0, r3
 801243c:	4790      	blx	r2
 801243e:	4603      	mov	r3, r0
 8012440:	461a      	mov	r2, r3
 8012442:	7bfb      	ldrb	r3, [r7, #15]
 8012444:	4293      	cmp	r3, r2
 8012446:	bf0c      	ite	eq
 8012448:	2301      	moveq	r3, #1
 801244a:	2300      	movne	r3, #0
 801244c:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 801244e:	f7fe feab 	bl	80111a8 <_ZN8touchgfx3HAL11getInstanceEv>
 8012452:	4603      	mov	r3, r0
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff ff09 	bl	801226c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	bf14      	ite	ne
 8012460:	2301      	movne	r3, #1
 8012462:	2300      	moveq	r3, #0
 8012464:	b2db      	uxtb	r3, r3
 8012466:	2b00      	cmp	r3, #0
 8012468:	d01b      	beq.n	80124a2 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 801246a:	f7fe fe9d 	bl	80111a8 <_ZN8touchgfx3HAL11getInstanceEv>
 801246e:	4603      	mov	r3, r0
 8012470:	4618      	mov	r0, r3
 8012472:	f7ff fefb 	bl	801226c <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8012476:	4603      	mov	r3, r0
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	322c      	adds	r2, #44	; 0x2c
 801247c:	6812      	ldr	r2, [r2, #0]
 801247e:	4618      	mov	r0, r3
 8012480:	4790      	blx	r2
 8012482:	4603      	mov	r3, r0
 8012484:	461a      	mov	r2, r3
 8012486:	7bfb      	ldrb	r3, [r7, #15]
 8012488:	4293      	cmp	r3, r2
 801248a:	bf0c      	ite	eq
 801248c:	2301      	moveq	r3, #1
 801248e:	2300      	movne	r3, #0
 8012490:	b2da      	uxtb	r2, r3
 8012492:	7bbb      	ldrb	r3, [r7, #14]
 8012494:	4313      	orrs	r3, r2
 8012496:	b2db      	uxtb	r3, r3
 8012498:	2b00      	cmp	r3, #0
 801249a:	bf14      	ite	ne
 801249c:	2301      	movne	r3, #1
 801249e:	2300      	moveq	r3, #0
 80124a0:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 80124a2:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d105      	bne.n	80124b4 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 80124a8:	4b06      	ldr	r3, [pc, #24]	; (80124c4 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 80124aa:	4a07      	ldr	r2, [pc, #28]	; (80124c8 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 80124ac:	2128      	movs	r1, #40	; 0x28
 80124ae:	4807      	ldr	r0, [pc, #28]	; (80124cc <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 80124b0:	f01a fafa 	bl	802caa8 <__assert_func>
 80124b4:	bf00      	nop
    }
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4618      	mov	r0, r3
 80124ba:	3710      	adds	r7, #16
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	0802ef4c 	.word	0x0802ef4c
 80124c4:	0802e0c8 	.word	0x0802e0c8
 80124c8:	0802e12c 	.word	0x0802e12c
 80124cc:	0802e16c 	.word	0x0802e16c

080124d0 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
    {
 80124da:	4a08      	ldr	r2, [pc, #32]	; (80124fc <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3304      	adds	r3, #4
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7ff fc7b 	bl	8011de0 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 f827 	bl	8012540 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	0802ef38 	.word	0x0802ef38

08012500 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
    {
 8012508:	4a04      	ldr	r2, [pc, #16]	; (801251c <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	601a      	str	r2, [r3, #0]
    }
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	4618      	mov	r0, r3
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr
 801251c:	0802ef38 	.word	0x0802ef38

08012520 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
    }
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f7ff ffe9 	bl	8012500 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 801252e:	2108      	movs	r1, #8
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f01a fa8b 	bl	802ca4c <_ZdlPvj>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4618      	mov	r0, r3
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	683a      	ldr	r2, [r7, #0]
 801254e:	605a      	str	r2, [r3, #4]
    }
 8012550:	bf00      	nop
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	4a05      	ldr	r2, [pc, #20]	; (801257c <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	601a      	str	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	f7ff fe9d 	bl	80122ac <_ZN8touchgfx15AbstractPainterD1Ev>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4618      	mov	r0, r3
 8012576:	3708      	adds	r7, #8
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	0802ef4c 	.word	0x0802ef4c

08012580 <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f7ff ffe7 	bl	801255c <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 801258e:	2108      	movs	r1, #8
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f01a fa5b 	bl	802ca4c <_ZdlPvj>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7ff ff31 	bl	8012414 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	3308      	adds	r3, #8
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff ff89 	bl	80124d0 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80125be:	4a05      	ldr	r2, [pc, #20]	; (80125d4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	601a      	str	r2, [r3, #0]
 80125c4:	4a04      	ldr	r2, [pc, #16]	; (80125d8 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	609a      	str	r2, [r3, #8]
    {
    }
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	0803021c 	.word	0x0803021c
 80125d8:	08030240 	.word	0x08030240

080125dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 80125dc:	b580      	push	{r7, lr}
 80125de:	b086      	sub	sp, #24
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3308      	adds	r3, #8
 80125ea:	6839      	ldr	r1, [r7, #0]
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7ff ffa7 	bl	8012540 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 80125f6:	f107 0314 	add.w	r3, r7, #20
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7ff fc0d 	bl	8011e1a <_ZNK8touchgfx9colortypecvmEv>
 8012600:	4603      	mov	r3, r0
 8012602:	0c1b      	lsrs	r3, r3, #16
 8012604:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	741a      	strb	r2, [r3, #16]
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 801260e:	f107 0310 	add.w	r3, r7, #16
 8012612:	4618      	mov	r0, r3
 8012614:	f7ff fc01 	bl	8011e1a <_ZNK8touchgfx9colortypecvmEv>
 8012618:	4603      	mov	r3, r0
 801261a:	0a1b      	lsrs	r3, r3, #8
 801261c:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	745a      	strb	r2, [r3, #17]
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8012626:	f107 030c 	add.w	r3, r7, #12
 801262a:	4618      	mov	r0, r3
 801262c:	f7ff fbf5 	bl	8011e1a <_ZNK8touchgfx9colortypecvmEv>
 8012630:	4603      	mov	r3, r0
 8012632:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	749a      	strb	r2, [r3, #18]
    }
 8012638:	bf00      	nop
 801263a:	3718      	adds	r7, #24
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8012640:	f1a0 0008 	sub.w	r0, r0, #8
 8012644:	e7ca      	b.n	80125dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

08012648 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	4618      	mov	r0, r3
 8012654:	f7ff fc34 	bl	8011ec0 <_ZN8touchgfx8DrawableC1Ev>
 8012658:	4a03      	ldr	r2, [pc, #12]	; (8012668 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	0802ef6c 	.word	0x0802ef6c

0801266c <_ZN8touchgfx6WidgetD1Ev>:
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	4a05      	ldr	r2, [pc, #20]	; (801268c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	601a      	str	r2, [r3, #0]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4618      	mov	r0, r3
 801267e:	f7ff fc4f 	bl	8011f20 <_ZN8touchgfx8DrawableD1Ev>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	0802ef6c 	.word	0x0802ef6c

08012690 <_ZN8touchgfx6WidgetD0Ev>:
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7ff ffe7 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 801269e:	2128      	movs	r1, #40	; 0x28
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f01a f9d3 	bl	802ca4c <_ZdlPvj>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	3708      	adds	r7, #8
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	4618      	mov	r0, r3
 80126bc:	2326      	movs	r3, #38	; 0x26
 80126be:	461a      	mov	r2, r3
 80126c0:	2100      	movs	r1, #0
 80126c2:	f01a fa7d 	bl	802cbc0 <memset>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff ffbd 	bl	8012648 <_ZN8touchgfx6WidgetC1Ev>
 80126ce:	4a0a      	ldr	r2, [pc, #40]	; (80126f8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	629a      	str	r2, [r3, #40]	; 0x28
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2101      	movs	r1, #1
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7ff fd26 	bl	8012138 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4618      	mov	r0, r3
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	08030468 	.word	0x08030468

080126fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
 8012704:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801270c:	bf00      	nop
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	4a05      	ldr	r2, [pc, #20]	; (8012738 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff ff9f 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4618      	mov	r0, r3
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	08030468 	.word	0x08030468

0801273c <_ZN8touchgfx14AbstractButtonD0Ev>:
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff ffe7 	bl	8012718 <_ZN8touchgfx14AbstractButtonD1Ev>
 801274a:	2130      	movs	r1, #48	; 0x30
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f01a f97d 	bl	802ca4c <_ZdlPvj>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4618      	mov	r0, r3
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}

0801275c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4618      	mov	r0, r3
 8012768:	f7ff ffa2 	bl	80126b0 <_ZN8touchgfx14AbstractButtonC1Ev>
 801276c:	4a0c      	ldr	r2, [pc, #48]	; (80127a0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	332e      	adds	r3, #46	; 0x2e
 8012776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801277a:	4618      	mov	r0, r3
 801277c:	f7ff fb90 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3330      	adds	r3, #48	; 0x30
 8012784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012788:	4618      	mov	r0, r3
 801278a:	f7ff fb89 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	22ff      	movs	r2, #255	; 0xff
 8012792:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	4618      	mov	r0, r3
 801279a:	3708      	adds	r7, #8
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	0803064c 	.word	0x0803064c

080127a4 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	460b      	mov	r3, r1
 80127ae:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 80127b0:	4a06      	ldr	r2, [pc, #24]	; (80127cc <_ZN8touchgfx9TypedTextC1Et+0x28>)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	887a      	ldrh	r2, [r7, #2]
 80127ba:	809a      	strh	r2, [r3, #4]
    }
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	4618      	mov	r0, r3
 80127c0:	370c      	adds	r7, #12
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	0802ecd0 	.word	0x0802ecd0

080127d0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	2326      	movs	r3, #38	; 0x26
 80127de:	461a      	mov	r2, r3
 80127e0:	2100      	movs	r1, #0
 80127e2:	f01a f9ed 	bl	802cbc0 <memset>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff ff2d 	bl	8012648 <_ZN8touchgfx6WidgetC1Ev>
 80127ee:	4a16      	ldr	r2, [pc, #88]	; (8012848 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	3328      	adds	r3, #40	; 0x28
 80127f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7ff ffd1 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	3330      	adds	r3, #48	; 0x30
 8012806:	2100      	movs	r1, #0
 8012808:	4618      	mov	r0, r3
 801280a:	f7ff faf7 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2200      	movs	r2, #0
 8012812:	869a      	strh	r2, [r3, #52]	; 0x34
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	22ff      	movs	r2, #255	; 0xff
 8012818:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	333c      	adds	r3, #60	; 0x3c
 8012838:	4618      	mov	r0, r3
 801283a:	f000 f807 	bl	801284c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}
 8012848:	08030554 	.word	0x08030554

0801284c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af02      	add	r7, sp, #8
 8012852:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f04f 33ff 	mov.w	r3, #4294967295
 801285a:	9300      	str	r3, [sp, #0]
 801285c:	f04f 33ff 	mov.w	r3, #4294967295
 8012860:	2200      	movs	r2, #0
 8012862:	2100      	movs	r1, #0
 8012864:	f7ff fafc 	bl	8011e60 <_ZN8touchgfx4RectC1Essss>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2200      	movs	r2, #0
 801286c:	609a      	str	r2, [r3, #8]
        {
        }
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	4618      	mov	r0, r3
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <_ZN23Back_menu_containerBase12Back_clickedEv>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void Back_clicked()
 8012878:	b480      	push	{r7}
 801287a:	b083      	sub	sp, #12
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Back_menu_container
    }
 8012880:	bf00      	nop
 8012882:	370c      	adds	r7, #12
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	4a05      	ldr	r2, [pc, #20]	; (80128ac <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	601a      	str	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f7ff fb3f 	bl	8011f20 <_ZN8touchgfx8DrawableD1Ev>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	3708      	adds	r7, #8
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	0802fea8 	.word	0x0802fea8

080128b0 <_ZN8touchgfx9ContainerD0Ev>:
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff ffe7 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
 80128be:	212c      	movs	r1, #44	; 0x2c
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f01a f8c3 	bl	802ca4c <_ZdlPvj>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <_ZN23Back_menu_containerBaseC1Ev>:
#include <gui_generated/containers/Back_menu_containerBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Back_menu_containerBase::Back_menu_containerBase() :
 80128d0:	b590      	push	{r4, r7, lr}
 80128d2:	b099      	sub	sp, #100	; 0x64
 80128d4:	af02      	add	r7, sp, #8
 80128d6:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Back_menu_containerBase::buttonCallbackHandler)
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff fca4 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 80128e0:	4a93      	ldr	r2, [pc, #588]	; (8012b30 <_ZN23Back_menu_containerBaseC1Ev+0x260>)
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	601a      	str	r2, [r3, #0]
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	332c      	adds	r3, #44	; 0x2c
 80128ea:	4618      	mov	r0, r3
 80128ec:	f008 fa18 	bl	801ad20 <_ZN8touchgfx4LineC1Ev>
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80128f6:	f107 0320 	add.w	r3, r7, #32
 80128fa:	2100      	movs	r1, #0
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7ff fa7d 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8012902:	6a39      	ldr	r1, [r7, #32]
 8012904:	4620      	mov	r0, r4
 8012906:	f7ff fe4b 	bl	80125a0 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	33b0      	adds	r3, #176	; 0xb0
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff ff24 	bl	801275c <_ZN8touchgfx6ButtonC1Ev>
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	33e4      	adds	r3, #228	; 0xe4
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff ff59 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	f503 7096 	add.w	r0, r3, #300	; 0x12c
 8012924:	4b83      	ldr	r3, [pc, #524]	; (8012b34 <_ZN23Back_menu_containerBaseC1Ev+0x264>)
 8012926:	627b      	str	r3, [r7, #36]	; 0x24
 8012928:	2300      	movs	r3, #0
 801292a:	62bb      	str	r3, [r7, #40]	; 0x28
 801292c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012930:	cb0c      	ldmia	r3, {r2, r3}
 8012932:	6979      	ldr	r1, [r7, #20]
 8012934:	f000 f96c 	bl	8012c10 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    setWidth(480);
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801293e:	4618      	mov	r0, r3
 8012940:	f7ff fb89 	bl	8012056 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(68);
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	2144      	movs	r1, #68	; 0x44
 8012948:	4618      	mov	r0, r3
 801294a:	f7ff fb93 	bl	8012074 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 9, 480, 25);
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8012954:	2319      	movs	r3, #25
 8012956:	9300      	str	r3, [sp, #0]
 8012958:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801295c:	2209      	movs	r2, #9
 801295e:	2100      	movs	r1, #0
 8012960:	f7ff fb1c 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(70, 105, 138));
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 801296a:	2346      	movs	r3, #70	; 0x46
 801296c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8012970:	2369      	movs	r3, #105	; 0x69
 8012972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8012976:	238a      	movs	r3, #138	; 0x8a
 8012978:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 801297c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012980:	041b      	lsls	r3, r3, #16
 8012982:	461a      	mov	r2, r3
 8012984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8012988:	021b      	lsls	r3, r3, #8
 801298a:	431a      	orrs	r2, r3
 801298c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012990:	4313      	orrs	r3, r2
 8012992:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801299a:	4611      	mov	r1, r2
 801299c:	4618      	mov	r0, r3
 801299e:	f7ff fa2d 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 80129a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129a4:	4619      	mov	r1, r3
 80129a6:	4620      	mov	r0, r4
 80129a8:	f7ff fe18 	bl	80125dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	339c      	adds	r3, #156	; 0x9c
 80129b6:	4619      	mov	r1, r3
 80129b8:	4610      	mov	r0, r2
 80129ba:	f7ff fcfb 	bl	80123b4 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(5, 4);
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	332c      	adds	r3, #44	; 0x2c
 80129c2:	2204      	movs	r2, #4
 80129c4:	2105      	movs	r1, #5
 80129c6:	4618      	mov	r0, r3
 80129c8:	f000 f942 	bl	8012c50 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(475, 4);
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	332c      	adds	r3, #44	; 0x2c
 80129d0:	2204      	movs	r2, #4
 80129d2:	f240 11db 	movw	r1, #475	; 0x1db
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 f960 	bl	8012c9c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(5);
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	332c      	adds	r3, #44	; 0x2c
 80129e0:	2105      	movs	r1, #5
 80129e2:	4618      	mov	r0, r3
 80129e4:	f000 f980 	bl	8012ce8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	332c      	adds	r3, #44	; 0x2c
 80129ec:	2101      	movs	r1, #1
 80129ee:	4618      	mov	r0, r3
 80129f0:	f008 fac2 	bl	801af78 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    button1.setXY(123, 21);
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	33b0      	adds	r3, #176	; 0xb0
 80129f8:	2215      	movs	r2, #21
 80129fa:	217b      	movs	r1, #123	; 0x7b
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7ff fb0c 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_SMALL_IN_MENU_OFF_ID), touchgfx::Bitmap(BITMAP_BUTTON_SMALL_IN_MENU_ON_ID));
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8012a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a0c:	210a      	movs	r1, #10
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ff fa46 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8012a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012a18:	210b      	movs	r1, #11
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	f7ff fa40 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8012a20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a28:	4619      	mov	r1, r3
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f009 f874 	bl	801bb18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	4610      	mov	r0, r2
 8012a40:	f7ff fe5c 	bl	80126fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(194, 30);
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	33e4      	adds	r3, #228	; 0xe4
 8012a48:	221e      	movs	r2, #30
 8012a4a:	21c2      	movs	r1, #194	; 0xc2
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff fae4 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(33, 133, 126));
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8012a58:	2321      	movs	r3, #33	; 0x21
 8012a5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8012a5e:	2385      	movs	r3, #133	; 0x85
 8012a60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8012a64:	237e      	movs	r3, #126	; 0x7e
 8012a66:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8012a6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8012a6e:	041b      	lsls	r3, r3, #16
 8012a70:	461a      	mov	r2, r3
 8012a72:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8012a76:	021b      	lsls	r3, r3, #8
 8012a78:	431a      	orrs	r2, r3
 8012a7a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012a84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012a88:	4611      	mov	r1, r2
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	f7ff f9b6 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8012a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a92:	64fc      	str	r4, [r7, #76]	; 0x4c
 8012a94:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8012a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a98:	69fa      	ldr	r2, [r7, #28]
 8012a9a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012a9c:	bf00      	nop
    textArea1.setLinespacing(0);
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	33e4      	adds	r3, #228	; 0xe4
 8012aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        linespace = space;
 8012aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012aac:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8012ab0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	3384      	adds	r3, #132	; 0x84
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8012abc:	463a      	mov	r2, r7
 8012abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ac0:	4610      	mov	r0, r2
 8012ac2:	4798      	blx	r3
 8012ac4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012ac8:	463a      	mov	r2, r7
 8012aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8012acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012ad0:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_WSTECZ));
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
 8012ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012adc:	2131      	movs	r1, #49	; 0x31
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7ff fe60 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8012ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012ae8:	4619      	mov	r1, r3
 8012aea:	4620      	mov	r0, r4
 8012aec:	f008 ffc2 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012af0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7fe f8cd 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8012afa:	697a      	ldr	r2, [r7, #20]
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	332c      	adds	r3, #44	; 0x2c
 8012b00:	4619      	mov	r1, r3
 8012b02:	4610      	mov	r0, r2
 8012b04:	f005 fc8e 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(button1);
 8012b08:	697a      	ldr	r2, [r7, #20]
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	33b0      	adds	r3, #176	; 0xb0
 8012b0e:	4619      	mov	r1, r3
 8012b10:	4610      	mov	r0, r2
 8012b12:	f005 fc87 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	33e4      	adds	r3, #228	; 0xe4
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	4610      	mov	r0, r2
 8012b20:	f005 fc80 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	4618      	mov	r0, r3
 8012b28:	375c      	adds	r7, #92	; 0x5c
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd90      	pop	{r4, r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	0802ee70 	.word	0x0802ee70
 8012b34:	08012bc7 	.word	0x08012bc7

08012b38 <_ZN23Back_menu_containerBaseD1Ev>:

Back_menu_containerBase::~Back_menu_containerBase()
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	4a12      	ldr	r2, [pc, #72]	; (8012b8c <_ZN23Back_menu_containerBaseD1Ev+0x54>)
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	601a      	str	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f000 f903 	bl	8012d58 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvED1Ev>
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	33e4      	adds	r3, #228	; 0xe4
 8012b56:	4618      	mov	r0, r3
 8012b58:	f000 f9ba 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	33b0      	adds	r3, #176	; 0xb0
 8012b60:	4618      	mov	r0, r3
 8012b62:	f000 f993 	bl	8012e8c <_ZN8touchgfx6ButtonD1Ev>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	339c      	adds	r3, #156	; 0x9c
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f000 f95a 	bl	8012e24 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	332c      	adds	r3, #44	; 0x2c
 8012b74:	4618      	mov	r0, r3
 8012b76:	f000 f933 	bl	8012de0 <_ZN8touchgfx4LineD1Ev>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7ff fe85 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
{

}
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	3708      	adds	r7, #8
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0802ee70 	.word	0x0802ee70

08012b90 <_ZN23Back_menu_containerBaseD0Ev>:
Back_menu_containerBase::~Back_menu_containerBase()
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
}
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f7ff ffcd 	bl	8012b38 <_ZN23Back_menu_containerBaseD1Ev>
 8012b9e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f019 ff52 	bl	802ca4c <_ZdlPvj>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	4618      	mov	r0, r3
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <_ZN23Back_menu_containerBase10initializeEv>:

void Back_menu_containerBase::initialize()
{
 8012bb2:	b480      	push	{r7}
 8012bb4:	b083      	sub	sp, #12
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]

}
 8012bba:	bf00      	nop
 8012bbc:	370c      	adds	r7, #12
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc4:	4770      	bx	lr

08012bc6 <_ZN23Back_menu_containerBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Back_menu_containerBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8012bc6:	b580      	push	{r7, lr}
 8012bc8:	b082      	sub	sp, #8
 8012bca:	af00      	add	r7, sp, #0
 8012bcc:	6078      	str	r0, [r7, #4]
 8012bce:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	33b0      	adds	r3, #176	; 0xb0
 8012bd4:	683a      	ldr	r2, [r7, #0]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d105      	bne.n	8012be6 <_ZN23Back_menu_containerBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //back_inter
        //When button1 clicked call virtual function
        //Call Back_clicked
        Back_clicked();
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	338c      	adds	r3, #140	; 0x8c
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	4798      	blx	r3
    }
}
 8012be6:	bf00      	nop
 8012be8:	3708      	adds	r7, #8
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
	...

08012bf0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8012bf0:	b480      	push	{r7}
 8012bf2:	b083      	sub	sp, #12
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
 8012bf8:	4a04      	ldr	r2, [pc, #16]	; (8012c0c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4618      	mov	r0, r3
 8012c02:	370c      	adds	r7, #12
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr
 8012c0c:	0802ef20 	.word	0x0802ef20

08012c10 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b084      	sub	sp, #16
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	4639      	mov	r1, r7
 8012c1c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7ff ffe4 	bl	8012bf0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8012c28:	4a08      	ldr	r2, [pc, #32]	; (8012c4c <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	601a      	str	r2, [r3, #0]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	605a      	str	r2, [r3, #4]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	3308      	adds	r3, #8
 8012c38:	463a      	mov	r2, r7
 8012c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	4618      	mov	r0, r3
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	0802ef08 	.word	0x0802ef08

08012c50 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b089      	sub	sp, #36	; 0x24
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	60b9      	str	r1, [r7, #8]
 8012c5a:	607a      	str	r2, [r7, #4]
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	015a      	lsls	r2, r3, #5
 8012c64:	f107 0314 	add.w	r3, r7, #20
 8012c68:	4611      	mov	r1, r2
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff fb64 	bl	8012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	461c      	mov	r4, r3
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	61fb      	str	r3, [r7, #28]
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	015a      	lsls	r2, r3, #5
 8012c7c:	f107 0310 	add.w	r3, r7, #16
 8012c80:	4611      	mov	r1, r2
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7ff fb58 	bl	8012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012c88:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	4621      	mov	r1, r4
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f008 f95c 	bl	801af4c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8012c94:	bf00      	nop
 8012c96:	3724      	adds	r7, #36	; 0x24
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd90      	pop	{r4, r7, pc}

08012c9c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8012c9c:	b590      	push	{r4, r7, lr}
 8012c9e:	b089      	sub	sp, #36	; 0x24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	607a      	str	r2, [r7, #4]
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	61bb      	str	r3, [r7, #24]
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	015a      	lsls	r2, r3, #5
 8012cb0:	f107 0314 	add.w	r3, r7, #20
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff fb3e 	bl	8012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	461c      	mov	r4, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	61fb      	str	r3, [r7, #28]
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	015a      	lsls	r2, r3, #5
 8012cc8:	f107 0310 	add.w	r3, r7, #16
 8012ccc:	4611      	mov	r1, r2
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7ff fb32 	bl	8012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012cd4:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	4621      	mov	r1, r4
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f008 f941 	bl	801af62 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8012ce0:	bf00      	nop
 8012ce2:	3724      	adds	r7, #36	; 0x24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd90      	pop	{r4, r7, pc}

08012ce8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	60fb      	str	r3, [r7, #12]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	015a      	lsls	r2, r3, #5
 8012cfa:	f107 0308 	add.w	r3, r7, #8
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fb19 	bl	8012338 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8012d06:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8012d08:	4619      	mov	r1, r3
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f7ff fb60 	bl	80123d0 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8012d10:	bf00      	nop
 8012d12:	3710      	adds	r7, #16
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
    }
 8012d20:	4a04      	ldr	r2, [pc, #16]	; (8012d34 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	601a      	str	r2, [r3, #0]
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr
 8012d34:	0802ef20 	.word	0x0802ef20

08012d38 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
    }
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7ff ffe9 	bl	8012d18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012d46:	2104      	movs	r1, #4
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f019 fe7f 	bl	802ca4c <_ZdlPvj>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}

08012d58 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	4a05      	ldr	r2, [pc, #20]	; (8012d78 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7ff ffd5 	bl	8012d18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	0802ef08 	.word	0x0802ef08

08012d7c <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvED0Ev>:
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f7ff ffe7 	bl	8012d58 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvED1Ev>
 8012d8a:	2110      	movs	r1, #16
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f019 fe5d 	bl	802ca4c <_ZdlPvj>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4618      	mov	r0, r3
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	4a05      	ldr	r2, [pc, #20]	; (8012dbc <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff fc5d 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	4618      	mov	r0, r3
 8012db6:	3708      	adds	r7, #8
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	08030254 	.word	0x08030254

08012dc0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7ff ffe7 	bl	8012d9c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012dce:	212c      	movs	r1, #44	; 0x2c
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f019 fe3b 	bl	802ca4c <_ZdlPvj>
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3708      	adds	r7, #8
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	4a05      	ldr	r2, [pc, #20]	; (8012e00 <_ZN8touchgfx4LineD1Ev+0x20>)
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	601a      	str	r2, [r3, #0]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7ff ffd3 	bl	8012d9c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	080303f0 	.word	0x080303f0

08012e04 <_ZN8touchgfx4LineD0Ev>:
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7ff ffe7 	bl	8012de0 <_ZN8touchgfx4LineD1Ev>
 8012e12:	2170      	movs	r1, #112	; 0x70
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f019 fe19 	bl	802ca4c <_ZdlPvj>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3708      	adds	r7, #8
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	4a09      	ldr	r2, [pc, #36]	; (8012e54 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	601a      	str	r2, [r3, #0]
 8012e32:	4a09      	ldr	r2, [pc, #36]	; (8012e58 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	609a      	str	r2, [r3, #8]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	3308      	adds	r3, #8
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7ff fb5f 	bl	8012500 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff fb89 	bl	801255c <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	0803021c 	.word	0x0803021c
 8012e58:	08030240 	.word	0x08030240

08012e5c <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 8012e5c:	f1a0 0008 	sub.w	r0, r0, #8
 8012e60:	e7e0      	b.n	8012e24 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8012e62:	bf00      	nop

08012e64 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff ffd9 	bl	8012e24 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8012e72:	2114      	movs	r1, #20
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	f019 fde9 	bl	802ca4c <_ZdlPvj>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}

08012e84 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 8012e84:	f1a0 0008 	sub.w	r0, r0, #8
 8012e88:	e7ec      	b.n	8012e64 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

08012e8c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	4a05      	ldr	r2, [pc, #20]	; (8012eac <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	601a      	str	r2, [r3, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fc3b 	bl	8012718 <_ZN8touchgfx14AbstractButtonD1Ev>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	0803064c 	.word	0x0803064c

08012eb0 <_ZN8touchgfx6ButtonD0Ev>:
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff ffe7 	bl	8012e8c <_ZN8touchgfx6ButtonD1Ev>
 8012ebe:	2134      	movs	r1, #52	; 0x34
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f019 fdc3 	bl	802ca4c <_ZdlPvj>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}

08012ed0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	4a08      	ldr	r2, [pc, #32]	; (8012efc <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	3328      	adds	r3, #40	; 0x28
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fd fed6 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fbbe 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	08030554 	.word	0x08030554

08012f00 <_ZN8touchgfx8TextAreaD0Ev>:
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff ffe1 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8012f0e:	2148      	movs	r1, #72	; 0x48
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f019 fd9b 	bl	802ca4c <_ZdlPvj>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	68d2      	ldr	r2, [r2, #12]
 8012f32:	1052      	asrs	r2, r2, #1
 8012f34:	1898      	adds	r0, r3, r2
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	68db      	ldr	r3, [r3, #12]
 8012f3a:	f003 0301 	and.w	r3, r3, #1
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d102      	bne.n	8012f48 <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	689b      	ldr	r3, [r3, #8]
 8012f46:	e00a      	b.n	8012f5e <_ZN8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	687a      	ldr	r2, [r7, #4]
 8012f4e:	68d2      	ldr	r2, [r2, #12]
 8012f50:	1052      	asrs	r2, r2, #1
 8012f52:	4413      	add	r3, r2
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	6892      	ldr	r2, [r2, #8]
 8012f5a:	4413      	add	r3, r2
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	4798      	blx	r3
    }
 8012f62:	bf00      	nop
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}

08012f6a <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8012f6a:	b480      	push	{r7}
 8012f6c:	b083      	sub	sp, #12
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d010      	beq.n	8012f9c <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	689b      	ldr	r3, [r3, #8]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d107      	bne.n	8012f92 <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	68db      	ldr	r3, [r3, #12]
 8012f86:	f003 0301 	and.w	r3, r3, #1
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d101      	bne.n	8012f92 <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	e000      	b.n	8012f94 <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8012f92:	2300      	movs	r3, #0
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	d001      	beq.n	8012f9c <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e000      	b.n	8012f9e <_ZNK8touchgfx8CallbackI23Back_menu_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8012f9c:	2300      	movs	r3, #0
    }
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	370c      	adds	r7, #12
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa8:	4770      	bx	lr

08012faa <_ZN26Menu_buttons_containerBase11clickActionEv>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void clickAction()
 8012faa:	b480      	push	{r7}
 8012fac:	b083      	sub	sp, #12
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Menu_buttons_container
    }
 8012fb2:	bf00      	nop
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <_ZN26Menu_buttons_containerBaseC1Ev>:
#include <gui_generated/containers/Menu_buttons_containerBase.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Menu_buttons_containerBase::Menu_buttons_containerBase() :
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b093      	sub	sp, #76	; 0x4c
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Menu_buttons_containerBase::buttonCallbackHandler)
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff f92c 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 8012fd0:	4a5c      	ldr	r2, [pc, #368]	; (8013144 <_ZN26Menu_buttons_containerBaseC1Ev+0x184>)
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	332c      	adds	r3, #44	; 0x2c
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7ff fbbe 	bl	801275c <_ZN8touchgfx6ButtonC1Ev>
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	3360      	adds	r3, #96	; 0x60
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff fbf3 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8012ff0:	4b55      	ldr	r3, [pc, #340]	; (8013148 <_ZN26Menu_buttons_containerBaseC1Ev+0x188>)
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	623b      	str	r3, [r7, #32]
 8012ff8:	f107 031c 	add.w	r3, r7, #28
 8012ffc:	cb0c      	ldmia	r3, {r2, r3}
 8012ffe:	6979      	ldr	r1, [r7, #20]
 8013000:	f000 f8f4 	bl	80131ec <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    setWidth(480);
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff f823 	bl	8012056 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(54);
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	2136      	movs	r1, #54	; 0x36
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff f82d 	bl	8012074 <_ZN8touchgfx8Drawable9setHeightEs>
    button1.setXY(20, 6);
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	332c      	adds	r3, #44	; 0x2c
 801301e:	2206      	movs	r2, #6
 8013020:	2114      	movs	r1, #20
 8013022:	4618      	mov	r0, r3
 8013024:	f7fe fff9 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_IN_MENU_OFF_ID), touchgfx::Bitmap(BITMAP_BUTTON_IN_MENU_ON_ID));
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801302e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013032:	2106      	movs	r1, #6
 8013034:	4618      	mov	r0, r3
 8013036:	f7fe ff33 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 801303a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801303e:	2107      	movs	r1, #7
 8013040:	4618      	mov	r0, r3
 8013042:	f7fe ff2d 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801304a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801304e:	4619      	mov	r1, r3
 8013050:	4620      	mov	r0, r4
 8013052:	f008 fd61 	bl	801bb18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	33a8      	adds	r3, #168	; 0xa8
 8013060:	4619      	mov	r1, r3
 8013062:	4610      	mov	r0, r2
 8013064:	f7ff fb4a 	bl	80126fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textarea.setXY(36, 15);
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	3360      	adds	r3, #96	; 0x60
 801306c:	220f      	movs	r2, #15
 801306e:	2124      	movs	r1, #36	; 0x24
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe ffd2 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textarea.setColor(touchgfx::Color::getColorFromRGB(31, 180, 194));
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	f103 0460 	add.w	r4, r3, #96	; 0x60
 801307c:	231f      	movs	r3, #31
 801307e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8013082:	23b4      	movs	r3, #180	; 0xb4
 8013084:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8013088:	23c2      	movs	r3, #194	; 0xc2
 801308a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801308e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013092:	041b      	lsls	r3, r3, #16
 8013094:	461a      	mov	r2, r3
 8013096:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801309a:	021b      	lsls	r3, r3, #8
 801309c:	431a      	orrs	r2, r3
 801309e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80130a2:	4313      	orrs	r3, r2
 80130a4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80130a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80130ac:	4611      	mov	r1, r2
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fe fea4 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 80130b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130b6:	63fc      	str	r4, [r7, #60]	; 0x3c
 80130b8:	61bb      	str	r3, [r7, #24]
        color = newColor;
 80130ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130bc:	69ba      	ldr	r2, [r7, #24]
 80130be:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80130c0:	bf00      	nop
    textarea.setLinespacing(0);
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	3360      	adds	r3, #96	; 0x60
 80130c6:	647b      	str	r3, [r7, #68]	; 0x44
 80130c8:	2300      	movs	r3, #0
 80130ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 80130ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130d4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80130d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	3384      	adds	r3, #132	; 0x84
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80130e0:	463a      	mov	r2, r7
 80130e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80130e4:	4610      	mov	r0, r2
 80130e6:	4798      	blx	r3
 80130e8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80130ec:	463a      	mov	r2, r7
 80130ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80130f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80130f4:	bf00      	nop
    textarea.setTypedText(touchgfx::TypedText(T_MENU_TITLE));
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80130fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013100:	212a      	movs	r1, #42	; 0x2a
 8013102:	4618      	mov	r0, r3
 8013104:	f7ff fb4e 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801310c:	4619      	mov	r1, r3
 801310e:	4620      	mov	r0, r4
 8013110:	f008 fcb0 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013118:	4618      	mov	r0, r3
 801311a:	f7fd fdbb 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>

    add(button1);
 801311e:	697a      	ldr	r2, [r7, #20]
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	332c      	adds	r3, #44	; 0x2c
 8013124:	4619      	mov	r1, r3
 8013126:	4610      	mov	r0, r2
 8013128:	f005 f97c 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textarea);
 801312c:	697a      	ldr	r2, [r7, #20]
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	3360      	adds	r3, #96	; 0x60
 8013132:	4619      	mov	r1, r3
 8013134:	4610      	mov	r0, r2
 8013136:	f005 f975 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	4618      	mov	r0, r3
 801313e:	374c      	adds	r7, #76	; 0x4c
 8013140:	46bd      	mov	sp, r7
 8013142:	bd90      	pop	{r4, r7, pc}
 8013144:	0802eff4 	.word	0x0802eff4
 8013148:	080131c5 	.word	0x080131c5

0801314c <_ZN26Menu_buttons_containerBaseD1Ev>:

Menu_buttons_containerBase::~Menu_buttons_containerBase()
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	4a0d      	ldr	r2, [pc, #52]	; (801318c <_ZN26Menu_buttons_containerBaseD1Ev+0x40>)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	601a      	str	r2, [r3, #0]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	33a8      	adds	r3, #168	; 0xa8
 801315e:	4618      	mov	r0, r3
 8013160:	f000 f864 	bl	801322c <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvED1Ev>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3360      	adds	r3, #96	; 0x60
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff feb1 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	332c      	adds	r3, #44	; 0x2c
 8013172:	4618      	mov	r0, r3
 8013174:	f7ff fe8a 	bl	8012e8c <_ZN8touchgfx6ButtonD1Ev>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f7ff fb86 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
{

}
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	4618      	mov	r0, r3
 8013184:	3708      	adds	r7, #8
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	0802eff4 	.word	0x0802eff4

08013190 <_ZN26Menu_buttons_containerBaseD0Ev>:
Menu_buttons_containerBase::~Menu_buttons_containerBase()
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
}
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff ffd7 	bl	801314c <_ZN26Menu_buttons_containerBaseD1Ev>
 801319e:	21b8      	movs	r1, #184	; 0xb8
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f019 fc53 	bl	802ca4c <_ZdlPvj>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	4618      	mov	r0, r3
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <_ZN26Menu_buttons_containerBase10initializeEv>:

void Menu_buttons_containerBase::initialize()
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]

}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <_ZN26Menu_buttons_containerBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Menu_buttons_containerBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	332c      	adds	r3, #44	; 0x2c
 80131d2:	683a      	ldr	r2, [r7, #0]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d105      	bne.n	80131e4 <_ZN26Menu_buttons_containerBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //clickInteraction
        //When button1 clicked call virtual function
        //Call clickAction
        clickAction();
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	338c      	adds	r3, #140	; 0x8c
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	4798      	blx	r3
    }
}
 80131e4:	bf00      	nop
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	4639      	mov	r1, r7
 80131f8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fcf6 	bl	8012bf0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8013204:	4a08      	ldr	r2, [pc, #32]	; (8013228 <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	601a      	str	r2, [r3, #0]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	68ba      	ldr	r2, [r7, #8]
 801320e:	605a      	str	r2, [r3, #4]
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	3308      	adds	r3, #8
 8013214:	463a      	mov	r2, r7
 8013216:	e892 0003 	ldmia.w	r2, {r0, r1}
 801321a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	0802f08c 	.word	0x0802f08c

0801322c <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
 8013234:	4a05      	ldr	r2, [pc, #20]	; (801324c <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	601a      	str	r2, [r3, #0]
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fd6b 	bl	8012d18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	4618      	mov	r0, r3
 8013246:	3708      	adds	r7, #8
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	0802f08c 	.word	0x0802f08c

08013250 <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvED0Ev>:
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7ff ffe7 	bl	801322c <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvED1Ev>
 801325e:	2110      	movs	r1, #16
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f019 fbf3 	bl	802ca4c <_ZdlPvj>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	68d2      	ldr	r2, [r2, #12]
 8013282:	1052      	asrs	r2, r2, #1
 8013284:	1898      	adds	r0, r3, r2
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	f003 0301 	and.w	r3, r3, #1
 801328e:	2b00      	cmp	r3, #0
 8013290:	d102      	bne.n	8013298 <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	689b      	ldr	r3, [r3, #8]
 8013296:	e00a      	b.n	80132ae <_ZN8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	68d2      	ldr	r2, [r2, #12]
 80132a0:	1052      	asrs	r2, r2, #1
 80132a2:	4413      	add	r3, r2
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	6892      	ldr	r2, [r2, #8]
 80132aa:	4413      	add	r3, r2
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	6839      	ldr	r1, [r7, #0]
 80132b0:	4798      	blx	r3
    }
 80132b2:	bf00      	nop
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80132ba:	b480      	push	{r7}
 80132bc:	b083      	sub	sp, #12
 80132be:	af00      	add	r7, sp, #0
 80132c0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	685b      	ldr	r3, [r3, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d010      	beq.n	80132ec <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	689b      	ldr	r3, [r3, #8]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d107      	bne.n	80132e2 <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	f003 0301 	and.w	r3, r3, #1
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d101      	bne.n	80132e2 <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80132de:	2301      	movs	r3, #1
 80132e0:	e000      	b.n	80132e4 <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80132e2:	2300      	movs	r3, #0
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d001      	beq.n	80132ec <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80132e8:	2301      	movs	r3, #1
 80132ea:	e000      	b.n	80132ee <_ZNK8touchgfx8CallbackI26Menu_buttons_containerBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80132ec:	2300      	movs	r3, #0
    }
 80132ee:	4618      	mov	r0, r3
 80132f0:	370c      	adds	r7, #12
 80132f2:	46bd      	mov	sp, r7
 80132f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f8:	4770      	bx	lr
	...

080132fc <_ZN29Menu_tree_title_containerBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/Menu_tree_title_containerBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Menu_tree_title_containerBase::Menu_tree_title_containerBase()
 80132fc:	b590      	push	{r4, r7, lr}
 80132fe:	b095      	sub	sp, #84	; 0x54
 8013300:	af02      	add	r7, sp, #8
 8013302:	6178      	str	r0, [r7, #20]
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	4618      	mov	r0, r3
 8013308:	f7fe ff8e 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 801330c:	4a72      	ldr	r2, [pc, #456]	; (80134d8 <_ZN29Menu_tree_title_containerBaseC1Ev+0x1dc>)
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	332c      	adds	r3, #44	; 0x2c
 8013316:	4618      	mov	r0, r3
 8013318:	f007 fd02 	bl	801ad20 <_ZN8touchgfx4LineC1Ev>
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8013322:	f107 0320 	add.w	r3, r7, #32
 8013326:	2100      	movs	r1, #0
 8013328:	4618      	mov	r0, r3
 801332a:	f7fe fd67 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 801332e:	6a39      	ldr	r1, [r7, #32]
 8013330:	4620      	mov	r0, r4
 8013332:	f7ff f935 	bl	80125a0 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	33b0      	adds	r3, #176	; 0xb0
 801333a:	4618      	mov	r0, r3
 801333c:	f7ff fa48 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(480);
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013346:	4618      	mov	r0, r3
 8013348:	f7fe fe85 	bl	8012056 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(68);
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	2144      	movs	r1, #68	; 0x44
 8013350:	4618      	mov	r0, r3
 8013352:	f7fe fe8f 	bl	8012074 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 56, 480, 25);
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801335c:	2319      	movs	r3, #25
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013364:	2238      	movs	r2, #56	; 0x38
 8013366:	2100      	movs	r1, #0
 8013368:	f7fe fe18 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(70, 105, 138));
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8013372:	2346      	movs	r3, #70	; 0x46
 8013374:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8013378:	2369      	movs	r3, #105	; 0x69
 801337a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801337e:	238a      	movs	r3, #138	; 0x8a
 8013380:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8013384:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8013388:	041b      	lsls	r3, r3, #16
 801338a:	461a      	mov	r2, r3
 801338c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013390:	021b      	lsls	r3, r3, #8
 8013392:	431a      	orrs	r2, r3
 8013394:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013398:	4313      	orrs	r3, r2
 801339a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801339e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80133a2:	4611      	mov	r1, r2
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fe fd29 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	4619      	mov	r1, r3
 80133ae:	4620      	mov	r0, r4
 80133b0:	f7ff f914 	bl	80125dc <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	339c      	adds	r3, #156	; 0x9c
 80133be:	4619      	mov	r1, r3
 80133c0:	4610      	mov	r0, r2
 80133c2:	f7fe fff7 	bl	80123b4 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(5, 4);
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	332c      	adds	r3, #44	; 0x2c
 80133ca:	2204      	movs	r2, #4
 80133cc:	2105      	movs	r1, #5
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7ff fc3e 	bl	8012c50 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(475, 4);
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	332c      	adds	r3, #44	; 0x2c
 80133d8:	2204      	movs	r2, #4
 80133da:	f240 11db 	movw	r1, #475	; 0x1db
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fc5c 	bl	8012c9c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(5);
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	332c      	adds	r3, #44	; 0x2c
 80133e8:	2105      	movs	r1, #5
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff fc7c 	bl	8012ce8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	332c      	adds	r3, #44	; 0x2c
 80133f4:	2101      	movs	r1, #1
 80133f6:	4618      	mov	r0, r3
 80133f8:	f007 fdbe 	bl	801af78 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setXY(20, 22);
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	33b0      	adds	r3, #176	; 0xb0
 8013400:	2216      	movs	r2, #22
 8013402:	2114      	movs	r1, #20
 8013404:	4618      	mov	r0, r3
 8013406:	f7fe fe08 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(33, 133, 126));
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8013410:	2321      	movs	r3, #33	; 0x21
 8013412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8013416:	2385      	movs	r3, #133	; 0x85
 8013418:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 801341c:	237e      	movs	r3, #126	; 0x7e
 801341e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8013422:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013426:	041b      	lsls	r3, r3, #16
 8013428:	461a      	mov	r2, r3
 801342a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801342e:	021b      	lsls	r3, r3, #8
 8013430:	431a      	orrs	r2, r3
 8013432:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8013436:	4313      	orrs	r3, r2
 8013438:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801343c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013440:	4611      	mov	r1, r2
 8013442:	4618      	mov	r0, r3
 8013444:	f7fe fcda 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	63fc      	str	r4, [r7, #60]	; 0x3c
 801344c:	61fb      	str	r3, [r7, #28]
        color = newColor;
 801344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013450:	69fa      	ldr	r2, [r7, #28]
 8013452:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013454:	bf00      	nop
    textArea1.setLinespacing(0);
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	33b0      	adds	r3, #176	; 0xb0
 801345a:	647b      	str	r3, [r7, #68]	; 0x44
 801345c:	2300      	movs	r3, #0
 801345e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 8013462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013464:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013468:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801346a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	3384      	adds	r3, #132	; 0x84
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8013474:	463a      	mov	r2, r7
 8013476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013478:	4610      	mov	r0, r2
 801347a:	4798      	blx	r3
 801347c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013480:	463a      	mov	r2, r7
 8013482:	ca07      	ldmia	r2, {r0, r1, r2}
 8013484:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013488:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T_MENU_TITLE));
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8013490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013494:	212a      	movs	r1, #42	; 0x2a
 8013496:	4618      	mov	r0, r3
 8013498:	f7ff f984 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 801349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134a0:	4619      	mov	r1, r3
 80134a2:	4620      	mov	r0, r4
 80134a4:	f008 fae6 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80134a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fd fbf1 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 80134b2:	697a      	ldr	r2, [r7, #20]
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	332c      	adds	r3, #44	; 0x2c
 80134b8:	4619      	mov	r1, r3
 80134ba:	4610      	mov	r0, r2
 80134bc:	f004 ffb2 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 80134c0:	697a      	ldr	r2, [r7, #20]
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	33b0      	adds	r3, #176	; 0xb0
 80134c6:	4619      	mov	r1, r3
 80134c8:	4610      	mov	r0, r2
 80134ca:	f004 ffab 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	4618      	mov	r0, r3
 80134d2:	374c      	adds	r7, #76	; 0x4c
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd90      	pop	{r4, r7, pc}
 80134d8:	0802f0a4 	.word	0x0802f0a4

080134dc <_ZN29Menu_tree_title_containerBaseD1Ev>:

Menu_tree_title_containerBase::~Menu_tree_title_containerBase()
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	4a0d      	ldr	r2, [pc, #52]	; (801351c <_ZN29Menu_tree_title_containerBaseD1Ev+0x40>)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	601a      	str	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	33b0      	adds	r3, #176	; 0xb0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fcee 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	339c      	adds	r3, #156	; 0x9c
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fc93 	bl	8012e24 <_ZN8touchgfx15PainterARGB8888D1Ev>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	332c      	adds	r3, #44	; 0x2c
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fc6c 	bl	8012de0 <_ZN8touchgfx4LineD1Ev>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4618      	mov	r0, r3
 801350c:	f7ff f9be 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
{

}
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	4618      	mov	r0, r3
 8013514:	3708      	adds	r7, #8
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	0802f0a4 	.word	0x0802f0a4

08013520 <_ZN29Menu_tree_title_containerBaseD0Ev>:
Menu_tree_title_containerBase::~Menu_tree_title_containerBase()
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
}
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ff ffd7 	bl	80134dc <_ZN29Menu_tree_title_containerBaseD1Ev>
 801352e:	21f8      	movs	r1, #248	; 0xf8
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f019 fa8b 	bl	802ca4c <_ZdlPvj>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4618      	mov	r0, r3
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <_ZN29Menu_tree_title_containerBase10initializeEv>:

void Menu_tree_title_containerBase::initialize()
{
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]

}
 8013548:	bf00      	nop
 801354a:	370c      	adds	r7, #12
 801354c:	46bd      	mov	sp, r7
 801354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013552:	4770      	bx	lr

08013554 <_ZN22Sub_menu_containerBaseC1Ev>:
/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/Sub_menu_containerBase.hpp>

Sub_menu_containerBase::Sub_menu_containerBase()
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	4618      	mov	r0, r3
 8013560:	f7fe fe62 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 8013564:	4a09      	ldr	r2, [pc, #36]	; (801358c <_ZN22Sub_menu_containerBaseC1Ev+0x38>)
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	601a      	str	r2, [r3, #0]
{
    setWidth(480);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8013570:	4618      	mov	r0, r3
 8013572:	f7fe fd70 	bl	8012056 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(669);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f240 219d 	movw	r1, #669	; 0x29d
 801357c:	4618      	mov	r0, r3
 801357e:	f7fe fd79 	bl	8012074 <_ZN8touchgfx8Drawable9setHeightEs>
}
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	0802f138 	.word	0x0802f138

08013590 <_ZN22Sub_menu_containerBaseD1Ev>:

Sub_menu_containerBase::~Sub_menu_containerBase()
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	4a05      	ldr	r2, [pc, #20]	; (80135b0 <_ZN22Sub_menu_containerBaseD1Ev+0x20>)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	601a      	str	r2, [r3, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff f973 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
{

}
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	4618      	mov	r0, r3
 80135aa:	3708      	adds	r7, #8
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	0802f138 	.word	0x0802f138

080135b4 <_ZN22Sub_menu_containerBaseD0Ev>:
Sub_menu_containerBase::~Sub_menu_containerBase()
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
}
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f7ff ffe7 	bl	8013590 <_ZN22Sub_menu_containerBaseD1Ev>
 80135c2:	212c      	movs	r1, #44	; 0x2c
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f019 fa41 	bl	802ca4c <_ZdlPvj>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <_ZN22Sub_menu_containerBase10initializeEv>:

void Sub_menu_containerBase::initialize()
{
 80135d4:	b480      	push	{r7}
 80135d6:	b083      	sub	sp, #12
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]

}
 80135dc:	bf00      	nop
 80135de:	370c      	adds	r7, #12
 80135e0:	46bd      	mov	sp, r7
 80135e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e6:	4770      	bx	lr

080135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4618      	mov	r0, r3
 80135f6:	2326      	movs	r3, #38	; 0x26
 80135f8:	461a      	mov	r2, r3
 80135fa:	2100      	movs	r1, #0
 80135fc:	f019 fae0 	bl	802cbc0 <memset>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff f820 	bl	8012648 <_ZN8touchgfx6WidgetC1Ev>
 8013608:	4a09      	ldr	r2, [pc, #36]	; (8013630 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	601a      	str	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	683a      	ldr	r2, [r7, #0]
 8013612:	8812      	ldrh	r2, [r2, #0]
 8013614:	84da      	strh	r2, [r3, #38]	; 0x26
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	22ff      	movs	r2, #255	; 0xff
 801361a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 801361e:	6839      	ldr	r1, [r7, #0]
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f008 fb2d 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	080306c0 	.word	0x080306c0

08013634 <_ZN18Test_containerBaseC1Ev>:
#include <gui_generated/containers/Test_containerBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Test_containerBase::Test_containerBase()
 8013634:	b590      	push	{r4, r7, lr}
 8013636:	b0c7      	sub	sp, #284	; 0x11c
 8013638:	af02      	add	r7, sp, #8
 801363a:	6178      	str	r0, [r7, #20]
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	4618      	mov	r0, r3
 8013640:	f7fe fdf2 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 8013644:	4ae4      	ldr	r2, [pc, #912]	; (80139d8 <_ZN18Test_containerBaseC1Ev+0x3a4>)
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	601a      	str	r2, [r3, #0]
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	332c      	adds	r3, #44	; 0x2c
 801364e:	4618      	mov	r0, r3
 8013650:	f005 fe62 	bl	8019318 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 801365a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801365e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe fc1c 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801366c:	4619      	mov	r1, r3
 801366e:	4620      	mov	r0, r4
 8013670:	f7ff ffba 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	f503 748a 	add.w	r4, r3, #276	; 0x114
 801367a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801367e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013682:	4618      	mov	r0, r3
 8013684:	f7fe fc0c 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801368c:	4619      	mov	r1, r3
 801368e:	4620      	mov	r0, r4
 8013690:	f7ff ffaa 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801369a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801369e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7fe fbfc 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80136a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80136ac:	4619      	mov	r1, r3
 80136ae:	4620      	mov	r0, r4
 80136b0:	f7ff ff9a 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 80136ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80136be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7fe fbec 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80136c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80136cc:	4619      	mov	r1, r3
 80136ce:	4620      	mov	r0, r4
 80136d0:	f7ff ff8a 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80136da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80136de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fe fbdc 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80136e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80136ec:	4619      	mov	r1, r3
 80136ee:	4620      	mov	r0, r4
 80136f0:	f7ff ff7a 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 80136fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80136fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013702:	4618      	mov	r0, r3
 8013704:	f7fe fbcc 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013708:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801370c:	4619      	mov	r1, r3
 801370e:	4620      	mov	r0, r4
 8013710:	f7ff ff6a 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801371a:	4618      	mov	r0, r3
 801371c:	f7ff f858 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 8013720:	697b      	ldr	r3, [r7, #20]
 8013722:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff f852 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff f84c 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801373e:	4618      	mov	r0, r3
 8013740:	f7ff f846 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f503 7344 	add.w	r3, r3, #784	; 0x310
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff f840 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
 8013750:	697b      	ldr	r3, [r7, #20]
 8013752:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff f83a 	bl	80127d0 <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(440);
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8013762:	4618      	mov	r0, r3
 8013764:	f7fe fc77 	bl	8012056 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(800);
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	f44f 7148 	mov.w	r1, #800	; 0x320
 801376e:	4618      	mov	r0, r3
 8013770:	f7fe fc80 	bl	8012074 <_ZN8touchgfx8Drawable9setHeightEs>
    scrollableContainer1.setPosition(0, 40, 440, 73);
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801377a:	2349      	movs	r3, #73	; 0x49
 801377c:	9300      	str	r3, [sp, #0]
 801377e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8013782:	2228      	movs	r2, #40	; 0x28
 8013784:	2100      	movs	r1, #0
 8013786:	f7fe fc09 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801378a:	697b      	ldr	r3, [r7, #20]
 801378c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8013790:	2300      	movs	r3, #0
 8013792:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8013796:	2300      	movs	r3, #0
 8013798:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801379c:	2300      	movs	r3, #0
 801379e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80137a2:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80137a6:	041b      	lsls	r3, r3, #16
 80137a8:	461a      	mov	r2, r3
 80137aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80137ae:	021b      	lsls	r3, r3, #8
 80137b0:	431a      	orrs	r2, r3
 80137b2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80137b6:	4313      	orrs	r3, r2
 80137b8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80137bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80137c0:	4611      	mov	r1, r2
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fe fb1a 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 80137c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80137cc:	4619      	mov	r1, r3
 80137ce:	4620      	mov	r0, r4
 80137d0:	f006 f8b7 	bl	8019942 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    image1.setXY(5, 9);
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	33e8      	adds	r3, #232	; 0xe8
 80137d8:	2209      	movs	r2, #9
 80137da:	2105      	movs	r1, #5
 80137dc:	4618      	mov	r0, r3
 80137de:	f7fe fc1c 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 80137e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137ec:	2113      	movs	r1, #19
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fe fb56 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80137f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80137f8:	4619      	mov	r1, r3
 80137fa:	4620      	mov	r0, r4
 80137fc:	f008 fa40 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1);
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	33e8      	adds	r3, #232	; 0xe8
 801380a:	4619      	mov	r1, r3
 801380c:	4610      	mov	r0, r2
 801380e:	f005 faa8 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    image1_1.setXY(80, 9);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8013818:	2209      	movs	r2, #9
 801381a:	2150      	movs	r1, #80	; 0x50
 801381c:	4618      	mov	r0, r3
 801381e:	f7fe fbfc 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1_1.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	f503 748a 	add.w	r4, r3, #276	; 0x114
 8013828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801382c:	2113      	movs	r1, #19
 801382e:	4618      	mov	r0, r3
 8013830:	f7fe fb36 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013838:	4619      	mov	r1, r3
 801383a:	4620      	mov	r0, r4
 801383c:	f008 fa20 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1_1);
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	f503 738a 	add.w	r3, r3, #276	; 0x114
 801384c:	4619      	mov	r1, r3
 801384e:	4610      	mov	r0, r2
 8013850:	f005 fa87 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    image1_2.setXY(155, 9);
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801385a:	2209      	movs	r2, #9
 801385c:	219b      	movs	r1, #155	; 0x9b
 801385e:	4618      	mov	r0, r3
 8013860:	f7fe fbdb 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1_2.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 801386a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801386e:	2113      	movs	r1, #19
 8013870:	4618      	mov	r0, r3
 8013872:	f7fe fb15 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801387a:	4619      	mov	r1, r3
 801387c:	4620      	mov	r0, r4
 801387e:	f008 f9ff 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1_2);
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801388e:	4619      	mov	r1, r3
 8013890:	4610      	mov	r0, r2
 8013892:	f005 fa66 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    image1_3.setXY(230, 9);
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801389c:	2209      	movs	r2, #9
 801389e:	21e6      	movs	r1, #230	; 0xe6
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fe fbba 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1_3.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 80138ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138b0:	2113      	movs	r1, #19
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fe faf4 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80138b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80138bc:	4619      	mov	r1, r3
 80138be:	4620      	mov	r0, r4
 80138c0:	f008 f9de 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1_3);
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80138d0:	4619      	mov	r1, r3
 80138d2:	4610      	mov	r0, r2
 80138d4:	f005 fa45 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    image1_4.setXY(305, 9);
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80138de:	2209      	movs	r2, #9
 80138e0:	f240 1131 	movw	r1, #305	; 0x131
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7fe fb98 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1_4.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	f503 74cc 	add.w	r4, r3, #408	; 0x198
 80138f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80138f4:	2113      	movs	r1, #19
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7fe fad2 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 80138fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013900:	4619      	mov	r1, r3
 8013902:	4620      	mov	r0, r4
 8013904:	f008 f9bc 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1_4);
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8013914:	4619      	mov	r1, r3
 8013916:	4610      	mov	r0, r2
 8013918:	f005 fa23 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    image1_5.setXY(380, 9);
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8013922:	2209      	movs	r2, #9
 8013924:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8013928:	4618      	mov	r0, r3
 801392a:	f7fe fb76 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    image1_5.setBitmap(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID));
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	f503 74e2 	add.w	r4, r3, #452	; 0x1c4
 8013934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013938:	2113      	movs	r1, #19
 801393a:	4618      	mov	r0, r3
 801393c:	f7fe fab0 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8013940:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013944:	4619      	mov	r1, r3
 8013946:	4620      	mov	r0, r4
 8013948:	f008 f99a 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scrollableContainer1.add(image1_5);
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8013958:	4619      	mov	r1, r3
 801395a:	4610      	mov	r0, r2
 801395c:	f005 fa01 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1.setXY(24, 22);
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8013966:	2216      	movs	r2, #22
 8013968:	2118      	movs	r1, #24
 801396a:	4618      	mov	r0, r3
 801396c:	f7fe fb55 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
 8013976:	231b      	movs	r3, #27
 8013978:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 801397c:	23b2      	movs	r3, #178	; 0xb2
 801397e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8013982:	23e0      	movs	r3, #224	; 0xe0
 8013984:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8013988:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 801398c:	041b      	lsls	r3, r3, #16
 801398e:	461a      	mov	r2, r3
 8013990:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8013994:	021b      	lsls	r3, r3, #8
 8013996:	431a      	orrs	r2, r3
 8013998:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801399c:	4313      	orrs	r3, r2
 801399e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80139a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80139a6:	4611      	mov	r1, r2
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7fe fa27 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 80139ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80139b2:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 80139b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        color = newColor;
 80139b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80139bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139be:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80139c0:	bf00      	nop
    textArea1.setLinespacing(0);
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 80139c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80139cc:	2300      	movs	r3, #0
 80139ce:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 80139d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80139d6:	e001      	b.n	80139dc <_ZN18Test_containerBaseC1Ev+0x3a8>
 80139d8:	0802f1cc 	.word	0x0802f1cc
 80139dc:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80139e0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80139e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	3384      	adds	r3, #132	; 0x84
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80139f0:	463a      	mov	r2, r7
 80139f2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80139f6:	4610      	mov	r0, r2
 80139f8:	4798      	blx	r3
 80139fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80139fe:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013a02:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013a0c:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JKDK));
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	f503 74f8 	add.w	r4, r3, #496	; 0x1f0
 8013a14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a18:	2137      	movs	r1, #55	; 0x37
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fec2 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013a20:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a24:	4619      	mov	r1, r3
 8013a26:	4620      	mov	r0, r4
 8013a28:	f008 f824 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013a2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fd f92f 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1);
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8013a42:	4619      	mov	r1, r3
 8013a44:	4610      	mov	r0, r2
 8013a46:	f005 f98c 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1_1.setXY(99, 22);
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013a50:	2216      	movs	r2, #22
 8013a52:	2163      	movs	r1, #99	; 0x63
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fe fae0 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8013a60:	231b      	movs	r3, #27
 8013a62:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8013a66:	23b2      	movs	r3, #178	; 0xb2
 8013a68:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8013a6c:	23e0      	movs	r3, #224	; 0xe0
 8013a6e:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8013a72:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8013a76:	041b      	lsls	r3, r3, #16
 8013a78:	461a      	mov	r2, r3
 8013a7a:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8013a7e:	021b      	lsls	r3, r3, #8
 8013a80:	431a      	orrs	r2, r3
 8013a82:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8013a86:	4313      	orrs	r3, r2
 8013a88:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013a8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8013a90:	4611      	mov	r1, r2
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7fe f9b2 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013a98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013a9c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8013aa0:	62bb      	str	r3, [r7, #40]	; 0x28
        color = newColor;
 8013aa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013aa8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013aaa:	bf00      	nop
    textArea1_1.setLinespacing(0);
 8013aac:	697b      	ldr	r3, [r7, #20]
 8013aae:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
        linespace = space;
 8013abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013ac0:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8013ac4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	3384      	adds	r3, #132	; 0x84
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8013ada:	4610      	mov	r0, r2
 8013adc:	4798      	blx	r3
 8013ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013ae2:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013ae6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8013aec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013af0:	bf00      	nop
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IJD4));
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	f503 740e 	add.w	r4, r3, #568	; 0x238
 8013af8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013afc:	2136      	movs	r1, #54	; 0x36
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fe fe50 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013b04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013b08:	4619      	mov	r1, r3
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f007 ffb2 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013b10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7fd f8bd 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1_1);
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013b26:	4619      	mov	r1, r3
 8013b28:	4610      	mov	r0, r2
 8013b2a:	f005 f91a 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1_2.setXY(174, 22);
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8013b34:	2216      	movs	r2, #22
 8013b36:	21ae      	movs	r1, #174	; 0xae
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fe fa6e 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_2.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8013b44:	231b      	movs	r3, #27
 8013b46:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8013b4a:	23b2      	movs	r3, #178	; 0xb2
 8013b4c:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8013b50:	23e0      	movs	r3, #224	; 0xe0
 8013b52:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8013b56:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8013b5a:	041b      	lsls	r3, r3, #16
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8013b62:	021b      	lsls	r3, r3, #8
 8013b64:	431a      	orrs	r2, r3
 8013b66:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013b74:	4611      	mov	r1, r2
 8013b76:	4618      	mov	r0, r3
 8013b78:	f7fe f940 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013b80:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8013b84:	627b      	str	r3, [r7, #36]	; 0x24
        color = newColor;
 8013b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013b8e:	bf00      	nop
    textArea1_2.setLinespacing(0);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8013b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
        linespace = space;
 8013ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ba4:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 8013ba8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	3384      	adds	r3, #132	; 0x84
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8013bb8:	463a      	mov	r2, r7
 8013bba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8013bbe:	4610      	mov	r0, r2
 8013bc0:	4798      	blx	r3
 8013bc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013bc6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013bca:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013bce:	ca07      	ldmia	r2, {r0, r1, r2}
 8013bd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013bd4:	bf00      	nop
    textArea1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RZM4));
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	f503 7420 	add.w	r4, r3, #640	; 0x280
 8013bdc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013be0:	2135      	movs	r1, #53	; 0x35
 8013be2:	4618      	mov	r0, r3
 8013be4:	f7fe fdde 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013be8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013bec:	4619      	mov	r1, r3
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f007 ff40 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013bf4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fd f84b 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1_2);
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	f005 f8a8 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1_3.setXY(249, 22);
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013c18:	2216      	movs	r2, #22
 8013c1a:	21f9      	movs	r1, #249	; 0xf9
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fe f9fc 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_3.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	f503 7432 	add.w	r4, r3, #712	; 0x2c8
 8013c28:	231b      	movs	r3, #27
 8013c2a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
 8013c2e:	23b2      	movs	r3, #178	; 0xb2
 8013c30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8013c34:	23e0      	movs	r3, #224	; 0xe0
 8013c36:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
 8013c3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8013c3e:	041b      	lsls	r3, r3, #16
 8013c40:	461a      	mov	r2, r3
 8013c42:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8013c46:	021b      	lsls	r3, r3, #8
 8013c48:	431a      	orrs	r2, r3
 8013c4a:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013c54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe f8ce 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013c64:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8013c68:	623b      	str	r3, [r7, #32]
        color = newColor;
 8013c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c6e:	6a3a      	ldr	r2, [r7, #32]
 8013c70:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013c72:	bf00      	nop
    textArea1_3.setLinespacing(0);
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
        linespace = space;
 8013c84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013c88:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	; 0xea
 8013c8c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013c8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	3384      	adds	r3, #132	; 0x84
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8013c9c:	463a      	mov	r2, r7
 8013c9e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8013ca2:	4610      	mov	r0, r2
 8013ca4:	4798      	blx	r3
 8013ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013caa:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013cae:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013cb8:	bf00      	nop
    textArea1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B1T4));
 8013cba:	697b      	ldr	r3, [r7, #20]
 8013cbc:	f503 7432 	add.w	r4, r3, #712	; 0x2c8
 8013cc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013cc4:	2134      	movs	r1, #52	; 0x34
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7fe fd6c 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013ccc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f007 fece 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013cd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fc ffd9 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1_3);
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013cee:	4619      	mov	r1, r3
 8013cf0:	4610      	mov	r0, r2
 8013cf2:	f005 f836 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1_4.setXY(324, 22);
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013cfc:	2216      	movs	r2, #22
 8013cfe:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7fe f989 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_4.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8013d0e:	231b      	movs	r3, #27
 8013d10:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 8013d14:	23b2      	movs	r3, #178	; 0xb2
 8013d16:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8013d1a:	23e0      	movs	r3, #224	; 0xe0
 8013d1c:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8013d20:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8013d24:	041b      	lsls	r3, r3, #16
 8013d26:	461a      	mov	r2, r3
 8013d28:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8013d2c:	021b      	lsls	r3, r3, #8
 8013d2e:	431a      	orrs	r2, r3
 8013d30:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8013d34:	4313      	orrs	r3, r2
 8013d36:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013d3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fe f85b 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013d4a:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 8013d4e:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8013d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d54:	69fa      	ldr	r2, [r7, #28]
 8013d56:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013d58:	bf00      	nop
    textArea1_4.setLinespacing(0);
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013d60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013d64:	2300      	movs	r3, #0
 8013d66:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
        linespace = space;
 8013d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013d6e:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8013d72:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	3384      	adds	r3, #132	; 0x84
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8013d82:	463a      	mov	r2, r7
 8013d84:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8013d88:	4610      	mov	r0, r2
 8013d8a:	4798      	blx	r3
 8013d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013d90:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013d94:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013d98:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013d9e:	bf00      	nop
    textArea1_4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E0I2));
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	f503 7444 	add.w	r4, r3, #784	; 0x310
 8013da6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013daa:	2133      	movs	r1, #51	; 0x33
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe fcf9 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013db2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013db6:	4619      	mov	r1, r3
 8013db8:	4620      	mov	r0, r4
 8013dba:	f007 fe5b 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013dbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fc ff66 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1_4);
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4610      	mov	r0, r2
 8013dd8:	f004 ffc3 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    textArea1_5.setXY(399, 22);
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013de2:	2216      	movs	r2, #22
 8013de4:	f240 118f 	movw	r1, #399	; 0x18f
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe f916 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_5.setColor(touchgfx::Color::getColorFromRGB(27, 178, 224));
 8013dee:	697b      	ldr	r3, [r7, #20]
 8013df0:	f503 7456 	add.w	r4, r3, #856	; 0x358
 8013df4:	231b      	movs	r3, #27
 8013df6:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8013dfa:	23b2      	movs	r3, #178	; 0xb2
 8013dfc:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
 8013e00:	23e0      	movs	r3, #224	; 0xe0
 8013e02:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8013e06:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8013e0a:	041b      	lsls	r3, r3, #16
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8013e12:	021b      	lsls	r3, r3, #8
 8013e14:	431a      	orrs	r2, r3
 8013e16:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8013e1a:	4313      	orrs	r3, r2
 8013e1c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013e20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013e24:	4611      	mov	r1, r2
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7fd ffe8 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8013e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e30:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 8013e34:	61bb      	str	r3, [r7, #24]
        color = newColor;
 8013e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013e3a:	69ba      	ldr	r2, [r7, #24]
 8013e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013e3e:	bf00      	nop
    textArea1_5.setLinespacing(0);
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        linespace = space;
 8013e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e54:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8013e58:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	3384      	adds	r3, #132	; 0x84
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8013e68:	463a      	mov	r2, r7
 8013e6a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8013e6e:	4610      	mov	r0, r2
 8013e70:	4798      	blx	r3
 8013e72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013e76:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8013e7a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013e84:	bf00      	nop
    textArea1_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PS9C));
 8013e86:	697b      	ldr	r3, [r7, #20]
 8013e88:	f503 7456 	add.w	r4, r3, #856	; 0x358
 8013e8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013e90:	2132      	movs	r1, #50	; 0x32
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fe fc86 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 8013e98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	4620      	mov	r0, r4
 8013ea0:	f007 fde8 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013ea4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fc fef3 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
    scrollableContainer1.add(textArea1_5);
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013eba:	4619      	mov	r1, r3
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	f004 ff50 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    add(scrollableContainer1);
 8013ec2:	697a      	ldr	r2, [r7, #20]
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	332c      	adds	r3, #44	; 0x2c
 8013ec8:	4619      	mov	r1, r3
 8013eca:	4610      	mov	r0, r2
 8013ecc:	f004 faaa 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd90      	pop	{r4, r7, pc}

08013edc <_ZN18Test_containerBaseD1Ev>:

Test_containerBase::~Test_containerBase()
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b082      	sub	sp, #8
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	4a2b      	ldr	r2, [pc, #172]	; (8013f94 <_ZN18Test_containerBaseD1Ev+0xb8>)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7fe ffed 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fe ffe7 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fe ffe1 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fe ffdb 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013f20:	4618      	mov	r0, r3
 8013f22:	f7fe ffd5 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe ffcf 	bl	8012ed0 <_ZN8touchgfx8TextAreaD1Ev>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f000 f897 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8013f44:	4618      	mov	r0, r3
 8013f46:	f000 f891 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 f88b 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f000 f885 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f000 f87f 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	33e8      	adds	r3, #232	; 0xe8
 8013f72:	4618      	mov	r0, r3
 8013f74:	f000 f87a 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	332c      	adds	r3, #44	; 0x2c
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f000 f849 	bl	8014014 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fe fc81 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
{

}
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	0802f1cc 	.word	0x0802f1cc

08013f98 <_ZN18Test_containerBaseD0Ev>:
Test_containerBase::~Test_containerBase()
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b082      	sub	sp, #8
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
}
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f7ff ff9b 	bl	8013edc <_ZN18Test_containerBaseD1Ev>
 8013fa6:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f018 fd4e 	bl	802ca4c <_ZdlPvj>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <_ZN18Test_containerBase10initializeEv>:

void Test_containerBase::initialize()
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]

}
 8013fc2:	bf00      	nop
 8013fc4:	370c      	adds	r7, #12
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr
	...

08013fd0 <_ZN8touchgfx3BoxD1Ev>:
namespace touchgfx
{
/**
 * Simple widget capable of showing a rectangle of a specific color and an optional alpha.
 */
class Box : public Widget
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	4a05      	ldr	r2, [pc, #20]	; (8013ff0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	601a      	str	r2, [r3, #0]
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fe fb43 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	080305e4 	.word	0x080305e4

08013ff4 <_ZN8touchgfx3BoxD0Ev>:
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7ff ffe7 	bl	8013fd0 <_ZN8touchgfx3BoxD1Ev>
 8014002:	212c      	movs	r1, #44	; 0x2c
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f018 fd21 	bl	802ca4c <_ZdlPvj>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <_ZN8touchgfx19ScrollableContainerD1Ev>:
 * @see Container
 *
 * @note The ScrollableContainer will consume all DragEvents in the area covered by the
 *       container.
 */
class ScrollableContainer : public Container
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	4a0a      	ldr	r2, [pc, #40]	; (8014048 <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	601a      	str	r2, [r3, #0]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	3364      	adds	r3, #100	; 0x64
 8014026:	4618      	mov	r0, r3
 8014028:	f7ff ffd2 	bl	8013fd0 <_ZN8touchgfx3BoxD1Ev>
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	3338      	adds	r3, #56	; 0x38
 8014030:	4618      	mov	r0, r3
 8014032:	f7ff ffcd 	bl	8013fd0 <_ZN8touchgfx3BoxD1Ev>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	f7fe fc27 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	08030028 	.word	0x08030028

0801404c <_ZN8touchgfx19ScrollableContainerD0Ev>:
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f7ff ffdd 	bl	8014014 <_ZN8touchgfx19ScrollableContainerD1Ev>
 801405a:	21bc      	movs	r1, #188	; 0xbc
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f018 fcf5 	bl	802ca4c <_ZdlPvj>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4618      	mov	r0, r3
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 801406c:	b580      	push	{r7, lr}
 801406e:	b082      	sub	sp, #8
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	4a05      	ldr	r2, [pc, #20]	; (801408c <_ZN8touchgfx5ImageD1Ev+0x20>)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	601a      	str	r2, [r3, #0]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	4618      	mov	r0, r3
 801407e:	f7fe faf5 	bl	801266c <_ZN8touchgfx6WidgetD1Ev>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	4618      	mov	r0, r3
 8014086:	3708      	adds	r7, #8
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	080306c0 	.word	0x080306c0

08014090 <_ZN8touchgfx5ImageD0Ev>:
 8014090:	b580      	push	{r7, lr}
 8014092:	b082      	sub	sp, #8
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f7ff ffe7 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 801409e:	212c      	movs	r1, #44	; 0x2c
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f018 fcd3 	bl	802ca4c <_ZdlPvj>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	4618      	mov	r0, r3
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
    {
 80140b8:	4a06      	ldr	r2, [pc, #24]	; (80140d4 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	3304      	adds	r3, #4
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fe fbe2 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
    }
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	4618      	mov	r0, r3
 80140cc:	3708      	adds	r7, #8
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	080308b4 	.word	0x080308b4

080140d8 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
    }
 80140e0:	6878      	ldr	r0, [r7, #4]
 80140e2:	f7ff ffe5 	bl	80140b0 <_ZN8touchgfx6ScreenD1Ev>
 80140e6:	213c      	movs	r1, #60	; 0x3c
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f018 fcaf 	bl	802ca4c <_ZdlPvj>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	4618      	mov	r0, r3
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80140f8:	b480      	push	{r7}
 80140fa:	b083      	sub	sp, #12
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
    {
    }
 8014100:	bf00      	nop
 8014102:	370c      	adds	r7, #12
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr

0801410c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801410c:	b480      	push	{r7}
 801410e:	b083      	sub	sp, #12
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
    {
    }
 8014114:	bf00      	nop
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    {
    }
 8014128:	bf00      	nop
 801412a:	370c      	adds	r7, #12
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr

08014134 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
    {
    }
 801413c:	bf00      	nop
 801413e:	370c      	adds	r7, #12
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr

08014148 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8014148:	b480      	push	{r7}
 801414a:	b083      	sub	sp, #12
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	460b      	mov	r3, r1
 8014152:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8014154:	bf00      	nop
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	3304      	adds	r3, #4
 801416e:	6839      	ldr	r1, [r7, #0]
 8014170:	4618      	mov	r0, r3
 8014172:	f004 f957 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
	...

08014180 <_ZN8touchgfx3BoxC1Ev>:
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	4618      	mov	r0, r3
 801418c:	2326      	movs	r3, #38	; 0x26
 801418e:	461a      	mov	r2, r3
 8014190:	2100      	movs	r1, #0
 8014192:	f018 fd15 	bl	802cbc0 <memset>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	4618      	mov	r0, r3
 801419a:	f7fe fa55 	bl	8012648 <_ZN8touchgfx6WidgetC1Ev>
 801419e:	4a09      	ldr	r2, [pc, #36]	; (80141c4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	22ff      	movs	r2, #255	; 0xff
 80141a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	3328      	adds	r3, #40	; 0x28
 80141b0:	2100      	movs	r1, #0
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fd fe22 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	4618      	mov	r0, r3
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	080305e4 	.word	0x080305e4

080141c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80141c8:	b480      	push	{r7}
 80141ca:	b083      	sub	sp, #12
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	683a      	ldr	r2, [r7, #0]
 80141d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80141d8:	bf00      	nop
 80141da:	370c      	adds	r7, #12
 80141dc:	46bd      	mov	sp, r7
 80141de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e2:	4770      	bx	lr

080141e4 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d003      	beq.n	80141fe <_ZNK8touchgfx5Image17invalidateContentEv+0x1a>
        {
            Widget::invalidateContent();
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7fd feb1 	bl	8011f60 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80141fe:	bf00      	nop
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
	...

08014208 <_ZN8touchgfx13AnimatedImageC1ERKh>:
     *                        Higher value results in a slower animation.
     *
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
 8014208:	b590      	push	{r4, r7, lr}
 801420a:	b085      	sub	sp, #20
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 8014212:	687c      	ldr	r4, [r7, #4]
 8014214:	f107 030c 	add.w	r3, r7, #12
 8014218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801421c:	4618      	mov	r0, r3
 801421e:	f7fd fe3f 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014222:	f107 030c 	add.w	r3, r7, #12
 8014226:	4619      	mov	r1, r3
 8014228:	4620      	mov	r0, r4
 801422a:	f7ff f9dd 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801422e:	4a14      	ldr	r2, [pc, #80]	; (8014280 <_ZN8touchgfx13AnimatedImageC1ERKh+0x78>)
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	601a      	str	r2, [r3, #0]
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	62da      	str	r2, [r3, #44]	; 0x2c
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014240:	861a      	strh	r2, [r3, #48]	; 0x30
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014248:	865a      	strh	r2, [r3, #50]	; 0x32
          updateTicksInterval(updateInterval),
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	781a      	ldrb	r2, [r3, #0]
          running(false)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2200      	movs	r2, #0
 8014258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2200      	movs	r2, #0
 8014260:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2200      	movs	r2, #0
 8014270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    {
    }
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	4618      	mov	r0, r3
 8014278:	3714      	adds	r7, #20
 801427a:	46bd      	mov	sp, r7
 801427c:	bd90      	pop	{r4, r7, pc}
 801427e:	bf00      	nop
 8014280:	080304d8 	.word	0x080304d8

08014284 <_ZN8touchgfx4ViewI20Main_screenPresenterED1Ev>:
class View : public Screen
 8014284:	b580      	push	{r7, lr}
 8014286:	b082      	sub	sp, #8
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
 801428c:	4a05      	ldr	r2, [pc, #20]	; (80142a4 <_ZN8touchgfx4ViewI20Main_screenPresenterED1Ev+0x20>)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	601a      	str	r2, [r3, #0]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	f7ff ff0b 	bl	80140b0 <_ZN8touchgfx6ScreenD1Ev>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	4618      	mov	r0, r3
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	0802f330 	.word	0x0802f330

080142a8 <_ZN8touchgfx4ViewI20Main_screenPresenterED0Ev>:
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f7ff ffe7 	bl	8014284 <_ZN8touchgfx4ViewI20Main_screenPresenterED1Ev>
 80142b6:	2140      	movs	r1, #64	; 0x40
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f018 fbc7 	bl	802ca4c <_ZdlPvj>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <_ZN19Main_screenViewBaseD1Ev>:

class Main_screenViewBase : public touchgfx::View<Main_screenPresenter>
{
public:
    Main_screenViewBase();
    virtual ~Main_screenViewBase() {}
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	4a12      	ldr	r2, [pc, #72]	; (801431c <_ZN19Main_screenViewBaseD1Ev+0x54>)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80142dc:	4618      	mov	r0, r3
 80142de:	f000 f9d9 	bl	8014694 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	33cc      	adds	r3, #204	; 0xcc
 80142e6:	4618      	mov	r0, r3
 80142e8:	f000 f9f6 	bl	80146d8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEED1Ev>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	3398      	adds	r3, #152	; 0x98
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fe fdcb 	bl	8012e8c <_ZN8touchgfx6ButtonD1Ev>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	336c      	adds	r3, #108	; 0x6c
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7ff feb6 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	3340      	adds	r3, #64	; 0x40
 8014304:	4618      	mov	r0, r3
 8014306:	f7ff fe63 	bl	8013fd0 <_ZN8touchgfx3BoxD1Ev>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	f7ff ffb9 	bl	8014284 <_ZN8touchgfx4ViewI20Main_screenPresenterED1Ev>
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	4618      	mov	r0, r3
 8014316:	3708      	adds	r7, #8
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	0802f260 	.word	0x0802f260

08014320 <_ZN19Main_screenViewBaseD0Ev>:
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff ffcd 	bl	80142c8 <_ZN19Main_screenViewBaseD1Ev>
 801432e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f018 fb8a 	bl	802ca4c <_ZdlPvj>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4618      	mov	r0, r3
 801433c:	3708      	adds	r7, #8
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}

08014342 <_ZN19Main_screenViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014342:	b580      	push	{r7, lr}
 8014344:	b082      	sub	sp, #8
 8014346:	af00      	add	r7, sp, #0
 8014348:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801434a:	f00a f839 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801434e:	4603      	mov	r3, r0
    }
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}

08014358 <_ZN19Main_screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/main_screen_screen/Main_screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Main_screenViewBase::Main_screenViewBase() :
 8014358:	b590      	push	{r4, r7, lr}
 801435a:	b08d      	sub	sp, #52	; 0x34
 801435c:	af02      	add	r7, sp, #8
 801435e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Main_screenViewBase::buttonCallbackHandler)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	4618      	mov	r0, r3
 8014364:	f000 f900 	bl	8014568 <_ZN8touchgfx4ViewI20Main_screenPresenterEC1Ev>
 8014368:	4a6d      	ldr	r2, [pc, #436]	; (8014520 <_ZN19Main_screenViewBaseC1Ev+0x1c8>)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	601a      	str	r2, [r3, #0]
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	3340      	adds	r3, #64	; 0x40
 8014372:	4618      	mov	r0, r3
 8014374:	f7ff ff04 	bl	8014180 <_ZN8touchgfx3BoxC1Ev>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801437e:	f107 0308 	add.w	r3, r7, #8
 8014382:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014386:	4618      	mov	r0, r3
 8014388:	f7fd fd8a 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 801438c:	f107 0308 	add.w	r3, r7, #8
 8014390:	4619      	mov	r1, r3
 8014392:	4620      	mov	r0, r4
 8014394:	f7ff f928 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	3398      	adds	r3, #152	; 0x98
 801439c:	4618      	mov	r0, r3
 801439e:	f7fe f9dd 	bl	801275c <_ZN8touchgfx6ButtonC1Ev>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	33cc      	adds	r3, #204	; 0xcc
 80143a6:	4618      	mov	r0, r3
 80143a8:	f000 f916 	bl	80145d8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEEC1Ev>
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80143b2:	4b5c      	ldr	r3, [pc, #368]	; (8014524 <_ZN19Main_screenViewBaseC1Ev+0x1cc>)
 80143b4:	60fb      	str	r3, [r7, #12]
 80143b6:	2300      	movs	r3, #0
 80143b8:	613b      	str	r3, [r7, #16]
 80143ba:	f107 030c 	add.w	r3, r7, #12
 80143be:	cb0c      	ldmia	r3, {r2, r3}
 80143c0:	6879      	ldr	r1, [r7, #4]
 80143c2:	f000 f947 	bl	8014654 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 800);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80143cc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80143d6:	2200      	movs	r2, #0
 80143d8:	2100      	movs	r1, #0
 80143da:	f7fd fddf 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80143e4:	2300      	movs	r3, #0
 80143e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80143ea:	2300      	movs	r3, #0
 80143ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80143f0:	2300      	movs	r3, #0
 80143f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80143f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143fa:	041b      	lsls	r3, r3, #16
 80143fc:	461a      	mov	r2, r3
 80143fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014402:	021b      	lsls	r3, r3, #8
 8014404:	431a      	orrs	r2, r3
 8014406:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801440a:	4313      	orrs	r3, r2
 801440c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014410:	f107 0320 	add.w	r3, r7, #32
 8014414:	4611      	mov	r1, r2
 8014416:	4618      	mov	r0, r3
 8014418:	f7fd fcf0 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 801441c:	6a3b      	ldr	r3, [r7, #32]
 801441e:	4619      	mov	r1, r3
 8014420:	4620      	mov	r0, r4
 8014422:	f7ff fed1 	bl	80141c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Image_main_screen.setXY(0, 0);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	336c      	adds	r3, #108	; 0x6c
 801442a:	2200      	movs	r2, #0
 801442c:	2100      	movs	r1, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd fdf3 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    Image_main_screen.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_SCREEN_2_ID));
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801443a:	f107 0314 	add.w	r3, r7, #20
 801443e:	2111      	movs	r1, #17
 8014440:	4618      	mov	r0, r3
 8014442:	f7fd fd2d 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014446:	f107 0314 	add.w	r3, r7, #20
 801444a:	4619      	mov	r1, r3
 801444c:	4620      	mov	r0, r4
 801444e:	f007 fc17 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    btn_menu.setXY(155, 624);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	3398      	adds	r3, #152	; 0x98
 8014456:	f44f 721c 	mov.w	r2, #624	; 0x270
 801445a:	219b      	movs	r1, #155	; 0x9b
 801445c:	4618      	mov	r0, r3
 801445e:	f7fd fddc 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    btn_menu.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_MENU_OFF_ID), touchgfx::Bitmap(BITMAP_BUTTON_MENU_ON_ID));
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8014468:	f107 0318 	add.w	r3, r7, #24
 801446c:	2108      	movs	r1, #8
 801446e:	4618      	mov	r0, r3
 8014470:	f7fd fd16 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014474:	f107 031c 	add.w	r3, r7, #28
 8014478:	2109      	movs	r1, #9
 801447a:	4618      	mov	r0, r3
 801447c:	f7fd fd10 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014480:	f107 021c 	add.w	r2, r7, #28
 8014484:	f107 0318 	add.w	r3, r7, #24
 8014488:	4619      	mov	r1, r3
 801448a:	4620      	mov	r0, r4
 801448c:	f007 fb44 	bl	801bb18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    btn_menu.setAction(buttonCallback);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801449c:	4619      	mov	r1, r3
 801449e:	4610      	mov	r0, r2
 80144a0:	f7fe f92c 	bl	80126fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Image_Wifi.setXY(442, 7);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	33cc      	adds	r3, #204	; 0xcc
 80144a8:	2207      	movs	r2, #7
 80144aa:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fd fdb3 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    Image_Wifi.setBitmaps(BITMAP_IMG_WIFI_01_ID, BITMAP_IMG_WIFI_02_ID);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	33cc      	adds	r3, #204	; 0xcc
 80144b8:	2210      	movs	r2, #16
 80144ba:	210f      	movs	r1, #15
 80144bc:	4618      	mov	r0, r3
 80144be:	f006 ff0c 	bl	801b2da <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    Image_Wifi.setUpdateTicksInterval(30);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	33cc      	adds	r3, #204	; 0xcc
 80144c6:	211e      	movs	r1, #30
 80144c8:	4618      	mov	r0, r3
 80144ca:	f006 ff19 	bl	801b300 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    Image_Wifi.startAnimation(false, true, true);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 80144d4:	2301      	movs	r3, #1
 80144d6:	2201      	movs	r2, #1
 80144d8:	2100      	movs	r1, #0
 80144da:	f006 fe6b 	bl	801b1b4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>

    add(__background);
 80144de:	687a      	ldr	r2, [r7, #4]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	3340      	adds	r3, #64	; 0x40
 80144e4:	4619      	mov	r1, r3
 80144e6:	4610      	mov	r0, r2
 80144e8:	f7ff fe3a 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Image_main_screen);
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	336c      	adds	r3, #108	; 0x6c
 80144f2:	4619      	mov	r1, r3
 80144f4:	4610      	mov	r0, r2
 80144f6:	f7ff fe33 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(btn_menu);
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	3398      	adds	r3, #152	; 0x98
 8014500:	4619      	mov	r1, r3
 8014502:	4610      	mov	r0, r2
 8014504:	f7ff fe2c 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Image_Wifi);
 8014508:	687a      	ldr	r2, [r7, #4]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	33cc      	adds	r3, #204	; 0xcc
 801450e:	4619      	mov	r1, r3
 8014510:	4610      	mov	r0, r2
 8014512:	f7ff fe25 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4618      	mov	r0, r3
 801451a:	372c      	adds	r7, #44	; 0x2c
 801451c:	46bd      	mov	sp, r7
 801451e:	bd90      	pop	{r4, r7, pc}
 8014520:	0802f260 	.word	0x0802f260
 8014524:	0801453d 	.word	0x0801453d

08014528 <_ZN19Main_screenViewBase11setupScreenEv>:

void Main_screenViewBase::setupScreen()
{
 8014528:	b480      	push	{r7}
 801452a:	b083      	sub	sp, #12
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]

}
 8014530:	bf00      	nop
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr

0801453c <_ZN19Main_screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Main_screenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
    if (&src == &btn_menu)
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	3398      	adds	r3, #152	; 0x98
 801454a:	683a      	ldr	r2, [r7, #0]
 801454c:	429a      	cmp	r2, r3
 801454e:	d106      	bne.n	801455e <_ZN19Main_screenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When btn_menu clicked change screen to Menu_9
        //Go to Menu_9 with no screen transition
        application().gotoMenu_9ScreenNoTransition();
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f7ff fef6 	bl	8014342 <_ZN19Main_screenViewBase11applicationEv>
 8014556:	4603      	mov	r3, r0
 8014558:	4618      	mov	r0, r3
 801455a:	f7fd f85f 	bl	801161c <_ZN23FrontendApplicationBase28gotoMenu_9ScreenNoTransitionEv>
    }
}
 801455e:	bf00      	nop
 8014560:	3708      	adds	r7, #8
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <_ZN8touchgfx4ViewI20Main_screenPresenterEC1Ev>:
    View()
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	4618      	mov	r0, r3
 8014574:	f00b fa48 	bl	801fa08 <_ZN8touchgfx6ScreenC1Ev>
 8014578:	4a05      	ldr	r2, [pc, #20]	; (8014590 <_ZN8touchgfx4ViewI20Main_screenPresenterEC1Ev+0x28>)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	601a      	str	r2, [r3, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2200      	movs	r2, #0
 8014582:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	4618      	mov	r0, r3
 8014588:	3708      	adds	r7, #8
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	0802f330 	.word	0x0802f330

08014594 <_ZN8touchgfx13AnimatedImageD1Ev>:
class AnimatedImage : public Image
 8014594:	b580      	push	{r7, lr}
 8014596:	b082      	sub	sp, #8
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	4a05      	ldr	r2, [pc, #20]	; (80145b4 <_ZN8touchgfx13AnimatedImageD1Ev+0x20>)
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	601a      	str	r2, [r3, #0]
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff fd61 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4618      	mov	r0, r3
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	080304d8 	.word	0x080304d8

080145b8 <_ZN8touchgfx13AnimatedImageD0Ev>:
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f7ff ffe7 	bl	8014594 <_ZN8touchgfx13AnimatedImageD1Ev>
 80145c6:	213c      	movs	r1, #60	; 0x3c
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f018 fa3f 	bl	802ca4c <_ZdlPvj>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEEC1Ev>:
 */
template <class T>
class MoveAnimator : public T
{
public:
    MoveAnimator()
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
          moveAnimationStartY(0),
          moveAnimationEndX(0),
          moveAnimationEndY(0),
          moveAnimationXEquation(),
          moveAnimationYEquation(),
          moveAnimationEndedCallback(0)
 80145e0:	687b      	ldr	r3, [r7, #4]
    AnimatedImage(const uint8_t& updateInterval = 1)
 80145e2:	2201      	movs	r2, #1
 80145e4:	73fa      	strb	r2, [r7, #15]
 80145e6:	f107 020f 	add.w	r2, r7, #15
 80145ea:	4611      	mov	r1, r2
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff fe0b 	bl	8014208 <_ZN8touchgfx13AnimatedImageC1ERKh>
 80145f2:	4a17      	ldr	r2, [pc, #92]	; (8014650 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEEC1Ev+0x78>)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2200      	movs	r2, #0
 80145fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2200      	movs	r2, #0
 8014604:	875a      	strh	r2, [r3, #58]	; 0x3a
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	879a      	strh	r2, [r3, #60]	; 0x3c
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2200      	movs	r2, #0
 8014610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2200      	movs	r2, #0
 8014616:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2200      	movs	r2, #0
 801461e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2200      	movs	r2, #0
 8014626:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2200      	movs	r2, #0
 801462e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2200      	movs	r2, #0
 8014636:	649a      	str	r2, [r3, #72]	; 0x48
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2200      	movs	r2, #0
 801463c:	64da      	str	r2, [r3, #76]	; 0x4c
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	2200      	movs	r2, #0
 8014642:	651a      	str	r2, [r3, #80]	; 0x50
    {
    }
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	4618      	mov	r0, r3
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	0802f2ac 	.word	0x0802f2ac

08014654 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	4639      	mov	r1, r7
 8014660:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	4618      	mov	r0, r3
 8014668:	f7fe fac2 	bl	8012bf0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801466c:	4a08      	ldr	r2, [pc, #32]	; (8014690 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	601a      	str	r2, [r3, #0]
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	605a      	str	r2, [r3, #4]
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	3308      	adds	r3, #8
 801467c:	463a      	mov	r2, r7
 801467e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014682:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	4618      	mov	r0, r3
 801468a:	3710      	adds	r7, #16
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	0802f294 	.word	0x0802f294

08014694 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	4a05      	ldr	r2, [pc, #20]	; (80146b4 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	601a      	str	r2, [r3, #0]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fe fb37 	bl	8012d18 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	0802f294 	.word	0x0802f294

080146b8 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b082      	sub	sp, #8
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f7ff ffe7 	bl	8014694 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80146c6:	2110      	movs	r1, #16
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f018 f9bf 	bl	802ca4c <_ZdlPvj>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	4618      	mov	r0, r3
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEED1Ev>:
class MoveAnimator : public T
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	4a05      	ldr	r2, [pc, #20]	; (80146f8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEED1Ev+0x20>)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	601a      	str	r2, [r3, #0]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7ff ff53 	bl	8014594 <_ZN8touchgfx13AnimatedImageD1Ev>
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	4618      	mov	r0, r3
 80146f2:	3708      	adds	r7, #8
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	0802f2ac 	.word	0x0802f2ac

080146fc <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEED0Ev>:
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f7ff ffe7 	bl	80146d8 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEED1Ev>
 801470a:	2154      	movs	r1, #84	; 0x54
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f018 f99d 	bl	802ca4c <_ZdlPvj>
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	4618      	mov	r0, r3
 8014716:	3708      	adds	r7, #8
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}

0801471c <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	687a      	ldr	r2, [r7, #4]
 801472c:	68d2      	ldr	r2, [r2, #12]
 801472e:	1052      	asrs	r2, r2, #1
 8014730:	1898      	adds	r0, r3, r2
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	2b00      	cmp	r3, #0
 801473c:	d102      	bne.n	8014744 <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	e00a      	b.n	801475a <_ZN8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	68d2      	ldr	r2, [r2, #12]
 801474c:	1052      	asrs	r2, r2, #1
 801474e:	4413      	add	r3, r2
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	6892      	ldr	r2, [r2, #8]
 8014756:	4413      	add	r3, r2
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	6839      	ldr	r1, [r7, #0]
 801475c:	4798      	blx	r3
    }
 801475e:	bf00      	nop
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8014766:	b480      	push	{r7}
 8014768:	b083      	sub	sp, #12
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d010      	beq.n	8014798 <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	689b      	ldr	r3, [r3, #8]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d107      	bne.n	801478e <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	f003 0301 	and.w	r3, r3, #1
 8014786:	2b00      	cmp	r3, #0
 8014788:	d101      	bne.n	801478e <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801478a:	2301      	movs	r3, #1
 801478c:	e000      	b.n	8014790 <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801478e:	2300      	movs	r3, #0
 8014790:	2b01      	cmp	r3, #1
 8014792:	d001      	beq.n	8014798 <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8014794:	2301      	movs	r3, #1
 8014796:	e000      	b.n	801479a <_ZNK8touchgfx8CallbackI19Main_screenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8014798:	2300      	movs	r3, #0
    }
 801479a:	4618      	mov	r0, r3
 801479c:	370c      	adds	r7, #12
 801479e:	46bd      	mov	sp, r7
 80147a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a4:	4770      	bx	lr

080147a6 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE15handleTickEventEv>:
            moveAnimationRunning = false;
        }
    }

    /** The tick handler that handles the actual animation steps. */
    virtual void handleTickEvent()
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b082      	sub	sp, #8
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
    {
        T::handleTickEvent();
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	4618      	mov	r0, r3
 80147b2:	f006 fd3d 	bl	801b230 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>
        nextMoveAnimationStep();
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f000 f81f 	bl	80147fa <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv>
    }
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 80147c4:	b480      	push	{r7}
 80147c6:	b083      	sub	sp, #12
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	460b      	mov	r3, r1
 80147ce:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	887a      	ldrh	r2, [r7, #2]
 80147d4:	879a      	strh	r2, [r3, #60]	; 0x3c
    }
 80147d6:	bf00      	nop
 80147d8:	370c      	adds	r7, #12
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr

080147e2 <_ZNK8touchgfx12MoveAnimatorINS_13AnimatedImageEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 80147e2:	b480      	push	{r7}
 80147e4:	b083      	sub	sp, #12
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    }
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv>:

protected:
    /** Execute next step in move animation and stop the timer if the animation has finished. */
    void nextMoveAnimationStep()
 80147fa:	b590      	push	{r4, r7, lr}
 80147fc:	b085      	sub	sp, #20
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014808:	2b00      	cmp	r3, #0
 801480a:	f000 808a 	beq.w	8014922 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x128>
        {
            moveAnimationCounter++;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8014812:	3301      	adds	r3, #1
 8014814:	b29a      	uxth	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	875a      	strh	r2, [r3, #58]	; 0x3a
            if (moveAnimationCounter >= moveAnimationDelay)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014822:	429a      	cmp	r2, r3
 8014824:	d37d      	bcc.n	8014922 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x128>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801482a:	461a      	mov	r2, r3
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014830:	1ad3      	subs	r3, r2, r3
 8014832:	60fb      	str	r3, [r7, #12]

                int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	b298      	uxth	r0, r3
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8014842:	b29a      	uxth	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801484a:	b29b      	uxth	r3, r3
 801484c:	1ad3      	subs	r3, r2, r3
 801484e:	b29b      	uxth	r3, r3
 8014850:	b21a      	sxth	r2, r3
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014856:	2100      	movs	r1, #0
 8014858:	47a0      	blx	r4
 801485a:	4603      	mov	r3, r0
 801485c:	817b      	strh	r3, [r7, #10]
                int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	b298      	uxth	r0, r3
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801486c:	b29a      	uxth	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8014874:	b29b      	uxth	r3, r3
 8014876:	1ad3      	subs	r3, r2, r3
 8014878:	b29b      	uxth	r3, r3
 801487a:	b21a      	sxth	r2, r3
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014880:	2100      	movs	r1, #0
 8014882:	47a0      	blx	r4
 8014884:	4603      	mov	r3, r0
 8014886:	813b      	strh	r3, [r7, #8]

                T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014890:	b29a      	uxth	r2, r3
 8014892:	897b      	ldrh	r3, [r7, #10]
 8014894:	4413      	add	r3, r2
 8014896:	b29b      	uxth	r3, r3
 8014898:	b219      	sxth	r1, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80148a0:	b29a      	uxth	r2, r3
 80148a2:	893b      	ldrh	r3, [r7, #8]
 80148a4:	4413      	add	r3, r2
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	b21b      	sxth	r3, r3
 80148aa:	461a      	mov	r2, r3
 80148ac:	f7fd fc6e 	bl	801218c <_ZN8touchgfx8Drawable6moveToEss>

                if (moveAnimationCounter >= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80148b4:	461a      	mov	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80148ba:	4619      	mov	r1, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80148c0:	440b      	add	r3, r1
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d32d      	bcc.n	8014922 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x128>
                {
                    // End of animation
                    moveAnimationRunning = false;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2200      	movs	r2, #0
 80148ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                    moveAnimationCounter = 0;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	875a      	strh	r2, [r3, #58]	; 0x3a
                    Application::getInstance()->unregisterTimerWidget(this);
 80148d4:	f009 fd74 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 80148d8:	4602      	mov	r2, r0
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	4619      	mov	r1, r3
 80148de:	4610      	mov	r0, r2
 80148e0:	f009 fd99 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d00d      	beq.n	8014908 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x10e>
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	330c      	adds	r3, #12
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4610      	mov	r0, r2
 80148fc:	4798      	blx	r3
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d001      	beq.n	8014908 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x10e>
 8014904:	2301      	movs	r3, #1
 8014906:	e000      	b.n	801490a <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x110>
 8014908:	2300      	movs	r3, #0
 801490a:	2b00      	cmp	r3, #0
 801490c:	d009      	beq.n	8014922 <_ZN8touchgfx12MoveAnimatorINS_13AnimatedImageEE21nextMoveAnimationStepEv+0x128>
                    {
                        moveAnimationEndedCallback->execute(*this);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	3308      	adds	r3, #8
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	6879      	ldr	r1, [r7, #4]
 801491e:	4610      	mov	r0, r2
 8014920:	4798      	blx	r3
                    }
                }
            }
        }
    }
 8014922:	bf00      	nop
 8014924:	3714      	adds	r7, #20
 8014926:	46bd      	mov	sp, r7
 8014928:	bd90      	pop	{r4, r7, pc}
	...

0801492c <_ZN18Sub_menu_containerD1Ev>:

class Sub_menu_container : public Sub_menu_containerBase
{
public:
    Sub_menu_container();
    virtual ~Sub_menu_container() {}
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	4a05      	ldr	r2, [pc, #20]	; (801494c <_ZN18Sub_menu_containerD1Ev+0x20>)
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	4618      	mov	r0, r3
 801493e:	f7fe fe27 	bl	8013590 <_ZN22Sub_menu_containerBaseD1Ev>
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	4618      	mov	r0, r3
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}
 801494c:	0802f8d4 	.word	0x0802f8d4

08014950 <_ZN18Sub_menu_containerD0Ev>:
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f7ff ffe7 	bl	801492c <_ZN18Sub_menu_containerD1Ev>
 801495e:	212c      	movs	r1, #44	; 0x2c
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f018 f873 	bl	802ca4c <_ZdlPvj>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4618      	mov	r0, r3
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <_ZN14Test_containerD1Ev>:

class Test_container : public Test_containerBase
{
public:
    Test_container();
    virtual ~Test_container() {}
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	4a05      	ldr	r2, [pc, #20]	; (8014990 <_ZN14Test_containerD1Ev+0x20>)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4618      	mov	r0, r3
 8014982:	f7ff faab 	bl	8013edc <_ZN18Test_containerBaseD1Ev>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	3708      	adds	r7, #8
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	0802f968 	.word	0x0802f968

08014994 <_ZN14Test_containerD0Ev>:
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ffe7 	bl	8014970 <_ZN14Test_containerD1Ev>
 80149a2:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f018 f850 	bl	802ca4c <_ZdlPvj>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	4618      	mov	r0, r3
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
	...

080149b8 <_ZN25Menu_tree_title_containerD1Ev>:

class Menu_tree_title_container : public Menu_tree_title_containerBase
{
public:
    Menu_tree_title_container();
    virtual ~Menu_tree_title_container() {}
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	4a05      	ldr	r2, [pc, #20]	; (80149d8 <_ZN25Menu_tree_title_containerD1Ev+0x20>)
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	601a      	str	r2, [r3, #0]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7fe fd87 	bl	80134dc <_ZN29Menu_tree_title_containerBaseD1Ev>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	4618      	mov	r0, r3
 80149d2:	3708      	adds	r7, #8
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	0802f840 	.word	0x0802f840

080149dc <_ZN25Menu_tree_title_containerD0Ev>:
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7ff ffe7 	bl	80149b8 <_ZN25Menu_tree_title_containerD1Ev>
 80149ea:	21f8      	movs	r1, #248	; 0xf8
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f018 f82d 	bl	802ca4c <_ZdlPvj>
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	4618      	mov	r0, r3
 80149f6:	3708      	adds	r7, #8
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}

080149fc <_ZN19Back_menu_containerD1Ev>:

class Back_menu_container : public Back_menu_containerBase
{
public:
    Back_menu_container();
    virtual ~Back_menu_container() {}
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b082      	sub	sp, #8
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	4a05      	ldr	r2, [pc, #20]	; (8014a1c <_ZN19Back_menu_containerD1Ev+0x20>)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	601a      	str	r2, [r3, #0]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fe f893 	bl	8012b38 <_ZN23Back_menu_containerBaseD1Ev>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}
 8014a1c:	0802f710 	.word	0x0802f710

08014a20 <_ZN19Back_menu_containerD0Ev>:
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f7ff ffe7 	bl	80149fc <_ZN19Back_menu_containerD1Ev>
 8014a2e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f018 f80a 	bl	802ca4c <_ZdlPvj>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
	...

08014a44 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>:
     * @param  d (Optional) The direction to place the elements. ::SOUTH (Default)
     *           places the elements vertically, ::EAST places the elements horizontally.
     *
     * @see setDirection
     */
    ListLayout(const Direction d = SOUTH)
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	70fb      	strb	r3, [r7, #3]
        : Container(), direction(d), offset(0)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd fbe8 	bl	8012228 <_ZN8touchgfx9ContainerC1Ev>
 8014a58:	4a0d      	ldr	r2, [pc, #52]	; (8014a90 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x4c>)
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	601a      	str	r2, [r3, #0]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	78fa      	ldrb	r2, [r7, #3]
 8014a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    {
        assert((d == SOUTH || d == EAST) && "Chosen direction not supported");
 8014a6c:	78fb      	ldrb	r3, [r7, #3]
 8014a6e:	2b01      	cmp	r3, #1
 8014a70:	d008      	beq.n	8014a84 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 8014a72:	78fb      	ldrb	r3, [r7, #3]
 8014a74:	2b02      	cmp	r3, #2
 8014a76:	d005      	beq.n	8014a84 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 8014a78:	4b06      	ldr	r3, [pc, #24]	; (8014a94 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x50>)
 8014a7a:	4a07      	ldr	r2, [pc, #28]	; (8014a98 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x54>)
 8014a7c:	2133      	movs	r1, #51	; 0x33
 8014a7e:	4807      	ldr	r0, [pc, #28]	; (8014a9c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x58>)
 8014a80:	f018 f812 	bl	802caa8 <__assert_func>
    }
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	4618      	mov	r0, r3
 8014a88:	3708      	adds	r7, #8
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	0802ff68 	.word	0x0802ff68
 8014a94:	0802e1d0 	.word	0x0802e1d0
 8014a98:	0802e210 	.word	0x0802e210
 8014a9c:	0802e248 	.word	0x0802e248

08014aa0 <_ZN8touchgfx4ViewI15Menu_9PresenterED1Ev>:
class View : public Screen
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	4a05      	ldr	r2, [pc, #20]	; (8014ac0 <_ZN8touchgfx4ViewI15Menu_9PresenterED1Ev+0x20>)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7ff fafd 	bl	80140b0 <_ZN8touchgfx6ScreenD1Ev>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3708      	adds	r7, #8
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}
 8014ac0:	0802f404 	.word	0x0802f404

08014ac4 <_ZN8touchgfx4ViewI15Menu_9PresenterED0Ev>:
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7ff ffe7 	bl	8014aa0 <_ZN8touchgfx4ViewI15Menu_9PresenterED1Ev>
 8014ad2:	2140      	movs	r1, #64	; 0x40
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f017 ffb9 	bl	802ca4c <_ZdlPvj>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <_ZN14Menu_9ViewBaseD1Ev>:

class Menu_9ViewBase : public touchgfx::View<Menu_9Presenter>
{
public:
    Menu_9ViewBase();
    virtual ~Menu_9ViewBase() {}
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	4a1f      	ldr	r2, [pc, #124]	; (8014b6c <_ZN14Menu_9ViewBaseD1Ev+0x88>)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	601a      	str	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8014af8:	4618      	mov	r0, r3
 8014afa:	f000 fa3f 	bl	8014f7c <_ZN8touchgfx10ListLayoutD1Ev>
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7ff fa85 	bl	8014014 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7ff ff73 	bl	80149fc <_ZN19Back_menu_containerD1Ev>
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7ff ff4b 	bl	80149b8 <_ZN25Menu_tree_title_containerD1Ev>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7ff ff21 	bl	8014970 <_ZN14Test_containerD1Ev>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7ff fef9 	bl	801492c <_ZN18Sub_menu_containerD1Ev>
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	339c      	adds	r3, #156	; 0x9c
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7ff fa68 	bl	8014014 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	336c      	adds	r3, #108	; 0x6c
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f000 f9f5 	bl	8014f38 <_ZN8touchgfx13ClickListenerINS_5ImageEED1Ev>
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	3340      	adds	r3, #64	; 0x40
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7ff fa3c 	bl	8013fd0 <_ZN8touchgfx3BoxD1Ev>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7ff ffa0 	bl	8014aa0 <_ZN8touchgfx4ViewI15Menu_9PresenterED1Ev>
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0802f364 	.word	0x0802f364

08014b70 <_ZN14Menu_9ViewBaseD0Ev>:
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b082      	sub	sp, #8
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f7ff ffb3 	bl	8014ae4 <_ZN14Menu_9ViewBaseD1Ev>
 8014b7e:	f242 4184 	movw	r1, #9348	; 0x2484
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f017 ff62 	bl	802ca4c <_ZdlPvj>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
	...

08014b94 <_ZN14Menu_9ViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Menu_9ViewBase::Menu_9ViewBase()
 8014b94:	b590      	push	{r4, r7, lr}
 8014b96:	b08d      	sub	sp, #52	; 0x34
 8014b98:	af02      	add	r7, sp, #8
 8014b9a:	6078      	str	r0, [r7, #4]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f000 f990 	bl	8014ec4 <_ZN8touchgfx4ViewI15Menu_9PresenterEC1Ev>
 8014ba4:	4ab6      	ldr	r2, [pc, #728]	; (8014e80 <_ZN14Menu_9ViewBaseC1Ev+0x2ec>)
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	3340      	adds	r3, #64	; 0x40
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7ff fae6 	bl	8014180 <_ZN8touchgfx3BoxC1Ev>
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	336c      	adds	r3, #108	; 0x6c
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f000 f999 	bl	8014ef0 <_ZN8touchgfx13ClickListenerINS_5ImageEEC1Ev>
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	339c      	adds	r3, #156	; 0x9c
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f004 fba8 	bl	8019318 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f000 fdcc 	bl	801576c <_ZN18Sub_menu_containerC1Ev>
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f000 fde4 	bl	80157a8 <_ZN14Test_containerC1Ev>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8014be6:	4618      	mov	r0, r3
 8014be8:	f000 fd76 	bl	80156d8 <_ZN25Menu_tree_title_containerC1Ev>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f000 fc5a 	bl	80154ac <_ZN19Back_menu_containerC1Ev>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f004 fb8a 	bl	8019318 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8014c0a:	2101      	movs	r1, #1
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7ff ff19 	bl	8014a44 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8014c18:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f007 ff19 	bl	801ca54 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 480, 800);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014c28:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014c32:	2200      	movs	r2, #0
 8014c34:	2100      	movs	r1, #0
 8014c36:	f7fd f9b1 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014c40:	2300      	movs	r3, #0
 8014c42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8014c46:	2300      	movs	r3, #0
 8014c48:	f887 3020 	strb.w	r3, [r7, #32]
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	77fb      	strb	r3, [r7, #31]
 8014c50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014c54:	041b      	lsls	r3, r3, #16
 8014c56:	461a      	mov	r2, r3
 8014c58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014c5c:	021b      	lsls	r3, r3, #8
 8014c5e:	431a      	orrs	r2, r3
 8014c60:	7ffb      	ldrb	r3, [r7, #31]
 8014c62:	4313      	orrs	r3, r2
 8014c64:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014c68:	f107 0318 	add.w	r3, r7, #24
 8014c6c:	4611      	mov	r1, r2
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7fd f8c4 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	4619      	mov	r1, r3
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f7ff faa5 	bl	80141c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroud.setXY(0, 0);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	336c      	adds	r3, #108	; 0x6c
 8014c82:	2200      	movs	r2, #0
 8014c84:	2100      	movs	r1, #0
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7fd f9c7 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    backgroud.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_BLACK_ID));
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8014c92:	f107 030c 	add.w	r3, r7, #12
 8014c96:	2100      	movs	r1, #0
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7fd f901 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014c9e:	f107 030c 	add.w	r3, r7, #12
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f006 ffeb 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Sub_menu_cont.setPosition(115, 68, 250, 250);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 8014cb0:	23fa      	movs	r3, #250	; 0xfa
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	23fa      	movs	r3, #250	; 0xfa
 8014cb6:	2244      	movs	r2, #68	; 0x44
 8014cb8:	2173      	movs	r1, #115	; 0x73
 8014cba:	f7fd f96f 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    Sub_menu_cont.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8014cca:	2300      	movs	r3, #0
 8014ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014cd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014cda:	041b      	lsls	r3, r3, #16
 8014cdc:	461a      	mov	r2, r3
 8014cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ce2:	021b      	lsls	r3, r3, #8
 8014ce4:	431a      	orrs	r2, r3
 8014ce6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014cea:	4313      	orrs	r3, r2
 8014cec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014cf0:	f107 0314 	add.w	r3, r7, #20
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fd f880 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4620      	mov	r0, r4
 8014d02:	f004 fe1e 	bl	8019942 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    sub_menu.setXY(-115, -5);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014d0c:	f06f 0204 	mvn.w	r2, #4
 8014d10:	f06f 0172 	mvn.w	r1, #114	; 0x72
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7fd f980 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    Sub_menu_cont.add(sub_menu);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014d26:	4619      	mov	r1, r3
 8014d28:	4610      	mov	r0, r2
 8014d2a:	f004 f81a 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    test_container1.setXY(-95, 0);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8014d34:	2200      	movs	r2, #0
 8014d36:	f06f 015e 	mvn.w	r1, #94	; 0x5e
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7fd f96d 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
    Sub_menu_cont.add(test_container1);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	4610      	mov	r0, r2
 8014d50:	f004 f807 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    menu_tree_title_cont.setXY(0, 0);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	2100      	movs	r1, #0
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fd f95b 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>

    back_menu_cont.setXY(0, 732);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8014d6a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7fd f952 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>

    scrollcnt.setPosition(0, 68, 480, 664);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f503 60ef 	add.w	r0, r3, #1912	; 0x778
 8014d7c:	f44f 7326 	mov.w	r3, #664	; 0x298
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014d86:	2244      	movs	r2, #68	; 0x44
 8014d88:	2100      	movs	r1, #0
 8014d8a:	f7fd f907 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollcnt.setScrollbarsColor(touchgfx::Color::getColorFromRGB(49, 192, 224));
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f503 64ef 	add.w	r4, r3, #1912	; 0x778
 8014d94:	2331      	movs	r3, #49	; 0x31
 8014d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d9a:	23c0      	movs	r3, #192	; 0xc0
 8014d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014da0:	23e0      	movs	r3, #224	; 0xe0
 8014da2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014daa:	041b      	lsls	r3, r3, #16
 8014dac:	461a      	mov	r2, r3
 8014dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014db2:	021b      	lsls	r3, r3, #8
 8014db4:	431a      	orrs	r2, r3
 8014db6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014dc0:	f107 0310 	add.w	r3, r7, #16
 8014dc4:	4611      	mov	r1, r2
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7fd f818 	bl	8011dfc <_ZN8touchgfx9colortypeC1Em>
 8014dcc:	693b      	ldr	r3, [r7, #16]
 8014dce:	4619      	mov	r1, r3
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f004 fdb6 	bl	8019942 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    list.setDirection(touchgfx::SOUTH);
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8014ddc:	2101      	movs	r1, #1
 8014dde:	4618      	mov	r0, r3
 8014de0:	f003 fe64 	bl	8018aac <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>
    list.setPosition(115, 0, 250, 250);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f603 0034 	addw	r0, r3, #2100	; 0x834
 8014dea:	23fa      	movs	r3, #250	; 0xfa
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	23fa      	movs	r3, #250	; 0xfa
 8014df0:	2200      	movs	r2, #0
 8014df2:	2173      	movs	r1, #115	; 0x73
 8014df4:	f7fd f8d2 	bl	8011f9c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollcnt.add(list);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8014e04:	4619      	mov	r1, r3
 8014e06:	4610      	mov	r0, r2
 8014e08:	f003 ffab 	bl	8018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollcnt.setScrollbarsPermanentlyVisible();
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8014e12:	2101      	movs	r1, #1
 8014e14:	4618      	mov	r0, r3
 8014e16:	f004 fd99 	bl	801994c <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>

    add(__background);
 8014e1a:	687a      	ldr	r2, [r7, #4]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	3340      	adds	r3, #64	; 0x40
 8014e20:	4619      	mov	r1, r3
 8014e22:	4610      	mov	r0, r2
 8014e24:	f7ff f99c 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroud);
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	336c      	adds	r3, #108	; 0x6c
 8014e2e:	4619      	mov	r1, r3
 8014e30:	4610      	mov	r0, r2
 8014e32:	f7ff f995 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Sub_menu_cont);
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	339c      	adds	r3, #156	; 0x9c
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	4610      	mov	r0, r2
 8014e40:	f7ff f98e 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(menu_tree_title_cont);
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	4610      	mov	r0, r2
 8014e50:	f7ff f986 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(back_menu_cont);
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	4610      	mov	r0, r2
 8014e60:	f7ff f97e 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollcnt);
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	4610      	mov	r0, r2
 8014e70:	f7ff f976 	bl	8014160 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	4618      	mov	r0, r3
 8014e78:	372c      	adds	r7, #44	; 0x2c
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd90      	pop	{r4, r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	0802f364 	.word	0x0802f364

08014e84 <_ZN14Menu_9ViewBase11setupScreenEv>:

void Menu_9ViewBase::setupScreen()
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
    sub_menu.initialize();
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8014e92:	4618      	mov	r0, r3
 8014e94:	f000 fc7c 	bl	8015790 <_ZN18Sub_menu_container10initializeEv>
    test_container1.initialize();
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f000 fc94 	bl	80157cc <_ZN14Test_container10initializeEv>
    menu_tree_title_cont.initialize();
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f000 fc52 	bl	8015754 <_ZN25Menu_tree_title_container10initializeEv>
    back_menu_cont.initialize();
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f000 fb4e 	bl	8015558 <_ZN19Back_menu_container10initializeEv>
}
 8014ebc:	bf00      	nop
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <_ZN8touchgfx4ViewI15Menu_9PresenterEC1Ev>:
    View()
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f00a fd9a 	bl	801fa08 <_ZN8touchgfx6ScreenC1Ev>
 8014ed4:	4a05      	ldr	r2, [pc, #20]	; (8014eec <_ZN8touchgfx4ViewI15Menu_9PresenterEC1Ev+0x28>)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2200      	movs	r2, #0
 8014ede:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	0802f404 	.word	0x0802f404

08014ef0 <_ZN8touchgfx13ClickListenerINS_5ImageEEC1Ev>:
template <class T>
class ClickListener : public T
{
public:
    /** Initializes a new instance of the ClickListener class. Make the object touchable. */
    ClickListener()
 8014ef0:	b590      	push	{r4, r7, lr}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
        : T(), clickAction(0)
 8014ef8:	687c      	ldr	r4, [r7, #4]
 8014efa:	f107 030c 	add.w	r3, r7, #12
 8014efe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fc ffcc 	bl	8011ea0 <_ZN8touchgfx6BitmapC1Et>
 8014f08:	f107 030c 	add.w	r3, r7, #12
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f7fe fb6a 	bl	80135e8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014f14:	4a07      	ldr	r2, [pc, #28]	; (8014f34 <_ZN8touchgfx13ClickListenerINS_5ImageEEC1Ev+0x44>)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	601a      	str	r2, [r3, #0]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
        T::setTouchable(true);
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2101      	movs	r1, #1
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7fd f907 	bl	8012138 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3714      	adds	r7, #20
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd90      	pop	{r4, r7, pc}
 8014f34:	0802f398 	.word	0x0802f398

08014f38 <_ZN8touchgfx13ClickListenerINS_5ImageEED1Ev>:
class ClickListener : public T
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	4a05      	ldr	r2, [pc, #20]	; (8014f58 <_ZN8touchgfx13ClickListenerINS_5ImageEED1Ev+0x20>)
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	601a      	str	r2, [r3, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7ff f88f 	bl	801406c <_ZN8touchgfx5ImageD1Ev>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4618      	mov	r0, r3
 8014f52:	3708      	adds	r7, #8
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	0802f398 	.word	0x0802f398

08014f5c <_ZN8touchgfx13ClickListenerINS_5ImageEED0Ev>:
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7ff ffe7 	bl	8014f38 <_ZN8touchgfx13ClickListenerINS_5ImageEED1Ev>
 8014f6a:	2130      	movs	r1, #48	; 0x30
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f017 fd6d 	bl	802ca4c <_ZdlPvj>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4618      	mov	r0, r3
 8014f76:	3708      	adds	r7, #8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <_ZN8touchgfx10ListLayoutD1Ev>:
class ListLayout : public Container
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	4a05      	ldr	r2, [pc, #20]	; (8014f9c <_ZN8touchgfx10ListLayoutD1Ev+0x20>)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	601a      	str	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fd fc7d 	bl	801288c <_ZN8touchgfx9ContainerD1Ev>
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	4618      	mov	r0, r3
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	0802ff68 	.word	0x0802ff68

08014fa0 <_ZN8touchgfx10ListLayoutD0Ev>:
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6878      	ldr	r0, [r7, #4]
 8014faa:	f7ff ffe7 	bl	8014f7c <_ZN8touchgfx10ListLayoutD1Ev>
 8014fae:	2130      	movs	r1, #48	; 0x30
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f017 fd4b 	bl	802ca4c <_ZdlPvj>
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <_ZN8touchgfx13ClickListenerINS_5ImageEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
    {
        T::handleClickEvent(event);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6839      	ldr	r1, [r7, #0]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fd f869 	bl	80120a6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00d      	beq.n	8014ff8 <_ZN8touchgfx13ClickListenerINS_5ImageEE16handleClickEventERKNS_10ClickEventE+0x38>
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	330c      	adds	r3, #12
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4610      	mov	r0, r2
 8014fec:	4798      	blx	r3
 8014fee:	4603      	mov	r3, r0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d001      	beq.n	8014ff8 <_ZN8touchgfx13ClickListenerINS_5ImageEE16handleClickEventERKNS_10ClickEventE+0x38>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e000      	b.n	8014ffa <_ZN8touchgfx13ClickListenerINS_5ImageEE16handleClickEventERKNS_10ClickEventE+0x3a>
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d009      	beq.n	8015012 <_ZN8touchgfx13ClickListenerINS_5ImageEE16handleClickEventERKNS_10ClickEventE+0x52>
        {
            clickAction->execute(*this, event);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	3308      	adds	r3, #8
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	6879      	ldr	r1, [r7, #4]
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	4798      	blx	r3
        }
    }
 8015012:	bf00      	nop
 8015014:	3708      	adds	r7, #8
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}
	...

0801501c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801501c:	b480      	push	{r7}
 801501e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015020:	4b02      	ldr	r3, [pc, #8]	; (801502c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015022:	4618      	mov	r0, r3
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	0802f430 	.word	0x0802f430

08015030 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015030:	b480      	push	{r7}
 8015032:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015034:	231c      	movs	r3, #28
}
 8015036:	4618      	mov	r0, r3
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8015040:	b480      	push	{r7}
 8015042:	b085      	sub	sp, #20
 8015044:	af00      	add	r7, sp, #0
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	460b      	mov	r3, r1
 801504a:	607a      	str	r2, [r7, #4]
 801504c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 801504e:	2300      	movs	r3, #0
    }
 8015050:	4618      	mov	r0, r3
 8015052:	3714      	adds	r7, #20
 8015054:	46bd      	mov	sp, r7
 8015056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505a:	4770      	bx	lr

0801505c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015064:	2300      	movs	r3, #0
    }
 8015066:	4618      	mov	r0, r3
 8015068:	370c      	adds	r7, #12
 801506a:	46bd      	mov	sp, r7
 801506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015070:	4770      	bx	lr

08015072 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8015072:	b480      	push	{r7}
 8015074:	b083      	sub	sp, #12
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801507a:	2300      	movs	r3, #0
    }
 801507c:	4618      	mov	r0, r3
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr

08015088 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015088:	b480      	push	{r7}
 801508a:	b085      	sub	sp, #20
 801508c:	af00      	add	r7, sp, #0
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	4613      	mov	r3, r2
 8015094:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8015096:	4a07      	ldr	r2, [pc, #28]	; (80150b4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801509c:	4a06      	ldr	r2, [pc, #24]	; (80150b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80150a2:	4a06      	ldr	r2, [pc, #24]	; (80150bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80150a4:	88fb      	ldrh	r3, [r7, #6]
 80150a6:	8013      	strh	r3, [r2, #0]
    }
 80150a8:	bf00      	nop
 80150aa:	3714      	adds	r7, #20
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr
 80150b4:	2400d884 	.word	0x2400d884
 80150b8:	2400d88c 	.word	0x2400d88c
 80150bc:	2400d888 	.word	0x2400d888

080150c0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80150c0:	b40e      	push	{r1, r2, r3}
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b085      	sub	sp, #20
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80150ca:	f107 0320 	add.w	r3, r7, #32
 80150ce:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	69fa      	ldr	r2, [r7, #28]
 80150d4:	2100      	movs	r1, #0
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f00a f824 	bl	801f124 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80150dc:	4603      	mov	r3, r0
 80150de:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80150e0:	89fb      	ldrh	r3, [r7, #14]
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80150ec:	b003      	add	sp, #12
 80150ee:	4770      	bx	lr

080150f0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80150f0:	b40c      	push	{r2, r3}
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b084      	sub	sp, #16
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
 80150fa:	460b      	mov	r3, r1
 80150fc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80150fe:	f107 031c 	add.w	r3, r7, #28
 8015102:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8015104:	78f9      	ldrb	r1, [r7, #3]
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	69ba      	ldr	r2, [r7, #24]
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f00a f80a 	bl	801f124 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015110:	4603      	mov	r3, r0
 8015112:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015114:	89fb      	ldrh	r3, [r7, #14]
}
 8015116:	4618      	mov	r0, r3
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015120:	b002      	add	sp, #8
 8015122:	4770      	bx	lr

08015124 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b08a      	sub	sp, #40	; 0x28
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	460b      	mov	r3, r1
 801512e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015134:	2b00      	cmp	r3, #0
 8015136:	d016      	beq.n	8015166 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	3322      	adds	r3, #34	; 0x22
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 801513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015140:	8adb      	ldrh	r3, [r3, #22]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d105      	bne.n	8015152 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8015146:	4b43      	ldr	r3, [pc, #268]	; (8015254 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015148:	4a43      	ldr	r2, [pc, #268]	; (8015258 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801514a:	21c0      	movs	r1, #192	; 0xc0
 801514c:	4843      	ldr	r0, [pc, #268]	; (801525c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801514e:	f017 fcab 	bl	802caa8 <__assert_func>
            return buffer[pos];
 8015152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015154:	8a9b      	ldrh	r3, [r3, #20]
 8015156:	461a      	mov	r2, r3
 8015158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015162:	2301      	movs	r3, #1
 8015164:	e000      	b.n	8015168 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8015166:	2300      	movs	r3, #0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d06a      	beq.n	8015242 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f00b fb5b 	bl	8020828 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3322      	adds	r3, #34	; 0x22
 8015176:	623b      	str	r3, [r7, #32]
 8015178:	2301      	movs	r3, #1
 801517a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 801517c:	6a3b      	ldr	r3, [r7, #32]
 801517e:	8adb      	ldrh	r3, [r3, #22]
 8015180:	8bfa      	ldrh	r2, [r7, #30]
 8015182:	429a      	cmp	r2, r3
 8015184:	d305      	bcc.n	8015192 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8015186:	4b36      	ldr	r3, [pc, #216]	; (8015260 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8015188:	4a36      	ldr	r2, [pc, #216]	; (8015264 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801518a:	21c5      	movs	r1, #197	; 0xc5
 801518c:	4833      	ldr	r0, [pc, #204]	; (801525c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 801518e:	f017 fc8b 	bl	802caa8 <__assert_func>
            const uint16_t index = pos + offset;
 8015192:	6a3b      	ldr	r3, [r7, #32]
 8015194:	8a9a      	ldrh	r2, [r3, #20]
 8015196:	8bfb      	ldrh	r3, [r7, #30]
 8015198:	4413      	add	r3, r2
 801519a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 801519c:	8bbb      	ldrh	r3, [r7, #28]
 801519e:	2b09      	cmp	r3, #9
 80151a0:	d801      	bhi.n	80151a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80151a2:	8bbb      	ldrh	r3, [r7, #28]
 80151a4:	e001      	b.n	80151aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80151a6:	8bbb      	ldrh	r3, [r7, #28]
 80151a8:	3b0a      	subs	r3, #10
 80151aa:	6a3a      	ldr	r2, [r7, #32]
 80151ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80151b0:	f640 123f 	movw	r2, #2367	; 0x93f
 80151b4:	4293      	cmp	r3, r2
 80151b6:	bf0c      	ite	eq
 80151b8:	2301      	moveq	r3, #1
 80151ba:	2300      	movne	r3, #0
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d03f      	beq.n	8015242 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	3322      	adds	r3, #34	; 0x22
 80151c6:	687a      	ldr	r2, [r7, #4]
 80151c8:	3222      	adds	r2, #34	; 0x22
 80151ca:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	8ad2      	ldrh	r2, [r2, #22]
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	d105      	bne.n	80151e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80151d4:	4b1f      	ldr	r3, [pc, #124]	; (8015254 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80151d6:	4a20      	ldr	r2, [pc, #128]	; (8015258 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80151d8:	21c0      	movs	r1, #192	; 0xc0
 80151da:	4820      	ldr	r0, [pc, #128]	; (801525c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80151dc:	f017 fc64 	bl	802caa8 <__assert_func>
            return buffer[pos];
 80151e0:	68ba      	ldr	r2, [r7, #8]
 80151e2:	8a92      	ldrh	r2, [r2, #20]
 80151e4:	4611      	mov	r1, r2
 80151e6:	68ba      	ldr	r2, [r7, #8]
 80151e8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80151ec:	613b      	str	r3, [r7, #16]
 80151ee:	4613      	mov	r3, r2
 80151f0:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	8adb      	ldrh	r3, [r3, #22]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d806      	bhi.n	8015208 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80151fa:	4b1b      	ldr	r3, [pc, #108]	; (8015268 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80151fc:	4a1b      	ldr	r2, [pc, #108]	; (801526c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80151fe:	f240 110d 	movw	r1, #269	; 0x10d
 8015202:	4816      	ldr	r0, [pc, #88]	; (801525c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015204:	f017 fc50 	bl	802caa8 <__assert_func>
            const uint16_t index = pos + 1;
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	8a9b      	ldrh	r3, [r3, #20]
 801520c:	3301      	adds	r3, #1
 801520e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8015210:	89bb      	ldrh	r3, [r7, #12]
 8015212:	2b09      	cmp	r3, #9
 8015214:	d801      	bhi.n	801521a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8015216:	89bb      	ldrh	r3, [r7, #12]
 8015218:	e000      	b.n	801521c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801521a:	2300      	movs	r3, #0
 801521c:	693a      	ldr	r2, [r7, #16]
 801521e:	89f9      	ldrh	r1, [r7, #14]
 8015220:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8015224:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	3322      	adds	r3, #34	; 0x22
 801522a:	61bb      	str	r3, [r7, #24]
 801522c:	f640 133f 	movw	r3, #2367	; 0x93f
 8015230:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	8a9b      	ldrh	r3, [r3, #20]
 8015236:	4619      	mov	r1, r3
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	8afa      	ldrh	r2, [r7, #22]
 801523c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8015240:	bf00      	nop
        }
    }
    return getNextChar();
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f00b f9f2 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015248:	4603      	mov	r3, r0
}
 801524a:	4618      	mov	r0, r3
 801524c:	3728      	adds	r7, #40	; 0x28
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	0802e298 	.word	0x0802e298
 8015258:	0802e2a4 	.word	0x0802e2a4
 801525c:	0802e350 	.word	0x0802e350
 8015260:	0802e398 	.word	0x0802e398
 8015264:	0802e3a8 	.word	0x0802e3a8
 8015268:	0802e47c 	.word	0x0802e47c
 801526c:	0802e488 	.word	0x0802e488

08015270 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f00b f9a0 	bl	80205be <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801527e:	bf00      	nop
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}

08015286 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8015286:	b580      	push	{r7, lr}
 8015288:	b088      	sub	sp, #32
 801528a:	af02      	add	r7, sp, #8
 801528c:	60f8      	str	r0, [r7, #12]
 801528e:	1d38      	adds	r0, r7, #4
 8015290:	e880 0006 	stmia.w	r0, {r1, r2}
 8015294:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8015296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801529a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 801529c:	1d39      	adds	r1, r7, #4
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	9301      	str	r3, [sp, #4]
 80152a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	6a3b      	ldr	r3, [r7, #32]
 80152a8:	683a      	ldr	r2, [r7, #0]
 80152aa:	68f8      	ldr	r0, [r7, #12]
 80152ac:	f008 fc0e 	bl	801dacc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80152b0:	bf00      	nop
 80152b2:	3718      	adds	r7, #24
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80152b8:	b590      	push	{r4, r7, lr}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	4603      	mov	r3, r0
 80152c0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80152c2:	2300      	movs	r3, #0
 80152c4:	60fb      	str	r3, [r7, #12]
    if (id < 2)
 80152c6:	88fb      	ldrh	r3, [r7, #6]
 80152c8:	2b01      	cmp	r3, #1
 80152ca:	d82a      	bhi.n	8015322 <_ZN8touchgfx5Texts11setLanguageEt+0x6a>
    {
        if (languagesArray[id] != 0)
 80152cc:	88fb      	ldrh	r3, [r7, #6]
 80152ce:	4a1f      	ldr	r2, [pc, #124]	; (801534c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80152d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d016      	beq.n	8015306 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80152d8:	88fb      	ldrh	r3, [r7, #6]
 80152da:	4a1c      	ldr	r2, [pc, #112]	; (801534c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80152dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152e0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	68ba      	ldr	r2, [r7, #8]
 80152e8:	4413      	add	r3, r2
 80152ea:	4a19      	ldr	r2, [pc, #100]	; (8015350 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80152ec:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	685b      	ldr	r3, [r3, #4]
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	4413      	add	r3, r2
 80152f6:	4a17      	ldr	r2, [pc, #92]	; (8015354 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80152f8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	689b      	ldr	r3, [r3, #8]
 80152fe:	68ba      	ldr	r2, [r7, #8]
 8015300:	4413      	add	r3, r2
 8015302:	60fb      	str	r3, [r7, #12]
 8015304:	e00d      	b.n	8015322 <_ZN8touchgfx5Texts11setLanguageEt+0x6a>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015306:	4b12      	ldr	r3, [pc, #72]	; (8015350 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015308:	4a13      	ldr	r2, [pc, #76]	; (8015358 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 801530a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 801530c:	88fb      	ldrh	r3, [r7, #6]
 801530e:	4a13      	ldr	r2, [pc, #76]	; (801535c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015314:	4a0f      	ldr	r2, [pc, #60]	; (8015354 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015316:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015318:	88fb      	ldrh	r3, [r7, #6]
 801531a:	4a11      	ldr	r2, [pc, #68]	; (8015360 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 801531c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015320:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00d      	beq.n	8015344 <_ZN8touchgfx5Texts11setLanguageEt+0x8c>
    {
        currentLanguage = id;
 8015328:	4a0e      	ldr	r2, [pc, #56]	; (8015364 <_ZN8touchgfx5Texts11setLanguageEt+0xac>)
 801532a:	88fb      	ldrh	r3, [r7, #6]
 801532c:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801532e:	f000 f83d 	bl	80153ac <_ZN17TypedTextDatabase8getFontsEv>
 8015332:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015334:	f000 f832 	bl	801539c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015338:	4603      	mov	r3, r0
 801533a:	461a      	mov	r2, r3
 801533c:	4621      	mov	r1, r4
 801533e:	68f8      	ldr	r0, [r7, #12]
 8015340:	f7ff fea2 	bl	8015088 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015344:	bf00      	nop
 8015346:	3714      	adds	r7, #20
 8015348:	46bd      	mov	sp, r7
 801534a:	bd90      	pop	{r4, r7, pc}
 801534c:	24004d64 	.word	0x24004d64
 8015350:	24004d70 	.word	0x24004d70
 8015354:	24004d74 	.word	0x24004d74
 8015358:	902f3dd8 	.word	0x902f3dd8
 801535c:	0802f660 	.word	0x0802f660
 8015360:	902f4b14 	.word	0x902f4b14
 8015364:	24004d6c 	.word	0x24004d6c

08015368 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015368:	b480      	push	{r7}
 801536a:	b083      	sub	sp, #12
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
 8015370:	460b      	mov	r3, r1
 8015372:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015374:	4b07      	ldr	r3, [pc, #28]	; (8015394 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015376:	681a      	ldr	r2, [r3, #0]
 8015378:	4b07      	ldr	r3, [pc, #28]	; (8015398 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801537a:	6819      	ldr	r1, [r3, #0]
 801537c:	887b      	ldrh	r3, [r7, #2]
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	440b      	add	r3, r1
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	005b      	lsls	r3, r3, #1
 8015386:	4413      	add	r3, r2
}
 8015388:	4618      	mov	r0, r3
 801538a:	370c      	adds	r7, #12
 801538c:	46bd      	mov	sp, r7
 801538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015392:	4770      	bx	lr
 8015394:	24004d70 	.word	0x24004d70
 8015398:	24004d74 	.word	0x24004d74

0801539c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801539c:	b480      	push	{r7}
 801539e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80153a0:	2338      	movs	r3, #56	; 0x38
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80153ac:	b480      	push	{r7}
 80153ae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80153b0:	4b02      	ldr	r3, [pc, #8]	; (80153bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr
 80153bc:	24004d78 	.word	0x24004d78

080153c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
 80153c8:	6039      	str	r1, [r7, #0]
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d113      	bne.n	80153f8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153d6:	4293      	cmp	r3, r2
 80153d8:	d10e      	bne.n	80153f8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 80153da:	f7fb fd8b 	bl	8010ef4 <_Z23getFont_verdana_20_4bppv>
 80153de:	4603      	mov	r3, r0
};
 80153e0:	4a07      	ldr	r2, [pc, #28]	; (8015400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80153e2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 80153e4:	f7fb fddc 	bl	8010fa0 <_Z23getFont_verdana_40_4bppv>
 80153e8:	4603      	mov	r3, r0
};
 80153ea:	4a05      	ldr	r2, [pc, #20]	; (8015400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80153ec:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 80153ee:	f7fb fd2b 	bl	8010e48 <_Z23getFont_verdana_10_4bppv>
 80153f2:	4603      	mov	r3, r0
};
 80153f4:	4a02      	ldr	r2, [pc, #8]	; (8015400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80153f6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 80153f8:	bf00      	nop
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	24004d78 	.word	0x24004d78

08015404 <_GLOBAL__sub_I_touchgfx_fonts>:
 8015404:	b580      	push	{r7, lr}
 8015406:	af00      	add	r7, sp, #0
 8015408:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801540c:	2001      	movs	r0, #1
 801540e:	f7ff ffd7 	bl	80153c0 <_Z41__static_initialization_and_destruction_0ii>
 8015412:	bd80      	pop	{r7, pc}

08015414 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	4a05      	ldr	r2, [pc, #20]	; (8015434 <_ZN19FrontendApplicationD1Ev+0x20>)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	601a      	str	r2, [r3, #0]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	4618      	mov	r0, r3
 8015426:	f7fc f807 	bl	8011438 <_ZN23FrontendApplicationBaseD1Ev>
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	4618      	mov	r0, r3
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}
 8015434:	0802f6c4 	.word	0x0802f6c4

08015438 <_ZN19FrontendApplicationD0Ev>:
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6878      	ldr	r0, [r7, #4]
 8015442:	f7ff ffe7 	bl	8015414 <_ZN19FrontendApplicationD1Ev>
 8015446:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f017 fafe 	bl	802ca4c <_ZdlPvj>
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015468:	4618      	mov	r0, r3
 801546a:	f000 ff05 	bl	8016278 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	4618      	mov	r0, r3
 8015472:	f008 fea3 	bl	801e1bc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015476:	bf00      	nop
 8015478:	3708      	adds	r7, #8
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
	...

08015480 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015480:	b580      	push	{r7, lr}
 8015482:	b084      	sub	sp, #16
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	687a      	ldr	r2, [r7, #4]
 8015490:	68b9      	ldr	r1, [r7, #8]
 8015492:	4618      	mov	r0, r3
 8015494:	f7fc f820 	bl	80114d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015498:	4a03      	ldr	r2, [pc, #12]	; (80154a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	601a      	str	r2, [r3, #0]
{

}
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	4618      	mov	r0, r3
 80154a2:	3710      	adds	r7, #16
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	0802f6c4 	.word	0x0802f6c4

080154ac <_ZN19Back_menu_containerC1Ev>:
#include <gui/containers/Back_menu_container.hpp>

Back_menu_container::Back_menu_container():
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
BackCallback(0)
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fd fa0a 	bl	80128d0 <_ZN23Back_menu_containerBaseC1Ev>
 80154bc:	4a05      	ldr	r2, [pc, #20]	; (80154d4 <_ZN19Back_menu_containerC1Ev+0x28>)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	601a      	str	r2, [r3, #0]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{

}
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	4618      	mov	r0, r3
 80154ce:	3708      	adds	r7, #8
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	0802f710 	.word	0x0802f710

080154d8 <_ZN19Back_menu_container12Back_clickedEv>:


void Back_menu_container::Back_clicked()
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
	//touchgfx_printf("Back clicked  %s\n", TGFX_back_elemnt.name);

    if (BackCallback->isValid())
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	330c      	adds	r3, #12
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	4610      	mov	r0, r2
 80154f4:	4798      	blx	r3
 80154f6:	4603      	mov	r3, r0
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d00b      	beq.n	8015514 <_ZN19Back_menu_container12Back_clickedEv+0x3c>
    {

    	//touchgfx_printf("Back valid", TGFX_back_elemnt.name);
    	BackCallback->execute(*this);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	3308      	adds	r3, #8
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	6879      	ldr	r1, [r7, #4]
 8015510:	4610      	mov	r0, r2
 8015512:	4798      	blx	r3
    }
}
 8015514:	bf00      	nop
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <_ZN19Back_menu_container7setBackE16TGFX_menu_structRN8touchgfx15GenericCallbackIRS_vvEE>:

void Back_menu_container::setBack(TGFX_Menu_t Menu_parent,GenericCallback< Back_menu_container& >& callback)
{
 801551c:	b084      	sub	sp, #16
 801551e:	b4b0      	push	{r4, r5, r7}
 8015520:	b083      	sub	sp, #12
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
 8015526:	f107 001c 	add.w	r0, r7, #28
 801552a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	//touchgfx_printf("set callback %s\n", callback);

	TGFX_back_elemnt = Menu_parent;
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8015534:	f107 051c 	add.w	r5, r7, #28
 8015538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801553a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801553c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015540:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	//touchgfx_printf("set back %s\n", TGFX_back_elemnt.name);


	BackCallback = &callback;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015548:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 801554c:	bf00      	nop
 801554e:	370c      	adds	r7, #12
 8015550:	46bd      	mov	sp, r7
 8015552:	bcb0      	pop	{r4, r5, r7}
 8015554:	b004      	add	sp, #16
 8015556:	4770      	bx	lr

08015558 <_ZN19Back_menu_container10initializeEv>:


void Back_menu_container::initialize()
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
    Back_menu_containerBase::initialize();
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	4618      	mov	r0, r3
 8015564:	f7fd fb25 	bl	8012bb2 <_ZN23Back_menu_containerBase10initializeEv>
}
 8015568:	bf00      	nop
 801556a:	3708      	adds	r7, #8
 801556c:	46bd      	mov	sp, r7
 801556e:	bd80      	pop	{r7, pc}

08015570 <_ZN22Menu_buttons_containerD1Ev>:

class Menu_buttons_container : public Menu_buttons_containerBase
{
public:
    Menu_buttons_container();
    virtual ~Menu_buttons_container() {}
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	4a05      	ldr	r2, [pc, #20]	; (8015590 <_ZN22Menu_buttons_containerD1Ev+0x20>)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	601a      	str	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	4618      	mov	r0, r3
 8015582:	f7fd fde3 	bl	801314c <_ZN26Menu_buttons_containerBaseD1Ev>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0802f7a8 	.word	0x0802f7a8

08015594 <_ZN22Menu_buttons_containerD0Ev>:
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6878      	ldr	r0, [r7, #4]
 801559e:	f7ff ffe7 	bl	8015570 <_ZN22Menu_buttons_containerD1Ev>
 80155a2:	21d8      	movs	r1, #216	; 0xd8
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f017 fa51 	bl	802ca4c <_ZdlPvj>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	4618      	mov	r0, r3
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <_ZN22Menu_buttons_containerC1Ev>:
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>


Menu_buttons_container::Menu_buttons_container():
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
viewCallback(0)
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fd fcfe 	bl	8012fc0 <_ZN26Menu_buttons_containerBaseC1Ev>
 80155c4:	4a05      	ldr	r2, [pc, #20]	; (80155dc <_ZN22Menu_buttons_containerC1Ev+0x28>)
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	601a      	str	r2, [r3, #0]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2200      	movs	r2, #0
 80155ce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{

}
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	0802f7a8 	.word	0x0802f7a8

080155e0 <_ZN22Menu_buttons_container9setActionERN8touchgfx15GenericCallbackIRS_vvEE>:


void Menu_buttons_container::setAction(GenericCallback< Menu_buttons_container& >& callback)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b083      	sub	sp, #12
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
    viewCallback = &callback;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 80155f2:	bf00      	nop
 80155f4:	370c      	adds	r7, #12
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr

080155fe <_ZN22Menu_buttons_container11clickActionEv>:

void Menu_buttons_container::clickAction()
{
 80155fe:	b580      	push	{r7, lr}
 8015600:	b082      	sub	sp, #8
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
    if (viewCallback->isValid())
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	330c      	adds	r3, #12
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	4610      	mov	r0, r2
 801561a:	4798      	blx	r3
 801561c:	4603      	mov	r3, r0
 801561e:	2b00      	cmp	r3, #0
 8015620:	d00b      	beq.n	801563a <_ZN22Menu_buttons_container11clickActionEv+0x3c>
    {

        viewCallback->execute(*this);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	3308      	adds	r3, #8
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	6879      	ldr	r1, [r7, #4]
 8015636:	4610      	mov	r0, r2
 8015638:	4798      	blx	r3
    }
}
 801563a:	bf00      	nop
 801563c:	3708      	adds	r7, #8
 801563e:	46bd      	mov	sp, r7
 8015640:	bd80      	pop	{r7, pc}

08015642 <_ZN22Menu_buttons_container10initializeEv>:

void Menu_buttons_container::initialize()
{
 8015642:	b580      	push	{r7, lr}
 8015644:	b082      	sub	sp, #8
 8015646:	af00      	add	r7, sp, #0
 8015648:	6078      	str	r0, [r7, #4]
    Menu_buttons_containerBase::initialize();
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fdaf 	bl	80131b0 <_ZN26Menu_buttons_containerBase10initializeEv>
}
 8015652:	bf00      	nop
 8015654:	3708      	adds	r7, #8
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}

0801565a <_ZN22Menu_buttons_container16setupListElementE5TEXTS16TGFX_menu_struct>:


void Menu_buttons_container::setupListElement( TEXTS iconTextID, TGFX_Menu_t Menu)
{
 801565a:	b082      	sub	sp, #8
 801565c:	b5b0      	push	{r4, r5, r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
 8015664:	f107 0020 	add.w	r0, r7, #32
 8015668:	e880 000c 	stmia.w	r0, {r2, r3}
 801566c:	460b      	mov	r3, r1
 801566e:	70fb      	strb	r3, [r7, #3]

	TGFX_menu_elemnt = Menu;
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8015676:	f107 0520 	add.w	r5, r7, #32
 801567a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801567c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801567e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8015682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//image1.setBitmap(iconBMP);
	textarea.setTypedText(TypedText(iconTextID));
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f103 0460 	add.w	r4, r3, #96	; 0x60
 801568c:	78fb      	ldrb	r3, [r7, #3]
 801568e:	b29a      	uxth	r2, r3
 8015690:	f107 0308 	add.w	r3, r7, #8
 8015694:	4611      	mov	r1, r2
 8015696:	4618      	mov	r0, r3
 8015698:	f7fd f884 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 801569c:	f107 0308 	add.w	r3, r7, #8
 80156a0:	4619      	mov	r1, r3
 80156a2:	4620      	mov	r0, r4
 80156a4:	f006 f9e6 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80156a8:	f107 0308 	add.w	r3, r7, #8
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7fb faf1 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
	textarea.resizeToCurrentText();
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	3360      	adds	r3, #96	; 0x60
 80156b6:	4618      	mov	r0, r3
 80156b8:	f006 f9bc 	bl	801ba34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    invalidate();
 80156bc:	687a      	ldr	r2, [r7, #4]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	3314      	adds	r3, #20
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	4610      	mov	r0, r2
 80156c8:	4798      	blx	r3
}
 80156ca:	bf00      	nop
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80156d4:	b002      	add	sp, #8
 80156d6:	4770      	bx	lr

080156d8 <_ZN25Menu_tree_title_containerC1Ev>:
#include <gui/containers/Menu_tree_title_container.hpp>

Menu_tree_title_container::Menu_tree_title_container()
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7fd fe0a 	bl	80132fc <_ZN29Menu_tree_title_containerBaseC1Ev>
 80156e8:	4a03      	ldr	r2, [pc, #12]	; (80156f8 <_ZN25Menu_tree_title_containerC1Ev+0x20>)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	601a      	str	r2, [r3, #0]
{

}
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}
 80156f8:	0802f840 	.word	0x0802f840

080156fc <_ZN25Menu_tree_title_container9Set_TitleE5TEXTS>:


void Menu_tree_title_container::Set_Title(TEXTS iconTextID)
{
 80156fc:	b590      	push	{r4, r7, lr}
 80156fe:	b085      	sub	sp, #20
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	70fb      	strb	r3, [r7, #3]
	textArea1.setTypedText(TypedText(iconTextID));
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 801570e:	78fb      	ldrb	r3, [r7, #3]
 8015710:	b29a      	uxth	r2, r3
 8015712:	f107 0308 	add.w	r3, r7, #8
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7fd f843 	bl	80127a4 <_ZN8touchgfx9TypedTextC1Et>
 801571e:	f107 0308 	add.w	r3, r7, #8
 8015722:	4619      	mov	r1, r3
 8015724:	4620      	mov	r0, r4
 8015726:	f006 f9a5 	bl	801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801572a:	f107 0308 	add.w	r3, r7, #8
 801572e:	4618      	mov	r0, r3
 8015730:	f7fb fab0 	bl	8010c94 <_ZN8touchgfx9TypedTextD1Ev>
	textArea1.resizeToCurrentText();
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	33b0      	adds	r3, #176	; 0xb0
 8015738:	4618      	mov	r0, r3
 801573a:	f006 f97b 	bl	801ba34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    invalidate();
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	3314      	adds	r3, #20
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	4610      	mov	r0, r2
 801574a:	4798      	blx	r3
}
 801574c:	bf00      	nop
 801574e:	3714      	adds	r7, #20
 8015750:	46bd      	mov	sp, r7
 8015752:	bd90      	pop	{r4, r7, pc}

08015754 <_ZN25Menu_tree_title_container10initializeEv>:

void Menu_tree_title_container::initialize()
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
    Menu_tree_title_containerBase::initialize();
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	4618      	mov	r0, r3
 8015760:	f7fd feee 	bl	8013540 <_ZN29Menu_tree_title_containerBase10initializeEv>
}
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <_ZN18Sub_menu_containerC1Ev>:
#include <gui/containers/Sub_menu_container.hpp>

Sub_menu_container::Sub_menu_container()
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	4618      	mov	r0, r3
 8015778:	f7fd feec 	bl	8013554 <_ZN22Sub_menu_containerBaseC1Ev>
 801577c:	4a03      	ldr	r2, [pc, #12]	; (801578c <_ZN18Sub_menu_containerC1Ev+0x20>)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	601a      	str	r2, [r3, #0]
{

}
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	4618      	mov	r0, r3
 8015786:	3708      	adds	r7, #8
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	0802f8d4 	.word	0x0802f8d4

08015790 <_ZN18Sub_menu_container10initializeEv>:

void Sub_menu_container::initialize()
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
    Sub_menu_containerBase::initialize();
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	4618      	mov	r0, r3
 801579c:	f7fd ff1a 	bl	80135d4 <_ZN22Sub_menu_containerBase10initializeEv>
}
 80157a0:	bf00      	nop
 80157a2:	3708      	adds	r7, #8
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <_ZN14Test_containerC1Ev>:
#include <gui/containers/Test_container.hpp>

Test_container::Test_container()
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7fd ff3e 	bl	8013634 <_ZN18Test_containerBaseC1Ev>
 80157b8:	4a03      	ldr	r2, [pc, #12]	; (80157c8 <_ZN14Test_containerC1Ev+0x20>)
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	601a      	str	r2, [r3, #0]
{

}
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	4618      	mov	r0, r3
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	0802f968 	.word	0x0802f968

080157cc <_ZN14Test_container10initializeEv>:

void Test_container::initialize()
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
    Test_containerBase::initialize();
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7fe fbef 	bl	8013fba <_ZN18Test_containerBase10initializeEv>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
    {
    }
 80157ec:	bf00      	nop
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr

080157f8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80157f8:	b480      	push	{r7}
 80157fa:	b083      	sub	sp, #12
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
    {
    }
 8015800:	bf00      	nop
 8015802:	370c      	adds	r7, #12
 8015804:	46bd      	mov	sp, r7
 8015806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580a:	4770      	bx	lr

0801580c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 801580c:	b480      	push	{r7}
 801580e:	b083      	sub	sp, #12
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
    {
 8015814:	4a04      	ldr	r2, [pc, #16]	; (8015828 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	601a      	str	r2, [r3, #0]
    }
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	4618      	mov	r0, r3
 801581e:	370c      	adds	r7, #12
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr
 8015828:	0802fa34 	.word	0x0802fa34

0801582c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
    }
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f7ff ffe9 	bl	801580c <_ZN8touchgfx9PresenterD1Ev>
 801583a:	2104      	movs	r1, #4
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f017 f905 	bl	802ca4c <_ZdlPvj>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	4618      	mov	r0, r3
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
    {
 8015854:	4a04      	ldr	r2, [pc, #16]	; (8015868 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	601a      	str	r2, [r3, #0]
    }
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	4618      	mov	r0, r3
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	0802fa34 	.word	0x0802fa34

0801586c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801586c:	b480      	push	{r7}
 801586e:	b083      	sub	sp, #12
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
 8015874:	4a06      	ldr	r2, [pc, #24]	; (8015890 <_ZN13ModelListenerC1Ev+0x24>)
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	601a      	str	r2, [r3, #0]
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	605a      	str	r2, [r3, #4]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4618      	mov	r0, r3
 8015884:	370c      	adds	r7, #12
 8015886:	46bd      	mov	sp, r7
 8015888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	0802fa24 	.word	0x0802fa24

08015894 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8015894:	b480      	push	{r7}
 8015896:	b083      	sub	sp, #12
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	4a04      	ldr	r2, [pc, #16]	; (80158b0 <_ZN13ModelListenerD1Ev+0x1c>)
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	601a      	str	r2, [r3, #0]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	4618      	mov	r0, r3
 80158a6:	370c      	adds	r7, #12
 80158a8:	46bd      	mov	sp, r7
 80158aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ae:	4770      	bx	lr
 80158b0:	0802fa24 	.word	0x0802fa24

080158b4 <_ZN13ModelListenerD0Ev>:
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f7ff ffe9 	bl	8015894 <_ZN13ModelListenerD1Ev>
 80158c2:	2108      	movs	r1, #8
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f017 f8c1 	bl	802ca4c <_ZdlPvj>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <_ZN20Main_screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Main_screenPresenter() {};
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b082      	sub	sp, #8
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	4a09      	ldr	r2, [pc, #36]	; (8015904 <_ZN20Main_screenPresenterD1Ev+0x30>)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	601a      	str	r2, [r3, #0]
 80158e2:	4a09      	ldr	r2, [pc, #36]	; (8015908 <_ZN20Main_screenPresenterD1Ev+0x34>)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	605a      	str	r2, [r3, #4]
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	3304      	adds	r3, #4
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff ffd1 	bl	8015894 <_ZN13ModelListenerD1Ev>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ff ff89 	bl	801580c <_ZN8touchgfx9PresenterD1Ev>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	4618      	mov	r0, r3
 80158fe:	3708      	adds	r7, #8
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	0802f9fc 	.word	0x0802f9fc
 8015908:	0802fa14 	.word	0x0802fa14

0801590c <_ZThn4_N20Main_screenPresenterD1Ev>:
 801590c:	f1a0 0004 	sub.w	r0, r0, #4
 8015910:	e7e0      	b.n	80158d4 <_ZN20Main_screenPresenterD1Ev>
 8015912:	bf00      	nop

08015914 <_ZN20Main_screenPresenterD0Ev>:
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f7ff ffd9 	bl	80158d4 <_ZN20Main_screenPresenterD1Ev>
 8015922:	2110      	movs	r1, #16
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f017 f891 	bl	802ca4c <_ZdlPvj>
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	4618      	mov	r0, r3
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <_ZThn4_N20Main_screenPresenterD0Ev>:
 8015934:	f1a0 0004 	sub.w	r0, r0, #4
 8015938:	e7ec      	b.n	8015914 <_ZN20Main_screenPresenterD0Ev>
	...

0801593c <_ZN20Main_screenPresenterC1ER15Main_screenView>:
#include <gui/main_screen_screen/Main_screenView.hpp>
#include <gui/main_screen_screen/Main_screenPresenter.hpp>

Main_screenPresenter::Main_screenPresenter(Main_screenView& v)
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
 8015944:	6039      	str	r1, [r7, #0]
    : view(v)
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	4618      	mov	r0, r3
 801594a:	f7ff ff7f 	bl	801584c <_ZN8touchgfx9PresenterC1Ev>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	3304      	adds	r3, #4
 8015952:	4618      	mov	r0, r3
 8015954:	f7ff ff8a 	bl	801586c <_ZN13ModelListenerC1Ev>
 8015958:	4a06      	ldr	r2, [pc, #24]	; (8015974 <_ZN20Main_screenPresenterC1ER15Main_screenView+0x38>)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	601a      	str	r2, [r3, #0]
 801595e:	4a06      	ldr	r2, [pc, #24]	; (8015978 <_ZN20Main_screenPresenterC1ER15Main_screenView+0x3c>)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	605a      	str	r2, [r3, #4]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	683a      	ldr	r2, [r7, #0]
 8015968:	60da      	str	r2, [r3, #12]
{

}
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	4618      	mov	r0, r3
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}
 8015974:	0802f9fc 	.word	0x0802f9fc
 8015978:	0802fa14 	.word	0x0802fa14

0801597c <_ZN20Main_screenPresenter8activateEv>:

void Main_screenPresenter::activate()
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]

}
 8015984:	bf00      	nop
 8015986:	370c      	adds	r7, #12
 8015988:	46bd      	mov	sp, r7
 801598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598e:	4770      	bx	lr

08015990 <_ZN20Main_screenPresenter10deactivateEv>:

void Main_screenPresenter::deactivate()
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]

}
 8015998:	bf00      	nop
 801599a:	370c      	adds	r7, #12
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr

080159a4 <_ZN15Main_screenViewD1Ev>:

class Main_screenView : public Main_screenViewBase
{
public:
    Main_screenView();
    virtual ~Main_screenView() {}
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	4a05      	ldr	r2, [pc, #20]	; (80159c4 <_ZN15Main_screenViewD1Ev+0x20>)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	601a      	str	r2, [r3, #0]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7fe fc87 	bl	80142c8 <_ZN19Main_screenViewBaseD1Ev>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4618      	mov	r0, r3
 80159be:	3708      	adds	r7, #8
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	0802fa4c 	.word	0x0802fa4c

080159c8 <_ZN15Main_screenViewD0Ev>:
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f7ff ffe7 	bl	80159a4 <_ZN15Main_screenViewD1Ev>
 80159d6:	f44f 7198 	mov.w	r1, #304	; 0x130
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	f017 f836 	bl	802ca4c <_ZdlPvj>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	4618      	mov	r0, r3
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
	...

080159ec <_ZN15Main_screenViewC1Ev>:
#include <gui/main_screen_screen/Main_screenView.hpp>

Main_screenView::Main_screenView()
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fe fcae 	bl	8014358 <_ZN19Main_screenViewBaseC1Ev>
 80159fc:	4a03      	ldr	r2, [pc, #12]	; (8015a0c <_ZN15Main_screenViewC1Ev+0x20>)
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	601a      	str	r2, [r3, #0]
{

}
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4618      	mov	r0, r3
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0802fa4c 	.word	0x0802fa4c

08015a10 <_ZN15Main_screenView11setupScreenEv>:

void Main_screenView::setupScreen()
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
    Main_screenViewBase::setupScreen();
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7fe fd84 	bl	8014528 <_ZN19Main_screenViewBase11setupScreenEv>
}
 8015a20:	bf00      	nop
 8015a22:	3708      	adds	r7, #8
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <_ZN15Main_screenView14tearDownScreenEv>:

void Main_screenView::tearDownScreen()
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
    Main_screenViewBase::tearDownScreen();
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7fe fb74 	bl	8014120 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015a38:	bf00      	nop
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <_ZN15Menu_9PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Menu_9Presenter() {};
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	4a09      	ldr	r2, [pc, #36]	; (8015a70 <_ZN15Menu_9PresenterD1Ev+0x30>)
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	601a      	str	r2, [r3, #0]
 8015a4e:	4a09      	ldr	r2, [pc, #36]	; (8015a74 <_ZN15Menu_9PresenterD1Ev+0x34>)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	605a      	str	r2, [r3, #4]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	3304      	adds	r3, #4
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7ff ff1b 	bl	8015894 <_ZN13ModelListenerD1Ev>
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7ff fed3 	bl	801580c <_ZN8touchgfx9PresenterD1Ev>
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3708      	adds	r7, #8
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	0802fa80 	.word	0x0802fa80
 8015a74:	0802fa98 	.word	0x0802fa98

08015a78 <_ZThn4_N15Menu_9PresenterD1Ev>:
 8015a78:	f1a0 0004 	sub.w	r0, r0, #4
 8015a7c:	e7e0      	b.n	8015a40 <_ZN15Menu_9PresenterD1Ev>
 8015a7e:	bf00      	nop

08015a80 <_ZN15Menu_9PresenterD0Ev>:
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7ff ffd9 	bl	8015a40 <_ZN15Menu_9PresenterD1Ev>
 8015a8e:	2110      	movs	r1, #16
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f016 ffdb 	bl	802ca4c <_ZdlPvj>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <_ZThn4_N15Menu_9PresenterD0Ev>:
 8015aa0:	f1a0 0004 	sub.w	r0, r0, #4
 8015aa4:	e7ec      	b.n	8015a80 <_ZN15Menu_9PresenterD0Ev>
	...

08015aa8 <_ZN15Menu_9PresenterC1ER10Menu_9View>:
#include <gui/menu_9_screen/Menu_9View.hpp>
#include <gui/menu_9_screen/Menu_9Presenter.hpp>

Menu_9Presenter::Menu_9Presenter(Menu_9View& v)
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
    : view(v)
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff fec9 	bl	801584c <_ZN8touchgfx9PresenterC1Ev>
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	3304      	adds	r3, #4
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7ff fed4 	bl	801586c <_ZN13ModelListenerC1Ev>
 8015ac4:	4a06      	ldr	r2, [pc, #24]	; (8015ae0 <_ZN15Menu_9PresenterC1ER10Menu_9View+0x38>)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	601a      	str	r2, [r3, #0]
 8015aca:	4a06      	ldr	r2, [pc, #24]	; (8015ae4 <_ZN15Menu_9PresenterC1ER10Menu_9View+0x3c>)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	605a      	str	r2, [r3, #4]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	683a      	ldr	r2, [r7, #0]
 8015ad4:	60da      	str	r2, [r3, #12]
{

}
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}
 8015ae0:	0802fa80 	.word	0x0802fa80
 8015ae4:	0802fa98 	.word	0x0802fa98

08015ae8 <_ZN15Menu_9Presenter8activateEv>:

void Menu_9Presenter::activate()
{
 8015ae8:	b480      	push	{r7}
 8015aea:	b083      	sub	sp, #12
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]

}
 8015af0:	bf00      	nop
 8015af2:	370c      	adds	r7, #12
 8015af4:	46bd      	mov	sp, r7
 8015af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afa:	4770      	bx	lr

08015afc <_ZN15Menu_9Presenter10deactivateEv>:

void Menu_9Presenter::deactivate()
{
 8015afc:	b480      	push	{r7}
 8015afe:	b083      	sub	sp, #12
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]

}
 8015b04:	bf00      	nop
 8015b06:	370c      	adds	r7, #12
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0e:	4770      	bx	lr

08015b10 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8015b10:	b480      	push	{r7}
 8015b12:	b083      	sub	sp, #12
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	460b      	mov	r3, r1
 8015b1a:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	78fa      	ldrb	r2, [r7, #3]
 8015b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8015b24:	bf00      	nop
 8015b26:	370c      	adds	r7, #12
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2e:	4770      	bx	lr

08015b30 <_ZNK8touchgfx6Screen10invalidateEv>:
    /**
     * Tell the framework that this entire Screen needs to be redrawn.
     *
     * @see Container::invalidate
     */
    void invalidate() const
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
    {
        container.invalidate();
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f009 fc13 	bl	801f368 <_ZNK8touchgfx8Drawable10invalidateEv>
    }
 8015b42:	bf00      	nop
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <_ZN14Menu_9ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b082      	sub	sp, #8
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8015b52:	f008 fc35 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8015b56:	4603      	mov	r3, r0
    }
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <_ZN10Menu_9ViewD1Ev>:

class Menu_9View : public Menu_9ViewBase
{
public:
    Menu_9View();
    virtual ~Menu_9View() {}
 8015b60:	b590      	push	{r4, r7, lr}
 8015b62:	b083      	sub	sp, #12
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	4a19      	ldr	r2, [pc, #100]	; (8015bd0 <_ZN10Menu_9ViewD1Ev+0x70>)
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	601a      	str	r2, [r3, #0]
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	f647 03f4 	movw	r3, #30964	; 0x78f4
 8015b74:	4413      	add	r3, r2
 8015b76:	4618      	mov	r0, r3
 8015b78:	f000 faa2 	bl	80160c0 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvED1Ev>
 8015b7c:	687a      	ldr	r2, [r7, #4]
 8015b7e:	f647 03e4 	movw	r3, #30948	; 0x78e4
 8015b82:	4413      	add	r3, r2
 8015b84:	4618      	mov	r0, r3
 8015b86:	f000 fabd 	bl	8016104 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvED1Ev>
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	f242 4384 	movw	r3, #9348	; 0x2484
 8015b90:	4413      	add	r3, r2
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d012      	beq.n	8015bbc <_ZN10Menu_9ViewD1Ev+0x5c>
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	f242 4384 	movw	r3, #9348	; 0x2484
 8015b9c:	4413      	add	r3, r2
 8015b9e:	f245 4460 	movw	r4, #21600	; 0x5460
 8015ba2:	441c      	add	r4, r3
 8015ba4:	687a      	ldr	r2, [r7, #4]
 8015ba6:	f242 4384 	movw	r3, #9348	; 0x2484
 8015baa:	4413      	add	r3, r2
 8015bac:	429c      	cmp	r4, r3
 8015bae:	d005      	beq.n	8015bbc <_ZN10Menu_9ViewD1Ev+0x5c>
 8015bb0:	3cd8      	subs	r4, #216	; 0xd8
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	4798      	blx	r3
 8015bba:	e7f3      	b.n	8015ba4 <_ZN10Menu_9ViewD1Ev+0x44>
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fe ff90 	bl	8014ae4 <_ZN14Menu_9ViewBaseD1Ev>
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	370c      	adds	r7, #12
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd90      	pop	{r4, r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	0802faa8 	.word	0x0802faa8

08015bd4 <_ZN10Menu_9ViewD0Ev>:
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f7ff ffbf 	bl	8015b60 <_ZN10Menu_9ViewD1Ev>
 8015be2:	f647 1104 	movw	r1, #30980	; 0x7904
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f016 ff30 	bl	802ca4c <_ZdlPvj>
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3708      	adds	r7, #8
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}
	...

08015bf8 <_ZN10Menu_9ViewC1Ev>:
TGFX_Menu_t Temp_menu;
TGFX_Menu_t *Base_of_menu_struct_items[30];



Menu_9View::Menu_9View(): listElementClickedCallback(this, &Menu_9View::listElementClicked),BackElementClickedCallback(this, &Menu_9View::BackElementClicked)
 8015bf8:	b5b0      	push	{r4, r5, r7, lr}
 8015bfa:	b086      	sub	sp, #24
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fe ffc6 	bl	8014b94 <_ZN14Menu_9ViewBaseC1Ev>
 8015c08:	4a18      	ldr	r2, [pc, #96]	; (8015c6c <_ZN10Menu_9ViewC1Ev+0x74>)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	601a      	str	r2, [r3, #0]
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	f242 4384 	movw	r3, #9348	; 0x2484
 8015c14:	4413      	add	r3, r2
 8015c16:	2463      	movs	r4, #99	; 0x63
 8015c18:	461d      	mov	r5, r3
 8015c1a:	2c00      	cmp	r4, #0
 8015c1c:	db05      	blt.n	8015c2a <_ZN10Menu_9ViewC1Ev+0x32>
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f7ff fcc8 	bl	80155b4 <_ZN22Menu_buttons_containerC1Ev>
 8015c24:	35d8      	adds	r5, #216	; 0xd8
 8015c26:	3c01      	subs	r4, #1
 8015c28:	e7f7      	b.n	8015c1a <_ZN10Menu_9ViewC1Ev+0x22>
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f647 00e4 	movw	r0, #30948	; 0x78e4
 8015c30:	4418      	add	r0, r3
 8015c32:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <_ZN10Menu_9ViewC1Ev+0x78>)
 8015c34:	60bb      	str	r3, [r7, #8]
 8015c36:	2300      	movs	r3, #0
 8015c38:	60fb      	str	r3, [r7, #12]
 8015c3a:	f107 0308 	add.w	r3, r7, #8
 8015c3e:	cb0c      	ldmia	r3, {r2, r3}
 8015c40:	6879      	ldr	r1, [r7, #4]
 8015c42:	f000 f9ad 	bl	8015fa0 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvEC1EPS1_MS1_FvS3_E>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	f647 00f4 	movw	r0, #30964	; 0x78f4
 8015c4c:	4418      	add	r0, r3
 8015c4e:	4b09      	ldr	r3, [pc, #36]	; (8015c74 <_ZN10Menu_9ViewC1Ev+0x7c>)
 8015c50:	613b      	str	r3, [r7, #16]
 8015c52:	2300      	movs	r3, #0
 8015c54:	617b      	str	r3, [r7, #20]
 8015c56:	f107 0310 	add.w	r3, r7, #16
 8015c5a:	cb0c      	ldmia	r3, {r2, r3}
 8015c5c:	6879      	ldr	r1, [r7, #4]
 8015c5e:	f000 f9cf 	bl	8016000 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvEC1EPS1_MS1_FvS3_E>
{
}
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	4618      	mov	r0, r3
 8015c66:	3718      	adds	r7, #24
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c6c:	0802faa8 	.word	0x0802faa8
 8015c70:	08015c79 	.word	0x08015c79
 8015c74:	08015d51 	.word	0x08015d51

08015c78 <_ZN10Menu_9View18listElementClickedER22Menu_buttons_container>:

void Menu_9View::listElementClicked(Menu_buttons_container& element)
{
 8015c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c7a:	b089      	sub	sp, #36	; 0x24
 8015c7c:	af06      	add	r7, sp, #24
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
	if(element.TGFX_menu_elemnt.menu_function == NULL)
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d128      	bne.n	8015cde <_ZN10Menu_9View18listElementClickedER22Menu_buttons_container+0x66>
	{
		Temp_menu = element.TGFX_menu_elemnt;
 8015c8c:	4a2f      	ldr	r2, [pc, #188]	; (8015d4c <_ZN10Menu_9View18listElementClickedER22Menu_buttons_container+0xd4>)
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	4615      	mov	r5, r2
 8015c92:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8015c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015c9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015c9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		fill_positions_menu(Temp_menu);
 8015ca2:	4c2a      	ldr	r4, [pc, #168]	; (8015d4c <_ZN10Menu_9View18listElementClickedER22Menu_buttons_container+0xd4>)
 8015ca4:	466d      	mov	r5, sp
 8015ca6:	f104 030c 	add.w	r3, r4, #12
 8015caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015cac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015cb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f000 f8bd 	bl	8015e34 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct>
		scrollcnt.setVisible(1);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ff ff24 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>
		Sub_menu_cont.setVisible(0);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	339c      	adds	r3, #156	; 0x9c
 8015ccc:	2100      	movs	r1, #0
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7ff ff1e 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>
		invalidate();
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff ff2a 	bl	8015b30 <_ZNK8touchgfx6Screen10invalidateEv>
		invalidate();

	}


}
 8015cdc:	e032      	b.n	8015d44 <_ZN10Menu_9View18listElementClickedER22Menu_buttons_container+0xcc>
		scrollcnt.setVisible(0);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f7ff ff12 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>
		Sub_menu_cont.setVisible(1);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	339c      	adds	r3, #156	; 0x9c
 8015cf0:	2101      	movs	r1, #1
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7ff ff0c 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>
		Open_callback_menu(element.TGFX_menu_elemnt);
 8015cf8:	683c      	ldr	r4, [r7, #0]
 8015cfa:	466d      	mov	r5, sp
 8015cfc:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8015d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015d06:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8015d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f000 f851 	bl	8015db4 <_ZN10Menu_9View18Open_callback_menuE16TGFX_menu_struct>
		back_menu_cont.setBack(element.TGFX_menu_elemnt,BackElementClickedCallback);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f203 661c 	addw	r6, r3, #1564	; 0x61c
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	f647 03f4 	movw	r3, #30964	; 0x78f4
 8015d1e:	4413      	add	r3, r2
 8015d20:	683c      	ldr	r4, [r7, #0]
 8015d22:	9304      	str	r3, [sp, #16]
 8015d24:	466d      	mov	r5, sp
 8015d26:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
 8015d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015d30:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8015d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7ff fbf0 	bl	801551c <_ZN19Back_menu_container7setBackE16TGFX_menu_structRN8touchgfx15GenericCallbackIRS_vvEE>
		invalidate();
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7ff fef6 	bl	8015b30 <_ZNK8touchgfx6Screen10invalidateEv>
}
 8015d44:	bf00      	nop
 8015d46:	370c      	adds	r7, #12
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d4c:	24004d88 	.word	0x24004d88

08015d50 <_ZN10Menu_9View18BackElementClickedER19Back_menu_container>:


void Menu_9View::BackElementClicked(Back_menu_container& element)
{
 8015d50:	b5b0      	push	{r4, r5, r7, lr}
 8015d52:	b086      	sub	sp, #24
 8015d54:	af04      	add	r7, sp, #16
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	6039      	str	r1, [r7, #0]
	//application().gotoMenu_9ScreenNoTransition();

	//touchgfx_printf("name: %s\n", "main");

	if(element.TGFX_back_elemnt.parent != NULL)
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d01b      	beq.n	8015d9c <_ZN10Menu_9View18BackElementClickedER19Back_menu_container+0x4c>
	{

		scrollcnt.setVisible(1);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7ff fecf 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>
		Sub_menu_cont.setVisible(0);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	339c      	adds	r3, #156	; 0x9c
 8015d76:	2100      	movs	r1, #0
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ff fec9 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>


		fill_positions_menu(*element.TGFX_back_elemnt.parent);
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	f8d3 4150 	ldr.w	r4, [r3, #336]	; 0x150
 8015d84:	466d      	mov	r5, sp
 8015d86:	f104 030c 	add.w	r3, r4, #12
 8015d8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015d8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015d90:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f000 f84d 	bl	8015e34 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct>
/*
	touchgfx_printf("name: %s\n", element.TGFX_back_elemnt.name);
	touchgfx_printf("parent: %s\n", element.TGFX_back_elemnt.parent->name);
*/

}
 8015d9a:	e007      	b.n	8015dac <_ZN10Menu_9View18BackElementClickedER19Back_menu_container+0x5c>
		application().gotoMain_screenScreenNoTransition();
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7ff fed3 	bl	8015b4a <_ZN14Menu_9ViewBase11applicationEv>
 8015da4:	4603      	mov	r3, r0
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7fb fbf2 	bl	8011590 <_ZN23FrontendApplicationBase33gotoMain_screenScreenNoTransitionEv>
}
 8015dac:	bf00      	nop
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bdb0      	pop	{r4, r5, r7, pc}

08015db4 <_ZN10Menu_9View18Open_callback_menuE16TGFX_menu_struct>:


void Menu_9View::Open_callback_menu(TGFX_Menu_t Menu)
{
 8015db4:	b084      	sub	sp, #16
 8015db6:	b480      	push	{r7}
 8015db8:	b083      	sub	sp, #12
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
 8015dbe:	f107 0014 	add.w	r0, r7, #20
 8015dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}



}
 8015dc6:	bf00      	nop
 8015dc8:	370c      	adds	r7, #12
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd0:	b004      	add	sp, #16
 8015dd2:	4770      	bx	lr

08015dd4 <_ZN10Menu_9View11setupScreenEv>:
void Menu_9View::setupScreen()
{
 8015dd4:	b5b0      	push	{r4, r5, r7, lr}
 8015dd6:	b086      	sub	sp, #24
 8015dd8:	af04      	add	r7, sp, #16
 8015dda:	6078      	str	r0, [r7, #4]
	//touchgfx_printf("name: %s\n", "setup menu");


	//Test_cont.setVisible(0);
	Sub_menu_cont.setVisible(0);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	339c      	adds	r3, #156	; 0x9c
 8015de0:	2100      	movs	r1, #0
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7ff fe94 	bl	8015b10 <_ZN8touchgfx8Drawable10setVisibleEb>

    menu_tree_title_cont.initialize();
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8015dee:	4618      	mov	r0, r3
 8015df0:	f7ff fcb0 	bl	8015754 <_ZN25Menu_tree_title_container10initializeEv>
    back_menu_cont.initialize();
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7ff fbac 	bl	8015558 <_ZN19Back_menu_container10initializeEv>
    fill_positions_menu(menu_9);
 8015e00:	4c07      	ldr	r4, [pc, #28]	; (8015e20 <_ZN10Menu_9View11setupScreenEv+0x4c>)
 8015e02:	466d      	mov	r5, sp
 8015e04:	f104 030c 	add.w	r3, r4, #12
 8015e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015e0e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 f80e 	bl	8015e34 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct>

}
 8015e18:	bf00      	nop
 8015e1a:	3708      	adds	r7, #8
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8015e20:	2400007c 	.word	0x2400007c

08015e24 <_Z13Change_screenv>:

void Change_screen()
{
 8015e24:	b480      	push	{r7}
 8015e26:	af00      	add	r7, sp, #0

}
 8015e28:	bf00      	nop
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr
	...

08015e34 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct>:

void Menu_9View::fill_positions_menu(TGFX_Menu_t Menu)
{
 8015e34:	b084      	sub	sp, #16
 8015e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e38:	b08b      	sub	sp, #44	; 0x2c
 8015e3a:	af06      	add	r7, sp, #24
 8015e3c:	6078      	str	r0, [r7, #4]
 8015e3e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8015e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(Menu.child != NULL)
 8015e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f000 8082 	beq.w	8015f52 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x11e>
	{
		list.removeAll();
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8015e54:	4618      	mov	r0, r3
 8015e56:	f002 fe16 	bl	8018a86 <_ZN8touchgfx10ListLayout9removeAllEv>

		Sub_menu = Menu.child;
 8015e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e5c:	4a40      	ldr	r2, [pc, #256]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015e5e:	6013      	str	r3, [r2, #0]

	    for(uint8_t position = 0; position < 30; position++)
 8015e60:	2300      	movs	r3, #0
 8015e62:	73fb      	strb	r3, [r7, #15]
 8015e64:	7bfb      	ldrb	r3, [r7, #15]
 8015e66:	2b1d      	cmp	r3, #29
 8015e68:	d856      	bhi.n	8015f18 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0xe4>
	    {
	    	scrollListListItems[position].setupListElement( Sub_menu->Ttext, *Sub_menu);
 8015e6a:	7bfb      	ldrb	r3, [r7, #15]
 8015e6c:	22d8      	movs	r2, #216	; 0xd8
 8015e6e:	fb02 f303 	mul.w	r3, r2, r3
 8015e72:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	4413      	add	r3, r2
 8015e7a:	f103 0c04 	add.w	ip, r3, #4
 8015e7e:	4b38      	ldr	r3, [pc, #224]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	f893 e004 	ldrb.w	lr, [r3, #4]
 8015e86:	4b36      	ldr	r3, [pc, #216]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015e88:	681e      	ldr	r6, [r3, #0]
 8015e8a:	466d      	mov	r5, sp
 8015e8c:	f106 0408 	add.w	r4, r6, #8
 8015e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015e94:	6823      	ldr	r3, [r4, #0]
 8015e96:	602b      	str	r3, [r5, #0]
 8015e98:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015e9c:	4671      	mov	r1, lr
 8015e9e:	4660      	mov	r0, ip
 8015ea0:	f7ff fbdb 	bl	801565a <_ZN22Menu_buttons_container16setupListElementE5TEXTS16TGFX_menu_struct>
	    	scrollListListItems[position].setAction(listElementClickedCallback);
 8015ea4:	7bfb      	ldrb	r3, [r7, #15]
 8015ea6:	22d8      	movs	r2, #216	; 0xd8
 8015ea8:	fb02 f303 	mul.w	r3, r2, r3
 8015eac:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8015eb0:	687a      	ldr	r2, [r7, #4]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	1d18      	adds	r0, r3, #4
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	f647 03e4 	movw	r3, #30948	; 0x78e4
 8015ebc:	4413      	add	r3, r2
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	f7ff fb8e 	bl	80155e0 <_ZN22Menu_buttons_container9setActionERN8touchgfx15GenericCallbackIRS_vvEE>
	    	list.add(scrollListListItems[position]);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f603 0034 	addw	r0, r3, #2100	; 0x834
 8015eca:	7bfb      	ldrb	r3, [r7, #15]
 8015ecc:	22d8      	movs	r2, #216	; 0xd8
 8015ece:	fb02 f303 	mul.w	r3, r2, r3
 8015ed2:	f503 5312 	add.w	r3, r3, #9344	; 0x2480
 8015ed6:	687a      	ldr	r2, [r7, #4]
 8015ed8:	4413      	add	r3, r2
 8015eda:	3304      	adds	r3, #4
 8015edc:	4619      	mov	r1, r3
 8015ede:	f002 fe41 	bl	8018b64 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
	    //	touchgfx_printf("name: %s\n", scrollListListItems[position].TGFX_menu_elemnt.name);
	    	Base_of_menu_struct_items[position] = Sub_menu;
 8015ee2:	7bfb      	ldrb	r3, [r7, #15]
 8015ee4:	4a1e      	ldr	r2, [pc, #120]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015ee6:	6812      	ldr	r2, [r2, #0]
 8015ee8:	491e      	ldr	r1, [pc, #120]	; (8015f64 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x130>)
 8015eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    	if(Sub_menu->next == NULL)
 8015eee:	4b1c      	ldr	r3, [pc, #112]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	689b      	ldr	r3, [r3, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d106      	bne.n	8015f06 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0xd2>
	    	{
	    		scrollcnt.invalidate();
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f503 63ef 	add.w	r3, r3, #1912	; 0x778
 8015efe:	4618      	mov	r0, r3
 8015f00:	f009 fa32 	bl	801f368 <_ZNK8touchgfx8Drawable10invalidateEv>
	    //	    touchgfx_printf("EXIT", numbers_of_menu_lines);
	    		break;
 8015f04:	e008      	b.n	8015f18 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0xe4>
	    	}
	    	else
	    	{
	    		Sub_menu = Sub_menu->next;
 8015f06:	4b16      	ldr	r3, [pc, #88]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	689b      	ldr	r3, [r3, #8]
 8015f0c:	4a14      	ldr	r2, [pc, #80]	; (8015f60 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x12c>)
 8015f0e:	6013      	str	r3, [r2, #0]
	    for(uint8_t position = 0; position < 30; position++)
 8015f10:	7bfb      	ldrb	r3, [r7, #15]
 8015f12:	3301      	adds	r3, #1
 8015f14:	73fb      	strb	r3, [r7, #15]
 8015f16:	e7a5      	b.n	8015e64 <_ZN10Menu_9View19fill_positions_menuE16TGFX_menu_struct+0x30>
	    	}

	    }
	    back_menu_cont.setBack(Menu,BackElementClickedCallback);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f203 651c 	addw	r5, r3, #1564	; 0x61c
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	f647 03f4 	movw	r3, #30964	; 0x78f4
 8015f24:	4413      	add	r3, r2
 8015f26:	9304      	str	r3, [sp, #16]
 8015f28:	466c      	mov	r4, sp
 8015f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	f7ff faee 	bl	801551c <_ZN19Back_menu_container7setBackE16TGFX_menu_structRN8touchgfx15GenericCallbackIRS_vvEE>
	    menu_tree_title_cont.Set_Title(Menu.Ttext);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f203 5324 	addw	r3, r3, #1316	; 0x524
 8015f46:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7ff fbd5 	bl	80156fc <_ZN25Menu_tree_title_container9Set_TitleE5TEXTS>

	}
}
 8015f52:	bf00      	nop
 8015f54:	3714      	adds	r7, #20
 8015f56:	46bd      	mov	sp, r7
 8015f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f5c:	b004      	add	sp, #16
 8015f5e:	4770      	bx	lr
 8015f60:	24004d84 	.word	0x24004d84
 8015f64:	24004da4 	.word	0x24004da4

08015f68 <_ZN10Menu_9View14tearDownScreenEv>:



void Menu_9View::tearDownScreen()
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
    Menu_9ViewBase::tearDownScreen();
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fe f8d4 	bl	8014120 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8015f78:	bf00      	nop
 8015f7a:	3708      	adds	r7, #8
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}

08015f80 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvEC1Ev>:
class GenericCallback<T1, void, void>
 8015f80:	b480      	push	{r7}
 8015f82:	b083      	sub	sp, #12
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	4a04      	ldr	r2, [pc, #16]	; (8015f9c <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvEC1Ev+0x1c>)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	601a      	str	r2, [r3, #0]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	4618      	mov	r0, r3
 8015f92:	370c      	adds	r7, #12
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr
 8015f9c:	0802fb24 	.word	0x0802fb24

08015fa0 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvEC1EPS1_MS1_FvS3_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b084      	sub	sp, #16
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	4639      	mov	r1, r7
 8015fac:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7ff ffe4 	bl	8015f80 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvEC1Ev>
 8015fb8:	4a08      	ldr	r2, [pc, #32]	; (8015fdc <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvEC1EPS1_MS1_FvS3_E+0x3c>)
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	601a      	str	r2, [r3, #0]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	68ba      	ldr	r2, [r7, #8]
 8015fc2:	605a      	str	r2, [r3, #4]
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	3308      	adds	r3, #8
 8015fc8:	463a      	mov	r2, r7
 8015fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015fce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3710      	adds	r7, #16
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	0802fb0c 	.word	0x0802fb0c

08015fe0 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvEC1Ev>:
class GenericCallback<T1, void, void>
 8015fe0:	b480      	push	{r7}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	4a04      	ldr	r2, [pc, #16]	; (8015ffc <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvEC1Ev+0x1c>)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	601a      	str	r2, [r3, #0]
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	370c      	adds	r7, #12
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr
 8015ffc:	0802faf4 	.word	0x0802faf4

08016000 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvEC1EPS1_MS1_FvS3_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	60f8      	str	r0, [r7, #12]
 8016008:	60b9      	str	r1, [r7, #8]
 801600a:	4639      	mov	r1, r7
 801600c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	4618      	mov	r0, r3
 8016014:	f7ff ffe4 	bl	8015fe0 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvEC1Ev>
 8016018:	4a08      	ldr	r2, [pc, #32]	; (801603c <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvEC1EPS1_MS1_FvS3_E+0x3c>)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	68ba      	ldr	r2, [r7, #8]
 8016022:	605a      	str	r2, [r3, #4]
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	3308      	adds	r3, #8
 8016028:	463a      	mov	r2, r7
 801602a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801602e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	4618      	mov	r0, r3
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}
 801603c:	0802fadc 	.word	0x0802fadc

08016040 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvED1Ev>:
    virtual ~GenericCallback()
 8016040:	b480      	push	{r7}
 8016042:	b083      	sub	sp, #12
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
    }
 8016048:	4a04      	ldr	r2, [pc, #16]	; (801605c <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvED1Ev+0x1c>)
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	601a      	str	r2, [r3, #0]
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	4618      	mov	r0, r3
 8016052:	370c      	adds	r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr
 801605c:	0802fb24 	.word	0x0802fb24

08016060 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvED0Ev>:
    virtual ~GenericCallback()
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
    }
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f7ff ffe9 	bl	8016040 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvED1Ev>
 801606e:	2104      	movs	r1, #4
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f016 fceb 	bl	802ca4c <_ZdlPvj>
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	4618      	mov	r0, r3
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvED1Ev>:
    virtual ~GenericCallback()
 8016080:	b480      	push	{r7}
 8016082:	b083      	sub	sp, #12
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
    }
 8016088:	4a04      	ldr	r2, [pc, #16]	; (801609c <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvED1Ev+0x1c>)
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	601a      	str	r2, [r3, #0]
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	4618      	mov	r0, r3
 8016092:	370c      	adds	r7, #12
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr
 801609c:	0802faf4 	.word	0x0802faf4

080160a0 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvED0Ev>:
    virtual ~GenericCallback()
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]
    }
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7ff ffe9 	bl	8016080 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvED1Ev>
 80160ae:	2104      	movs	r1, #4
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f016 fccb 	bl	802ca4c <_ZdlPvj>
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	4618      	mov	r0, r3
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b082      	sub	sp, #8
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	4a05      	ldr	r2, [pc, #20]	; (80160e0 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvED1Ev+0x20>)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	601a      	str	r2, [r3, #0]
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ff ffd5 	bl	8016080 <_ZN8touchgfx15GenericCallbackIR19Back_menu_containervvED1Ev>
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	4618      	mov	r0, r3
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	0802fadc 	.word	0x0802fadc

080160e4 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvED0Ev>:
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7ff ffe7 	bl	80160c0 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvED1Ev>
 80160f2:	2110      	movs	r1, #16
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f016 fca9 	bl	802ca4c <_ZdlPvj>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvED1Ev>:
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	4a05      	ldr	r2, [pc, #20]	; (8016124 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvED1Ev+0x20>)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	601a      	str	r2, [r3, #0]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	4618      	mov	r0, r3
 8016116:	f7ff ff93 	bl	8016040 <_ZN8touchgfx15GenericCallbackIR22Menu_buttons_containervvED1Ev>
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	4618      	mov	r0, r3
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	0802fb0c 	.word	0x0802fb0c

08016128 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvED0Ev>:
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f7ff ffe7 	bl	8016104 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvED1Ev>
 8016136:	2110      	movs	r1, #16
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f016 fc87 	bl	802ca4c <_ZdlPvj>
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	4618      	mov	r0, r3
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7executeES3_>:
    virtual void execute(T1 t1)
 8016148:	b580      	push	{r7, lr}
 801614a:	b082      	sub	sp, #8
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	685b      	ldr	r3, [r3, #4]
 8016156:	687a      	ldr	r2, [r7, #4]
 8016158:	68d2      	ldr	r2, [r2, #12]
 801615a:	1052      	asrs	r2, r2, #1
 801615c:	1898      	adds	r0, r3, r2
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	f003 0301 	and.w	r3, r3, #1
 8016166:	2b00      	cmp	r3, #0
 8016168:	d102      	bne.n	8016170 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7executeES3_+0x28>
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	689b      	ldr	r3, [r3, #8]
 801616e:	e00a      	b.n	8016186 <_ZN8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7executeES3_+0x3e>
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	68d2      	ldr	r2, [r2, #12]
 8016178:	1052      	asrs	r2, r2, #1
 801617a:	4413      	add	r3, r2
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	687a      	ldr	r2, [r7, #4]
 8016180:	6892      	ldr	r2, [r2, #8]
 8016182:	4413      	add	r3, r2
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	6839      	ldr	r1, [r7, #0]
 8016188:	4798      	blx	r3
    }
 801618a:	bf00      	nop
 801618c:	3708      	adds	r7, #8
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}

08016192 <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv>:
    virtual bool isValid() const
 8016192:	b480      	push	{r7}
 8016194:	b083      	sub	sp, #12
 8016196:	af00      	add	r7, sp, #0
 8016198:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d010      	beq.n	80161c4 <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x32>
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d107      	bne.n	80161ba <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x28>
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	68db      	ldr	r3, [r3, #12]
 80161ae:	f003 0301 	and.w	r3, r3, #1
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d101      	bne.n	80161ba <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x28>
 80161b6:	2301      	movs	r3, #1
 80161b8:	e000      	b.n	80161bc <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x2a>
 80161ba:	2300      	movs	r3, #0
 80161bc:	2b01      	cmp	r3, #1
 80161be:	d001      	beq.n	80161c4 <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x32>
 80161c0:	2301      	movs	r3, #1
 80161c2:	e000      	b.n	80161c6 <_ZNK8touchgfx8CallbackI10Menu_9ViewR19Back_menu_containervvE7isValidEv+0x34>
 80161c4:	2300      	movs	r3, #0
    }
 80161c6:	4618      	mov	r0, r3
 80161c8:	370c      	adds	r7, #12
 80161ca:	46bd      	mov	sp, r7
 80161cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d0:	4770      	bx	lr

080161d2 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7executeES3_>:
    virtual void execute(T1 t1)
 80161d2:	b580      	push	{r7, lr}
 80161d4:	b082      	sub	sp, #8
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
 80161da:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	68d2      	ldr	r2, [r2, #12]
 80161e4:	1052      	asrs	r2, r2, #1
 80161e6:	1898      	adds	r0, r3, r2
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	f003 0301 	and.w	r3, r3, #1
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d102      	bne.n	80161fa <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7executeES3_+0x28>
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	e00a      	b.n	8016210 <_ZN8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7executeES3_+0x3e>
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	685b      	ldr	r3, [r3, #4]
 80161fe:	687a      	ldr	r2, [r7, #4]
 8016200:	68d2      	ldr	r2, [r2, #12]
 8016202:	1052      	asrs	r2, r2, #1
 8016204:	4413      	add	r3, r2
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	6892      	ldr	r2, [r2, #8]
 801620c:	4413      	add	r3, r2
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	4798      	blx	r3
    }
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv>:
    virtual bool isValid() const
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d010      	beq.n	801624e <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x32>
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	689b      	ldr	r3, [r3, #8]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d107      	bne.n	8016244 <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x28>
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	f003 0301 	and.w	r3, r3, #1
 801623c:	2b00      	cmp	r3, #0
 801623e:	d101      	bne.n	8016244 <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x28>
 8016240:	2301      	movs	r3, #1
 8016242:	e000      	b.n	8016246 <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x2a>
 8016244:	2300      	movs	r3, #0
 8016246:	2b01      	cmp	r3, #1
 8016248:	d001      	beq.n	801624e <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x32>
 801624a:	2301      	movs	r3, #1
 801624c:	e000      	b.n	8016250 <_ZNK8touchgfx8CallbackI10Menu_9ViewR22Menu_buttons_containervvE7isValidEv+0x34>
 801624e:	2300      	movs	r3, #0
    }
 8016250:	4618      	mov	r0, r3
 8016252:	370c      	adds	r7, #12
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr

0801625c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801625c:	b480      	push	{r7}
 801625e:	b083      	sub	sp, #12
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	601a      	str	r2, [r3, #0]
{

}
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	4618      	mov	r0, r3
 801626e:	370c      	adds	r7, #12
 8016270:	46bd      	mov	sp, r7
 8016272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016276:	4770      	bx	lr

08016278 <_ZN5Model4tickEv>:

void Model::tick()
{
 8016278:	b480      	push	{r7}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]

}
 8016280:	bf00      	nop
 8016282:	370c      	adds	r7, #12
 8016284:	46bd      	mov	sp, r7
 8016286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628a:	4770      	bx	lr

0801628c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 801628c:	b480      	push	{r7}
 801628e:	b083      	sub	sp, #12
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
    {
 8016294:	4a04      	ldr	r2, [pc, #16]	; (80162a8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	601a      	str	r2, [r3, #0]
    }
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	4618      	mov	r0, r3
 801629e:	370c      	adds	r7, #12
 80162a0:	46bd      	mov	sp, r7
 80162a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a6:	4770      	bx	lr
 80162a8:	0802fb54 	.word	0x0802fb54

080162ac <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
    }
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f7ff ffe9 	bl	801628c <_ZN8touchgfx15TouchControllerD1Ev>
 80162ba:	2104      	movs	r1, #4
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f016 fbc5 	bl	802ca4c <_ZdlPvj>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	4618      	mov	r0, r3
 80162c6:	3708      	adds	r7, #8
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80162cc:	b480      	push	{r7}
 80162ce:	b083      	sub	sp, #12
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80162d4:	bf00      	nop
 80162d6:	370c      	adds	r7, #12
 80162d8:	46bd      	mov	sp, r7
 80162da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162de:	4770      	bx	lr

080162e0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80162e0:	b480      	push	{r7}
 80162e2:	b085      	sub	sp, #20
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80162ec:	2300      	movs	r3, #0
}
 80162ee:	4618      	mov	r0, r3
 80162f0:	3714      	adds	r7, #20
 80162f2:	46bd      	mov	sp, r7
 80162f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f8:	4770      	bx	lr
	...

080162fc <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b082      	sub	sp, #8
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	4a05      	ldr	r2, [pc, #20]	; (801631c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	601a      	str	r2, [r3, #0]
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	4618      	mov	r0, r3
 801630e:	f7ff ffbd 	bl	801628c <_ZN8touchgfx15TouchControllerD1Ev>
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	4618      	mov	r0, r3
 8016316:	3708      	adds	r7, #8
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}
 801631c:	0802fb3c 	.word	0x0802fb3c

08016320 <_ZN20STM32TouchControllerD0Ev>:
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f7ff ffe7 	bl	80162fc <_ZN20STM32TouchControllerD1Ev>
 801632e:	2104      	movs	r1, #4
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	f016 fb8b 	bl	802ca4c <_ZdlPvj>
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	4618      	mov	r0, r3
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8016340:	b480      	push	{r7}
 8016342:	b083      	sub	sp, #12
 8016344:	af00      	add	r7, sp, #0
 8016346:	4603      	mov	r3, r0
 8016348:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801634a:	79fb      	ldrb	r3, [r7, #7]
 801634c:	2b03      	cmp	r3, #3
 801634e:	d80c      	bhi.n	801636a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8016350:	a201      	add	r2, pc, #4	; (adr r2, 8016358 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8016352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016356:	bf00      	nop
 8016358:	08016369 	.word	0x08016369
 801635c:	08016369 	.word	0x08016369
 8016360:	08016369 	.word	0x08016369
 8016364:	08016369 	.word	0x08016369
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8016368:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801636a:	bf00      	nop
 801636c:	370c      	adds	r7, #12
 801636e:	46bd      	mov	sp, r7
 8016370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016374:	4770      	bx	lr
 8016376:	bf00      	nop

08016378 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8016378:	b480      	push	{r7}
 801637a:	b083      	sub	sp, #12
 801637c:	af00      	add	r7, sp, #0
 801637e:	4603      	mov	r3, r0
 8016380:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8016382:	79fb      	ldrb	r3, [r7, #7]
 8016384:	2b03      	cmp	r3, #3
 8016386:	d80c      	bhi.n	80163a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8016388:	a201      	add	r2, pc, #4	; (adr r2, 8016390 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801638e:	bf00      	nop
 8016390:	080163a1 	.word	0x080163a1
 8016394:	080163a1 	.word	0x080163a1
 8016398:	080163a1 	.word	0x080163a1
 801639c:	080163a1 	.word	0x080163a1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80163a0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80163a2:	bf00      	nop
 80163a4:	370c      	adds	r7, #12
 80163a6:	46bd      	mov	sp, r7
 80163a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ac:	4770      	bx	lr
 80163ae:	bf00      	nop

080163b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80163b0:	b480      	push	{r7}
 80163b2:	b083      	sub	sp, #12
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80163ba:	79fb      	ldrb	r3, [r7, #7]
 80163bc:	2b03      	cmp	r3, #3
 80163be:	d80c      	bhi.n	80163da <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80163c0:	a201      	add	r2, pc, #4	; (adr r2, 80163c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80163c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163c6:	bf00      	nop
 80163c8:	080163d9 	.word	0x080163d9
 80163cc:	080163d9 	.word	0x080163d9
 80163d0:	080163d9 	.word	0x080163d9
 80163d4:	080163d9 	.word	0x080163d9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80163d8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80163da:	bf00      	nop
 80163dc:	370c      	adds	r7, #12
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop

080163e8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
    {
 80163f0:	4a04      	ldr	r2, [pc, #16]	; (8016404 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	601a      	str	r2, [r3, #0]
    }
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	4618      	mov	r0, r3
 80163fa:	370c      	adds	r7, #12
 80163fc:	46bd      	mov	sp, r7
 80163fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016402:	4770      	bx	lr
 8016404:	080300d0 	.word	0x080300d0

08016408 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
    }
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f7ff ffe9 	bl	80163e8 <_ZN8touchgfx3HALD1Ev>
 8016416:	217c      	movs	r1, #124	; 0x7c
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f016 fb17 	bl	802ca4c <_ZdlPvj>
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	4618      	mov	r0, r3
 8016422:	3708      	adds	r7, #8
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}

08016428 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	460b      	mov	r3, r1
 8016432:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	78fa      	ldrb	r2, [r7, #3]
 8016438:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2201      	movs	r2, #1
 8016440:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8016444:	bf00      	nop
 8016446:	370c      	adds	r7, #12
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr

08016450 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	460b      	mov	r3, r1
 801645a:	807b      	strh	r3, [r7, #2]
 801645c:	4613      	mov	r3, r2
 801645e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8016460:	4b0c      	ldr	r3, [pc, #48]	; (8016494 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	887a      	ldrh	r2, [r7, #2]
 8016466:	429a      	cmp	r2, r3
 8016468:	d304      	bcc.n	8016474 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801646a:	4b0b      	ldr	r3, [pc, #44]	; (8016498 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801646c:	881b      	ldrh	r3, [r3, #0]
 801646e:	883a      	ldrh	r2, [r7, #0]
 8016470:	429a      	cmp	r2, r3
 8016472:	d205      	bcs.n	8016480 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8016474:	4b09      	ldr	r3, [pc, #36]	; (801649c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8016476:	4a0a      	ldr	r2, [pc, #40]	; (80164a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8016478:	219e      	movs	r1, #158	; 0x9e
 801647a:	480a      	ldr	r0, [pc, #40]	; (80164a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801647c:	f016 fb14 	bl	802caa8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8016480:	4a09      	ldr	r2, [pc, #36]	; (80164a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8016482:	887b      	ldrh	r3, [r7, #2]
 8016484:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8016486:	4a09      	ldr	r2, [pc, #36]	; (80164ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8016488:	883b      	ldrh	r3, [r7, #0]
 801648a:	8013      	strh	r3, [r2, #0]
    }
 801648c:	bf00      	nop
 801648e:	3708      	adds	r7, #8
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	2400d820 	.word	0x2400d820
 8016498:	2400d822 	.word	0x2400d822
 801649c:	0802e850 	.word	0x0802e850
 80164a0:	0802e8b4 	.word	0x0802e8b4
 80164a4:	0802e8f8 	.word	0x0802e8f8
 80164a8:	2400d826 	.word	0x2400d826
 80164ac:	2400d828 	.word	0x2400d828

080164b0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d009      	beq.n	80164d6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685a      	ldr	r2, [r3, #4]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	4610      	mov	r0, r2
 80164d0:	4798      	blx	r3
 80164d2:	4603      	mov	r3, r0
 80164d4:	e000      	b.n	80164d8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 80164d6:	2300      	movs	r3, #0
    }
 80164d8:	4618      	mov	r0, r3
 80164da:	3708      	adds	r7, #8
 80164dc:	46bd      	mov	sp, r7
 80164de:	bd80      	pop	{r7, pc}

080164e0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b082      	sub	sp, #8
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	f003 ffe3 	bl	801a4b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	33ac      	adds	r3, #172	; 0xac
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	4798      	blx	r3
    }
 80164fa:	bf00      	nop
 80164fc:	3708      	adds	r7, #8
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8016502:	b480      	push	{r7}
 8016504:	b083      	sub	sp, #12
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
 801650a:	6039      	str	r1, [r7, #0]
        return false;
 801650c:	2300      	movs	r3, #0
    }
 801650e:	4618      	mov	r0, r3
 8016510:	370c      	adds	r7, #12
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr
	...

0801651c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801651c:	b580      	push	{r7, lr}
 801651e:	b084      	sub	sp, #16
 8016520:	af00      	add	r7, sp, #0
 8016522:	60f8      	str	r0, [r7, #12]
 8016524:	60b9      	str	r1, [r7, #8]
 8016526:	607a      	str	r2, [r7, #4]
 8016528:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801652a:	68bb      	ldr	r3, [r7, #8]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d106      	bne.n	801653e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016530:	4b0f      	ldr	r3, [pc, #60]	; (8016570 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8016532:	4a10      	ldr	r2, [pc, #64]	; (8016574 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8016534:	f240 21d2 	movw	r1, #722	; 0x2d2
 8016538:	480f      	ldr	r0, [pc, #60]	; (8016578 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801653a:	f016 fab5 	bl	802caa8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	68ba      	ldr	r2, [r7, #8]
 8016542:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	687a      	ldr	r2, [r7, #4]
 8016548:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2b00      	cmp	r3, #0
 801654e:	bf14      	ite	ne
 8016550:	2301      	movne	r3, #1
 8016552:	2300      	moveq	r3, #0
 8016554:	b2da      	uxtb	r2, r3
 8016556:	4b09      	ldr	r3, [pc, #36]	; (801657c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016558:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	338c      	adds	r3, #140	; 0x8c
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	6839      	ldr	r1, [r7, #0]
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	4798      	blx	r3
    }
 8016568:	bf00      	nop
 801656a:	3710      	adds	r7, #16
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	0802e93c 	.word	0x0802e93c
 8016574:	0802e974 	.word	0x0802e974
 8016578:	0802e8f8 	.word	0x0802e8f8
 801657c:	2400d82a 	.word	0x2400d82a

08016580 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	683a      	ldr	r2, [r7, #0]
 801658e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	2b00      	cmp	r3, #0
 8016594:	bf14      	ite	ne
 8016596:	2301      	movne	r3, #1
 8016598:	2300      	moveq	r3, #0
 801659a:	b2da      	uxtb	r2, r3
 801659c:	4b03      	ldr	r3, [pc, #12]	; (80165ac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801659e:	701a      	strb	r2, [r3, #0]
    }
 80165a0:	bf00      	nop
 80165a2:	370c      	adds	r7, #12
 80165a4:	46bd      	mov	sp, r7
 80165a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165aa:	4770      	bx	lr
 80165ac:	2400d82b 	.word	0x2400d82b

080165b0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
        return 0;
 80165b8:	2300      	movs	r3, #0
    }
 80165ba:	4618      	mov	r0, r3
 80165bc:	370c      	adds	r7, #12
 80165be:	46bd      	mov	sp, r7
 80165c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c4:	4770      	bx	lr

080165c6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80165c6:	b580      	push	{r7, lr}
 80165c8:	b082      	sub	sp, #8
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
 80165ce:	460b      	mov	r3, r1
 80165d0:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d004      	beq.n	80165e4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165de:	887a      	ldrh	r2, [r7, #2]
 80165e0:	4610      	mov	r0, r2
 80165e2:	4798      	blx	r3
    }
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	685a      	ldr	r2, [r3, #4]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	685b      	ldr	r3, [r3, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	3318      	adds	r3, #24
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	4610      	mov	r0, r2
 8016604:	4798      	blx	r3
 8016606:	4603      	mov	r3, r0
    }
 8016608:	4618      	mov	r0, r3
 801660a:	3708      	adds	r7, #8
 801660c:	46bd      	mov	sp, r7
 801660e:	bd80      	pop	{r7, pc}

08016610 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8016610:	b480      	push	{r7}
 8016612:	b085      	sub	sp, #20
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016624:	429a      	cmp	r2, r3
 8016626:	d011      	beq.n	801664c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016628:	4b14      	ldr	r3, [pc, #80]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801662a:	781b      	ldrb	r3, [r3, #0]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d11e      	bne.n	801666e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8016630:	4b13      	ldr	r3, [pc, #76]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016632:	881b      	ldrh	r3, [r3, #0]
 8016634:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8016636:	4b13      	ldr	r3, [pc, #76]	; (8016684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016638:	881a      	ldrh	r2, [r3, #0]
 801663a:	4b11      	ldr	r3, [pc, #68]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801663c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801663e:	4a11      	ldr	r2, [pc, #68]	; (8016684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016640:	89bb      	ldrh	r3, [r7, #12]
 8016642:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8016644:	4b0d      	ldr	r3, [pc, #52]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8016646:	2201      	movs	r2, #1
 8016648:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801664a:	e010      	b.n	801666e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801664c:	4b0b      	ldr	r3, [pc, #44]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d00c      	beq.n	801666e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8016654:	4b0a      	ldr	r3, [pc, #40]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016656:	881b      	ldrh	r3, [r3, #0]
 8016658:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801665a:	4b0a      	ldr	r3, [pc, #40]	; (8016684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801665c:	881a      	ldrh	r2, [r3, #0]
 801665e:	4b08      	ldr	r3, [pc, #32]	; (8016680 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8016660:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8016662:	4a08      	ldr	r2, [pc, #32]	; (8016684 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8016664:	89fb      	ldrh	r3, [r7, #14]
 8016666:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8016668:	4b04      	ldr	r3, [pc, #16]	; (801667c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801666a:	2200      	movs	r2, #0
 801666c:	701a      	strb	r2, [r3, #0]
    }
 801666e:	bf00      	nop
 8016670:	3714      	adds	r7, #20
 8016672:	46bd      	mov	sp, r7
 8016674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016678:	4770      	bx	lr
 801667a:	bf00      	nop
 801667c:	2400d824 	.word	0x2400d824
 8016680:	2400d822 	.word	0x2400d822
 8016684:	2400d820 	.word	0x2400d820

08016688 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	4618      	mov	r0, r3
 8016694:	f003 f973 	bl	801997e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016698:	bf00      	nop
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b082      	sub	sp, #8
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	4a05      	ldr	r2, [pc, #20]	; (80166c0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	601a      	str	r2, [r3, #0]
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7ff fe99 	bl	80163e8 <_ZN8touchgfx3HALD1Ev>
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	4618      	mov	r0, r3
 80166ba:	3708      	adds	r7, #8
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	0802fd9c 	.word	0x0802fd9c

080166c4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	6878      	ldr	r0, [r7, #4]
 80166ce:	f7ff ffe7 	bl	80166a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80166d2:	217c      	movs	r1, #124	; 0x7c
 80166d4:	6878      	ldr	r0, [r7, #4]
 80166d6:	f016 f9b9 	bl	802ca4c <_ZdlPvj>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4618      	mov	r0, r3
 80166de:	3708      	adds	r7, #8
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}

080166e4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b082      	sub	sp, #8
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7ff ffca 	bl	8016688 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80166f4:	bf00      	nop
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}

080166fc <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b082      	sub	sp, #8
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	4618      	mov	r0, r3
 8016708:	f000 ffe2 	bl	80176d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	4618      	mov	r0, r3
 8016720:	f001 f878 	bl	8017814 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8016724:	4603      	mov	r3, r0
}
 8016726:	4618      	mov	r0, r3
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6839      	ldr	r1, [r7, #0]
 801673c:	4618      	mov	r0, r3
 801673e:	f001 f877 	bl	8017830 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8016742:	bf00      	nop
 8016744:	3708      	adds	r7, #8
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}

0801674a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801674a:	b580      	push	{r7, lr}
 801674c:	b082      	sub	sp, #8
 801674e:	af00      	add	r7, sp, #0
 8016750:	6078      	str	r0, [r7, #4]
 8016752:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6839      	ldr	r1, [r7, #0]
 8016758:	4618      	mov	r0, r3
 801675a:	f001 f87f 	bl	801785c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801675e:	bf00      	nop
 8016760:	3708      	adds	r7, #8
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}

08016766 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8016766:	b580      	push	{r7, lr}
 8016768:	b084      	sub	sp, #16
 801676a:	af00      	add	r7, sp, #0
 801676c:	60f8      	str	r0, [r7, #12]
 801676e:	60b9      	str	r1, [r7, #8]
 8016770:	607a      	str	r2, [r7, #4]
 8016772:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8016774:	68f8      	ldr	r0, [r7, #12]
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	68b9      	ldr	r1, [r7, #8]
 801677c:	f001 f8c6 	bl	801790c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8016780:	4603      	mov	r3, r0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3710      	adds	r7, #16
 8016786:	46bd      	mov	sp, r7
 8016788:	bd80      	pop	{r7, pc}

0801678a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801678a:	b580      	push	{r7, lr}
 801678c:	b082      	sub	sp, #8
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	4618      	mov	r0, r3
 8016796:	f000 ffc9 	bl	801772c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801679a:	bf00      	nop
 801679c:	3708      	adds	r7, #8
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}

080167a2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80167a2:	b580      	push	{r7, lr}
 80167a4:	b082      	sub	sp, #8
 80167a6:	af00      	add	r7, sp, #0
 80167a8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4618      	mov	r0, r3
 80167ae:	f000 ffc9 	bl	8017744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80167b2:	bf00      	nop
 80167b4:	3708      	adds	r7, #8
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}

080167ba <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80167ba:	b580      	push	{r7, lr}
 80167bc:	b082      	sub	sp, #8
 80167be:	af00      	add	r7, sp, #0
 80167c0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f000 ffc8 	bl	801775a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80167ca:	bf00      	nop
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	4618      	mov	r0, r3
 80167de:	f000 ffc7 	bl	8017770 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80167e2:	bf00      	nop
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}

080167ea <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80167ea:	b580      	push	{r7, lr}
 80167ec:	b082      	sub	sp, #8
 80167ee:	af00      	add	r7, sp, #0
 80167f0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	4618      	mov	r0, r3
 80167f6:	f000 ffe9 	bl	80177cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80167fa:	4603      	mov	r3, r0
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	4618      	mov	r0, r3
 8016810:	f000 ffea 	bl	80177e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8016814:	bf00      	nop
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	4a05      	ldr	r2, [pc, #20]	; (801683c <_ZN11TouchGFXHALD1Ev+0x20>)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	601a      	str	r2, [r3, #0]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	4618      	mov	r0, r3
 801682e:	f7ff ff37 	bl	80166a0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	4618      	mov	r0, r3
 8016836:	3708      	adds	r7, #8
 8016838:	46bd      	mov	sp, r7
 801683a:	bd80      	pop	{r7, pc}
 801683c:	0802fb6c 	.word	0x0802fb6c

08016840 <_ZN11TouchGFXHALD0Ev>:
 8016840:	b580      	push	{r7, lr}
 8016842:	b082      	sub	sp, #8
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6878      	ldr	r0, [r7, #4]
 801684a:	f7ff ffe7 	bl	801681c <_ZN11TouchGFXHALD1Ev>
 801684e:	217c      	movs	r1, #124	; 0x7c
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f016 f8fb 	bl	802ca4c <_ZdlPvj>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4618      	mov	r0, r3
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8016860:	b580      	push	{r7, lr}
 8016862:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8016864:	2101      	movs	r1, #1
 8016866:	4811      	ldr	r0, [pc, #68]	; (80168ac <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8016868:	f7f7 fdbf 	bl	800e3ea <osSemaphoreCreate>
 801686c:	4603      	mov	r3, r0
 801686e:	4a10      	ldr	r2, [pc, #64]	; (80168b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8016870:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8016872:	4b0f      	ldr	r3, [pc, #60]	; (80168b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d105      	bne.n	8016886 <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 801687a:	4b0e      	ldr	r3, [pc, #56]	; (80168b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 801687c:	4a0e      	ldr	r2, [pc, #56]	; (80168b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 801687e:	2127      	movs	r1, #39	; 0x27
 8016880:	480e      	ldr	r0, [pc, #56]	; (80168bc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016882:	f016 f911 	bl	802caa8 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8016886:	2101      	movs	r1, #1
 8016888:	480d      	ldr	r0, [pc, #52]	; (80168c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801688a:	f7f7 fdae 	bl	800e3ea <osSemaphoreCreate>
 801688e:	4603      	mov	r3, r0
 8016890:	4a0c      	ldr	r2, [pc, #48]	; (80168c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8016892:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8016894:	4b0b      	ldr	r3, [pc, #44]	; (80168c4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d105      	bne.n	80168a8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 801689c:	4b0a      	ldr	r3, [pc, #40]	; (80168c8 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 801689e:	4a06      	ldr	r2, [pc, #24]	; (80168b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80168a0:	212a      	movs	r1, #42	; 0x2a
 80168a2:	4806      	ldr	r0, [pc, #24]	; (80168bc <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80168a4:	f016 f900 	bl	802caa8 <__assert_func>
}
 80168a8:	bf00      	nop
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	0802fc3c 	.word	0x0802fc3c
 80168b0:	24004e1c 	.word	0x24004e1c
 80168b4:	0802e9c4 	.word	0x0802e9c4
 80168b8:	0802ea10 	.word	0x0802ea10
 80168bc:	0802ea40 	.word	0x0802ea40
 80168c0:	0802fc44 	.word	0x0802fc44
 80168c4:	24004e20 	.word	0x24004e20
 80168c8:	0802ea6c 	.word	0x0802ea6c

080168cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 80168d0:	4b04      	ldr	r3, [pc, #16]	; (80168e4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f04f 31ff 	mov.w	r1, #4294967295
 80168d8:	4618      	mov	r0, r3
 80168da:	f7f7 fdb9 	bl	800e450 <osSemaphoreWait>
}
 80168de:	bf00      	nop
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	24004e1c 	.word	0x24004e1c

080168e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80168ec:	4b03      	ldr	r3, [pc, #12]	; (80168fc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f7 fdfb 	bl	800e4ec <osSemaphoreRelease>
}
 80168f6:	bf00      	nop
 80168f8:	bd80      	pop	{r7, pc}
 80168fa:	bf00      	nop
 80168fc:	24004e1c 	.word	0x24004e1c

08016900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016900:	b580      	push	{r7, lr}
 8016902:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8016904:	4b03      	ldr	r3, [pc, #12]	; (8016914 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	2100      	movs	r1, #0
 801690a:	4618      	mov	r0, r3
 801690c:	f7f7 fda0 	bl	800e450 <osSemaphoreWait>
}
 8016910:	bf00      	nop
 8016912:	bd80      	pop	{r7, pc}
 8016914:	24004e1c 	.word	0x24004e1c

08016918 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016918:	b580      	push	{r7, lr}
 801691a:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 801691c:	4b03      	ldr	r3, [pc, #12]	; (801692c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4618      	mov	r0, r3
 8016922:	f7f7 fde3 	bl	800e4ec <osSemaphoreRelease>
}
 8016926:	bf00      	nop
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	24004e1c 	.word	0x24004e1c

08016930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016930:	b580      	push	{r7, lr}
 8016932:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8016934:	4b07      	ldr	r3, [pc, #28]	; (8016954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2100      	movs	r1, #0
 801693a:	4618      	mov	r0, r3
 801693c:	f7f7 fd88 	bl	800e450 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8016940:	4b04      	ldr	r3, [pc, #16]	; (8016954 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	f04f 31ff 	mov.w	r1, #4294967295
 8016948:	4618      	mov	r0, r3
 801694a:	f7f7 fd81 	bl	800e450 <osSemaphoreWait>
}
 801694e:	bf00      	nop
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	24004e20 	.word	0x24004e20

08016958 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	4603      	mov	r3, r0
 8016960:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8016962:	88fb      	ldrh	r3, [r7, #6]
 8016964:	4618      	mov	r0, r3
 8016966:	f7f7 fd2c 	bl	800e3c2 <osDelay>
}
 801696a:	bf00      	nop
 801696c:	3708      	adds	r7, #8
 801696e:	46bd      	mov	sp, r7
 8016970:	bd80      	pop	{r7, pc}
	...

08016974 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
    {
 801697c:	4a04      	ldr	r2, [pc, #16]	; (8016990 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	601a      	str	r2, [r3, #0]
    }
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	4618      	mov	r0, r3
 8016986:	370c      	adds	r7, #12
 8016988:	46bd      	mov	sp, r7
 801698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698e:	4770      	bx	lr
 8016990:	0802fca4 	.word	0x0802fca4

08016994 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
    }
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f7ff ffe9 	bl	8016974 <_ZN8touchgfx9DMA_QueueD1Ev>
 80169a2:	2104      	movs	r1, #4
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f016 f851 	bl	802ca4c <_ZdlPvj>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	4618      	mov	r0, r3
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 80169b4:	b480      	push	{r7}
 80169b6:	b083      	sub	sp, #12
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
    {
    }
 80169bc:	bf00      	nop
 80169be:	370c      	adds	r7, #12
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 80169c8:	b480      	push	{r7}
 80169ca:	b083      	sub	sp, #12
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 80169d0:	2300      	movs	r3, #0
    }
 80169d2:	4618      	mov	r0, r3
 80169d4:	370c      	adds	r7, #12
 80169d6:	46bd      	mov	sp, r7
 80169d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169dc:	4770      	bx	lr
	...

080169e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80169e0:	b480      	push	{r7}
 80169e2:	b083      	sub	sp, #12
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
    {
 80169e8:	4a04      	ldr	r2, [pc, #16]	; (80169fc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	601a      	str	r2, [r3, #0]
    }
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	4618      	mov	r0, r3
 80169f2:	370c      	adds	r7, #12
 80169f4:	46bd      	mov	sp, r7
 80169f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fa:	4770      	bx	lr
 80169fc:	080301a8 	.word	0x080301a8

08016a00 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
    }
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f7ff ffe9 	bl	80169e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016a0e:	210c      	movs	r1, #12
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f016 f81b 	bl	802ca4c <_ZdlPvj>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	4618      	mov	r0, r3
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016a20:	b480      	push	{r7}
 8016a22:	b083      	sub	sp, #12
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016a2a:	4a09      	ldr	r2, [pc, #36]	; (8016a50 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	601a      	str	r2, [r3, #0]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	683a      	ldr	r2, [r7, #0]
 8016a34:	605a      	str	r2, [r3, #4]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2200      	movs	r2, #0
 8016a3a:	721a      	strb	r2, [r3, #8]
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2200      	movs	r2, #0
 8016a40:	725a      	strb	r2, [r3, #9]
    {
    }
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	4618      	mov	r0, r3
 8016a46:	370c      	adds	r7, #12
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4e:	4770      	bx	lr
 8016a50:	080301a8 	.word	0x080301a8

08016a54 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
    {
    }
 8016a5c:	bf00      	nop
 8016a5e:	370c      	adds	r7, #12
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr

08016a68 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
    {
    }
 8016a70:	bf00      	nop
 8016a72:	370c      	adds	r7, #12
 8016a74:	46bd      	mov	sp, r7
 8016a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7a:	4770      	bx	lr

08016a7c <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b082      	sub	sp, #8
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	330c      	adds	r3, #12
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f7fb f9a9 	bl	8011de0 <_ZN8touchgfx9colortypeC1Ev>
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	4618      	mov	r0, r3
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	330c      	adds	r3, #12
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	4610      	mov	r0, r2
 8016aaa:	f7ff ffb9 	bl	8016a20 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016aae:	4a0b      	ldr	r2, [pc, #44]	; (8016adc <_ZN8STM32DMAC1Ev+0x44>)
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	601a      	str	r2, [r3, #0]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f103 000c 	add.w	r0, r3, #12
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	3320      	adds	r3, #32
 8016abe:	2201      	movs	r2, #1
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	f003 fe49 	bl	801a758 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	3320      	adds	r3, #32
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7ff ffd6 	bl	8016a7c <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3708      	adds	r7, #8
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd80      	pop	{r7, pc}
 8016ada:	bf00      	nop
 8016adc:	0802fc54 	.word	0x0802fc54

08016ae0 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8016ae8:	2300      	movs	r3, #0
}
 8016aea:	4618      	mov	r0, r3
 8016aec:	370c      	adds	r7, #12
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr
	...

08016af8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8016b02:	4b03      	ldr	r3, [pc, #12]	; (8016b10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8016b04:	4a03      	ldr	r2, [pc, #12]	; (8016b14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8016b06:	2122      	movs	r1, #34	; 0x22
 8016b08:	4803      	ldr	r0, [pc, #12]	; (8016b18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8016b0a:	f015 ffcd 	bl	802caa8 <__assert_func>
 8016b0e:	bf00      	nop
 8016b10:	0802eaa8 	.word	0x0802eaa8
 8016b14:	0802eacc 	.word	0x0802eacc
 8016b18:	0802eb0c 	.word	0x0802eb0c

08016b1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8016b26:	4b03      	ldr	r3, [pc, #12]	; (8016b34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8016b28:	4a03      	ldr	r2, [pc, #12]	; (8016b38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8016b2a:	2127      	movs	r1, #39	; 0x27
 8016b2c:	4803      	ldr	r0, [pc, #12]	; (8016b3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8016b2e:	f015 ffbb 	bl	802caa8 <__assert_func>
 8016b32:	bf00      	nop
 8016b34:	0802eaa8 	.word	0x0802eaa8
 8016b38:	0802eb38 	.word	0x0802eb38
 8016b3c:	0802eb0c 	.word	0x0802eb0c

08016b40 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
 8016b48:	4a08      	ldr	r2, [pc, #32]	; (8016b6c <_ZN8STM32DMAD1Ev+0x2c>)
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	601a      	str	r2, [r3, #0]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	330c      	adds	r3, #12
 8016b52:	4618      	mov	r0, r3
 8016b54:	f000 f81c 	bl	8016b90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7ff ff40 	bl	80169e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	4618      	mov	r0, r3
 8016b64:	3708      	adds	r7, #8
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	0802fc54 	.word	0x0802fc54

08016b70 <_ZN8STM32DMAD0Ev>:
 8016b70:	b580      	push	{r7, lr}
 8016b72:	b082      	sub	sp, #8
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f7ff ffe1 	bl	8016b40 <_ZN8STM32DMAD1Ev>
 8016b7e:	2144      	movs	r1, #68	; 0x44
 8016b80:	6878      	ldr	r0, [r7, #4]
 8016b82:	f015 ff63 	bl	802ca4c <_ZdlPvj>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3708      	adds	r7, #8
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	4a05      	ldr	r2, [pc, #20]	; (8016bb0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	601a      	str	r2, [r3, #0]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7ff fee7 	bl	8016974 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3708      	adds	r7, #8
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	080301f8 	.word	0x080301f8

08016bb4 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f7ff ffe7 	bl	8016b90 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016bc2:	2114      	movs	r1, #20
 8016bc4:	6878      	ldr	r0, [r7, #4]
 8016bc6:	f015 ff41 	bl	802ca4c <_ZdlPvj>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8016bd4:	b480      	push	{r7}
 8016bd6:	b083      	sub	sp, #12
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8016bdc:	4a04      	ldr	r2, [pc, #16]	; (8016bf0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6013      	str	r3, [r2, #0]
    }
 8016be2:	bf00      	nop
 8016be4:	370c      	adds	r7, #12
 8016be6:	46bd      	mov	sp, r7
 8016be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop
 8016bf0:	2400d890 	.word	0x2400d890

08016bf4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016bf4:	b480      	push	{r7}
 8016bf6:	b085      	sub	sp, #20
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	60f8      	str	r0, [r7, #12]
 8016bfc:	60b9      	str	r1, [r7, #8]
 8016bfe:	607a      	str	r2, [r7, #4]
 8016c00:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8016c02:	4a0b      	ldr	r2, [pc, #44]	; (8016c30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	601a      	str	r2, [r3, #0]
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	605a      	str	r2, [r3, #4]
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	687a      	ldr	r2, [r7, #4]
 8016c12:	609a      	str	r2, [r3, #8]
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	683a      	ldr	r2, [r7, #0]
 8016c18:	60da      	str	r2, [r3, #12]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	69ba      	ldr	r2, [r7, #24]
 8016c1e:	611a      	str	r2, [r3, #16]
    {
    }
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	4618      	mov	r0, r3
 8016c24:	3714      	adds	r7, #20
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	0802fd8c 	.word	0x0802fd8c

08016c34 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8016c34:	b480      	push	{r7}
 8016c36:	b083      	sub	sp, #12
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
    {
 8016c3c:	4a04      	ldr	r2, [pc, #16]	; (8016c50 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	601a      	str	r2, [r3, #0]
    }
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	4618      	mov	r0, r3
 8016c46:	370c      	adds	r7, #12
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr
 8016c50:	0802fd8c 	.word	0x0802fd8c

08016c54 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
    }
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f7ff ffe9 	bl	8016c34 <_ZN8touchgfx7MVPHeapD1Ev>
 8016c62:	2114      	movs	r1, #20
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f015 fef1 	bl	802ca4c <_ZdlPvj>
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3708      	adds	r7, #8
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}

08016c74 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8016c74:	b480      	push	{r7}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
    {
 8016c7c:	4a04      	ldr	r2, [pc, #16]	; (8016c90 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	601a      	str	r2, [r3, #0]
    }
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4618      	mov	r0, r3
 8016c86:	370c      	adds	r7, #12
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr
 8016c90:	0803073c 	.word	0x0803073c

08016c94 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
    }
 8016c9c:	6878      	ldr	r0, [r7, #4]
 8016c9e:	f7ff ffe9 	bl	8016c74 <_ZN8touchgfx3LCDD1Ev>
 8016ca2:	2108      	movs	r1, #8
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f015 fed1 	bl	802ca4c <_ZdlPvj>
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	4618      	mov	r0, r3
 8016cae:	3708      	adds	r7, #8
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8016cb4:	b480      	push	{r7}
 8016cb6:	b083      	sub	sp, #12
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	801a      	strh	r2, [r3, #0]
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	805a      	strh	r2, [r3, #2]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	809a      	strh	r2, [r3, #4]
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	80da      	strh	r2, [r3, #6]
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	811a      	strh	r2, [r3, #8]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2200      	movs	r2, #0
 8016cde:	815a      	strh	r2, [r3, #10]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	819a      	strh	r2, [r3, #12]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	739a      	strb	r2, [r3, #14]
        {
        }
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	370c      	adds	r7, #12
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf8:	4770      	bx	lr

08016cfa <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b082      	sub	sp, #8
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7ff ffd5 	bl	8016cb4 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	611a      	str	r2, [r3, #16]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	2200      	movs	r2, #0
 8016d14:	829a      	strh	r2, [r3, #20]
    {
    }
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	3708      	adds	r7, #8
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}

08016d20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	60f8      	str	r0, [r7, #12]
 8016d28:	60b9      	str	r1, [r7, #8]
 8016d2a:	607a      	str	r2, [r7, #4]
 8016d2c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8016d2e:	4a55      	ldr	r2, [pc, #340]	; (8016e84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	601a      	str	r2, [r3, #0]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	68ba      	ldr	r2, [r7, #8]
 8016d38:	605a      	str	r2, [r3, #4]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	609a      	str	r2, [r3, #8]
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	683a      	ldr	r2, [r7, #0]
 8016d44:	60da      	str	r2, [r3, #12]
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	611a      	str	r2, [r3, #16]
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	615a      	str	r2, [r3, #20]
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	2200      	movs	r2, #0
 8016d56:	619a      	str	r2, [r3, #24]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	331c      	adds	r3, #28
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7ff ffcc 	bl	8016cfa <_ZN8touchgfx8GesturesC1Ev>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2200      	movs	r2, #0
 8016d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	2200      	movs	r2, #0
 8016d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	2200      	movs	r2, #0
 8016d7a:	641a      	str	r2, [r3, #64]	; 0x40
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	645a      	str	r2, [r3, #68]	; 0x44
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	2200      	movs	r2, #0
 8016d86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	2200      	movs	r2, #0
 8016d96:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	2200      	movs	r2, #0
 8016da6:	64da      	str	r2, [r3, #76]	; 0x4c
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	3350      	adds	r3, #80	; 0x50
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7fb f840 	bl	8011e32 <_ZN8touchgfx4RectC1Ev>
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	2200      	movs	r2, #0
 8016db6:	659a      	str	r2, [r3, #88]	; 0x58
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	661a      	str	r2, [r3, #96]	; 0x60
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	2201      	movs	r2, #1
 8016dc8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2201      	movs	r2, #1
 8016de0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2200      	movs	r2, #0
 8016de8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	2200      	movs	r2, #0
 8016df0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	2200      	movs	r2, #0
 8016df8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	2200      	movs	r2, #0
 8016e00:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	2200      	movs	r2, #0
 8016e08:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	671a      	str	r2, [r3, #112]	; 0x70
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	2200      	movs	r2, #0
 8016e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	2200      	movs	r2, #0
 8016e1e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	2200      	movs	r2, #0
 8016e26:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2201      	movs	r2, #1
 8016e2e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2201      	movs	r2, #1
 8016e36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8016e3a:	4a13      	ldr	r2, [pc, #76]	; (8016e88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8016e40:	4a12      	ldr	r2, [pc, #72]	; (8016e8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016e42:	8b3b      	ldrh	r3, [r7, #24]
 8016e44:	8013      	strh	r3, [r2, #0]
 8016e46:	4b11      	ldr	r3, [pc, #68]	; (8016e8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8016e48:	881a      	ldrh	r2, [r3, #0]
 8016e4a:	4b11      	ldr	r3, [pc, #68]	; (8016e90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8016e4c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8016e4e:	4a11      	ldr	r2, [pc, #68]	; (8016e94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016e50:	8bbb      	ldrh	r3, [r7, #28]
 8016e52:	8013      	strh	r3, [r2, #0]
 8016e54:	4b0f      	ldr	r3, [pc, #60]	; (8016e94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8016e56:	881a      	ldrh	r2, [r3, #0]
 8016e58:	4b0f      	ldr	r3, [pc, #60]	; (8016e98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8016e5a:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8016e5c:	4b0f      	ldr	r3, [pc, #60]	; (8016e9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8016e5e:	2200      	movs	r2, #0
 8016e60:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016e62:	8b3a      	ldrh	r2, [r7, #24]
 8016e64:	8bbb      	ldrh	r3, [r7, #28]
 8016e66:	429a      	cmp	r2, r3
 8016e68:	bf34      	ite	cc
 8016e6a:	2301      	movcc	r3, #1
 8016e6c:	2300      	movcs	r3, #0
 8016e6e:	b2db      	uxtb	r3, r3
 8016e70:	461a      	mov	r2, r3
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	3710      	adds	r7, #16
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop
 8016e84:	080300d0 	.word	0x080300d0
 8016e88:	2400d82c 	.word	0x2400d82c
 8016e8c:	2400d820 	.word	0x2400d820
 8016e90:	2400d826 	.word	0x2400d826
 8016e94:	2400d822 	.word	0x2400d822
 8016e98:	2400d828 	.word	0x2400d828
 8016e9c:	2400d824 	.word	0x2400d824

08016ea0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b082      	sub	sp, #8
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMain_screenScreenNoTransition();
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	4618      	mov	r0, r3
 8016eae:	f7fa fb6f 	bl	8011590 <_ZN23FrontendApplicationBase33gotoMain_screenScreenNoTransitionEv>
    }
 8016eb2:	bf00      	nop
 8016eb4:	3708      	adds	r7, #8
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
	...

08016ebc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af02      	add	r7, sp, #8
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016eca:	68f8      	ldr	r0, [r7, #12]
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	9300      	str	r3, [sp, #0]
 8016ed0:	683b      	ldr	r3, [r7, #0]
 8016ed2:	687a      	ldr	r2, [r7, #4]
 8016ed4:	68b9      	ldr	r1, [r7, #8]
 8016ed6:	f7ff fe8d 	bl	8016bf4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016eda:	4a04      	ldr	r2, [pc, #16]	; (8016eec <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	601a      	str	r2, [r3, #0]
    {

    }
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	0802fd78 	.word	0x0802fd78

08016ef0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	4801      	ldr	r0, [pc, #4]	; (8016efc <__tcf_0+0xc>)
 8016ef6:	f000 f95d 	bl	80171b4 <_ZN12FrontendHeapD1Ev>
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	24004e24 	.word	0x24004e24

08016f00 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016f00:	b580      	push	{r7, lr}
 8016f02:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016f04:	4b12      	ldr	r3, [pc, #72]	; (8016f50 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	f3bf 8f5b 	dmb	ish
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	f003 0301 	and.w	r3, r3, #1
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	bf0c      	ite	eq
 8016f16:	2301      	moveq	r3, #1
 8016f18:	2300      	movne	r3, #0
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d013      	beq.n	8016f48 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016f20:	480b      	ldr	r0, [pc, #44]	; (8016f50 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016f22:	f015 fd95 	bl	802ca50 <__cxa_guard_acquire>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	bf14      	ite	ne
 8016f2c:	2301      	movne	r3, #1
 8016f2e:	2300      	moveq	r3, #0
 8016f30:	b2db      	uxtb	r3, r3
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d008      	beq.n	8016f48 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8016f36:	4807      	ldr	r0, [pc, #28]	; (8016f54 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8016f38:	f000 f868 	bl	801700c <_ZN12FrontendHeapC1Ev>
 8016f3c:	4806      	ldr	r0, [pc, #24]	; (8016f58 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8016f3e:	f015 fdd1 	bl	802cae4 <atexit>
 8016f42:	4803      	ldr	r0, [pc, #12]	; (8016f50 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8016f44:	f015 fd90 	bl	802ca68 <__cxa_guard_release>
        return instance;
 8016f48:	4b02      	ldr	r3, [pc, #8]	; (8016f54 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	2400c8cc 	.word	0x2400c8cc
 8016f54:	24004e24 	.word	0x24004e24
 8016f58:	08016ef1 	.word	0x08016ef1

08016f5c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b082      	sub	sp, #8
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
 8016f64:	4a05      	ldr	r2, [pc, #20]	; (8016f7c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	601a      	str	r2, [r3, #0]
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7ff fe61 	bl	8016c34 <_ZN8touchgfx7MVPHeapD1Ev>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	4618      	mov	r0, r3
 8016f76:	3708      	adds	r7, #8
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	0802fd78 	.word	0x0802fd78

08016f80 <_ZN16FrontendHeapBaseD0Ev>:
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f7ff ffe7 	bl	8016f5c <_ZN16FrontendHeapBaseD1Ev>
 8016f8e:	2114      	movs	r1, #20
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f015 fd5b 	bl	802ca4c <_ZdlPvj>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3708      	adds	r7, #8
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f001 fa28 	bl	8018400 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016fb0:	4a03      	ldr	r2, [pc, #12]	; (8016fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	601a      	str	r2, [r3, #0]
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	4618      	mov	r0, r3
 8016fba:	3708      	adds	r7, #8
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	0802fd44 	.word	0x0802fd44

08016fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f001 fa16 	bl	8018400 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016fd4:	4a03      	ldr	r2, [pc, #12]	; (8016fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	601a      	str	r2, [r3, #0]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	0802fd10 	.word	0x0802fd10

08016fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f001 fa04 	bl	8018400 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8016ff8:	4a03      	ldr	r2, [pc, #12]	; (8017008 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	601a      	str	r2, [r3, #0]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	4618      	mov	r0, r3
 8017002:	3708      	adds	r7, #8
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}
 8017008:	0802fcdc 	.word	0x0802fcdc

0801700c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801700c:	b5b0      	push	{r4, r5, r7, lr}
 801700e:	b084      	sub	sp, #16
 8017010:	af02      	add	r7, sp, #8
 8017012:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f103 0414 	add.w	r4, r3, #20
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f647 1238 	movw	r2, #31032	; 0x7938
 8017028:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801702a:	6879      	ldr	r1, [r7, #4]
 801702c:	f647 1350 	movw	r3, #31056	; 0x7950
 8017030:	440b      	add	r3, r1
                     app(model, *this)
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	4613      	mov	r3, r2
 8017036:	462a      	mov	r2, r5
 8017038:	4621      	mov	r1, r4
 801703a:	f7ff ff3f 	bl	8016ebc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801703e:	4a1a      	ldr	r2, [pc, #104]	; (80170a8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	601a      	str	r2, [r3, #0]
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	3314      	adds	r3, #20
 8017048:	4618      	mov	r0, r3
 801704a:	f7ff ffa9 	bl	8016fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	332c      	adds	r3, #44	; 0x2c
 8017052:	4618      	mov	r0, r3
 8017054:	f7ff ffb6 	bl	8016fc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017058:	687a      	ldr	r2, [r7, #4]
 801705a:	f647 1338 	movw	r3, #31032	; 0x7938
 801705e:	4413      	add	r3, r2
 8017060:	4618      	mov	r0, r3
 8017062:	f7ff ffc1 	bl	8016fe8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	f647 134c 	movw	r3, #31052	; 0x794c
 801706c:	4413      	add	r3, r2
 801706e:	4618      	mov	r0, r3
 8017070:	f7ff f8f4 	bl	801625c <_ZN5ModelC1Ev>
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	f647 1350 	movw	r3, #31056	; 0x7950
 801707a:	4413      	add	r3, r2
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	f647 114c 	movw	r1, #31052	; 0x794c
 8017082:	4411      	add	r1, r2
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	4618      	mov	r0, r3
 8017088:	f7fe f9fa 	bl	8015480 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	f647 1350 	movw	r3, #31056	; 0x7950
 8017094:	4413      	add	r3, r2
 8017096:	4619      	mov	r1, r3
 8017098:	f7ff ff02 	bl	8016ea0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	4618      	mov	r0, r3
 80170a0:	3708      	adds	r7, #8
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bdb0      	pop	{r4, r5, r7, pc}
 80170a6:	bf00      	nop
 80170a8:	0802fcc8 	.word	0x0802fcc8

080170ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b086      	sub	sp, #24
 80170b0:	af02      	add	r7, sp, #8
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	607a      	str	r2, [r7, #4]
 80170b8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80170ba:	68f8      	ldr	r0, [r7, #12]
 80170bc:	8bbb      	ldrh	r3, [r7, #28]
 80170be:	9301      	str	r3, [sp, #4]
 80170c0:	8b3b      	ldrh	r3, [r7, #24]
 80170c2:	9300      	str	r3, [sp, #0]
 80170c4:	683b      	ldr	r3, [r7, #0]
 80170c6:	687a      	ldr	r2, [r7, #4]
 80170c8:	68b9      	ldr	r1, [r7, #8]
 80170ca:	f7ff fe29 	bl	8016d20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80170ce:	4a04      	ldr	r2, [pc, #16]	; (80170e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	601a      	str	r2, [r3, #0]
    }
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	4618      	mov	r0, r3
 80170d8:	3710      	adds	r7, #16
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	0802fd9c 	.word	0x0802fd9c

080170e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b086      	sub	sp, #24
 80170e8:	af02      	add	r7, sp, #8
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
 80170f0:	603b      	str	r3, [r7, #0]
 80170f2:	68f8      	ldr	r0, [r7, #12]
 80170f4:	8bbb      	ldrh	r3, [r7, #28]
 80170f6:	9301      	str	r3, [sp, #4]
 80170f8:	8b3b      	ldrh	r3, [r7, #24]
 80170fa:	9300      	str	r3, [sp, #0]
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	68b9      	ldr	r1, [r7, #8]
 8017102:	f7ff ffd3 	bl	80170ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017106:	4a04      	ldr	r2, [pc, #16]	; (8017118 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	601a      	str	r2, [r3, #0]
    }
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	4618      	mov	r0, r3
 8017110:	3710      	adds	r7, #16
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	0802fb6c 	.word	0x0802fb6c

0801711c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	4a04      	ldr	r2, [pc, #16]	; (8017138 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	601a      	str	r2, [r3, #0]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	4618      	mov	r0, r3
 801712e:	370c      	adds	r7, #12
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr
 8017138:	0802fb54 	.word	0x0802fb54

0801713c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	4618      	mov	r0, r3
 8017148:	f7ff ffe8 	bl	801711c <_ZN8touchgfx15TouchControllerC1Ev>
 801714c:	4a03      	ldr	r2, [pc, #12]	; (801715c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	601a      	str	r2, [r3, #0]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4618      	mov	r0, r3
 8017156:	3708      	adds	r7, #8
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}
 801715c:	0802fb3c 	.word	0x0802fb3c

08017160 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8017160:	b590      	push	{r4, r7, lr}
 8017162:	b085      	sub	sp, #20
 8017164:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8017166:	f7fd ff59 	bl	801501c <_ZN14BitmapDatabase11getInstanceEv>
 801716a:	4604      	mov	r4, r0
 801716c:	f7fd ff60 	bl	8015030 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017170:	4603      	mov	r3, r0
 8017172:	4619      	mov	r1, r3
 8017174:	2300      	movs	r3, #0
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	2300      	movs	r3, #0
 801717a:	2200      	movs	r2, #0
 801717c:	4620      	mov	r0, r4
 801717e:	f009 fed7 	bl	8020f30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8017182:	4809      	ldr	r0, [pc, #36]	; (80171a8 <touchgfx_init+0x48>)
 8017184:	f7ff fd26 	bl	8016bd4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8017188:	2000      	movs	r0, #0
 801718a:	f7fe f895 	bl	80152b8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801718e:	4807      	ldr	r0, [pc, #28]	; (80171ac <touchgfx_init+0x4c>)
 8017190:	f009 fd86 	bl	8020ca0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8017194:	f7ff feb4 	bl	8016f00 <_ZN12FrontendHeap11getInstanceEv>
 8017198:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801719a:	4805      	ldr	r0, [pc, #20]	; (80171b0 <touchgfx_init+0x50>)
 801719c:	f7ff faae 	bl	80166fc <_ZN11TouchGFXHAL10initializeEv>
}
 80171a0:	bf00      	nop
 80171a2:	370c      	adds	r7, #12
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bd90      	pop	{r4, r7, pc}
 80171a8:	2400c990 	.word	0x2400c990
 80171ac:	24000514 	.word	0x24000514
 80171b0:	2400c994 	.word	0x2400c994

080171b4 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b082      	sub	sp, #8
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
 80171bc:	4a11      	ldr	r2, [pc, #68]	; (8017204 <_ZN12FrontendHeapD1Ev+0x50>)
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	601a      	str	r2, [r3, #0]
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	f647 1350 	movw	r3, #31056	; 0x7950
 80171c8:	4413      	add	r3, r2
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7fe f922 	bl	8015414 <_ZN19FrontendApplicationD1Ev>
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	f647 1338 	movw	r3, #31032	; 0x7938
 80171d6:	4413      	add	r3, r2
 80171d8:	4618      	mov	r0, r3
 80171da:	f000 f827 	bl	801722c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	332c      	adds	r3, #44	; 0x2c
 80171e2:	4618      	mov	r0, r3
 80171e4:	f000 f844 	bl	8017270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	3314      	adds	r3, #20
 80171ec:	4618      	mov	r0, r3
 80171ee:	f000 f863 	bl	80172b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7ff feb1 	bl	8016f5c <_ZN16FrontendHeapBaseD1Ev>
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4618      	mov	r0, r3
 80171fe:	3708      	adds	r7, #8
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}
 8017204:	0802fcc8 	.word	0x0802fcc8

08017208 <_ZN12FrontendHeapD0Ev>:
 8017208:	b580      	push	{r7, lr}
 801720a:	b082      	sub	sp, #8
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	6878      	ldr	r0, [r7, #4]
 8017212:	f7ff ffcf 	bl	80171b4 <_ZN12FrontendHeapD1Ev>
 8017216:	f647 21a8 	movw	r1, #31400	; 0x7aa8
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f015 fc16 	bl	802ca4c <_ZdlPvj>
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	4618      	mov	r0, r3
 8017224:	3708      	adds	r7, #8
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}
	...

0801722c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801722c:	b580      	push	{r7, lr}
 801722e:	b082      	sub	sp, #8
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	4a05      	ldr	r2, [pc, #20]	; (801724c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	601a      	str	r2, [r3, #0]
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	4618      	mov	r0, r3
 801723e:	f001 f8de 	bl	80183fe <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	4618      	mov	r0, r3
 8017246:	3708      	adds	r7, #8
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	0802fcdc 	.word	0x0802fcdc

08017250 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017250:	b580      	push	{r7, lr}
 8017252:	b082      	sub	sp, #8
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7ff ffe7 	bl	801722c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801725e:	2114      	movs	r1, #20
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f015 fbf3 	bl	802ca4c <_ZdlPvj>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4618      	mov	r0, r3
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}

08017270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	4a05      	ldr	r2, [pc, #20]	; (8017290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	601a      	str	r2, [r3, #0]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	4618      	mov	r0, r3
 8017282:	f001 f8bc 	bl	80183fe <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	0802fd10 	.word	0x0802fd10

08017294 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f7ff ffe7 	bl	8017270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172a2:	f647 110c 	movw	r1, #30988	; 0x790c
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f015 fbd0 	bl	802ca4c <_ZdlPvj>
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	4618      	mov	r0, r3
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
	...

080172b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
 80172c0:	4a05      	ldr	r2, [pc, #20]	; (80172d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	601a      	str	r2, [r3, #0]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	4618      	mov	r0, r3
 80172ca:	f001 f898 	bl	80183fe <_ZN8touchgfx17AbstractPartitionD1Ev>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4618      	mov	r0, r3
 80172d2:	3708      	adds	r7, #8
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	0802fd44 	.word	0x0802fd44

080172dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f7ff ffe7 	bl	80172b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80172ea:	2118      	movs	r1, #24
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f015 fbad 	bl	802ca4c <_ZdlPvj>
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	4618      	mov	r0, r3
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}

080172fc <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	4a05      	ldr	r2, [pc, #20]	; (801731c <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	601a      	str	r2, [r3, #0]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	4618      	mov	r0, r3
 801730e:	f7ff fcb1 	bl	8016c74 <_ZN8touchgfx3LCDD1Ev>
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	4618      	mov	r0, r3
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}
 801731c:	08030b18 	.word	0x08030b18

08017320 <_ZN8touchgfx8LCD32bppD0Ev>:
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6878      	ldr	r0, [r7, #4]
 801732a:	f7ff ffe7 	bl	80172fc <_ZN8touchgfx8LCD32bppD1Ev>
 801732e:	2178      	movs	r1, #120	; 0x78
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f015 fb8b 	bl	802ca4c <_ZdlPvj>
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	4618      	mov	r0, r3
 801733a:	3708      	adds	r7, #8
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}

08017340 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af02      	add	r7, sp, #8
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2b01      	cmp	r3, #1
 801734e:	d119      	bne.n	8017384 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017350:	683b      	ldr	r3, [r7, #0]
 8017352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017356:	4293      	cmp	r3, r2
 8017358:	d114      	bne.n	8017384 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801735a:	4818      	ldr	r0, [pc, #96]	; (80173bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801735c:	f7ff feee 	bl	801713c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8017360:	4817      	ldr	r0, [pc, #92]	; (80173c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017362:	f7ff fb99 	bl	8016a98 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 8017366:	4817      	ldr	r0, [pc, #92]	; (80173c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017368:	f00c fef4 	bl	8024154 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 801736c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	f44f 7348 	mov.w	r3, #800	; 0x320
 8017376:	9300      	str	r3, [sp, #0]
 8017378:	4b10      	ldr	r3, [pc, #64]	; (80173bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801737a:	4a12      	ldr	r2, [pc, #72]	; (80173c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801737c:	4910      	ldr	r1, [pc, #64]	; (80173c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801737e:	4812      	ldr	r0, [pc, #72]	; (80173c8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017380:	f7ff feb0 	bl	80170e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d113      	bne.n	80173b2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017390:	4293      	cmp	r3, r2
 8017392:	d10e      	bne.n	80173b2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017394:	480c      	ldr	r0, [pc, #48]	; (80173c8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017396:	f7ff fa41 	bl	801681c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801739a:	480c      	ldr	r0, [pc, #48]	; (80173cc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801739c:	f7f9 fb80 	bl	8010aa0 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 80173a0:	4808      	ldr	r0, [pc, #32]	; (80173c4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80173a2:	f7ff ffab 	bl	80172fc <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 80173a6:	4806      	ldr	r0, [pc, #24]	; (80173c0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80173a8:	f7ff fbca 	bl	8016b40 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80173ac:	4803      	ldr	r0, [pc, #12]	; (80173bc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80173ae:	f7fe ffa5 	bl	80162fc <_ZN20STM32TouchControllerD1Ev>
}
 80173b2:	bf00      	nop
 80173b4:	3708      	adds	r7, #8
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	2400c8d0 	.word	0x2400c8d0
 80173c0:	2400c8d4 	.word	0x2400c8d4
 80173c4:	2400c918 	.word	0x2400c918
 80173c8:	2400c994 	.word	0x2400c994
 80173cc:	24000514 	.word	0x24000514

080173d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80173d8:	2301      	movs	r3, #1
    }
 80173da:	4618      	mov	r0, r3
 80173dc:	370c      	adds	r7, #12
 80173de:	46bd      	mov	sp, r7
 80173e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e4:	4770      	bx	lr

080173e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80173e6:	b480      	push	{r7}
 80173e8:	b083      	sub	sp, #12
 80173ea:	af00      	add	r7, sp, #0
 80173ec:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80173ee:	230c      	movs	r3, #12
    }
 80173f0:	4618      	mov	r0, r3
 80173f2:	370c      	adds	r7, #12
 80173f4:	46bd      	mov	sp, r7
 80173f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173fa:	4770      	bx	lr

080173fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80173fc:	b480      	push	{r7}
 80173fe:	b083      	sub	sp, #12
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	460b      	mov	r3, r1
 8017406:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017408:	887a      	ldrh	r2, [r7, #2]
 801740a:	4613      	mov	r3, r2
 801740c:	005b      	lsls	r3, r3, #1
 801740e:	4413      	add	r3, r2
 8017410:	009b      	lsls	r3, r3, #2
 8017412:	3308      	adds	r3, #8
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	4413      	add	r3, r2
    }
 8017418:	4618      	mov	r0, r3
 801741a:	370c      	adds	r7, #12
 801741c:	46bd      	mov	sp, r7
 801741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017422:	4770      	bx	lr

08017424 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8017424:	b480      	push	{r7}
 8017426:	b083      	sub	sp, #12
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	460b      	mov	r3, r1
 801742e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017430:	887a      	ldrh	r2, [r7, #2]
 8017432:	4613      	mov	r3, r2
 8017434:	005b      	lsls	r3, r3, #1
 8017436:	4413      	add	r3, r2
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	3308      	adds	r3, #8
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	4413      	add	r3, r2
    }
 8017440:	4618      	mov	r0, r3
 8017442:	370c      	adds	r7, #12
 8017444:	46bd      	mov	sp, r7
 8017446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744a:	4770      	bx	lr

0801744c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801744c:	b480      	push	{r7}
 801744e:	b083      	sub	sp, #12
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017454:	2301      	movs	r3, #1
    }
 8017456:	4618      	mov	r0, r3
 8017458:	370c      	adds	r7, #12
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr

08017462 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017462:	b480      	push	{r7}
 8017464:	b083      	sub	sp, #12
 8017466:	af00      	add	r7, sp, #0
 8017468:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801746a:	f647 1304 	movw	r3, #30980	; 0x7904
    }
 801746e:	4618      	mov	r0, r3
 8017470:	370c      	adds	r7, #12
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr

0801747a <_ZN8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801747a:	b480      	push	{r7}
 801747c:	b083      	sub	sp, #12
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
 8017482:	460b      	mov	r3, r1
 8017484:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017486:	887b      	ldrh	r3, [r7, #2]
 8017488:	f647 1204 	movw	r2, #30980	; 0x7904
 801748c:	fb02 f303 	mul.w	r3, r2, r3
 8017490:	3308      	adds	r3, #8
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	4413      	add	r3, r2
    }
 8017496:	4618      	mov	r0, r3
 8017498:	370c      	adds	r7, #12
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr

080174a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10Menu_9ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80174a2:	b480      	push	{r7}
 80174a4:	b083      	sub	sp, #12
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	6078      	str	r0, [r7, #4]
 80174aa:	460b      	mov	r3, r1
 80174ac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80174ae:	887b      	ldrh	r3, [r7, #2]
 80174b0:	f647 1204 	movw	r2, #30980	; 0x7904
 80174b4:	fb02 f303 	mul.w	r3, r2, r3
 80174b8:	3308      	adds	r3, #8
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	4413      	add	r3, r2
    }
 80174be:	4618      	mov	r0, r3
 80174c0:	370c      	adds	r7, #12
 80174c2:	46bd      	mov	sp, r7
 80174c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c8:	4770      	bx	lr

080174ca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80174ca:	b480      	push	{r7}
 80174cc:	b083      	sub	sp, #12
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80174d2:	2301      	movs	r3, #1
    }
 80174d4:	4618      	mov	r0, r3
 80174d6:	370c      	adds	r7, #12
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr

080174e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80174e0:	b480      	push	{r7}
 80174e2:	b083      	sub	sp, #12
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80174e8:	2310      	movs	r3, #16
    }
 80174ea:	4618      	mov	r0, r3
 80174ec:	370c      	adds	r7, #12
 80174ee:	46bd      	mov	sp, r7
 80174f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f4:	4770      	bx	lr

080174f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80174f6:	b480      	push	{r7}
 80174f8:	b083      	sub	sp, #12
 80174fa:	af00      	add	r7, sp, #0
 80174fc:	6078      	str	r0, [r7, #4]
 80174fe:	460b      	mov	r3, r1
 8017500:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017502:	887b      	ldrh	r3, [r7, #2]
 8017504:	011b      	lsls	r3, r3, #4
 8017506:	3308      	adds	r3, #8
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	4413      	add	r3, r2
    }
 801750c:	4618      	mov	r0, r3
 801750e:	370c      	adds	r7, #12
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr

08017518 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15Menu_9PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017518:	b480      	push	{r7}
 801751a:	b083      	sub	sp, #12
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	460b      	mov	r3, r1
 8017522:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017524:	887b      	ldrh	r3, [r7, #2]
 8017526:	011b      	lsls	r3, r3, #4
 8017528:	3308      	adds	r3, #8
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	4413      	add	r3, r2
    }
 801752e:	4618      	mov	r0, r3
 8017530:	370c      	adds	r7, #12
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr

0801753a <_GLOBAL__sub_I_touchgfx_init>:
 801753a:	b580      	push	{r7, lr}
 801753c:	af00      	add	r7, sp, #0
 801753e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017542:	2001      	movs	r0, #1
 8017544:	f7ff fefc 	bl	8017340 <_Z41__static_initialization_and_destruction_0ii>
 8017548:	bd80      	pop	{r7, pc}

0801754a <_GLOBAL__sub_D_touchgfx_init>:
 801754a:	b580      	push	{r7, lr}
 801754c:	af00      	add	r7, sp, #0
 801754e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017552:	2000      	movs	r0, #0
 8017554:	f7ff fef4 	bl	8017340 <_Z41__static_initialization_and_destruction_0ii>
 8017558:	bd80      	pop	{r7, pc}
	...

0801755c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017568:	78fb      	ldrb	r3, [r7, #3]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d002      	beq.n	8017574 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 801756e:	78fb      	ldrb	r3, [r7, #3]
 8017570:	2b02      	cmp	r3, #2
 8017572:	d105      	bne.n	8017580 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	78fa      	ldrb	r2, [r7, #3]
 8017578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 801757c:	2301      	movs	r3, #1
 801757e:	e027      	b.n	80175d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017580:	78fb      	ldrb	r3, [r7, #3]
 8017582:	2b01      	cmp	r3, #1
 8017584:	d123      	bne.n	80175ce <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801758a:	2b00      	cmp	r3, #0
 801758c:	d014      	beq.n	80175b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	339c      	adds	r3, #156	; 0x9c
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	6878      	ldr	r0, [r7, #4]
 8017598:	4798      	blx	r3
 801759a:	4603      	mov	r3, r0
 801759c:	461a      	mov	r2, r3
 801759e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175a2:	429a      	cmp	r2, r3
 80175a4:	d008      	beq.n	80175b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80175a6:	4b0c      	ldr	r3, [pc, #48]	; (80175d8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80175a8:	781b      	ldrb	r3, [r3, #0]
 80175aa:	f083 0301 	eor.w	r3, r3, #1
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d001      	beq.n	80175b8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80175b4:	2301      	movs	r3, #1
 80175b6:	e000      	b.n	80175ba <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 80175b8:	2300      	movs	r3, #0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d005      	beq.n	80175ca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	78fa      	ldrb	r2, [r7, #3]
 80175c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 80175c6:	2301      	movs	r3, #1
 80175c8:	e002      	b.n	80175d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 80175ca:	2300      	movs	r3, #0
 80175cc:	e000      	b.n	80175d0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 80175ce:	2300      	movs	r3, #0
    }
 80175d0:	4618      	mov	r0, r3
 80175d2:	3708      	adds	r7, #8
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bd80      	pop	{r7, pc}
 80175d8:	2400d82a 	.word	0x2400d82a

080175dc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 80175dc:	b480      	push	{r7}
 80175de:	b083      	sub	sp, #12
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	683a      	ldr	r2, [r7, #0]
 80175ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80175ec:	bf00      	nop
 80175ee:	370c      	adds	r7, #12
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <__NVIC_EnableIRQ>:
{
 80175f8:	b480      	push	{r7}
 80175fa:	b083      	sub	sp, #12
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	4603      	mov	r3, r0
 8017600:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017606:	2b00      	cmp	r3, #0
 8017608:	db0b      	blt.n	8017622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801760a:	88fb      	ldrh	r3, [r7, #6]
 801760c:	f003 021f 	and.w	r2, r3, #31
 8017610:	4907      	ldr	r1, [pc, #28]	; (8017630 <__NVIC_EnableIRQ+0x38>)
 8017612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017616:	095b      	lsrs	r3, r3, #5
 8017618:	2001      	movs	r0, #1
 801761a:	fa00 f202 	lsl.w	r2, r0, r2
 801761e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017622:	bf00      	nop
 8017624:	370c      	adds	r7, #12
 8017626:	46bd      	mov	sp, r7
 8017628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	e000e100 	.word	0xe000e100

08017634 <__NVIC_DisableIRQ>:
{
 8017634:	b480      	push	{r7}
 8017636:	b083      	sub	sp, #12
 8017638:	af00      	add	r7, sp, #0
 801763a:	4603      	mov	r3, r0
 801763c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801763e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017642:	2b00      	cmp	r3, #0
 8017644:	db12      	blt.n	801766c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017646:	88fb      	ldrh	r3, [r7, #6]
 8017648:	f003 021f 	and.w	r2, r3, #31
 801764c:	490a      	ldr	r1, [pc, #40]	; (8017678 <__NVIC_DisableIRQ+0x44>)
 801764e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017652:	095b      	lsrs	r3, r3, #5
 8017654:	2001      	movs	r0, #1
 8017656:	fa00 f202 	lsl.w	r2, r0, r2
 801765a:	3320      	adds	r3, #32
 801765c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017660:	f3bf 8f4f 	dsb	sy
}
 8017664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017666:	f3bf 8f6f 	isb	sy
}
 801766a:	bf00      	nop
}
 801766c:	bf00      	nop
 801766e:	370c      	adds	r7, #12
 8017670:	46bd      	mov	sp, r7
 8017672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017676:	4770      	bx	lr
 8017678:	e000e100 	.word	0xe000e100

0801767c <__NVIC_SetPriority>:
{
 801767c:	b480      	push	{r7}
 801767e:	b083      	sub	sp, #12
 8017680:	af00      	add	r7, sp, #0
 8017682:	4603      	mov	r3, r0
 8017684:	6039      	str	r1, [r7, #0]
 8017686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801768c:	2b00      	cmp	r3, #0
 801768e:	db0a      	blt.n	80176a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	b2da      	uxtb	r2, r3
 8017694:	490c      	ldr	r1, [pc, #48]	; (80176c8 <__NVIC_SetPriority+0x4c>)
 8017696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801769a:	0112      	lsls	r2, r2, #4
 801769c:	b2d2      	uxtb	r2, r2
 801769e:	440b      	add	r3, r1
 80176a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80176a4:	e00a      	b.n	80176bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	b2da      	uxtb	r2, r3
 80176aa:	4908      	ldr	r1, [pc, #32]	; (80176cc <__NVIC_SetPriority+0x50>)
 80176ac:	88fb      	ldrh	r3, [r7, #6]
 80176ae:	f003 030f 	and.w	r3, r3, #15
 80176b2:	3b04      	subs	r3, #4
 80176b4:	0112      	lsls	r2, r2, #4
 80176b6:	b2d2      	uxtb	r2, r2
 80176b8:	440b      	add	r3, r1
 80176ba:	761a      	strb	r2, [r3, #24]
}
 80176bc:	bf00      	nop
 80176be:	370c      	adds	r7, #12
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr
 80176c8:	e000e100 	.word	0xe000e100
 80176cc:	e000ed00 	.word	0xe000ed00

080176d0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80176d0:	b5b0      	push	{r4, r5, r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	4618      	mov	r0, r3
 80176dc:	f002 f9a5 	bl	8019a2a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80176e0:	687d      	ldr	r5, [r7, #4]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	3364      	adds	r3, #100	; 0x64
 80176e8:	681c      	ldr	r4, [r3, #0]
 80176ea:	f006 fe69 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 80176ee:	4603      	mov	r3, r0
 80176f0:	4619      	mov	r1, r3
 80176f2:	4628      	mov	r0, r5
 80176f4:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	490b      	ldr	r1, [pc, #44]	; (8017728 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7ff ff6e 	bl	80175dc <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2101      	movs	r1, #1
 8017704:	4618      	mov	r0, r3
 8017706:	f7ff ff29 	bl	801755c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 801770a:	6878      	ldr	r0, [r7, #4]
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	3388      	adds	r3, #136	; 0x88
 8017712:	681c      	ldr	r4, [r3, #0]
 8017714:	2300      	movs	r3, #0
 8017716:	2200      	movs	r2, #0
 8017718:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 801771c:	47a0      	blx	r4
}
 801771e:	bf00      	nop
 8017720:	3708      	adds	r7, #8
 8017722:	46bd      	mov	sp, r7
 8017724:	bdb0      	pop	{r4, r5, r7, pc}
 8017726:	bf00      	nop
 8017728:	08016959 	.word	0x08016959

0801772c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017734:	2109      	movs	r1, #9
 8017736:	2058      	movs	r0, #88	; 0x58
 8017738:	f7ff ffa0 	bl	801767c <__NVIC_SetPriority>
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 801774c:	2058      	movs	r0, #88	; 0x58
 801774e:	f7ff ff53 	bl	80175f8 <__NVIC_EnableIRQ>
}
 8017752:	bf00      	nop
 8017754:	3708      	adds	r7, #8
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b082      	sub	sp, #8
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8017762:	2058      	movs	r0, #88	; 0x58
 8017764:	f7ff ff66 	bl	8017634 <__NVIC_DisableIRQ>
}
 8017768:	bf00      	nop
 801776a:	3708      	adds	r7, #8
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}

08017770 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017770:	b480      	push	{r7}
 8017772:	b083      	sub	sp, #12
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017778:	4b11      	ldr	r3, [pc, #68]	; (80177c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	b29b      	uxth	r3, r3
 801777e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017782:	b29b      	uxth	r3, r3
 8017784:	3b01      	subs	r3, #1
 8017786:	b29a      	uxth	r2, r3
 8017788:	4b0e      	ldr	r3, [pc, #56]	; (80177c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801778a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801778c:	4b0c      	ldr	r3, [pc, #48]	; (80177c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801778e:	691b      	ldr	r3, [r3, #16]
 8017790:	b29b      	uxth	r3, r3
 8017792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017796:	b29b      	uxth	r3, r3
 8017798:	3b01      	subs	r3, #1
 801779a:	b29a      	uxth	r2, r3
 801779c:	4b0a      	ldr	r3, [pc, #40]	; (80177c8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801779e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80177a0:	4b08      	ldr	r3, [pc, #32]	; (80177c4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80177a2:	881a      	ldrh	r2, [r3, #0]
 80177a4:	4b06      	ldr	r3, [pc, #24]	; (80177c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80177a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80177a8:	4b05      	ldr	r3, [pc, #20]	; (80177c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80177aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80177ac:	4a04      	ldr	r2, [pc, #16]	; (80177c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80177ae:	f043 0301 	orr.w	r3, r3, #1
 80177b2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80177b4:	bf00      	nop
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr
 80177c0:	50001000 	.word	0x50001000
 80177c4:	2400ca12 	.word	0x2400ca12
 80177c8:	2400ca14 	.word	0x2400ca14

080177cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	4618      	mov	r0, r3
 80177d8:	f002 f90e 	bl	80199f8 <_ZN8touchgfx3HAL10beginFrameEv>
 80177dc:	4603      	mov	r3, r0
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
	...

080177e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b082      	sub	sp, #8
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d002      	beq.n	8017800 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80177fa:	4b05      	ldr	r3, [pc, #20]	; (8017810 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 80177fc:	2201      	movs	r2, #1
 80177fe:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	4618      	mov	r0, r3
 8017804:	f002 f904 	bl	8019a10 <_ZN8touchgfx3HAL8endFrameEv>
}
 8017808:	bf00      	nop
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}
 8017810:	2400ca10 	.word	0x2400ca10

08017814 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017814:	b480      	push	{r7}
 8017816:	b083      	sub	sp, #12
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801781c:	4b03      	ldr	r3, [pc, #12]	; (801782c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017820:	4618      	mov	r0, r3
 8017822:	370c      	adds	r7, #12
 8017824:	46bd      	mov	sp, r7
 8017826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782a:	4770      	bx	lr
 801782c:	50001084 	.word	0x50001084

08017830 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017830:	b480      	push	{r7}
 8017832:	b083      	sub	sp, #12
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801783a:	4a06      	ldr	r2, [pc, #24]	; (8017854 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017840:	4b05      	ldr	r3, [pc, #20]	; (8017858 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017842:	2201      	movs	r2, #1
 8017844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017846:	bf00      	nop
 8017848:	370c      	adds	r7, #12
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr
 8017852:	bf00      	nop
 8017854:	50001084 	.word	0x50001084
 8017858:	50001000 	.word	0x50001000

0801785c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b086      	sub	sp, #24
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	6839      	ldr	r1, [r7, #0]
 801786a:	4618      	mov	r0, r3
 801786c:	f002 f88d 	bl	801998a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8017870:	4b25      	ldr	r3, [pc, #148]	; (8017908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8017872:	695b      	ldr	r3, [r3, #20]
 8017874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017878:	2b00      	cmp	r3, #0
 801787a:	bf14      	ite	ne
 801787c:	2301      	movne	r3, #1
 801787e:	2300      	moveq	r3, #0
 8017880:	b2db      	uxtb	r3, r3
 8017882:	2b00      	cmp	r3, #0
 8017884:	d03c      	beq.n	8017900 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8017886:	4b20      	ldr	r3, [pc, #128]	; (8017908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8017888:	2200      	movs	r2, #0
 801788a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801788e:	f3bf 8f4f 	dsb	sy
}
 8017892:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8017894:	4b1c      	ldr	r3, [pc, #112]	; (8017908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8017896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801789a:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801789c:	697b      	ldr	r3, [r7, #20]
 801789e:	0b5b      	lsrs	r3, r3, #13
 80178a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80178a4:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80178a6:	697b      	ldr	r3, [r7, #20]
 80178a8:	08db      	lsrs	r3, r3, #3
 80178aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80178ae:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	015a      	lsls	r2, r3, #5
 80178b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80178b8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80178be:	4912      	ldr	r1, [pc, #72]	; (8017908 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80178c0:	4313      	orrs	r3, r2
 80178c2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	1e5a      	subs	r2, r3, #1
 80178ca:	60fa      	str	r2, [r7, #12]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	bf14      	ite	ne
 80178d0:	2301      	movne	r3, #1
 80178d2:	2300      	moveq	r3, #0
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d000      	beq.n	80178dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 80178da:	e7e9      	b.n	80178b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	1e5a      	subs	r2, r3, #1
 80178e0:	613a      	str	r2, [r7, #16]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	bf14      	ite	ne
 80178e6:	2301      	movne	r3, #1
 80178e8:	2300      	moveq	r3, #0
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d000      	beq.n	80178f2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 80178f0:	e7d9      	b.n	80178a6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80178f2:	f3bf 8f4f 	dsb	sy
}
 80178f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80178f8:	f3bf 8f6f 	isb	sy
}
 80178fc:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80178fe:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8017900:	bf00      	nop
 8017902:	3718      	adds	r7, #24
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	e000ed00 	.word	0xe000ed00

0801790c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b084      	sub	sp, #16
 8017910:	af00      	add	r7, sp, #0
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
 8017918:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 801791a:	68f8      	ldr	r0, [r7, #12]
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	68b9      	ldr	r1, [r7, #8]
 8017922:	f002 f99c 	bl	8019c5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8017926:	4603      	mov	r3, r0
}
 8017928:	4618      	mov	r0, r3
 801792a:	3710      	adds	r7, #16
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}

08017930 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017930:	b480      	push	{r7}
 8017932:	b085      	sub	sp, #20
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017938:	4b0d      	ldr	r3, [pc, #52]	; (8017970 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801793c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801793e:	4b0c      	ldr	r3, [pc, #48]	; (8017970 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	b29b      	uxth	r3, r3
 8017944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017948:	b29b      	uxth	r3, r3
 801794a:	3301      	adds	r3, #1
 801794c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 801794e:	89fa      	ldrh	r2, [r7, #14]
 8017950:	89bb      	ldrh	r3, [r7, #12]
 8017952:	429a      	cmp	r2, r3
 8017954:	d304      	bcc.n	8017960 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8017956:	89fa      	ldrh	r2, [r7, #14]
 8017958:	89bb      	ldrh	r3, [r7, #12]
 801795a:	1ad3      	subs	r3, r2, r3
 801795c:	b29b      	uxth	r3, r3
 801795e:	e000      	b.n	8017962 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8017960:	2300      	movs	r3, #0
}
 8017962:	4618      	mov	r0, r3
 8017964:	3714      	adds	r7, #20
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr
 801796e:	bf00      	nop
 8017970:	50001000 	.word	0x50001000

08017974 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8017974:	b480      	push	{r7}
 8017976:	b087      	sub	sp, #28
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801797c:	4b26      	ldr	r3, [pc, #152]	; (8017a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 801797e:	695b      	ldr	r3, [r3, #20]
 8017980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017984:	2b00      	cmp	r3, #0
 8017986:	bf14      	ite	ne
 8017988:	2301      	movne	r3, #1
 801798a:	2300      	moveq	r3, #0
 801798c:	b2db      	uxtb	r3, r3
 801798e:	2b00      	cmp	r3, #0
 8017990:	d03c      	beq.n	8017a0c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8017992:	4b21      	ldr	r3, [pc, #132]	; (8017a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8017994:	2200      	movs	r2, #0
 8017996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801799a:	f3bf 8f4f 	dsb	sy
}
 801799e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80179a0:	4b1d      	ldr	r3, [pc, #116]	; (8017a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80179a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80179a6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80179a8:	697b      	ldr	r3, [r7, #20]
 80179aa:	0b5b      	lsrs	r3, r3, #13
 80179ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80179b0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	08db      	lsrs	r3, r3, #3
 80179b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80179ba:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	015a      	lsls	r2, r3, #5
 80179c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80179c4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80179c6:	68fa      	ldr	r2, [r7, #12]
 80179c8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80179ca:	4913      	ldr	r1, [pc, #76]	; (8017a18 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80179cc:	4313      	orrs	r3, r2
 80179ce:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	1e5a      	subs	r2, r3, #1
 80179d6:	60fa      	str	r2, [r7, #12]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	bf14      	ite	ne
 80179dc:	2301      	movne	r3, #1
 80179de:	2300      	moveq	r3, #0
 80179e0:	b2db      	uxtb	r3, r3
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d000      	beq.n	80179e8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 80179e6:	e7e9      	b.n	80179bc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	1e5a      	subs	r2, r3, #1
 80179ec:	613a      	str	r2, [r7, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	bf14      	ite	ne
 80179f2:	2301      	movne	r3, #1
 80179f4:	2300      	moveq	r3, #0
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d000      	beq.n	80179fe <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 80179fc:	e7d9      	b.n	80179b2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80179fe:	f3bf 8f4f 	dsb	sy
}
 8017a02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017a04:	f3bf 8f6f 	isb	sy
}
 8017a08:	bf00      	nop
}
 8017a0a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8017a0c:	bf00      	nop
 8017a0e:	371c      	adds	r7, #28
 8017a10:	46bd      	mov	sp, r7
 8017a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a16:	4770      	bx	lr
 8017a18:	e000ed00 	.word	0xe000ed00

08017a1c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	b087      	sub	sp, #28
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8017a24:	4b26      	ldr	r3, [pc, #152]	; (8017ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8017a26:	695b      	ldr	r3, [r3, #20]
 8017a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	bf14      	ite	ne
 8017a30:	2301      	movne	r3, #1
 8017a32:	2300      	moveq	r3, #0
 8017a34:	b2db      	uxtb	r3, r3
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d03c      	beq.n	8017ab4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8017a3a:	4b21      	ldr	r3, [pc, #132]	; (8017ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8017a42:	f3bf 8f4f 	dsb	sy
}
 8017a46:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8017a48:	4b1d      	ldr	r3, [pc, #116]	; (8017ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8017a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017a4e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8017a50:	697b      	ldr	r3, [r7, #20]
 8017a52:	0b5b      	lsrs	r3, r3, #13
 8017a54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a58:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	08db      	lsrs	r3, r3, #3
 8017a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017a62:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	015a      	lsls	r2, r3, #5
 8017a68:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017a6c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8017a6e:	68fa      	ldr	r2, [r7, #12]
 8017a70:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8017a72:	4913      	ldr	r1, [pc, #76]	; (8017ac0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8017a74:	4313      	orrs	r3, r2
 8017a76:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	1e5a      	subs	r2, r3, #1
 8017a7e:	60fa      	str	r2, [r7, #12]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	bf14      	ite	ne
 8017a84:	2301      	movne	r3, #1
 8017a86:	2300      	moveq	r3, #0
 8017a88:	b2db      	uxtb	r3, r3
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d000      	beq.n	8017a90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8017a8e:	e7e9      	b.n	8017a64 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8017a90:	693b      	ldr	r3, [r7, #16]
 8017a92:	1e5a      	subs	r2, r3, #1
 8017a94:	613a      	str	r2, [r7, #16]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	bf14      	ite	ne
 8017a9a:	2301      	movne	r3, #1
 8017a9c:	2300      	moveq	r3, #0
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d000      	beq.n	8017aa6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8017aa4:	e7d9      	b.n	8017a5a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8017aa6:	f3bf 8f4f 	dsb	sy
}
 8017aaa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017aac:	f3bf 8f6f 	isb	sy
}
 8017ab0:	bf00      	nop
}
 8017ab2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8017ab4:	bf00      	nop
 8017ab6:	371c      	adds	r7, #28
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abe:	4770      	bx	lr
 8017ac0:	e000ed00 	.word	0xe000ed00

08017ac4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017ac8:	2201      	movs	r2, #1
 8017aca:	4913      	ldr	r1, [pc, #76]	; (8017b18 <MX_USB_DEVICE_Init+0x54>)
 8017acc:	4813      	ldr	r0, [pc, #76]	; (8017b1c <MX_USB_DEVICE_Init+0x58>)
 8017ace:	f7f5 f901 	bl	800ccd4 <USBD_Init>
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d001      	beq.n	8017adc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ad8:	f7e9 fb6c 	bl	80011b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 8017adc:	4910      	ldr	r1, [pc, #64]	; (8017b20 <MX_USB_DEVICE_Init+0x5c>)
 8017ade:	480f      	ldr	r0, [pc, #60]	; (8017b1c <MX_USB_DEVICE_Init+0x58>)
 8017ae0:	f7f5 f928 	bl	800cd34 <USBD_RegisterClass>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d001      	beq.n	8017aee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017aea:	f7e9 fb63 	bl	80011b4 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 8017aee:	490d      	ldr	r1, [pc, #52]	; (8017b24 <MX_USB_DEVICE_Init+0x60>)
 8017af0:	480a      	ldr	r0, [pc, #40]	; (8017b1c <MX_USB_DEVICE_Init+0x58>)
 8017af2:	f7f4 fce9 	bl	800c4c8 <USBD_DFU_RegisterMedia>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d001      	beq.n	8017b00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017afc:	f7e9 fb5a 	bl	80011b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8017b00:	4806      	ldr	r0, [pc, #24]	; (8017b1c <MX_USB_DEVICE_Init+0x58>)
 8017b02:	f7f5 f94d 	bl	800cda0 <USBD_Start>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d001      	beq.n	8017b10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b0c:	f7e9 fb52 	bl	80011b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017b10:	f7ee fcfc 	bl	800650c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b14:	bf00      	nop
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	24000518 	.word	0x24000518
 8017b1c:	2400ca18 	.word	0x2400ca18
 8017b20:	24000014 	.word	0x24000014
 8017b24:	24000568 	.word	0x24000568

08017b28 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b28:	b480      	push	{r7}
 8017b2a:	b083      	sub	sp, #12
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	6039      	str	r1, [r7, #0]
 8017b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8017b34:	683b      	ldr	r3, [r7, #0]
 8017b36:	2212      	movs	r2, #18
 8017b38:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8017b3a:	4b03      	ldr	r3, [pc, #12]	; (8017b48 <USBD_HS_DeviceDescriptor+0x20>)
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr
 8017b48:	24000534 	.word	0x24000534

08017b4c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b4c:	b480      	push	{r7}
 8017b4e:	b083      	sub	sp, #12
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	4603      	mov	r3, r0
 8017b54:	6039      	str	r1, [r7, #0]
 8017b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	2204      	movs	r2, #4
 8017b5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017b5e:	4b03      	ldr	r3, [pc, #12]	; (8017b6c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017b60:	4618      	mov	r0, r3
 8017b62:	370c      	adds	r7, #12
 8017b64:	46bd      	mov	sp, r7
 8017b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6a:	4770      	bx	lr
 8017b6c:	24000548 	.word	0x24000548

08017b70 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	4603      	mov	r3, r0
 8017b78:	6039      	str	r1, [r7, #0]
 8017b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b7c:	79fb      	ldrb	r3, [r7, #7]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d105      	bne.n	8017b8e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017b82:	683a      	ldr	r2, [r7, #0]
 8017b84:	4907      	ldr	r1, [pc, #28]	; (8017ba4 <USBD_HS_ProductStrDescriptor+0x34>)
 8017b86:	4808      	ldr	r0, [pc, #32]	; (8017ba8 <USBD_HS_ProductStrDescriptor+0x38>)
 8017b88:	f7f6 fabe 	bl	800e108 <USBD_GetString>
 8017b8c:	e004      	b.n	8017b98 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017b8e:	683a      	ldr	r2, [r7, #0]
 8017b90:	4904      	ldr	r1, [pc, #16]	; (8017ba4 <USBD_HS_ProductStrDescriptor+0x34>)
 8017b92:	4805      	ldr	r0, [pc, #20]	; (8017ba8 <USBD_HS_ProductStrDescriptor+0x38>)
 8017b94:	f7f6 fab8 	bl	800e108 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b98:	4b02      	ldr	r3, [pc, #8]	; (8017ba4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	2400ccf4 	.word	0x2400ccf4
 8017ba8:	0802eb78 	.word	0x0802eb78

08017bac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	6039      	str	r1, [r7, #0]
 8017bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017bb8:	683a      	ldr	r2, [r7, #0]
 8017bba:	4904      	ldr	r1, [pc, #16]	; (8017bcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017bbc:	4804      	ldr	r0, [pc, #16]	; (8017bd0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017bbe:	f7f6 faa3 	bl	800e108 <USBD_GetString>
  return USBD_StrDesc;
 8017bc2:	4b02      	ldr	r3, [pc, #8]	; (8017bcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3708      	adds	r7, #8
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	2400ccf4 	.word	0x2400ccf4
 8017bd0:	0802eb98 	.word	0x0802eb98

08017bd4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	4603      	mov	r3, r0
 8017bdc:	6039      	str	r1, [r7, #0]
 8017bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	221a      	movs	r2, #26
 8017be4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017be6:	f000 f843 	bl	8017c70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017bea:	4b02      	ldr	r3, [pc, #8]	; (8017bf4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	3708      	adds	r7, #8
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}
 8017bf4:	2400054c 	.word	0x2400054c

08017bf8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b082      	sub	sp, #8
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	4603      	mov	r3, r0
 8017c00:	6039      	str	r1, [r7, #0]
 8017c02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017c04:	79fb      	ldrb	r3, [r7, #7]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d105      	bne.n	8017c16 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017c0a:	683a      	ldr	r2, [r7, #0]
 8017c0c:	4907      	ldr	r1, [pc, #28]	; (8017c2c <USBD_HS_ConfigStrDescriptor+0x34>)
 8017c0e:	4808      	ldr	r0, [pc, #32]	; (8017c30 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017c10:	f7f6 fa7a 	bl	800e108 <USBD_GetString>
 8017c14:	e004      	b.n	8017c20 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8017c16:	683a      	ldr	r2, [r7, #0]
 8017c18:	4904      	ldr	r1, [pc, #16]	; (8017c2c <USBD_HS_ConfigStrDescriptor+0x34>)
 8017c1a:	4805      	ldr	r0, [pc, #20]	; (8017c30 <USBD_HS_ConfigStrDescriptor+0x38>)
 8017c1c:	f7f6 fa74 	bl	800e108 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c20:	4b02      	ldr	r3, [pc, #8]	; (8017c2c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8017c22:	4618      	mov	r0, r3
 8017c24:	3708      	adds	r7, #8
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	2400ccf4 	.word	0x2400ccf4
 8017c30:	0802ebac 	.word	0x0802ebac

08017c34 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	6039      	str	r1, [r7, #0]
 8017c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d105      	bne.n	8017c52 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017c46:	683a      	ldr	r2, [r7, #0]
 8017c48:	4907      	ldr	r1, [pc, #28]	; (8017c68 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017c4a:	4808      	ldr	r0, [pc, #32]	; (8017c6c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017c4c:	f7f6 fa5c 	bl	800e108 <USBD_GetString>
 8017c50:	e004      	b.n	8017c5c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8017c52:	683a      	ldr	r2, [r7, #0]
 8017c54:	4904      	ldr	r1, [pc, #16]	; (8017c68 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8017c56:	4805      	ldr	r0, [pc, #20]	; (8017c6c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017c58:	f7f6 fa56 	bl	800e108 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c5c:	4b02      	ldr	r3, [pc, #8]	; (8017c68 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3708      	adds	r7, #8
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}
 8017c66:	bf00      	nop
 8017c68:	2400ccf4 	.word	0x2400ccf4
 8017c6c:	0802ebb8 	.word	0x0802ebb8

08017c70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b084      	sub	sp, #16
 8017c74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017c76:	4b0f      	ldr	r3, [pc, #60]	; (8017cb4 <Get_SerialNum+0x44>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017c7c:	4b0e      	ldr	r3, [pc, #56]	; (8017cb8 <Get_SerialNum+0x48>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017c82:	4b0e      	ldr	r3, [pc, #56]	; (8017cbc <Get_SerialNum+0x4c>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017c88:	68fa      	ldr	r2, [r7, #12]
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d009      	beq.n	8017caa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017c96:	2208      	movs	r2, #8
 8017c98:	4909      	ldr	r1, [pc, #36]	; (8017cc0 <Get_SerialNum+0x50>)
 8017c9a:	68f8      	ldr	r0, [r7, #12]
 8017c9c:	f000 f814 	bl	8017cc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017ca0:	2204      	movs	r2, #4
 8017ca2:	4908      	ldr	r1, [pc, #32]	; (8017cc4 <Get_SerialNum+0x54>)
 8017ca4:	68b8      	ldr	r0, [r7, #8]
 8017ca6:	f000 f80f 	bl	8017cc8 <IntToUnicode>
  }
}
 8017caa:	bf00      	nop
 8017cac:	3710      	adds	r7, #16
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	bd80      	pop	{r7, pc}
 8017cb2:	bf00      	nop
 8017cb4:	1ff1e800 	.word	0x1ff1e800
 8017cb8:	1ff1e804 	.word	0x1ff1e804
 8017cbc:	1ff1e808 	.word	0x1ff1e808
 8017cc0:	2400054e 	.word	0x2400054e
 8017cc4:	2400055e 	.word	0x2400055e

08017cc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017cc8:	b480      	push	{r7}
 8017cca:	b087      	sub	sp, #28
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	60f8      	str	r0, [r7, #12]
 8017cd0:	60b9      	str	r1, [r7, #8]
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017cda:	2300      	movs	r3, #0
 8017cdc:	75fb      	strb	r3, [r7, #23]
 8017cde:	e027      	b.n	8017d30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	0f1b      	lsrs	r3, r3, #28
 8017ce4:	2b09      	cmp	r3, #9
 8017ce6:	d80b      	bhi.n	8017d00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	0f1b      	lsrs	r3, r3, #28
 8017cec:	b2da      	uxtb	r2, r3
 8017cee:	7dfb      	ldrb	r3, [r7, #23]
 8017cf0:	005b      	lsls	r3, r3, #1
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	68bb      	ldr	r3, [r7, #8]
 8017cf6:	440b      	add	r3, r1
 8017cf8:	3230      	adds	r2, #48	; 0x30
 8017cfa:	b2d2      	uxtb	r2, r2
 8017cfc:	701a      	strb	r2, [r3, #0]
 8017cfe:	e00a      	b.n	8017d16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	0f1b      	lsrs	r3, r3, #28
 8017d04:	b2da      	uxtb	r2, r3
 8017d06:	7dfb      	ldrb	r3, [r7, #23]
 8017d08:	005b      	lsls	r3, r3, #1
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	68bb      	ldr	r3, [r7, #8]
 8017d0e:	440b      	add	r3, r1
 8017d10:	3237      	adds	r2, #55	; 0x37
 8017d12:	b2d2      	uxtb	r2, r2
 8017d14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	011b      	lsls	r3, r3, #4
 8017d1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017d1c:	7dfb      	ldrb	r3, [r7, #23]
 8017d1e:	005b      	lsls	r3, r3, #1
 8017d20:	3301      	adds	r3, #1
 8017d22:	68ba      	ldr	r2, [r7, #8]
 8017d24:	4413      	add	r3, r2
 8017d26:	2200      	movs	r2, #0
 8017d28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017d2a:	7dfb      	ldrb	r3, [r7, #23]
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	75fb      	strb	r3, [r7, #23]
 8017d30:	7dfa      	ldrb	r2, [r7, #23]
 8017d32:	79fb      	ldrb	r3, [r7, #7]
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d3d3      	bcc.n	8017ce0 <IntToUnicode+0x18>
  }
}
 8017d38:	bf00      	nop
 8017d3a:	bf00      	nop
 8017d3c:	371c      	adds	r7, #28
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr

08017d46 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 8017d46:	b480      	push	{r7}
 8017d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8017d4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d54:	4770      	bx	lr

08017d56 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 8017d56:	b480      	push	{r7}
 8017d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8017d5a:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr

08017d66 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 8017d66:	b480      	push	{r7}
 8017d68:	b083      	sub	sp, #12
 8017d6a:	af00      	add	r7, sp, #0
 8017d6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 8017d6e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	370c      	adds	r7, #12
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	b085      	sub	sp, #20
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	60b9      	str	r1, [r7, #8]
 8017d86:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 8017d88:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3714      	adds	r7, #20
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d94:	4770      	bx	lr

08017d96 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017d96:	b480      	push	{r7}
 8017d98:	b085      	sub	sp, #20
 8017d9a:	af00      	add	r7, sp, #0
 8017d9c:	60f8      	str	r0, [r7, #12]
 8017d9e:	60b9      	str	r1, [r7, #8]
 8017da0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 8017da2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3714      	adds	r7, #20
 8017da8:	46bd      	mov	sp, r7
 8017daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dae:	4770      	bx	lr

08017db0 <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8017db0:	b480      	push	{r7}
 8017db2:	b085      	sub	sp, #20
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	60f8      	str	r0, [r7, #12]
 8017db8:	460b      	mov	r3, r1
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 8017dbe:	7afb      	ldrb	r3, [r7, #11]
 8017dc0:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8017dc2:	bf00      	nop
  }
  return  (USBD_OK);
 8017dc4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3714      	adds	r7, #20
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd0:	4770      	bx	lr
	...

08017dd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b0b0      	sub	sp, #192	; 0xc0
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017ddc:	f107 030c 	add.w	r3, r7, #12
 8017de0:	22b4      	movs	r2, #180	; 0xb4
 8017de2:	2100      	movs	r1, #0
 8017de4:	4618      	mov	r0, r3
 8017de6:	f014 feeb 	bl	802cbc0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a18      	ldr	r2, [pc, #96]	; (8017e50 <HAL_PCD_MspInit+0x7c>)
 8017df0:	4293      	cmp	r3, r2
 8017df2:	d129      	bne.n	8017e48 <HAL_PCD_MspInit+0x74>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017df8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017dfa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8017dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017e02:	f107 030c 	add.w	r3, r7, #12
 8017e06:	4618      	mov	r0, r3
 8017e08:	f7ef fb0c 	bl	8007424 <HAL_RCCEx_PeriphCLKConfig>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d001      	beq.n	8017e16 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8017e12:	f7e9 f9cf 	bl	80011b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017e16:	f7ee fb79 	bl	800650c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017e1a:	4b0e      	ldr	r3, [pc, #56]	; (8017e54 <HAL_PCD_MspInit+0x80>)
 8017e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017e20:	4a0c      	ldr	r2, [pc, #48]	; (8017e54 <HAL_PCD_MspInit+0x80>)
 8017e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017e2a:	4b0a      	ldr	r3, [pc, #40]	; (8017e54 <HAL_PCD_MspInit+0x80>)
 8017e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017e34:	60bb      	str	r3, [r7, #8]
 8017e36:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8017e38:	2200      	movs	r2, #0
 8017e3a:	2105      	movs	r1, #5
 8017e3c:	204d      	movs	r0, #77	; 0x4d
 8017e3e:	f7ea fb31 	bl	80024a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017e42:	204d      	movs	r0, #77	; 0x4d
 8017e44:	f7ea fb48 	bl	80024d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017e48:	bf00      	nop
 8017e4a:	37c0      	adds	r7, #192	; 0xc0
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}
 8017e50:	40040000 	.word	0x40040000
 8017e54:	58024400 	.word	0x58024400

08017e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b082      	sub	sp, #8
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	4610      	mov	r0, r2
 8017e70:	f7f4 fffe 	bl	800ce70 <USBD_LL_SetupStage>
}
 8017e74:	bf00      	nop
 8017e76:	3708      	adds	r7, #8
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b082      	sub	sp, #8
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	460b      	mov	r3, r1
 8017e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017e8e:	78fa      	ldrb	r2, [r7, #3]
 8017e90:	6879      	ldr	r1, [r7, #4]
 8017e92:	4613      	mov	r3, r2
 8017e94:	00db      	lsls	r3, r3, #3
 8017e96:	4413      	add	r3, r2
 8017e98:	009b      	lsls	r3, r3, #2
 8017e9a:	440b      	add	r3, r1
 8017e9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017ea0:	681a      	ldr	r2, [r3, #0]
 8017ea2:	78fb      	ldrb	r3, [r7, #3]
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	f7f5 f838 	bl	800cf1a <USBD_LL_DataOutStage>
}
 8017eaa:	bf00      	nop
 8017eac:	3708      	adds	r7, #8
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}

08017eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
 8017eba:	460b      	mov	r3, r1
 8017ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017ec4:	78fa      	ldrb	r2, [r7, #3]
 8017ec6:	6879      	ldr	r1, [r7, #4]
 8017ec8:	4613      	mov	r3, r2
 8017eca:	00db      	lsls	r3, r3, #3
 8017ecc:	4413      	add	r3, r2
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	440b      	add	r3, r1
 8017ed2:	334c      	adds	r3, #76	; 0x4c
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	78fb      	ldrb	r3, [r7, #3]
 8017ed8:	4619      	mov	r1, r3
 8017eda:	f7f5 f8d1 	bl	800d080 <USBD_LL_DataInStage>
}
 8017ede:	bf00      	nop
 8017ee0:	3708      	adds	r7, #8
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}

08017ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ee6:	b580      	push	{r7, lr}
 8017ee8:	b082      	sub	sp, #8
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7f5 fa05 	bl	800d304 <USBD_LL_SOF>
}
 8017efa:	bf00      	nop
 8017efc:	3708      	adds	r7, #8
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd80      	pop	{r7, pc}

08017f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f02:	b580      	push	{r7, lr}
 8017f04:	b084      	sub	sp, #16
 8017f06:	af00      	add	r7, sp, #0
 8017f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	68db      	ldr	r3, [r3, #12]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d102      	bne.n	8017f1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017f16:	2300      	movs	r3, #0
 8017f18:	73fb      	strb	r3, [r7, #15]
 8017f1a:	e008      	b.n	8017f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	68db      	ldr	r3, [r3, #12]
 8017f20:	2b02      	cmp	r3, #2
 8017f22:	d102      	bne.n	8017f2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017f24:	2301      	movs	r3, #1
 8017f26:	73fb      	strb	r3, [r7, #15]
 8017f28:	e001      	b.n	8017f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017f2a:	f7e9 f943 	bl	80011b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017f34:	7bfa      	ldrb	r2, [r7, #15]
 8017f36:	4611      	mov	r1, r2
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7f5 f9a5 	bl	800d288 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7f5 f94d 	bl	800d1e4 <USBD_LL_Reset>
}
 8017f4a:	bf00      	nop
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
	...

08017f54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f5 f9a0 	bl	800d2a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	6812      	ldr	r2, [r2, #0]
 8017f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017f7a:	f043 0301 	orr.w	r3, r3, #1
 8017f7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6a1b      	ldr	r3, [r3, #32]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d005      	beq.n	8017f94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f88:	4b04      	ldr	r3, [pc, #16]	; (8017f9c <HAL_PCD_SuspendCallback+0x48>)
 8017f8a:	691b      	ldr	r3, [r3, #16]
 8017f8c:	4a03      	ldr	r2, [pc, #12]	; (8017f9c <HAL_PCD_SuspendCallback+0x48>)
 8017f8e:	f043 0306 	orr.w	r3, r3, #6
 8017f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017f94:	bf00      	nop
 8017f96:	3708      	adds	r7, #8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	e000ed00 	.word	0xe000ed00

08017fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7f5 f990 	bl	800d2d4 <USBD_LL_Resume>
}
 8017fb4:	bf00      	nop
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b082      	sub	sp, #8
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
 8017fc4:	460b      	mov	r3, r1
 8017fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017fce:	78fa      	ldrb	r2, [r7, #3]
 8017fd0:	4611      	mov	r1, r2
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7f5 f9e8 	bl	800d3a8 <USBD_LL_IsoOUTIncomplete>
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	460b      	mov	r3, r1
 8017fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ff2:	78fa      	ldrb	r2, [r7, #3]
 8017ff4:	4611      	mov	r1, r2
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f5 f9a4 	bl	800d344 <USBD_LL_IsoINIncomplete>
}
 8017ffc:	bf00      	nop
 8017ffe:	3708      	adds	r7, #8
 8018000:	46bd      	mov	sp, r7
 8018002:	bd80      	pop	{r7, pc}

08018004 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b082      	sub	sp, #8
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018012:	4618      	mov	r0, r3
 8018014:	f7f5 f9fa 	bl	800d40c <USBD_LL_DevConnected>
}
 8018018:	bf00      	nop
 801801a:	3708      	adds	r7, #8
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b082      	sub	sp, #8
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801802e:	4618      	mov	r0, r3
 8018030:	f7f5 f9f7 	bl	800d422 <USBD_LL_DevDisconnected>
}
 8018034:	bf00      	nop
 8018036:	3708      	adds	r7, #8
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}

0801803c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	2b01      	cmp	r3, #1
 801804a:	d140      	bne.n	80180ce <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801804c:	4a22      	ldr	r2, [pc, #136]	; (80180d8 <USBD_LL_Init+0x9c>)
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	4a20      	ldr	r2, [pc, #128]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018058:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801805c:	4b1e      	ldr	r3, [pc, #120]	; (80180d8 <USBD_LL_Init+0x9c>)
 801805e:	4a1f      	ldr	r2, [pc, #124]	; (80180dc <USBD_LL_Init+0xa0>)
 8018060:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8018062:	4b1d      	ldr	r3, [pc, #116]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018064:	2209      	movs	r2, #9
 8018066:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8018068:	4b1b      	ldr	r3, [pc, #108]	; (80180d8 <USBD_LL_Init+0x9c>)
 801806a:	2202      	movs	r2, #2
 801806c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801806e:	4b1a      	ldr	r3, [pc, #104]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018070:	2200      	movs	r2, #0
 8018072:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018074:	4b18      	ldr	r3, [pc, #96]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018076:	2202      	movs	r2, #2
 8018078:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801807a:	4b17      	ldr	r3, [pc, #92]	; (80180d8 <USBD_LL_Init+0x9c>)
 801807c:	2200      	movs	r2, #0
 801807e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8018080:	4b15      	ldr	r3, [pc, #84]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018082:	2200      	movs	r2, #0
 8018084:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8018086:	4b14      	ldr	r3, [pc, #80]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018088:	2200      	movs	r2, #0
 801808a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801808c:	4b12      	ldr	r3, [pc, #72]	; (80180d8 <USBD_LL_Init+0x9c>)
 801808e:	2200      	movs	r2, #0
 8018090:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8018092:	4b11      	ldr	r3, [pc, #68]	; (80180d8 <USBD_LL_Init+0x9c>)
 8018094:	2200      	movs	r2, #0
 8018096:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018098:	4b0f      	ldr	r3, [pc, #60]	; (80180d8 <USBD_LL_Init+0x9c>)
 801809a:	2200      	movs	r2, #0
 801809c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801809e:	480e      	ldr	r0, [pc, #56]	; (80180d8 <USBD_LL_Init+0x9c>)
 80180a0:	f7ec ff4e 	bl	8004f40 <HAL_PCD_Init>
 80180a4:	4603      	mov	r3, r0
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d001      	beq.n	80180ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80180aa:	f7e9 f883 	bl	80011b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80180ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80180b2:	4809      	ldr	r0, [pc, #36]	; (80180d8 <USBD_LL_Init+0x9c>)
 80180b4:	f7ee f9af 	bl	8006416 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80180b8:	2280      	movs	r2, #128	; 0x80
 80180ba:	2100      	movs	r1, #0
 80180bc:	4806      	ldr	r0, [pc, #24]	; (80180d8 <USBD_LL_Init+0x9c>)
 80180be:	f7ee f963 	bl	8006388 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80180c2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80180c6:	2101      	movs	r1, #1
 80180c8:	4803      	ldr	r0, [pc, #12]	; (80180d8 <USBD_LL_Init+0x9c>)
 80180ca:	f7ee f95d 	bl	8006388 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80180ce:	2300      	movs	r3, #0
}
 80180d0:	4618      	mov	r0, r3
 80180d2:	3708      	adds	r7, #8
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	2400cef4 	.word	0x2400cef4
 80180dc:	40040000 	.word	0x40040000

080180e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b084      	sub	sp, #16
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180e8:	2300      	movs	r3, #0
 80180ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180ec:	2300      	movs	r3, #0
 80180ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7ed f846 	bl	8005188 <HAL_PCD_Start>
 80180fc:	4603      	mov	r3, r0
 80180fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018100:	7bfb      	ldrb	r3, [r7, #15]
 8018102:	4618      	mov	r0, r3
 8018104:	f000 f92c 	bl	8018360 <USBD_Get_USB_Status>
 8018108:	4603      	mov	r3, r0
 801810a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801810c:	7bbb      	ldrb	r3, [r7, #14]
}
 801810e:	4618      	mov	r0, r3
 8018110:	3710      	adds	r7, #16
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}

08018116 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8018116:	b580      	push	{r7, lr}
 8018118:	b084      	sub	sp, #16
 801811a:	af00      	add	r7, sp, #0
 801811c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801811e:	2300      	movs	r3, #0
 8018120:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018122:	2300      	movs	r3, #0
 8018124:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801812c:	4618      	mov	r0, r3
 801812e:	f7ed f85e 	bl	80051ee <HAL_PCD_Stop>
 8018132:	4603      	mov	r3, r0
 8018134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018136:	7bfb      	ldrb	r3, [r7, #15]
 8018138:	4618      	mov	r0, r3
 801813a:	f000 f911 	bl	8018360 <USBD_Get_USB_Status>
 801813e:	4603      	mov	r3, r0
 8018140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018142:	7bbb      	ldrb	r3, [r7, #14]
}
 8018144:	4618      	mov	r0, r3
 8018146:	3710      	adds	r7, #16
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b084      	sub	sp, #16
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
 8018154:	4608      	mov	r0, r1
 8018156:	4611      	mov	r1, r2
 8018158:	461a      	mov	r2, r3
 801815a:	4603      	mov	r3, r0
 801815c:	70fb      	strb	r3, [r7, #3]
 801815e:	460b      	mov	r3, r1
 8018160:	70bb      	strb	r3, [r7, #2]
 8018162:	4613      	mov	r3, r2
 8018164:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018166:	2300      	movs	r3, #0
 8018168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801816a:	2300      	movs	r3, #0
 801816c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018174:	78bb      	ldrb	r3, [r7, #2]
 8018176:	883a      	ldrh	r2, [r7, #0]
 8018178:	78f9      	ldrb	r1, [r7, #3]
 801817a:	f7ed fd62 	bl	8005c42 <HAL_PCD_EP_Open>
 801817e:	4603      	mov	r3, r0
 8018180:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018182:	7bfb      	ldrb	r3, [r7, #15]
 8018184:	4618      	mov	r0, r3
 8018186:	f000 f8eb 	bl	8018360 <USBD_Get_USB_Status>
 801818a:	4603      	mov	r3, r0
 801818c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801818e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018190:	4618      	mov	r0, r3
 8018192:	3710      	adds	r7, #16
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b084      	sub	sp, #16
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
 80181a0:	460b      	mov	r3, r1
 80181a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181a4:	2300      	movs	r3, #0
 80181a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181a8:	2300      	movs	r3, #0
 80181aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80181b2:	78fa      	ldrb	r2, [r7, #3]
 80181b4:	4611      	mov	r1, r2
 80181b6:	4618      	mov	r0, r3
 80181b8:	f7ed fe40 	bl	8005e3c <HAL_PCD_EP_SetStall>
 80181bc:	4603      	mov	r3, r0
 80181be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181c0:	7bfb      	ldrb	r3, [r7, #15]
 80181c2:	4618      	mov	r0, r3
 80181c4:	f000 f8cc 	bl	8018360 <USBD_Get_USB_Status>
 80181c8:	4603      	mov	r3, r0
 80181ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80181cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}

080181d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181d6:	b580      	push	{r7, lr}
 80181d8:	b084      	sub	sp, #16
 80181da:	af00      	add	r7, sp, #0
 80181dc:	6078      	str	r0, [r7, #4]
 80181de:	460b      	mov	r3, r1
 80181e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181e2:	2300      	movs	r3, #0
 80181e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181e6:	2300      	movs	r3, #0
 80181e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80181f0:	78fa      	ldrb	r2, [r7, #3]
 80181f2:	4611      	mov	r1, r2
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7ed fe85 	bl	8005f04 <HAL_PCD_EP_ClrStall>
 80181fa:	4603      	mov	r3, r0
 80181fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181fe:	7bfb      	ldrb	r3, [r7, #15]
 8018200:	4618      	mov	r0, r3
 8018202:	f000 f8ad 	bl	8018360 <USBD_Get_USB_Status>
 8018206:	4603      	mov	r3, r0
 8018208:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801820a:	7bbb      	ldrb	r3, [r7, #14]
}
 801820c:	4618      	mov	r0, r3
 801820e:	3710      	adds	r7, #16
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	460b      	mov	r3, r1
 801821e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018226:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801822c:	2b00      	cmp	r3, #0
 801822e:	da0b      	bge.n	8018248 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018230:	78fb      	ldrb	r3, [r7, #3]
 8018232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018236:	68f9      	ldr	r1, [r7, #12]
 8018238:	4613      	mov	r3, r2
 801823a:	00db      	lsls	r3, r3, #3
 801823c:	4413      	add	r3, r2
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	440b      	add	r3, r1
 8018242:	333e      	adds	r3, #62	; 0x3e
 8018244:	781b      	ldrb	r3, [r3, #0]
 8018246:	e00b      	b.n	8018260 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018248:	78fb      	ldrb	r3, [r7, #3]
 801824a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801824e:	68f9      	ldr	r1, [r7, #12]
 8018250:	4613      	mov	r3, r2
 8018252:	00db      	lsls	r3, r3, #3
 8018254:	4413      	add	r3, r2
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	440b      	add	r3, r1
 801825a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801825e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018260:	4618      	mov	r0, r3
 8018262:	3714      	adds	r7, #20
 8018264:	46bd      	mov	sp, r7
 8018266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826a:	4770      	bx	lr

0801826c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	460b      	mov	r3, r1
 8018276:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018278:	2300      	movs	r3, #0
 801827a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801827c:	2300      	movs	r3, #0
 801827e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018286:	78fa      	ldrb	r2, [r7, #3]
 8018288:	4611      	mov	r1, r2
 801828a:	4618      	mov	r0, r3
 801828c:	f7ed fcb4 	bl	8005bf8 <HAL_PCD_SetAddress>
 8018290:	4603      	mov	r3, r0
 8018292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018294:	7bfb      	ldrb	r3, [r7, #15]
 8018296:	4618      	mov	r0, r3
 8018298:	f000 f862 	bl	8018360 <USBD_Get_USB_Status>
 801829c:	4603      	mov	r3, r0
 801829e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80182a2:	4618      	mov	r0, r3
 80182a4:	3710      	adds	r7, #16
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}

080182aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182aa:	b580      	push	{r7, lr}
 80182ac:	b086      	sub	sp, #24
 80182ae:	af00      	add	r7, sp, #0
 80182b0:	60f8      	str	r0, [r7, #12]
 80182b2:	607a      	str	r2, [r7, #4]
 80182b4:	603b      	str	r3, [r7, #0]
 80182b6:	460b      	mov	r3, r1
 80182b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182ba:	2300      	movs	r3, #0
 80182bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182be:	2300      	movs	r3, #0
 80182c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80182c8:	7af9      	ldrb	r1, [r7, #11]
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	f7ed fd6b 	bl	8005da8 <HAL_PCD_EP_Transmit>
 80182d2:	4603      	mov	r3, r0
 80182d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182d6:	7dfb      	ldrb	r3, [r7, #23]
 80182d8:	4618      	mov	r0, r3
 80182da:	f000 f841 	bl	8018360 <USBD_Get_USB_Status>
 80182de:	4603      	mov	r3, r0
 80182e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80182e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	3718      	adds	r7, #24
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}

080182ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b086      	sub	sp, #24
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	607a      	str	r2, [r7, #4]
 80182f6:	603b      	str	r3, [r7, #0]
 80182f8:	460b      	mov	r3, r1
 80182fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182fc:	2300      	movs	r3, #0
 80182fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018300:	2300      	movs	r3, #0
 8018302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801830a:	7af9      	ldrb	r1, [r7, #11]
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	f7ed fcff 	bl	8005d12 <HAL_PCD_EP_Receive>
 8018314:	4603      	mov	r3, r0
 8018316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018318:	7dfb      	ldrb	r3, [r7, #23]
 801831a:	4618      	mov	r0, r3
 801831c:	f000 f820 	bl	8018360 <USBD_Get_USB_Status>
 8018320:	4603      	mov	r3, r0
 8018322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018324:	7dbb      	ldrb	r3, [r7, #22]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3718      	adds	r7, #24
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
	...

08018330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018330:	b480      	push	{r7}
 8018332:	b083      	sub	sp, #12
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018338:	4b03      	ldr	r3, [pc, #12]	; (8018348 <USBD_static_malloc+0x18>)
}
 801833a:	4618      	mov	r0, r3
 801833c:	370c      	adds	r7, #12
 801833e:	46bd      	mov	sp, r7
 8018340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop
 8018348:	2400d400 	.word	0x2400d400

0801834c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801834c:	b480      	push	{r7}
 801834e:	b083      	sub	sp, #12
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]

}
 8018354:	bf00      	nop
 8018356:	370c      	adds	r7, #12
 8018358:	46bd      	mov	sp, r7
 801835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835e:	4770      	bx	lr

08018360 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018360:	b480      	push	{r7}
 8018362:	b085      	sub	sp, #20
 8018364:	af00      	add	r7, sp, #0
 8018366:	4603      	mov	r3, r0
 8018368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801836a:	2300      	movs	r3, #0
 801836c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801836e:	79fb      	ldrb	r3, [r7, #7]
 8018370:	2b03      	cmp	r3, #3
 8018372:	d817      	bhi.n	80183a4 <USBD_Get_USB_Status+0x44>
 8018374:	a201      	add	r2, pc, #4	; (adr r2, 801837c <USBD_Get_USB_Status+0x1c>)
 8018376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801837a:	bf00      	nop
 801837c:	0801838d 	.word	0x0801838d
 8018380:	08018393 	.word	0x08018393
 8018384:	08018399 	.word	0x08018399
 8018388:	0801839f 	.word	0x0801839f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801838c:	2300      	movs	r3, #0
 801838e:	73fb      	strb	r3, [r7, #15]
    break;
 8018390:	e00b      	b.n	80183aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018392:	2303      	movs	r3, #3
 8018394:	73fb      	strb	r3, [r7, #15]
    break;
 8018396:	e008      	b.n	80183aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018398:	2301      	movs	r3, #1
 801839a:	73fb      	strb	r3, [r7, #15]
    break;
 801839c:	e005      	b.n	80183aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801839e:	2303      	movs	r3, #3
 80183a0:	73fb      	strb	r3, [r7, #15]
    break;
 80183a2:	e002      	b.n	80183aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80183a4:	2303      	movs	r3, #3
 80183a6:	73fb      	strb	r3, [r7, #15]
    break;
 80183a8:	bf00      	nop
  }
  return usb_status;
 80183aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3714      	adds	r7, #20
 80183b0:	46bd      	mov	sp, r7
 80183b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b6:	4770      	bx	lr

080183b8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80183b8:	8880      	ldrh	r0, [r0, #4]
 80183ba:	4770      	bx	lr

080183bc <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80183bc:	b570      	push	{r4, r5, r6, lr}
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	460c      	mov	r4, r1
 80183c2:	2100      	movs	r1, #0
 80183c4:	4605      	mov	r5, r0
 80183c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183c8:	4798      	blx	r3
 80183ca:	4606      	mov	r6, r0
 80183cc:	682b      	ldr	r3, [r5, #0]
 80183ce:	4628      	mov	r0, r5
 80183d0:	1ba4      	subs	r4, r4, r6
 80183d2:	6a1b      	ldr	r3, [r3, #32]
 80183d4:	b2a4      	uxth	r4, r4
 80183d6:	4798      	blx	r3
 80183d8:	fbb4 f0f0 	udiv	r0, r4, r0
 80183dc:	bd70      	pop	{r4, r5, r6, pc}

080183de <_ZN8touchgfx17AbstractPartition5clearEv>:
 80183de:	2300      	movs	r3, #0
 80183e0:	8083      	strh	r3, [r0, #4]
 80183e2:	4770      	bx	lr

080183e4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80183e4:	b510      	push	{r4, lr}
 80183e6:	6803      	ldr	r3, [r0, #0]
 80183e8:	4604      	mov	r4, r0
 80183ea:	8881      	ldrh	r1, [r0, #4]
 80183ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183ee:	4798      	blx	r3
 80183f0:	88a3      	ldrh	r3, [r4, #4]
 80183f2:	3301      	adds	r3, #1
 80183f4:	80a3      	strh	r3, [r4, #4]
 80183f6:	bd10      	pop	{r4, pc}

080183f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80183f8:	6803      	ldr	r3, [r0, #0]
 80183fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183fc:	4718      	bx	r3

080183fe <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80183fe:	4770      	bx	lr

08018400 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018400:	4a02      	ldr	r2, [pc, #8]	; (801840c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018402:	6002      	str	r2, [r0, #0]
 8018404:	2200      	movs	r2, #0
 8018406:	8082      	strh	r2, [r0, #4]
 8018408:	4770      	bx	lr
 801840a:	bf00      	nop
 801840c:	0802fe74 	.word	0x0802fe74

08018410 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8018410:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018412:	2000      	movs	r0, #0
 8018414:	b12b      	cbz	r3, 8018422 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018416:	b920      	cbnz	r0, 8018422 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8018418:	1a5a      	subs	r2, r3, r1
 801841a:	699b      	ldr	r3, [r3, #24]
 801841c:	4250      	negs	r0, r2
 801841e:	4150      	adcs	r0, r2
 8018420:	e7f8      	b.n	8018414 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8018422:	4770      	bx	lr

08018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018424:	2300      	movs	r3, #0
 8018426:	6148      	str	r0, [r1, #20]
 8018428:	618b      	str	r3, [r1, #24]
 801842a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801842c:	b913      	cbnz	r3, 8018434 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801842e:	6281      	str	r1, [r0, #40]	; 0x28
 8018430:	4770      	bx	lr
 8018432:	4613      	mov	r3, r2
 8018434:	699a      	ldr	r2, [r3, #24]
 8018436:	2a00      	cmp	r2, #0
 8018438:	d1fb      	bne.n	8018432 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801843a:	6199      	str	r1, [r3, #24]
 801843c:	4770      	bx	lr

0801843e <_ZN8touchgfx9Container9removeAllEv>:
 801843e:	2200      	movs	r2, #0
 8018440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018442:	b123      	cbz	r3, 801844e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018444:	6999      	ldr	r1, [r3, #24]
 8018446:	6281      	str	r1, [r0, #40]	; 0x28
 8018448:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801844c:	e7f8      	b.n	8018440 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801844e:	4770      	bx	lr

08018450 <_ZN8touchgfx9Container6unlinkEv>:
 8018450:	2300      	movs	r3, #0
 8018452:	6283      	str	r3, [r0, #40]	; 0x28
 8018454:	4770      	bx	lr

08018456 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018456:	2200      	movs	r2, #0
 8018458:	8002      	strh	r2, [r0, #0]
 801845a:	8042      	strh	r2, [r0, #2]
 801845c:	8082      	strh	r2, [r0, #4]
 801845e:	80c2      	strh	r2, [r0, #6]
 8018460:	4770      	bx	lr

08018462 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8018462:	b570      	push	{r4, r5, r6, lr}
 8018464:	460d      	mov	r5, r1
 8018466:	4616      	mov	r6, r2
 8018468:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801846a:	b13c      	cbz	r4, 801847c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801846c:	6823      	ldr	r3, [r4, #0]
 801846e:	4620      	mov	r0, r4
 8018470:	4632      	mov	r2, r6
 8018472:	4629      	mov	r1, r5
 8018474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018476:	4798      	blx	r3
 8018478:	69a4      	ldr	r4, [r4, #24]
 801847a:	e7f6      	b.n	801846a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801847c:	bd70      	pop	{r4, r5, r6, pc}

0801847e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801847e:	b538      	push	{r3, r4, r5, lr}
 8018480:	460d      	mov	r5, r1
 8018482:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018484:	b134      	cbz	r4, 8018494 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018486:	682b      	ldr	r3, [r5, #0]
 8018488:	4621      	mov	r1, r4
 801848a:	4628      	mov	r0, r5
 801848c:	689b      	ldr	r3, [r3, #8]
 801848e:	4798      	blx	r3
 8018490:	69a4      	ldr	r4, [r4, #24]
 8018492:	e7f7      	b.n	8018484 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018494:	bd38      	pop	{r3, r4, r5, pc}

08018496 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8018496:	b510      	push	{r4, lr}
 8018498:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801849a:	b12c      	cbz	r4, 80184a8 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 801849c:	6823      	ldr	r3, [r4, #0]
 801849e:	4620      	mov	r0, r4
 80184a0:	699b      	ldr	r3, [r3, #24]
 80184a2:	4798      	blx	r3
 80184a4:	69a4      	ldr	r4, [r4, #24]
 80184a6:	e7f8      	b.n	801849a <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 80184a8:	bd10      	pop	{r4, pc}

080184aa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80184aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80184ac:	b19b      	cbz	r3, 80184d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80184ae:	428b      	cmp	r3, r1
 80184b0:	d109      	bne.n	80184c6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80184b2:	699a      	ldr	r2, [r3, #24]
 80184b4:	2100      	movs	r1, #0
 80184b6:	6159      	str	r1, [r3, #20]
 80184b8:	6282      	str	r2, [r0, #40]	; 0x28
 80184ba:	b902      	cbnz	r2, 80184be <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80184bc:	4770      	bx	lr
 80184be:	6199      	str	r1, [r3, #24]
 80184c0:	4770      	bx	lr
 80184c2:	4613      	mov	r3, r2
 80184c4:	b13a      	cbz	r2, 80184d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80184c6:	699a      	ldr	r2, [r3, #24]
 80184c8:	428a      	cmp	r2, r1
 80184ca:	d1fa      	bne.n	80184c2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80184cc:	698a      	ldr	r2, [r1, #24]
 80184ce:	619a      	str	r2, [r3, #24]
 80184d0:	2300      	movs	r3, #0
 80184d2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80184d6:	4770      	bx	lr

080184d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80184d8:	b410      	push	{r4}
 80184da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80184dc:	4604      	mov	r4, r0
 80184de:	b92b      	cbnz	r3, 80184ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80184e0:	6803      	ldr	r3, [r0, #0]
 80184e2:	4611      	mov	r1, r2
 80184e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80184ea:	4718      	bx	r3
 80184ec:	b941      	cbnz	r1, 8018500 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80184ee:	6193      	str	r3, [r2, #24]
 80184f0:	6282      	str	r2, [r0, #40]	; 0x28
 80184f2:	6154      	str	r4, [r2, #20]
 80184f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184f8:	4770      	bx	lr
 80184fa:	4603      	mov	r3, r0
 80184fc:	2800      	cmp	r0, #0
 80184fe:	d0f9      	beq.n	80184f4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8018500:	4299      	cmp	r1, r3
 8018502:	6998      	ldr	r0, [r3, #24]
 8018504:	d1f9      	bne.n	80184fa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8018506:	6190      	str	r0, [r2, #24]
 8018508:	618a      	str	r2, [r1, #24]
 801850a:	e7f2      	b.n	80184f2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801850c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018510:	461f      	mov	r7, r3
 8018512:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8018516:	460d      	mov	r5, r1
 8018518:	4616      	mov	r6, r2
 801851a:	b103      	cbz	r3, 801851e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801851c:	6038      	str	r0, [r7, #0]
 801851e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018520:	b314      	cbz	r4, 8018568 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018522:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018526:	b1eb      	cbz	r3, 8018564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018528:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801852c:	428d      	cmp	r5, r1
 801852e:	db19      	blt.n	8018564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018530:	b289      	uxth	r1, r1
 8018532:	8923      	ldrh	r3, [r4, #8]
 8018534:	440b      	add	r3, r1
 8018536:	b21b      	sxth	r3, r3
 8018538:	429d      	cmp	r5, r3
 801853a:	da13      	bge.n	8018564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801853c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018540:	4296      	cmp	r6, r2
 8018542:	db0f      	blt.n	8018564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018544:	b292      	uxth	r2, r2
 8018546:	8963      	ldrh	r3, [r4, #10]
 8018548:	4413      	add	r3, r2
 801854a:	b21b      	sxth	r3, r3
 801854c:	429e      	cmp	r6, r3
 801854e:	da09      	bge.n	8018564 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018550:	6823      	ldr	r3, [r4, #0]
 8018552:	1ab2      	subs	r2, r6, r2
 8018554:	1a69      	subs	r1, r5, r1
 8018556:	4620      	mov	r0, r4
 8018558:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 801855c:	b212      	sxth	r2, r2
 801855e:	463b      	mov	r3, r7
 8018560:	b209      	sxth	r1, r1
 8018562:	47c0      	blx	r8
 8018564:	69a4      	ldr	r4, [r4, #24]
 8018566:	e7db      	b.n	8018520 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801856c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 801856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018570:	4c6d      	ldr	r4, [pc, #436]	; (8018728 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8018572:	b0a1      	sub	sp, #132	; 0x84
 8018574:	4606      	mov	r6, r0
 8018576:	6824      	ldr	r4, [r4, #0]
 8018578:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801857a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 801857e:	2400      	movs	r4, #0
 8018580:	9303      	str	r3, [sp, #12]
 8018582:	802c      	strh	r4, [r5, #0]
 8018584:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8018586:	802c      	strh	r4, [r5, #0]
 8018588:	601c      	str	r4, [r3, #0]
 801858a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801858e:	f7ff ffbd 	bl	801850c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018592:	f1b9 0f03 	cmp.w	r9, #3
 8018596:	f340 80c1 	ble.w	801871c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801859a:	4631      	mov	r1, r6
 801859c:	a80c      	add	r0, sp, #48	; 0x30
 801859e:	f006 ff7f 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80185a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80185a6:	9306      	str	r3, [sp, #24]
 80185a8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80185ac:	9307      	str	r3, [sp, #28]
 80185ae:	9b03      	ldr	r3, [sp, #12]
 80185b0:	f8d3 a000 	ldr.w	sl, [r3]
 80185b4:	f1ba 0f00 	cmp.w	sl, #0
 80185b8:	f000 80b3 	beq.w	8018722 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80185bc:	4651      	mov	r1, sl
 80185be:	a810      	add	r0, sp, #64	; 0x40
 80185c0:	f006 ff6e 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80185c4:	2002      	movs	r0, #2
 80185c6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80185ca:	9b01      	ldr	r3, [sp, #4]
 80185cc:	9a06      	ldr	r2, [sp, #24]
 80185ce:	fb91 f1f0 	sdiv	r1, r1, r0
 80185d2:	189d      	adds	r5, r3, r2
 80185d4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80185d8:	9a07      	ldr	r2, [sp, #28]
 80185da:	4419      	add	r1, r3
 80185dc:	9b02      	ldr	r3, [sp, #8]
 80185de:	4413      	add	r3, r2
 80185e0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80185e4:	1a6d      	subs	r5, r5, r1
 80185e6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80185ea:	fb92 f2f0 	sdiv	r2, r2, r0
 80185ee:	440a      	add	r2, r1
 80185f0:	1a9b      	subs	r3, r3, r2
 80185f2:	435b      	muls	r3, r3
 80185f4:	fb05 3505 	mla	r5, r5, r5, r3
 80185f8:	4f4c      	ldr	r7, [pc, #304]	; (801872c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80185fa:	ac10      	add	r4, sp, #64	; 0x40
 80185fc:	f1b9 0f0c 	cmp.w	r9, #12
 8018600:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018604:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018608:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801860a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801860c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018614:	f04f 0303 	mov.w	r3, #3
 8018618:	bfd8      	it	le
 801861a:	f109 32ff 	addle.w	r2, r9, #4294967295
 801861e:	f04f 0400 	mov.w	r4, #0
 8018622:	f8cd 9000 	str.w	r9, [sp]
 8018626:	bfcc      	ite	gt
 8018628:	4698      	movgt	r8, r3
 801862a:	fb92 f8f3 	sdivle	r8, r2, r3
 801862e:	1c63      	adds	r3, r4, #1
 8018630:	aa10      	add	r2, sp, #64	; 0x40
 8018632:	f004 0401 	and.w	r4, r4, #1
 8018636:	f04f 0b00 	mov.w	fp, #0
 801863a:	9308      	str	r3, [sp, #32]
 801863c:	9b00      	ldr	r3, [sp, #0]
 801863e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8018642:	fb93 f3f8 	sdiv	r3, r3, r8
 8018646:	3404      	adds	r4, #4
 8018648:	b29b      	uxth	r3, r3
 801864a:	9304      	str	r3, [sp, #16]
 801864c:	9a04      	ldr	r2, [sp, #16]
 801864e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018652:	fb13 f302 	smulbb	r3, r3, r2
 8018656:	9a01      	ldr	r2, [sp, #4]
 8018658:	b29b      	uxth	r3, r3
 801865a:	1899      	adds	r1, r3, r2
 801865c:	9305      	str	r3, [sp, #20]
 801865e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018662:	b209      	sxth	r1, r1
 8018664:	4299      	cmp	r1, r3
 8018666:	db4d      	blt.n	8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018668:	8932      	ldrh	r2, [r6, #8]
 801866a:	4413      	add	r3, r2
 801866c:	b21b      	sxth	r3, r3
 801866e:	4299      	cmp	r1, r3
 8018670:	da48      	bge.n	8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018672:	9b04      	ldr	r3, [sp, #16]
 8018674:	6827      	ldr	r7, [r4, #0]
 8018676:	fb17 f703 	smulbb	r7, r7, r3
 801867a:	9b02      	ldr	r3, [sp, #8]
 801867c:	b2bf      	uxth	r7, r7
 801867e:	18fa      	adds	r2, r7, r3
 8018680:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018684:	b212      	sxth	r2, r2
 8018686:	429a      	cmp	r2, r3
 8018688:	db3c      	blt.n	8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801868a:	8970      	ldrh	r0, [r6, #10]
 801868c:	4403      	add	r3, r0
 801868e:	b21b      	sxth	r3, r3
 8018690:	429a      	cmp	r2, r3
 8018692:	da37      	bge.n	8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018694:	2300      	movs	r3, #0
 8018696:	4630      	mov	r0, r6
 8018698:	930b      	str	r3, [sp, #44]	; 0x2c
 801869a:	ab0b      	add	r3, sp, #44	; 0x2c
 801869c:	f7ff ff36 	bl	801850c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80186a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80186a2:	b37a      	cbz	r2, 8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80186a4:	4552      	cmp	r2, sl
 80186a6:	d02d      	beq.n	8018704 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80186a8:	4611      	mov	r1, r2
 80186aa:	a80e      	add	r0, sp, #56	; 0x38
 80186ac:	9209      	str	r2, [sp, #36]	; 0x24
 80186ae:	f006 fef7 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186b2:	f04f 0e02 	mov.w	lr, #2
 80186b6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80186ba:	9a06      	ldr	r2, [sp, #24]
 80186bc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80186c0:	9b01      	ldr	r3, [sp, #4]
 80186c2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80186c6:	4413      	add	r3, r2
 80186c8:	9a07      	ldr	r2, [sp, #28]
 80186ca:	fb91 f1fe 	sdiv	r1, r1, lr
 80186ce:	fb9c fcfe 	sdiv	ip, ip, lr
 80186d2:	4401      	add	r1, r0
 80186d4:	1a58      	subs	r0, r3, r1
 80186d6:	9b02      	ldr	r3, [sp, #8]
 80186d8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80186dc:	4413      	add	r3, r2
 80186de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186e0:	448c      	add	ip, r1
 80186e2:	eba3 030c 	sub.w	r3, r3, ip
 80186e6:	435b      	muls	r3, r3
 80186e8:	fb00 3300 	mla	r3, r0, r0, r3
 80186ec:	42ab      	cmp	r3, r5
 80186ee:	d208      	bcs.n	8018702 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80186f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80186f2:	461d      	mov	r5, r3
 80186f4:	9803      	ldr	r0, [sp, #12]
 80186f6:	6001      	str	r1, [r0, #0]
 80186f8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80186fa:	9805      	ldr	r0, [sp, #20]
 80186fc:	8008      	strh	r0, [r1, #0]
 80186fe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018700:	800f      	strh	r7, [r1, #0]
 8018702:	4692      	mov	sl, r2
 8018704:	f10b 0b01 	add.w	fp, fp, #1
 8018708:	3408      	adds	r4, #8
 801870a:	f1bb 0f04 	cmp.w	fp, #4
 801870e:	d19d      	bne.n	801864c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018710:	9b00      	ldr	r3, [sp, #0]
 8018712:	9c08      	ldr	r4, [sp, #32]
 8018714:	444b      	add	r3, r9
 8018716:	4544      	cmp	r4, r8
 8018718:	9300      	str	r3, [sp, #0]
 801871a:	d188      	bne.n	801862e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 801871c:	b021      	add	sp, #132	; 0x84
 801871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018722:	f04f 35ff 	mov.w	r5, #4294967295
 8018726:	e767      	b.n	80185f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018728:	2400d82c 	.word	0x2400d82c
 801872c:	0802ec28 	.word	0x0802ec28

08018730 <_ZN8touchgfx4RectaNERKS0_>:
 8018730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018734:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018738:	888c      	ldrh	r4, [r1, #4]
 801873a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801873e:	443c      	add	r4, r7
 8018740:	b2a4      	uxth	r4, r4
 8018742:	fa0f f884 	sxth.w	r8, r4
 8018746:	45c1      	cmp	r9, r8
 8018748:	da2f      	bge.n	80187aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801874a:	8882      	ldrh	r2, [r0, #4]
 801874c:	444a      	add	r2, r9
 801874e:	b292      	uxth	r2, r2
 8018750:	fa0f fe82 	sxth.w	lr, r2
 8018754:	4577      	cmp	r7, lr
 8018756:	da28      	bge.n	80187aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018758:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801875c:	88cb      	ldrh	r3, [r1, #6]
 801875e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018762:	442b      	add	r3, r5
 8018764:	b21b      	sxth	r3, r3
 8018766:	429e      	cmp	r6, r3
 8018768:	da1f      	bge.n	80187aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801876a:	88c3      	ldrh	r3, [r0, #6]
 801876c:	4433      	add	r3, r6
 801876e:	b29b      	uxth	r3, r3
 8018770:	fa0f fc83 	sxth.w	ip, r3
 8018774:	4565      	cmp	r5, ip
 8018776:	da18      	bge.n	80187aa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018778:	454f      	cmp	r7, r9
 801877a:	bfb8      	it	lt
 801877c:	464f      	movlt	r7, r9
 801877e:	42b5      	cmp	r5, r6
 8018780:	bfb8      	it	lt
 8018782:	4635      	movlt	r5, r6
 8018784:	45f0      	cmp	r8, lr
 8018786:	bfd8      	it	le
 8018788:	4622      	movle	r2, r4
 801878a:	1bd2      	subs	r2, r2, r7
 801878c:	8082      	strh	r2, [r0, #4]
 801878e:	884a      	ldrh	r2, [r1, #2]
 8018790:	88c9      	ldrh	r1, [r1, #6]
 8018792:	8007      	strh	r7, [r0, #0]
 8018794:	440a      	add	r2, r1
 8018796:	8045      	strh	r5, [r0, #2]
 8018798:	b292      	uxth	r2, r2
 801879a:	b211      	sxth	r1, r2
 801879c:	458c      	cmp	ip, r1
 801879e:	bfa8      	it	ge
 80187a0:	4613      	movge	r3, r2
 80187a2:	1b5b      	subs	r3, r3, r5
 80187a4:	80c3      	strh	r3, [r0, #6]
 80187a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187aa:	2300      	movs	r3, #0
 80187ac:	8003      	strh	r3, [r0, #0]
 80187ae:	8043      	strh	r3, [r0, #2]
 80187b0:	8083      	strh	r3, [r0, #4]
 80187b2:	80c3      	strh	r3, [r0, #6]
 80187b4:	e7f7      	b.n	80187a6 <_ZN8touchgfx4RectaNERKS0_+0x76>

080187b6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80187b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	dd06      	ble.n	80187cc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80187be:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80187c2:	2800      	cmp	r0, #0
 80187c4:	bfcc      	ite	gt
 80187c6:	2000      	movgt	r0, #0
 80187c8:	2001      	movle	r0, #1
 80187ca:	4770      	bx	lr
 80187cc:	2001      	movs	r0, #1
 80187ce:	4770      	bx	lr

080187d0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80187d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187d4:	2300      	movs	r3, #0
 80187d6:	4604      	mov	r4, r0
 80187d8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80187da:	8003      	strh	r3, [r0, #0]
 80187dc:	8043      	strh	r3, [r0, #2]
 80187de:	8083      	strh	r3, [r0, #4]
 80187e0:	80c3      	strh	r3, [r0, #6]
 80187e2:	2d00      	cmp	r5, #0
 80187e4:	d040      	beq.n	8018868 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80187e6:	1d28      	adds	r0, r5, #4
 80187e8:	f7ff ffe5 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187ec:	b988      	cbnz	r0, 8018812 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80187ee:	4620      	mov	r0, r4
 80187f0:	f7ff ffe1 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80187f4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80187f8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80187fc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018800:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018804:	b138      	cbz	r0, 8018816 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018806:	8022      	strh	r2, [r4, #0]
 8018808:	8063      	strh	r3, [r4, #2]
 801880a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801880e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018812:	69ad      	ldr	r5, [r5, #24]
 8018814:	e7e5      	b.n	80187e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018816:	f9b4 0000 	ldrsh.w	r0, [r4]
 801881a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801881e:	4290      	cmp	r0, r2
 8018820:	4607      	mov	r7, r0
 8018822:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018826:	460e      	mov	r6, r1
 8018828:	bfa8      	it	ge
 801882a:	4617      	movge	r7, r2
 801882c:	4299      	cmp	r1, r3
 801882e:	4472      	add	r2, lr
 8018830:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018834:	bfa8      	it	ge
 8018836:	461e      	movge	r6, r3
 8018838:	4440      	add	r0, r8
 801883a:	4471      	add	r1, lr
 801883c:	4463      	add	r3, ip
 801883e:	b200      	sxth	r0, r0
 8018840:	8027      	strh	r7, [r4, #0]
 8018842:	b212      	sxth	r2, r2
 8018844:	8066      	strh	r6, [r4, #2]
 8018846:	b209      	sxth	r1, r1
 8018848:	b21b      	sxth	r3, r3
 801884a:	4290      	cmp	r0, r2
 801884c:	bfac      	ite	ge
 801884e:	ebc7 0200 	rsbge	r2, r7, r0
 8018852:	ebc7 0202 	rsblt	r2, r7, r2
 8018856:	4299      	cmp	r1, r3
 8018858:	bfac      	ite	ge
 801885a:	ebc6 0301 	rsbge	r3, r6, r1
 801885e:	ebc6 0303 	rsblt	r3, r6, r3
 8018862:	80a2      	strh	r2, [r4, #4]
 8018864:	80e3      	strh	r3, [r4, #6]
 8018866:	e7d4      	b.n	8018812 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018868:	4620      	mov	r0, r4
 801886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801886e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801886e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018872:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018876:	b383      	cbz	r3, 80188da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018878:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801887a:	b374      	cbz	r4, 80188da <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801887c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018880:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018884:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018888:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801888c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018890:	b303      	cbz	r3, 80188d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018892:	4668      	mov	r0, sp
 8018894:	1d21      	adds	r1, r4, #4
 8018896:	f8ad 5000 	strh.w	r5, [sp]
 801889a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801889e:	f8ad 7004 	strh.w	r7, [sp, #4]
 80188a2:	f8ad 8006 	strh.w	r8, [sp, #6]
 80188a6:	f7ff ff43 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 80188aa:	4668      	mov	r0, sp
 80188ac:	f7ff ff83 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80188b0:	b980      	cbnz	r0, 80188d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80188b2:	f8bd 3000 	ldrh.w	r3, [sp]
 80188b6:	4669      	mov	r1, sp
 80188b8:	88a2      	ldrh	r2, [r4, #4]
 80188ba:	4620      	mov	r0, r4
 80188bc:	1a9b      	subs	r3, r3, r2
 80188be:	88e2      	ldrh	r2, [r4, #6]
 80188c0:	f8ad 3000 	strh.w	r3, [sp]
 80188c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80188c8:	1a9b      	subs	r3, r3, r2
 80188ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80188ce:	6823      	ldr	r3, [r4, #0]
 80188d0:	689b      	ldr	r3, [r3, #8]
 80188d2:	4798      	blx	r3
 80188d4:	69a4      	ldr	r4, [r4, #24]
 80188d6:	2c00      	cmp	r4, #0
 80188d8:	d1d8      	bne.n	801888c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80188da:	b002      	add	sp, #8
 80188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80188e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80188e2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80188e6:	460d      	mov	r5, r1
 80188e8:	4616      	mov	r6, r2
 80188ea:	b323      	cbz	r3, 8018936 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80188ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80188ee:	b314      	cbz	r4, 8018936 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80188f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80188f4:	b1eb      	cbz	r3, 8018932 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80188f6:	6828      	ldr	r0, [r5, #0]
 80188f8:	466b      	mov	r3, sp
 80188fa:	6869      	ldr	r1, [r5, #4]
 80188fc:	c303      	stmia	r3!, {r0, r1}
 80188fe:	4668      	mov	r0, sp
 8018900:	1d21      	adds	r1, r4, #4
 8018902:	f7ff ff15 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 8018906:	4668      	mov	r0, sp
 8018908:	f7ff ff55 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801890c:	b988      	cbnz	r0, 8018932 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801890e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018912:	4669      	mov	r1, sp
 8018914:	88a2      	ldrh	r2, [r4, #4]
 8018916:	4620      	mov	r0, r4
 8018918:	1a9b      	subs	r3, r3, r2
 801891a:	88e2      	ldrh	r2, [r4, #6]
 801891c:	f8ad 3000 	strh.w	r3, [sp]
 8018920:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018924:	1a9b      	subs	r3, r3, r2
 8018926:	4632      	mov	r2, r6
 8018928:	f8ad 3002 	strh.w	r3, [sp, #2]
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018930:	4798      	blx	r3
 8018932:	69a4      	ldr	r4, [r4, #24]
 8018934:	e7db      	b.n	80188ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018936:	b002      	add	sp, #8
 8018938:	bd70      	pop	{r4, r5, r6, pc}

0801893a <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 801893a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801893e:	4770      	bx	lr

08018940 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8018940:	b538      	push	{r3, r4, r5, lr}
 8018942:	7882      	ldrb	r2, [r0, #2]
 8018944:	4604      	mov	r4, r0
 8018946:	460d      	mov	r5, r1
 8018948:	6843      	ldr	r3, [r0, #4]
 801894a:	b98a      	cbnz	r2, 8018970 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 801894c:	4299      	cmp	r1, r3
 801894e:	d101      	bne.n	8018954 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8018950:	2301      	movs	r3, #1
 8018952:	7083      	strb	r3, [r0, #2]
 8018954:	6863      	ldr	r3, [r4, #4]
 8018956:	42ab      	cmp	r3, r5
 8018958:	d009      	beq.n	801896e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801895a:	7a23      	ldrb	r3, [r4, #8]
 801895c:	2b01      	cmp	r3, #1
 801895e:	d11b      	bne.n	8018998 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8018960:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8018964:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018968:	429a      	cmp	r2, r3
 801896a:	bfb8      	it	lt
 801896c:	8023      	strhlt	r3, [r4, #0]
 801896e:	bd38      	pop	{r3, r4, r5, pc}
 8018970:	7a02      	ldrb	r2, [r0, #8]
 8018972:	2a01      	cmp	r2, #1
 8018974:	d108      	bne.n	8018988 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8018976:	895b      	ldrh	r3, [r3, #10]
 8018978:	88c9      	ldrh	r1, [r1, #6]
 801897a:	1ac9      	subs	r1, r1, r3
 801897c:	682b      	ldr	r3, [r5, #0]
 801897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018980:	b209      	sxth	r1, r1
 8018982:	4628      	mov	r0, r5
 8018984:	4798      	blx	r3
 8018986:	e7e5      	b.n	8018954 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8018988:	2a02      	cmp	r2, #2
 801898a:	d1e3      	bne.n	8018954 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 801898c:	891b      	ldrh	r3, [r3, #8]
 801898e:	8889      	ldrh	r1, [r1, #4]
 8018990:	1ac9      	subs	r1, r1, r3
 8018992:	682b      	ldr	r3, [r5, #0]
 8018994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018996:	e7f3      	b.n	8018980 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8018998:	2b02      	cmp	r3, #2
 801899a:	d1e8      	bne.n	801896e <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 801899c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80189a0:	e7e0      	b.n	8018964 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

080189a2 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 80189a2:	4770      	bx	lr

080189a4 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 80189a4:	4770      	bx	lr

080189a6 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 80189a6:	b430      	push	{r4, r5}
 80189a8:	68c5      	ldr	r5, [r0, #12]
 80189aa:	4603      	mov	r3, r0
 80189ac:	6844      	ldr	r4, [r0, #4]
 80189ae:	106a      	asrs	r2, r5, #1
 80189b0:	07ed      	lsls	r5, r5, #31
 80189b2:	689b      	ldr	r3, [r3, #8]
 80189b4:	eb04 0002 	add.w	r0, r4, r2
 80189b8:	bf48      	it	mi
 80189ba:	58a2      	ldrmi	r2, [r4, r2]
 80189bc:	bc30      	pop	{r4, r5}
 80189be:	bf48      	it	mi
 80189c0:	58d3      	ldrmi	r3, [r2, r3]
 80189c2:	4718      	bx	r3

080189c4 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 80189c4:	6843      	ldr	r3, [r0, #4]
 80189c6:	b12b      	cbz	r3, 80189d4 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 80189c8:	6883      	ldr	r3, [r0, #8]
 80189ca:	b92b      	cbnz	r3, 80189d8 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 80189cc:	68c0      	ldr	r0, [r0, #12]
 80189ce:	f000 0001 	and.w	r0, r0, #1
 80189d2:	4770      	bx	lr
 80189d4:	4618      	mov	r0, r3
 80189d6:	4770      	bx	lr
 80189d8:	2001      	movs	r0, #1
 80189da:	4770      	bx	lr

080189dc <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 80189dc:	b430      	push	{r4, r5}
 80189de:	68c5      	ldr	r5, [r0, #12]
 80189e0:	4603      	mov	r3, r0
 80189e2:	6844      	ldr	r4, [r0, #4]
 80189e4:	106a      	asrs	r2, r5, #1
 80189e6:	07ed      	lsls	r5, r5, #31
 80189e8:	689b      	ldr	r3, [r3, #8]
 80189ea:	eb04 0002 	add.w	r0, r4, r2
 80189ee:	bf48      	it	mi
 80189f0:	58a2      	ldrmi	r2, [r4, r2]
 80189f2:	bc30      	pop	{r4, r5}
 80189f4:	bf48      	it	mi
 80189f6:	58d3      	ldrmi	r3, [r2, r3]
 80189f8:	4718      	bx	r3

080189fa <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 80189fa:	6843      	ldr	r3, [r0, #4]
 80189fc:	b12b      	cbz	r3, 8018a0a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 80189fe:	6883      	ldr	r3, [r0, #8]
 8018a00:	b92b      	cbnz	r3, 8018a0e <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8018a02:	68c0      	ldr	r0, [r0, #12]
 8018a04:	f000 0001 	and.w	r0, r0, #1
 8018a08:	4770      	bx	lr
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	4770      	bx	lr
 8018a0e:	2001      	movs	r0, #1
 8018a10:	4770      	bx	lr

08018a12 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8018a12:	b510      	push	{r4, lr}
 8018a14:	4604      	mov	r4, r0
 8018a16:	2110      	movs	r1, #16
 8018a18:	f014 f818 	bl	802ca4c <_ZdlPvj>
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	bd10      	pop	{r4, pc}

08018a20 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8018a20:	b510      	push	{r4, lr}
 8018a22:	4604      	mov	r4, r0
 8018a24:	2110      	movs	r1, #16
 8018a26:	f014 f811 	bl	802ca4c <_ZdlPvj>
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	bd10      	pop	{r4, pc}

08018a2e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8018a2e:	4603      	mov	r3, r0
 8018a30:	4608      	mov	r0, r1
 8018a32:	789a      	ldrb	r2, [r3, #2]
 8018a34:	b992      	cbnz	r2, 8018a5c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8018a36:	685a      	ldr	r2, [r3, #4]
 8018a38:	428a      	cmp	r2, r1
 8018a3a:	d102      	bne.n	8018a42 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	709a      	strb	r2, [r3, #2]
 8018a40:	4770      	bx	lr
 8018a42:	7a1a      	ldrb	r2, [r3, #8]
 8018a44:	2a01      	cmp	r2, #1
 8018a46:	d104      	bne.n	8018a52 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8018a48:	88ca      	ldrh	r2, [r1, #6]
 8018a4a:	8949      	ldrh	r1, [r1, #10]
 8018a4c:	440a      	add	r2, r1
 8018a4e:	801a      	strh	r2, [r3, #0]
 8018a50:	4770      	bx	lr
 8018a52:	2a02      	cmp	r2, #2
 8018a54:	d116      	bne.n	8018a84 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8018a56:	888a      	ldrh	r2, [r1, #4]
 8018a58:	8909      	ldrh	r1, [r1, #8]
 8018a5a:	e7f7      	b.n	8018a4c <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8018a5c:	7a1a      	ldrb	r2, [r3, #8]
 8018a5e:	2a01      	cmp	r2, #1
 8018a60:	d107      	bne.n	8018a72 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8018a62:	685b      	ldr	r3, [r3, #4]
 8018a64:	8959      	ldrh	r1, [r3, #10]
 8018a66:	88c3      	ldrh	r3, [r0, #6]
 8018a68:	4419      	add	r1, r3
 8018a6a:	6803      	ldr	r3, [r0, #0]
 8018a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a6e:	b209      	sxth	r1, r1
 8018a70:	4718      	bx	r3
 8018a72:	2a02      	cmp	r2, #2
 8018a74:	d106      	bne.n	8018a84 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8018a76:	685b      	ldr	r3, [r3, #4]
 8018a78:	8919      	ldrh	r1, [r3, #8]
 8018a7a:	8883      	ldrh	r3, [r0, #4]
 8018a7c:	4419      	add	r1, r3
 8018a7e:	6803      	ldr	r3, [r0, #0]
 8018a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a82:	e7f4      	b.n	8018a6e <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8018a84:	4770      	bx	lr

08018a86 <_ZN8touchgfx10ListLayout9removeAllEv>:
 8018a86:	2200      	movs	r2, #0
 8018a88:	b510      	push	{r4, lr}
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8018a8e:	4611      	mov	r1, r2
 8018a90:	f7f9 fb1f 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018a94:	4620      	mov	r0, r4
 8018a96:	f7ff fcd2 	bl	801843e <_ZN8touchgfx9Container9removeAllEv>
 8018a9a:	6960      	ldr	r0, [r4, #20]
 8018a9c:	b120      	cbz	r0, 8018aa8 <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8018a9e:	6803      	ldr	r3, [r0, #0]
 8018aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018aa6:	4718      	bx	r3
 8018aa8:	bd10      	pop	{r4, pc}
	...

08018aac <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8018aac:	b530      	push	{r4, r5, lr}
 8018aae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018ab2:	b085      	sub	sp, #20
 8018ab4:	4604      	mov	r4, r0
 8018ab6:	428b      	cmp	r3, r1
 8018ab8:	d017      	beq.n	8018aea <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8018aba:	2500      	movs	r5, #0
 8018abc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8018ac0:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8018ac2:	462a      	mov	r2, r5
 8018ac4:	4629      	mov	r1, r5
 8018ac6:	f7f9 fb04 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018aca:	4b09      	ldr	r3, [pc, #36]	; (8018af0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8018acc:	4620      	mov	r0, r4
 8018ace:	4669      	mov	r1, sp
 8018ad0:	e9cd 3400 	strd	r3, r4, [sp]
 8018ad4:	4b07      	ldr	r3, [pc, #28]	; (8018af4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8018ad6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8018ada:	6823      	ldr	r3, [r4, #0]
 8018adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018ade:	4798      	blx	r3
 8018ae0:	6960      	ldr	r0, [r4, #20]
 8018ae2:	b110      	cbz	r0, 8018aea <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8018ae4:	6803      	ldr	r3, [r0, #0]
 8018ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ae8:	4798      	blx	r3
 8018aea:	b005      	add	sp, #20
 8018aec:	bd30      	pop	{r4, r5, pc}
 8018aee:	bf00      	nop
 8018af0:	0802ff38 	.word	0x0802ff38
 8018af4:	08018b5d 	.word	0x08018b5d

08018af8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018afe:	460d      	mov	r5, r1
 8018b00:	4604      	mov	r4, r0
 8018b02:	4611      	mov	r1, r2
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d002      	beq.n	8018b0e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8018b08:	2b02      	cmp	r3, #2
 8018b0a:	d015      	beq.n	8018b38 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8018b0c:	bd38      	pop	{r3, r4, r5, pc}
 8018b0e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8018b12:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	bfb8      	it	lt
 8018b1a:	8103      	strhlt	r3, [r0, #8]
 8018b1c:	8943      	ldrh	r3, [r0, #10]
 8018b1e:	896a      	ldrh	r2, [r5, #10]
 8018b20:	4413      	add	r3, r2
 8018b22:	460a      	mov	r2, r1
 8018b24:	2100      	movs	r1, #0
 8018b26:	8143      	strh	r3, [r0, #10]
 8018b28:	4628      	mov	r0, r5
 8018b2a:	f7f9 fa76 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
 8018b2e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018b30:	896a      	ldrh	r2, [r5, #10]
 8018b32:	4413      	add	r3, r2
 8018b34:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8018b36:	e7e9      	b.n	8018b0c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8018b38:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8018b3c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018b40:	429a      	cmp	r2, r3
 8018b42:	bfb8      	it	lt
 8018b44:	8143      	strhlt	r3, [r0, #10]
 8018b46:	8903      	ldrh	r3, [r0, #8]
 8018b48:	892a      	ldrh	r2, [r5, #8]
 8018b4a:	4413      	add	r3, r2
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	8103      	strh	r3, [r0, #8]
 8018b50:	4628      	mov	r0, r5
 8018b52:	f7f9 fa62 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
 8018b56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018b58:	892a      	ldrh	r2, [r5, #8]
 8018b5a:	e7ea      	b.n	8018b32 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08018b5c <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8018b5c:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8018b60:	f7ff bfca 	b.w	8018af8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08018b64 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8018b64:	b570      	push	{r4, r5, r6, lr}
 8018b66:	4604      	mov	r4, r0
 8018b68:	460d      	mov	r5, r1
 8018b6a:	f7ff fff7 	bl	8018b5c <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8018b6e:	4620      	mov	r0, r4
 8018b70:	4629      	mov	r1, r5
 8018b72:	f7ff fc57 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018b76:	6960      	ldr	r0, [r4, #20]
 8018b78:	b120      	cbz	r0, 8018b84 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8018b7a:	6803      	ldr	r3, [r0, #0]
 8018b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b82:	4718      	bx	r3
 8018b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08018b88 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8018b88:	b530      	push	{r4, r5, lr}
 8018b8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018b8c:	b089      	sub	sp, #36	; 0x24
 8018b8e:	4604      	mov	r4, r0
 8018b90:	4615      	mov	r5, r2
 8018b92:	b92b      	cbnz	r3, 8018ba0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8018b94:	6803      	ldr	r3, [r0, #0]
 8018b96:	4611      	mov	r1, r2
 8018b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b9a:	4798      	blx	r3
 8018b9c:	b009      	add	sp, #36	; 0x24
 8018b9e:	bd30      	pop	{r4, r5, pc}
 8018ba0:	f7ff fc9a 	bl	80184d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8018ba4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018ba8:	2300      	movs	r3, #0
 8018baa:	a904      	add	r1, sp, #16
 8018bac:	f88d 200c 	strb.w	r2, [sp, #12]
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	4a0e      	ldr	r2, [pc, #56]	; (8018bec <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8018bb4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018bb8:	9204      	str	r2, [sp, #16]
 8018bba:	aa01      	add	r2, sp, #4
 8018bbc:	f88d 3006 	strb.w	r3, [sp, #6]
 8018bc0:	9205      	str	r2, [sp, #20]
 8018bc2:	4a0b      	ldr	r2, [pc, #44]	; (8018bf0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8018bc4:	9502      	str	r5, [sp, #8]
 8018bc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018bca:	6823      	ldr	r3, [r4, #0]
 8018bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bce:	4798      	blx	r3
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018bd6:	4629      	mov	r1, r5
 8018bd8:	f7ff ff8e 	bl	8018af8 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8018bdc:	6960      	ldr	r0, [r4, #20]
 8018bde:	2800      	cmp	r0, #0
 8018be0:	d0dc      	beq.n	8018b9c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8018be2:	6803      	ldr	r3, [r0, #0]
 8018be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018be6:	4798      	blx	r3
 8018be8:	e7d8      	b.n	8018b9c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8018bea:	bf00      	nop
 8018bec:	0802ff50 	.word	0x0802ff50
 8018bf0:	08018a2f 	.word	0x08018a2f

08018bf4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8018bf4:	b538      	push	{r3, r4, r5, lr}
 8018bf6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	460d      	mov	r5, r1
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d002      	beq.n	8018c08 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8018c02:	2b02      	cmp	r3, #2
 8018c04:	d018      	beq.n	8018c38 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8018c06:	bd38      	pop	{r3, r4, r5, pc}
 8018c08:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018c0c:	4293      	cmp	r3, r2
 8018c0e:	8943      	ldrh	r3, [r0, #10]
 8018c10:	bfc8      	it	gt
 8018c12:	8102      	strhgt	r2, [r0, #8]
 8018c14:	894a      	ldrh	r2, [r1, #10]
 8018c16:	1a9b      	subs	r3, r3, r2
 8018c18:	8143      	strh	r3, [r0, #10]
 8018c1a:	4628      	mov	r0, r5
 8018c1c:	680b      	ldr	r3, [r1, #0]
 8018c1e:	2100      	movs	r1, #0
 8018c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c22:	4798      	blx	r3
 8018c24:	682b      	ldr	r3, [r5, #0]
 8018c26:	2100      	movs	r1, #0
 8018c28:	4628      	mov	r0, r5
 8018c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c2c:	4798      	blx	r3
 8018c2e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018c30:	896a      	ldrh	r2, [r5, #10]
 8018c32:	1a9b      	subs	r3, r3, r2
 8018c34:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8018c36:	e7e6      	b.n	8018c06 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8018c38:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018c3c:	4293      	cmp	r3, r2
 8018c3e:	8903      	ldrh	r3, [r0, #8]
 8018c40:	bfc8      	it	gt
 8018c42:	8142      	strhgt	r2, [r0, #10]
 8018c44:	890a      	ldrh	r2, [r1, #8]
 8018c46:	1a9b      	subs	r3, r3, r2
 8018c48:	8103      	strh	r3, [r0, #8]
 8018c4a:	4628      	mov	r0, r5
 8018c4c:	680b      	ldr	r3, [r1, #0]
 8018c4e:	2100      	movs	r1, #0
 8018c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c52:	4798      	blx	r3
 8018c54:	682b      	ldr	r3, [r5, #0]
 8018c56:	2100      	movs	r1, #0
 8018c58:	4628      	mov	r0, r5
 8018c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c5c:	4798      	blx	r3
 8018c5e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018c60:	892a      	ldrh	r2, [r5, #8]
 8018c62:	e7e6      	b.n	8018c32 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08018c64 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8018c64:	b530      	push	{r4, r5, lr}
 8018c66:	b089      	sub	sp, #36	; 0x24
 8018c68:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	460d      	mov	r5, r1
 8018c70:	f88d 200c 	strb.w	r2, [sp, #12]
 8018c74:	4604      	mov	r4, r0
 8018c76:	4a12      	ldr	r2, [pc, #72]	; (8018cc0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8018c78:	f8ad 3004 	strh.w	r3, [sp, #4]
 8018c7c:	9204      	str	r2, [sp, #16]
 8018c7e:	aa01      	add	r2, sp, #4
 8018c80:	f88d 3006 	strb.w	r3, [sp, #6]
 8018c84:	9205      	str	r2, [sp, #20]
 8018c86:	4a0f      	ldr	r2, [pc, #60]	; (8018cc4 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8018c88:	9102      	str	r1, [sp, #8]
 8018c8a:	a904      	add	r1, sp, #16
 8018c8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c90:	6803      	ldr	r3, [r0, #0]
 8018c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018c94:	4798      	blx	r3
 8018c96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018c9a:	b14b      	cbz	r3, 8018cb0 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8018c9c:	4629      	mov	r1, r5
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018ca4:	f7ff ffa6 	bl	8018bf4 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8018ca8:	4629      	mov	r1, r5
 8018caa:	4620      	mov	r0, r4
 8018cac:	f7ff fbfd 	bl	80184aa <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8018cb0:	6960      	ldr	r0, [r4, #20]
 8018cb2:	b110      	cbz	r0, 8018cba <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8018cb4:	6803      	ldr	r3, [r0, #0]
 8018cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cb8:	4798      	blx	r3
 8018cba:	b009      	add	sp, #36	; 0x24
 8018cbc:	bd30      	pop	{r4, r5, pc}
 8018cbe:	bf00      	nop
 8018cc0:	0802ff50 	.word	0x0802ff50
 8018cc4:	08018941 	.word	0x08018941

08018cc8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8018cc8:	2000      	movs	r0, #0
 8018cca:	4770      	bx	lr

08018ccc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018ccc:	2001      	movs	r0, #1
 8018cce:	4770      	bx	lr

08018cd0 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
 8018cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018cd2:	6803      	ldr	r3, [r0, #0]
 8018cd4:	4604      	mov	r4, r0
 8018cd6:	460e      	mov	r6, r1
 8018cd8:	4601      	mov	r1, r0
 8018cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018cde:	4668      	mov	r0, sp
 8018ce0:	4615      	mov	r5, r2
 8018ce2:	4798      	blx	r3
 8018ce4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8018ce8:	b13b      	cbz	r3, 8018cfa <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x2a>
 8018cea:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8018cee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	bfac      	ite	ge
 8018cf6:	2300      	movge	r3, #0
 8018cf8:	2301      	movlt	r3, #1
 8018cfa:	7033      	strb	r3, [r6, #0]
 8018cfc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8018d00:	b13b      	cbz	r3, 8018d12 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x42>
 8018d02:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018d06:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	bfac      	ite	ge
 8018d0e:	2300      	movge	r3, #0
 8018d10:	2301      	movlt	r3, #1
 8018d12:	702b      	strb	r3, [r5, #0]
 8018d14:	b002      	add	sp, #8
 8018d16:	bd70      	pop	{r4, r5, r6, pc}

08018d18 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
 8018d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d1c:	4604      	mov	r4, r0
 8018d1e:	460f      	mov	r7, r1
 8018d20:	4616      	mov	r6, r2
 8018d22:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8018d24:	f100 0838 	add.w	r8, r0, #56	; 0x38
 8018d28:	f100 0964 	add.w	r9, r0, #100	; 0x64
 8018d2c:	b15d      	cbz	r5, 8018d46 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2e>
 8018d2e:	4545      	cmp	r5, r8
 8018d30:	d007      	beq.n	8018d42 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8018d32:	454d      	cmp	r5, r9
 8018d34:	d005      	beq.n	8018d42 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x2a>
 8018d36:	682b      	ldr	r3, [r5, #0]
 8018d38:	4632      	mov	r2, r6
 8018d3a:	4639      	mov	r1, r7
 8018d3c:	4628      	mov	r0, r5
 8018d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d40:	4798      	blx	r3
 8018d42:	69ad      	ldr	r5, [r5, #24]
 8018d44:	e7f2      	b.n	8018d2c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x14>
 8018d46:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8018d4a:	441f      	add	r7, r3
 8018d4c:	f8b4 309a 	ldrh.w	r3, [r4, #154]	; 0x9a
 8018d50:	441e      	add	r6, r3
 8018d52:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
 8018d56:	f8a4 609a 	strh.w	r6, [r4, #154]	; 0x9a
 8018d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d5e <_ZN8touchgfx9DragEventD1Ev>:
 8018d5e:	4770      	bx	lr

08018d60 <_ZN8touchgfx10ClickEventD1Ev>:
 8018d60:	4770      	bx	lr

08018d62 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:
 8018d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d64:	4605      	mov	r5, r0
 8018d66:	f100 0638 	add.w	r6, r0, #56	; 0x38
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	460f      	mov	r7, r1
 8018d6e:	f855 3b64 	ldr.w	r3, [r5], #100
 8018d72:	4631      	mov	r1, r6
 8018d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d76:	4798      	blx	r3
 8018d78:	6823      	ldr	r3, [r4, #0]
 8018d7a:	4629      	mov	r1, r5
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d80:	4798      	blx	r3
 8018d82:	4639      	mov	r1, r7
 8018d84:	4620      	mov	r0, r4
 8018d86:	f7ff fb4d 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	4620      	mov	r0, r4
 8018d8e:	f7ff fb49 	bl	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018d92:	4629      	mov	r1, r5
 8018d94:	4620      	mov	r0, r4
 8018d96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d9a:	f7ff bb43 	b.w	8018424 <_ZN8touchgfx9Container3addERNS_8DrawableE>

08018d9e <_ZN8touchgfx10ClickEventD0Ev>:
 8018d9e:	b510      	push	{r4, lr}
 8018da0:	4604      	mov	r4, r0
 8018da2:	210c      	movs	r1, #12
 8018da4:	f013 fe52 	bl	802ca4c <_ZdlPvj>
 8018da8:	4620      	mov	r0, r4
 8018daa:	bd10      	pop	{r4, pc}

08018dac <_ZN8touchgfx9DragEventD0Ev>:
 8018dac:	b510      	push	{r4, lr}
 8018dae:	4604      	mov	r4, r0
 8018db0:	2110      	movs	r1, #16
 8018db2:	f013 fe4b 	bl	802ca4c <_ZdlPvj>
 8018db6:	4620      	mov	r0, r4
 8018db8:	bd10      	pop	{r4, pc}
	...

08018dbc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:
 8018dbc:	b570      	push	{r4, r5, r6, lr}
 8018dbe:	b086      	sub	sp, #24
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	460c      	mov	r4, r1
 8018dc4:	4605      	mov	r5, r0
 8018dc6:	aa06      	add	r2, sp, #24
 8018dc8:	f88d 3002 	strb.w	r3, [sp, #2]
 8018dcc:	f10d 0102 	add.w	r1, sp, #2
 8018dd0:	f802 3d15 	strb.w	r3, [r2, #-21]!
 8018dd4:	6803      	ldr	r3, [r0, #0]
 8018dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018dda:	4798      	blx	r3
 8018ddc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8018de0:	b10b      	cbz	r3, 8018de6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x2a>
 8018de2:	7923      	ldrb	r3, [r4, #4]
 8018de4:	b133      	cbz	r3, 8018df4 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 8018de6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d067      	beq.n	8018ebe <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8018dee:	7923      	ldrb	r3, [r4, #4]
 8018df0:	2b01      	cmp	r3, #1
 8018df2:	d164      	bne.n	8018ebe <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8018df4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018df8:	2a00      	cmp	r2, #0
 8018dfa:	bfb8      	it	lt
 8018dfc:	4252      	neglt	r2, r2
 8018dfe:	b213      	sxth	r3, r2
 8018e00:	f9b5 209c 	ldrsh.w	r2, [r5, #156]	; 0x9c
 8018e04:	429a      	cmp	r2, r3
 8018e06:	dc5a      	bgt.n	8018ebe <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8018e08:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 8018e0a:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	bfa8      	it	ge
 8018e12:	461a      	movge	r2, r3
 8018e14:	f8b5 30ba 	ldrh.w	r3, [r5, #186]	; 0xba
 8018e18:	b212      	sxth	r2, r2
 8018e1a:	2a05      	cmp	r2, #5
 8018e1c:	bfb8      	it	lt
 8018e1e:	2205      	movlt	r2, #5
 8018e20:	4351      	muls	r1, r2
 8018e22:	3a04      	subs	r2, #4
 8018e24:	fb91 f1f3 	sdiv	r1, r1, r3
 8018e28:	f8a5 10a8 	strh.w	r1, [r5, #168]	; 0xa8
 8018e2c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8018e30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8018e34:	b289      	uxth	r1, r1
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e3c:	bfcc      	ite	gt
 8018e3e:	2001      	movgt	r0, #1
 8018e40:	4618      	movle	r0, r3
 8018e42:	00d3      	lsls	r3, r2, #3
 8018e44:	fb13 f300 	smulbb	r3, r3, r0
 8018e48:	b21b      	sxth	r3, r3
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
 8018e50:	bfb8      	it	lt
 8018e52:	425b      	neglt	r3, r3
 8018e54:	b21b      	sxth	r3, r3
 8018e56:	428b      	cmp	r3, r1
 8018e58:	bfa8      	it	ge
 8018e5a:	460b      	movge	r3, r1
 8018e5c:	4629      	mov	r1, r5
 8018e5e:	f8a5 30a8 	strh.w	r3, [r5, #168]	; 0xa8
 8018e62:	7922      	ldrb	r2, [r4, #4]
 8018e64:	682b      	ldr	r3, [r5, #0]
 8018e66:	2a01      	cmp	r2, #1
 8018e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018e6c:	d129      	bne.n	8018ec2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x106>
 8018e6e:	a801      	add	r0, sp, #4
 8018e70:	4798      	blx	r3
 8018e72:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8018e76:	2601      	movs	r6, #1
 8018e78:	f8a5 30aa 	strh.w	r3, [r5, #170]	; 0xaa
 8018e7c:	f885 60b0 	strb.w	r6, [r5, #176]	; 0xb0
 8018e80:	f005 fa9e 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8018e84:	4629      	mov	r1, r5
 8018e86:	f005 faa1 	bl	801e3cc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8018e8a:	7923      	ldrb	r3, [r4, #4]
 8018e8c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8018e90:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8018e94:	b198      	cbz	r0, 8018ebe <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8018e96:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
 8018e9a:	b983      	cbnz	r3, 8018ebe <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x102>
 8018e9c:	4a0b      	ldr	r2, [pc, #44]	; (8018ecc <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x110>)
 8018e9e:	a903      	add	r1, sp, #12
 8018ea0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018ea4:	9203      	str	r2, [sp, #12]
 8018ea6:	2202      	movs	r2, #2
 8018ea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018eac:	f88d 2010 	strb.w	r2, [sp, #16]
 8018eb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018eb4:	6803      	ldr	r3, [r0, #0]
 8018eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eb8:	4798      	blx	r3
 8018eba:	f885 60b6 	strb.w	r6, [r5, #182]	; 0xb6
 8018ebe:	b006      	add	sp, #24
 8018ec0:	bd70      	pop	{r4, r5, r6, pc}
 8018ec2:	a803      	add	r0, sp, #12
 8018ec4:	4798      	blx	r3
 8018ec6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018eca:	e7d4      	b.n	8018e76 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 8018ecc:	08030000 	.word	0x08030000

08018ed0 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:
 8018ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ed2:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d048      	beq.n	8018f6e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8018edc:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
 8018ee0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8018ee4:	3001      	adds	r0, #1
 8018ee6:	b280      	uxth	r0, r0
 8018ee8:	4298      	cmp	r0, r3
 8018eea:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
 8018eee:	d842      	bhi.n	8018f76 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 8018ef0:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8018ef4:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8018ef8:	f006 ff38 	bl	801fd6c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8018efc:	4605      	mov	r5, r0
 8018efe:	b282      	uxth	r2, r0
 8018f00:	f012 0301 	ands.w	r3, r2, #1
 8018f04:	d006      	beq.n	8018f14 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x44>
 8018f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018f0a:	2800      	cmp	r0, #0
 8018f0c:	bfd8      	it	le
 8018f0e:	460b      	movle	r3, r1
 8018f10:	18d5      	adds	r5, r2, r3
 8018f12:	b22d      	sxth	r5, r5
 8018f14:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8018f18:	2b01      	cmp	r3, #1
 8018f1a:	d02a      	beq.n	8018f72 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa2>
 8018f1c:	6823      	ldr	r3, [r4, #0]
 8018f1e:	4621      	mov	r1, r4
 8018f20:	4668      	mov	r0, sp
 8018f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f26:	4798      	blx	r3
 8018f28:	f8bd 6000 	ldrh.w	r6, [sp]
 8018f2c:	1bae      	subs	r6, r5, r6
 8018f2e:	b236      	sxth	r6, r6
 8018f30:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 8018f34:	b14a      	cbz	r2, 8018f4a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x7a>
 8018f36:	6823      	ldr	r3, [r4, #0]
 8018f38:	4621      	mov	r1, r4
 8018f3a:	4668      	mov	r0, sp
 8018f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f40:	4798      	blx	r3
 8018f42:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8018f46:	1aad      	subs	r5, r5, r2
 8018f48:	b22a      	sxth	r2, r5
 8018f4a:	6823      	ldr	r3, [r4, #0]
 8018f4c:	4631      	mov	r1, r6
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f54:	4798      	blx	r3
 8018f56:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
 8018f5a:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8018f5e:	b935      	cbnz	r5, 8018f6e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x9e>
 8018f60:	f005 fa2e 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8018f64:	4621      	mov	r1, r4
 8018f66:	f005 fa56 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8018f6a:	f8a4 50ae 	strh.w	r5, [r4, #174]	; 0xae
 8018f6e:	b002      	add	sp, #8
 8018f70:	bd70      	pop	{r4, r5, r6, pc}
 8018f72:	2600      	movs	r6, #0
 8018f74:	e7dc      	b.n	8018f30 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x60>
 8018f76:	2300      	movs	r3, #0
 8018f78:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8018f7c:	e7ed      	b.n	8018f5a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x8a>

08018f7e <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
 8018f7e:	b470      	push	{r4, r5, r6}
 8018f80:	f890 6025 	ldrb.w	r6, [r0, #37]	; 0x25
 8018f84:	461d      	mov	r5, r3
 8018f86:	b11e      	cbz	r6, 8018f90 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x12>
 8018f88:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
 8018f8c:	b116      	cbz	r6, 8018f94 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x16>
 8018f8e:	6028      	str	r0, [r5, #0]
 8018f90:	bc70      	pop	{r4, r5, r6}
 8018f92:	4770      	bx	lr
 8018f94:	bc70      	pop	{r4, r5, r6}
 8018f96:	f7ff bab9 	b.w	801850c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
	...

08018f9c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:
 8018f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa0:	b08b      	sub	sp, #44	; 0x2c
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	4604      	mov	r4, r0
 8018fa6:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018faa:	aa0a      	add	r2, sp, #40	; 0x28
 8018fac:	f88d 3006 	strb.w	r3, [sp, #6]
 8018fb0:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8018fb4:	460f      	mov	r7, r1
 8018fb6:	f802 3d21 	strb.w	r3, [r2, #-33]!
 8018fba:	6803      	ldr	r3, [r0, #0]
 8018fbc:	f9b1 500a 	ldrsh.w	r5, [r1, #10]
 8018fc0:	f9b1 600c 	ldrsh.w	r6, [r1, #12]
 8018fc4:	f10d 0106 	add.w	r1, sp, #6
 8018fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018fcc:	4798      	blx	r3
 8018fce:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8018fd2:	2900      	cmp	r1, #0
 8018fd4:	d03d      	beq.n	8019052 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8018fd6:	42a1      	cmp	r1, r4
 8018fd8:	d03b      	beq.n	8019052 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 8018fda:	a802      	add	r0, sp, #8
 8018fdc:	f006 fa60 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018fe0:	4621      	mov	r1, r4
 8018fe2:	a804      	add	r0, sp, #16
 8018fe4:	f9bd b008 	ldrsh.w	fp, [sp, #8]
 8018fe8:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8018fec:	f006 fa58 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018ff0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018ff4:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8018ff8:	eba3 030b 	sub.w	r3, r3, fp
 8018ffc:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 8019000:	88f9      	ldrh	r1, [r7, #6]
 8019002:	4413      	add	r3, r2
 8019004:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019008:	f89d c006 	ldrb.w	ip, [sp, #6]
 801900c:	eba2 020a 	sub.w	r2, r2, sl
 8019010:	b29b      	uxth	r3, r3
 8019012:	4402      	add	r2, r0
 8019014:	8938      	ldrh	r0, [r7, #8]
 8019016:	4419      	add	r1, r3
 8019018:	b292      	uxth	r2, r2
 801901a:	b209      	sxth	r1, r1
 801901c:	4410      	add	r0, r2
 801901e:	b200      	sxth	r0, r0
 8019020:	f1bc 0f00 	cmp.w	ip, #0
 8019024:	f040 808d 	bne.w	8019142 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1a6>
 8019028:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
 801902c:	4473      	add	r3, lr
 801902e:	b21b      	sxth	r3, r3
 8019030:	f89d e007 	ldrb.w	lr, [sp, #7]
 8019034:	f1be 0f00 	cmp.w	lr, #0
 8019038:	f040 80b1 	bne.w	801919e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x202>
 801903c:	f8b7 e00c 	ldrh.w	lr, [r7, #12]
 8019040:	4472      	add	r2, lr
 8019042:	b212      	sxth	r2, r2
 8019044:	f1bc 0f00 	cmp.w	ip, #0
 8019048:	f000 80c8 	beq.w	80191dc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x240>
 801904c:	4290      	cmp	r0, r2
 801904e:	f040 80ae 	bne.w	80191ae <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 8019052:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8019056:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801905a:	2b00      	cmp	r3, #0
 801905c:	f040 8099 	bne.w	8019192 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f6>
 8019060:	897d      	ldrh	r5, [r7, #10]
 8019062:	89be      	ldrh	r6, [r7, #12]
 8019064:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 8019068:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
 801906c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
 8019070:	f8b4 c0a0 	ldrh.w	ip, [r4, #160]	; 0xa0
 8019074:	4411      	add	r1, r2
 8019076:	442a      	add	r2, r5
 8019078:	449c      	add	ip, r3
 801907a:	4433      	add	r3, r6
 801907c:	b292      	uxth	r2, r2
 801907e:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8019082:	b29b      	uxth	r3, r3
 8019084:	b289      	uxth	r1, r1
 8019086:	fa1f fc8c 	uxth.w	ip, ip
 801908a:	b215      	sxth	r5, r2
 801908c:	b21e      	sxth	r6, r3
 801908e:	b15f      	cbz	r7, 80190a8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x10c>
 8019090:	1a52      	subs	r2, r2, r1
 8019092:	f9b4 709c 	ldrsh.w	r7, [r4, #156]	; 0x9c
 8019096:	b212      	sxth	r2, r2
 8019098:	2a00      	cmp	r2, #0
 801909a:	bfb8      	it	lt
 801909c:	4252      	neglt	r2, r2
 801909e:	b212      	sxth	r2, r2
 80190a0:	4297      	cmp	r7, r2
 80190a2:	bfac      	ite	ge
 80190a4:	2700      	movge	r7, #0
 80190a6:	2701      	movlt	r7, #1
 80190a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80190ac:	b152      	cbz	r2, 80190c4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x128>
 80190ae:	eba3 030c 	sub.w	r3, r3, ip
 80190b2:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
 80190b6:	b21b      	sxth	r3, r3
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	bfb8      	it	lt
 80190bc:	425b      	neglt	r3, r3
 80190be:	b21b      	sxth	r3, r3
 80190c0:	429a      	cmp	r2, r3
 80190c2:	db01      	blt.n	80190c8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x12c>
 80190c4:	2f00      	cmp	r7, #0
 80190c6:	d03e      	beq.n	8019146 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1aa>
 80190c8:	2701      	movs	r7, #1
 80190ca:	fa0f f881 	sxth.w	r8, r1
 80190ce:	fa0f f98c 	sxth.w	r9, ip
 80190d2:	f884 70a3 	strb.w	r7, [r4, #163]	; 0xa3
 80190d6:	b1a0      	cbz	r0, 8019102 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 80190d8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80190dc:	b98b      	cbnz	r3, 8019102 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x166>
 80190de:	4a41      	ldr	r2, [pc, #260]	; (80191e4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 80190e0:	a906      	add	r1, sp, #24
 80190e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80190e6:	9206      	str	r2, [sp, #24]
 80190e8:	2202      	movs	r2, #2
 80190ea:	f8ad 3020 	strh.w	r3, [sp, #32]
 80190ee:	f88d 201c 	strb.w	r2, [sp, #28]
 80190f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80190f6:	6803      	ldr	r3, [r0, #0]
 80190f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190fa:	4798      	blx	r3
 80190fc:	2301      	movs	r3, #1
 80190fe:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 8019102:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 8019106:	b149      	cbz	r1, 801911c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8019108:	eba5 0108 	sub.w	r1, r5, r8
 801910c:	b209      	sxth	r1, r1
 801910e:	b12f      	cbz	r7, 801911c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 8019110:	2900      	cmp	r1, #0
 8019112:	dc40      	bgt.n	8019196 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fa>
 8019114:	bf14      	ite	ne
 8019116:	f04f 31ff 	movne.w	r1, #4294967295
 801911a:	2100      	moveq	r1, #0
 801911c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8019120:	b14a      	cbz	r2, 8019136 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 8019122:	eba6 0609 	sub.w	r6, r6, r9
 8019126:	b232      	sxth	r2, r6
 8019128:	b12f      	cbz	r7, 8019136 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801912a:	2a00      	cmp	r2, #0
 801912c:	dc35      	bgt.n	801919a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1fe>
 801912e:	bf14      	ite	ne
 8019130:	f04f 32ff 	movne.w	r2, #4294967295
 8019134:	2200      	moveq	r2, #0
 8019136:	6823      	ldr	r3, [r4, #0]
 8019138:	4620      	mov	r0, r4
 801913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801913e:	4798      	blx	r3
 8019140:	e024      	b.n	801918c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8019142:	460b      	mov	r3, r1
 8019144:	e774      	b.n	8019030 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x94>
 8019146:	b308      	cbz	r0, 801918c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8019148:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 801914c:	b9f3      	cbnz	r3, 801918c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 801914e:	ab0a      	add	r3, sp, #40	; 0x28
 8019150:	4620      	mov	r0, r4
 8019152:	4632      	mov	r2, r6
 8019154:	4629      	mov	r1, r5
 8019156:	f843 7d18 	str.w	r7, [r3, #-24]!
 801915a:	f7ff f9d7 	bl	801850c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801915e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8019162:	9b04      	ldr	r3, [sp, #16]
 8019164:	4298      	cmp	r0, r3
 8019166:	d011      	beq.n	801918c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1f0>
 8019168:	4b1e      	ldr	r3, [pc, #120]	; (80191e4 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x248>)
 801916a:	a906      	add	r1, sp, #24
 801916c:	f8ad 701e 	strh.w	r7, [sp, #30]
 8019170:	9306      	str	r3, [sp, #24]
 8019172:	2302      	movs	r3, #2
 8019174:	f8ad 7020 	strh.w	r7, [sp, #32]
 8019178:	f88d 301c 	strb.w	r3, [sp, #28]
 801917c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019180:	6803      	ldr	r3, [r0, #0]
 8019182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019184:	4798      	blx	r3
 8019186:	2301      	movs	r3, #1
 8019188:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 801918c:	b00b      	add	sp, #44	; 0x2c
 801918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019192:	2700      	movs	r7, #0
 8019194:	e79f      	b.n	80190d6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x13a>
 8019196:	2101      	movs	r1, #1
 8019198:	e7c0      	b.n	801911c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x180>
 801919a:	2201      	movs	r2, #1
 801919c:	e7cb      	b.n	8019136 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x19a>
 801919e:	f1bc 0f00 	cmp.w	ip, #0
 80191a2:	f47f af56 	bne.w	8019052 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80191a6:	428b      	cmp	r3, r1
 80191a8:	f43f af53 	beq.w	8019052 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80191ac:	4602      	mov	r2, r0
 80191ae:	f8df c038 	ldr.w	ip, [pc, #56]	; 80191e8 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x24c>
 80191b2:	f8ad 0020 	strh.w	r0, [sp, #32]
 80191b6:	f8cd c018 	str.w	ip, [sp, #24]
 80191ba:	f04f 0c00 	mov.w	ip, #0
 80191be:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80191c2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80191c6:	a906      	add	r1, sp, #24
 80191c8:	f88d c01c 	strb.w	ip, [sp, #28]
 80191cc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80191d0:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80191d4:	6803      	ldr	r3, [r0, #0]
 80191d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191d8:	4798      	blx	r3
 80191da:	e73a      	b.n	8019052 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb6>
 80191dc:	428b      	cmp	r3, r1
 80191de:	f43f af35 	beq.w	801904c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xb0>
 80191e2:	e7e4      	b.n	80191ae <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x212>
 80191e4:	08030000 	.word	0x08030000
 80191e8:	08030014 	.word	0x08030014

080191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80191ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191ee:	4604      	mov	r4, r0
 80191f0:	4608      	mov	r0, r1
 80191f2:	460d      	mov	r5, r1
 80191f4:	f7ff fadf 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80191f8:	b978      	cbnz	r0, 801921a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80191fa:	4620      	mov	r0, r4
 80191fc:	f7ff fadb 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019200:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019204:	b150      	cbz	r0, 801921c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019206:	8026      	strh	r6, [r4, #0]
 8019208:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801920c:	8063      	strh	r3, [r4, #2]
 801920e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019212:	80a3      	strh	r3, [r4, #4]
 8019214:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019218:	80e3      	strh	r3, [r4, #6]
 801921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801921c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019220:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019224:	42b1      	cmp	r1, r6
 8019226:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801922a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801922e:	460f      	mov	r7, r1
 8019230:	88ed      	ldrh	r5, [r5, #6]
 8019232:	bfa8      	it	ge
 8019234:	4637      	movge	r7, r6
 8019236:	4293      	cmp	r3, r2
 8019238:	4618      	mov	r0, r3
 801923a:	4466      	add	r6, ip
 801923c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019240:	bfa8      	it	ge
 8019242:	4610      	movge	r0, r2
 8019244:	442a      	add	r2, r5
 8019246:	88e5      	ldrh	r5, [r4, #6]
 8019248:	4461      	add	r1, ip
 801924a:	b236      	sxth	r6, r6
 801924c:	8027      	strh	r7, [r4, #0]
 801924e:	442b      	add	r3, r5
 8019250:	b209      	sxth	r1, r1
 8019252:	b212      	sxth	r2, r2
 8019254:	8060      	strh	r0, [r4, #2]
 8019256:	b21b      	sxth	r3, r3
 8019258:	428e      	cmp	r6, r1
 801925a:	bfac      	ite	ge
 801925c:	ebc7 0106 	rsbge	r1, r7, r6
 8019260:	ebc7 0101 	rsblt	r1, r7, r1
 8019264:	429a      	cmp	r2, r3
 8019266:	bfac      	ite	ge
 8019268:	ebc0 0202 	rsbge	r2, r0, r2
 801926c:	ebc0 0203 	rsblt	r2, r0, r3
 8019270:	80a1      	strh	r1, [r4, #4]
 8019272:	80e2      	strh	r2, [r4, #6]
 8019274:	e7d1      	b.n	801921a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08019276 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:
 8019276:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019278:	4604      	mov	r4, r0
 801927a:	2200      	movs	r2, #0
 801927c:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 8019280:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 8019284:	680b      	ldr	r3, [r1, #0]
 8019286:	8022      	strh	r2, [r4, #0]
 8019288:	8062      	strh	r2, [r4, #2]
 801928a:	80e0      	strh	r0, [r4, #6]
 801928c:	4668      	mov	r0, sp
 801928e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019292:	80a5      	strh	r5, [r4, #4]
 8019294:	4798      	blx	r3
 8019296:	4620      	mov	r0, r4
 8019298:	4669      	mov	r1, sp
 801929a:	f7ff ffa7 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801929e:	4620      	mov	r0, r4
 80192a0:	b003      	add	sp, #12
 80192a2:	bd30      	pop	{r4, r5, pc}

080192a4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv>:
 80192a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192a6:	2300      	movs	r3, #0
 80192a8:	4605      	mov	r5, r0
 80192aa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80192ac:	f101 0738 	add.w	r7, r1, #56	; 0x38
 80192b0:	f101 0664 	add.w	r6, r1, #100	; 0x64
 80192b4:	8003      	strh	r3, [r0, #0]
 80192b6:	8043      	strh	r3, [r0, #2]
 80192b8:	8083      	strh	r3, [r0, #4]
 80192ba:	80c3      	strh	r3, [r0, #6]
 80192bc:	b164      	cbz	r4, 80192d8 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x34>
 80192be:	42bc      	cmp	r4, r7
 80192c0:	d008      	beq.n	80192d4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80192c2:	42b4      	cmp	r4, r6
 80192c4:	d006      	beq.n	80192d4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80192c6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80192ca:	b11b      	cbz	r3, 80192d4 <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x30>
 80192cc:	1d21      	adds	r1, r4, #4
 80192ce:	4628      	mov	r0, r5
 80192d0:	f7ff ff8c 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80192d4:	69a4      	ldr	r4, [r4, #24]
 80192d6:	e7f1      	b.n	80192bc <_ZNK8touchgfx19ScrollableContainer24getChildrenContainedAreaEv+0x18>
 80192d8:	4628      	mov	r0, r5
 80192da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192dc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
 80192dc:	b530      	push	{r4, r5, lr}
 80192de:	2500      	movs	r5, #0
 80192e0:	6283      	str	r3, [r0, #40]	; 0x28
 80192e2:	8101      	strh	r1, [r0, #8]
 80192e4:	8085      	strh	r5, [r0, #4]
 80192e6:	80c5      	strh	r5, [r0, #6]
 80192e8:	8185      	strh	r5, [r0, #12]
 80192ea:	81c5      	strh	r5, [r0, #14]
 80192ec:	8205      	strh	r5, [r0, #16]
 80192ee:	8245      	strh	r5, [r0, #18]
 80192f0:	61c5      	str	r5, [r0, #28]
 80192f2:	8405      	strh	r5, [r0, #32]
 80192f4:	8445      	strh	r5, [r0, #34]	; 0x22
 80192f6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80192fa:	8142      	strh	r2, [r0, #10]
 80192fc:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8019300:	2501      	movs	r5, #1
 8019302:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8019306:	4d03      	ldr	r5, [pc, #12]	; (8019314 <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x38>)
 8019308:	6005      	str	r5, [r0, #0]
 801930a:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801930e:	f880 5026 	strb.w	r5, [r0, #38]	; 0x26
 8019312:	bd30      	pop	{r4, r5, pc}
 8019314:	080305e4 	.word	0x080305e4

08019318 <_ZN8touchgfx19ScrollableContainerC1Ev>:
 8019318:	4b2f      	ldr	r3, [pc, #188]	; (80193d8 <_ZN8touchgfx19ScrollableContainerC1Ev+0xc0>)
 801931a:	2278      	movs	r2, #120	; 0x78
 801931c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801931e:	6003      	str	r3, [r0, #0]
 8019320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019324:	2500      	movs	r5, #0
 8019326:	2601      	movs	r6, #1
 8019328:	8583      	strh	r3, [r0, #44]	; 0x2c
 801932a:	2111      	movs	r1, #17
 801932c:	f04f 33ff 	mov.w	r3, #4294967295
 8019330:	4604      	mov	r4, r0
 8019332:	8085      	strh	r5, [r0, #4]
 8019334:	80c5      	strh	r5, [r0, #6]
 8019336:	8105      	strh	r5, [r0, #8]
 8019338:	8145      	strh	r5, [r0, #10]
 801933a:	8185      	strh	r5, [r0, #12]
 801933c:	81c5      	strh	r5, [r0, #14]
 801933e:	8205      	strh	r5, [r0, #16]
 8019340:	8245      	strh	r5, [r0, #18]
 8019342:	61c5      	str	r5, [r0, #28]
 8019344:	8405      	strh	r5, [r0, #32]
 8019346:	8445      	strh	r5, [r0, #34]	; 0x22
 8019348:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 801934c:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
 8019350:	6285      	str	r5, [r0, #40]	; 0x28
 8019352:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8019356:	6303      	str	r3, [r0, #48]	; 0x30
 8019358:	8681      	strh	r1, [r0, #52]	; 0x34
 801935a:	4629      	mov	r1, r5
 801935c:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
 8019360:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8019364:	9200      	str	r2, [sp, #0]
 8019366:	3038      	adds	r0, #56	; 0x38
 8019368:	462a      	mov	r2, r5
 801936a:	f7ff ffb7 	bl	80192dc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 801936e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019372:	462a      	mov	r2, r5
 8019374:	4629      	mov	r1, r5
 8019376:	9300      	str	r3, [sp, #0]
 8019378:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801937c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801937e:	f7ff ffad 	bl	80192dc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 8019382:	2305      	movs	r3, #5
 8019384:	4620      	mov	r0, r4
 8019386:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 801938a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801938e:	4b13      	ldr	r3, [pc, #76]	; (80193dc <_ZN8touchgfx19ScrollableContainerC1Ev+0xc4>)
 8019390:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 8019394:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 8019398:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 801939c:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80193a0:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 80193a4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80193a8:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 80193ac:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 80193b0:	f8a4 50b2 	strh.w	r5, [r4, #178]	; 0xb2
 80193b4:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
 80193b8:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 80193bc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80193c0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 80193c4:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80193c8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80193cc:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
 80193d0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 80193d4:	b002      	add	sp, #8
 80193d6:	bd70      	pop	{r4, r5, r6, pc}
 80193d8:	08030028 	.word	0x08030028
 80193dc:	00010007 	.word	0x00010007

080193e0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:
 80193e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193e2:	2600      	movs	r6, #0
 80193e4:	f891 30a4 	ldrb.w	r3, [r1, #164]	; 0xa4
 80193e8:	4605      	mov	r5, r0
 80193ea:	460c      	mov	r4, r1
 80193ec:	8006      	strh	r6, [r0, #0]
 80193ee:	8046      	strh	r6, [r0, #2]
 80193f0:	8086      	strh	r6, [r0, #4]
 80193f2:	80c6      	strh	r6, [r0, #6]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d041      	beq.n	801947c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 80193f8:	680b      	ldr	r3, [r1, #0]
 80193fa:	4668      	mov	r0, sp
 80193fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019400:	4798      	blx	r3
 8019402:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8019406:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d039      	beq.n	8019482 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0xa2>
 801940e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019412:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8019416:	429a      	cmp	r2, r3
 8019418:	dd05      	ble.n	8019426 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>
 801941a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801941e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8019422:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8019426:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801942a:	42bb      	cmp	r3, r7
 801942c:	da26      	bge.n	801947c <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x9c>
 801942e:	f9bd 0000 	ldrsh.w	r0, [sp]
 8019432:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019436:	4242      	negs	r2, r0
 8019438:	4438      	add	r0, r7
 801943a:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 801943e:	b200      	sxth	r0, r0
 8019440:	435a      	muls	r2, r3
 8019442:	1b9e      	subs	r6, r3, r6
 8019444:	1ac0      	subs	r0, r0, r3
 8019446:	4343      	muls	r3, r0
 8019448:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 801944c:	fb92 f2f7 	sdiv	r2, r2, r7
 8019450:	fb93 f3f7 	sdiv	r3, r3, r7
 8019454:	4413      	add	r3, r2
 8019456:	0047      	lsls	r7, r0, #1
 8019458:	1af3      	subs	r3, r6, r3
 801945a:	429f      	cmp	r7, r3
 801945c:	dd05      	ble.n	801946a <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x8a>
 801945e:	1afb      	subs	r3, r7, r3
 8019460:	4353      	muls	r3, r2
 8019462:	fb93 f3f6 	sdiv	r3, r3, r6
 8019466:	1ad2      	subs	r2, r2, r3
 8019468:	463b      	mov	r3, r7
 801946a:	b289      	uxth	r1, r1
 801946c:	8964      	ldrh	r4, [r4, #10]
 801946e:	80ab      	strh	r3, [r5, #4]
 8019470:	180e      	adds	r6, r1, r0
 8019472:	4411      	add	r1, r2
 8019474:	80e8      	strh	r0, [r5, #6]
 8019476:	1ba4      	subs	r4, r4, r6
 8019478:	8029      	strh	r1, [r5, #0]
 801947a:	806c      	strh	r4, [r5, #2]
 801947c:	4628      	mov	r0, r5
 801947e:	b003      	add	sp, #12
 8019480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019482:	461e      	mov	r6, r3
 8019484:	e7cf      	b.n	8019426 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x46>

08019486 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:
 8019486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019488:	2600      	movs	r6, #0
 801948a:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
 801948e:	4605      	mov	r5, r0
 8019490:	460c      	mov	r4, r1
 8019492:	8006      	strh	r6, [r0, #0]
 8019494:	8046      	strh	r6, [r0, #2]
 8019496:	8086      	strh	r6, [r0, #4]
 8019498:	80c6      	strh	r6, [r0, #6]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d041      	beq.n	8019522 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 801949e:	680b      	ldr	r3, [r1, #0]
 80194a0:	4668      	mov	r0, sp
 80194a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80194a6:	4798      	blx	r3
 80194a8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80194ac:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d039      	beq.n	8019528 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0xa2>
 80194b4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80194b8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80194bc:	429a      	cmp	r2, r3
 80194be:	dd05      	ble.n	80194cc <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>
 80194c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80194c4:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80194c8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80194cc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80194d0:	42bb      	cmp	r3, r7
 80194d2:	da26      	bge.n	8019522 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x9c>
 80194d4:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80194d8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80194dc:	4242      	negs	r2, r0
 80194de:	4438      	add	r0, r7
 80194e0:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 80194e4:	b200      	sxth	r0, r0
 80194e6:	435a      	muls	r2, r3
 80194e8:	1b9e      	subs	r6, r3, r6
 80194ea:	1ac0      	subs	r0, r0, r3
 80194ec:	4343      	muls	r3, r0
 80194ee:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80194f2:	fb92 f2f7 	sdiv	r2, r2, r7
 80194f6:	fb93 f3f7 	sdiv	r3, r3, r7
 80194fa:	4413      	add	r3, r2
 80194fc:	0047      	lsls	r7, r0, #1
 80194fe:	1af3      	subs	r3, r6, r3
 8019500:	429f      	cmp	r7, r3
 8019502:	dd05      	ble.n	8019510 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x8a>
 8019504:	1afb      	subs	r3, r7, r3
 8019506:	4353      	muls	r3, r2
 8019508:	fb93 f3f6 	sdiv	r3, r3, r6
 801950c:	1ad2      	subs	r2, r2, r3
 801950e:	463b      	mov	r3, r7
 8019510:	b289      	uxth	r1, r1
 8019512:	8924      	ldrh	r4, [r4, #8]
 8019514:	80a8      	strh	r0, [r5, #4]
 8019516:	180e      	adds	r6, r1, r0
 8019518:	4411      	add	r1, r2
 801951a:	80eb      	strh	r3, [r5, #6]
 801951c:	1ba4      	subs	r4, r4, r6
 801951e:	8069      	strh	r1, [r5, #2]
 8019520:	802c      	strh	r4, [r5, #0]
 8019522:	4628      	mov	r0, r5
 8019524:	b003      	add	sp, #12
 8019526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019528:	461e      	mov	r6, r3
 801952a:	e7cf      	b.n	80194cc <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x46>

0801952c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:
 801952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019530:	4617      	mov	r7, r2
 8019532:	2200      	movs	r2, #0
 8019534:	4604      	mov	r4, r0
 8019536:	460e      	mov	r6, r1
 8019538:	8002      	strh	r2, [r0, #0]
 801953a:	4698      	mov	r8, r3
 801953c:	8042      	strh	r2, [r0, #2]
 801953e:	8082      	strh	r2, [r0, #4]
 8019540:	80c2      	strh	r2, [r0, #6]
 8019542:	4638      	mov	r0, r7
 8019544:	f7ff f937 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019548:	4605      	mov	r5, r0
 801954a:	b998      	cbnz	r0, 8019574 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x48>
 801954c:	4640      	mov	r0, r8
 801954e:	f7ff f932 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019552:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
 8019556:	f896 102d 	ldrb.w	r1, [r6, #45]	; 0x2d
 801955a:	b908      	cbnz	r0, 8019560 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x34>
 801955c:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8019560:	8933      	ldrh	r3, [r6, #8]
 8019562:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
 8019566:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801956a:	8022      	strh	r2, [r4, #0]
 801956c:	8067      	strh	r7, [r4, #2]
 801956e:	1b58      	subs	r0, r3, r5
 8019570:	80e1      	strh	r1, [r4, #6]
 8019572:	80a0      	strh	r0, [r4, #4]
 8019574:	4620      	mov	r0, r4
 8019576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801957a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:
 801957a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801957e:	4604      	mov	r4, r0
 8019580:	2000      	movs	r0, #0
 8019582:	460f      	mov	r7, r1
 8019584:	4616      	mov	r6, r2
 8019586:	8020      	strh	r0, [r4, #0]
 8019588:	4698      	mov	r8, r3
 801958a:	8060      	strh	r0, [r4, #2]
 801958c:	80a0      	strh	r0, [r4, #4]
 801958e:	80e0      	strh	r0, [r4, #6]
 8019590:	4618      	mov	r0, r3
 8019592:	f7ff f910 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019596:	4605      	mov	r5, r0
 8019598:	b998      	cbnz	r0, 80195c2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x48>
 801959a:	4630      	mov	r0, r6
 801959c:	f7ff f90b 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80195a0:	f897 602c 	ldrb.w	r6, [r7, #44]	; 0x2c
 80195a4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80195a8:	b908      	cbnz	r0, 80195ae <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x34>
 80195aa:	eb01 0546 	add.w	r5, r1, r6, lsl #1
 80195ae:	897a      	ldrh	r2, [r7, #10]
 80195b0:	f8b8 3000 	ldrh.w	r3, [r8]
 80195b4:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
 80195b8:	8066      	strh	r6, [r4, #2]
 80195ba:	8023      	strh	r3, [r4, #0]
 80195bc:	1b50      	subs	r0, r2, r5
 80195be:	80a1      	strh	r1, [r4, #4]
 80195c0:	80e0      	strh	r0, [r4, #6]
 80195c2:	4620      	mov	r0, r4
 80195c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080195c8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:
 80195c8:	b570      	push	{r4, r5, r6, lr}
 80195ca:	b088      	sub	sp, #32
 80195cc:	4604      	mov	r4, r0
 80195ce:	4601      	mov	r1, r0
 80195d0:	4668      	mov	r0, sp
 80195d2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80195d6:	f7ff ff03 	bl	80193e0 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
 80195da:	4621      	mov	r1, r4
 80195dc:	a802      	add	r0, sp, #8
 80195de:	f7ff ff52 	bl	8019486 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>
 80195e2:	ab02      	add	r3, sp, #8
 80195e4:	466a      	mov	r2, sp
 80195e6:	4621      	mov	r1, r4
 80195e8:	a804      	add	r0, sp, #16
 80195ea:	f7ff ff9f 	bl	801952c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
 80195ee:	ab02      	add	r3, sp, #8
 80195f0:	466a      	mov	r2, sp
 80195f2:	4621      	mov	r1, r4
 80195f4:	a806      	add	r0, sp, #24
 80195f6:	f7ff ffc0 	bl	801957a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>
 80195fa:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80195fe:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8019602:	429a      	cmp	r2, r3
 8019604:	da02      	bge.n	801960c <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x44>
 8019606:	4630      	mov	r0, r6
 8019608:	f005 feae 	bl	801f368 <_ZNK8touchgfx8Drawable10invalidateEv>
 801960c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8019610:	f104 0564 	add.w	r5, r4, #100	; 0x64
 8019614:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8019618:	429a      	cmp	r2, r3
 801961a:	da02      	bge.n	8019622 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x5a>
 801961c:	4628      	mov	r0, r5
 801961e:	f005 fea3 	bl	801f368 <_ZNK8touchgfx8Drawable10invalidateEv>
 8019622:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8019626:	f8bd 0000 	ldrh.w	r0, [sp]
 801962a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801962e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019632:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8019634:	4630      	mov	r0, r6
 8019636:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8019638:	f7f8 fd4b 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801963c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8019640:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8019644:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8019648:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801964c:	4628      	mov	r0, r5
 801964e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8019652:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8019656:	f7f8 fd3c 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801965a:	8922      	ldrh	r2, [r4, #8]
 801965c:	2300      	movs	r3, #0
 801965e:	a804      	add	r0, sp, #16
 8019660:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019664:	8962      	ldrh	r2, [r4, #10]
 8019666:	f8ad 3010 	strh.w	r3, [sp, #16]
 801966a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801966e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019672:	f7ff f8a0 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019676:	b920      	cbnz	r0, 8019682 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xba>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	a904      	add	r1, sp, #16
 801967c:	4620      	mov	r0, r4
 801967e:	691b      	ldr	r3, [r3, #16]
 8019680:	4798      	blx	r3
 8019682:	a806      	add	r0, sp, #24
 8019684:	f7ff f897 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019688:	b920      	cbnz	r0, 8019694 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0xcc>
 801968a:	6823      	ldr	r3, [r4, #0]
 801968c:	a906      	add	r1, sp, #24
 801968e:	4620      	mov	r0, r4
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	4798      	blx	r3
 8019694:	b008      	add	sp, #32
 8019696:	bd70      	pop	{r4, r5, r6, pc}

08019698 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:
 8019698:	b570      	push	{r4, r5, r6, lr}
 801969a:	790b      	ldrb	r3, [r1, #4]
 801969c:	b08a      	sub	sp, #40	; 0x28
 801969e:	4604      	mov	r4, r0
 80196a0:	460d      	mov	r5, r1
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d17e      	bne.n	80197a4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x10c>
 80196a6:	2201      	movs	r2, #1
 80196a8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
 80196ac:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 80196b0:	b142      	cbz	r2, 80196c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2c>
 80196b2:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80196b6:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
 80196ba:	f004 fe81 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 80196be:	4621      	mov	r1, r4
 80196c0:	f004 fea9 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 80196c4:	4623      	mov	r3, r4
 80196c6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80196ca:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80196ce:	f853 0bb4 	ldr.w	r0, [r3], #180
 80196d2:	9301      	str	r3, [sp, #4]
 80196d4:	f104 03b2 	add.w	r3, r4, #178	; 0xb2
 80196d8:	9300      	str	r3, [sp, #0]
 80196da:	f104 0390 	add.w	r3, r4, #144	; 0x90
 80196de:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80196e0:	4620      	mov	r0, r4
 80196e2:	47b0      	blx	r6
 80196e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80196e8:	42a3      	cmp	r3, r4
 80196ea:	bf04      	itt	eq
 80196ec:	2300      	moveq	r3, #0
 80196ee:	f8c4 3090 	streq.w	r3, [r4, #144]	; 0x90
 80196f2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80196f6:	2900      	cmp	r1, #0
 80196f8:	d03a      	beq.n	8019770 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 80196fa:	2600      	movs	r6, #0
 80196fc:	a803      	add	r0, sp, #12
 80196fe:	f884 60b6 	strb.w	r6, [r4, #182]	; 0xb6
 8019702:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019706:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801970a:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801970e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8019712:	f005 fec5 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019716:	4621      	mov	r1, r4
 8019718:	a805      	add	r0, sp, #20
 801971a:	f005 fec1 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801971e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019722:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019726:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801972a:	1ad2      	subs	r2, r2, r3
 801972c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8019730:	7929      	ldrb	r1, [r5, #4]
 8019732:	441a      	add	r2, r3
 8019734:	88eb      	ldrh	r3, [r5, #6]
 8019736:	f88d 1020 	strb.w	r1, [sp, #32]
 801973a:	a907      	add	r1, sp, #28
 801973c:	441a      	add	r2, r3
 801973e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8019742:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8019746:	1a1b      	subs	r3, r3, r0
 8019748:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 801974c:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8019750:	4403      	add	r3, r0
 8019752:	8928      	ldrh	r0, [r5, #8]
 8019754:	4403      	add	r3, r0
 8019756:	482f      	ldr	r0, [pc, #188]	; (8019814 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 8019758:	9007      	str	r0, [sp, #28]
 801975a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801975e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019762:	6803      	ldr	r3, [r0, #0]
 8019764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019766:	4798      	blx	r3
 8019768:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801976c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8019770:	2300      	movs	r3, #0
 8019772:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
 8019776:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 801977a:	b112      	cbz	r2, 8019782 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xea>
 801977c:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8019780:	b90b      	cbnz	r3, 8019786 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xee>
 8019782:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8019786:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 801978a:	b112      	cbz	r2, 8019792 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfa>
 801978c:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
 8019790:	b90b      	cbnz	r3, 8019796 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xfe>
 8019792:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
 8019796:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 801979a:	4620      	mov	r0, r4
 801979c:	f7ff ff14 	bl	80195c8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 80197a0:	b00a      	add	sp, #40	; 0x28
 80197a2:	bd70      	pop	{r4, r5, r6, pc}
 80197a4:	2b02      	cmp	r3, #2
 80197a6:	d0fb      	beq.n	80197a0 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x108>
 80197a8:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
 80197ac:	b361      	cbz	r1, 8019808 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x170>
 80197ae:	a803      	add	r0, sp, #12
 80197b0:	f005 fe76 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197b4:	4621      	mov	r1, r4
 80197b6:	a805      	add	r0, sp, #20
 80197b8:	f005 fe72 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80197c0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80197c4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80197c8:	1ad2      	subs	r2, r2, r3
 80197ca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80197ce:	7929      	ldrb	r1, [r5, #4]
 80197d0:	441a      	add	r2, r3
 80197d2:	88eb      	ldrh	r3, [r5, #6]
 80197d4:	f88d 1020 	strb.w	r1, [sp, #32]
 80197d8:	a907      	add	r1, sp, #28
 80197da:	441a      	add	r2, r3
 80197dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197e0:	1a1b      	subs	r3, r3, r0
 80197e2:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
 80197e6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 80197ea:	4403      	add	r3, r0
 80197ec:	8928      	ldrh	r0, [r5, #8]
 80197ee:	4403      	add	r3, r0
 80197f0:	4808      	ldr	r0, [pc, #32]	; (8019814 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x17c>)
 80197f2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80197f6:	2300      	movs	r3, #0
 80197f8:	9007      	str	r0, [sp, #28]
 80197fa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80197fe:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019806:	4798      	blx	r3
 8019808:	2300      	movs	r3, #0
 801980a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
 801980e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8019812:	e7ad      	b.n	8019770 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xd8>
 8019814:	08030000 	.word	0x08030000

08019818 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:
 8019818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801981a:	4606      	mov	r6, r0
 801981c:	4615      	mov	r5, r2
 801981e:	460c      	mov	r4, r1
 8019820:	b919      	cbnz	r1, 801982a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8019822:	b912      	cbnz	r2, 801982a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x12>
 8019824:	2000      	movs	r0, #0
 8019826:	b003      	add	sp, #12
 8019828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801982a:	6833      	ldr	r3, [r6, #0]
 801982c:	4631      	mov	r1, r6
 801982e:	4668      	mov	r0, sp
 8019830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019834:	4798      	blx	r3
 8019836:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801983a:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 801983e:	f9bd 2000 	ldrsh.w	r2, [sp]
 8019842:	4288      	cmp	r0, r1
 8019844:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8019848:	da2c      	bge.n	80198a4 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x8c>
 801984a:	2c00      	cmp	r4, #0
 801984c:	dd20      	ble.n	8019890 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x78>
 801984e:	1913      	adds	r3, r2, r4
 8019850:	2b00      	cmp	r3, #0
 8019852:	dd01      	ble.n	8019858 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8019854:	4252      	negs	r2, r2
 8019856:	b214      	sxth	r4, r2
 8019858:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 801985c:	4297      	cmp	r7, r2
 801985e:	dd2c      	ble.n	80198ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 8019860:	2d00      	cmp	r5, #0
 8019862:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8019866:	dd1f      	ble.n	80198a8 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x90>
 8019868:	195a      	adds	r2, r3, r5
 801986a:	2a00      	cmp	r2, #0
 801986c:	dd04      	ble.n	8019878 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 801986e:	425b      	negs	r3, r3
 8019870:	b21d      	sxth	r5, r3
 8019872:	b90c      	cbnz	r4, 8019878 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 8019874:	2d00      	cmp	r5, #0
 8019876:	d0d5      	beq.n	8019824 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 8019878:	6833      	ldr	r3, [r6, #0]
 801987a:	462a      	mov	r2, r5
 801987c:	4621      	mov	r1, r4
 801987e:	4630      	mov	r0, r6
 8019880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019884:	4798      	blx	r3
 8019886:	4630      	mov	r0, r6
 8019888:	f7ff fe9e 	bl	80195c8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 801988c:	2001      	movs	r0, #1
 801988e:	e7ca      	b.n	8019826 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xe>
 8019890:	d0e2      	beq.n	8019858 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 8019892:	440a      	add	r2, r1
 8019894:	b292      	uxth	r2, r2
 8019896:	fa04 f382 	sxtah	r3, r4, r2
 801989a:	4283      	cmp	r3, r0
 801989c:	dadc      	bge.n	8019858 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 801989e:	1a84      	subs	r4, r0, r2
 80198a0:	b224      	sxth	r4, r4
 80198a2:	e7d9      	b.n	8019858 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80198a4:	2400      	movs	r4, #0
 80198a6:	e7d7      	b.n	8019858 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x40>
 80198a8:	d007      	beq.n	80198ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xa2>
 80198aa:	443b      	add	r3, r7
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	fa05 f183 	sxtah	r1, r5, r3
 80198b2:	4291      	cmp	r1, r2
 80198b4:	dae0      	bge.n	8019878 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>
 80198b6:	1ad3      	subs	r3, r2, r3
 80198b8:	e7da      	b.n	8019870 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x58>
 80198ba:	2c00      	cmp	r4, #0
 80198bc:	d0b2      	beq.n	8019824 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc>
 80198be:	2500      	movs	r5, #0
 80198c0:	e7da      	b.n	8019878 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x60>

080198c2 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:
 80198c2:	b513      	push	{r0, r1, r4, lr}
 80198c4:	6803      	ldr	r3, [r0, #0]
 80198c6:	4601      	mov	r1, r0
 80198c8:	4604      	mov	r4, r0
 80198ca:	4668      	mov	r0, sp
 80198cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80198d0:	4798      	blx	r3
 80198d2:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80198d6:	f9bd 1000 	ldrsh.w	r1, [sp]
 80198da:	2800      	cmp	r0, #0
 80198dc:	dd20      	ble.n	8019920 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
 80198de:	4602      	mov	r2, r0
 80198e0:	2900      	cmp	r1, #0
 80198e2:	dc0e      	bgt.n	8019902 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 80198e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80198e8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80198ec:	440b      	add	r3, r1
 80198ee:	b21b      	sxth	r3, r3
 80198f0:	4298      	cmp	r0, r3
 80198f2:	dd04      	ble.n	80198fe <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
 80198f4:	1a1b      	subs	r3, r3, r0
 80198f6:	4299      	cmp	r1, r3
 80198f8:	bfb8      	it	lt
 80198fa:	4619      	movlt	r1, r3
 80198fc:	b909      	cbnz	r1, 8019902 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x40>
 80198fe:	b1f2      	cbz	r2, 801993e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x7c>
 8019900:	2100      	movs	r1, #0
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	4252      	negs	r2, r2
 8019906:	4249      	negs	r1, r1
 8019908:	4620      	mov	r0, r4
 801990a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801990e:	b212      	sxth	r2, r2
 8019910:	b209      	sxth	r1, r1
 8019912:	4798      	blx	r3
 8019914:	4620      	mov	r0, r4
 8019916:	b002      	add	sp, #8
 8019918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801991c:	f7ff be54 	b.w	80195c8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 8019920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019924:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8019928:	4403      	add	r3, r0
 801992a:	b21b      	sxth	r3, r3
 801992c:	429a      	cmp	r2, r3
 801992e:	dd04      	ble.n	801993a <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x78>
 8019930:	1a9a      	subs	r2, r3, r2
 8019932:	4282      	cmp	r2, r0
 8019934:	bfb8      	it	lt
 8019936:	4602      	movlt	r2, r0
 8019938:	e7d2      	b.n	80198e0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801993a:	2200      	movs	r2, #0
 801993c:	e7d0      	b.n	80198e0 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x1e>
 801993e:	b002      	add	sp, #8
 8019940:	bd10      	pop	{r4, pc}

08019942 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:
 8019942:	6301      	str	r1, [r0, #48]	; 0x30
 8019944:	6601      	str	r1, [r0, #96]	; 0x60
 8019946:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801994a:	4770      	bx	lr

0801994c <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEb>:
 801994c:	2201      	movs	r2, #1
 801994e:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
 8019952:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
 8019956:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 801995a:	f7ff be35 	b.w	80195c8 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>

0801995e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801995e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019962:	4770      	bx	lr

08019964 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8019964:	4770      	bx	lr

08019966 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8019966:	4770      	bx	lr

08019968 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019968:	6803      	ldr	r3, [r0, #0]
 801996a:	b513      	push	{r0, r1, r4, lr}
 801996c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8019970:	2300      	movs	r3, #0
 8019972:	e9cd 3300 	strd	r3, r3, [sp]
 8019976:	466b      	mov	r3, sp
 8019978:	47a0      	blx	r4
 801997a:	b002      	add	sp, #8
 801997c:	bd10      	pop	{r4, pc}

0801997e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801997e:	2301      	movs	r3, #1
 8019980:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019984:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019988:	4770      	bx	lr

0801998a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801998a:	2301      	movs	r3, #1
 801998c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019990:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019994:	4770      	bx	lr

08019996 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019996:	6843      	ldr	r3, [r0, #4]
 8019998:	2201      	movs	r2, #1
 801999a:	725a      	strb	r2, [r3, #9]
 801999c:	6840      	ldr	r0, [r0, #4]
 801999e:	6803      	ldr	r3, [r0, #0]
 80199a0:	691b      	ldr	r3, [r3, #16]
 80199a2:	4718      	bx	r3

080199a4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80199a4:	6840      	ldr	r0, [r0, #4]
 80199a6:	6803      	ldr	r3, [r0, #0]
 80199a8:	689b      	ldr	r3, [r3, #8]
 80199aa:	4718      	bx	r3

080199ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80199ac:	b530      	push	{r4, r5, lr}
 80199ae:	b08b      	sub	sp, #44	; 0x2c
 80199b0:	6804      	ldr	r4, [r0, #0]
 80199b2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80199b6:	9509      	str	r5, [sp, #36]	; 0x24
 80199b8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80199bc:	9508      	str	r5, [sp, #32]
 80199be:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80199c2:	9507      	str	r5, [sp, #28]
 80199c4:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80199c8:	9506      	str	r5, [sp, #24]
 80199ca:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80199ce:	9505      	str	r5, [sp, #20]
 80199d0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80199d4:	9504      	str	r5, [sp, #16]
 80199d6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80199da:	9503      	str	r5, [sp, #12]
 80199dc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80199e0:	9502      	str	r5, [sp, #8]
 80199e2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80199e6:	e9cd 3500 	strd	r3, r5, [sp]
 80199ea:	4613      	mov	r3, r2
 80199ec:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80199ee:	2200      	movs	r2, #0
 80199f0:	47a0      	blx	r4
 80199f2:	b00b      	add	sp, #44	; 0x2c
 80199f4:	bd30      	pop	{r4, r5, pc}
	...

080199f8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80199f8:	4b04      	ldr	r3, [pc, #16]	; (8019a0c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80199fa:	781b      	ldrb	r3, [r3, #0]
 80199fc:	b123      	cbz	r3, 8019a08 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80199fe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019a02:	f080 0001 	eor.w	r0, r0, #1
 8019a06:	4770      	bx	lr
 8019a08:	2001      	movs	r0, #1
 8019a0a:	4770      	bx	lr
 8019a0c:	2400d82a 	.word	0x2400d82a

08019a10 <_ZN8touchgfx3HAL8endFrameEv>:
 8019a10:	b510      	push	{r4, lr}
 8019a12:	4604      	mov	r4, r0
 8019a14:	6840      	ldr	r0, [r0, #4]
 8019a16:	6803      	ldr	r3, [r0, #0]
 8019a18:	689b      	ldr	r3, [r3, #8]
 8019a1a:	4798      	blx	r3
 8019a1c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019a20:	b113      	cbz	r3, 8019a28 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019a22:	2301      	movs	r3, #1
 8019a24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019a28:	bd10      	pop	{r4, pc}

08019a2a <_ZN8touchgfx3HAL10initializeEv>:
 8019a2a:	b510      	push	{r4, lr}
 8019a2c:	4604      	mov	r4, r0
 8019a2e:	f7fc ff17 	bl	8016860 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019a32:	6860      	ldr	r0, [r4, #4]
 8019a34:	6803      	ldr	r3, [r0, #0]
 8019a36:	68db      	ldr	r3, [r3, #12]
 8019a38:	4798      	blx	r3
 8019a3a:	68e0      	ldr	r0, [r4, #12]
 8019a3c:	6803      	ldr	r3, [r0, #0]
 8019a3e:	689b      	ldr	r3, [r3, #8]
 8019a40:	4798      	blx	r3
 8019a42:	6823      	ldr	r3, [r4, #0]
 8019a44:	4620      	mov	r0, r4
 8019a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a4c:	4718      	bx	r3

08019a4e <_ZN8touchgfx3HAL9taskEntryEv>:
 8019a4e:	b508      	push	{r3, lr}
 8019a50:	6803      	ldr	r3, [r0, #0]
 8019a52:	4604      	mov	r4, r0
 8019a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019a58:	4798      	blx	r3
 8019a5a:	6823      	ldr	r3, [r4, #0]
 8019a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019a5e:	4620      	mov	r0, r4
 8019a60:	4798      	blx	r3
 8019a62:	f7fc ff65 	bl	8016930 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019a66:	6823      	ldr	r3, [r4, #0]
 8019a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a6a:	e7f8      	b.n	8019a5e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08019a6c <_ZN8touchgfx3HAL4tickEv>:
 8019a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019a6e:	6803      	ldr	r3, [r0, #0]
 8019a70:	4604      	mov	r4, r0
 8019a72:	4d5b      	ldr	r5, [pc, #364]	; (8019be0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8019a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019a78:	4798      	blx	r3
 8019a7a:	2800      	cmp	r0, #0
 8019a7c:	f000 8095 	beq.w	8019baa <_ZN8touchgfx3HAL4tickEv+0x13e>
 8019a80:	2001      	movs	r0, #1
 8019a82:	2600      	movs	r6, #0
 8019a84:	f7fc fc5c 	bl	8016340 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019a88:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8019a8c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8019a90:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019a94:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8019a98:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8019a9c:	b133      	cbz	r3, 8019aac <_ZN8touchgfx3HAL4tickEv+0x40>
 8019a9e:	6823      	ldr	r3, [r4, #0]
 8019aa0:	4620      	mov	r0, r4
 8019aa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019aa6:	4798      	blx	r3
 8019aa8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8019aac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019ab0:	2601      	movs	r6, #1
 8019ab2:	6862      	ldr	r2, [r4, #4]
 8019ab4:	f083 0301 	eor.w	r3, r3, #1
 8019ab8:	702e      	strb	r6, [r5, #0]
 8019aba:	7253      	strb	r3, [r2, #9]
 8019abc:	f004 fc80 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019ac0:	6803      	ldr	r3, [r0, #0]
 8019ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ac4:	4798      	blx	r3
 8019ac6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019aca:	b90b      	cbnz	r3, 8019ad0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8019acc:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8019ad0:	f004 fc76 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019ad4:	6803      	ldr	r3, [r0, #0]
 8019ad6:	695b      	ldr	r3, [r3, #20]
 8019ad8:	4798      	blx	r3
 8019ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019adc:	6803      	ldr	r3, [r0, #0]
 8019ade:	691b      	ldr	r3, [r3, #16]
 8019ae0:	4798      	blx	r3
 8019ae2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019ae6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019aea:	3b01      	subs	r3, #1
 8019aec:	b2db      	uxtb	r3, r3
 8019aee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019af2:	b10a      	cbz	r2, 8019af8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d1eb      	bne.n	8019ad0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8019af8:	4a3a      	ldr	r2, [pc, #232]	; (8019be4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8019afa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8019afe:	7813      	ldrb	r3, [r2, #0]
 8019b00:	3301      	adds	r3, #1
 8019b02:	b25b      	sxtb	r3, r3
 8019b04:	4299      	cmp	r1, r3
 8019b06:	7013      	strb	r3, [r2, #0]
 8019b08:	dc10      	bgt.n	8019b2c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	68e0      	ldr	r0, [r4, #12]
 8019b0e:	a902      	add	r1, sp, #8
 8019b10:	7013      	strb	r3, [r2, #0]
 8019b12:	aa03      	add	r2, sp, #12
 8019b14:	6803      	ldr	r3, [r0, #0]
 8019b16:	68db      	ldr	r3, [r3, #12]
 8019b18:	4798      	blx	r3
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	2800      	cmp	r0, #0
 8019b1e:	d050      	beq.n	8019bc2 <_ZN8touchgfx3HAL4tickEv+0x156>
 8019b20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b24:	4620      	mov	r0, r4
 8019b26:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019b2a:	4798      	blx	r3
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	6960      	ldr	r0, [r4, #20]
 8019b30:	f88d 3007 	strb.w	r3, [sp, #7]
 8019b34:	b158      	cbz	r0, 8019b4e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019b36:	6803      	ldr	r3, [r0, #0]
 8019b38:	f10d 0107 	add.w	r1, sp, #7
 8019b3c:	68db      	ldr	r3, [r3, #12]
 8019b3e:	4798      	blx	r3
 8019b40:	b128      	cbz	r0, 8019b4e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019b42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b44:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019b48:	6803      	ldr	r3, [r0, #0]
 8019b4a:	68db      	ldr	r3, [r3, #12]
 8019b4c:	4798      	blx	r3
 8019b4e:	f104 001c 	add.w	r0, r4, #28
 8019b52:	f012 fbb7 	bl	802c2c4 <_ZN8touchgfx8Gestures4tickEv>
 8019b56:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8019b5a:	b30b      	cbz	r3, 8019ba0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8019b5c:	6920      	ldr	r0, [r4, #16]
 8019b5e:	6803      	ldr	r3, [r0, #0]
 8019b60:	691b      	ldr	r3, [r3, #16]
 8019b62:	4798      	blx	r3
 8019b64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019b66:	4606      	mov	r6, r0
 8019b68:	b903      	cbnz	r3, 8019b6c <_ZN8touchgfx3HAL4tickEv+0x100>
 8019b6a:	6720      	str	r0, [r4, #112]	; 0x70
 8019b6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019b6e:	4a1e      	ldr	r2, [pc, #120]	; (8019be8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019b70:	1af3      	subs	r3, r6, r3
 8019b72:	4293      	cmp	r3, r2
 8019b74:	d914      	bls.n	8019ba0 <_ZN8touchgfx3HAL4tickEv+0x134>
 8019b76:	6920      	ldr	r0, [r4, #16]
 8019b78:	6803      	ldr	r3, [r0, #0]
 8019b7a:	699b      	ldr	r3, [r3, #24]
 8019b7c:	4798      	blx	r3
 8019b7e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019b80:	2264      	movs	r2, #100	; 0x64
 8019b82:	1af3      	subs	r3, r6, r3
 8019b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b88:	fbb0 f0f3 	udiv	r0, r0, r3
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	dc1d      	bgt.n	8019bcc <_ZN8touchgfx3HAL4tickEv+0x160>
 8019b90:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019b94:	6920      	ldr	r0, [r4, #16]
 8019b96:	2100      	movs	r1, #0
 8019b98:	6803      	ldr	r3, [r0, #0]
 8019b9a:	69db      	ldr	r3, [r3, #28]
 8019b9c:	4798      	blx	r3
 8019b9e:	6726      	str	r6, [r4, #112]	; 0x70
 8019ba0:	f004 fc0e 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019ba4:	6803      	ldr	r3, [r0, #0]
 8019ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ba8:	4798      	blx	r3
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	4620      	mov	r0, r4
 8019bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019bb2:	4798      	blx	r3
 8019bb4:	2001      	movs	r0, #1
 8019bb6:	f7fc fbdf 	bl	8016378 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019bba:	2300      	movs	r3, #0
 8019bbc:	702b      	strb	r3, [r5, #0]
 8019bbe:	b004      	add	sp, #16
 8019bc0:	bd70      	pop	{r4, r5, r6, pc}
 8019bc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	4798      	blx	r3
 8019bca:	e7af      	b.n	8019b2c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019bcc:	2863      	cmp	r0, #99	; 0x63
 8019bce:	bfcb      	itete	gt
 8019bd0:	2300      	movgt	r3, #0
 8019bd2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019bd6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8019bda:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019bde:	e7d9      	b.n	8019b94 <_ZN8touchgfx3HAL4tickEv+0x128>
 8019be0:	2400d830 	.word	0x2400d830
 8019be4:	2400d831 	.word	0x2400d831
 8019be8:	05f5e100 	.word	0x05f5e100

08019bec <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019bec:	f7fc be7c 	b.w	80168e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019bf0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019bf0:	6581      	str	r1, [r0, #88]	; 0x58
 8019bf2:	301c      	adds	r0, #28
 8019bf4:	f012 bb64 	b.w	802c2c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019bf8 <_ZN8touchgfx3HAL5touchEll>:
 8019bf8:	b530      	push	{r4, r5, lr}
 8019bfa:	b087      	sub	sp, #28
 8019bfc:	4604      	mov	r4, r0
 8019bfe:	a804      	add	r0, sp, #16
 8019c00:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019c04:	f004 f9a8 	bl	801df58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019c08:	9b04      	ldr	r3, [sp, #16]
 8019c0a:	a906      	add	r1, sp, #24
 8019c0c:	a803      	add	r0, sp, #12
 8019c0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019c12:	9b05      	ldr	r3, [sp, #20]
 8019c14:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019c18:	f004 f9f0 	bl	801dffc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019c1c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019c20:	f104 001c 	add.w	r0, r4, #28
 8019c24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019c28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019c2c:	b189      	cbz	r1, 8019c52 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8019c2e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019c32:	9300      	str	r3, [sp, #0]
 8019c34:	4613      	mov	r3, r2
 8019c36:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019c3a:	462a      	mov	r2, r5
 8019c3c:	f012 fb50 	bl	802c2e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019c40:	b128      	cbz	r0, 8019c4e <_ZN8touchgfx3HAL5touchEll+0x56>
 8019c42:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019c46:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019c48:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019c4c:	6623      	str	r3, [r4, #96]	; 0x60
 8019c4e:	b007      	add	sp, #28
 8019c50:	bd30      	pop	{r4, r5, pc}
 8019c52:	f012 fb85 	bl	802c360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019c56:	2301      	movs	r3, #1
 8019c58:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019c5c:	e7f1      	b.n	8019c42 <_ZN8touchgfx3HAL5touchEll+0x4a>

08019c5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8019c5e:	b510      	push	{r4, lr}
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d046      	beq.n	8019cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019c64:	ea81 0002 	eor.w	r0, r1, r2
 8019c68:	07c4      	lsls	r4, r0, #31
 8019c6a:	d508      	bpl.n	8019c7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8019c6c:	440b      	add	r3, r1
 8019c6e:	3a01      	subs	r2, #1
 8019c70:	428b      	cmp	r3, r1
 8019c72:	d93e      	bls.n	8019cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019c74:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019c78:	f801 0b01 	strb.w	r0, [r1], #1
 8019c7c:	e7f8      	b.n	8019c70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8019c7e:	07d0      	lsls	r0, r2, #31
 8019c80:	bf42      	ittt	mi
 8019c82:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019c86:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8019c8a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	d911      	bls.n	8019cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019c92:	ea81 0402 	eor.w	r4, r1, r2
 8019c96:	4610      	mov	r0, r2
 8019c98:	07a4      	lsls	r4, r4, #30
 8019c9a:	d022      	beq.n	8019ce2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8019c9c:	f023 0401 	bic.w	r4, r3, #1
 8019ca0:	440c      	add	r4, r1
 8019ca2:	428c      	cmp	r4, r1
 8019ca4:	4602      	mov	r2, r0
 8019ca6:	d904      	bls.n	8019cb2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019ca8:	8812      	ldrh	r2, [r2, #0]
 8019caa:	3002      	adds	r0, #2
 8019cac:	f821 2b02 	strh.w	r2, [r1], #2
 8019cb0:	e7f7      	b.n	8019ca2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019cb2:	f003 0301 	and.w	r3, r3, #1
 8019cb6:	f023 0003 	bic.w	r0, r3, #3
 8019cba:	4408      	add	r0, r1
 8019cbc:	4288      	cmp	r0, r1
 8019cbe:	4614      	mov	r4, r2
 8019cc0:	d904      	bls.n	8019ccc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8019cc2:	6824      	ldr	r4, [r4, #0]
 8019cc4:	3204      	adds	r2, #4
 8019cc6:	f841 4b04 	str.w	r4, [r1], #4
 8019cca:	e7f7      	b.n	8019cbc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8019ccc:	f003 0303 	and.w	r3, r3, #3
 8019cd0:	3a01      	subs	r2, #1
 8019cd2:	440b      	add	r3, r1
 8019cd4:	428b      	cmp	r3, r1
 8019cd6:	d90c      	bls.n	8019cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019cd8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019cdc:	f801 0b01 	strb.w	r0, [r1], #1
 8019ce0:	e7f8      	b.n	8019cd4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019ce2:	0790      	lsls	r0, r2, #30
 8019ce4:	d0e7      	beq.n	8019cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019ce6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019cea:	3b02      	subs	r3, #2
 8019cec:	f821 0b02 	strh.w	r0, [r1], #2
 8019cf0:	e7e1      	b.n	8019cb6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019cf2:	2001      	movs	r0, #1
 8019cf4:	bd10      	pop	{r4, pc}

08019cf6 <_ZN8touchgfx3HAL7noTouchEv>:
 8019cf6:	b510      	push	{r4, lr}
 8019cf8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	b153      	cbz	r3, 8019d16 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019d00:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019d04:	2101      	movs	r1, #1
 8019d06:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8019d0a:	301c      	adds	r0, #28
 8019d0c:	f012 fb28 	bl	802c360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019d10:	2300      	movs	r3, #0
 8019d12:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019d16:	bd10      	pop	{r4, pc}

08019d18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d1c:	b085      	sub	sp, #20
 8019d1e:	4604      	mov	r4, r0
 8019d20:	2000      	movs	r0, #0
 8019d22:	4699      	mov	r9, r3
 8019d24:	ad04      	add	r5, sp, #16
 8019d26:	460f      	mov	r7, r1
 8019d28:	4690      	mov	r8, r2
 8019d2a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019d2e:	69a0      	ldr	r0, [r4, #24]
 8019d30:	6806      	ldr	r6, [r0, #0]
 8019d32:	9501      	str	r5, [sp, #4]
 8019d34:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8019d38:	9500      	str	r5, [sp, #0]
 8019d3a:	6835      	ldr	r5, [r6, #0]
 8019d3c:	47a8      	blx	r5
 8019d3e:	4d10      	ldr	r5, [pc, #64]	; (8019d80 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8019d40:	4606      	mov	r6, r0
 8019d42:	f8a5 9000 	strh.w	r9, [r5]
 8019d46:	f7f7 fa3b 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8019d4a:	6803      	ldr	r3, [r0, #0]
 8019d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d4e:	4798      	blx	r3
 8019d50:	b128      	cbz	r0, 8019d5e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8019d52:	2801      	cmp	r0, #1
 8019d54:	d00b      	beq.n	8019d6e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8019d56:	4630      	mov	r0, r6
 8019d58:	b005      	add	sp, #20
 8019d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d5e:	882b      	ldrh	r3, [r5, #0]
 8019d60:	fb08 7203 	mla	r2, r8, r3, r7
 8019d64:	9b03      	ldr	r3, [sp, #12]
 8019d66:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019d6a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019d6c:	e7f3      	b.n	8019d56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019d6e:	882a      	ldrh	r2, [r5, #0]
 8019d70:	9b03      	ldr	r3, [sp, #12]
 8019d72:	fb08 7202 	mla	r2, r8, r2, r7
 8019d76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019d7a:	1a9a      	subs	r2, r3, r2
 8019d7c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019d7e:	e7ea      	b.n	8019d56 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019d80:	2400d826 	.word	0x2400d826

08019d84 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d86:	b08b      	sub	sp, #44	; 0x2c
 8019d88:	4617      	mov	r7, r2
 8019d8a:	4604      	mov	r4, r0
 8019d8c:	460e      	mov	r6, r1
 8019d8e:	461d      	mov	r5, r3
 8019d90:	f7f7 fa16 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8019d94:	6803      	ldr	r3, [r0, #0]
 8019d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d98:	4798      	blx	r3
 8019d9a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019d9e:	9007      	str	r0, [sp, #28]
 8019da0:	4631      	mov	r1, r6
 8019da2:	6822      	ldr	r2, [r4, #0]
 8019da4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019da8:	4b0c      	ldr	r3, [pc, #48]	; (8019ddc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019daa:	4620      	mov	r0, r4
 8019dac:	881b      	ldrh	r3, [r3, #0]
 8019dae:	9306      	str	r3, [sp, #24]
 8019db0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019db4:	9305      	str	r3, [sp, #20]
 8019db6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019dba:	9304      	str	r3, [sp, #16]
 8019dbc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019dc0:	9303      	str	r3, [sp, #12]
 8019dc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019dc6:	9302      	str	r3, [sp, #8]
 8019dc8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019dcc:	e9cd 5300 	strd	r5, r3, [sp]
 8019dd0:	463b      	mov	r3, r7
 8019dd2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019dd4:	2200      	movs	r2, #0
 8019dd6:	47a8      	blx	r5
 8019dd8:	b00b      	add	sp, #44	; 0x2c
 8019dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ddc:	2400d826 	.word	0x2400d826

08019de0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019de4:	4698      	mov	r8, r3
 8019de6:	6803      	ldr	r3, [r0, #0]
 8019de8:	b08b      	sub	sp, #44	; 0x2c
 8019dea:	4617      	mov	r7, r2
 8019dec:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8019dee:	460e      	mov	r6, r1
 8019df0:	4b13      	ldr	r3, [pc, #76]	; (8019e40 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019df2:	4604      	mov	r4, r0
 8019df4:	f8b3 9000 	ldrh.w	r9, [r3]
 8019df8:	f7f7 f9e2 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8019dfc:	6803      	ldr	r3, [r0, #0]
 8019dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e00:	4798      	blx	r3
 8019e02:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019e06:	2200      	movs	r2, #0
 8019e08:	4631      	mov	r1, r6
 8019e0a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019e0e:	2302      	movs	r3, #2
 8019e10:	4620      	mov	r0, r4
 8019e12:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019e16:	2301      	movs	r3, #1
 8019e18:	9305      	str	r3, [sp, #20]
 8019e1a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019e1e:	9304      	str	r3, [sp, #16]
 8019e20:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019e24:	9303      	str	r3, [sp, #12]
 8019e26:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019e2a:	9302      	str	r3, [sp, #8]
 8019e2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019e30:	e9cd 8300 	strd	r8, r3, [sp]
 8019e34:	463b      	mov	r3, r7
 8019e36:	47a8      	blx	r5
 8019e38:	b00b      	add	sp, #44	; 0x2c
 8019e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e3e:	bf00      	nop
 8019e40:	2400d826 	.word	0x2400d826

08019e44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e48:	4698      	mov	r8, r3
 8019e4a:	6803      	ldr	r3, [r0, #0]
 8019e4c:	b087      	sub	sp, #28
 8019e4e:	460e      	mov	r6, r1
 8019e50:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8019e52:	4617      	mov	r7, r2
 8019e54:	4b0f      	ldr	r3, [pc, #60]	; (8019e94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019e56:	4604      	mov	r4, r0
 8019e58:	f8b3 9000 	ldrh.w	r9, [r3]
 8019e5c:	f7f7 f9b0 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8019e60:	6803      	ldr	r3, [r0, #0]
 8019e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e64:	4798      	blx	r3
 8019e66:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019e6a:	463a      	mov	r2, r7
 8019e6c:	4631      	mov	r1, r6
 8019e6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8019e72:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019e76:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019e7a:	4620      	mov	r0, r4
 8019e7c:	9302      	str	r3, [sp, #8]
 8019e7e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019e82:	9301      	str	r3, [sp, #4]
 8019e84:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019e88:	9300      	str	r3, [sp, #0]
 8019e8a:	4643      	mov	r3, r8
 8019e8c:	47a8      	blx	r5
 8019e8e:	b007      	add	sp, #28
 8019e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e94:	2400d826 	.word	0x2400d826

08019e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	b08f      	sub	sp, #60	; 0x3c
 8019ea0:	4610      	mov	r0, r2
 8019ea2:	460d      	mov	r5, r1
 8019ea4:	4691      	mov	r9, r2
 8019ea6:	461e      	mov	r6, r3
 8019ea8:	f006 ff12 	bl	8020cd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019eac:	2800      	cmp	r0, #0
 8019eae:	f000 809d 	beq.w	8019fec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8019eb2:	6823      	ldr	r3, [r4, #0]
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f8df b198 	ldr.w	fp, [pc, #408]	; 801a050 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019eba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ec0:	4798      	blx	r3
 8019ec2:	6823      	ldr	r3, [r4, #0]
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a054 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8019eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ecc:	4798      	blx	r3
 8019ece:	f8bb 3000 	ldrh.w	r3, [fp]
 8019ed2:	4f5c      	ldr	r7, [pc, #368]	; (801a044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019ed4:	9301      	str	r3, [sp, #4]
 8019ed6:	f8ba 3000 	ldrh.w	r3, [sl]
 8019eda:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8019ede:	4640      	mov	r0, r8
 8019ee0:	9302      	str	r3, [sp, #8]
 8019ee2:	883b      	ldrh	r3, [r7, #0]
 8019ee4:	9303      	str	r3, [sp, #12]
 8019ee6:	4b58      	ldr	r3, [pc, #352]	; (801a048 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019ee8:	881a      	ldrh	r2, [r3, #0]
 8019eea:	9305      	str	r3, [sp, #20]
 8019eec:	9204      	str	r2, [sp, #16]
 8019eee:	f007 f833 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ef2:	8038      	strh	r0, [r7, #0]
 8019ef4:	4640      	mov	r0, r8
 8019ef6:	f007 f863 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019efa:	9b05      	ldr	r3, [sp, #20]
 8019efc:	b280      	uxth	r0, r0
 8019efe:	8018      	strh	r0, [r3, #0]
 8019f00:	4b52      	ldr	r3, [pc, #328]	; (801a04c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8019f02:	781b      	ldrb	r3, [r3, #0]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d174      	bne.n	8019ff2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8019f08:	883b      	ldrh	r3, [r7, #0]
 8019f0a:	f8aa 0000 	strh.w	r0, [sl]
 8019f0e:	f8ab 3000 	strh.w	r3, [fp]
 8019f12:	4648      	mov	r0, r9
 8019f14:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8019f18:	f006 feda 	bl	8020cd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8019f22:	4611      	mov	r1, r2
 8019f24:	4628      	mov	r0, r5
 8019f26:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8019f2a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8019f2e:	f7f8 f874 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
 8019f32:	2301      	movs	r3, #1
 8019f34:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8019f38:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019f3c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	dd5c      	ble.n	8019ffe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019f44:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	dd58      	ble.n	8019ffe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8019f4c:	462a      	mov	r2, r5
 8019f4e:	ab0a      	add	r3, sp, #40	; 0x28
 8019f50:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019f54:	6851      	ldr	r1, [r2, #4]
 8019f56:	c303      	stmia	r3!, {r0, r1}
 8019f58:	4631      	mov	r1, r6
 8019f5a:	a80a      	add	r0, sp, #40	; 0x28
 8019f5c:	f7fe fbe8 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 8019f60:	4b38      	ldr	r3, [pc, #224]	; (801a044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019f62:	2100      	movs	r1, #0
 8019f64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f68:	4b37      	ldr	r3, [pc, #220]	; (801a048 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019f6a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019f6e:	aa0a      	add	r2, sp, #40	; 0x28
 8019f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f74:	910c      	str	r1, [sp, #48]	; 0x30
 8019f76:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019f7a:	ab08      	add	r3, sp, #32
 8019f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019f80:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f84:	4618      	mov	r0, r3
 8019f86:	a90c      	add	r1, sp, #48	; 0x30
 8019f88:	f7fe fbd2 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 8019f8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d13c      	bne.n	801a00c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8019f92:	2000      	movs	r0, #0
 8019f94:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8019f98:	2600      	movs	r6, #0
 8019f9a:	696b      	ldr	r3, [r5, #20]
 8019f9c:	a908      	add	r1, sp, #32
 8019f9e:	682a      	ldr	r2, [r5, #0]
 8019fa0:	4628      	mov	r0, r5
 8019fa2:	9305      	str	r3, [sp, #20]
 8019fa4:	616e      	str	r6, [r5, #20]
 8019fa6:	6892      	ldr	r2, [r2, #8]
 8019fa8:	4790      	blx	r2
 8019faa:	9b05      	ldr	r3, [sp, #20]
 8019fac:	4652      	mov	r2, sl
 8019fae:	4649      	mov	r1, r9
 8019fb0:	616b      	str	r3, [r5, #20]
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8019fb8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8019fbc:	f7f8 f82d 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
 8019fc0:	9a01      	ldr	r2, [sp, #4]
 8019fc2:	4b23      	ldr	r3, [pc, #140]	; (801a050 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	801a      	strh	r2, [r3, #0]
 8019fc8:	9a02      	ldr	r2, [sp, #8]
 8019fca:	4b22      	ldr	r3, [pc, #136]	; (801a054 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8019fcc:	801a      	strh	r2, [r3, #0]
 8019fce:	9a03      	ldr	r2, [sp, #12]
 8019fd0:	4b1c      	ldr	r3, [pc, #112]	; (801a044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019fd2:	801a      	strh	r2, [r3, #0]
 8019fd4:	4b1c      	ldr	r3, [pc, #112]	; (801a048 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019fd6:	9a04      	ldr	r2, [sp, #16]
 8019fd8:	801a      	strh	r2, [r3, #0]
 8019fda:	6823      	ldr	r3, [r4, #0]
 8019fdc:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8019fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fe2:	4798      	blx	r3
 8019fe4:	6823      	ldr	r3, [r4, #0]
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fea:	4798      	blx	r3
 8019fec:	b00f      	add	sp, #60	; 0x3c
 8019fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff2:	883b      	ldrh	r3, [r7, #0]
 8019ff4:	f8ab 0000 	strh.w	r0, [fp]
 8019ff8:	f8aa 3000 	strh.w	r3, [sl]
 8019ffc:	e789      	b.n	8019f12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8019ffe:	462a      	mov	r2, r5
 801a000:	ab0a      	add	r3, sp, #40	; 0x28
 801a002:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a006:	6851      	ldr	r1, [r2, #4]
 801a008:	c303      	stmia	r3!, {r0, r1}
 801a00a:	e7a9      	b.n	8019f60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a00c:	a807      	add	r0, sp, #28
 801a00e:	f007 f913 	bl	8021238 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a012:	4606      	mov	r6, r0
 801a014:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801a016:	6803      	ldr	r3, [r0, #0]
 801a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a01a:	4798      	blx	r3
 801a01c:	4286      	cmp	r6, r0
 801a01e:	d1b8      	bne.n	8019f92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a020:	f7f7 f8ce 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801a024:	6803      	ldr	r3, [r0, #0]
 801a026:	4606      	mov	r6, r0
 801a028:	a807      	add	r0, sp, #28
 801a02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a02c:	9305      	str	r3, [sp, #20]
 801a02e:	f007 f903 	bl	8021238 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a032:	9b05      	ldr	r3, [sp, #20]
 801a034:	4601      	mov	r1, r0
 801a036:	4630      	mov	r0, r6
 801a038:	4798      	blx	r3
 801a03a:	f080 0001 	eor.w	r0, r0, #1
 801a03e:	b2c0      	uxtb	r0, r0
 801a040:	e7a8      	b.n	8019f94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a042:	bf00      	nop
 801a044:	2400d820 	.word	0x2400d820
 801a048:	2400d822 	.word	0x2400d822
 801a04c:	2400d824 	.word	0x2400d824
 801a050:	2400d826 	.word	0x2400d826
 801a054:	2400d828 	.word	0x2400d828

0801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a058:	4b07      	ldr	r3, [pc, #28]	; (801a078 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a05a:	b510      	push	{r4, lr}
 801a05c:	781b      	ldrb	r3, [r3, #0]
 801a05e:	4604      	mov	r4, r0
 801a060:	b13b      	cbz	r3, 801a072 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a062:	6803      	ldr	r3, [r0, #0]
 801a064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a066:	4798      	blx	r3
 801a068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a06a:	4283      	cmp	r3, r0
 801a06c:	d101      	bne.n	801a072 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a06e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a070:	bd10      	pop	{r4, pc}
 801a072:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801a074:	e7fc      	b.n	801a070 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a076:	bf00      	nop
 801a078:	2400d82a 	.word	0x2400d82a

0801a07c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a080:	461d      	mov	r5, r3
 801a082:	b08a      	sub	sp, #40	; 0x28
 801a084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a088:	4690      	mov	r8, r2
 801a08a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801a08e:	2400      	movs	r4, #0
 801a090:	4607      	mov	r7, r0
 801a092:	fb06 8505 	mla	r5, r6, r5, r8
 801a096:	9404      	str	r4, [sp, #16]
 801a098:	f88d 4020 	strb.w	r4, [sp, #32]
 801a09c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a0a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a0a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a0a8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a0ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a0b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a0b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0b8:	f7ff ffce 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a0bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a0c6:	a901      	add	r1, sp, #4
 801a0c8:	9505      	str	r5, [sp, #20]
 801a0ca:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a0ce:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801a0d2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a0d6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a0da:	6803      	ldr	r3, [r0, #0]
 801a0dc:	685b      	ldr	r3, [r3, #4]
 801a0de:	4798      	blx	r3
 801a0e0:	b00a      	add	sp, #40	; 0x28
 801a0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0e6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a0e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0ea:	b08b      	sub	sp, #44	; 0x2c
 801a0ec:	2400      	movs	r4, #0
 801a0ee:	4691      	mov	r9, r2
 801a0f0:	461d      	mov	r5, r3
 801a0f2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801a0f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a0fa:	4688      	mov	r8, r1
 801a0fc:	4607      	mov	r7, r0
 801a0fe:	9404      	str	r4, [sp, #16]
 801a100:	fb06 9505 	mla	r5, r6, r5, r9
 801a104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a108:	f7ff ffa6 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a10c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a110:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a11a:	a901      	add	r1, sp, #4
 801a11c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a120:	9505      	str	r5, [sp, #20]
 801a122:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a126:	f8ad 401c 	strh.w	r4, [sp, #28]
 801a12a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a12e:	f8cd 8010 	str.w	r8, [sp, #16]
 801a132:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a136:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a13a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a13e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a142:	6803      	ldr	r3, [r0, #0]
 801a144:	685b      	ldr	r3, [r3, #4]
 801a146:	4798      	blx	r3
 801a148:	b00b      	add	sp, #44	; 0x2c
 801a14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a150 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a154:	b08a      	sub	sp, #40	; 0x28
 801a156:	4698      	mov	r8, r3
 801a158:	2300      	movs	r3, #0
 801a15a:	4606      	mov	r6, r0
 801a15c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a160:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801a164:	2d0b      	cmp	r5, #11
 801a166:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801a16a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801a16e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801a172:	9304      	str	r3, [sp, #16]
 801a174:	d137      	bne.n	801a1e6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801a176:	2380      	movs	r3, #128	; 0x80
 801a178:	f88d 0020 	strb.w	r0, [sp, #32]
 801a17c:	4630      	mov	r0, r6
 801a17e:	9203      	str	r2, [sp, #12]
 801a180:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a184:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a188:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a18c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a190:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a194:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a198:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a19c:	f7ff ff5c 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a1a0:	2c0b      	cmp	r4, #11
 801a1a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a1a6:	f8ad 701e 	strh.w	r7, [sp, #30]
 801a1aa:	bf94      	ite	ls
 801a1ac:	4b19      	ldrls	r3, [pc, #100]	; (801a214 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801a1ae:	2100      	movhi	r1, #0
 801a1b0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801a1b4:	bf98      	it	ls
 801a1b6:	5d19      	ldrbls	r1, [r3, r4]
 801a1b8:	fb02 8307 	mla	r3, r2, r7, r8
 801a1bc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a1c0:	10c9      	asrs	r1, r1, #3
 801a1c2:	fb01 0003 	mla	r0, r1, r3, r0
 801a1c6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801a1ca:	a901      	add	r1, sp, #4
 801a1cc:	9005      	str	r0, [sp, #20]
 801a1ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	6870      	ldr	r0, [r6, #4]
 801a1d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a1da:	6803      	ldr	r3, [r0, #0]
 801a1dc:	685b      	ldr	r3, [r3, #4]
 801a1de:	4798      	blx	r3
 801a1e0:	b00a      	add	sp, #40	; 0x28
 801a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1e6:	2d02      	cmp	r5, #2
 801a1e8:	d109      	bne.n	801a1fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801a1ea:	28ff      	cmp	r0, #255	; 0xff
 801a1ec:	d105      	bne.n	801a1fa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801a1ee:	f1bc 0f00 	cmp.w	ip, #0
 801a1f2:	bf14      	ite	ne
 801a1f4:	2340      	movne	r3, #64	; 0x40
 801a1f6:	2320      	moveq	r3, #32
 801a1f8:	e7be      	b.n	801a178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a1fa:	2340      	movs	r3, #64	; 0x40
 801a1fc:	e7bc      	b.n	801a178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a1fe:	28ff      	cmp	r0, #255	; 0xff
 801a200:	d105      	bne.n	801a20e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801a202:	f1bc 0f00 	cmp.w	ip, #0
 801a206:	bf14      	ite	ne
 801a208:	2304      	movne	r3, #4
 801a20a:	2301      	moveq	r3, #1
 801a20c:	e7b4      	b.n	801a178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a20e:	2304      	movs	r3, #4
 801a210:	e7b2      	b.n	801a178 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a212:	bf00      	nop
 801a214:	080300bc 	.word	0x080300bc

0801a218 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a21c:	b08b      	sub	sp, #44	; 0x2c
 801a21e:	461d      	mov	r5, r3
 801a220:	2400      	movs	r4, #0
 801a222:	4688      	mov	r8, r1
 801a224:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801a228:	4693      	mov	fp, r2
 801a22a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801a22e:	4607      	mov	r7, r0
 801a230:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a234:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801a238:	9404      	str	r4, [sp, #16]
 801a23a:	bf14      	ite	ne
 801a23c:	2308      	movne	r3, #8
 801a23e:	2302      	moveq	r3, #2
 801a240:	fb05 b50a 	mla	r5, r5, sl, fp
 801a244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a248:	f7ff ff06 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a24c:	2e0b      	cmp	r6, #11
 801a24e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a252:	a901      	add	r1, sp, #4
 801a254:	bf98      	it	ls
 801a256:	4b13      	ldrls	r3, [pc, #76]	; (801a2a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801a258:	f8ad a01e 	strh.w	sl, [sp, #30]
 801a25c:	bf98      	it	ls
 801a25e:	5d9c      	ldrbls	r4, [r3, r6]
 801a260:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a264:	10e4      	asrs	r4, r4, #3
 801a266:	f8cd 8010 	str.w	r8, [sp, #16]
 801a26a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a26e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a272:	fb04 0405 	mla	r4, r4, r5, r0
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a27c:	2300      	movs	r3, #0
 801a27e:	9405      	str	r4, [sp, #20]
 801a280:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a284:	f88d 9020 	strb.w	r9, [sp, #32]
 801a288:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801a28c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a290:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801a294:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801a298:	6803      	ldr	r3, [r0, #0]
 801a29a:	685b      	ldr	r3, [r3, #4]
 801a29c:	4798      	blx	r3
 801a29e:	b00b      	add	sp, #44	; 0x2c
 801a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2a4:	080300bc 	.word	0x080300bc

0801a2a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ac:	461e      	mov	r6, r3
 801a2ae:	4b0a      	ldr	r3, [pc, #40]	; (801a2d8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801a2b0:	460f      	mov	r7, r1
 801a2b2:	4690      	mov	r8, r2
 801a2b4:	881d      	ldrh	r5, [r3, #0]
 801a2b6:	f7f6 ff83 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801a2ba:	6803      	ldr	r3, [r0, #0]
 801a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2be:	4798      	blx	r3
 801a2c0:	280b      	cmp	r0, #11
 801a2c2:	bf96      	itet	ls
 801a2c4:	4b05      	ldrls	r3, [pc, #20]	; (801a2dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a2c6:	2400      	movhi	r4, #0
 801a2c8:	5c1c      	ldrbls	r4, [r3, r0]
 801a2ca:	fb08 7005 	mla	r0, r8, r5, r7
 801a2ce:	10e4      	asrs	r4, r4, #3
 801a2d0:	fb04 6000 	mla	r0, r4, r0, r6
 801a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2d8:	2400d826 	.word	0x2400d826
 801a2dc:	080300bc 	.word	0x080300bc

0801a2e0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2e2:	b08b      	sub	sp, #44	; 0x2c
 801a2e4:	461f      	mov	r7, r3
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	4616      	mov	r6, r2
 801a2ea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a2ee:	2500      	movs	r5, #0
 801a2f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a2f4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a2f8:	9504      	str	r5, [sp, #16]
 801a2fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a2fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a302:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a306:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a30a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a30e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a312:	f88d 3020 	strb.w	r3, [sp, #32]
 801a316:	f7ff fe9f 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a31a:	463a      	mov	r2, r7
 801a31c:	4631      	mov	r1, r6
 801a31e:	4603      	mov	r3, r0
 801a320:	4620      	mov	r0, r4
 801a322:	f7ff ffc1 	bl	801a2a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a326:	4b0e      	ldr	r3, [pc, #56]	; (801a360 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a328:	9005      	str	r0, [sp, #20]
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a330:	f7f6 ff46 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801a334:	6803      	ldr	r3, [r0, #0]
 801a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a338:	4798      	blx	r3
 801a33a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a33c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a340:	a901      	add	r1, sp, #4
 801a342:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a346:	9304      	str	r3, [sp, #16]
 801a348:	6860      	ldr	r0, [r4, #4]
 801a34a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a34e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801a352:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a356:	6803      	ldr	r3, [r0, #0]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	4798      	blx	r3
 801a35c:	b00b      	add	sp, #44	; 0x2c
 801a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a360:	2400d826 	.word	0x2400d826

0801a364 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a364:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a366:	b08d      	sub	sp, #52	; 0x34
 801a368:	2501      	movs	r5, #1
 801a36a:	4604      	mov	r4, r0
 801a36c:	466b      	mov	r3, sp
 801a36e:	9503      	str	r5, [sp, #12]
 801a370:	e883 0006 	stmia.w	r3, {r1, r2}
 801a374:	2300      	movs	r3, #0
 801a376:	f8bd 6000 	ldrh.w	r6, [sp]
 801a37a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a37e:	9306      	str	r3, [sp, #24]
 801a380:	6803      	ldr	r3, [r0, #0]
 801a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a384:	4798      	blx	r3
 801a386:	463a      	mov	r2, r7
 801a388:	4631      	mov	r1, r6
 801a38a:	4603      	mov	r3, r0
 801a38c:	4620      	mov	r0, r4
 801a38e:	f7ff ff8b 	bl	801a2a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a394:	9004      	str	r0, [sp, #16]
 801a396:	9307      	str	r3, [sp, #28]
 801a398:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a39c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a3a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a3a4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a3a8:	4b0e      	ldr	r3, [pc, #56]	; (801a3e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801a3aa:	881b      	ldrh	r3, [r3, #0]
 801a3ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a3b0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a3b4:	f7f6 ff04 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801a3b8:	6803      	ldr	r3, [r0, #0]
 801a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3bc:	4798      	blx	r3
 801a3be:	23ff      	movs	r3, #255	; 0xff
 801a3c0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a3c4:	a903      	add	r1, sp, #12
 801a3c6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a3ca:	6860      	ldr	r0, [r4, #4]
 801a3cc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a3d0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a3d4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a3d8:	6803      	ldr	r3, [r0, #0]
 801a3da:	685b      	ldr	r3, [r3, #4]
 801a3dc:	4798      	blx	r3
 801a3de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a3e0:	b00d      	add	sp, #52	; 0x34
 801a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3e4:	2400d826 	.word	0x2400d826

0801a3e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ec:	b08c      	sub	sp, #48	; 0x30
 801a3ee:	461e      	mov	r6, r3
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	466d      	mov	r5, sp
 801a3f6:	9306      	str	r3, [sp, #24]
 801a3f8:	6803      	ldr	r3, [r0, #0]
 801a3fa:	e885 0006 	stmia.w	r5, {r1, r2}
 801a3fe:	2501      	movs	r5, #1
 801a400:	f8bd 7000 	ldrh.w	r7, [sp]
 801a404:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a408:	9503      	str	r5, [sp, #12]
 801a40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a40c:	4798      	blx	r3
 801a40e:	4642      	mov	r2, r8
 801a410:	4639      	mov	r1, r7
 801a412:	4603      	mov	r3, r0
 801a414:	4620      	mov	r0, r4
 801a416:	f7ff ff47 	bl	801a2a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a41a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a41e:	9004      	str	r0, [sp, #16]
 801a420:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a424:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a428:	9607      	str	r6, [sp, #28]
 801a42a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a42e:	4b10      	ldr	r3, [pc, #64]	; (801a470 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a436:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a438:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a43c:	f7f6 fec0 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a444:	4798      	blx	r3
 801a446:	23ff      	movs	r3, #255	; 0xff
 801a448:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a44c:	a903      	add	r1, sp, #12
 801a44e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a452:	6860      	ldr	r0, [r4, #4]
 801a454:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a458:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a45c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a460:	6803      	ldr	r3, [r0, #0]
 801a462:	685b      	ldr	r3, [r3, #4]
 801a464:	4798      	blx	r3
 801a466:	4630      	mov	r0, r6
 801a468:	b00c      	add	sp, #48	; 0x30
 801a46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a46e:	bf00      	nop
 801a470:	2400d826 	.word	0x2400d826

0801a474 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a476:	b085      	sub	sp, #20
 801a478:	4605      	mov	r5, r0
 801a47a:	ac02      	add	r4, sp, #8
 801a47c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a480:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801a484:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801a488:	f7ff fde6 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a48c:	4631      	mov	r1, r6
 801a48e:	4603      	mov	r3, r0
 801a490:	463a      	mov	r2, r7
 801a492:	4628      	mov	r0, r5
 801a494:	f7ff ff08 	bl	801a2a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a498:	4a05      	ldr	r2, [pc, #20]	; (801a4b0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801a49a:	682b      	ldr	r3, [r5, #0]
 801a49c:	8812      	ldrh	r2, [r2, #0]
 801a49e:	9200      	str	r2, [sp, #0]
 801a4a0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	4628      	mov	r0, r5
 801a4a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a4aa:	47b0      	blx	r6
 801a4ac:	b005      	add	sp, #20
 801a4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4b0:	2400d826 	.word	0x2400d826

0801a4b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a4b4:	b570      	push	{r4, r5, r6, lr}
 801a4b6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801a4ba:	4604      	mov	r4, r0
 801a4bc:	b19b      	cbz	r3, 801a4e6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a4be:	2002      	movs	r0, #2
 801a4c0:	f7fb ff76 	bl	80163b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a4cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801a4d0:	6823      	ldr	r3, [r4, #0]
 801a4d2:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801a4d6:	f7ff fdbf 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a4da:	4601      	mov	r1, r0
 801a4dc:	4620      	mov	r0, r4
 801a4de:	462b      	mov	r3, r5
 801a4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4e4:	4718      	bx	r3
 801a4e6:	bd70      	pop	{r4, r5, r6, pc}

0801a4e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a4e8:	b538      	push	{r3, r4, r5, lr}
 801a4ea:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801a4ee:	4604      	mov	r4, r0
 801a4f0:	460d      	mov	r5, r1
 801a4f2:	428b      	cmp	r3, r1
 801a4f4:	d006      	beq.n	801a504 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801a4f6:	6803      	ldr	r3, [r0, #0]
 801a4f8:	b929      	cbnz	r1, 801a506 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801a4fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a4fe:	4798      	blx	r3
 801a500:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801a504:	bd38      	pop	{r3, r4, r5, pc}
 801a506:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a50a:	e7f8      	b.n	801a4fe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801a50c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a50c:	4b0d      	ldr	r3, [pc, #52]	; (801a544 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a50e:	b510      	push	{r4, lr}
 801a510:	781b      	ldrb	r3, [r3, #0]
 801a512:	4604      	mov	r4, r0
 801a514:	b95b      	cbnz	r3, 801a52e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a516:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	d007      	beq.n	801a52e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a51e:	6840      	ldr	r0, [r0, #4]
 801a520:	f000 f926 	bl	801a770 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a524:	b118      	cbz	r0, 801a52e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a526:	6862      	ldr	r2, [r4, #4]
 801a528:	7a53      	ldrb	r3, [r2, #9]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d0fc      	beq.n	801a528 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a52e:	f7fc f9cd 	bl	80168cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a532:	4620      	mov	r0, r4
 801a534:	2100      	movs	r1, #0
 801a536:	f7ff ffd7 	bl	801a4e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a53a:	4620      	mov	r0, r4
 801a53c:	f7ff fd8c 	bl	801a058 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a540:	bd10      	pop	{r4, pc}
 801a542:	bf00      	nop
 801a544:	2400d82a 	.word	0x2400d82a

0801a548 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801a548:	b570      	push	{r4, r5, r6, lr}
 801a54a:	4604      	mov	r4, r0
 801a54c:	6803      	ldr	r3, [r0, #0]
 801a54e:	b919      	cbnz	r1, 801a558 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 801a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a556:	4718      	bx	r3
 801a558:	2200      	movs	r2, #0
 801a55a:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 801a55e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 801a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a564:	4798      	blx	r3
 801a566:	4605      	mov	r5, r0
 801a568:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 801a56c:	4620      	mov	r0, r4
 801a56e:	2101      	movs	r1, #1
 801a570:	f7ff ffba 	bl	801a4e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a574:	4628      	mov	r0, r5
 801a576:	bd70      	pop	{r4, r5, r6, pc}

0801a578 <_ZN8touchgfx13DMA_Interface5flushEv>:
 801a578:	6803      	ldr	r3, [r0, #0]
 801a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a57c:	4718      	bx	r3

0801a57e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a57e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a582:	1a13      	subs	r3, r2, r0
 801a584:	4258      	negs	r0, r3
 801a586:	4158      	adcs	r0, r3
 801a588:	4770      	bx	lr

0801a58a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a58a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a58e:	1a9b      	subs	r3, r3, r2
 801a590:	2b00      	cmp	r3, #0
 801a592:	bfdc      	itt	le
 801a594:	6882      	ldrle	r2, [r0, #8]
 801a596:	189b      	addle	r3, r3, r2
 801a598:	2b01      	cmp	r3, #1
 801a59a:	bfcc      	ite	gt
 801a59c:	2000      	movgt	r0, #0
 801a59e:	2001      	movle	r0, #1
 801a5a0:	4770      	bx	lr

0801a5a2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a5a2:	6902      	ldr	r2, [r0, #16]
 801a5a4:	6843      	ldr	r3, [r0, #4]
 801a5a6:	2024      	movs	r0, #36	; 0x24
 801a5a8:	fb00 3002 	mla	r0, r0, r2, r3
 801a5ac:	4770      	bx	lr

0801a5ae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a5ae:	6803      	ldr	r3, [r0, #0]
 801a5b0:	691b      	ldr	r3, [r3, #16]
 801a5b2:	4718      	bx	r3

0801a5b4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	b570      	push	{r4, r5, r6, lr}
 801a5b8:	7203      	strb	r3, [r0, #8]
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	6840      	ldr	r0, [r0, #4]
 801a5be:	6803      	ldr	r3, [r0, #0]
 801a5c0:	699b      	ldr	r3, [r3, #24]
 801a5c2:	4798      	blx	r3
 801a5c4:	6803      	ldr	r3, [r0, #0]
 801a5c6:	4605      	mov	r5, r0
 801a5c8:	2b40      	cmp	r3, #64	; 0x40
 801a5ca:	d00c      	beq.n	801a5e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a5cc:	d810      	bhi.n	801a5f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801a5ce:	2b04      	cmp	r3, #4
 801a5d0:	d01d      	beq.n	801a60e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801a5d2:	d804      	bhi.n	801a5de <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	d006      	beq.n	801a5e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a5d8:	2b02      	cmp	r3, #2
 801a5da:	d02c      	beq.n	801a636 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a5dc:	bd70      	pop	{r4, r5, r6, pc}
 801a5de:	2b08      	cmp	r3, #8
 801a5e0:	d01d      	beq.n	801a61e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801a5e2:	2b20      	cmp	r3, #32
 801a5e4:	d1fa      	bne.n	801a5dc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801a5e6:	6823      	ldr	r3, [r4, #0]
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5ec:	4798      	blx	r3
 801a5ee:	e013      	b.n	801a618 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a5f4:	d0f7      	beq.n	801a5e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a5f6:	d804      	bhi.n	801a602 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801a5f8:	2b80      	cmp	r3, #128	; 0x80
 801a5fa:	d0f4      	beq.n	801a5e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a600:	e7f0      	b.n	801a5e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801a602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a606:	d0ee      	beq.n	801a5e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a60c:	e7e5      	b.n	801a5da <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a60e:	6823      	ldr	r3, [r4, #0]
 801a610:	7f01      	ldrb	r1, [r0, #28]
 801a612:	4620      	mov	r0, r4
 801a614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a616:	4798      	blx	r3
 801a618:	6823      	ldr	r3, [r4, #0]
 801a61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a61c:	e006      	b.n	801a62c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801a61e:	6823      	ldr	r3, [r4, #0]
 801a620:	7f01      	ldrb	r1, [r0, #28]
 801a622:	4620      	mov	r0, r4
 801a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a626:	4798      	blx	r3
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a62c:	4629      	mov	r1, r5
 801a62e:	4620      	mov	r0, r4
 801a630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a634:	4718      	bx	r3
 801a636:	6823      	ldr	r3, [r4, #0]
 801a638:	4620      	mov	r0, r4
 801a63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a63c:	4798      	blx	r3
 801a63e:	e7f3      	b.n	801a628 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801a640 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a640:	4770      	bx	lr

0801a642 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a642:	4770      	bx	lr

0801a644 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a644:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801a648:	b510      	push	{r4, lr}
 801a64a:	1ad2      	subs	r2, r2, r3
 801a64c:	2a00      	cmp	r2, #0
 801a64e:	bfdc      	itt	le
 801a650:	6884      	ldrle	r4, [r0, #8]
 801a652:	1912      	addle	r2, r2, r4
 801a654:	2a01      	cmp	r2, #1
 801a656:	dd16      	ble.n	801a686 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801a658:	6842      	ldr	r2, [r0, #4]
 801a65a:	2424      	movs	r4, #36	; 0x24
 801a65c:	fb04 2303 	mla	r3, r4, r3, r2
 801a660:	f101 0220 	add.w	r2, r1, #32
 801a664:	f851 4b04 	ldr.w	r4, [r1], #4
 801a668:	4291      	cmp	r1, r2
 801a66a:	f843 4b04 	str.w	r4, [r3], #4
 801a66e:	d1f9      	bne.n	801a664 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a670:	780a      	ldrb	r2, [r1, #0]
 801a672:	701a      	strb	r2, [r3, #0]
 801a674:	68c3      	ldr	r3, [r0, #12]
 801a676:	6882      	ldr	r2, [r0, #8]
 801a678:	f3bf 8f5b 	dmb	ish
 801a67c:	3301      	adds	r3, #1
 801a67e:	429a      	cmp	r2, r3
 801a680:	bfd8      	it	le
 801a682:	1a9b      	suble	r3, r3, r2
 801a684:	60c3      	str	r3, [r0, #12]
 801a686:	bd10      	pop	{r4, pc}

0801a688 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a688:	6903      	ldr	r3, [r0, #16]
 801a68a:	6882      	ldr	r2, [r0, #8]
 801a68c:	f3bf 8f5b 	dmb	ish
 801a690:	3301      	adds	r3, #1
 801a692:	429a      	cmp	r2, r3
 801a694:	bfd8      	it	le
 801a696:	1a9b      	suble	r3, r3, r2
 801a698:	6103      	str	r3, [r0, #16]
 801a69a:	4770      	bx	lr

0801a69c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a69c:	b570      	push	{r4, r5, r6, lr}
 801a69e:	4604      	mov	r4, r0
 801a6a0:	460e      	mov	r6, r1
 801a6a2:	6860      	ldr	r0, [r4, #4]
 801a6a4:	6803      	ldr	r3, [r0, #0]
 801a6a6:	685b      	ldr	r3, [r3, #4]
 801a6a8:	4798      	blx	r3
 801a6aa:	2800      	cmp	r0, #0
 801a6ac:	d1f9      	bne.n	801a6a2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a6ae:	4d0d      	ldr	r5, [pc, #52]	; (801a6e4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a6b0:	6828      	ldr	r0, [r5, #0]
 801a6b2:	6803      	ldr	r3, [r0, #0]
 801a6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a6b6:	4798      	blx	r3
 801a6b8:	f7fc f922 	bl	8016900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a6bc:	6828      	ldr	r0, [r5, #0]
 801a6be:	2101      	movs	r1, #1
 801a6c0:	f7ff ff12 	bl	801a4e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a6c4:	6860      	ldr	r0, [r4, #4]
 801a6c6:	4631      	mov	r1, r6
 801a6c8:	6803      	ldr	r3, [r0, #0]
 801a6ca:	689b      	ldr	r3, [r3, #8]
 801a6cc:	4798      	blx	r3
 801a6ce:	6823      	ldr	r3, [r4, #0]
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6d4:	4798      	blx	r3
 801a6d6:	6828      	ldr	r0, [r5, #0]
 801a6d8:	6803      	ldr	r3, [r0, #0]
 801a6da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a6de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a6e0:	4718      	bx	r3
 801a6e2:	bf00      	nop
 801a6e4:	2400d82c 	.word	0x2400d82c

0801a6e8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a6e8:	b508      	push	{r3, lr}
 801a6ea:	f7fc f8ef 	bl	80168cc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a6f2:	f7fc b8f9 	b.w	80168e8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a6f6 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a6f6:	b510      	push	{r4, lr}
 801a6f8:	4604      	mov	r4, r0
 801a6fa:	6840      	ldr	r0, [r0, #4]
 801a6fc:	6803      	ldr	r3, [r0, #0]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	4798      	blx	r3
 801a702:	b948      	cbnz	r0, 801a718 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a704:	7a63      	ldrb	r3, [r4, #9]
 801a706:	b13b      	cbz	r3, 801a718 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a708:	7a23      	ldrb	r3, [r4, #8]
 801a70a:	b92b      	cbnz	r3, 801a718 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a70c:	6823      	ldr	r3, [r4, #0]
 801a70e:	4620      	mov	r0, r4
 801a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a716:	4718      	bx	r3
 801a718:	bd10      	pop	{r4, pc}

0801a71a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a71a:	b570      	push	{r4, r5, r6, lr}
 801a71c:	4604      	mov	r4, r0
 801a71e:	6840      	ldr	r0, [r0, #4]
 801a720:	6803      	ldr	r3, [r0, #0]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	4798      	blx	r3
 801a726:	4605      	mov	r5, r0
 801a728:	b930      	cbnz	r0, 801a738 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a72a:	7a23      	ldrb	r3, [r4, #8]
 801a72c:	b123      	cbz	r3, 801a738 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a72e:	6860      	ldr	r0, [r4, #4]
 801a730:	6803      	ldr	r3, [r0, #0]
 801a732:	695b      	ldr	r3, [r3, #20]
 801a734:	4798      	blx	r3
 801a736:	7225      	strb	r5, [r4, #8]
 801a738:	6860      	ldr	r0, [r4, #4]
 801a73a:	6803      	ldr	r3, [r0, #0]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	4798      	blx	r3
 801a740:	b928      	cbnz	r0, 801a74e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a742:	6823      	ldr	r3, [r4, #0]
 801a744:	4620      	mov	r0, r4
 801a746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a74c:	4718      	bx	r3
 801a74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a752:	f7fc b8e1 	b.w	8016918 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801a758 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a758:	b510      	push	{r4, lr}
 801a75a:	6082      	str	r2, [r0, #8]
 801a75c:	2200      	movs	r2, #0
 801a75e:	4c03      	ldr	r4, [pc, #12]	; (801a76c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a760:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a764:	e9c0 4100 	strd	r4, r1, [r0]
 801a768:	bd10      	pop	{r4, pc}
 801a76a:	bf00      	nop
 801a76c:	080301f8 	.word	0x080301f8

0801a770 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a770:	6840      	ldr	r0, [r0, #4]
 801a772:	6803      	ldr	r3, [r0, #0]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	4718      	bx	r3

0801a778 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 801a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a77c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a780:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801a784:	68c1      	ldr	r1, [r0, #12]
 801a786:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801a78a:	2fff      	cmp	r7, #255	; 0xff
 801a78c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801a790:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 801a794:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 801a798:	d105      	bne.n	801a7a6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 801a79a:	f842 1b04 	str.w	r1, [r2], #4
 801a79e:	4594      	cmp	ip, r2
 801a7a0:	d8fb      	bhi.n	801a79a <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 801a7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7a6:	6816      	ldr	r6, [r2, #0]
 801a7a8:	ea5f 6916 	movs.w	r9, r6, lsr #24
 801a7ac:	d104      	bne.n	801a7b8 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 801a7ae:	6011      	str	r1, [r2, #0]
 801a7b0:	3204      	adds	r2, #4
 801a7b2:	4594      	cmp	ip, r2
 801a7b4:	d8f7      	bhi.n	801a7a6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 801a7b6:	e7f4      	b.n	801a7a2 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 801a7b8:	2f00      	cmp	r7, #0
 801a7ba:	d0f9      	beq.n	801a7b0 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 801a7bc:	fb07 f809 	mul.w	r8, r7, r9
 801a7c0:	b2f5      	uxtb	r5, r6
 801a7c2:	f3c6 2407 	ubfx	r4, r6, #8, #8
 801a7c6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a7ca:	f108 0301 	add.w	r3, r8, #1
 801a7ce:	fb09 fa05 	mul.w	sl, r9, r5
 801a7d2:	eb03 2328 	add.w	r3, r3, r8, asr #8
 801a7d6:	ea4f 2823 	mov.w	r8, r3, asr #8
 801a7da:	eb07 0309 	add.w	r3, r7, r9
 801a7de:	eba3 0308 	sub.w	r3, r3, r8
 801a7e2:	fa5f fe83 	uxtb.w	lr, r3
 801a7e6:	7c83      	ldrb	r3, [r0, #18]
 801a7e8:	fb03 a307 	mla	r3, r3, r7, sl
 801a7ec:	fb04 fa09 	mul.w	sl, r4, r9
 801a7f0:	fb08 3515 	mls	r5, r8, r5, r3
 801a7f4:	7c43      	ldrb	r3, [r0, #17]
 801a7f6:	fb03 a307 	mla	r3, r3, r7, sl
 801a7fa:	fb95 f5fe 	sdiv	r5, r5, lr
 801a7fe:	fb08 3414 	mls	r4, r8, r4, r3
 801a802:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 801a806:	fb06 f309 	mul.w	r3, r6, r9
 801a80a:	fb94 f4fe 	sdiv	r4, r4, lr
 801a80e:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 801a812:	7c05      	ldrb	r5, [r0, #16]
 801a814:	fb05 3307 	mla	r3, r5, r7, r3
 801a818:	fb08 3316 	mls	r3, r8, r6, r3
 801a81c:	fb93 f3fe 	sdiv	r3, r3, lr
 801a820:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 801a824:	6013      	str	r3, [r2, #0]
 801a826:	e7c3      	b.n	801a7b0 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

0801a828 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801a828:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801a82c:	4770      	bx	lr

0801a82e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801a82e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 801a832:	4770      	bx	lr

0801a834 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801a834:	b510      	push	{r4, lr}
 801a836:	2200      	movs	r2, #0
 801a838:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a83c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801a840:	8002      	strh	r2, [r0, #0]
 801a842:	8042      	strh	r2, [r0, #2]
 801a844:	8084      	strh	r4, [r0, #4]
 801a846:	80c1      	strh	r1, [r0, #6]
 801a848:	bd10      	pop	{r4, pc}

0801a84a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801a84a:	2200      	movs	r2, #0
 801a84c:	8002      	strh	r2, [r0, #0]
 801a84e:	8042      	strh	r2, [r0, #2]
 801a850:	8082      	strh	r2, [r0, #4]
 801a852:	80c2      	strh	r2, [r0, #6]
 801a854:	4770      	bx	lr
	...

0801a858 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a85a:	6803      	ldr	r3, [r0, #0]
 801a85c:	460d      	mov	r5, r1
 801a85e:	4604      	mov	r4, r0
 801a860:	4601      	mov	r1, r0
 801a862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a864:	a802      	add	r0, sp, #8
 801a866:	4798      	blx	r3
 801a868:	6828      	ldr	r0, [r5, #0]
 801a86a:	6869      	ldr	r1, [r5, #4]
 801a86c:	466b      	mov	r3, sp
 801a86e:	c303      	stmia	r3!, {r0, r1}
 801a870:	4668      	mov	r0, sp
 801a872:	4619      	mov	r1, r3
 801a874:	f7fd ff5c 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801a878:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a87a:	b1a8      	cbz	r0, 801a8a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a87c:	6803      	ldr	r3, [r0, #0]
 801a87e:	1d21      	adds	r1, r4, #4
 801a880:	68db      	ldr	r3, [r3, #12]
 801a882:	4798      	blx	r3
 801a884:	b180      	cbz	r0, 801a8a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a886:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	dd0c      	ble.n	801a8a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a88e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801a892:	2d00      	cmp	r5, #0
 801a894:	dd08      	ble.n	801a8a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a896:	4a2d      	ldr	r2, [pc, #180]	; (801a94c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 801a898:	7812      	ldrb	r2, [r2, #0]
 801a89a:	b13a      	cbz	r2, 801a8ac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801a89c:	2a01      	cmp	r2, #1
 801a89e:	d02d      	beq.n	801a8fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 801a8a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a8a2:	6803      	ldr	r3, [r0, #0]
 801a8a4:	691b      	ldr	r3, [r3, #16]
 801a8a6:	4798      	blx	r3
 801a8a8:	b004      	add	sp, #16
 801a8aa:	bd70      	pop	{r4, r5, r6, pc}
 801a8ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a8b0:	441d      	add	r5, r3
 801a8b2:	b2ad      	uxth	r5, r5
 801a8b4:	b22e      	sxth	r6, r5
 801a8b6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a8ba:	42b3      	cmp	r3, r6
 801a8bc:	daf0      	bge.n	801a8a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a8be:	6823      	ldr	r3, [r4, #0]
 801a8c0:	4669      	mov	r1, sp
 801a8c2:	4620      	mov	r0, r4
 801a8c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8c6:	4798      	blx	r3
 801a8c8:	b940      	cbnz	r0, 801a8dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801a8ca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a8ce:	2b01      	cmp	r3, #1
 801a8d0:	d004      	beq.n	801a8dc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	105b      	asrs	r3, r3, #1
 801a8d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a8da:	e7f0      	b.n	801a8be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801a8dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a8e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a8e4:	4413      	add	r3, r2
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	441a      	add	r2, r3
 801a8ea:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a8ee:	b212      	sxth	r2, r2
 801a8f0:	4296      	cmp	r6, r2
 801a8f2:	dae0      	bge.n	801a8b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a8f4:	1aeb      	subs	r3, r5, r3
 801a8f6:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a8fa:	e7dc      	b.n	801a8b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a8fc:	f8bd 5000 	ldrh.w	r5, [sp]
 801a900:	441d      	add	r5, r3
 801a902:	b2ad      	uxth	r5, r5
 801a904:	b22e      	sxth	r6, r5
 801a906:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a90a:	42b3      	cmp	r3, r6
 801a90c:	dac8      	bge.n	801a8a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a90e:	6823      	ldr	r3, [r4, #0]
 801a910:	4669      	mov	r1, sp
 801a912:	4620      	mov	r0, r4
 801a914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a916:	4798      	blx	r3
 801a918:	b940      	cbnz	r0, 801a92c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801a91a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a91e:	2b01      	cmp	r3, #1
 801a920:	d004      	beq.n	801a92c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801a922:	3301      	adds	r3, #1
 801a924:	105b      	asrs	r3, r3, #1
 801a926:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a92a:	e7f0      	b.n	801a90e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801a92c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a930:	f8bd 3000 	ldrh.w	r3, [sp]
 801a934:	4413      	add	r3, r2
 801a936:	b29b      	uxth	r3, r3
 801a938:	441a      	add	r2, r3
 801a93a:	f8ad 3000 	strh.w	r3, [sp]
 801a93e:	b212      	sxth	r2, r2
 801a940:	4296      	cmp	r6, r2
 801a942:	dae0      	bge.n	801a906 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a944:	1aeb      	subs	r3, r5, r3
 801a946:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a94a:	e7dc      	b.n	801a906 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a94c:	2400d824 	.word	0x2400d824

0801a950 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a952:	6803      	ldr	r3, [r0, #0]
 801a954:	4604      	mov	r4, r0
 801a956:	4601      	mov	r1, r0
 801a958:	4668      	mov	r0, sp
 801a95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a95c:	4798      	blx	r3
 801a95e:	2100      	movs	r1, #0
 801a960:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801a964:	4668      	mov	r0, sp
 801a966:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801a96a:	9102      	str	r1, [sp, #8]
 801a96c:	a902      	add	r1, sp, #8
 801a96e:	f8ad 200c 	strh.w	r2, [sp, #12]
 801a972:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a976:	f7fd fedb 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	4669      	mov	r1, sp
 801a97e:	4620      	mov	r0, r4
 801a980:	691b      	ldr	r3, [r3, #16]
 801a982:	4798      	blx	r3
 801a984:	b004      	add	sp, #16
 801a986:	bd10      	pop	{r4, pc}

0801a988 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801a988:	2101      	movs	r1, #1
 801a98a:	2200      	movs	r2, #0
 801a98c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801a990:	490a      	ldr	r1, [pc, #40]	; (801a9bc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801a992:	8082      	strh	r2, [r0, #4]
 801a994:	6001      	str	r1, [r0, #0]
 801a996:	21ff      	movs	r1, #255	; 0xff
 801a998:	80c2      	strh	r2, [r0, #6]
 801a99a:	8102      	strh	r2, [r0, #8]
 801a99c:	8142      	strh	r2, [r0, #10]
 801a99e:	8182      	strh	r2, [r0, #12]
 801a9a0:	81c2      	strh	r2, [r0, #14]
 801a9a2:	8202      	strh	r2, [r0, #16]
 801a9a4:	8242      	strh	r2, [r0, #18]
 801a9a6:	61c2      	str	r2, [r0, #28]
 801a9a8:	8402      	strh	r2, [r0, #32]
 801a9aa:	8442      	strh	r2, [r0, #34]	; 0x22
 801a9ac:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801a9b0:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801a9b4:	6282      	str	r2, [r0, #40]	; 0x28
 801a9b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a9ba:	4770      	bx	lr
 801a9bc:	08030254 	.word	0x08030254

0801a9c0 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801a9c0:	f101 0364 	add.w	r3, r1, #100	; 0x64
 801a9c4:	4602      	mov	r2, r0
 801a9c6:	cb03      	ldmia	r3!, {r0, r1}
 801a9c8:	6010      	str	r0, [r2, #0]
 801a9ca:	4610      	mov	r0, r2
 801a9cc:	6051      	str	r1, [r2, #4]
 801a9ce:	4770      	bx	lr

0801a9d0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801a9d0:	b507      	push	{r0, r1, r2, lr}
 801a9d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801a9d6:	ab01      	add	r3, sp, #4
 801a9d8:	6809      	ldr	r1, [r1, #0]
 801a9da:	6800      	ldr	r0, [r0, #0]
 801a9dc:	f004 fe67 	bl	801f6ae <_ZN8touchgfx6muldivElllRl>
 801a9e0:	b003      	add	sp, #12
 801a9e2:	f85d fb04 	ldr.w	pc, [sp], #4

0801a9e6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801a9e6:	6800      	ldr	r0, [r0, #0]
 801a9e8:	2800      	cmp	r0, #0
 801a9ea:	bfb9      	ittee	lt
 801a9ec:	2320      	movlt	r3, #32
 801a9ee:	fb90 f0f3 	sdivlt	r0, r0, r3
 801a9f2:	301f      	addge	r0, #31
 801a9f4:	1140      	asrge	r0, r0, #5
 801a9f6:	4770      	bx	lr

0801a9f8 <_ZNK8touchgfx4Line17invalidateContentEv>:
 801a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9fc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 801aa00:	b089      	sub	sp, #36	; 0x24
 801aa02:	4604      	mov	r4, r0
 801aa04:	b353      	cbz	r3, 801aa5c <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 801aa06:	6803      	ldr	r3, [r0, #0]
 801aa08:	4601      	mov	r1, r0
 801aa0a:	a802      	add	r0, sp, #8
 801aa0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aa0e:	4798      	blx	r3
 801aa10:	2220      	movs	r2, #32
 801aa12:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 801aa16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801aa1a:	f8d4 b000 	ldr.w	fp, [r4]
 801aa1e:	fb9a f0f2 	sdiv	r0, sl, r2
 801aa22:	fb91 f5f2 	sdiv	r5, r1, r2
 801aa26:	fb93 f6f2 	sdiv	r6, r3, r2
 801aa2a:	1b40      	subs	r0, r0, r5
 801aa2c:	0076      	lsls	r6, r6, #1
 801aa2e:	2800      	cmp	r0, #0
 801aa30:	bfb8      	it	lt
 801aa32:	4240      	neglt	r0, r0
 801aa34:	4286      	cmp	r6, r0
 801aa36:	dc0c      	bgt.n	801aa52 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 801aa38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801aa3a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801aa3e:	fb95 f0f2 	sdiv	r0, r5, r2
 801aa42:	fb98 f7f2 	sdiv	r7, r8, r2
 801aa46:	1bc0      	subs	r0, r0, r7
 801aa48:	2800      	cmp	r0, #0
 801aa4a:	bfb8      	it	lt
 801aa4c:	4240      	neglt	r0, r0
 801aa4e:	4286      	cmp	r6, r0
 801aa50:	dd07      	ble.n	801aa62 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 801aa52:	f8db 3010 	ldr.w	r3, [fp, #16]
 801aa56:	a902      	add	r1, sp, #8
 801aa58:	4620      	mov	r0, r4
 801aa5a:	4798      	blx	r3
 801aa5c:	b009      	add	sp, #36	; 0x24
 801aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa62:	eb01 060a 	add.w	r6, r1, sl
 801aa66:	2002      	movs	r0, #2
 801aa68:	eb08 0705 	add.w	r7, r8, r5
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	f10d 0920 	add.w	r9, sp, #32
 801aa72:	9101      	str	r1, [sp, #4]
 801aa74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa78:	fb96 f6f0 	sdiv	r6, r6, r0
 801aa7c:	fb97 f7f0 	sdiv	r7, r7, r0
 801aa80:	4103      	asrs	r3, r0
 801aa82:	b236      	sxth	r6, r6
 801aa84:	b23f      	sxth	r7, r7
 801aa86:	f849 3d08 	str.w	r3, [r9, #-8]!
 801aa8a:	4648      	mov	r0, r9
 801aa8c:	fb96 f6f2 	sdiv	r6, r6, r2
 801aa90:	fb97 f7f2 	sdiv	r7, r7, r2
 801aa94:	f7ff ffa7 	bl	801a9e6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801aa98:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801aa9c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801aaa0:	fa1f fe87 	uxth.w	lr, r7
 801aaa4:	9901      	ldr	r1, [sp, #4]
 801aaa6:	fa1f fc86 	uxth.w	ip, r6
 801aaaa:	4293      	cmp	r3, r2
 801aaac:	b280      	uxth	r0, r0
 801aaae:	eba1 0a0a 	sub.w	sl, r1, sl
 801aab2:	da54      	bge.n	801ab5e <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 801aab4:	ebac 0100 	sub.w	r1, ip, r0
 801aab8:	f1ba 0f00 	cmp.w	sl, #0
 801aabc:	4460      	add	r0, ip
 801aabe:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801aac2:	b289      	uxth	r1, r1
 801aac4:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 801aac8:	b280      	uxth	r0, r0
 801aaca:	b20e      	sxth	r6, r1
 801aacc:	da29      	bge.n	801ab22 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801aace:	eba8 0505 	sub.w	r5, r8, r5
 801aad2:	2d00      	cmp	r5, #0
 801aad4:	da2a      	bge.n	801ab2c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 801aad6:	fa1f f88a 	uxth.w	r8, sl
 801aada:	f8ad a010 	strh.w	sl, [sp, #16]
 801aade:	fa1f f58c 	uxth.w	r5, ip
 801aae2:	f8ad c012 	strh.w	ip, [sp, #18]
 801aae6:	eba0 0008 	sub.w	r0, r0, r8
 801aaea:	4443      	add	r3, r8
 801aaec:	f8ad 6018 	strh.w	r6, [sp, #24]
 801aaf0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801aaf4:	1a59      	subs	r1, r3, r1
 801aaf6:	ebae 0005 	sub.w	r0, lr, r5
 801aafa:	f8ad 701a 	strh.w	r7, [sp, #26]
 801aafe:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ab02:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ab06:	442a      	add	r2, r5
 801ab08:	eba2 0e0e 	sub.w	lr, r2, lr
 801ab0c:	f8ad e01e 	strh.w	lr, [sp, #30]
 801ab10:	f8db 3010 	ldr.w	r3, [fp, #16]
 801ab14:	a904      	add	r1, sp, #16
 801ab16:	4620      	mov	r0, r4
 801ab18:	4798      	blx	r3
 801ab1a:	6823      	ldr	r3, [r4, #0]
 801ab1c:	4649      	mov	r1, r9
 801ab1e:	691b      	ldr	r3, [r3, #16]
 801ab20:	e79a      	b.n	801aa58 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 801ab22:	d003      	beq.n	801ab2c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 801ab24:	eba8 0505 	sub.w	r5, r8, r5
 801ab28:	2d00      	cmp	r5, #0
 801ab2a:	dcd4      	bgt.n	801aad6 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801ab2c:	fa1f f88a 	uxth.w	r8, sl
 801ab30:	f8ad 6010 	strh.w	r6, [sp, #16]
 801ab34:	fa1f f58c 	uxth.w	r5, ip
 801ab38:	f8ad c012 	strh.w	ip, [sp, #18]
 801ab3c:	4443      	add	r3, r8
 801ab3e:	eba0 0008 	sub.w	r0, r0, r8
 801ab42:	f8ad a018 	strh.w	sl, [sp, #24]
 801ab46:	1a59      	subs	r1, r3, r1
 801ab48:	ebae 0305 	sub.w	r3, lr, r5
 801ab4c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ab50:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ab54:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab58:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ab5c:	e7d3      	b.n	801ab06 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801ab5e:	ebae 0100 	sub.w	r1, lr, r0
 801ab62:	f1ba 0f00 	cmp.w	sl, #0
 801ab66:	4470      	add	r0, lr
 801ab68:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801ab6c:	b289      	uxth	r1, r1
 801ab6e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 801ab72:	b280      	uxth	r0, r0
 801ab74:	b20f      	sxth	r7, r1
 801ab76:	da20      	bge.n	801abba <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 801ab78:	eba8 0505 	sub.w	r5, r8, r5
 801ab7c:	2d00      	cmp	r5, #0
 801ab7e:	da21      	bge.n	801abc4 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801ab80:	fa1f f88e 	uxth.w	r8, lr
 801ab84:	f8ad e010 	strh.w	lr, [sp, #16]
 801ab88:	fa1f f58a 	uxth.w	r5, sl
 801ab8c:	f8ad a012 	strh.w	sl, [sp, #18]
 801ab90:	4443      	add	r3, r8
 801ab92:	ebac 0e08 	sub.w	lr, ip, r8
 801ab96:	442a      	add	r2, r5
 801ab98:	1b40      	subs	r0, r0, r5
 801ab9a:	eba3 0c0c 	sub.w	ip, r3, ip
 801ab9e:	f8ad e014 	strh.w	lr, [sp, #20]
 801aba2:	1a51      	subs	r1, r2, r1
 801aba4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801aba8:	f8ad 6018 	strh.w	r6, [sp, #24]
 801abac:	f8ad 701a 	strh.w	r7, [sp, #26]
 801abb0:	f8ad c01c 	strh.w	ip, [sp, #28]
 801abb4:	f8ad 101e 	strh.w	r1, [sp, #30]
 801abb8:	e7aa      	b.n	801ab10 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801abba:	d003      	beq.n	801abc4 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801abbc:	eba8 0505 	sub.w	r5, r8, r5
 801abc0:	2d00      	cmp	r5, #0
 801abc2:	dcdd      	bgt.n	801ab80 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 801abc4:	fa1f f58e 	uxth.w	r5, lr
 801abc8:	f8ad 7012 	strh.w	r7, [sp, #18]
 801abcc:	fa1f f88a 	uxth.w	r8, sl
 801abd0:	f8ad e010 	strh.w	lr, [sp, #16]
 801abd4:	442b      	add	r3, r5
 801abd6:	ebac 0705 	sub.w	r7, ip, r5
 801abda:	4442      	add	r2, r8
 801abdc:	eba0 0008 	sub.w	r0, r0, r8
 801abe0:	eba3 0c0c 	sub.w	ip, r3, ip
 801abe4:	f8ad 7014 	strh.w	r7, [sp, #20]
 801abe8:	1a51      	subs	r1, r2, r1
 801abea:	f8ad 6018 	strh.w	r6, [sp, #24]
 801abee:	f8ad a01a 	strh.w	sl, [sp, #26]
 801abf2:	f8ad 1016 	strh.w	r1, [sp, #22]
 801abf6:	f8ad c01c 	strh.w	ip, [sp, #28]
 801abfa:	f8ad 001e 	strh.w	r0, [sp, #30]
 801abfe:	e787      	b.n	801ab10 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

0801ac00 <_ZN8touchgfx7CWRUtil4sineEi>:
 801ac00:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801ac04:	fb90 f2f3 	sdiv	r2, r0, r3
 801ac08:	fb02 0013 	mls	r0, r2, r3, r0
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	bfb8      	it	lt
 801ac10:	18c0      	addlt	r0, r0, r3
 801ac12:	4b0a      	ldr	r3, [pc, #40]	; (801ac3c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 801ac14:	285a      	cmp	r0, #90	; 0x5a
 801ac16:	dc02      	bgt.n	801ac1e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801ac18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ac1c:	4770      	bx	lr
 801ac1e:	28b4      	cmp	r0, #180	; 0xb4
 801ac20:	dc02      	bgt.n	801ac28 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801ac22:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801ac26:	e7f7      	b.n	801ac18 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801ac28:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801ac2c:	bfd4      	ite	le
 801ac2e:	38b4      	suble	r0, #180	; 0xb4
 801ac30:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801ac34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ac38:	4240      	negs	r0, r0
 801ac3a:	4770      	bx	lr
 801ac3c:	08030330 	.word	0x08030330

0801ac40 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801ac40:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801ac44:	f04f 0300 	mov.w	r3, #0
 801ac48:	bf2c      	ite	cs
 801ac4a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801ac4e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801ac52:	1899      	adds	r1, r3, r2
 801ac54:	4288      	cmp	r0, r1
 801ac56:	bf24      	itt	cs
 801ac58:	1853      	addcs	r3, r2, r1
 801ac5a:	1a40      	subcs	r0, r0, r1
 801ac5c:	0892      	lsrs	r2, r2, #2
 801ac5e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801ac62:	d1f6      	bne.n	801ac52 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801ac64:	4618      	mov	r0, r3
 801ac66:	4770      	bx	lr

0801ac68 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801ac68:	b510      	push	{r4, lr}
 801ac6a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801ac6e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801ac72:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801ac76:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801ac7a:	139b      	asrs	r3, r3, #14
 801ac7c:	13a4      	asrs	r4, r4, #14
 801ac7e:	429c      	cmp	r4, r3
 801ac80:	bfb8      	it	lt
 801ac82:	461c      	movlt	r4, r3
 801ac84:	2c01      	cmp	r4, #1
 801ac86:	dd07      	ble.n	801ac98 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801ac88:	fb91 f1f4 	sdiv	r1, r1, r4
 801ac8c:	fb90 f0f4 	sdiv	r0, r0, r4
 801ac90:	f7ff ffea 	bl	801ac68 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801ac94:	4360      	muls	r0, r4
 801ac96:	bd10      	pop	{r4, pc}
 801ac98:	4340      	muls	r0, r0
 801ac9a:	fb01 0001 	mla	r0, r1, r1, r0
 801ac9e:	f7ff ffcf 	bl	801ac40 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801aca2:	e7f8      	b.n	801ac96 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0801aca4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801aca4:	2800      	cmp	r0, #0
 801aca6:	b508      	push	{r3, lr}
 801aca8:	da05      	bge.n	801acb6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801acaa:	4240      	negs	r0, r0
 801acac:	f7ff fffa 	bl	801aca4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801acb0:	4240      	negs	r0, r0
 801acb2:	b240      	sxtb	r0, r0
 801acb4:	bd08      	pop	{r3, pc}
 801acb6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801acba:	dc11      	bgt.n	801ace0 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801acbc:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801acc0:	dd09      	ble.n	801acd6 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801acc2:	4340      	muls	r0, r0
 801acc4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801acc8:	f7ff ffba 	bl	801ac40 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801accc:	f7ff ffea 	bl	801aca4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801acd0:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801acd4:	e7ed      	b.n	801acb2 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801acd6:	3003      	adds	r0, #3
 801acd8:	4b02      	ldr	r3, [pc, #8]	; (801ace4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801acda:	10c0      	asrs	r0, r0, #3
 801acdc:	5618      	ldrsb	r0, [r3, r0]
 801acde:	e7e9      	b.n	801acb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801ace0:	2000      	movs	r0, #0
 801ace2:	e7e7      	b.n	801acb4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801ace4:	080302d4 	.word	0x080302d4

0801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801ace8:	4281      	cmp	r1, r0
 801acea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acec:	460c      	mov	r4, r1
 801acee:	4615      	mov	r5, r2
 801acf0:	dd07      	ble.n	801ad02 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 801acf2:	4601      	mov	r1, r0
 801acf4:	4620      	mov	r0, r4
 801acf6:	f7ff fff7 	bl	801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801acfa:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801acfe:	b003      	add	sp, #12
 801ad00:	bd30      	pop	{r4, r5, pc}
 801ad02:	f7ff ffb1 	bl	801ac68 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801ad06:	6028      	str	r0, [r5, #0]
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	d0f8      	beq.n	801acfe <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	ab01      	add	r3, sp, #4
 801ad10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ad14:	4620      	mov	r0, r4
 801ad16:	f004 fcca 	bl	801f6ae <_ZN8touchgfx6muldivElllRl>
 801ad1a:	f7ff ffc3 	bl	801aca4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801ad1e:	e7ee      	b.n	801acfe <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

0801ad20 <_ZN8touchgfx4LineC1Ev>:
 801ad20:	b510      	push	{r4, lr}
 801ad22:	4604      	mov	r4, r0
 801ad24:	f7ff fe30 	bl	801a988 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801ad28:	4b0c      	ldr	r3, [pc, #48]	; (801ad5c <_ZN8touchgfx4LineC1Ev+0x3c>)
 801ad2a:	2220      	movs	r2, #32
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	6023      	str	r3, [r4, #0]
 801ad30:	2300      	movs	r3, #0
 801ad32:	63e2      	str	r2, [r4, #60]	; 0x3c
 801ad34:	2212      	movs	r2, #18
 801ad36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801ad3a:	66e2      	str	r2, [r4, #108]	; 0x6c
 801ad3c:	60a3      	str	r3, [r4, #8]
 801ad3e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801ad42:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801ad46:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 801ad4a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801ad4e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 801ad52:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 801ad56:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 801ad5a:	bd10      	pop	{r4, pc}
 801ad5c:	080303f0 	.word	0x080303f0

0801ad60 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801ad60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad64:	6b47      	ldr	r7, [r0, #52]	; 0x34
 801ad66:	4604      	mov	r4, r0
 801ad68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ad6a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801ad6c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801ad6e:	1aff      	subs	r7, r7, r3
 801ad70:	eba5 0502 	sub.w	r5, r5, r2
 801ad74:	d142      	bne.n	801adfc <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 801ad76:	b955      	cbnz	r5, 801ad8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 801ad78:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 801ad7c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 801ad80:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 801ad84:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 801ad88:	b002      	add	sp, #8
 801ad8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad8e:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 801ad92:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 801ad96:	4629      	mov	r1, r5
 801ad98:	2502      	movs	r5, #2
 801ad9a:	4642      	mov	r2, r8
 801ad9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ad9e:	f004 fca5 	bl	801f6ec <_ZN8touchgfx6muldivElll>
 801ada2:	4642      	mov	r2, r8
 801ada4:	4639      	mov	r1, r7
 801ada6:	fb90 f6f5 	sdiv	r6, r0, r5
 801adaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801adac:	f004 fc9e 	bl	801f6ec <_ZN8touchgfx6muldivElll>
 801adb0:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 801adb4:	fb90 f5f5 	sdiv	r5, r0, r5
 801adb8:	f1b9 0f00 	cmp.w	r9, #0
 801adbc:	d067      	beq.n	801ae8e <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 801adbe:	f1b9 0f02 	cmp.w	r9, #2
 801adc2:	d878      	bhi.n	801aeb6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 801adc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801adc6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801adc8:	1b93      	subs	r3, r2, r6
 801adca:	4432      	add	r2, r6
 801adcc:	1b5b      	subs	r3, r3, r5
 801adce:	1b52      	subs	r2, r2, r5
 801add0:	6463      	str	r3, [r4, #68]	; 0x44
 801add2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801add4:	6522      	str	r2, [r4, #80]	; 0x50
 801add6:	18e9      	adds	r1, r5, r3
 801add8:	1b5b      	subs	r3, r3, r5
 801adda:	1b89      	subs	r1, r1, r6
 801addc:	1b9b      	subs	r3, r3, r6
 801adde:	6561      	str	r1, [r4, #84]	; 0x54
 801ade0:	1b81      	subs	r1, r0, r6
 801ade2:	4430      	add	r0, r6
 801ade4:	4429      	add	r1, r5
 801ade6:	4428      	add	r0, r5
 801ade8:	64a1      	str	r1, [r4, #72]	; 0x48
 801adea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801adec:	64e0      	str	r0, [r4, #76]	; 0x4c
 801adee:	186f      	adds	r7, r5, r1
 801adf0:	1b49      	subs	r1, r1, r5
 801adf2:	4437      	add	r7, r6
 801adf4:	4431      	add	r1, r6
 801adf6:	65a7      	str	r7, [r4, #88]	; 0x58
 801adf8:	65e1      	str	r1, [r4, #92]	; 0x5c
 801adfa:	e05b      	b.n	801aeb4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 801adfc:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 801ae00:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 801ae04:	2d00      	cmp	r5, #0
 801ae06:	d0c6      	beq.n	801ad96 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 801ae08:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801ae0c:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801ae10:	fb93 f2f8 	sdiv	r2, r3, r8
 801ae14:	fb08 3312 	mls	r3, r8, r2, r3
 801ae18:	b353      	cbz	r3, 801ae70 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 801ae1a:	fb98 f2f3 	sdiv	r2, r8, r3
 801ae1e:	fb03 8812 	mls	r8, r3, r2, r8
 801ae22:	f1b8 0f00 	cmp.w	r8, #0
 801ae26:	d1f3      	bne.n	801ae10 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 801ae28:	2b01      	cmp	r3, #1
 801ae2a:	f24b 5104 	movw	r1, #46340	; 0xb504
 801ae2e:	bf1c      	itt	ne
 801ae30:	fb97 f7f3 	sdivne	r7, r7, r3
 801ae34:	fb95 f5f3 	sdivne	r5, r5, r3
 801ae38:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 801ae3c:	4608      	mov	r0, r1
 801ae3e:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 801ae42:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 801ae46:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 801ae4a:	428b      	cmp	r3, r1
 801ae4c:	dd01      	ble.n	801ae52 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 801ae4e:	428a      	cmp	r2, r1
 801ae50:	dc10      	bgt.n	801ae74 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 801ae52:	fb90 f3f3 	sdiv	r3, r0, r3
 801ae56:	fb90 f2f2 	sdiv	r2, r0, r2
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	bfa8      	it	ge
 801ae5e:	4613      	movge	r3, r2
 801ae60:	435f      	muls	r7, r3
 801ae62:	435d      	muls	r5, r3
 801ae64:	4629      	mov	r1, r5
 801ae66:	4638      	mov	r0, r7
 801ae68:	f7ff fefe 	bl	801ac68 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801ae6c:	4680      	mov	r8, r0
 801ae6e:	e792      	b.n	801ad96 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 801ae70:	4643      	mov	r3, r8
 801ae72:	e7d9      	b.n	801ae28 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 801ae74:	fb93 f3f1 	sdiv	r3, r3, r1
 801ae78:	fb92 f2f1 	sdiv	r2, r2, r1
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	bfcc      	ite	gt
 801ae80:	3301      	addgt	r3, #1
 801ae82:	1c53      	addle	r3, r2, #1
 801ae84:	fb97 f7f3 	sdiv	r7, r7, r3
 801ae88:	fb95 f5f3 	sdiv	r5, r5, r3
 801ae8c:	e7ea      	b.n	801ae64 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 801ae8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ae90:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ae92:	1b93      	subs	r3, r2, r6
 801ae94:	4432      	add	r2, r6
 801ae96:	6463      	str	r3, [r4, #68]	; 0x44
 801ae98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ae9a:	6522      	str	r2, [r4, #80]	; 0x50
 801ae9c:	18e9      	adds	r1, r5, r3
 801ae9e:	1b5b      	subs	r3, r3, r5
 801aea0:	6561      	str	r1, [r4, #84]	; 0x54
 801aea2:	1b81      	subs	r1, r0, r6
 801aea4:	4430      	add	r0, r6
 801aea6:	64a1      	str	r1, [r4, #72]	; 0x48
 801aea8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801aeaa:	64e0      	str	r0, [r4, #76]	; 0x4c
 801aeac:	186f      	adds	r7, r5, r1
 801aeae:	1b49      	subs	r1, r1, r5
 801aeb0:	65a7      	str	r7, [r4, #88]	; 0x58
 801aeb2:	65e1      	str	r1, [r4, #92]	; 0x5c
 801aeb4:	6623      	str	r3, [r4, #96]	; 0x60
 801aeb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801aeb8:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801aebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801aebe:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 801aec2:	9200      	str	r2, [sp, #0]
 801aec4:	9301      	str	r3, [sp, #4]
 801aec6:	680f      	ldr	r7, [r1, #0]
 801aec8:	3104      	adds	r1, #4
 801aeca:	9800      	ldr	r0, [sp, #0]
 801aecc:	42ba      	cmp	r2, r7
 801aece:	bfa8      	it	ge
 801aed0:	463a      	movge	r2, r7
 801aed2:	4287      	cmp	r7, r0
 801aed4:	9801      	ldr	r0, [sp, #4]
 801aed6:	bfc8      	it	gt
 801aed8:	9700      	strgt	r7, [sp, #0]
 801aeda:	68cf      	ldr	r7, [r1, #12]
 801aedc:	42bb      	cmp	r3, r7
 801aede:	bfa8      	it	ge
 801aee0:	463b      	movge	r3, r7
 801aee2:	4287      	cmp	r7, r0
 801aee4:	bfc8      	it	gt
 801aee6:	9701      	strgt	r7, [sp, #4]
 801aee8:	458c      	cmp	ip, r1
 801aeea:	d1ec      	bne.n	801aec6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801aeec:	2720      	movs	r7, #32
 801aeee:	4668      	mov	r0, sp
 801aef0:	fb92 f8f7 	sdiv	r8, r2, r7
 801aef4:	fb93 f7f7 	sdiv	r7, r3, r7
 801aef8:	f7ff fd75 	bl	801a9e6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801aefc:	4682      	mov	sl, r0
 801aefe:	a801      	add	r0, sp, #4
 801af00:	f7ff fd71 	bl	801a9e6 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801af04:	ebaa 0208 	sub.w	r2, sl, r8
 801af08:	1bc0      	subs	r0, r0, r7
 801af0a:	f1b9 0f01 	cmp.w	r9, #1
 801af0e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 801af12:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 801af16:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 801af1a:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 801af1e:	f47f af33 	bne.w	801ad88 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 801af22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801af24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af26:	1b83      	subs	r3, r0, r6
 801af28:	6463      	str	r3, [r4, #68]	; 0x44
 801af2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801af2c:	18ea      	adds	r2, r5, r3
 801af2e:	6562      	str	r2, [r4, #84]	; 0x54
 801af30:	1b8a      	subs	r2, r1, r6
 801af32:	4431      	add	r1, r6
 801af34:	4406      	add	r6, r0
 801af36:	64a2      	str	r2, [r4, #72]	; 0x48
 801af38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801af3a:	64e1      	str	r1, [r4, #76]	; 0x4c
 801af3c:	18af      	adds	r7, r5, r2
 801af3e:	1b52      	subs	r2, r2, r5
 801af40:	1b5d      	subs	r5, r3, r5
 801af42:	6526      	str	r6, [r4, #80]	; 0x50
 801af44:	65a7      	str	r7, [r4, #88]	; 0x58
 801af46:	65e2      	str	r2, [r4, #92]	; 0x5c
 801af48:	6625      	str	r5, [r4, #96]	; 0x60
 801af4a:	e71d      	b.n	801ad88 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

0801af4c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801af4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801af4e:	428b      	cmp	r3, r1
 801af50:	d102      	bne.n	801af58 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801af52:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801af54:	4293      	cmp	r3, r2
 801af56:	d003      	beq.n	801af60 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801af58:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 801af5c:	f7ff bf00 	b.w	801ad60 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801af60:	4770      	bx	lr

0801af62 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801af62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801af64:	428b      	cmp	r3, r1
 801af66:	d102      	bne.n	801af6e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801af68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801af6a:	4293      	cmp	r3, r2
 801af6c:	d003      	beq.n	801af76 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801af6e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801af72:	f7ff bef5 	b.w	801ad60 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801af76:	4770      	bx	lr

0801af78 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801af78:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 801af7c:	f7ff bef0 	b.w	801ad60 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801af80 <_ZN8touchgfx6CanvasD1Ev>:
 801af80:	4b04      	ldr	r3, [pc, #16]	; (801af94 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801af82:	b510      	push	{r4, lr}
 801af84:	4604      	mov	r4, r0
 801af86:	f840 3b20 	str.w	r3, [r0], #32
 801af8a:	f000 fee5 	bl	801bd58 <_ZN8touchgfx7OutlineD1Ev>
 801af8e:	4620      	mov	r0, r4
 801af90:	bd10      	pop	{r4, pc}
 801af92:	bf00      	nop
 801af94:	080302cc 	.word	0x080302cc

0801af98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af9c:	b0a0      	sub	sp, #128	; 0x80
 801af9e:	4604      	mov	r4, r0
 801afa0:	460a      	mov	r2, r1
 801afa2:	4601      	mov	r1, r0
 801afa4:	a804      	add	r0, sp, #16
 801afa6:	f011 fb29 	bl	802c5fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801afaa:	2300      	movs	r3, #0
 801afac:	9301      	str	r3, [sp, #4]
 801afae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801afb2:	2b01      	cmp	r3, #1
 801afb4:	d17c      	bne.n	801b0b0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 801afb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801afb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801afba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801afbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801afbe:	1ac0      	subs	r0, r0, r3
 801afc0:	eba1 0102 	sub.w	r1, r1, r2
 801afc4:	d437      	bmi.n	801b036 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 801afc6:	2900      	cmp	r1, #0
 801afc8:	aa01      	add	r2, sp, #4
 801afca:	db2e      	blt.n	801b02a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 801afcc:	f7ff fe8c 	bl	801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801afd0:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 801afd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801afd6:	a804      	add	r0, sp, #16
 801afd8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801afda:	f011 fce5 	bl	802c9a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801afde:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801afe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801afe2:	a804      	add	r0, sp, #16
 801afe4:	f011 fbb8 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801afe8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801afea:	2db3      	cmp	r5, #179	; 0xb3
 801afec:	dc33      	bgt.n	801b056 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801afee:	eba6 0805 	sub.w	r8, r6, r5
 801aff2:	4640      	mov	r0, r8
 801aff4:	f7ff fe04 	bl	801ac00 <_ZN8touchgfx7CWRUtil4sineEi>
 801aff8:	a902      	add	r1, sp, #8
 801affa:	9002      	str	r0, [sp, #8]
 801affc:	a801      	add	r0, sp, #4
 801affe:	f7ff fce7 	bl	801a9d0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b004:	1847      	adds	r7, r0, r1
 801b006:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801b00a:	f7ff fdf9 	bl	801ac00 <_ZN8touchgfx7CWRUtil4sineEi>
 801b00e:	a903      	add	r1, sp, #12
 801b010:	9003      	str	r0, [sp, #12]
 801b012:	a801      	add	r0, sp, #4
 801b014:	f7ff fcdc 	bl	801a9d0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b01a:	4639      	mov	r1, r7
 801b01c:	1a12      	subs	r2, r2, r0
 801b01e:	a804      	add	r0, sp, #16
 801b020:	f011 fb9a 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b024:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b026:	441d      	add	r5, r3
 801b028:	e7df      	b.n	801afea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 801b02a:	4249      	negs	r1, r1
 801b02c:	f7ff fe5c 	bl	801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b030:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 801b034:	e7ce      	b.n	801afd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b036:	2900      	cmp	r1, #0
 801b038:	f1c0 0000 	rsb	r0, r0, #0
 801b03c:	aa01      	add	r2, sp, #4
 801b03e:	db04      	blt.n	801b04a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 801b040:	f7ff fe52 	bl	801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b044:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 801b048:	e7c4      	b.n	801afd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b04a:	4249      	negs	r1, r1
 801b04c:	f7ff fe4c 	bl	801ace8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b050:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 801b054:	e7be      	b.n	801afd4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b056:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801b058:	a804      	add	r0, sp, #16
 801b05a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801b05c:	f011 fb7c 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b060:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801b062:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b064:	a804      	add	r0, sp, #16
 801b066:	f011 fb77 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b06a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801b06c:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 801b070:	2d00      	cmp	r5, #0
 801b072:	dd31      	ble.n	801b0d8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 801b074:	eb05 0806 	add.w	r8, r5, r6
 801b078:	4640      	mov	r0, r8
 801b07a:	f7ff fdc1 	bl	801ac00 <_ZN8touchgfx7CWRUtil4sineEi>
 801b07e:	a902      	add	r1, sp, #8
 801b080:	9002      	str	r0, [sp, #8]
 801b082:	a801      	add	r0, sp, #4
 801b084:	f7ff fca4 	bl	801a9d0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b088:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b08a:	1847      	adds	r7, r0, r1
 801b08c:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801b090:	f7ff fdb6 	bl	801ac00 <_ZN8touchgfx7CWRUtil4sineEi>
 801b094:	a903      	add	r1, sp, #12
 801b096:	9003      	str	r0, [sp, #12]
 801b098:	a801      	add	r0, sp, #4
 801b09a:	f7ff fc99 	bl	801a9d0 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b09e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b0a0:	4639      	mov	r1, r7
 801b0a2:	1a12      	subs	r2, r2, r0
 801b0a4:	a804      	add	r0, sp, #16
 801b0a6:	f011 fb57 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b0ac:	1aed      	subs	r5, r5, r3
 801b0ae:	e7df      	b.n	801b070 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 801b0b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801b0b2:	a804      	add	r0, sp, #16
 801b0b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b0b6:	f011 fc77 	bl	802c9a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801b0ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801b0bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b0be:	a804      	add	r0, sp, #16
 801b0c0:	f011 fb4a 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801b0c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801b0c8:	a804      	add	r0, sp, #16
 801b0ca:	f011 fb45 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801b0d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b0d2:	a804      	add	r0, sp, #16
 801b0d4:	f011 fb40 	bl	802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0d8:	21ff      	movs	r1, #255	; 0xff
 801b0da:	a804      	add	r0, sp, #16
 801b0dc:	f011 fbb8 	bl	802c850 <_ZN8touchgfx6Canvas6renderEh>
 801b0e0:	4604      	mov	r4, r0
 801b0e2:	a804      	add	r0, sp, #16
 801b0e4:	f7ff ff4c 	bl	801af80 <_ZN8touchgfx6CanvasD1Ev>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	b020      	add	sp, #128	; 0x80
 801b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0f0 <_ZN8touchgfx6CanvasD0Ev>:
 801b0f0:	b510      	push	{r4, lr}
 801b0f2:	4604      	mov	r4, r0
 801b0f4:	f7ff ff44 	bl	801af80 <_ZN8touchgfx6CanvasD1Ev>
 801b0f8:	2170      	movs	r1, #112	; 0x70
 801b0fa:	4620      	mov	r0, r4
 801b0fc:	f011 fca6 	bl	802ca4c <_ZdlPvj>
 801b100:	4620      	mov	r0, r4
 801b102:	bd10      	pop	{r4, pc}

0801b104 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801b104:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801b108:	4770      	bx	lr

0801b10a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801b10a:	b510      	push	{r4, lr}
 801b10c:	4604      	mov	r4, r0
 801b10e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b110:	b150      	cbz	r0, 801b128 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b112:	6803      	ldr	r3, [r0, #0]
 801b114:	68db      	ldr	r3, [r3, #12]
 801b116:	4798      	blx	r3
 801b118:	b130      	cbz	r0, 801b128 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801b11a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801b11c:	4621      	mov	r1, r4
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b124:	689b      	ldr	r3, [r3, #8]
 801b126:	4718      	bx	r3
 801b128:	bd10      	pop	{r4, pc}

0801b12a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801b12a:	790b      	ldrb	r3, [r1, #4]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	bf0c      	ite	eq
 801b130:	2301      	moveq	r3, #1
 801b132:	2300      	movne	r3, #0
 801b134:	b570      	push	{r4, r5, r6, lr}
 801b136:	4604      	mov	r4, r0
 801b138:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801b13c:	460e      	mov	r6, r1
 801b13e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801b142:	d109      	bne.n	801b158 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801b144:	b14d      	cbz	r5, 801b15a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801b146:	7933      	ldrb	r3, [r6, #4]
 801b148:	2b01      	cmp	r3, #1
 801b14a:	d10c      	bne.n	801b166 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b14c:	6823      	ldr	r3, [r4, #0]
 801b14e:	4620      	mov	r0, r4
 801b150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b156:	4718      	bx	r3
 801b158:	b12d      	cbz	r5, 801b166 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801b15a:	6823      	ldr	r3, [r4, #0]
 801b15c:	4620      	mov	r0, r4
 801b15e:	695b      	ldr	r3, [r3, #20]
 801b160:	4798      	blx	r3
 801b162:	2d00      	cmp	r5, #0
 801b164:	d1ef      	bne.n	801b146 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801b166:	bd70      	pop	{r4, r5, r6, pc}

0801b168 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 801b168:	880b      	ldrh	r3, [r1, #0]
 801b16a:	8643      	strh	r3, [r0, #50]	; 0x32
 801b16c:	4770      	bx	lr

0801b16e <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 801b16e:	b513      	push	{r0, r1, r4, lr}
 801b170:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801b174:	4604      	mov	r4, r0
 801b176:	b13b      	cbz	r3, 801b188 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1a>
 801b178:	f003 f922 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801b17c:	4621      	mov	r1, r4
 801b17e:	f003 f94a 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801b182:	2300      	movs	r3, #0
 801b184:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801b188:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801b18c:	b163      	cbz	r3, 801b1a8 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3a>
 801b18e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b190:	a901      	add	r1, sp, #4
 801b192:	4620      	mov	r0, r4
 801b194:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b198:	f000 fd72 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b19c:	6823      	ldr	r3, [r4, #0]
 801b19e:	4620      	mov	r0, r4
 801b1a0:	695b      	ldr	r3, [r3, #20]
 801b1a2:	4798      	blx	r3
 801b1a4:	b002      	add	sp, #8
 801b1a6:	bd10      	pop	{r4, pc}
 801b1a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b1aa:	e7f1      	b.n	801b190 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x22>

0801b1ac <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 801b1ac:	880b      	ldrh	r3, [r1, #0]
 801b1ae:	8603      	strh	r3, [r0, #48]	; 0x30
 801b1b0:	f000 bd66 	b.w	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

0801b1b4 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 801b1b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b1b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801b1ba:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801b1bc:	4604      	mov	r4, r0
 801b1be:	42bd      	cmp	r5, r7
 801b1c0:	d019      	beq.n	801b1f6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 801b1c2:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801b1c4:	42be      	cmp	r6, r7
 801b1c6:	d016      	beq.n	801b1f6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 801b1c8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801b1cc:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
 801b1d0:	b199      	cbz	r1, 801b1fa <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x46>
 801b1d2:	b142      	cbz	r2, 801b1e6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801b1d4:	a902      	add	r1, sp, #8
 801b1d6:	f821 6d04 	strh.w	r6, [r1, #-4]!
 801b1da:	f000 fd51 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b1de:	6823      	ldr	r3, [r4, #0]
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	695b      	ldr	r3, [r3, #20]
 801b1e4:	4798      	blx	r3
 801b1e6:	f003 f8eb 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801b1ea:	4621      	mov	r1, r4
 801b1ec:	f003 f8ee 	bl	801e3cc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801b1f6:	b003      	add	sp, #12
 801b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1fa:	2a00      	cmp	r2, #0
 801b1fc:	d0f3      	beq.n	801b1e6 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801b1fe:	a902      	add	r1, sp, #8
 801b200:	f821 5d04 	strh.w	r5, [r1, #-4]!
 801b204:	e7e9      	b.n	801b1da <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

0801b206 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 801b206:	b510      	push	{r4, lr}
 801b208:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801b20c:	4604      	mov	r4, r0
 801b20e:	b143      	cbz	r3, 801b222 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1c>
 801b210:	f003 f8d6 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801b214:	4621      	mov	r1, r4
 801b216:	f003 f8fe 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801b21a:	2300      	movs	r3, #0
 801b21c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801b220:	bd10      	pop	{r4, pc}
 801b222:	f003 f8cd 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801b226:	4621      	mov	r1, r4
 801b228:	f003 f8d0 	bl	801e3cc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801b22c:	2301      	movs	r3, #1
 801b22e:	e7f5      	b.n	801b21c <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x16>

0801b230 <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 801b230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b232:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801b236:	4604      	mov	r4, r0
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d041      	beq.n	801b2c0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801b23c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801b240:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 801b244:	3301      	adds	r3, #1
 801b246:	b2db      	uxtb	r3, r3
 801b248:	429a      	cmp	r2, r3
 801b24a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801b24e:	d137      	bne.n	801b2c0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801b250:	2300      	movs	r3, #0
 801b252:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801b254:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 801b258:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801b25c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801b25e:	4299      	cmp	r1, r3
 801b260:	d100      	bne.n	801b264 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 801b262:	b122      	cbz	r2, 801b26e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 801b264:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 801b266:	4299      	cmp	r1, r3
 801b268:	d12e      	bne.n	801b2c8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x98>
 801b26a:	2a00      	cmp	r2, #0
 801b26c:	d033      	beq.n	801b2d6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa6>
 801b26e:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
 801b272:	b935      	cbnz	r5, 801b282 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x52>
 801b274:	f003 f8a4 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801b278:	4621      	mov	r1, r4
 801b27a:	f003 f8cc 	bl	801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801b27e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 801b282:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b284:	b140      	cbz	r0, 801b298 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x68>
 801b286:	6803      	ldr	r3, [r0, #0]
 801b288:	68db      	ldr	r3, [r3, #12]
 801b28a:	4798      	blx	r3
 801b28c:	b120      	cbz	r0, 801b298 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x68>
 801b28e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801b290:	4621      	mov	r1, r4
 801b292:	6803      	ldr	r3, [r0, #0]
 801b294:	689b      	ldr	r3, [r3, #8]
 801b296:	4798      	blx	r3
 801b298:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b29c:	b183      	cbz	r3, 801b2c0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801b29e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b2a2:	b16b      	cbz	r3, 801b2c0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801b2a4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801b2a8:	b163      	cbz	r3, 801b2c4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x94>
 801b2aa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b2ac:	a901      	add	r1, sp, #4
 801b2ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f000 fce4 	bl	801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801b2b8:	6823      	ldr	r3, [r4, #0]
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	695b      	ldr	r3, [r3, #20]
 801b2be:	4798      	blx	r3
 801b2c0:	b003      	add	sp, #12
 801b2c2:	bd30      	pop	{r4, r5, pc}
 801b2c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801b2c6:	e7f1      	b.n	801b2ac <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7c>
 801b2c8:	b12a      	cbz	r2, 801b2d6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa6>
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	b29b      	uxth	r3, r3
 801b2ce:	a902      	add	r1, sp, #8
 801b2d0:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801b2d4:	e7ed      	b.n	801b2b2 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x82>
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	e7f8      	b.n	801b2cc <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>

0801b2da <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 801b2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2dc:	ac02      	add	r4, sp, #8
 801b2de:	6803      	ldr	r3, [r0, #0]
 801b2e0:	4605      	mov	r5, r0
 801b2e2:	4616      	mov	r6, r2
 801b2e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b2e6:	f824 1d04 	strh.w	r1, [r4, #-4]!
 801b2ea:	4621      	mov	r1, r4
 801b2ec:	4798      	blx	r3
 801b2ee:	682b      	ldr	r3, [r5, #0]
 801b2f0:	4621      	mov	r1, r4
 801b2f2:	4628      	mov	r0, r5
 801b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2f6:	f8ad 6004 	strh.w	r6, [sp, #4]
 801b2fa:	4798      	blx	r3
 801b2fc:	b002      	add	sp, #8
 801b2fe:	bd70      	pop	{r4, r5, r6, pc}

0801b300 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 801b300:	2300      	movs	r3, #0
 801b302:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 801b306:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801b30a:	4770      	bx	lr

0801b30c <_ZN8touchgfx8TextArea8setWidthEs>:
 801b30c:	b530      	push	{r4, r5, lr}
 801b30e:	b085      	sub	sp, #20
 801b310:	6803      	ldr	r3, [r0, #0]
 801b312:	4604      	mov	r4, r0
 801b314:	8101      	strh	r1, [r0, #8]
 801b316:	466d      	mov	r5, sp
 801b318:	4601      	mov	r1, r0
 801b31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b31e:	343c      	adds	r4, #60	; 0x3c
 801b320:	4628      	mov	r0, r5
 801b322:	4798      	blx	r3
 801b324:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b32c:	b005      	add	sp, #20
 801b32e:	bd30      	pop	{r4, r5, pc}

0801b330 <_ZN8touchgfx8TextArea9setHeightEs>:
 801b330:	b530      	push	{r4, r5, lr}
 801b332:	b085      	sub	sp, #20
 801b334:	6803      	ldr	r3, [r0, #0]
 801b336:	4604      	mov	r4, r0
 801b338:	8141      	strh	r1, [r0, #10]
 801b33a:	466d      	mov	r5, sp
 801b33c:	4601      	mov	r1, r0
 801b33e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b342:	343c      	adds	r4, #60	; 0x3c
 801b344:	4628      	mov	r0, r5
 801b346:	4798      	blx	r3
 801b348:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b34c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b350:	b005      	add	sp, #20
 801b352:	bd30      	pop	{r4, r5, pc}

0801b354 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801b354:	2200      	movs	r2, #0
 801b356:	8002      	strh	r2, [r0, #0]
 801b358:	8042      	strh	r2, [r0, #2]
 801b35a:	8082      	strh	r2, [r0, #4]
 801b35c:	80c2      	strh	r2, [r0, #6]
 801b35e:	4770      	bx	lr

0801b360 <_ZN8touchgfx8TextArea8setAlphaEh>:
 801b360:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801b364:	4770      	bx	lr
	...

0801b368 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801b368:	b570      	push	{r4, r5, r6, lr}
 801b36a:	6803      	ldr	r3, [r0, #0]
 801b36c:	4604      	mov	r4, r0
 801b36e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b370:	460d      	mov	r5, r1
 801b372:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801b374:	4b08      	ldr	r3, [pc, #32]	; (801b398 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b37c:	4b07      	ldr	r3, [pc, #28]	; (801b39c <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b384:	6803      	ldr	r3, [r0, #0]
 801b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b388:	4798      	blx	r3
 801b38a:	1a29      	subs	r1, r5, r0
 801b38c:	4633      	mov	r3, r6
 801b38e:	4620      	mov	r0, r4
 801b390:	b209      	sxth	r1, r1
 801b392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b396:	4718      	bx	r3
 801b398:	2400d884 	.word	0x2400d884
 801b39c:	2400d88c 	.word	0x2400d88c

0801b3a0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801b3a0:	b570      	push	{r4, r5, r6, lr}
 801b3a2:	6803      	ldr	r3, [r0, #0]
 801b3a4:	4604      	mov	r4, r0
 801b3a6:	4615      	mov	r5, r2
 801b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3aa:	4798      	blx	r3
 801b3ac:	6823      	ldr	r3, [r4, #0]
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b3b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3b8:	4718      	bx	r3

0801b3ba <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801b3ba:	2000      	movs	r0, #0
 801b3bc:	4770      	bx	lr

0801b3be <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 801b3be:	2000      	movs	r0, #0
 801b3c0:	4770      	bx	lr
	...

0801b3c4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801b3c4:	4b07      	ldr	r3, [pc, #28]	; (801b3e4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801b3c6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b3c8:	881b      	ldrh	r3, [r3, #0]
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	bf81      	itttt	hi
 801b3ce:	4b06      	ldrhi	r3, [pc, #24]	; (801b3e8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801b3d0:	681b      	ldrhi	r3, [r3, #0]
 801b3d2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801b3d6:	7858      	ldrbhi	r0, [r3, #1]
 801b3d8:	bf8c      	ite	hi
 801b3da:	f000 0003 	andhi.w	r0, r0, #3
 801b3de:	2000      	movls	r0, #0
 801b3e0:	4770      	bx	lr
 801b3e2:	bf00      	nop
 801b3e4:	2400d888 	.word	0x2400d888
 801b3e8:	2400d884 	.word	0x2400d884

0801b3ec <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801b3ec:	4b11      	ldr	r3, [pc, #68]	; (801b434 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b3f4:	4604      	mov	r4, r0
 801b3f6:	881b      	ldrh	r3, [r3, #0]
 801b3f8:	428b      	cmp	r3, r1
 801b3fa:	d918      	bls.n	801b42e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801b3fc:	6803      	ldr	r3, [r0, #0]
 801b3fe:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801b400:	4b0d      	ldr	r3, [pc, #52]	; (801b438 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801b402:	6818      	ldr	r0, [r3, #0]
 801b404:	f7f9 ffb0 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b408:	6823      	ldr	r3, [r4, #0]
 801b40a:	4606      	mov	r6, r0
 801b40c:	4620      	mov	r0, r4
 801b40e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b410:	4798      	blx	r3
 801b412:	6823      	ldr	r3, [r4, #0]
 801b414:	4607      	mov	r7, r0
 801b416:	4620      	mov	r0, r4
 801b418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b41c:	4798      	blx	r3
 801b41e:	463a      	mov	r2, r7
 801b420:	4603      	mov	r3, r0
 801b422:	4631      	mov	r1, r6
 801b424:	4620      	mov	r0, r4
 801b426:	46ac      	mov	ip, r5
 801b428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b42c:	4760      	bx	ip
 801b42e:	2000      	movs	r0, #0
 801b430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b434:	2400d888 	.word	0x2400d888
 801b438:	2400d890 	.word	0x2400d890

0801b43c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801b43c:	4b18      	ldr	r3, [pc, #96]	; (801b4a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801b43e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b442:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b444:	4604      	mov	r4, r0
 801b446:	881b      	ldrh	r3, [r3, #0]
 801b448:	428b      	cmp	r3, r1
 801b44a:	d926      	bls.n	801b49a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801b44c:	4b15      	ldr	r3, [pc, #84]	; (801b4a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801b454:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801b458:	4b13      	ldr	r3, [pc, #76]	; (801b4a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801b45a:	7855      	ldrb	r5, [r2, #1]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801b462:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b466:	6833      	ldr	r3, [r6, #0]
 801b468:	69df      	ldr	r7, [r3, #28]
 801b46a:	4b10      	ldr	r3, [pc, #64]	; (801b4ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801b46c:	6818      	ldr	r0, [r3, #0]
 801b46e:	f7f9 ff7b 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b472:	6823      	ldr	r3, [r4, #0]
 801b474:	4680      	mov	r8, r0
 801b476:	4620      	mov	r0, r4
 801b478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b47a:	4798      	blx	r3
 801b47c:	6823      	ldr	r3, [r4, #0]
 801b47e:	4681      	mov	r9, r0
 801b480:	4620      	mov	r0, r4
 801b482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b486:	4798      	blx	r3
 801b488:	464b      	mov	r3, r9
 801b48a:	9000      	str	r0, [sp, #0]
 801b48c:	4642      	mov	r2, r8
 801b48e:	4629      	mov	r1, r5
 801b490:	4630      	mov	r0, r6
 801b492:	47b8      	blx	r7
 801b494:	b003      	add	sp, #12
 801b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b49a:	2000      	movs	r0, #0
 801b49c:	e7fa      	b.n	801b494 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801b49e:	bf00      	nop
 801b4a0:	2400d888 	.word	0x2400d888
 801b4a4:	2400d884 	.word	0x2400d884
 801b4a8:	2400d88c 	.word	0x2400d88c
 801b4ac:	2400d890 	.word	0x2400d890

0801b4b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801b4b0:	b40e      	push	{r1, r2, r3}
 801b4b2:	4b30      	ldr	r3, [pc, #192]	; (801b574 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801b4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4b8:	881a      	ldrh	r2, [r3, #0]
 801b4ba:	b09d      	sub	sp, #116	; 0x74
 801b4bc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801b4be:	4604      	mov	r4, r0
 801b4c0:	429a      	cmp	r2, r3
 801b4c2:	d954      	bls.n	801b56e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801b4c4:	aa26      	add	r2, sp, #152	; 0x98
 801b4c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801b578 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801b4ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801b57c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801b4ce:	9202      	str	r2, [sp, #8]
 801b4d0:	f8d9 2000 	ldr.w	r2, [r9]
 801b4d4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801b4d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b4dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b4e0:	682b      	ldr	r3, [r5, #0]
 801b4e2:	4628      	mov	r0, r5
 801b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4e6:	4798      	blx	r3
 801b4e8:	4606      	mov	r6, r0
 801b4ea:	b207      	sxth	r7, r0
 801b4ec:	a803      	add	r0, sp, #12
 801b4ee:	f004 fc70 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801b4f2:	682b      	ldr	r3, [r5, #0]
 801b4f4:	4628      	mov	r0, r5
 801b4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4f8:	4798      	blx	r3
 801b4fa:	682b      	ldr	r3, [r5, #0]
 801b4fc:	4682      	mov	sl, r0
 801b4fe:	4628      	mov	r0, r5
 801b500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b502:	4798      	blx	r3
 801b504:	4653      	mov	r3, sl
 801b506:	9000      	str	r0, [sp, #0]
 801b508:	a803      	add	r0, sp, #12
 801b50a:	9a02      	ldr	r2, [sp, #8]
 801b50c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b50e:	f004 fcbb 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b512:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b514:	f8d9 3000 	ldr.w	r3, [r9]
 801b518:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801b51c:	8925      	ldrh	r5, [r4, #8]
 801b51e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801b522:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801b526:	eba5 050c 	sub.w	r5, r5, ip
 801b52a:	784a      	ldrb	r2, [r1, #1]
 801b52c:	f8d8 3000 	ldr.w	r3, [r8]
 801b530:	b22d      	sxth	r5, r5
 801b532:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801b536:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b53a:	9500      	str	r5, [sp, #0]
 801b53c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801b540:	a803      	add	r0, sp, #12
 801b542:	f002 fa9e 	bl	801da82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801b546:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801b54a:	b203      	sxth	r3, r0
 801b54c:	18b9      	adds	r1, r7, r2
 801b54e:	2900      	cmp	r1, #0
 801b550:	dd0b      	ble.n	801b56a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801b552:	3b01      	subs	r3, #1
 801b554:	fb13 f302 	smulbb	r3, r3, r2
 801b558:	fb16 3300 	smlabb	r3, r6, r0, r3
 801b55c:	b21f      	sxth	r7, r3
 801b55e:	4638      	mov	r0, r7
 801b560:	b01d      	add	sp, #116	; 0x74
 801b562:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b566:	b003      	add	sp, #12
 801b568:	4770      	bx	lr
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	dcf7      	bgt.n	801b55e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b56e:	2700      	movs	r7, #0
 801b570:	e7f5      	b.n	801b55e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b572:	bf00      	nop
 801b574:	2400d888 	.word	0x2400d888
 801b578:	2400d884 	.word	0x2400d884
 801b57c:	2400d88c 	.word	0x2400d88c

0801b580 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801b580:	4bbc      	ldr	r3, [pc, #752]	; (801b874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 801b582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b586:	460c      	mov	r4, r1
 801b588:	881b      	ldrh	r3, [r3, #0]
 801b58a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801b58c:	b0a9      	sub	sp, #164	; 0xa4
 801b58e:	4681      	mov	r9, r0
 801b590:	428b      	cmp	r3, r1
 801b592:	d809      	bhi.n	801b5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801b594:	2300      	movs	r3, #0
 801b596:	f04f 32ff 	mov.w	r2, #4294967295
 801b59a:	6083      	str	r3, [r0, #8]
 801b59c:	e9c0 3200 	strd	r3, r2, [r0]
 801b5a0:	4648      	mov	r0, r9
 801b5a2:	b029      	add	sp, #164	; 0xa4
 801b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5a8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 801b87c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801b5ac:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801b5b0:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801b880 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 801b5b4:	f8db 3000 	ldr.w	r3, [fp]
 801b5b8:	f8d8 0000 	ldr.w	r0, [r8]
 801b5bc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801b5c0:	4bad      	ldr	r3, [pc, #692]	; (801b878 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b5c8:	f7f9 fece 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b5cc:	4607      	mov	r7, r0
 801b5ce:	682b      	ldr	r3, [r5, #0]
 801b5d0:	4628      	mov	r0, r5
 801b5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5d4:	4798      	blx	r3
 801b5d6:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801b5d8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5dc:	4430      	add	r0, r6
 801b5de:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801b5e2:	b283      	uxth	r3, r0
 801b5e4:	4650      	mov	r0, sl
 801b5e6:	9302      	str	r3, [sp, #8]
 801b5e8:	2e00      	cmp	r6, #0
 801b5ea:	f040 8090 	bne.w	801b70e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801b5ee:	f004 fbf0 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801b5f2:	682b      	ldr	r3, [r5, #0]
 801b5f4:	4628      	mov	r0, r5
 801b5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5f8:	4798      	blx	r3
 801b5fa:	682b      	ldr	r3, [r5, #0]
 801b5fc:	9005      	str	r0, [sp, #20]
 801b5fe:	4628      	mov	r0, r5
 801b600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b602:	4798      	blx	r3
 801b604:	6823      	ldr	r3, [r4, #0]
 801b606:	4680      	mov	r8, r0
 801b608:	4620      	mov	r0, r4
 801b60a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b60c:	4798      	blx	r3
 801b60e:	6822      	ldr	r2, [r4, #0]
 801b610:	9004      	str	r0, [sp, #16]
 801b612:	4620      	mov	r0, r4
 801b614:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b618:	4790      	blx	r2
 801b61a:	9905      	ldr	r1, [sp, #20]
 801b61c:	9b04      	ldr	r3, [sp, #16]
 801b61e:	460a      	mov	r2, r1
 801b620:	4639      	mov	r1, r7
 801b622:	4637      	mov	r7, r6
 801b624:	9001      	str	r0, [sp, #4]
 801b626:	9300      	str	r3, [sp, #0]
 801b628:	4650      	mov	r0, sl
 801b62a:	4643      	mov	r3, r8
 801b62c:	f004 fc41 	bl	801feb2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b630:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b632:	4629      	mov	r1, r5
 801b634:	f8db 3000 	ldr.w	r3, [fp]
 801b638:	4650      	mov	r0, sl
 801b63a:	3601      	adds	r6, #1
 801b63c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b640:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b644:	b2b6      	uxth	r6, r6
 801b646:	785b      	ldrb	r3, [r3, #1]
 801b648:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b64c:	f001 ff6a 	bl	801d524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b650:	4287      	cmp	r7, r0
 801b652:	bfb8      	it	lt
 801b654:	b207      	sxthlt	r7, r0
 801b656:	4650      	mov	r0, sl
 801b658:	f004 fbe2 	bl	801fe20 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801b65c:	2800      	cmp	r0, #0
 801b65e:	d0e7      	beq.n	801b630 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 801b660:	9b02      	ldr	r3, [sp, #8]
 801b662:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801b666:	fb13 f606 	smulbb	r6, r3, r6
 801b66a:	eba6 0608 	sub.w	r6, r6, r8
 801b66e:	b2b6      	uxth	r6, r6
 801b670:	fa0f f886 	sxth.w	r8, r6
 801b674:	f1b8 0f00 	cmp.w	r8, #0
 801b678:	dd06      	ble.n	801b688 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801b67a:	682b      	ldr	r3, [r5, #0]
 801b67c:	4628      	mov	r0, r5
 801b67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b680:	4798      	blx	r3
 801b682:	4430      	add	r0, r6
 801b684:	fa0f f880 	sxth.w	r8, r0
 801b688:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b68c:	4620      	mov	r0, r4
 801b68e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b692:	6823      	ldr	r3, [r4, #0]
 801b694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b696:	bf0c      	ite	eq
 801b698:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 801b69c:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801b6a0:	4798      	blx	r3
 801b6a2:	2801      	cmp	r0, #1
 801b6a4:	b2ba      	uxth	r2, r7
 801b6a6:	f000 80d2 	beq.w	801b84e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801b6aa:	2802      	cmp	r0, #2
 801b6ac:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b6b0:	f000 80d3 	beq.w	801b85a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 801b6b4:	b21e      	sxth	r6, r3
 801b6b6:	7a29      	ldrb	r1, [r5, #8]
 801b6b8:	7a6d      	ldrb	r5, [r5, #9]
 801b6ba:	1a76      	subs	r6, r6, r1
 801b6bc:	4429      	add	r1, r5
 801b6be:	b2b3      	uxth	r3, r6
 801b6c0:	440a      	add	r2, r1
 801b6c2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801b6c6:	b21f      	sxth	r7, r3
 801b6c8:	b292      	uxth	r2, r2
 801b6ca:	2902      	cmp	r1, #2
 801b6cc:	b216      	sxth	r6, r2
 801b6ce:	f000 80c7 	beq.w	801b860 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801b6d2:	2903      	cmp	r1, #3
 801b6d4:	f000 80d6 	beq.w	801b884 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801b6d8:	2901      	cmp	r1, #1
 801b6da:	f040 80dc 	bne.w	801b896 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801b6de:	8923      	ldrh	r3, [r4, #8]
 801b6e0:	4632      	mov	r2, r6
 801b6e2:	463d      	mov	r5, r7
 801b6e4:	4646      	mov	r6, r8
 801b6e6:	eba3 0308 	sub.w	r3, r3, r8
 801b6ea:	4690      	mov	r8, r2
 801b6ec:	b21f      	sxth	r7, r3
 801b6ee:	9b03      	ldr	r3, [sp, #12]
 801b6f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b6f2:	6818      	ldr	r0, [r3, #0]
 801b6f4:	f7f9 fe38 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b6f8:	f8a9 7000 	strh.w	r7, [r9]
 801b6fc:	f8a9 5002 	strh.w	r5, [r9, #2]
 801b700:	f8a9 6004 	strh.w	r6, [r9, #4]
 801b704:	f8a9 8006 	strh.w	r8, [r9, #6]
 801b708:	f8c9 0008 	str.w	r0, [r9, #8]
 801b70c:	e748      	b.n	801b5a0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801b70e:	f004 fb60 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801b712:	682b      	ldr	r3, [r5, #0]
 801b714:	4628      	mov	r0, r5
 801b716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b718:	4798      	blx	r3
 801b71a:	682b      	ldr	r3, [r5, #0]
 801b71c:	4606      	mov	r6, r0
 801b71e:	4628      	mov	r0, r5
 801b720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b722:	4798      	blx	r3
 801b724:	6823      	ldr	r3, [r4, #0]
 801b726:	4680      	mov	r8, r0
 801b728:	4620      	mov	r0, r4
 801b72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b72c:	4798      	blx	r3
 801b72e:	6822      	ldr	r2, [r4, #0]
 801b730:	9004      	str	r0, [sp, #16]
 801b732:	4620      	mov	r0, r4
 801b734:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b738:	4790      	blx	r2
 801b73a:	9b04      	ldr	r3, [sp, #16]
 801b73c:	4632      	mov	r2, r6
 801b73e:	9001      	str	r0, [sp, #4]
 801b740:	9300      	str	r3, [sp, #0]
 801b742:	4639      	mov	r1, r7
 801b744:	4643      	mov	r3, r8
 801b746:	4650      	mov	r0, sl
 801b748:	f004 fbb3 	bl	801feb2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b74c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b750:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801b754:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b758:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b75c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b75e:	bf0a      	itet	eq
 801b760:	4642      	moveq	r2, r8
 801b762:	461a      	movne	r2, r3
 801b764:	4698      	moveq	r8, r3
 801b766:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b76a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801b76e:	1ad2      	subs	r2, r2, r3
 801b770:	f8db 3000 	ldr.w	r3, [fp]
 801b774:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b778:	7859      	ldrb	r1, [r3, #1]
 801b77a:	2300      	movs	r3, #0
 801b77c:	f8cd a020 	str.w	sl, [sp, #32]
 801b780:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801b784:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b788:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801b78c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b790:	950a      	str	r5, [sp, #40]	; 0x28
 801b792:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b796:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b79a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b79e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b7a2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b7a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b7aa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b7ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801b7b2:	b350      	cbz	r0, 801b80a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801b7b4:	682b      	ldr	r3, [r5, #0]
 801b7b6:	4628      	mov	r0, r5
 801b7b8:	695b      	ldr	r3, [r3, #20]
 801b7ba:	4798      	blx	r3
 801b7bc:	4607      	mov	r7, r0
 801b7be:	b320      	cbz	r0, 801b80a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801b7c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b7c2:	4639      	mov	r1, r7
 801b7c4:	6803      	ldr	r3, [r0, #0]
 801b7c6:	68db      	ldr	r3, [r3, #12]
 801b7c8:	4798      	blx	r3
 801b7ca:	4606      	mov	r6, r0
 801b7cc:	b1e8      	cbz	r0, 801b80a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801b7ce:	7b43      	ldrb	r3, [r0, #13]
 801b7d0:	7a82      	ldrb	r2, [r0, #10]
 801b7d2:	005b      	lsls	r3, r3, #1
 801b7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7d8:	4313      	orrs	r3, r2
 801b7da:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b7de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801b7e2:	2b04      	cmp	r3, #4
 801b7e4:	d111      	bne.n	801b80a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801b7e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b7e8:	4632      	mov	r2, r6
 801b7ea:	4639      	mov	r1, r7
 801b7ec:	6803      	ldr	r3, [r0, #0]
 801b7ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b7f0:	4798      	blx	r3
 801b7f2:	7b73      	ldrb	r3, [r6, #13]
 801b7f4:	005b      	lsls	r3, r3, #1
 801b7f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b7fa:	7ab3      	ldrb	r3, [r6, #10]
 801b7fc:	4313      	orrs	r3, r2
 801b7fe:	4418      	add	r0, r3
 801b800:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b804:	4418      	add	r0, r3
 801b806:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801b80a:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801b80e:	2600      	movs	r6, #0
 801b810:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 801b814:	4637      	mov	r7, r6
 801b816:	45c3      	cmp	fp, r8
 801b818:	a807      	add	r0, sp, #28
 801b81a:	f106 0601 	add.w	r6, r6, #1
 801b81e:	bfd4      	ite	le
 801b820:	2100      	movle	r1, #0
 801b822:	2101      	movgt	r1, #1
 801b824:	f002 f85e 	bl	801d8e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b828:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b82c:	b2b6      	uxth	r6, r6
 801b82e:	429f      	cmp	r7, r3
 801b830:	bfb8      	it	lt
 801b832:	b21f      	sxthlt	r7, r3
 801b834:	9b02      	ldr	r3, [sp, #8]
 801b836:	eba8 0803 	sub.w	r8, r8, r3
 801b83a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b83e:	fa0f f888 	sxth.w	r8, r8
 801b842:	2b00      	cmp	r3, #0
 801b844:	f43f af0c 	beq.w	801b660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b848:	45c2      	cmp	sl, r8
 801b84a:	dbe4      	blt.n	801b816 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 801b84c:	e708      	b.n	801b660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b84e:	1bf6      	subs	r6, r6, r7
 801b850:	2702      	movs	r7, #2
 801b852:	fb96 f6f7 	sdiv	r6, r6, r7
 801b856:	b236      	sxth	r6, r6
 801b858:	e72d      	b.n	801b6b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 801b85a:	4413      	add	r3, r2
 801b85c:	1af6      	subs	r6, r6, r3
 801b85e:	e7fa      	b.n	801b856 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 801b860:	8925      	ldrh	r5, [r4, #8]
 801b862:	1aad      	subs	r5, r5, r2
 801b864:	1aed      	subs	r5, r5, r3
 801b866:	b22f      	sxth	r7, r5
 801b868:	8965      	ldrh	r5, [r4, #10]
 801b86a:	eba5 0508 	sub.w	r5, r5, r8
 801b86e:	b22d      	sxth	r5, r5
 801b870:	e73d      	b.n	801b6ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801b872:	bf00      	nop
 801b874:	2400d888 	.word	0x2400d888
 801b878:	2400d88c 	.word	0x2400d88c
 801b87c:	2400d884 	.word	0x2400d884
 801b880:	2400d890 	.word	0x2400d890
 801b884:	8965      	ldrh	r5, [r4, #10]
 801b886:	2700      	movs	r7, #0
 801b888:	1aad      	subs	r5, r5, r2
 801b88a:	1aed      	subs	r5, r5, r3
 801b88c:	4633      	mov	r3, r6
 801b88e:	4646      	mov	r6, r8
 801b890:	b22d      	sxth	r5, r5
 801b892:	4698      	mov	r8, r3
 801b894:	e72b      	b.n	801b6ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801b896:	2500      	movs	r5, #0
 801b898:	e729      	b.n	801b6ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801b89a:	bf00      	nop

0801b89c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801b89c:	b513      	push	{r0, r1, r4, lr}
 801b89e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801b8a2:	4604      	mov	r4, r0
 801b8a4:	b1fb      	cbz	r3, 801b8e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b8a6:	4b16      	ldr	r3, [pc, #88]	; (801b900 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801b8a8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b8aa:	881b      	ldrh	r3, [r3, #0]
 801b8ac:	428b      	cmp	r3, r1
 801b8ae:	d91a      	bls.n	801b8e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b8b0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	dd16      	ble.n	801b8e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b8b8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	dd12      	ble.n	801b8e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b8c0:	4b10      	ldr	r3, [pc, #64]	; (801b904 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801b8c2:	6818      	ldr	r0, [r3, #0]
 801b8c4:	f7f9 fd50 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b8c8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b8cc:	6822      	ldr	r2, [r4, #0]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	db06      	blt.n	801b8e0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b8d2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	db02      	blt.n	801b8e0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b8da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b8dc:	4298      	cmp	r0, r3
 801b8de:	d004      	beq.n	801b8ea <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801b8e0:	6953      	ldr	r3, [r2, #20]
 801b8e2:	4620      	mov	r0, r4
 801b8e4:	4798      	blx	r3
 801b8e6:	b002      	add	sp, #8
 801b8e8:	bd10      	pop	{r4, pc}
 801b8ea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b8ee:	466b      	mov	r3, sp
 801b8f0:	6912      	ldr	r2, [r2, #16]
 801b8f2:	c903      	ldmia	r1, {r0, r1}
 801b8f4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8f8:	4619      	mov	r1, r3
 801b8fa:	4620      	mov	r0, r4
 801b8fc:	4790      	blx	r2
 801b8fe:	e7f2      	b.n	801b8e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b900:	2400d888 	.word	0x2400d888
 801b904:	2400d890 	.word	0x2400d890

0801b908 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801b908:	4b45      	ldr	r3, [pc, #276]	; (801ba20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801b90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b90e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b910:	b08e      	sub	sp, #56	; 0x38
 801b912:	881b      	ldrh	r3, [r3, #0]
 801b914:	4604      	mov	r4, r0
 801b916:	4293      	cmp	r3, r2
 801b918:	d97e      	bls.n	801ba18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b91a:	6808      	ldr	r0, [r1, #0]
 801b91c:	ab05      	add	r3, sp, #20
 801b91e:	6849      	ldr	r1, [r1, #4]
 801b920:	4d40      	ldr	r5, [pc, #256]	; (801ba24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801b922:	c303      	stmia	r3!, {r0, r1}
 801b924:	4611      	mov	r1, r2
 801b926:	6828      	ldr	r0, [r5, #0]
 801b928:	f7f9 fd1e 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b92c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b930:	2b00      	cmp	r3, #0
 801b932:	db11      	blt.n	801b958 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b934:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b938:	2b00      	cmp	r3, #0
 801b93a:	db0d      	blt.n	801b958 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b93c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b93e:	4298      	cmp	r0, r3
 801b940:	d10a      	bne.n	801b958 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b942:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b946:	ab09      	add	r3, sp, #36	; 0x24
 801b948:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b94c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b950:	4619      	mov	r1, r3
 801b952:	a805      	add	r0, sp, #20
 801b954:	f7fc feec 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801b958:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	dd5b      	ble.n	801ba18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b960:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b964:	2b00      	cmp	r3, #0
 801b966:	dd57      	ble.n	801ba18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b968:	4f2f      	ldr	r7, [pc, #188]	; (801ba28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801b96a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b972:	4b2e      	ldr	r3, [pc, #184]	; (801ba2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b97a:	2e00      	cmp	r6, #0
 801b97c:	d04c      	beq.n	801ba18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b97e:	6823      	ldr	r3, [r4, #0]
 801b980:	4620      	mov	r0, r4
 801b982:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801b986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b988:	4798      	blx	r3
 801b98a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b98c:	683b      	ldr	r3, [r7, #0]
 801b98e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801b992:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b996:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801b99a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801b99e:	785b      	ldrb	r3, [r3, #1]
 801b9a0:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801b9a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b9a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b9aa:	9609      	str	r6, [sp, #36]	; 0x24
 801b9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b9b0:	4b1f      	ldr	r3, [pc, #124]	; (801ba30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b9b2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801b9bc:	910b      	str	r1, [sp, #44]	; 0x2c
 801b9be:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801b9c2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801b9c6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801b9ca:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801b9ce:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b9d2:	b10a      	cbz	r2, 801b9d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b9d4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801b9d6:	b906      	cbnz	r6, 801b9da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b9d8:	689e      	ldr	r6, [r3, #8]
 801b9da:	af07      	add	r7, sp, #28
 801b9dc:	4621      	mov	r1, r4
 801b9de:	4638      	mov	r0, r7
 801b9e0:	f003 fd5e 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9e4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b9e6:	6828      	ldr	r0, [r5, #0]
 801b9e8:	f7f9 fcbe 	bl	8015368 <_ZNK8touchgfx5Texts7getTextEt>
 801b9ec:	6823      	ldr	r3, [r4, #0]
 801b9ee:	4605      	mov	r5, r0
 801b9f0:	4620      	mov	r0, r4
 801b9f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b9f4:	4798      	blx	r3
 801b9f6:	6823      	ldr	r3, [r4, #0]
 801b9f8:	4680      	mov	r8, r0
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ba00:	4798      	blx	r3
 801ba02:	ab09      	add	r3, sp, #36	; 0x24
 801ba04:	9501      	str	r5, [sp, #4]
 801ba06:	9300      	str	r3, [sp, #0]
 801ba08:	ab05      	add	r3, sp, #20
 801ba0a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801ba0e:	4630      	mov	r0, r6
 801ba10:	e897 0006 	ldmia.w	r7, {r1, r2}
 801ba14:	f7f9 fc37 	bl	8015286 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801ba18:	b00e      	add	sp, #56	; 0x38
 801ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba1e:	bf00      	nop
 801ba20:	2400d888 	.word	0x2400d888
 801ba24:	2400d890 	.word	0x2400d890
 801ba28:	2400d884 	.word	0x2400d884
 801ba2c:	2400d88c 	.word	0x2400d88c
 801ba30:	2400d82c 	.word	0x2400d82c

0801ba34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801ba34:	b538      	push	{r3, r4, r5, lr}
 801ba36:	4b0e      	ldr	r3, [pc, #56]	; (801ba70 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801ba38:	4604      	mov	r4, r0
 801ba3a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801ba3c:	881b      	ldrh	r3, [r3, #0]
 801ba3e:	429a      	cmp	r2, r3
 801ba40:	d214      	bcs.n	801ba6c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801ba42:	6803      	ldr	r3, [r0, #0]
 801ba44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ba46:	4798      	blx	r3
 801ba48:	6823      	ldr	r3, [r4, #0]
 801ba4a:	4605      	mov	r5, r0
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba50:	4798      	blx	r3
 801ba52:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ba56:	b22d      	sxth	r5, r5
 801ba58:	4601      	mov	r1, r0
 801ba5a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801ba5e:	bf06      	itte	eq
 801ba60:	4602      	moveq	r2, r0
 801ba62:	4629      	moveq	r1, r5
 801ba64:	462a      	movne	r2, r5
 801ba66:	4620      	mov	r0, r4
 801ba68:	f7f6 fb33 	bl	80120d2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801ba6c:	bd38      	pop	{r3, r4, r5, pc}
 801ba6e:	bf00      	nop
 801ba70:	2400d888 	.word	0x2400d888

0801ba74 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801ba74:	b530      	push	{r4, r5, lr}
 801ba76:	888b      	ldrh	r3, [r1, #4]
 801ba78:	b085      	sub	sp, #20
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	8583      	strh	r3, [r0, #44]	; 0x2c
 801ba7e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801ba82:	b923      	cbnz	r3, 801ba8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801ba84:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ba88:	b90b      	cbnz	r3, 801ba8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801ba8a:	f7ff ffd3 	bl	801ba34 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801ba8e:	6823      	ldr	r3, [r4, #0]
 801ba90:	466d      	mov	r5, sp
 801ba92:	4621      	mov	r1, r4
 801ba94:	343c      	adds	r4, #60	; 0x3c
 801ba96:	4628      	mov	r0, r5
 801ba98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ba9c:	4798      	blx	r3
 801ba9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801baa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801baa6:	b005      	add	sp, #20
 801baa8:	bd30      	pop	{r4, r5, pc}

0801baaa <_ZNK8touchgfx3Box12getSolidRectEv>:
 801baaa:	2300      	movs	r3, #0
 801baac:	8083      	strh	r3, [r0, #4]
 801baae:	80c3      	strh	r3, [r0, #6]
 801bab0:	8003      	strh	r3, [r0, #0]
 801bab2:	8043      	strh	r3, [r0, #2]
 801bab4:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801bab8:	2bff      	cmp	r3, #255	; 0xff
 801baba:	bf01      	itttt	eq
 801babc:	890b      	ldrheq	r3, [r1, #8]
 801babe:	8083      	strheq	r3, [r0, #4]
 801bac0:	894b      	ldrheq	r3, [r1, #10]
 801bac2:	80c3      	strheq	r3, [r0, #6]
 801bac4:	4770      	bx	lr
	...

0801bac8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801bac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801baca:	4604      	mov	r4, r0
 801bacc:	466b      	mov	r3, sp
 801bace:	6808      	ldr	r0, [r1, #0]
 801bad0:	6849      	ldr	r1, [r1, #4]
 801bad2:	c303      	stmia	r3!, {r0, r1}
 801bad4:	6823      	ldr	r3, [r4, #0]
 801bad6:	4669      	mov	r1, sp
 801bad8:	4620      	mov	r0, r4
 801bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801badc:	4798      	blx	r3
 801bade:	4b08      	ldr	r3, [pc, #32]	; (801bb00 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bae6:	b10a      	cbz	r2, 801baec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801bae8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801baea:	b900      	cbnz	r0, 801baee <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801baec:	6898      	ldr	r0, [r3, #8]
 801baee:	6803      	ldr	r3, [r0, #0]
 801baf0:	4669      	mov	r1, sp
 801baf2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801baf4:	6a1d      	ldr	r5, [r3, #32]
 801baf6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801bafa:	47a8      	blx	r5
 801bafc:	b003      	add	sp, #12
 801bafe:	bd30      	pop	{r4, r5, pc}
 801bb00:	2400d82c 	.word	0x2400d82c

0801bb04 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801bb04:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801bb08:	b12a      	cbz	r2, 801bb16 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801bb0a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801bb0e:	b112      	cbz	r2, 801bb16 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801bb10:	6803      	ldr	r3, [r0, #0]
 801bb12:	695b      	ldr	r3, [r3, #20]
 801bb14:	4718      	bx	r3
 801bb16:	4770      	bx	lr

0801bb18 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801bb18:	b570      	push	{r4, r5, r6, lr}
 801bb1a:	880b      	ldrh	r3, [r1, #0]
 801bb1c:	4605      	mov	r5, r0
 801bb1e:	4604      	mov	r4, r0
 801bb20:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801bb22:	8813      	ldrh	r3, [r2, #0]
 801bb24:	f825 3f30 	strh.w	r3, [r5, #48]!
 801bb28:	4628      	mov	r0, r5
 801bb2a:	f005 fa15 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb2e:	4606      	mov	r6, r0
 801bb30:	4628      	mov	r0, r5
 801bb32:	f005 fa45 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bb36:	6823      	ldr	r3, [r4, #0]
 801bb38:	4605      	mov	r5, r0
 801bb3a:	4631      	mov	r1, r6
 801bb3c:	4620      	mov	r0, r4
 801bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb40:	4798      	blx	r3
 801bb42:	6823      	ldr	r3, [r4, #0]
 801bb44:	4629      	mov	r1, r5
 801bb46:	4620      	mov	r0, r4
 801bb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb4e:	4718      	bx	r3

0801bb50 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801bb50:	b510      	push	{r4, lr}
 801bb52:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801bb56:	4604      	mov	r4, r0
 801bb58:	2bff      	cmp	r3, #255	; 0xff
 801bb5a:	d006      	beq.n	801bb6a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	8003      	strh	r3, [r0, #0]
 801bb60:	8043      	strh	r3, [r0, #2]
 801bb62:	8083      	strh	r3, [r0, #4]
 801bb64:	80c3      	strh	r3, [r0, #6]
 801bb66:	4620      	mov	r0, r4
 801bb68:	bd10      	pop	{r4, pc}
 801bb6a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801bb6e:	b11b      	cbz	r3, 801bb78 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801bb70:	3130      	adds	r1, #48	; 0x30
 801bb72:	f005 fa59 	bl	8021028 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801bb76:	e7f6      	b.n	801bb66 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801bb78:	312e      	adds	r1, #46	; 0x2e
 801bb7a:	e7fa      	b.n	801bb72 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801bb7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb80:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801bb84:	b08a      	sub	sp, #40	; 0x28
 801bb86:	4604      	mov	r4, r0
 801bb88:	4688      	mov	r8, r1
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d066      	beq.n	801bc5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801bb8e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801bb90:	a805      	add	r0, sp, #20
 801bb92:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bb96:	f005 f9df 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bb9a:	4607      	mov	r7, r0
 801bb9c:	a805      	add	r0, sp, #20
 801bb9e:	f005 fa0f 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bba2:	f9b8 6000 	ldrsh.w	r6, [r8]
 801bba6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801bbaa:	2300      	movs	r3, #0
 801bbac:	4432      	add	r2, r6
 801bbae:	9306      	str	r3, [sp, #24]
 801bbb0:	b292      	uxth	r2, r2
 801bbb2:	fa0f fc82 	sxth.w	ip, r2
 801bbb6:	459c      	cmp	ip, r3
 801bbb8:	dd52      	ble.n	801bc60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801bbba:	42b7      	cmp	r7, r6
 801bbbc:	dd50      	ble.n	801bc60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801bbbe:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801bbc2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801bbc6:	442b      	add	r3, r5
 801bbc8:	b29b      	uxth	r3, r3
 801bbca:	b219      	sxth	r1, r3
 801bbcc:	2900      	cmp	r1, #0
 801bbce:	dd47      	ble.n	801bc60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801bbd0:	42a8      	cmp	r0, r5
 801bbd2:	dd45      	ble.n	801bc60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801bbd4:	4567      	cmp	r7, ip
 801bbd6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801bbda:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801bbde:	bfb8      	it	lt
 801bbe0:	b2ba      	uxthlt	r2, r7
 801bbe2:	4288      	cmp	r0, r1
 801bbe4:	f8ad 6018 	strh.w	r6, [sp, #24]
 801bbe8:	bfb8      	it	lt
 801bbea:	b283      	uxthlt	r3, r0
 801bbec:	1b92      	subs	r2, r2, r6
 801bbee:	f8ad 501a 	strh.w	r5, [sp, #26]
 801bbf2:	1b5b      	subs	r3, r3, r5
 801bbf4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bbf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bbfc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801bc00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bc04:	429a      	cmp	r2, r3
 801bc06:	d026      	beq.n	801bc56 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801bc08:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	dd22      	ble.n	801bc56 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801bc10:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	dd1e      	ble.n	801bc56 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801bc18:	2300      	movs	r3, #0
 801bc1a:	a908      	add	r1, sp, #32
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801bc22:	6823      	ldr	r3, [r4, #0]
 801bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc26:	4798      	blx	r3
 801bc28:	4b0f      	ldr	r3, [pc, #60]	; (801bc68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bc30:	b10a      	cbz	r2, 801bc36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801bc32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bc34:	b900      	cbnz	r0, 801bc38 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801bc36:	6898      	ldr	r0, [r3, #8]
 801bc38:	2501      	movs	r5, #1
 801bc3a:	6801      	ldr	r1, [r0, #0]
 801bc3c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801bc40:	9502      	str	r5, [sp, #8]
 801bc42:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801bc46:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bc4a:	9401      	str	r4, [sp, #4]
 801bc4c:	ac06      	add	r4, sp, #24
 801bc4e:	9400      	str	r4, [sp, #0]
 801bc50:	688c      	ldr	r4, [r1, #8]
 801bc52:	a905      	add	r1, sp, #20
 801bc54:	47a0      	blx	r4
 801bc56:	b00a      	add	sp, #40	; 0x28
 801bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801bc5e:	e797      	b.n	801bb90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801bc60:	2300      	movs	r3, #0
 801bc62:	9307      	str	r3, [sp, #28]
 801bc64:	e7ca      	b.n	801bbfc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801bc66:	bf00      	nop
 801bc68:	2400d82c 	.word	0x2400d82c

0801bc6c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801bc6c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 801bc70:	b12a      	cbz	r2, 801bc7e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801bc72:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801bc76:	b112      	cbz	r2, 801bc7e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801bc78:	6803      	ldr	r3, [r0, #0]
 801bc7a:	695b      	ldr	r3, [r3, #20]
 801bc7c:	4718      	bx	r3
 801bc7e:	4770      	bx	lr

0801bc80 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801bc80:	b570      	push	{r4, r5, r6, lr}
 801bc82:	880b      	ldrh	r3, [r1, #0]
 801bc84:	460d      	mov	r5, r1
 801bc86:	4604      	mov	r4, r0
 801bc88:	84c3      	strh	r3, [r0, #38]	; 0x26
 801bc8a:	4608      	mov	r0, r1
 801bc8c:	f005 f964 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bc90:	4606      	mov	r6, r0
 801bc92:	4628      	mov	r0, r5
 801bc94:	f005 f994 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bc98:	6823      	ldr	r3, [r4, #0]
 801bc9a:	4605      	mov	r5, r0
 801bc9c:	4631      	mov	r1, r6
 801bc9e:	4620      	mov	r0, r4
 801bca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bca2:	4798      	blx	r3
 801bca4:	6823      	ldr	r3, [r4, #0]
 801bca6:	4629      	mov	r1, r5
 801bca8:	4620      	mov	r0, r4
 801bcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bcb0:	4718      	bx	r3

0801bcb2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801bcb2:	b510      	push	{r4, lr}
 801bcb4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801bcb8:	4604      	mov	r4, r0
 801bcba:	2bff      	cmp	r3, #255	; 0xff
 801bcbc:	d006      	beq.n	801bccc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801bcbe:	2300      	movs	r3, #0
 801bcc0:	8003      	strh	r3, [r0, #0]
 801bcc2:	8043      	strh	r3, [r0, #2]
 801bcc4:	8083      	strh	r3, [r0, #4]
 801bcc6:	80c3      	strh	r3, [r0, #6]
 801bcc8:	4620      	mov	r0, r4
 801bcca:	bd10      	pop	{r4, pc}
 801bccc:	3126      	adds	r1, #38	; 0x26
 801bcce:	f005 f9ab 	bl	8021028 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801bcd2:	e7f9      	b.n	801bcc8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801bcd4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcd8:	4604      	mov	r4, r0
 801bcda:	b088      	sub	sp, #32
 801bcdc:	2500      	movs	r5, #0
 801bcde:	460f      	mov	r7, r1
 801bce0:	f854 3b26 	ldr.w	r3, [r4], #38
 801bce4:	a904      	add	r1, sp, #16
 801bce6:	4606      	mov	r6, r0
 801bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801bcee:	4798      	blx	r3
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f005 f931 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801bcf6:	4680      	mov	r8, r0
 801bcf8:	4620      	mov	r0, r4
 801bcfa:	f005 f961 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801bcfe:	9506      	str	r5, [sp, #24]
 801bd00:	ad06      	add	r5, sp, #24
 801bd02:	f8ad 001e 	strh.w	r0, [sp, #30]
 801bd06:	4639      	mov	r1, r7
 801bd08:	f8ad 801c 	strh.w	r8, [sp, #28]
 801bd0c:	4628      	mov	r0, r5
 801bd0e:	f7fc fd0f 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801bd12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	dd19      	ble.n	801bd4e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801bd1a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	dd15      	ble.n	801bd4e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801bd22:	4b0c      	ldr	r3, [pc, #48]	; (801bd54 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801bd2a:	b10a      	cbz	r2, 801bd30 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801bd2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801bd2e:	b900      	cbnz	r0, 801bd32 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801bd30:	6898      	ldr	r0, [r3, #8]
 801bd32:	2701      	movs	r7, #1
 801bd34:	6801      	ldr	r1, [r0, #0]
 801bd36:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801bd3a:	9702      	str	r7, [sp, #8]
 801bd3c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801bd40:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801bd44:	e9cd 5600 	strd	r5, r6, [sp]
 801bd48:	688d      	ldr	r5, [r1, #8]
 801bd4a:	4621      	mov	r1, r4
 801bd4c:	47a8      	blx	r5
 801bd4e:	b008      	add	sp, #32
 801bd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd54:	2400d82c 	.word	0x2400d82c

0801bd58 <_ZN8touchgfx7OutlineD1Ev>:
 801bd58:	4770      	bx	lr

0801bd5a <_ZN8touchgfx7OutlineD0Ev>:
 801bd5a:	b510      	push	{r4, lr}
 801bd5c:	4604      	mov	r4, r0
 801bd5e:	2130      	movs	r1, #48	; 0x30
 801bd60:	f010 fe74 	bl	802ca4c <_ZdlPvj>
 801bd64:	4620      	mov	r0, r4
 801bd66:	bd10      	pop	{r4, pc}

0801bd68 <_ZN8touchgfx7Outline5resetEv>:
 801bd68:	b510      	push	{r4, lr}
 801bd6a:	4604      	mov	r4, r0
 801bd6c:	f000 fe7c 	bl	801ca68 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801bd70:	60e0      	str	r0, [r4, #12]
 801bd72:	f000 fe7f 	bl	801ca74 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801bd76:	68e3      	ldr	r3, [r4, #12]
 801bd78:	08c0      	lsrs	r0, r0, #3
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801bd80:	6123      	str	r3, [r4, #16]
 801bd82:	3801      	subs	r0, #1
 801bd84:	60a2      	str	r2, [r4, #8]
 801bd86:	6060      	str	r0, [r4, #4]
 801bd88:	8019      	strh	r1, [r3, #0]
 801bd8a:	8059      	strh	r1, [r3, #2]
 801bd8c:	809a      	strh	r2, [r3, #4]
 801bd8e:	80da      	strh	r2, [r3, #6]
 801bd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bd92:	f023 0301 	bic.w	r3, r3, #1
 801bd96:	f043 0302 	orr.w	r3, r3, #2
 801bd9a:	6263      	str	r3, [r4, #36]	; 0x24
 801bd9c:	bd10      	pop	{r4, pc}
	...

0801bda0 <_ZN8touchgfx7OutlineC1Ev>:
 801bda0:	4b0a      	ldr	r3, [pc, #40]	; (801bdcc <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801bda2:	b510      	push	{r4, lr}
 801bda4:	6003      	str	r3, [r0, #0]
 801bda6:	2300      	movs	r3, #0
 801bda8:	4604      	mov	r4, r0
 801bdaa:	6243      	str	r3, [r0, #36]	; 0x24
 801bdac:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801bdb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bdb4:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801bdb8:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801bdbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bdc0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801bdc4:	f7ff ffd0 	bl	801bd68 <_ZN8touchgfx7Outline5resetEv>
 801bdc8:	4620      	mov	r0, r4
 801bdca:	bd10      	pop	{r4, pc}
 801bdcc:	0803072c 	.word	0x0803072c

0801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd4:	b093      	sub	sp, #76	; 0x4c
 801bdd6:	1156      	asrs	r6, r2, #5
 801bdd8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801bdda:	9305      	str	r3, [sp, #20]
 801bddc:	1153      	asrs	r3, r2, #5
 801bdde:	f004 051f 	and.w	r5, r4, #31
 801bde2:	9303      	str	r3, [sp, #12]
 801bde4:	1163      	asrs	r3, r4, #5
 801bde6:	9504      	str	r5, [sp, #16]
 801bde8:	1165      	asrs	r5, r4, #5
 801bdea:	9306      	str	r3, [sp, #24]
 801bdec:	f002 031f 	and.w	r3, r2, #31
 801bdf0:	42ae      	cmp	r6, r5
 801bdf2:	f040 80f4 	bne.w	801bfde <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801bdf6:	9c04      	ldr	r4, [sp, #16]
 801bdf8:	9a05      	ldr	r2, [sp, #20]
 801bdfa:	42a3      	cmp	r3, r4
 801bdfc:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801be00:	6902      	ldr	r2, [r0, #16]
 801be02:	d125      	bne.n	801be50 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 801be04:	f9b2 3000 	ldrsh.w	r3, [r2]
 801be08:	459e      	cmp	lr, r3
 801be0a:	d103      	bne.n	801be14 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801be0c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801be10:	429e      	cmp	r6, r3
 801be12:	d035      	beq.n	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801be14:	88d1      	ldrh	r1, [r2, #6]
 801be16:	8893      	ldrh	r3, [r2, #4]
 801be18:	430b      	orrs	r3, r1
 801be1a:	d010      	beq.n	801be3e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801be1c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801be20:	2b00      	cmp	r3, #0
 801be22:	db0c      	blt.n	801be3e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801be24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801be26:	428b      	cmp	r3, r1
 801be28:	da09      	bge.n	801be3e <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801be2a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801be2e:	428b      	cmp	r3, r1
 801be30:	f103 0301 	add.w	r3, r3, #1
 801be34:	bf38      	it	cc
 801be36:	3208      	addcc	r2, #8
 801be38:	6083      	str	r3, [r0, #8]
 801be3a:	bf38      	it	cc
 801be3c:	6102      	strcc	r2, [r0, #16]
 801be3e:	6903      	ldr	r3, [r0, #16]
 801be40:	9a03      	ldr	r2, [sp, #12]
 801be42:	f8a3 e000 	strh.w	lr, [r3]
 801be46:	805a      	strh	r2, [r3, #2]
 801be48:	2200      	movs	r2, #0
 801be4a:	809a      	strh	r2, [r3, #4]
 801be4c:	80da      	strh	r2, [r3, #6]
 801be4e:	e017      	b.n	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801be50:	9c05      	ldr	r4, [sp, #20]
 801be52:	114e      	asrs	r6, r1, #5
 801be54:	f001 0c1f 	and.w	ip, r1, #31
 801be58:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801be5c:	f004 041f 	and.w	r4, r4, #31
 801be60:	4576      	cmp	r6, lr
 801be62:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801be66:	9402      	str	r4, [sp, #8]
 801be68:	9c04      	ldr	r4, [sp, #16]
 801be6a:	eba4 0403 	sub.w	r4, r4, r3
 801be6e:	d10a      	bne.n	801be86 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801be70:	9b02      	ldr	r3, [sp, #8]
 801be72:	44a0      	add	r8, r4
 801be74:	449c      	add	ip, r3
 801be76:	f8a2 8004 	strh.w	r8, [r2, #4]
 801be7a:	fb04 a40c 	mla	r4, r4, ip, sl
 801be7e:	80d4      	strh	r4, [r2, #6]
 801be80:	b013      	add	sp, #76	; 0x4c
 801be82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be86:	9d05      	ldr	r5, [sp, #20]
 801be88:	1a69      	subs	r1, r5, r1
 801be8a:	bf51      	iteee	pl
 801be8c:	f1cc 0520 	rsbpl	r5, ip, #32
 801be90:	fb04 f40c 	mulmi.w	r4, r4, ip
 801be94:	4249      	negmi	r1, r1
 801be96:	2500      	movmi	r5, #0
 801be98:	bf5d      	ittte	pl
 801be9a:	436c      	mulpl	r4, r5
 801be9c:	2520      	movpl	r5, #32
 801be9e:	f04f 0901 	movpl.w	r9, #1
 801bea2:	f04f 39ff 	movmi.w	r9, #4294967295
 801bea6:	9501      	str	r5, [sp, #4]
 801bea8:	9f01      	ldr	r7, [sp, #4]
 801beaa:	444e      	add	r6, r9
 801beac:	fb94 f5f1 	sdiv	r5, r4, r1
 801beb0:	fb01 4415 	mls	r4, r1, r5, r4
 801beb4:	44bc      	add	ip, r7
 801beb6:	2c00      	cmp	r4, #0
 801beb8:	bfbc      	itt	lt
 801beba:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801bebe:	1864      	addlt	r4, r4, r1
 801bec0:	44a8      	add	r8, r5
 801bec2:	fb05 ac0c 	mla	ip, r5, ip, sl
 801bec6:	f8a2 8004 	strh.w	r8, [r2, #4]
 801beca:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bece:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bed2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801bed6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801beda:	ea58 0202 	orrs.w	r2, r8, r2
 801bede:	d011      	beq.n	801bf04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801bee0:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801bee4:	f1b8 0f00 	cmp.w	r8, #0
 801bee8:	db0c      	blt.n	801bf04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801beea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801beec:	4590      	cmp	r8, r2
 801beee:	da09      	bge.n	801bf04 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801bef0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801bef4:	4590      	cmp	r8, r2
 801bef6:	bf3c      	itt	cc
 801bef8:	f10c 0208 	addcc.w	r2, ip, #8
 801befc:	6102      	strcc	r2, [r0, #16]
 801befe:	f108 0201 	add.w	r2, r8, #1
 801bf02:	6082      	str	r2, [r0, #8]
 801bf04:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bf08:	2700      	movs	r7, #0
 801bf0a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bf0e:	45b6      	cmp	lr, r6
 801bf10:	f8ac 6000 	strh.w	r6, [ip]
 801bf14:	442b      	add	r3, r5
 801bf16:	f8ac 2002 	strh.w	r2, [ip, #2]
 801bf1a:	f8ac 7004 	strh.w	r7, [ip, #4]
 801bf1e:	f8ac 7006 	strh.w	r7, [ip, #6]
 801bf22:	d04b      	beq.n	801bfbc <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801bf24:	9f04      	ldr	r7, [sp, #16]
 801bf26:	1a64      	subs	r4, r4, r1
 801bf28:	f04f 0a00 	mov.w	sl, #0
 801bf2c:	1aff      	subs	r7, r7, r3
 801bf2e:	443d      	add	r5, r7
 801bf30:	016d      	lsls	r5, r5, #5
 801bf32:	fb95 f8f1 	sdiv	r8, r5, r1
 801bf36:	fb01 5518 	mls	r5, r1, r8, r5
 801bf3a:	2d00      	cmp	r5, #0
 801bf3c:	bfbc      	itt	lt
 801bf3e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801bf42:	186d      	addlt	r5, r5, r1
 801bf44:	f108 0701 	add.w	r7, r8, #1
 801bf48:	9703      	str	r7, [sp, #12]
 801bf4a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bf4e:	1964      	adds	r4, r4, r5
 801bf50:	444e      	add	r6, r9
 801bf52:	bf54      	ite	pl
 801bf54:	9f03      	ldrpl	r7, [sp, #12]
 801bf56:	4647      	movmi	r7, r8
 801bf58:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801bf5c:	bf58      	it	pl
 801bf5e:	1a64      	subpl	r4, r4, r1
 801bf60:	443b      	add	r3, r7
 801bf62:	44bb      	add	fp, r7
 801bf64:	f8ac b004 	strh.w	fp, [ip, #4]
 801bf68:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801bf6c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801bf70:	f8ac b006 	strh.w	fp, [ip, #6]
 801bf74:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bf78:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801bf7c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801bf80:	ea5b 0707 	orrs.w	r7, fp, r7
 801bf84:	d011      	beq.n	801bfaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801bf86:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801bf8a:	f1bb 0f00 	cmp.w	fp, #0
 801bf8e:	db0c      	blt.n	801bfaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801bf90:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801bf92:	45bb      	cmp	fp, r7
 801bf94:	da09      	bge.n	801bfaa <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801bf96:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801bf9a:	45bb      	cmp	fp, r7
 801bf9c:	bf3c      	itt	cc
 801bf9e:	f10c 0708 	addcc.w	r7, ip, #8
 801bfa2:	6107      	strcc	r7, [r0, #16]
 801bfa4:	f10b 0701 	add.w	r7, fp, #1
 801bfa8:	6087      	str	r7, [r0, #8]
 801bfaa:	6907      	ldr	r7, [r0, #16]
 801bfac:	45b6      	cmp	lr, r6
 801bfae:	803e      	strh	r6, [r7, #0]
 801bfb0:	807a      	strh	r2, [r7, #2]
 801bfb2:	f8a7 a004 	strh.w	sl, [r7, #4]
 801bfb6:	f8a7 a006 	strh.w	sl, [r7, #6]
 801bfba:	d1c6      	bne.n	801bf4a <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801bfbc:	9a04      	ldr	r2, [sp, #16]
 801bfbe:	1ad3      	subs	r3, r2, r3
 801bfc0:	6902      	ldr	r2, [r0, #16]
 801bfc2:	8891      	ldrh	r1, [r2, #4]
 801bfc4:	88d6      	ldrh	r6, [r2, #6]
 801bfc6:	4419      	add	r1, r3
 801bfc8:	8091      	strh	r1, [r2, #4]
 801bfca:	9902      	ldr	r1, [sp, #8]
 801bfcc:	f101 0c20 	add.w	ip, r1, #32
 801bfd0:	9901      	ldr	r1, [sp, #4]
 801bfd2:	ebac 0c01 	sub.w	ip, ip, r1
 801bfd6:	fb03 630c 	mla	r3, r3, ip, r6
 801bfda:	80d3      	strh	r3, [r2, #6]
 801bfdc:	e750      	b.n	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801bfde:	9d05      	ldr	r5, [sp, #20]
 801bfe0:	1aa2      	subs	r2, r4, r2
 801bfe2:	eba5 0501 	sub.w	r5, r5, r1
 801bfe6:	9202      	str	r2, [sp, #8]
 801bfe8:	9508      	str	r5, [sp, #32]
 801bfea:	f140 8128 	bpl.w	801c23e <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801bfee:	9a03      	ldr	r2, [sp, #12]
 801bff0:	2a00      	cmp	r2, #0
 801bff2:	f6ff af45 	blt.w	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801bff6:	9a02      	ldr	r2, [sp, #8]
 801bff8:	f04f 34ff 	mov.w	r4, #4294967295
 801bffc:	4252      	negs	r2, r2
 801bffe:	940b      	str	r4, [sp, #44]	; 0x2c
 801c000:	2400      	movs	r4, #0
 801c002:	9202      	str	r2, [sp, #8]
 801c004:	9a06      	ldr	r2, [sp, #24]
 801c006:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801c00a:	9206      	str	r2, [sp, #24]
 801c00c:	462a      	mov	r2, r5
 801c00e:	435a      	muls	r2, r3
 801c010:	9401      	str	r4, [sp, #4]
 801c012:	9c02      	ldr	r4, [sp, #8]
 801c014:	9d02      	ldr	r5, [sp, #8]
 801c016:	fb92 f4f4 	sdiv	r4, r2, r4
 801c01a:	fb05 2214 	mls	r2, r5, r4, r2
 801c01e:	2a00      	cmp	r2, #0
 801c020:	9207      	str	r2, [sp, #28]
 801c022:	bfbc      	itt	lt
 801c024:	1952      	addlt	r2, r2, r5
 801c026:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801c02a:	6905      	ldr	r5, [r0, #16]
 801c02c:	bfb8      	it	lt
 801c02e:	9207      	strlt	r2, [sp, #28]
 801c030:	eb04 0901 	add.w	r9, r4, r1
 801c034:	9a01      	ldr	r2, [sp, #4]
 801c036:	ea4f 1669 	mov.w	r6, r9, asr #5
 801c03a:	429a      	cmp	r2, r3
 801c03c:	f040 8111 	bne.w	801c262 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801c040:	f9b5 3000 	ldrsh.w	r3, [r5]
 801c044:	429e      	cmp	r6, r3
 801c046:	d104      	bne.n	801c052 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801c048:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801c04c:	9a03      	ldr	r2, [sp, #12]
 801c04e:	429a      	cmp	r2, r3
 801c050:	d01b      	beq.n	801c08a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c052:	88ea      	ldrh	r2, [r5, #6]
 801c054:	88ab      	ldrh	r3, [r5, #4]
 801c056:	4313      	orrs	r3, r2
 801c058:	d010      	beq.n	801c07c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c05a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801c05e:	2a00      	cmp	r2, #0
 801c060:	db0c      	blt.n	801c07c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c062:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c064:	429a      	cmp	r2, r3
 801c066:	da09      	bge.n	801c07c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801c068:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	f102 0201 	add.w	r2, r2, #1
 801c072:	bf38      	it	cc
 801c074:	3508      	addcc	r5, #8
 801c076:	6082      	str	r2, [r0, #8]
 801c078:	bf38      	it	cc
 801c07a:	6105      	strcc	r5, [r0, #16]
 801c07c:	6903      	ldr	r3, [r0, #16]
 801c07e:	9a03      	ldr	r2, [sp, #12]
 801c080:	801e      	strh	r6, [r3, #0]
 801c082:	805a      	strh	r2, [r3, #2]
 801c084:	2200      	movs	r2, #0
 801c086:	809a      	strh	r2, [r3, #4]
 801c088:	80da      	strh	r2, [r3, #6]
 801c08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c08c:	9a03      	ldr	r2, [sp, #12]
 801c08e:	6901      	ldr	r1, [r0, #16]
 801c090:	441a      	add	r2, r3
 801c092:	f9b1 3000 	ldrsh.w	r3, [r1]
 801c096:	42b3      	cmp	r3, r6
 801c098:	d103      	bne.n	801c0a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801c09a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c09e:	429a      	cmp	r2, r3
 801c0a0:	d01a      	beq.n	801c0d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801c0a2:	88cc      	ldrh	r4, [r1, #6]
 801c0a4:	888b      	ldrh	r3, [r1, #4]
 801c0a6:	4323      	orrs	r3, r4
 801c0a8:	d010      	beq.n	801c0cc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c0aa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801c0ae:	2c00      	cmp	r4, #0
 801c0b0:	db0c      	blt.n	801c0cc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c0b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c0b4:	429c      	cmp	r4, r3
 801c0b6:	da09      	bge.n	801c0cc <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801c0b8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c0bc:	429c      	cmp	r4, r3
 801c0be:	f104 0401 	add.w	r4, r4, #1
 801c0c2:	bf38      	it	cc
 801c0c4:	3108      	addcc	r1, #8
 801c0c6:	6084      	str	r4, [r0, #8]
 801c0c8:	bf38      	it	cc
 801c0ca:	6101      	strcc	r1, [r0, #16]
 801c0cc:	6903      	ldr	r3, [r0, #16]
 801c0ce:	2100      	movs	r1, #0
 801c0d0:	801e      	strh	r6, [r3, #0]
 801c0d2:	805a      	strh	r2, [r3, #2]
 801c0d4:	8099      	strh	r1, [r3, #4]
 801c0d6:	80d9      	strh	r1, [r3, #6]
 801c0d8:	9b06      	ldr	r3, [sp, #24]
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	f000 8082 	beq.w	801c1e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801c0e0:	9b08      	ldr	r3, [sp, #32]
 801c0e2:	9902      	ldr	r1, [sp, #8]
 801c0e4:	015b      	lsls	r3, r3, #5
 801c0e6:	9c02      	ldr	r4, [sp, #8]
 801c0e8:	fb93 f1f1 	sdiv	r1, r3, r1
 801c0ec:	fb04 3311 	mls	r3, r4, r1, r3
 801c0f0:	9103      	str	r1, [sp, #12]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	9308      	str	r3, [sp, #32]
 801c0f6:	da04      	bge.n	801c102 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801c0f8:	1e4b      	subs	r3, r1, #1
 801c0fa:	9303      	str	r3, [sp, #12]
 801c0fc:	9b08      	ldr	r3, [sp, #32]
 801c0fe:	4423      	add	r3, r4
 801c100:	9308      	str	r3, [sp, #32]
 801c102:	9b07      	ldr	r3, [sp, #28]
 801c104:	464f      	mov	r7, r9
 801c106:	9902      	ldr	r1, [sp, #8]
 801c108:	2600      	movs	r6, #0
 801c10a:	1a5b      	subs	r3, r3, r1
 801c10c:	9307      	str	r3, [sp, #28]
 801c10e:	9b01      	ldr	r3, [sp, #4]
 801c110:	f1c3 0320 	rsb	r3, r3, #32
 801c114:	930e      	str	r3, [sp, #56]	; 0x38
 801c116:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c118:	9b01      	ldr	r3, [sp, #4]
 801c11a:	1a5b      	subs	r3, r3, r1
 801c11c:	930a      	str	r3, [sp, #40]	; 0x28
 801c11e:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801c122:	185b      	adds	r3, r3, r1
 801c124:	bf58      	it	pl
 801c126:	9902      	ldrpl	r1, [sp, #8]
 801c128:	9307      	str	r3, [sp, #28]
 801c12a:	bf57      	itett	pl
 801c12c:	1a5b      	subpl	r3, r3, r1
 801c12e:	9903      	ldrmi	r1, [sp, #12]
 801c130:	9307      	strpl	r3, [sp, #28]
 801c132:	9b03      	ldrpl	r3, [sp, #12]
 801c134:	bf58      	it	pl
 801c136:	1c59      	addpl	r1, r3, #1
 801c138:	2a00      	cmp	r2, #0
 801c13a:	4489      	add	r9, r1
 801c13c:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801c140:	db2e      	blt.n	801c1a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c142:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c144:	4293      	cmp	r3, r2
 801c146:	dd2b      	ble.n	801c1a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c148:	9c01      	ldr	r4, [sp, #4]
 801c14a:	6905      	ldr	r5, [r0, #16]
 801c14c:	46a0      	mov	r8, r4
 801c14e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c150:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801c154:	45a0      	cmp	r8, r4
 801c156:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801c15a:	f040 814c 	bne.w	801c3f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801c15e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801c162:	4551      	cmp	r1, sl
 801c164:	d103      	bne.n	801c16e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801c166:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801c16a:	4291      	cmp	r1, r2
 801c16c:	d018      	beq.n	801c1a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c16e:	ea5c 010e 	orrs.w	r1, ip, lr
 801c172:	d00f      	beq.n	801c194 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c174:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801c178:	2900      	cmp	r1, #0
 801c17a:	db0b      	blt.n	801c194 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c17c:	428b      	cmp	r3, r1
 801c17e:	dd09      	ble.n	801c194 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801c180:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801c184:	4299      	cmp	r1, r3
 801c186:	f101 0101 	add.w	r1, r1, #1
 801c18a:	bf38      	it	cc
 801c18c:	3508      	addcc	r5, #8
 801c18e:	6081      	str	r1, [r0, #8]
 801c190:	bf38      	it	cc
 801c192:	6105      	strcc	r5, [r0, #16]
 801c194:	6903      	ldr	r3, [r0, #16]
 801c196:	f8a3 a000 	strh.w	sl, [r3]
 801c19a:	805a      	strh	r2, [r3, #2]
 801c19c:	809e      	strh	r6, [r3, #4]
 801c19e:	80de      	strh	r6, [r3, #6]
 801c1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1a2:	6901      	ldr	r1, [r0, #16]
 801c1a4:	441a      	add	r2, r3
 801c1a6:	88cc      	ldrh	r4, [r1, #6]
 801c1a8:	888b      	ldrh	r3, [r1, #4]
 801c1aa:	4323      	orrs	r3, r4
 801c1ac:	d010      	beq.n	801c1d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c1ae:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801c1b2:	2c00      	cmp	r4, #0
 801c1b4:	db0c      	blt.n	801c1d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c1b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c1b8:	429c      	cmp	r4, r3
 801c1ba:	da09      	bge.n	801c1d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801c1bc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c1c0:	429c      	cmp	r4, r3
 801c1c2:	f104 0401 	add.w	r4, r4, #1
 801c1c6:	bf38      	it	cc
 801c1c8:	3108      	addcc	r1, #8
 801c1ca:	6084      	str	r4, [r0, #8]
 801c1cc:	bf38      	it	cc
 801c1ce:	6101      	strcc	r1, [r0, #16]
 801c1d0:	6903      	ldr	r3, [r0, #16]
 801c1d2:	464f      	mov	r7, r9
 801c1d4:	f8a3 a000 	strh.w	sl, [r3]
 801c1d8:	805a      	strh	r2, [r3, #2]
 801c1da:	809e      	strh	r6, [r3, #4]
 801c1dc:	80de      	strh	r6, [r3, #6]
 801c1de:	9b06      	ldr	r3, [sp, #24]
 801c1e0:	4293      	cmp	r3, r2
 801c1e2:	d19c      	bne.n	801c11e <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 801c1e4:	9b01      	ldr	r3, [sp, #4]
 801c1e6:	6907      	ldr	r7, [r0, #16]
 801c1e8:	f1c3 0620 	rsb	r6, r3, #32
 801c1ec:	9b05      	ldr	r3, [sp, #20]
 801c1ee:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801c1f2:	9b04      	ldr	r3, [sp, #16]
 801c1f4:	429e      	cmp	r6, r3
 801c1f6:	f040 81c7 	bne.w	801c588 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801c1fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 801c1fe:	459e      	cmp	lr, r3
 801c200:	d104      	bne.n	801c20c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801c202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c206:	429a      	cmp	r2, r3
 801c208:	f43f ae3a 	beq.w	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c20c:	88f9      	ldrh	r1, [r7, #6]
 801c20e:	88bb      	ldrh	r3, [r7, #4]
 801c210:	430b      	orrs	r3, r1
 801c212:	d010      	beq.n	801c236 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	db0c      	blt.n	801c236 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c21c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801c21e:	428b      	cmp	r3, r1
 801c220:	da09      	bge.n	801c236 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801c222:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801c226:	428b      	cmp	r3, r1
 801c228:	f103 0301 	add.w	r3, r3, #1
 801c22c:	bf38      	it	cc
 801c22e:	3708      	addcc	r7, #8
 801c230:	6083      	str	r3, [r0, #8]
 801c232:	bf38      	it	cc
 801c234:	6107      	strcc	r7, [r0, #16]
 801c236:	6903      	ldr	r3, [r0, #16]
 801c238:	f8a3 e000 	strh.w	lr, [r3]
 801c23c:	e603      	b.n	801be46 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801c23e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801c240:	9c03      	ldr	r4, [sp, #12]
 801c242:	42a2      	cmp	r2, r4
 801c244:	f6ff ae1c 	blt.w	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c248:	9c06      	ldr	r4, [sp, #24]
 801c24a:	42a2      	cmp	r2, r4
 801c24c:	9c08      	ldr	r4, [sp, #32]
 801c24e:	bfbc      	itt	lt
 801c250:	3201      	addlt	r2, #1
 801c252:	9206      	strlt	r2, [sp, #24]
 801c254:	f1c3 0220 	rsb	r2, r3, #32
 801c258:	4362      	muls	r2, r4
 801c25a:	2401      	movs	r4, #1
 801c25c:	940b      	str	r4, [sp, #44]	; 0x2c
 801c25e:	2420      	movs	r4, #32
 801c260:	e6d6      	b.n	801c010 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801c262:	ea4f 1861 	mov.w	r8, r1, asr #5
 801c266:	f009 021f 	and.w	r2, r9, #31
 801c26a:	f001 011f 	and.w	r1, r1, #31
 801c26e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801c272:	920c      	str	r2, [sp, #48]	; 0x30
 801c274:	45b0      	cmp	r8, r6
 801c276:	9a01      	ldr	r2, [sp, #4]
 801c278:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801c27c:	eba2 0203 	sub.w	r2, r2, r3
 801c280:	d108      	bne.n	801c294 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801c282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c284:	4496      	add	lr, r2
 801c286:	4419      	add	r1, r3
 801c288:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c28c:	fb02 a101 	mla	r1, r2, r1, sl
 801c290:	80e9      	strh	r1, [r5, #6]
 801c292:	e6fa      	b.n	801c08a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c294:	2c00      	cmp	r4, #0
 801c296:	f2c0 80a7 	blt.w	801c3e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801c29a:	2701      	movs	r7, #1
 801c29c:	f1c1 0c20 	rsb	ip, r1, #32
 801c2a0:	970a      	str	r7, [sp, #40]	; 0x28
 801c2a2:	2720      	movs	r7, #32
 801c2a4:	fb02 f20c 	mul.w	r2, r2, ip
 801c2a8:	9709      	str	r7, [sp, #36]	; 0x24
 801c2aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c2ac:	fb92 fcf4 	sdiv	ip, r2, r4
 801c2b0:	fb04 221c 	mls	r2, r4, ip, r2
 801c2b4:	4439      	add	r1, r7
 801c2b6:	2a00      	cmp	r2, #0
 801c2b8:	bfbc      	itt	lt
 801c2ba:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801c2be:	1912      	addlt	r2, r2, r4
 801c2c0:	fb0c a101 	mla	r1, ip, r1, sl
 801c2c4:	44e6      	add	lr, ip
 801c2c6:	80e9      	strh	r1, [r5, #6]
 801c2c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c2ca:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c2ce:	eb08 0501 	add.w	r5, r8, r1
 801c2d2:	6901      	ldr	r1, [r0, #16]
 801c2d4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801c2d8:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801c2dc:	ea58 070e 	orrs.w	r7, r8, lr
 801c2e0:	d010      	beq.n	801c304 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c2e2:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801c2e6:	f1be 0f00 	cmp.w	lr, #0
 801c2ea:	db0b      	blt.n	801c304 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c2ec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c2ee:	45be      	cmp	lr, r7
 801c2f0:	da08      	bge.n	801c304 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801c2f2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c2f6:	45be      	cmp	lr, r7
 801c2f8:	bf3c      	itt	cc
 801c2fa:	3108      	addcc	r1, #8
 801c2fc:	6101      	strcc	r1, [r0, #16]
 801c2fe:	f10e 0101 	add.w	r1, lr, #1
 801c302:	6081      	str	r1, [r0, #8]
 801c304:	6901      	ldr	r1, [r0, #16]
 801c306:	f04f 0e00 	mov.w	lr, #0
 801c30a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c30e:	42ae      	cmp	r6, r5
 801c310:	800d      	strh	r5, [r1, #0]
 801c312:	4463      	add	r3, ip
 801c314:	f8a1 8002 	strh.w	r8, [r1, #2]
 801c318:	f8a1 e004 	strh.w	lr, [r1, #4]
 801c31c:	f8a1 e006 	strh.w	lr, [r1, #6]
 801c320:	d053      	beq.n	801c3ca <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801c322:	9901      	ldr	r1, [sp, #4]
 801c324:	1b12      	subs	r2, r2, r4
 801c326:	1ac9      	subs	r1, r1, r3
 801c328:	4461      	add	r1, ip
 801c32a:	0149      	lsls	r1, r1, #5
 801c32c:	fb91 fef4 	sdiv	lr, r1, r4
 801c330:	fb04 111e 	mls	r1, r4, lr, r1
 801c334:	2900      	cmp	r1, #0
 801c336:	bfbc      	itt	lt
 801c338:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801c33c:	1909      	addlt	r1, r1, r4
 801c33e:	f10e 0701 	add.w	r7, lr, #1
 801c342:	970d      	str	r7, [sp, #52]	; 0x34
 801c344:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801c348:	1852      	adds	r2, r2, r1
 801c34a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c34c:	bf54      	ite	pl
 801c34e:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801c352:	46f4      	movmi	ip, lr
 801c354:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801c358:	bf58      	it	pl
 801c35a:	1b12      	subpl	r2, r2, r4
 801c35c:	4463      	add	r3, ip
 801c35e:	443d      	add	r5, r7
 801c360:	44e3      	add	fp, ip
 801c362:	f8aa b004 	strh.w	fp, [sl, #4]
 801c366:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801c36a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801c36e:	f8aa b006 	strh.w	fp, [sl, #6]
 801c372:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c376:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c37a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801c37e:	ea5b 070a 	orrs.w	r7, fp, sl
 801c382:	d014      	beq.n	801c3ae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c384:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801c388:	f1ba 0f00 	cmp.w	sl, #0
 801c38c:	db0f      	blt.n	801c3ae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c38e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c390:	45ba      	cmp	sl, r7
 801c392:	da0c      	bge.n	801c3ae <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801c394:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801c398:	45ba      	cmp	sl, r7
 801c39a:	f10a 0a01 	add.w	sl, sl, #1
 801c39e:	bf38      	it	cc
 801c3a0:	f10c 0c08 	addcc.w	ip, ip, #8
 801c3a4:	f8c0 a008 	str.w	sl, [r0, #8]
 801c3a8:	bf38      	it	cc
 801c3aa:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801c3ae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c3b2:	f04f 0700 	mov.w	r7, #0
 801c3b6:	42ae      	cmp	r6, r5
 801c3b8:	f8ac 5000 	strh.w	r5, [ip]
 801c3bc:	f8ac 8002 	strh.w	r8, [ip, #2]
 801c3c0:	f8ac 7004 	strh.w	r7, [ip, #4]
 801c3c4:	f8ac 7006 	strh.w	r7, [ip, #6]
 801c3c8:	d1bc      	bne.n	801c344 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801c3ca:	6904      	ldr	r4, [r0, #16]
 801c3cc:	9a01      	ldr	r2, [sp, #4]
 801c3ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c3d0:	1ad3      	subs	r3, r2, r3
 801c3d2:	88a2      	ldrh	r2, [r4, #4]
 801c3d4:	3120      	adds	r1, #32
 801c3d6:	441a      	add	r2, r3
 801c3d8:	80a2      	strh	r2, [r4, #4]
 801c3da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3dc:	1a89      	subs	r1, r1, r2
 801c3de:	88e2      	ldrh	r2, [r4, #6]
 801c3e0:	fb03 2301 	mla	r3, r3, r1, r2
 801c3e4:	80e3      	strh	r3, [r4, #6]
 801c3e6:	e650      	b.n	801c08a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801c3e8:	f04f 37ff 	mov.w	r7, #4294967295
 801c3ec:	434a      	muls	r2, r1
 801c3ee:	4264      	negs	r4, r4
 801c3f0:	970a      	str	r7, [sp, #40]	; 0x28
 801c3f2:	2700      	movs	r7, #0
 801c3f4:	e758      	b.n	801c2a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801c3f6:	ea4f 1867 	mov.w	r8, r7, asr #5
 801c3fa:	f009 031f 	and.w	r3, r9, #31
 801c3fe:	f007 071f 	and.w	r7, r7, #31
 801c402:	fa1f fc8c 	uxth.w	ip, ip
 801c406:	45d0      	cmp	r8, sl
 801c408:	930f      	str	r3, [sp, #60]	; 0x3c
 801c40a:	fa1f fe8e 	uxth.w	lr, lr
 801c40e:	d10a      	bne.n	801c426 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c412:	449c      	add	ip, r3
 801c414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c416:	441f      	add	r7, r3
 801c418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c41a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c41e:	fb03 e707 	mla	r7, r3, r7, lr
 801c422:	80ef      	strh	r7, [r5, #6]
 801c424:	e6bc      	b.n	801c1a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c426:	2900      	cmp	r1, #0
 801c428:	f2c0 80a6 	blt.w	801c578 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 801c42c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c42e:	f1c7 0320 	rsb	r3, r7, #32
 801c432:	4363      	muls	r3, r4
 801c434:	2401      	movs	r4, #1
 801c436:	940d      	str	r4, [sp, #52]	; 0x34
 801c438:	2420      	movs	r4, #32
 801c43a:	940c      	str	r4, [sp, #48]	; 0x30
 801c43c:	fb93 f4f1 	sdiv	r4, r3, r1
 801c440:	fb01 3b14 	mls	fp, r1, r4, r3
 801c444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c446:	f1bb 0f00 	cmp.w	fp, #0
 801c44a:	441f      	add	r7, r3
 801c44c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c44e:	bfbc      	itt	lt
 801c450:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801c454:	448b      	addlt	fp, r1
 801c456:	fb04 e707 	mla	r7, r4, r7, lr
 801c45a:	44a4      	add	ip, r4
 801c45c:	80ef      	strh	r7, [r5, #6]
 801c45e:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c462:	eb08 0503 	add.w	r5, r8, r3
 801c466:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c46a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801c46e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c472:	ea5e 0307 	orrs.w	r3, lr, r7
 801c476:	d011      	beq.n	801c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c478:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801c47c:	f1be 0f00 	cmp.w	lr, #0
 801c480:	db0c      	blt.n	801c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c482:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c484:	45be      	cmp	lr, r7
 801c486:	da09      	bge.n	801c49c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801c488:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c48c:	45be      	cmp	lr, r7
 801c48e:	bf3c      	itt	cc
 801c490:	f10c 0708 	addcc.w	r7, ip, #8
 801c494:	6107      	strcc	r7, [r0, #16]
 801c496:	f10e 0701 	add.w	r7, lr, #1
 801c49a:	6087      	str	r7, [r0, #8]
 801c49c:	6907      	ldr	r7, [r0, #16]
 801c49e:	b213      	sxth	r3, r2
 801c4a0:	4555      	cmp	r5, sl
 801c4a2:	9310      	str	r3, [sp, #64]	; 0x40
 801c4a4:	807b      	strh	r3, [r7, #2]
 801c4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4a8:	803d      	strh	r5, [r7, #0]
 801c4aa:	80be      	strh	r6, [r7, #4]
 801c4ac:	eb04 0c03 	add.w	ip, r4, r3
 801c4b0:	80fe      	strh	r6, [r7, #6]
 801c4b2:	d050      	beq.n	801c556 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 801c4b4:	9b01      	ldr	r3, [sp, #4]
 801c4b6:	eba3 070c 	sub.w	r7, r3, ip
 801c4ba:	ebab 0301 	sub.w	r3, fp, r1
 801c4be:	443c      	add	r4, r7
 801c4c0:	9309      	str	r3, [sp, #36]	; 0x24
 801c4c2:	0164      	lsls	r4, r4, #5
 801c4c4:	fb94 f8f1 	sdiv	r8, r4, r1
 801c4c8:	fb01 4418 	mls	r4, r1, r8, r4
 801c4cc:	2c00      	cmp	r4, #0
 801c4ce:	bfbc      	itt	lt
 801c4d0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c4d4:	1864      	addlt	r4, r4, r1
 801c4d6:	f108 0701 	add.w	r7, r8, #1
 801c4da:	9711      	str	r7, [sp, #68]	; 0x44
 801c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4de:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c4e2:	191b      	adds	r3, r3, r4
 801c4e4:	f8be b004 	ldrh.w	fp, [lr, #4]
 801c4e8:	bf54      	ite	pl
 801c4ea:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 801c4ec:	4647      	movmi	r7, r8
 801c4ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c4f0:	bf58      	it	pl
 801c4f2:	1a5b      	subpl	r3, r3, r1
 801c4f4:	44bb      	add	fp, r7
 801c4f6:	44bc      	add	ip, r7
 801c4f8:	bf58      	it	pl
 801c4fa:	9309      	strpl	r3, [sp, #36]	; 0x24
 801c4fc:	f8ae b004 	strh.w	fp, [lr, #4]
 801c500:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c504:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c508:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c50a:	f8ae b006 	strh.w	fp, [lr, #6]
 801c50e:	443d      	add	r5, r7
 801c510:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c514:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c518:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801c51c:	ea5b 0307 	orrs.w	r3, fp, r7
 801c520:	d011      	beq.n	801c546 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c522:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801c526:	f1bb 0f00 	cmp.w	fp, #0
 801c52a:	db0c      	blt.n	801c546 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c52c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c52e:	45bb      	cmp	fp, r7
 801c530:	da09      	bge.n	801c546 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801c532:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c536:	45bb      	cmp	fp, r7
 801c538:	bf3c      	itt	cc
 801c53a:	f10e 0708 	addcc.w	r7, lr, #8
 801c53e:	6107      	strcc	r7, [r0, #16]
 801c540:	f10b 0701 	add.w	r7, fp, #1
 801c544:	6087      	str	r7, [r0, #8]
 801c546:	6907      	ldr	r7, [r0, #16]
 801c548:	4555      	cmp	r5, sl
 801c54a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c54c:	803d      	strh	r5, [r7, #0]
 801c54e:	807b      	strh	r3, [r7, #2]
 801c550:	80be      	strh	r6, [r7, #4]
 801c552:	80fe      	strh	r6, [r7, #6]
 801c554:	d1c2      	bne.n	801c4dc <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801c556:	9b01      	ldr	r3, [sp, #4]
 801c558:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c55a:	eba3 0c0c 	sub.w	ip, r3, ip
 801c55e:	6903      	ldr	r3, [r0, #16]
 801c560:	3720      	adds	r7, #32
 801c562:	8899      	ldrh	r1, [r3, #4]
 801c564:	4461      	add	r1, ip
 801c566:	8099      	strh	r1, [r3, #4]
 801c568:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c56a:	1a7f      	subs	r7, r7, r1
 801c56c:	88d9      	ldrh	r1, [r3, #6]
 801c56e:	fb0c 1c07 	mla	ip, ip, r7, r1
 801c572:	f8a3 c006 	strh.w	ip, [r3, #6]
 801c576:	e613      	b.n	801c1a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801c578:	f04f 34ff 	mov.w	r4, #4294967295
 801c57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c57e:	4249      	negs	r1, r1
 801c580:	940d      	str	r4, [sp, #52]	; 0x34
 801c582:	2400      	movs	r4, #0
 801c584:	437b      	muls	r3, r7
 801c586:	e758      	b.n	801c43a <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801c588:	9905      	ldr	r1, [sp, #20]
 801c58a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801c58e:	f009 0c1f 	and.w	ip, r9, #31
 801c592:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801c596:	f001 011f 	and.w	r1, r1, #31
 801c59a:	45f3      	cmp	fp, lr
 801c59c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801c5a0:	9102      	str	r1, [sp, #8]
 801c5a2:	9904      	ldr	r1, [sp, #16]
 801c5a4:	eba1 0406 	sub.w	r4, r1, r6
 801c5a8:	d108      	bne.n	801c5bc <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801c5aa:	9b02      	ldr	r3, [sp, #8]
 801c5ac:	44a0      	add	r8, r4
 801c5ae:	449c      	add	ip, r3
 801c5b0:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c5b4:	fb04 a40c 	mla	r4, r4, ip, sl
 801c5b8:	80fc      	strh	r4, [r7, #6]
 801c5ba:	e461      	b.n	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801c5bc:	9905      	ldr	r1, [sp, #20]
 801c5be:	ebb1 0109 	subs.w	r1, r1, r9
 801c5c2:	bf51      	iteee	pl
 801c5c4:	f1cc 0520 	rsbpl	r5, ip, #32
 801c5c8:	fb04 f40c 	mulmi.w	r4, r4, ip
 801c5cc:	4249      	negmi	r1, r1
 801c5ce:	2500      	movmi	r5, #0
 801c5d0:	bf5d      	ittte	pl
 801c5d2:	436c      	mulpl	r4, r5
 801c5d4:	2520      	movpl	r5, #32
 801c5d6:	f04f 0901 	movpl.w	r9, #1
 801c5da:	f04f 39ff 	movmi.w	r9, #4294967295
 801c5de:	9501      	str	r5, [sp, #4]
 801c5e0:	9b01      	ldr	r3, [sp, #4]
 801c5e2:	fb94 f5f1 	sdiv	r5, r4, r1
 801c5e6:	fb01 4415 	mls	r4, r1, r5, r4
 801c5ea:	449c      	add	ip, r3
 801c5ec:	eb0b 0309 	add.w	r3, fp, r9
 801c5f0:	2c00      	cmp	r4, #0
 801c5f2:	bfbc      	itt	lt
 801c5f4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801c5f8:	1864      	addlt	r4, r4, r1
 801c5fa:	44a8      	add	r8, r5
 801c5fc:	fb05 ac0c 	mla	ip, r5, ip, sl
 801c600:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c604:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c608:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c60c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801c610:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c614:	ea58 0707 	orrs.w	r7, r8, r7
 801c618:	d011      	beq.n	801c63e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c61a:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801c61e:	f1b8 0f00 	cmp.w	r8, #0
 801c622:	db0c      	blt.n	801c63e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c624:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c626:	45b8      	cmp	r8, r7
 801c628:	da09      	bge.n	801c63e <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801c62a:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801c62e:	45b8      	cmp	r8, r7
 801c630:	bf3c      	itt	cc
 801c632:	f10c 0708 	addcc.w	r7, ip, #8
 801c636:	6107      	strcc	r7, [r0, #16]
 801c638:	f108 0701 	add.w	r7, r8, #1
 801c63c:	6087      	str	r7, [r0, #8]
 801c63e:	6907      	ldr	r7, [r0, #16]
 801c640:	f04f 0c00 	mov.w	ip, #0
 801c644:	b212      	sxth	r2, r2
 801c646:	459e      	cmp	lr, r3
 801c648:	803b      	strh	r3, [r7, #0]
 801c64a:	442e      	add	r6, r5
 801c64c:	807a      	strh	r2, [r7, #2]
 801c64e:	f8a7 c004 	strh.w	ip, [r7, #4]
 801c652:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c656:	d04b      	beq.n	801c6f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801c658:	9f04      	ldr	r7, [sp, #16]
 801c65a:	1a64      	subs	r4, r4, r1
 801c65c:	f04f 0a00 	mov.w	sl, #0
 801c660:	1bbf      	subs	r7, r7, r6
 801c662:	443d      	add	r5, r7
 801c664:	016d      	lsls	r5, r5, #5
 801c666:	fb95 f8f1 	sdiv	r8, r5, r1
 801c66a:	fb01 5518 	mls	r5, r1, r8, r5
 801c66e:	4565      	cmp	r5, ip
 801c670:	bfbc      	itt	lt
 801c672:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c676:	186d      	addlt	r5, r5, r1
 801c678:	f108 0701 	add.w	r7, r8, #1
 801c67c:	9703      	str	r7, [sp, #12]
 801c67e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c682:	1964      	adds	r4, r4, r5
 801c684:	444b      	add	r3, r9
 801c686:	bf54      	ite	pl
 801c688:	9f03      	ldrpl	r7, [sp, #12]
 801c68a:	4647      	movmi	r7, r8
 801c68c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801c690:	bf58      	it	pl
 801c692:	1a64      	subpl	r4, r4, r1
 801c694:	443e      	add	r6, r7
 801c696:	44bb      	add	fp, r7
 801c698:	f8ac b004 	strh.w	fp, [ip, #4]
 801c69c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c6a0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c6a4:	f8ac b006 	strh.w	fp, [ip, #6]
 801c6a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c6ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c6b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c6b4:	ea5b 0707 	orrs.w	r7, fp, r7
 801c6b8:	d011      	beq.n	801c6de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801c6ba:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801c6be:	f1bb 0f00 	cmp.w	fp, #0
 801c6c2:	db0c      	blt.n	801c6de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801c6c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c6c6:	45bb      	cmp	fp, r7
 801c6c8:	da09      	bge.n	801c6de <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801c6ca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c6ce:	45bb      	cmp	fp, r7
 801c6d0:	bf3c      	itt	cc
 801c6d2:	f10c 0708 	addcc.w	r7, ip, #8
 801c6d6:	6107      	strcc	r7, [r0, #16]
 801c6d8:	f10b 0701 	add.w	r7, fp, #1
 801c6dc:	6087      	str	r7, [r0, #8]
 801c6de:	6907      	ldr	r7, [r0, #16]
 801c6e0:	459e      	cmp	lr, r3
 801c6e2:	803b      	strh	r3, [r7, #0]
 801c6e4:	807a      	strh	r2, [r7, #2]
 801c6e6:	f8a7 a004 	strh.w	sl, [r7, #4]
 801c6ea:	f8a7 a006 	strh.w	sl, [r7, #6]
 801c6ee:	d1c6      	bne.n	801c67e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 801c6f0:	9b04      	ldr	r3, [sp, #16]
 801c6f2:	1b9e      	subs	r6, r3, r6
 801c6f4:	6903      	ldr	r3, [r0, #16]
 801c6f6:	889a      	ldrh	r2, [r3, #4]
 801c6f8:	4432      	add	r2, r6
 801c6fa:	809a      	strh	r2, [r3, #4]
 801c6fc:	9a02      	ldr	r2, [sp, #8]
 801c6fe:	f102 0c20 	add.w	ip, r2, #32
 801c702:	9a01      	ldr	r2, [sp, #4]
 801c704:	ebac 0c02 	sub.w	ip, ip, r2
 801c708:	88da      	ldrh	r2, [r3, #6]
 801c70a:	fb06 260c 	mla	r6, r6, ip, r2
 801c70e:	80de      	strh	r6, [r3, #6]
 801c710:	f7ff bbb6 	b.w	801be80 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

0801c714 <_ZN8touchgfx7Outline6lineToEii>:
 801c714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c716:	079b      	lsls	r3, r3, #30
 801c718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c71a:	460e      	mov	r6, r1
 801c71c:	4615      	mov	r5, r2
 801c71e:	d511      	bpl.n	801c744 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801c720:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801c724:	ea86 0701 	eor.w	r7, r6, r1
 801c728:	ea85 0302 	eor.w	r3, r5, r2
 801c72c:	433b      	orrs	r3, r7
 801c72e:	d009      	beq.n	801c744 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801c730:	4633      	mov	r3, r6
 801c732:	9500      	str	r5, [sp, #0]
 801c734:	f7ff fb4c 	bl	801bdd0 <_ZN8touchgfx7Outline10renderLineEiiii>
 801c738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c73a:	f043 0301 	orr.w	r3, r3, #1
 801c73e:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801c742:	6243      	str	r3, [r0, #36]	; 0x24
 801c744:	b003      	add	sp, #12
 801c746:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c748 <_ZN8touchgfx7Outline6moveToEii>:
 801c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c74a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c74c:	4615      	mov	r5, r2
 801c74e:	4604      	mov	r4, r0
 801c750:	460e      	mov	r6, r1
 801c752:	079a      	lsls	r2, r3, #30
 801c754:	d401      	bmi.n	801c75a <_ZN8touchgfx7Outline6moveToEii+0x12>
 801c756:	f7ff fb07 	bl	801bd68 <_ZN8touchgfx7Outline5resetEv>
 801c75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c75c:	07db      	lsls	r3, r3, #31
 801c75e:	d504      	bpl.n	801c76a <_ZN8touchgfx7Outline6moveToEii+0x22>
 801c760:	4620      	mov	r0, r4
 801c762:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801c766:	f7ff ffd5 	bl	801c714 <_ZN8touchgfx7Outline6lineToEii>
 801c76a:	6923      	ldr	r3, [r4, #16]
 801c76c:	1170      	asrs	r0, r6, #5
 801c76e:	1169      	asrs	r1, r5, #5
 801c770:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c774:	4290      	cmp	r0, r2
 801c776:	d103      	bne.n	801c780 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801c778:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c77c:	4291      	cmp	r1, r2
 801c77e:	d01a      	beq.n	801c7b6 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801c780:	88df      	ldrh	r7, [r3, #6]
 801c782:	889a      	ldrh	r2, [r3, #4]
 801c784:	433a      	orrs	r2, r7
 801c786:	d010      	beq.n	801c7aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 801c788:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c78c:	2a00      	cmp	r2, #0
 801c78e:	db0c      	blt.n	801c7aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 801c790:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801c792:	42ba      	cmp	r2, r7
 801c794:	da09      	bge.n	801c7aa <_ZN8touchgfx7Outline6moveToEii+0x62>
 801c796:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801c79a:	42ba      	cmp	r2, r7
 801c79c:	f102 0201 	add.w	r2, r2, #1
 801c7a0:	bf38      	it	cc
 801c7a2:	3308      	addcc	r3, #8
 801c7a4:	60a2      	str	r2, [r4, #8]
 801c7a6:	bf38      	it	cc
 801c7a8:	6123      	strcc	r3, [r4, #16]
 801c7aa:	6923      	ldr	r3, [r4, #16]
 801c7ac:	2200      	movs	r2, #0
 801c7ae:	8018      	strh	r0, [r3, #0]
 801c7b0:	8059      	strh	r1, [r3, #2]
 801c7b2:	809a      	strh	r2, [r3, #4]
 801c7b4:	80da      	strh	r2, [r3, #6]
 801c7b6:	6166      	str	r6, [r4, #20]
 801c7b8:	6225      	str	r5, [r4, #32]
 801c7ba:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c7c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801c7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7c4:	b0d0      	sub	sp, #320	; 0x140
 801c7c6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c7ca:	466c      	mov	r4, sp
 801c7cc:	4627      	mov	r7, r4
 801c7ce:	1a0d      	subs	r5, r1, r0
 801c7d0:	f100 0308 	add.w	r3, r0, #8
 801c7d4:	2d48      	cmp	r5, #72	; 0x48
 801c7d6:	f340 80d5 	ble.w	801c984 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801c7da:	112d      	asrs	r5, r5, #4
 801c7dc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801c7e0:	f9b0 9000 	ldrsh.w	r9, [r0]
 801c7e4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801c7e8:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801c7ec:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801c7f0:	6816      	ldr	r6, [r2, #0]
 801c7f2:	6006      	str	r6, [r0, #0]
 801c7f4:	6856      	ldr	r6, [r2, #4]
 801c7f6:	6046      	str	r6, [r0, #4]
 801c7f8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c7fc:	f8a2 8002 	strh.w	r8, [r2, #2]
 801c800:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c804:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c808:	f1a1 0208 	sub.w	r2, r1, #8
 801c80c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801c810:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801c814:	4565      	cmp	r5, ip
 801c816:	db06      	blt.n	801c826 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801c818:	d119      	bne.n	801c84e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801c81a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801c81e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801c822:	42ae      	cmp	r6, r5
 801c824:	dd13      	ble.n	801c84e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801c826:	460e      	mov	r6, r1
 801c828:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801c82c:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801c830:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801c834:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801c838:	601d      	str	r5, [r3, #0]
 801c83a:	6875      	ldr	r5, [r6, #4]
 801c83c:	605d      	str	r5, [r3, #4]
 801c83e:	f821 9c08 	strh.w	r9, [r1, #-8]
 801c842:	f821 cc06 	strh.w	ip, [r1, #-6]
 801c846:	f821 8c04 	strh.w	r8, [r1, #-4]
 801c84a:	f821 ec02 	strh.w	lr, [r1, #-2]
 801c84e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801c852:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801c856:	42ae      	cmp	r6, r5
 801c858:	db06      	blt.n	801c868 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801c85a:	d116      	bne.n	801c88a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c85c:	f9b0 c000 	ldrsh.w	ip, [r0]
 801c860:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801c864:	45ac      	cmp	ip, r5
 801c866:	da10      	bge.n	801c88a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c868:	681d      	ldr	r5, [r3, #0]
 801c86a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c86e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801c872:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801c876:	6005      	str	r5, [r0, #0]
 801c878:	685d      	ldr	r5, [r3, #4]
 801c87a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801c87e:	6045      	str	r5, [r0, #4]
 801c880:	8146      	strh	r6, [r0, #10]
 801c882:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801c886:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c88a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801c88e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c892:	4565      	cmp	r5, ip
 801c894:	db06      	blt.n	801c8a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801c896:	d119      	bne.n	801c8cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c898:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801c89c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c8a0:	42ae      	cmp	r6, r5
 801c8a2:	da13      	bge.n	801c8cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c8a4:	460e      	mov	r6, r1
 801c8a6:	f9b0 9000 	ldrsh.w	r9, [r0]
 801c8aa:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801c8ae:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801c8b2:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801c8b6:	6005      	str	r5, [r0, #0]
 801c8b8:	6875      	ldr	r5, [r6, #4]
 801c8ba:	6045      	str	r5, [r0, #4]
 801c8bc:	f821 9c08 	strh.w	r9, [r1, #-8]
 801c8c0:	f821 cc06 	strh.w	ip, [r1, #-6]
 801c8c4:	f821 8c04 	strh.w	r8, [r1, #-4]
 801c8c8:	f821 ec02 	strh.w	lr, [r1, #-2]
 801c8cc:	3308      	adds	r3, #8
 801c8ce:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c8d2:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801c8d6:	45e6      	cmp	lr, ip
 801c8d8:	dbf8      	blt.n	801c8cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c8da:	d105      	bne.n	801c8e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c8dc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c8e0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c8e4:	42ae      	cmp	r6, r5
 801c8e6:	dbf1      	blt.n	801c8cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c8e8:	4615      	mov	r5, r2
 801c8ea:	3a08      	subs	r2, #8
 801c8ec:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801c8f0:	45b4      	cmp	ip, r6
 801c8f2:	dbf9      	blt.n	801c8e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c8f4:	d105      	bne.n	801c902 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801c8f6:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c8fa:	f9b2 6000 	ldrsh.w	r6, [r2]
 801c8fe:	45b0      	cmp	r8, r6
 801c900:	dbf2      	blt.n	801c8e8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c902:	4293      	cmp	r3, r2
 801c904:	f1a5 0608 	sub.w	r6, r5, #8
 801c908:	d816      	bhi.n	801c938 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801c90a:	f8d6 c000 	ldr.w	ip, [r6]
 801c90e:	f9b3 a000 	ldrsh.w	sl, [r3]
 801c912:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801c916:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801c91a:	f8c3 c000 	str.w	ip, [r3]
 801c91e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801c922:	f8c3 c004 	str.w	ip, [r3, #4]
 801c926:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c92a:	f825 ec06 	strh.w	lr, [r5, #-6]
 801c92e:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c932:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c936:	e7c9      	b.n	801c8cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c938:	f8d6 e000 	ldr.w	lr, [r6]
 801c93c:	f9b0 a000 	ldrsh.w	sl, [r0]
 801c940:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801c944:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801c948:	f8c0 e000 	str.w	lr, [r0]
 801c94c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801c950:	1a16      	subs	r6, r2, r0
 801c952:	f8c0 e004 	str.w	lr, [r0, #4]
 801c956:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c95a:	f825 cc06 	strh.w	ip, [r5, #-6]
 801c95e:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c962:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c966:	1acd      	subs	r5, r1, r3
 801c968:	10ed      	asrs	r5, r5, #3
 801c96a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801c96e:	bfb5      	itete	lt
 801c970:	e9c4 0200 	strdlt	r0, r2, [r4]
 801c974:	e9c4 3100 	strdge	r3, r1, [r4]
 801c978:	460a      	movlt	r2, r1
 801c97a:	4603      	movge	r3, r0
 801c97c:	3408      	adds	r4, #8
 801c97e:	4618      	mov	r0, r3
 801c980:	4611      	mov	r1, r2
 801c982:	e724      	b.n	801c7ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c984:	4299      	cmp	r1, r3
 801c986:	d927      	bls.n	801c9d8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801c988:	f1a3 0210 	sub.w	r2, r3, #16
 801c98c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801c990:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801c994:	45ac      	cmp	ip, r5
 801c996:	db06      	blt.n	801c9a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801c998:	d11c      	bne.n	801c9d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801c99a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801c99e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801c9a2:	42ae      	cmp	r6, r5
 801c9a4:	da16      	bge.n	801c9d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801c9a6:	4615      	mov	r5, r2
 801c9a8:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801c9ac:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801c9b0:	3a08      	subs	r2, #8
 801c9b2:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801c9b6:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801c9ba:	6196      	str	r6, [r2, #24]
 801c9bc:	42a8      	cmp	r0, r5
 801c9be:	686e      	ldr	r6, [r5, #4]
 801c9c0:	f8a2 9010 	strh.w	r9, [r2, #16]
 801c9c4:	61d6      	str	r6, [r2, #28]
 801c9c6:	f8a2 c012 	strh.w	ip, [r2, #18]
 801c9ca:	f8a2 8014 	strh.w	r8, [r2, #20]
 801c9ce:	f8a2 e016 	strh.w	lr, [r2, #22]
 801c9d2:	d1db      	bne.n	801c98c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801c9d4:	3308      	adds	r3, #8
 801c9d6:	e7d5      	b.n	801c984 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801c9d8:	42bc      	cmp	r4, r7
 801c9da:	d903      	bls.n	801c9e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801c9dc:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801c9e0:	3c08      	subs	r4, #8
 801c9e2:	e6f4      	b.n	801c7ce <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c9e4:	b050      	add	sp, #320	; 0x140
 801c9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801c9ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801c9ea:	b510      	push	{r4, lr}
 801c9ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c9ee:	4604      	mov	r4, r0
 801c9f0:	07da      	lsls	r2, r3, #31
 801c9f2:	d507      	bpl.n	801ca04 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801c9f4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801c9f8:	f7ff fe8c 	bl	801c714 <_ZN8touchgfx7Outline6lineToEii>
 801c9fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c9fe:	f023 0301 	bic.w	r3, r3, #1
 801ca02:	6243      	str	r3, [r0, #36]	; 0x24
 801ca04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca06:	079b      	lsls	r3, r3, #30
 801ca08:	d521      	bpl.n	801ca4e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801ca0a:	6923      	ldr	r3, [r4, #16]
 801ca0c:	88d9      	ldrh	r1, [r3, #6]
 801ca0e:	889a      	ldrh	r2, [r3, #4]
 801ca10:	430a      	orrs	r2, r1
 801ca12:	d010      	beq.n	801ca36 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801ca14:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801ca18:	2a00      	cmp	r2, #0
 801ca1a:	db0c      	blt.n	801ca36 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801ca1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801ca1e:	428a      	cmp	r2, r1
 801ca20:	da09      	bge.n	801ca36 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801ca22:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801ca26:	4291      	cmp	r1, r2
 801ca28:	f102 0201 	add.w	r2, r2, #1
 801ca2c:	bf88      	it	hi
 801ca2e:	3308      	addhi	r3, #8
 801ca30:	60a2      	str	r2, [r4, #8]
 801ca32:	bf88      	it	hi
 801ca34:	6123      	strhi	r3, [r4, #16]
 801ca36:	68a1      	ldr	r1, [r4, #8]
 801ca38:	b129      	cbz	r1, 801ca46 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801ca3a:	6863      	ldr	r3, [r4, #4]
 801ca3c:	4299      	cmp	r1, r3
 801ca3e:	d802      	bhi.n	801ca46 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801ca40:	68e0      	ldr	r0, [r4, #12]
 801ca42:	f7ff febd 	bl	801c7c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801ca46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ca48:	f023 0302 	bic.w	r3, r3, #2
 801ca4c:	6263      	str	r3, [r4, #36]	; 0x24
 801ca4e:	68e0      	ldr	r0, [r4, #12]
 801ca50:	bd10      	pop	{r4, pc}
	...

0801ca54 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801ca54:	4b02      	ldr	r3, [pc, #8]	; (801ca60 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801ca56:	6018      	str	r0, [r3, #0]
 801ca58:	4b02      	ldr	r3, [pc, #8]	; (801ca64 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801ca5a:	6019      	str	r1, [r3, #0]
 801ca5c:	4770      	bx	lr
 801ca5e:	bf00      	nop
 801ca60:	2400d834 	.word	0x2400d834
 801ca64:	2400d838 	.word	0x2400d838

0801ca68 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801ca68:	4b01      	ldr	r3, [pc, #4]	; (801ca70 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801ca6a:	6818      	ldr	r0, [r3, #0]
 801ca6c:	4770      	bx	lr
 801ca6e:	bf00      	nop
 801ca70:	2400d834 	.word	0x2400d834

0801ca74 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801ca74:	4b01      	ldr	r3, [pc, #4]	; (801ca7c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801ca76:	6818      	ldr	r0, [r3, #0]
 801ca78:	4770      	bx	lr
 801ca7a:	bf00      	nop
 801ca7c:	2400d838 	.word	0x2400d838

0801ca80 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801ca80:	b510      	push	{r4, lr}
 801ca82:	6803      	ldr	r3, [r0, #0]
 801ca84:	460c      	mov	r4, r1
 801ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca88:	4798      	blx	r3
 801ca8a:	1b03      	subs	r3, r0, r4
 801ca8c:	4258      	negs	r0, r3
 801ca8e:	4158      	adcs	r0, r3
 801ca90:	bd10      	pop	{r4, pc}
	...

0801ca94 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801ca94:	4b01      	ldr	r3, [pc, #4]	; (801ca9c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801ca96:	6019      	str	r1, [r3, #0]
 801ca98:	4770      	bx	lr
 801ca9a:	bf00      	nop
 801ca9c:	2400d83c 	.word	0x2400d83c

0801caa0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa4:	4696      	mov	lr, r2
 801caa6:	b097      	sub	sp, #92	; 0x5c
 801caa8:	4605      	mov	r5, r0
 801caaa:	4614      	mov	r4, r2
 801caac:	460e      	mov	r6, r1
 801caae:	461f      	mov	r7, r3
 801cab0:	f10d 0c1c 	add.w	ip, sp, #28
 801cab4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801cab8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801cabc:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801cac0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cac4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cac8:	f8de 3000 	ldr.w	r3, [lr]
 801cacc:	f104 0e14 	add.w	lr, r4, #20
 801cad0:	f8cc 3000 	str.w	r3, [ip]
 801cad4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cad8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cadc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cae0:	f8de 3000 	ldr.w	r3, [lr]
 801cae4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801cae8:	f8cc 3000 	str.w	r3, [ip]
 801caec:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801caf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801caf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801caf8:	f8de 3000 	ldr.w	r3, [lr]
 801cafc:	4631      	mov	r1, r6
 801cafe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cb00:	4628      	mov	r0, r5
 801cb02:	f8cc 3000 	str.w	r3, [ip]
 801cb06:	682b      	ldr	r3, [r5, #0]
 801cb08:	9201      	str	r2, [sp, #4]
 801cb0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cb0c:	f8cd 8008 	str.w	r8, [sp, #8]
 801cb10:	9200      	str	r2, [sp, #0]
 801cb12:	aa07      	add	r2, sp, #28
 801cb14:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801cb18:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801cb1c:	463b      	mov	r3, r7
 801cb1e:	47d8      	blx	fp
 801cb20:	46a6      	mov	lr, r4
 801cb22:	f10d 0c1c 	add.w	ip, sp, #28
 801cb26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cb2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb2e:	f8de 3000 	ldr.w	r3, [lr]
 801cb32:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801cb36:	343c      	adds	r4, #60	; 0x3c
 801cb38:	f8cc 3000 	str.w	r3, [ip]
 801cb3c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cb40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cb44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb48:	f8de 3000 	ldr.w	r3, [lr]
 801cb4c:	f8cc 3000 	str.w	r3, [ip]
 801cb50:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801cb54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb5a:	6823      	ldr	r3, [r4, #0]
 801cb5c:	4631      	mov	r1, r6
 801cb5e:	4628      	mov	r0, r5
 801cb60:	f8cc 3000 	str.w	r3, [ip]
 801cb64:	682b      	ldr	r3, [r5, #0]
 801cb66:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801cb6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cb6c:	f8cd 8008 	str.w	r8, [sp, #8]
 801cb70:	9201      	str	r2, [sp, #4]
 801cb72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cb74:	9200      	str	r2, [sp, #0]
 801cb76:	aa07      	add	r2, sp, #28
 801cb78:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801cb7a:	463b      	mov	r3, r7
 801cb7c:	47a0      	blx	r4
 801cb7e:	b017      	add	sp, #92	; 0x5c
 801cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb84 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cb84:	2000      	movs	r0, #0
 801cb86:	4770      	bx	lr

0801cb88 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801cb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb8c:	b08d      	sub	sp, #52	; 0x34
 801cb8e:	4688      	mov	r8, r1
 801cb90:	f8d3 c000 	ldr.w	ip, [r3]
 801cb94:	9916      	ldr	r1, [sp, #88]	; 0x58
 801cb96:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801cb9a:	680f      	ldr	r7, [r1, #0]
 801cb9c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801cba0:	eba7 070c 	sub.w	r7, r7, ip
 801cba4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801cba8:	edd3 6a07 	vldr	s13, [r3, #28]
 801cbac:	42bc      	cmp	r4, r7
 801cbae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801cbb0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801cbb4:	bfa8      	it	ge
 801cbb6:	463c      	movge	r4, r7
 801cbb8:	f9b1 9000 	ldrsh.w	r9, [r1]
 801cbbc:	f9ba 1000 	ldrsh.w	r1, [sl]
 801cbc0:	ee07 4a90 	vmov	s15, r4
 801cbc4:	eb09 0e0c 	add.w	lr, r9, ip
 801cbc8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801cbcc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801cbd0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801cbd4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801cbd8:	4571      	cmp	r1, lr
 801cbda:	ee25 4a04 	vmul.f32	s8, s10, s8
 801cbde:	ee65 4a24 	vmul.f32	s9, s10, s9
 801cbe2:	ee25 5a27 	vmul.f32	s10, s10, s15
 801cbe6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801cbea:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801cbee:	ee32 1a05 	vadd.f32	s2, s4, s10
 801cbf2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801cbf6:	ee36 0a84 	vadd.f32	s0, s13, s8
 801cbfa:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cbfe:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cc02:	f340 808c 	ble.w	801cd1e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801cc06:	eba1 060e 	sub.w	r6, r1, lr
 801cc0a:	fb96 f5f4 	sdiv	r5, r6, r4
 801cc0e:	ee07 5a10 	vmov	s14, r5
 801cc12:	2d00      	cmp	r5, #0
 801cc14:	fb04 6615 	mls	r6, r4, r5, r6
 801cc18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cc1c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801cc20:	eee7 0a24 	vfma.f32	s1, s14, s9
 801cc24:	eea7 1a05 	vfma.f32	s2, s14, s10
 801cc28:	dd12      	ble.n	801cc50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801cc2a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801cc2e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801cc32:	ee31 2a45 	vsub.f32	s4, s2, s10
 801cc36:	eef5 6a40 	vcmp.f32	s13, #0.0
 801cc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc3e:	bf14      	ite	ne
 801cc40:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801cc44:	eeb0 7a67 	vmoveq.f32	s14, s15
 801cc48:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cc4c:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cc50:	fb05 f204 	mul.w	r2, r5, r4
 801cc54:	1abf      	subs	r7, r7, r2
 801cc56:	4494      	add	ip, r2
 801cc58:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801cc5c:	4411      	add	r1, r2
 801cc5e:	eb09 020c 	add.w	r2, r9, ip
 801cc62:	b209      	sxth	r1, r1
 801cc64:	443a      	add	r2, r7
 801cc66:	428a      	cmp	r2, r1
 801cc68:	bfc4      	itt	gt
 801cc6a:	eba1 0209 	subgt.w	r2, r1, r9
 801cc6e:	eba2 070c 	subgt.w	r7, r2, ip
 801cc72:	2f00      	cmp	r7, #0
 801cc74:	dd50      	ble.n	801cd18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801cc76:	fb97 f1f4 	sdiv	r1, r7, r4
 801cc7a:	fb04 7211 	mls	r2, r4, r1, r7
 801cc7e:	b90a      	cbnz	r2, 801cc84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801cc80:	3901      	subs	r1, #1
 801cc82:	4622      	mov	r2, r4
 801cc84:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801cc88:	6840      	ldr	r0, [r0, #4]
 801cc8a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801cc8e:	44b6      	add	lr, r6
 801cc90:	f8d0 a000 	ldr.w	sl, [r0]
 801cc94:	2900      	cmp	r1, #0
 801cc96:	bfcc      	ite	gt
 801cc98:	46a1      	movgt	r9, r4
 801cc9a:	4691      	movle	r9, r2
 801cc9c:	900b      	str	r0, [sp, #44]	; 0x2c
 801cc9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cca0:	fb04 e505 	mla	r5, r4, r5, lr
 801cca4:	eef0 6a42 	vmov.f32	s13, s4
 801cca8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801ccac:	9008      	str	r0, [sp, #32]
 801ccae:	eeb0 7a61 	vmov.f32	s14, s3
 801ccb2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ccb4:	695b      	ldr	r3, [r3, #20]
 801ccb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccba:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801ccbe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801ccc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ccc4:	445b      	add	r3, fp
 801ccc6:	9307      	str	r3, [sp, #28]
 801ccc8:	ee16 3a90 	vmov	r3, s13
 801cccc:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801ccd0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801ccd4:	ee21 3a23 	vmul.f32	s6, s2, s7
 801ccd8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801ccdc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cce0:	ee17 7a90 	vmov	r7, s15
 801cce4:	ee73 7a42 	vsub.f32	s15, s6, s4
 801cce8:	fb97 f7f4 	sdiv	r7, r7, r4
 801ccec:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801ccf0:	ee17 ca90 	vmov	ip, s15
 801ccf4:	fb9c fcf4 	sdiv	ip, ip, r4
 801ccf8:	fb0c 3306 	mla	r3, ip, r6, r3
 801ccfc:	9302      	str	r3, [sp, #8]
 801ccfe:	ee17 3a10 	vmov	r3, s14
 801cd02:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801cd06:	fb07 3706 	mla	r7, r7, r6, r3
 801cd0a:	eba9 0306 	sub.w	r3, r9, r6
 801cd0e:	e9cd 4700 	strd	r4, r7, [sp]
 801cd12:	f8da 4008 	ldr.w	r4, [sl, #8]
 801cd16:	47a0      	blx	r4
 801cd18:	b00d      	add	sp, #52	; 0x34
 801cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd1e:	2500      	movs	r5, #0
 801cd20:	462e      	mov	r6, r5
 801cd22:	e799      	b.n	801cc58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801cd24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801cd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd28:	b0db      	sub	sp, #364	; 0x16c
 801cd2a:	461d      	mov	r5, r3
 801cd2c:	4614      	mov	r4, r2
 801cd2e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801cd32:	910f      	str	r1, [sp, #60]	; 0x3c
 801cd34:	4629      	mov	r1, r5
 801cd36:	930a      	str	r3, [sp, #40]	; 0x28
 801cd38:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801cd3c:	9009      	str	r0, [sp, #36]	; 0x24
 801cd3e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cd40:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801cd44:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801cd48:	9310      	str	r3, [sp, #64]	; 0x40
 801cd4a:	6803      	ldr	r3, [r0, #0]
 801cd4c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801cd4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cd52:	47b8      	blx	r7
 801cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd56:	6058      	str	r0, [r3, #4]
 801cd58:	2800      	cmp	r0, #0
 801cd5a:	f000 83a1 	beq.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cd5e:	682b      	ldr	r3, [r5, #0]
 801cd60:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801cd64:	ed94 7a02 	vldr	s14, [r4, #8]
 801cd68:	9314      	str	r3, [sp, #80]	; 0x50
 801cd6a:	686b      	ldr	r3, [r5, #4]
 801cd6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd70:	9315      	str	r3, [sp, #84]	; 0x54
 801cd72:	4bc1      	ldr	r3, [pc, #772]	; (801d078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801cd74:	7819      	ldrb	r1, [r3, #0]
 801cd76:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801cd7a:	2900      	cmp	r1, #0
 801cd7c:	bf16      	itet	ne
 801cd7e:	4619      	movne	r1, r3
 801cd80:	4611      	moveq	r1, r2
 801cd82:	4613      	movne	r3, r2
 801cd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd88:	9116      	str	r1, [sp, #88]	; 0x58
 801cd8a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801cd8e:	f240 8387 	bls.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cd92:	ed94 7a07 	vldr	s14, [r4, #28]
 801cd96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd9e:	f240 837f 	bls.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cda2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801cda6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cdaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdae:	f240 8377 	bls.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cdb2:	6822      	ldr	r2, [r4, #0]
 801cdb4:	4bb1      	ldr	r3, [pc, #708]	; (801d07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	f2c0 8372 	blt.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cdbc:	49b0      	ldr	r1, [pc, #704]	; (801d080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801cdbe:	6963      	ldr	r3, [r4, #20]
 801cdc0:	428a      	cmp	r2, r1
 801cdc2:	f300 836d 	bgt.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cdc6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801cdca:	48ae      	ldr	r0, [pc, #696]	; (801d084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801cdcc:	33ff      	adds	r3, #255	; 0xff
 801cdce:	4283      	cmp	r3, r0
 801cdd0:	f200 8366 	bhi.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cdd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cdd6:	4dac      	ldr	r5, [pc, #688]	; (801d088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801cdd8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801cddc:	33ff      	adds	r3, #255	; 0xff
 801cdde:	42ab      	cmp	r3, r5
 801cde0:	f200 835e 	bhi.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cde4:	6862      	ldr	r2, [r4, #4]
 801cde6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801cdea:	33ff      	adds	r3, #255	; 0xff
 801cdec:	4283      	cmp	r3, r0
 801cdee:	f200 8357 	bhi.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cdf2:	69a1      	ldr	r1, [r4, #24]
 801cdf4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801cdf8:	33ff      	adds	r3, #255	; 0xff
 801cdfa:	4283      	cmp	r3, r0
 801cdfc:	f200 8350 	bhi.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ce00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ce02:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801ce06:	30ff      	adds	r0, #255	; 0xff
 801ce08:	42a8      	cmp	r0, r5
 801ce0a:	f200 8349 	bhi.w	801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ce0e:	428a      	cmp	r2, r1
 801ce10:	f280 8110 	bge.w	801d034 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801ce14:	429a      	cmp	r2, r3
 801ce16:	f300 8119 	bgt.w	801d04c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801ce1a:	4299      	cmp	r1, r3
 801ce1c:	f280 811d 	bge.w	801d05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801ce20:	2502      	movs	r5, #2
 801ce22:	2701      	movs	r7, #1
 801ce24:	46a9      	mov	r9, r5
 801ce26:	46b8      	mov	r8, r7
 801ce28:	f04f 0a00 	mov.w	sl, #0
 801ce2c:	4621      	mov	r1, r4
 801ce2e:	a849      	add	r0, sp, #292	; 0x124
 801ce30:	f003 fd1a 	bl	8020868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801ce34:	4622      	mov	r2, r4
 801ce36:	4653      	mov	r3, sl
 801ce38:	a949      	add	r1, sp, #292	; 0x124
 801ce3a:	f8cd 9000 	str.w	r9, [sp]
 801ce3e:	a819      	add	r0, sp, #100	; 0x64
 801ce40:	f003 fe42 	bl	8020ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ce44:	4622      	mov	r2, r4
 801ce46:	4653      	mov	r3, sl
 801ce48:	a949      	add	r1, sp, #292	; 0x124
 801ce4a:	f8cd 8000 	str.w	r8, [sp]
 801ce4e:	a829      	add	r0, sp, #164	; 0xa4
 801ce50:	f003 fe3a 	bl	8020ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ce54:	4643      	mov	r3, r8
 801ce56:	4622      	mov	r2, r4
 801ce58:	a949      	add	r1, sp, #292	; 0x124
 801ce5a:	f8cd 9000 	str.w	r9, [sp]
 801ce5e:	a839      	add	r0, sp, #228	; 0xe4
 801ce60:	f003 fe32 	bl	8020ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ce64:	42af      	cmp	r7, r5
 801ce66:	af12      	add	r7, sp, #72	; 0x48
 801ce68:	bfb7      	itett	lt
 801ce6a:	2300      	movlt	r3, #0
 801ce6c:	2301      	movge	r3, #1
 801ce6e:	ad29      	addlt	r5, sp, #164	; 0xa4
 801ce70:	ac19      	addlt	r4, sp, #100	; 0x64
 801ce72:	bfb1      	iteee	lt
 801ce74:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ce76:	ad19      	addge	r5, sp, #100	; 0x64
 801ce78:	930e      	strge	r3, [sp, #56]	; 0x38
 801ce7a:	ac29      	addge	r4, sp, #164	; 0xa4
 801ce7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ce82:	e887 0003 	stmia.w	r7, {r0, r1}
 801ce86:	b928      	cbnz	r0, 801ce94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801ce88:	4b80      	ldr	r3, [pc, #512]	; (801d08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801ce8a:	6818      	ldr	r0, [r3, #0]
 801ce8c:	6803      	ldr	r3, [r0, #0]
 801ce8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce90:	4798      	blx	r3
 801ce92:	6038      	str	r0, [r7, #0]
 801ce94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ce96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801ce9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ce9e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801cea0:	930c      	str	r3, [sp, #48]	; 0x30
 801cea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cea4:	6963      	ldr	r3, [r4, #20]
 801cea6:	440b      	add	r3, r1
 801cea8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801ceac:	4408      	add	r0, r1
 801ceae:	b200      	sxth	r0, r0
 801ceb0:	4283      	cmp	r3, r0
 801ceb2:	900d      	str	r0, [sp, #52]	; 0x34
 801ceb4:	f280 80dd 	bge.w	801d072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801ceb8:	428b      	cmp	r3, r1
 801ceba:	da08      	bge.n	801cece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cebc:	2a00      	cmp	r2, #0
 801cebe:	dd06      	ble.n	801cece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cec0:	1acb      	subs	r3, r1, r3
 801cec2:	429a      	cmp	r2, r3
 801cec4:	f2c0 80e4 	blt.w	801d090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	f300 80e2 	bgt.w	801d092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801cece:	6967      	ldr	r7, [r4, #20]
 801ced0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801ced4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ced6:	443b      	add	r3, r7
 801ced8:	461f      	mov	r7, r3
 801ceda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cedc:	1bdf      	subs	r7, r3, r7
 801cede:	4297      	cmp	r7, r2
 801cee0:	bfa8      	it	ge
 801cee2:	4617      	movge	r7, r2
 801cee4:	2f00      	cmp	r7, #0
 801cee6:	f340 8166 	ble.w	801d1b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801ceea:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801ceec:	6829      	ldr	r1, [r5, #0]
 801ceee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cef2:	f9bb 3000 	ldrsh.w	r3, [fp]
 801cef6:	4411      	add	r1, r2
 801cef8:	6820      	ldr	r0, [r4, #0]
 801cefa:	4299      	cmp	r1, r3
 801cefc:	dd1a      	ble.n	801cf34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801cefe:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801cf02:	4402      	add	r2, r0
 801cf04:	440b      	add	r3, r1
 801cf06:	b21b      	sxth	r3, r3
 801cf08:	429a      	cmp	r2, r3
 801cf0a:	dc13      	bgt.n	801cf34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801cf0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf0e:	a912      	add	r1, sp, #72	; 0x48
 801cf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf12:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	9206      	str	r2, [sp, #24]
 801cf18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf1a:	9500      	str	r5, [sp, #0]
 801cf1c:	9205      	str	r2, [sp, #20]
 801cf1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf20:	e9cd b203 	strd	fp, r2, [sp, #12]
 801cf24:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801cf26:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801cf2a:	aa49      	add	r2, sp, #292	; 0x124
 801cf2c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801cf30:	4623      	mov	r3, r4
 801cf32:	47c8      	blx	r9
 801cf34:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801cf38:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801cf3c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801cf40:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cf44:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801cf48:	68a1      	ldr	r1, [r4, #8]
 801cf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf4e:	ed94 6a08 	vldr	s12, [r4, #32]
 801cf52:	edd4 6a07 	vldr	s13, [r4, #28]
 801cf56:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801cf5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801cf5e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801cf62:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cf66:	edc4 6a07 	vstr	s13, [r4, #28]
 801cf6a:	441a      	add	r2, r3
 801cf6c:	6963      	ldr	r3, [r4, #20]
 801cf6e:	3301      	adds	r3, #1
 801cf70:	6022      	str	r2, [r4, #0]
 801cf72:	6163      	str	r3, [r4, #20]
 801cf74:	69a3      	ldr	r3, [r4, #24]
 801cf76:	3b01      	subs	r3, #1
 801cf78:	61a3      	str	r3, [r4, #24]
 801cf7a:	6923      	ldr	r3, [r4, #16]
 801cf7c:	440b      	add	r3, r1
 801cf7e:	68e1      	ldr	r1, [r4, #12]
 801cf80:	428b      	cmp	r3, r1
 801cf82:	6123      	str	r3, [r4, #16]
 801cf84:	db15      	blt.n	801cfb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801cf86:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801cf8a:	3201      	adds	r2, #1
 801cf8c:	1a5b      	subs	r3, r3, r1
 801cf8e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801cf92:	6022      	str	r2, [r4, #0]
 801cf94:	6123      	str	r3, [r4, #16]
 801cf96:	edc4 6a07 	vstr	s13, [r4, #28]
 801cf9a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801cf9e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801cfa2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801cfa6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801cfaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cfae:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801cfb2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801cfb6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801cfba:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801cfbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cfc2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801cfc6:	68a9      	ldr	r1, [r5, #8]
 801cfc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cfcc:	ed95 6a08 	vldr	s12, [r5, #32]
 801cfd0:	edd5 6a07 	vldr	s13, [r5, #28]
 801cfd4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801cfd8:	ee76 6a86 	vadd.f32	s13, s13, s12
 801cfdc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801cfe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cfe4:	edc5 6a07 	vstr	s13, [r5, #28]
 801cfe8:	441a      	add	r2, r3
 801cfea:	696b      	ldr	r3, [r5, #20]
 801cfec:	3301      	adds	r3, #1
 801cfee:	602a      	str	r2, [r5, #0]
 801cff0:	616b      	str	r3, [r5, #20]
 801cff2:	69ab      	ldr	r3, [r5, #24]
 801cff4:	3b01      	subs	r3, #1
 801cff6:	61ab      	str	r3, [r5, #24]
 801cff8:	692b      	ldr	r3, [r5, #16]
 801cffa:	440b      	add	r3, r1
 801cffc:	68e9      	ldr	r1, [r5, #12]
 801cffe:	428b      	cmp	r3, r1
 801d000:	612b      	str	r3, [r5, #16]
 801d002:	db15      	blt.n	801d030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801d004:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d008:	3201      	adds	r2, #1
 801d00a:	1a5b      	subs	r3, r3, r1
 801d00c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d010:	602a      	str	r2, [r5, #0]
 801d012:	612b      	str	r3, [r5, #16]
 801d014:	edc5 6a07 	vstr	s13, [r5, #28]
 801d018:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d01c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d020:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d024:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d028:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d02c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d030:	3f01      	subs	r7, #1
 801d032:	e757      	b.n	801cee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801d034:	4299      	cmp	r1, r3
 801d036:	dc13      	bgt.n	801d060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801d038:	429a      	cmp	r2, r3
 801d03a:	da14      	bge.n	801d066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801d03c:	2502      	movs	r5, #2
 801d03e:	2703      	movs	r7, #3
 801d040:	f04f 0800 	mov.w	r8, #0
 801d044:	46a9      	mov	r9, r5
 801d046:	f04f 0a01 	mov.w	sl, #1
 801d04a:	e6ef      	b.n	801ce2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d04c:	2501      	movs	r5, #1
 801d04e:	2700      	movs	r7, #0
 801d050:	46a9      	mov	r9, r5
 801d052:	46b8      	mov	r8, r7
 801d054:	f04f 0a02 	mov.w	sl, #2
 801d058:	e6e8      	b.n	801ce2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801d05a:	2501      	movs	r5, #1
 801d05c:	2702      	movs	r7, #2
 801d05e:	e6e1      	b.n	801ce24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801d060:	2500      	movs	r5, #0
 801d062:	2701      	movs	r7, #1
 801d064:	e7f4      	b.n	801d050 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801d066:	2702      	movs	r7, #2
 801d068:	2503      	movs	r5, #3
 801d06a:	f04f 0900 	mov.w	r9, #0
 801d06e:	46b8      	mov	r8, r7
 801d070:	e7e9      	b.n	801d046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801d072:	4613      	mov	r3, r2
 801d074:	e728      	b.n	801cec8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801d076:	bf00      	nop
 801d078:	2400d824 	.word	0x2400d824
 801d07c:	fffd8f01 	.word	0xfffd8f01
 801d080:	00027100 	.word	0x00027100
 801d084:	0004e1ff 	.word	0x0004e1ff
 801d088:	0004e1fe 	.word	0x0004e1fe
 801d08c:	2400d82c 	.word	0x2400d82c
 801d090:	4613      	mov	r3, r2
 801d092:	992b      	ldr	r1, [sp, #172]	; 0xac
 801d094:	469e      	mov	lr, r3
 801d096:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801d098:	469c      	mov	ip, r3
 801d09a:	9111      	str	r1, [sp, #68]	; 0x44
 801d09c:	f04f 0900 	mov.w	r9, #0
 801d0a0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801d0a4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801d0a8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801d0ac:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801d0b0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801d0b4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d0b8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801d0bc:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801d0c0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801d0c4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801d0c8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801d0cc:	f1bc 0f00 	cmp.w	ip, #0
 801d0d0:	d147      	bne.n	801d162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801d0d2:	eb03 0c07 	add.w	ip, r3, r7
 801d0d6:	1ad7      	subs	r7, r2, r3
 801d0d8:	f1b9 0f00 	cmp.w	r9, #0
 801d0dc:	d009      	beq.n	801d0f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801d0de:	9029      	str	r0, [sp, #164]	; 0xa4
 801d0e0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801d0e4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801d0e8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801d0ec:	912d      	str	r1, [sp, #180]	; 0xb4
 801d0ee:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801d0f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d0f4:	f04f 0800 	mov.w	r8, #0
 801d0f8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d0fc:	9111      	str	r1, [sp, #68]	; 0x44
 801d0fe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d102:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d106:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d10a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d10e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d112:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d116:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d11a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d11e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d122:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d126:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d12a:	f1be 0f00 	cmp.w	lr, #0
 801d12e:	d031      	beq.n	801d194 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801d130:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d132:	4450      	add	r0, sl
 801d134:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d138:	4431      	add	r1, r6
 801d13a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d13e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d142:	4549      	cmp	r1, r9
 801d144:	db08      	blt.n	801d158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801d146:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d14a:	3001      	adds	r0, #1
 801d14c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d150:	eba1 0109 	sub.w	r1, r1, r9
 801d154:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d158:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d15c:	f04f 0801 	mov.w	r8, #1
 801d160:	e7e3      	b.n	801d12a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801d162:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801d164:	4450      	add	r0, sl
 801d166:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d16a:	4431      	add	r1, r6
 801d16c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d170:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d174:	4541      	cmp	r1, r8
 801d176:	db08      	blt.n	801d18a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801d178:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d17c:	3001      	adds	r0, #1
 801d17e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d182:	eba1 0108 	sub.w	r1, r1, r8
 801d186:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d18a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d18e:	f04f 0901 	mov.w	r9, #1
 801d192:	e79b      	b.n	801d0cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d194:	449c      	add	ip, r3
 801d196:	1aff      	subs	r7, r7, r3
 801d198:	f1b8 0f00 	cmp.w	r8, #0
 801d19c:	d009      	beq.n	801d1b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d19e:	9019      	str	r0, [sp, #100]	; 0x64
 801d1a0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d1a4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d1a8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d1ac:	911d      	str	r1, [sp, #116]	; 0x74
 801d1ae:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d1b2:	1ad2      	subs	r2, r2, r3
 801d1b4:	e68b      	b.n	801cece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1b8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	f000 80d1 	beq.w	801d362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d1c0:	ad19      	add	r5, sp, #100	; 0x64
 801d1c2:	ac39      	add	r4, sp, #228	; 0xe4
 801d1c4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d1c6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d1ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d1ce:	930c      	str	r3, [sp, #48]	; 0x30
 801d1d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d1d2:	6963      	ldr	r3, [r4, #20]
 801d1d4:	440b      	add	r3, r1
 801d1d6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d1da:	4408      	add	r0, r1
 801d1dc:	b200      	sxth	r0, r0
 801d1de:	4283      	cmp	r3, r0
 801d1e0:	900d      	str	r0, [sp, #52]	; 0x34
 801d1e2:	f280 80c1 	bge.w	801d368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d1e6:	428b      	cmp	r3, r1
 801d1e8:	da08      	bge.n	801d1fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d1ea:	2a00      	cmp	r2, #0
 801d1ec:	dd06      	ble.n	801d1fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d1ee:	1acb      	subs	r3, r1, r3
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	f2c0 80bb 	blt.w	801d36c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	f300 80b9 	bgt.w	801d36e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d1fc:	6967      	ldr	r7, [r4, #20]
 801d1fe:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d204:	443b      	add	r3, r7
 801d206:	461f      	mov	r7, r3
 801d208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d20a:	1bdf      	subs	r7, r3, r7
 801d20c:	4297      	cmp	r7, r2
 801d20e:	bfa8      	it	ge
 801d210:	4617      	movge	r7, r2
 801d212:	2f00      	cmp	r7, #0
 801d214:	f340 813c 	ble.w	801d490 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d218:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d21a:	6829      	ldr	r1, [r5, #0]
 801d21c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d220:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d224:	4411      	add	r1, r2
 801d226:	6820      	ldr	r0, [r4, #0]
 801d228:	4299      	cmp	r1, r3
 801d22a:	dd1a      	ble.n	801d262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d22c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d230:	4402      	add	r2, r0
 801d232:	440b      	add	r3, r1
 801d234:	b21b      	sxth	r3, r3
 801d236:	429a      	cmp	r2, r3
 801d238:	dc13      	bgt.n	801d262 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d23a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d23c:	a912      	add	r1, sp, #72	; 0x48
 801d23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d240:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	9206      	str	r2, [sp, #24]
 801d246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d248:	9500      	str	r5, [sp, #0]
 801d24a:	9205      	str	r2, [sp, #20]
 801d24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d24e:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d252:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d254:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d258:	aa49      	add	r2, sp, #292	; 0x124
 801d25a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801d25e:	4623      	mov	r3, r4
 801d260:	47c8      	blx	r9
 801d262:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d266:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d26a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d272:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d276:	68a1      	ldr	r1, [r4, #8]
 801d278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d27c:	ed94 6a08 	vldr	s12, [r4, #32]
 801d280:	edd4 6a07 	vldr	s13, [r4, #28]
 801d284:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d288:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d28c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d290:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d294:	edc4 6a07 	vstr	s13, [r4, #28]
 801d298:	441a      	add	r2, r3
 801d29a:	6963      	ldr	r3, [r4, #20]
 801d29c:	3301      	adds	r3, #1
 801d29e:	6022      	str	r2, [r4, #0]
 801d2a0:	6163      	str	r3, [r4, #20]
 801d2a2:	69a3      	ldr	r3, [r4, #24]
 801d2a4:	3b01      	subs	r3, #1
 801d2a6:	61a3      	str	r3, [r4, #24]
 801d2a8:	6923      	ldr	r3, [r4, #16]
 801d2aa:	440b      	add	r3, r1
 801d2ac:	68e1      	ldr	r1, [r4, #12]
 801d2ae:	428b      	cmp	r3, r1
 801d2b0:	6123      	str	r3, [r4, #16]
 801d2b2:	db15      	blt.n	801d2e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d2b4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d2b8:	3201      	adds	r2, #1
 801d2ba:	1a5b      	subs	r3, r3, r1
 801d2bc:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d2c0:	6022      	str	r2, [r4, #0]
 801d2c2:	6123      	str	r3, [r4, #16]
 801d2c4:	edc4 6a07 	vstr	s13, [r4, #28]
 801d2c8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d2cc:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d2d0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d2d4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d2dc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d2e0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d2e4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d2e8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d2ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d2f0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d2f4:	68a9      	ldr	r1, [r5, #8]
 801d2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d2fa:	ed95 6a08 	vldr	s12, [r5, #32]
 801d2fe:	edd5 6a07 	vldr	s13, [r5, #28]
 801d302:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d306:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d30a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d30e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d312:	edc5 6a07 	vstr	s13, [r5, #28]
 801d316:	441a      	add	r2, r3
 801d318:	696b      	ldr	r3, [r5, #20]
 801d31a:	3301      	adds	r3, #1
 801d31c:	602a      	str	r2, [r5, #0]
 801d31e:	616b      	str	r3, [r5, #20]
 801d320:	69ab      	ldr	r3, [r5, #24]
 801d322:	3b01      	subs	r3, #1
 801d324:	61ab      	str	r3, [r5, #24]
 801d326:	692b      	ldr	r3, [r5, #16]
 801d328:	440b      	add	r3, r1
 801d32a:	68e9      	ldr	r1, [r5, #12]
 801d32c:	428b      	cmp	r3, r1
 801d32e:	612b      	str	r3, [r5, #16]
 801d330:	db15      	blt.n	801d35e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d332:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d336:	3201      	adds	r2, #1
 801d338:	1a5b      	subs	r3, r3, r1
 801d33a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d33e:	602a      	str	r2, [r5, #0]
 801d340:	612b      	str	r3, [r5, #16]
 801d342:	edc5 6a07 	vstr	s13, [r5, #28]
 801d346:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d34a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d34e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d352:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d356:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d35a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d35e:	3f01      	subs	r7, #1
 801d360:	e757      	b.n	801d212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d362:	ad39      	add	r5, sp, #228	; 0xe4
 801d364:	ac19      	add	r4, sp, #100	; 0x64
 801d366:	e72d      	b.n	801d1c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d368:	4613      	mov	r3, r2
 801d36a:	e744      	b.n	801d1f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d36c:	4613      	mov	r3, r2
 801d36e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801d370:	469e      	mov	lr, r3
 801d372:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801d376:	461f      	mov	r7, r3
 801d378:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801d37c:	f04f 0900 	mov.w	r9, #0
 801d380:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801d384:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801d388:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801d38c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801d390:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801d394:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801d396:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801d39a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801d39e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801d3a2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801d3a6:	960e      	str	r6, [sp, #56]	; 0x38
 801d3a8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801d3ac:	2f00      	cmp	r7, #0
 801d3ae:	d146      	bne.n	801d43e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d3b0:	449c      	add	ip, r3
 801d3b2:	1ad7      	subs	r7, r2, r3
 801d3b4:	f1b9 0f00 	cmp.w	r9, #0
 801d3b8:	d009      	beq.n	801d3ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d3ba:	9039      	str	r0, [sp, #228]	; 0xe4
 801d3bc:	913d      	str	r1, [sp, #244]	; 0xf4
 801d3be:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801d3c2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801d3c6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801d3ca:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801d3ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d3d0:	f04f 0800 	mov.w	r8, #0
 801d3d4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d3d8:	910e      	str	r1, [sp, #56]	; 0x38
 801d3da:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d3de:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d3e2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d3e6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d3ea:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d3ee:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d3f2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d3f6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d3fa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d3fe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d402:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d406:	f1be 0f00 	cmp.w	lr, #0
 801d40a:	d030      	beq.n	801d46e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d40c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d40e:	4450      	add	r0, sl
 801d410:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d414:	4431      	add	r1, r6
 801d416:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d41a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d41e:	4549      	cmp	r1, r9
 801d420:	db08      	blt.n	801d434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d422:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d426:	3001      	adds	r0, #1
 801d428:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d42c:	eba1 0109 	sub.w	r1, r1, r9
 801d430:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d434:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d438:	f04f 0801 	mov.w	r8, #1
 801d43c:	e7e3      	b.n	801d406 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d43e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d440:	4450      	add	r0, sl
 801d442:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d446:	4431      	add	r1, r6
 801d448:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d44c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d450:	4541      	cmp	r1, r8
 801d452:	db08      	blt.n	801d466 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d454:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d458:	3001      	adds	r0, #1
 801d45a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d45e:	eba1 0108 	sub.w	r1, r1, r8
 801d462:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d466:	3f01      	subs	r7, #1
 801d468:	f04f 0901 	mov.w	r9, #1
 801d46c:	e79e      	b.n	801d3ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801d46e:	449c      	add	ip, r3
 801d470:	1aff      	subs	r7, r7, r3
 801d472:	f1b8 0f00 	cmp.w	r8, #0
 801d476:	d009      	beq.n	801d48c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801d478:	9019      	str	r0, [sp, #100]	; 0x64
 801d47a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d47e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d482:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d486:	911d      	str	r1, [sp, #116]	; 0x74
 801d488:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d48c:	1ad2      	subs	r2, r2, r3
 801d48e:	e6b5      	b.n	801d1fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	b923      	cbnz	r3, 801d4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d496:	4b04      	ldr	r3, [pc, #16]	; (801d4a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801d498:	6818      	ldr	r0, [r3, #0]
 801d49a:	6803      	ldr	r3, [r0, #0]
 801d49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d49e:	4798      	blx	r3
 801d4a0:	b05b      	add	sp, #364	; 0x16c
 801d4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a6:	bf00      	nop
 801d4a8:	2400d82c 	.word	0x2400d82c

0801d4ac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801d4ac:	b570      	push	{r4, r5, r6, lr}
 801d4ae:	4604      	mov	r4, r0
 801d4b0:	2500      	movs	r5, #0
 801d4b2:	9804      	ldr	r0, [sp, #16]
 801d4b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d4b8:	8025      	strh	r5, [r4, #0]
 801d4ba:	6061      	str	r1, [r4, #4]
 801d4bc:	7223      	strb	r3, [r4, #8]
 801d4be:	7266      	strb	r6, [r4, #9]
 801d4c0:	60e0      	str	r0, [r4, #12]
 801d4c2:	8222      	strh	r2, [r4, #16]
 801d4c4:	8265      	strh	r5, [r4, #18]
 801d4c6:	82a5      	strh	r5, [r4, #20]
 801d4c8:	82e5      	strh	r5, [r4, #22]
 801d4ca:	8325      	strh	r5, [r4, #24]
 801d4cc:	8365      	strh	r5, [r4, #26]
 801d4ce:	83a5      	strh	r5, [r4, #28]
 801d4d0:	77a5      	strb	r5, [r4, #30]
 801d4d2:	b32e      	cbz	r6, 801d520 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d4d4:	6803      	ldr	r3, [r0, #0]
 801d4d6:	695b      	ldr	r3, [r3, #20]
 801d4d8:	4798      	blx	r3
 801d4da:	4606      	mov	r6, r0
 801d4dc:	b300      	cbz	r0, 801d520 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d4de:	68e0      	ldr	r0, [r4, #12]
 801d4e0:	4631      	mov	r1, r6
 801d4e2:	6803      	ldr	r3, [r0, #0]
 801d4e4:	68db      	ldr	r3, [r3, #12]
 801d4e6:	4798      	blx	r3
 801d4e8:	4605      	mov	r5, r0
 801d4ea:	b1c8      	cbz	r0, 801d520 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d4ec:	7b43      	ldrb	r3, [r0, #13]
 801d4ee:	7a82      	ldrb	r2, [r0, #10]
 801d4f0:	005b      	lsls	r3, r3, #1
 801d4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4f6:	4313      	orrs	r3, r2
 801d4f8:	83a3      	strh	r3, [r4, #28]
 801d4fa:	7a63      	ldrb	r3, [r4, #9]
 801d4fc:	2b04      	cmp	r3, #4
 801d4fe:	d10f      	bne.n	801d520 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d500:	68e0      	ldr	r0, [r4, #12]
 801d502:	462a      	mov	r2, r5
 801d504:	4631      	mov	r1, r6
 801d506:	6803      	ldr	r3, [r0, #0]
 801d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d50a:	4798      	blx	r3
 801d50c:	7b6b      	ldrb	r3, [r5, #13]
 801d50e:	005b      	lsls	r3, r3, #1
 801d510:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d514:	7aab      	ldrb	r3, [r5, #10]
 801d516:	4313      	orrs	r3, r2
 801d518:	4418      	add	r0, r3
 801d51a:	8ba3      	ldrh	r3, [r4, #28]
 801d51c:	4418      	add	r0, r3
 801d51e:	83a0      	strh	r0, [r4, #28]
 801d520:	4620      	mov	r0, r4
 801d522:	bd70      	pop	{r4, r5, r6, pc}

0801d524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d528:	2400      	movs	r4, #0
 801d52a:	b085      	sub	sp, #20
 801d52c:	4681      	mov	r9, r0
 801d52e:	4688      	mov	r8, r1
 801d530:	4692      	mov	sl, r2
 801d532:	469b      	mov	fp, r3
 801d534:	4627      	mov	r7, r4
 801d536:	4625      	mov	r5, r4
 801d538:	4626      	mov	r6, r4
 801d53a:	4554      	cmp	r4, sl
 801d53c:	da2a      	bge.n	801d594 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d53e:	2300      	movs	r3, #0
 801d540:	9303      	str	r3, [sp, #12]
 801d542:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d546:	429d      	cmp	r5, r3
 801d548:	d004      	beq.n	801d554 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801d54a:	f242 030b 	movw	r3, #8203	; 0x200b
 801d54e:	429d      	cmp	r5, r3
 801d550:	bf18      	it	ne
 801d552:	462f      	movne	r7, r5
 801d554:	ab03      	add	r3, sp, #12
 801d556:	4642      	mov	r2, r8
 801d558:	4659      	mov	r1, fp
 801d55a:	4648      	mov	r0, r9
 801d55c:	f002 ff9a 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d560:	4605      	mov	r5, r0
 801d562:	b1b8      	cbz	r0, 801d594 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d564:	280a      	cmp	r0, #10
 801d566:	d015      	beq.n	801d594 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d568:	9a03      	ldr	r2, [sp, #12]
 801d56a:	b18a      	cbz	r2, 801d590 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801d56c:	7b50      	ldrb	r0, [r2, #13]
 801d56e:	4639      	mov	r1, r7
 801d570:	7a93      	ldrb	r3, [r2, #10]
 801d572:	0040      	lsls	r0, r0, #1
 801d574:	8895      	ldrh	r5, [r2, #4]
 801d576:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d57a:	4303      	orrs	r3, r0
 801d57c:	4640      	mov	r0, r8
 801d57e:	9301      	str	r3, [sp, #4]
 801d580:	f8d8 3000 	ldr.w	r3, [r8]
 801d584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d586:	4798      	blx	r3
 801d588:	9b01      	ldr	r3, [sp, #4]
 801d58a:	4418      	add	r0, r3
 801d58c:	4406      	add	r6, r0
 801d58e:	b2b6      	uxth	r6, r6
 801d590:	3401      	adds	r4, #1
 801d592:	e7d2      	b.n	801d53a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801d594:	4630      	mov	r0, r6
 801d596:	b005      	add	sp, #20
 801d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d59c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801d59c:	2a02      	cmp	r2, #2
 801d59e:	b530      	push	{r4, r5, lr}
 801d5a0:	d011      	beq.n	801d5c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801d5a2:	2a03      	cmp	r2, #3
 801d5a4:	d01c      	beq.n	801d5e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801d5a6:	2a01      	cmp	r2, #1
 801d5a8:	d10c      	bne.n	801d5c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801d5aa:	888b      	ldrh	r3, [r1, #4]
 801d5ac:	8801      	ldrh	r1, [r0, #0]
 801d5ae:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801d5b2:	1a5b      	subs	r3, r3, r1
 801d5b4:	8844      	ldrh	r4, [r0, #2]
 801d5b6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d5ba:	1a9b      	subs	r3, r3, r2
 801d5bc:	8004      	strh	r4, [r0, #0]
 801d5be:	8081      	strh	r1, [r0, #4]
 801d5c0:	8043      	strh	r3, [r0, #2]
 801d5c2:	80c2      	strh	r2, [r0, #6]
 801d5c4:	bd30      	pop	{r4, r5, pc}
 801d5c6:	88cb      	ldrh	r3, [r1, #6]
 801d5c8:	8842      	ldrh	r2, [r0, #2]
 801d5ca:	1a9b      	subs	r3, r3, r2
 801d5cc:	88c2      	ldrh	r2, [r0, #6]
 801d5ce:	1a9b      	subs	r3, r3, r2
 801d5d0:	888a      	ldrh	r2, [r1, #4]
 801d5d2:	8801      	ldrh	r1, [r0, #0]
 801d5d4:	8043      	strh	r3, [r0, #2]
 801d5d6:	1a52      	subs	r2, r2, r1
 801d5d8:	8881      	ldrh	r1, [r0, #4]
 801d5da:	1a52      	subs	r2, r2, r1
 801d5dc:	8002      	strh	r2, [r0, #0]
 801d5de:	e7f1      	b.n	801d5c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801d5e0:	88cb      	ldrh	r3, [r1, #6]
 801d5e2:	8841      	ldrh	r1, [r0, #2]
 801d5e4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d5e8:	1a5b      	subs	r3, r3, r1
 801d5ea:	f9b0 5000 	ldrsh.w	r5, [r0]
 801d5ee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d5f2:	1a9b      	subs	r3, r3, r2
 801d5f4:	8045      	strh	r5, [r0, #2]
 801d5f6:	8082      	strh	r2, [r0, #4]
 801d5f8:	8003      	strh	r3, [r0, #0]
 801d5fa:	80c4      	strh	r4, [r0, #6]
 801d5fc:	e7e2      	b.n	801d5c4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801d5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801d5fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d602:	b09f      	sub	sp, #124	; 0x7c
 801d604:	9116      	str	r1, [sp, #88]	; 0x58
 801d606:	9317      	str	r3, [sp, #92]	; 0x5c
 801d608:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d60a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d60c:	8809      	ldrh	r1, [r1, #0]
 801d60e:	889b      	ldrh	r3, [r3, #4]
 801d610:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801d614:	440b      	add	r3, r1
 801d616:	9212      	str	r2, [sp, #72]	; 0x48
 801d618:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801d61c:	b21b      	sxth	r3, r3
 801d61e:	9011      	str	r0, [sp, #68]	; 0x44
 801d620:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801d624:	9310      	str	r3, [sp, #64]	; 0x40
 801d626:	f8d8 3000 	ldr.w	r3, [r8]
 801d62a:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801d62e:	7a59      	ldrb	r1, [r3, #9]
 801d630:	7a1b      	ldrb	r3, [r3, #8]
 801d632:	9114      	str	r1, [sp, #80]	; 0x50
 801d634:	9315      	str	r3, [sp, #84]	; 0x54
 801d636:	2a00      	cmp	r2, #0
 801d638:	d06a      	beq.n	801d710 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801d63a:	f898 3010 	ldrb.w	r3, [r8, #16]
 801d63e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d640:	2b04      	cmp	r3, #4
 801d642:	bf14      	ite	ne
 801d644:	2301      	movne	r3, #1
 801d646:	2302      	moveq	r3, #2
 801d648:	4413      	add	r3, r2
 801d64a:	f04f 0900 	mov.w	r9, #0
 801d64e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d650:	464c      	mov	r4, r9
 801d652:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d656:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801d65a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801d65e:	4293      	cmp	r3, r2
 801d660:	f280 808f 	bge.w	801d782 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801d664:	2300      	movs	r3, #0
 801d666:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801d66a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801d66e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d672:	429c      	cmp	r4, r3
 801d674:	d006      	beq.n	801d684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801d676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d678:	f242 020b 	movw	r2, #8203	; 0x200b
 801d67c:	4294      	cmp	r4, r2
 801d67e:	bf18      	it	ne
 801d680:	4623      	movne	r3, r4
 801d682:	930d      	str	r3, [sp, #52]	; 0x34
 801d684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d686:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801d688:	f8d8 2000 	ldr.w	r2, [r8]
 801d68c:	428b      	cmp	r3, r1
 801d68e:	db41      	blt.n	801d714 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801d690:	6813      	ldr	r3, [r2, #0]
 801d692:	4610      	mov	r0, r2
 801d694:	695b      	ldr	r3, [r3, #20]
 801d696:	4798      	blx	r3
 801d698:	4604      	mov	r4, r0
 801d69a:	f8d8 0000 	ldr.w	r0, [r8]
 801d69e:	aa1d      	add	r2, sp, #116	; 0x74
 801d6a0:	4621      	mov	r1, r4
 801d6a2:	6803      	ldr	r3, [r0, #0]
 801d6a4:	689e      	ldr	r6, [r3, #8]
 801d6a6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801d6aa:	47b0      	blx	r6
 801d6ac:	901c      	str	r0, [sp, #112]	; 0x70
 801d6ae:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d6b2:	429c      	cmp	r4, r3
 801d6b4:	f000 80ea 	beq.w	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d6b8:	f242 030b 	movw	r3, #8203	; 0x200b
 801d6bc:	429c      	cmp	r4, r3
 801d6be:	f000 80e5 	beq.w	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d6c2:	2c00      	cmp	r4, #0
 801d6c4:	f000 80f7 	beq.w	801d8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801d6c8:	2c0a      	cmp	r4, #10
 801d6ca:	d060      	beq.n	801d78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801d6cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d6ce:	b36a      	cbz	r2, 801d72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801d6d0:	8894      	ldrh	r4, [r2, #4]
 801d6d2:	f1bb 0f00 	cmp.w	fp, #0
 801d6d6:	d03b      	beq.n	801d750 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801d6d8:	f892 900d 	ldrb.w	r9, [r2, #13]
 801d6dc:	f1bb 0f01 	cmp.w	fp, #1
 801d6e0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d6e4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801d6e8:	f892 900a 	ldrb.w	r9, [r2, #10]
 801d6ec:	ea49 0903 	orr.w	r9, r9, r3
 801d6f0:	d134      	bne.n	801d75c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801d6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6f4:	eba5 0509 	sub.w	r5, r5, r9
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d14f      	bne.n	801d79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801d6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d6fe:	eb09 0305 	add.w	r3, r9, r5
 801d702:	4413      	add	r3, r2
 801d704:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d706:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d70a:	4293      	cmp	r3, r2
 801d70c:	da51      	bge.n	801d7b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801d70e:	e038      	b.n	801d782 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801d710:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d712:	e79a      	b.n	801d64a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801d714:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801d718:	4659      	mov	r1, fp
 801d71a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801d71c:	9301      	str	r3, [sp, #4]
 801d71e:	ab1d      	add	r3, sp, #116	; 0x74
 801d720:	9300      	str	r3, [sp, #0]
 801d722:	ab1c      	add	r3, sp, #112	; 0x70
 801d724:	f002 feff 	bl	8020526 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801d728:	4604      	mov	r4, r0
 801d72a:	e7c0      	b.n	801d6ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801d72c:	f8d8 0000 	ldr.w	r0, [r8]
 801d730:	6803      	ldr	r3, [r0, #0]
 801d732:	691b      	ldr	r3, [r3, #16]
 801d734:	4798      	blx	r3
 801d736:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d73a:	4298      	cmp	r0, r3
 801d73c:	f000 80a6 	beq.w	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d740:	f242 030b 	movw	r3, #8203	; 0x200b
 801d744:	4298      	cmp	r0, r3
 801d746:	f000 80a1 	beq.w	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d74a:	f1bb 0f00 	cmp.w	fp, #0
 801d74e:	d100      	bne.n	801d752 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801d750:	444d      	add	r5, r9
 801d752:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d754:	2a00      	cmp	r2, #0
 801d756:	d1bf      	bne.n	801d6d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801d758:	4691      	mov	r9, r2
 801d75a:	e097      	b.n	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d75e:	2b00      	cmp	r3, #0
 801d760:	f000 80ab 	beq.w	801d8ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801d764:	f1bb 0f00 	cmp.w	fp, #0
 801d768:	d118      	bne.n	801d79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801d76a:	f8d8 0000 	ldr.w	r0, [r8]
 801d76e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d770:	6803      	ldr	r3, [r0, #0]
 801d772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d774:	4798      	blx	r3
 801d776:	4405      	add	r5, r0
 801d778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d77a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d77c:	1aeb      	subs	r3, r5, r3
 801d77e:	4293      	cmp	r3, r2
 801d780:	dd17      	ble.n	801d7b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801d782:	2c00      	cmp	r4, #0
 801d784:	f000 8097 	beq.w	801d8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801d788:	2c0a      	cmp	r4, #10
 801d78a:	f040 8085 	bne.w	801d898 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801d78e:	240a      	movs	r4, #10
 801d790:	fab4 f084 	clz	r0, r4
 801d794:	0940      	lsrs	r0, r0, #5
 801d796:	b01f      	add	sp, #124	; 0x7c
 801d798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d79c:	f8d8 0000 	ldr.w	r0, [r8]
 801d7a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d7a2:	6803      	ldr	r3, [r0, #0]
 801d7a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d7a6:	4798      	blx	r3
 801d7a8:	f1bb 0f01 	cmp.w	fp, #1
 801d7ac:	eba5 0500 	sub.w	r5, r5, r0
 801d7b0:	d0a4      	beq.n	801d6fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801d7b2:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d7b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d7b6:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801d7ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d7be:	7b43      	ldrb	r3, [r0, #13]
 801d7c0:	4429      	add	r1, r5
 801d7c2:	015b      	lsls	r3, r3, #5
 801d7c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d7c8:	7983      	ldrb	r3, [r0, #6]
 801d7ca:	4313      	orrs	r3, r2
 801d7cc:	440b      	add	r3, r1
 801d7ce:	42b3      	cmp	r3, r6
 801d7d0:	db5c      	blt.n	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d7d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7d4:	4299      	cmp	r1, r3
 801d7d6:	da59      	bge.n	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d7d8:	f8d8 0000 	ldr.w	r0, [r8]
 801d7dc:	42ae      	cmp	r6, r5
 801d7de:	6803      	ldr	r3, [r0, #0]
 801d7e0:	bfcc      	ite	gt
 801d7e2:	1b76      	subgt	r6, r6, r5
 801d7e4:	2600      	movle	r6, #0
 801d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7e8:	bfc8      	it	gt
 801d7ea:	b2b6      	uxthgt	r6, r6
 801d7ec:	4798      	blx	r3
 801d7ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d7f0:	7b5a      	ldrb	r2, [r3, #13]
 801d7f2:	00d1      	lsls	r1, r2, #3
 801d7f4:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801d7f8:	7a19      	ldrb	r1, [r3, #8]
 801d7fa:	4339      	orrs	r1, r7
 801d7fc:	0657      	lsls	r7, r2, #25
 801d7fe:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801d800:	bf48      	it	mi
 801d802:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801d806:	4407      	add	r7, r0
 801d808:	bf48      	it	mi
 801d80a:	b209      	sxthmi	r1, r1
 801d80c:	1a7f      	subs	r7, r7, r1
 801d80e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d810:	b2bf      	uxth	r7, r7
 801d812:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801d816:	fa0f fa87 	sxth.w	sl, r7
 801d81a:	4551      	cmp	r1, sl
 801d81c:	dd3a      	ble.n	801d894 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801d81e:	0112      	lsls	r2, r2, #4
 801d820:	79d8      	ldrb	r0, [r3, #7]
 801d822:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d826:	4302      	orrs	r2, r0
 801d828:	4492      	add	sl, r2
 801d82a:	4551      	cmp	r1, sl
 801d82c:	dc2e      	bgt.n	801d88c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801d82e:	1bcf      	subs	r7, r1, r7
 801d830:	468a      	mov	sl, r1
 801d832:	b2bf      	uxth	r7, r7
 801d834:	9319      	str	r3, [sp, #100]	; 0x64
 801d836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d838:	f8d8 0000 	ldr.w	r0, [r8]
 801d83c:	681a      	ldr	r2, [r3, #0]
 801d83e:	6801      	ldr	r1, [r0, #0]
 801d840:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801d842:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d844:	9313      	str	r3, [sp, #76]	; 0x4c
 801d846:	9218      	str	r2, [sp, #96]	; 0x60
 801d848:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801d84a:	4788      	blx	r1
 801d84c:	f898 1006 	ldrb.w	r1, [r8, #6]
 801d850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d852:	910b      	str	r1, [sp, #44]	; 0x2c
 801d854:	f898 100e 	ldrb.w	r1, [r8, #14]
 801d858:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d85a:	910a      	str	r1, [sp, #40]	; 0x28
 801d85c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801d860:	9109      	str	r1, [sp, #36]	; 0x24
 801d862:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d866:	9305      	str	r3, [sp, #20]
 801d868:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d86a:	9206      	str	r2, [sp, #24]
 801d86c:	e9cd a601 	strd	sl, r6, [sp, #4]
 801d870:	442e      	add	r6, r5
 801d872:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d876:	b236      	sxth	r6, r6
 801d878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d87a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801d87e:	9600      	str	r6, [sp, #0]
 801d880:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d882:	681a      	ldr	r2, [r3, #0]
 801d884:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d886:	685b      	ldr	r3, [r3, #4]
 801d888:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d88a:	47b0      	blx	r6
 801d88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d88e:	3301      	adds	r3, #1
 801d890:	930e      	str	r3, [sp, #56]	; 0x38
 801d892:	e6e2      	b.n	801d65a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801d894:	2700      	movs	r7, #0
 801d896:	e7cd      	b.n	801d834 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801d898:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d89a:	3501      	adds	r5, #1
 801d89c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d89e:	429d      	cmp	r5, r3
 801d8a0:	f6bf af76 	bge.w	801d790 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801d8a4:	4659      	mov	r1, fp
 801d8a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801d8a8:	f7f7 fc3c 	bl	8015124 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	b110      	cbz	r0, 801d8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801d8b0:	280a      	cmp	r0, #10
 801d8b2:	d1f2      	bne.n	801d89a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801d8b4:	e76b      	b.n	801d78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801d8b6:	2400      	movs	r4, #0
 801d8b8:	e76a      	b.n	801d790 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801d8ba:	f1bb 0f00 	cmp.w	fp, #0
 801d8be:	f43f af5b 	beq.w	801d778 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801d8c2:	e776      	b.n	801d7b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801d8c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801d8c4:	b530      	push	{r4, r5, lr}
 801d8c6:	8a44      	ldrh	r4, [r0, #18]
 801d8c8:	8ac5      	ldrh	r5, [r0, #22]
 801d8ca:	82c3      	strh	r3, [r0, #22]
 801d8cc:	442c      	add	r4, r5
 801d8ce:	1ae4      	subs	r4, r4, r3
 801d8d0:	8b03      	ldrh	r3, [r0, #24]
 801d8d2:	8244      	strh	r4, [r0, #18]
 801d8d4:	8a84      	ldrh	r4, [r0, #20]
 801d8d6:	4422      	add	r2, r4
 801d8d8:	440c      	add	r4, r1
 801d8da:	1a59      	subs	r1, r3, r1
 801d8dc:	8342      	strh	r2, [r0, #26]
 801d8de:	8284      	strh	r4, [r0, #20]
 801d8e0:	8301      	strh	r1, [r0, #24]
 801d8e2:	bd30      	pop	{r4, r5, pc}

0801d8e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e8:	7a43      	ldrb	r3, [r0, #9]
 801d8ea:	b087      	sub	sp, #28
 801d8ec:	4604      	mov	r4, r0
 801d8ee:	460f      	mov	r7, r1
 801d8f0:	1eda      	subs	r2, r3, #3
 801d8f2:	b2d2      	uxtb	r2, r2
 801d8f4:	2900      	cmp	r1, #0
 801d8f6:	d036      	beq.n	801d966 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801d8f8:	2a01      	cmp	r2, #1
 801d8fa:	d932      	bls.n	801d962 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801d8fc:	1e58      	subs	r0, r3, #1
 801d8fe:	f1d0 0b00 	rsbs	fp, r0, #0
 801d902:	eb4b 0b00 	adc.w	fp, fp, r0
 801d906:	1e99      	subs	r1, r3, #2
 801d908:	424b      	negs	r3, r1
 801d90a:	414b      	adcs	r3, r1
 801d90c:	9303      	str	r3, [sp, #12]
 801d90e:	2300      	movs	r3, #0
 801d910:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801d914:	2500      	movs	r5, #0
 801d916:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801d91a:	46a9      	mov	r9, r5
 801d91c:	8265      	strh	r5, [r4, #18]
 801d91e:	82a5      	strh	r5, [r4, #20]
 801d920:	2300      	movs	r3, #0
 801d922:	9305      	str	r3, [sp, #20]
 801d924:	8823      	ldrh	r3, [r4, #0]
 801d926:	2b20      	cmp	r3, #32
 801d928:	d02b      	beq.n	801d982 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801d92a:	eba3 020a 	sub.w	r2, r3, sl
 801d92e:	4256      	negs	r6, r2
 801d930:	4156      	adcs	r6, r2
 801d932:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d936:	4293      	cmp	r3, r2
 801d938:	d004      	beq.n	801d944 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801d93a:	4553      	cmp	r3, sl
 801d93c:	bf16      	itet	ne
 801d93e:	4699      	movne	r9, r3
 801d940:	2601      	moveq	r6, #1
 801d942:	2600      	movne	r6, #0
 801d944:	ab05      	add	r3, sp, #20
 801d946:	68e2      	ldr	r2, [r4, #12]
 801d948:	7a21      	ldrb	r1, [r4, #8]
 801d94a:	6860      	ldr	r0, [r4, #4]
 801d94c:	f002 fda2 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d950:	8020      	strh	r0, [r4, #0]
 801d952:	b9c8      	cbnz	r0, 801d988 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801d954:	8b22      	ldrh	r2, [r4, #24]
 801d956:	2300      	movs	r3, #0
 801d958:	4611      	mov	r1, r2
 801d95a:	4620      	mov	r0, r4
 801d95c:	f7ff ffb2 	bl	801d8c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d960:	e066      	b.n	801da30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801d962:	468b      	mov	fp, r1
 801d964:	e7cf      	b.n	801d906 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801d966:	3b01      	subs	r3, #1
 801d968:	2a01      	cmp	r2, #1
 801d96a:	9103      	str	r1, [sp, #12]
 801d96c:	468b      	mov	fp, r1
 801d96e:	bf8c      	ite	hi
 801d970:	2200      	movhi	r2, #0
 801d972:	2201      	movls	r2, #1
 801d974:	2b01      	cmp	r3, #1
 801d976:	9202      	str	r2, [sp, #8]
 801d978:	bf8c      	ite	hi
 801d97a:	2300      	movhi	r3, #0
 801d97c:	2301      	movls	r3, #1
 801d97e:	9301      	str	r3, [sp, #4]
 801d980:	e7c8      	b.n	801d914 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801d982:	4699      	mov	r9, r3
 801d984:	2601      	movs	r6, #1
 801d986:	e7dd      	b.n	801d944 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801d988:	8ae3      	ldrh	r3, [r4, #22]
 801d98a:	280a      	cmp	r0, #10
 801d98c:	f103 0301 	add.w	r3, r3, #1
 801d990:	82e3      	strh	r3, [r4, #22]
 801d992:	d0df      	beq.n	801d954 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801d994:	9a05      	ldr	r2, [sp, #20]
 801d996:	bb42      	cbnz	r2, 801d9ea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801d998:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d99c:	4298      	cmp	r0, r3
 801d99e:	d001      	beq.n	801d9a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801d9a0:	4550      	cmp	r0, sl
 801d9a2:	d1bd      	bne.n	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d9a4:	8823      	ldrh	r3, [r4, #0]
 801d9a6:	8b21      	ldrh	r1, [r4, #24]
 801d9a8:	2b20      	cmp	r3, #32
 801d9aa:	d001      	beq.n	801d9b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801d9ac:	4553      	cmp	r3, sl
 801d9ae:	d131      	bne.n	801da14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801d9b0:	2e00      	cmp	r6, #0
 801d9b2:	bf0a      	itet	eq
 801d9b4:	460d      	moveq	r5, r1
 801d9b6:	4630      	movne	r0, r6
 801d9b8:	2001      	moveq	r0, #1
 801d9ba:	440a      	add	r2, r1
 801d9bc:	8aa3      	ldrh	r3, [r4, #20]
 801d9be:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801d9c2:	b292      	uxth	r2, r2
 801d9c4:	8322      	strh	r2, [r4, #24]
 801d9c6:	4413      	add	r3, r2
 801d9c8:	2f00      	cmp	r7, #0
 801d9ca:	d03a      	beq.n	801da42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801d9cc:	f1bb 0f00 	cmp.w	fp, #0
 801d9d0:	d102      	bne.n	801d9d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801d9d2:	9903      	ldr	r1, [sp, #12]
 801d9d4:	b301      	cbz	r1, 801da18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801d9d6:	b1f8      	cbz	r0, 801da18 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801d9d8:	8ba1      	ldrh	r1, [r4, #28]
 801d9da:	4419      	add	r1, r3
 801d9dc:	458c      	cmp	ip, r1
 801d9de:	da2a      	bge.n	801da36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801d9e0:	8a61      	ldrh	r1, [r4, #18]
 801d9e2:	b341      	cbz	r1, 801da36 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801d9e4:	4563      	cmp	r3, ip
 801d9e6:	dd9b      	ble.n	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d9e8:	e01c      	b.n	801da24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801d9ea:	8893      	ldrh	r3, [r2, #4]
 801d9ec:	4649      	mov	r1, r9
 801d9ee:	8023      	strh	r3, [r4, #0]
 801d9f0:	f892 800d 	ldrb.w	r8, [r2, #13]
 801d9f4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d9f8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801d9fc:	f892 800a 	ldrb.w	r8, [r2, #10]
 801da00:	ea48 0800 	orr.w	r8, r8, r0
 801da04:	68e0      	ldr	r0, [r4, #12]
 801da06:	6803      	ldr	r3, [r0, #0]
 801da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da0a:	4798      	blx	r3
 801da0c:	eb08 0200 	add.w	r2, r8, r0
 801da10:	b292      	uxth	r2, r2
 801da12:	e7c7      	b.n	801d9a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801da14:	2000      	movs	r0, #0
 801da16:	e7d0      	b.n	801d9ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801da18:	4563      	cmp	r3, ip
 801da1a:	dd81      	ble.n	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da1c:	8a63      	ldrh	r3, [r4, #18]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	f43f af7e 	beq.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da24:	2301      	movs	r3, #1
 801da26:	8ba2      	ldrh	r2, [r4, #28]
 801da28:	77a3      	strb	r3, [r4, #30]
 801da2a:	8b63      	ldrh	r3, [r4, #26]
 801da2c:	4413      	add	r3, r2
 801da2e:	8363      	strh	r3, [r4, #26]
 801da30:	b007      	add	sp, #28
 801da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da36:	2300      	movs	r3, #0
 801da38:	4611      	mov	r1, r2
 801da3a:	4620      	mov	r0, r4
 801da3c:	f7ff ff42 	bl	801d8c4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801da40:	e76e      	b.n	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da42:	4563      	cmp	r3, ip
 801da44:	dd14      	ble.n	801da70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801da46:	9b02      	ldr	r3, [sp, #8]
 801da48:	b113      	cbz	r3, 801da50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801da4a:	2301      	movs	r3, #1
 801da4c:	460a      	mov	r2, r1
 801da4e:	e783      	b.n	801d958 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801da50:	9b01      	ldr	r3, [sp, #4]
 801da52:	2b00      	cmp	r3, #0
 801da54:	f43f af64 	beq.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da58:	2800      	cmp	r0, #0
 801da5a:	f47f af61 	bne.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da5e:	b116      	cbz	r6, 801da66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801da60:	2301      	movs	r3, #1
 801da62:	462a      	mov	r2, r5
 801da64:	e779      	b.n	801d95a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801da66:	8a63      	ldrh	r3, [r4, #18]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	f43f af59 	beq.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da6e:	e7df      	b.n	801da30 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801da70:	2800      	cmp	r0, #0
 801da72:	f47f af55 	bne.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da76:	2e00      	cmp	r6, #0
 801da78:	f43f af52 	beq.w	801d920 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801da7c:	2301      	movs	r3, #1
 801da7e:	462a      	mov	r2, r5
 801da80:	e7db      	b.n	801da3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801da82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801da82:	b530      	push	{r4, r5, lr}
 801da84:	4605      	mov	r5, r0
 801da86:	b08b      	sub	sp, #44	; 0x2c
 801da88:	b191      	cbz	r1, 801dab0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801da8a:	2401      	movs	r4, #1
 801da8c:	e9cd 3100 	strd	r3, r1, [sp]
 801da90:	4613      	mov	r3, r2
 801da92:	4601      	mov	r1, r0
 801da94:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801da98:	a802      	add	r0, sp, #8
 801da9a:	f7ff fd07 	bl	801d4ac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801da9e:	2100      	movs	r1, #0
 801daa0:	a802      	add	r0, sp, #8
 801daa2:	f7ff ff1f 	bl	801d8e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801daa6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801daaa:	b163      	cbz	r3, 801dac6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801daac:	3401      	adds	r4, #1
 801daae:	e7f6      	b.n	801da9e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801dab0:	2401      	movs	r4, #1
 801dab2:	f002 fdbb 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dab6:	280a      	cmp	r0, #10
 801dab8:	4628      	mov	r0, r5
 801daba:	bf08      	it	eq
 801dabc:	3401      	addeq	r4, #1
 801dabe:	f002 fdb5 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dac2:	2800      	cmp	r0, #0
 801dac4:	d1f7      	bne.n	801dab6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801dac6:	b2a0      	uxth	r0, r4
 801dac8:	b00b      	add	sp, #44	; 0x2c
 801daca:	bd30      	pop	{r4, r5, pc}

0801dacc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801dacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dad0:	b0e5      	sub	sp, #404	; 0x194
 801dad2:	4689      	mov	r9, r1
 801dad4:	461c      	mov	r4, r3
 801dad6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801dada:	900a      	str	r0, [sp, #40]	; 0x28
 801dadc:	f1ba 0f00 	cmp.w	sl, #0
 801dae0:	f000 80b4 	beq.w	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	f000 80b0 	beq.w	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801daec:	7ba3      	ldrb	r3, [r4, #14]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	f000 80ac 	beq.w	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801daf4:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801daf8:	6810      	ldr	r0, [r2, #0]
 801dafa:	6851      	ldr	r1, [r2, #4]
 801dafc:	2500      	movs	r5, #0
 801dafe:	4643      	mov	r3, r8
 801db00:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801db04:	950f      	str	r5, [sp, #60]	; 0x3c
 801db06:	af19      	add	r7, sp, #100	; 0x64
 801db08:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801db0c:	79a2      	ldrb	r2, [r4, #6]
 801db0e:	c303      	stmia	r3!, {r0, r1}
 801db10:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801db14:	a90f      	add	r1, sp, #60	; 0x3c
 801db16:	4640      	mov	r0, r8
 801db18:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801db1c:	f7ff fd3e 	bl	801d59c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801db20:	a90f      	add	r1, sp, #60	; 0x3c
 801db22:	79a2      	ldrb	r2, [r4, #6]
 801db24:	4608      	mov	r0, r1
 801db26:	f7ff fd39 	bl	801d59c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801db2a:	4638      	mov	r0, r7
 801db2c:	f002 f951 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801db30:	6820      	ldr	r0, [r4, #0]
 801db32:	6803      	ldr	r3, [r0, #0]
 801db34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db36:	4798      	blx	r3
 801db38:	4606      	mov	r6, r0
 801db3a:	6820      	ldr	r0, [r4, #0]
 801db3c:	6803      	ldr	r3, [r0, #0]
 801db3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db40:	4798      	blx	r3
 801db42:	4633      	mov	r3, r6
 801db44:	9000      	str	r0, [sp, #0]
 801db46:	4651      	mov	r1, sl
 801db48:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801db4a:	4638      	mov	r0, r7
 801db4c:	f002 f99c 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db50:	7923      	ldrb	r3, [r4, #4]
 801db52:	6820      	ldr	r0, [r4, #0]
 801db54:	9308      	str	r3, [sp, #32]
 801db56:	6803      	ldr	r3, [r0, #0]
 801db58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db5a:	4798      	blx	r3
 801db5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db60:	181e      	adds	r6, r3, r0
 801db62:	42ae      	cmp	r6, r5
 801db64:	dd06      	ble.n	801db74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801db66:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801db6a:	4282      	cmp	r2, r0
 801db6c:	bfa4      	itt	ge
 801db6e:	189d      	addge	r5, r3, r2
 801db70:	fb95 f5f6 	sdivge	r5, r5, r6
 801db74:	a832      	add	r0, sp, #200	; 0xc8
 801db76:	f002 f92c 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801db7a:	7c23      	ldrb	r3, [r4, #16]
 801db7c:	b17b      	cbz	r3, 801db9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801db7e:	6820      	ldr	r0, [r4, #0]
 801db80:	6803      	ldr	r3, [r0, #0]
 801db82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db84:	4798      	blx	r3
 801db86:	4683      	mov	fp, r0
 801db88:	6820      	ldr	r0, [r4, #0]
 801db8a:	6803      	ldr	r3, [r0, #0]
 801db8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db8e:	4798      	blx	r3
 801db90:	465b      	mov	r3, fp
 801db92:	9000      	str	r0, [sp, #0]
 801db94:	4651      	mov	r1, sl
 801db96:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801db98:	a832      	add	r0, sp, #200	; 0xc8
 801db9a:	f002 f975 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801db9e:	7be1      	ldrb	r1, [r4, #15]
 801dba0:	a811      	add	r0, sp, #68	; 0x44
 801dba2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801dba6:	7963      	ldrb	r3, [r4, #5]
 801dba8:	1a52      	subs	r2, r2, r1
 801dbaa:	7c21      	ldrb	r1, [r4, #16]
 801dbac:	9101      	str	r1, [sp, #4]
 801dbae:	b292      	uxth	r2, r2
 801dbb0:	6821      	ldr	r1, [r4, #0]
 801dbb2:	9100      	str	r1, [sp, #0]
 801dbb4:	a932      	add	r1, sp, #200	; 0xc8
 801dbb6:	f7ff fc79 	bl	801d4ac <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801dbba:	7c23      	ldrb	r3, [r4, #16]
 801dbbc:	b9bb      	cbnz	r3, 801dbee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801dbbe:	fa1f fa86 	uxth.w	sl, r6
 801dbc2:	2d00      	cmp	r5, #0
 801dbc4:	dd45      	ble.n	801dc52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801dbc6:	4638      	mov	r0, r7
 801dbc8:	f002 fd30 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801dbcc:	2800      	cmp	r0, #0
 801dbce:	d03d      	beq.n	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801dbd0:	280a      	cmp	r0, #10
 801dbd2:	d1f6      	bne.n	801dbc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801dbd4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dbd8:	3d01      	subs	r5, #1
 801dbda:	4453      	add	r3, sl
 801dbdc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801dbe0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801dbe4:	eba3 030a 	sub.w	r3, r3, sl
 801dbe8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dbec:	e7e9      	b.n	801dbc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801dbee:	0073      	lsls	r3, r6, #1
 801dbf0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801dbf4:	fa1f fa86 	uxth.w	sl, r6
 801dbf8:	9309      	str	r3, [sp, #36]	; 0x24
 801dbfa:	2d00      	cmp	r5, #0
 801dbfc:	dd29      	ble.n	801dc52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801dbfe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801dc02:	a811      	add	r0, sp, #68	; 0x44
 801dc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc06:	428b      	cmp	r3, r1
 801dc08:	bfd4      	ite	le
 801dc0a:	2100      	movle	r1, #0
 801dc0c:	2101      	movgt	r1, #1
 801dc0e:	f7ff fe69 	bl	801d8e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801dc12:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801dc16:	3b01      	subs	r3, #1
 801dc18:	b29b      	uxth	r3, r3
 801dc1a:	455b      	cmp	r3, fp
 801dc1c:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc1e:	d005      	beq.n	801dc2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801dc20:	7961      	ldrb	r1, [r4, #5]
 801dc22:	4638      	mov	r0, r7
 801dc24:	f7f7 fa7e 	bl	8015124 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc2a:	e7f4      	b.n	801dc16 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801dc2c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dc30:	3d01      	subs	r5, #1
 801dc32:	4453      	add	r3, sl
 801dc34:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801dc38:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801dc3c:	eba3 030a 	sub.w	r3, r3, sl
 801dc40:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dc44:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d1d6      	bne.n	801dbfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801dc4c:	b065      	add	sp, #404	; 0x194
 801dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc52:	0075      	lsls	r5, r6, #1
 801dc54:	f04f 0a00 	mov.w	sl, #0
 801dc58:	7c23      	ldrb	r3, [r4, #16]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d066      	beq.n	801dd2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801dc5e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801dc62:	a811      	add	r0, sp, #68	; 0x44
 801dc64:	428d      	cmp	r5, r1
 801dc66:	bfd4      	ite	le
 801dc68:	2100      	movle	r1, #0
 801dc6a:	2101      	movgt	r1, #1
 801dc6c:	f7ff fe3a 	bl	801d8e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801dc70:	9b08      	ldr	r3, [sp, #32]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d055      	beq.n	801dd22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801dc76:	f894 b010 	ldrb.w	fp, [r4, #16]
 801dc7a:	2264      	movs	r2, #100	; 0x64
 801dc7c:	4639      	mov	r1, r7
 801dc7e:	a84b      	add	r0, sp, #300	; 0x12c
 801dc80:	f00e ff90 	bl	802cba4 <memcpy>
 801dc84:	f1bb 0f00 	cmp.w	fp, #0
 801dc88:	d058      	beq.n	801dd3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801dc8a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801dc8e:	7922      	ldrb	r2, [r4, #4]
 801dc90:	2a01      	cmp	r2, #1
 801dc92:	d13c      	bne.n	801dd0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801dc94:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801dc98:	1ac0      	subs	r0, r0, r3
 801dc9a:	2302      	movs	r3, #2
 801dc9c:	fb90 f0f3 	sdiv	r0, r0, r3
 801dca0:	b200      	sxth	r0, r0
 801dca2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801dca6:	4418      	add	r0, r3
 801dca8:	7c23      	ldrb	r3, [r4, #16]
 801dcaa:	b200      	sxth	r0, r0
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d03a      	beq.n	801dd26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801dcb0:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801dcb4:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801dcb8:	9000      	str	r0, [sp, #0]
 801dcba:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801dcbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dcc0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801dcc4:	e9cd a703 	strd	sl, r7, [sp, #12]
 801dcc8:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801dccc:	464a      	mov	r2, r9
 801dcce:	2100      	movs	r1, #0
 801dcd0:	f7ff fc95 	bl	801d5fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801dcd4:	2800      	cmp	r0, #0
 801dcd6:	d1b9      	bne.n	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801dcd8:	b2b2      	uxth	r2, r6
 801dcda:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801dcde:	4611      	mov	r1, r2
 801dce0:	4413      	add	r3, r2
 801dce2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801dce6:	b21b      	sxth	r3, r3
 801dce8:	1a52      	subs	r2, r2, r1
 801dcea:	7c21      	ldrb	r1, [r4, #16]
 801dcec:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801dcf0:	b212      	sxth	r2, r2
 801dcf2:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801dcf6:	b109      	cbz	r1, 801dcfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801dcf8:	42b2      	cmp	r2, r6
 801dcfa:	dba7      	blt.n	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801dcfc:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801dd00:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801dd04:	440a      	add	r2, r1
 801dd06:	b212      	sxth	r2, r2
 801dd08:	4293      	cmp	r3, r2
 801dd0a:	dda5      	ble.n	801dc58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801dd0c:	e79e      	b.n	801dc4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801dd0e:	2a02      	cmp	r2, #2
 801dd10:	d105      	bne.n	801dd1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801dd12:	7be2      	ldrb	r2, [r4, #15]
 801dd14:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801dd18:	1a80      	subs	r0, r0, r2
 801dd1a:	1ac0      	subs	r0, r0, r3
 801dd1c:	e7c0      	b.n	801dca0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801dd1e:	2000      	movs	r0, #0
 801dd20:	e7bf      	b.n	801dca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801dd22:	7be0      	ldrb	r0, [r4, #15]
 801dd24:	e7bd      	b.n	801dca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801dd26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dd2a:	e7c3      	b.n	801dcb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801dd2c:	9b08      	ldr	r3, [sp, #32]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d0f7      	beq.n	801dd22 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801dd32:	2264      	movs	r2, #100	; 0x64
 801dd34:	4639      	mov	r1, r7
 801dd36:	a84b      	add	r0, sp, #300	; 0x12c
 801dd38:	f00e ff34 	bl	802cba4 <memcpy>
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dd42:	6821      	ldr	r1, [r4, #0]
 801dd44:	a84b      	add	r0, sp, #300	; 0x12c
 801dd46:	f7ff fbed 	bl	801d524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801dd4a:	b203      	sxth	r3, r0
 801dd4c:	e79f      	b.n	801dc8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801dd4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801dd4e:	2b03      	cmp	r3, #3
 801dd50:	d818      	bhi.n	801dd84 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801dd52:	e8df f003 	tbb	[pc, r3]
 801dd56:	0602      	.short	0x0602
 801dd58:	130d      	.short	0x130d
 801dd5a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dd5e:	1850      	adds	r0, r2, r1
 801dd60:	4770      	bx	lr
 801dd62:	8803      	ldrh	r3, [r0, #0]
 801dd64:	8880      	ldrh	r0, [r0, #4]
 801dd66:	4418      	add	r0, r3
 801dd68:	b200      	sxth	r0, r0
 801dd6a:	1a80      	subs	r0, r0, r2
 801dd6c:	3801      	subs	r0, #1
 801dd6e:	4770      	bx	lr
 801dd70:	8803      	ldrh	r3, [r0, #0]
 801dd72:	8880      	ldrh	r0, [r0, #4]
 801dd74:	4418      	add	r0, r3
 801dd76:	b200      	sxth	r0, r0
 801dd78:	1a40      	subs	r0, r0, r1
 801dd7a:	e7f7      	b.n	801dd6c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801dd7c:	f9b0 0000 	ldrsh.w	r0, [r0]
 801dd80:	4410      	add	r0, r2
 801dd82:	4770      	bx	lr
 801dd84:	2000      	movs	r0, #0
 801dd86:	4770      	bx	lr

0801dd88 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801dd88:	2b03      	cmp	r3, #3
 801dd8a:	d817      	bhi.n	801ddbc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801dd8c:	e8df f003 	tbb	[pc, r3]
 801dd90:	10090602 	.word	0x10090602
 801dd94:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801dd98:	1850      	adds	r0, r2, r1
 801dd9a:	4770      	bx	lr
 801dd9c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801dda0:	e7fa      	b.n	801dd98 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801dda2:	8843      	ldrh	r3, [r0, #2]
 801dda4:	88c0      	ldrh	r0, [r0, #6]
 801dda6:	4418      	add	r0, r3
 801dda8:	b200      	sxth	r0, r0
 801ddaa:	1a80      	subs	r0, r0, r2
 801ddac:	3801      	subs	r0, #1
 801ddae:	4770      	bx	lr
 801ddb0:	8843      	ldrh	r3, [r0, #2]
 801ddb2:	88c0      	ldrh	r0, [r0, #6]
 801ddb4:	4418      	add	r0, r3
 801ddb6:	b200      	sxth	r0, r0
 801ddb8:	1a40      	subs	r0, r0, r1
 801ddba:	e7f7      	b.n	801ddac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ddbc:	2000      	movs	r0, #0
 801ddbe:	4770      	bx	lr

0801ddc0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ddc0:	4b01      	ldr	r3, [pc, #4]	; (801ddc8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	601a      	str	r2, [r3, #0]
 801ddc6:	4770      	bx	lr
 801ddc8:	2400d83c 	.word	0x2400d83c

0801ddcc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ddcc:	4603      	mov	r3, r0
 801ddce:	b1c8      	cbz	r0, 801de04 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ddd0:	0c02      	lsrs	r2, r0, #16
 801ddd2:	0412      	lsls	r2, r2, #16
 801ddd4:	b9a2      	cbnz	r2, 801de00 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ddd6:	0403      	lsls	r3, r0, #16
 801ddd8:	2010      	movs	r0, #16
 801ddda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ddde:	bf04      	itt	eq
 801dde0:	021b      	lsleq	r3, r3, #8
 801dde2:	3008      	addeq	r0, #8
 801dde4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801dde8:	bf04      	itt	eq
 801ddea:	011b      	lsleq	r3, r3, #4
 801ddec:	3004      	addeq	r0, #4
 801ddee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ddf2:	bf04      	itt	eq
 801ddf4:	009b      	lsleq	r3, r3, #2
 801ddf6:	3002      	addeq	r0, #2
 801ddf8:	2b00      	cmp	r3, #0
 801ddfa:	db04      	blt.n	801de06 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ddfc:	3001      	adds	r0, #1
 801ddfe:	4770      	bx	lr
 801de00:	2000      	movs	r0, #0
 801de02:	e7ea      	b.n	801ddda <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801de04:	2020      	movs	r0, #32
 801de06:	4770      	bx	lr

0801de08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de0c:	b087      	sub	sp, #28
 801de0e:	4681      	mov	r9, r0
 801de10:	4698      	mov	r8, r3
 801de12:	4610      	mov	r0, r2
 801de14:	460d      	mov	r5, r1
 801de16:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801de1a:	b981      	cbnz	r1, 801de3e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801de1c:	b14b      	cbz	r3, 801de32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801de1e:	460b      	mov	r3, r1
 801de20:	464a      	mov	r2, r9
 801de22:	4641      	mov	r1, r8
 801de24:	e9cd 4700 	strd	r4, r7, [sp]
 801de28:	f7ff ffee 	bl	801de08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801de2c:	b007      	add	sp, #28
 801de2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de32:	f04f 33ff 	mov.w	r3, #4294967295
 801de36:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801de3a:	603b      	str	r3, [r7, #0]
 801de3c:	e7f6      	b.n	801de2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801de3e:	fa32 fa01 	lsrs.w	sl, r2, r1
 801de42:	d107      	bne.n	801de54 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801de44:	fb09 f602 	mul.w	r6, r9, r2
 801de48:	fbb6 f0f4 	udiv	r0, r6, r4
 801de4c:	fb04 6610 	mls	r6, r4, r0, r6
 801de50:	603e      	str	r6, [r7, #0]
 801de52:	e7eb      	b.n	801de2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801de54:	2601      	movs	r6, #1
 801de56:	fa09 fb01 	lsl.w	fp, r9, r1
 801de5a:	408e      	lsls	r6, r1
 801de5c:	fbbb f3f4 	udiv	r3, fp, r4
 801de60:	3e01      	subs	r6, #1
 801de62:	9302      	str	r3, [sp, #8]
 801de64:	fb0a f303 	mul.w	r3, sl, r3
 801de68:	4016      	ands	r6, r2
 801de6a:	9303      	str	r3, [sp, #12]
 801de6c:	4630      	mov	r0, r6
 801de6e:	f7ff ffad 	bl	801ddcc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801de72:	464a      	mov	r2, r9
 801de74:	460b      	mov	r3, r1
 801de76:	4601      	mov	r1, r0
 801de78:	4630      	mov	r0, r6
 801de7a:	e9cd 4700 	strd	r4, r7, [sp]
 801de7e:	f7ff ffc3 	bl	801de08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801de82:	9b02      	ldr	r3, [sp, #8]
 801de84:	4606      	mov	r6, r0
 801de86:	eb05 0108 	add.w	r1, r5, r8
 801de8a:	fb04 bb13 	mls	fp, r4, r3, fp
 801de8e:	4658      	mov	r0, fp
 801de90:	f7ff ff9c 	bl	801ddcc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801de94:	ab05      	add	r3, sp, #20
 801de96:	465a      	mov	r2, fp
 801de98:	e9cd 4300 	strd	r4, r3, [sp]
 801de9c:	4603      	mov	r3, r0
 801de9e:	4650      	mov	r0, sl
 801dea0:	f7ff ffb2 	bl	801de08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801dea4:	6839      	ldr	r1, [r7, #0]
 801dea6:	9a05      	ldr	r2, [sp, #20]
 801dea8:	9b03      	ldr	r3, [sp, #12]
 801deaa:	4411      	add	r1, r2
 801deac:	fbb1 f2f4 	udiv	r2, r1, r4
 801deb0:	18d3      	adds	r3, r2, r3
 801deb2:	fb04 1412 	mls	r4, r4, r2, r1
 801deb6:	441e      	add	r6, r3
 801deb8:	603c      	str	r4, [r7, #0]
 801deba:	4430      	add	r0, r6
 801debc:	e7b6      	b.n	801de2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801debe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801debe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dec2:	b085      	sub	sp, #20
 801dec4:	f1b0 0900 	subs.w	r9, r0, #0
 801dec8:	461d      	mov	r5, r3
 801deca:	4617      	mov	r7, r2
 801decc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dece:	bfbb      	ittet	lt
 801ded0:	f1c9 0900 	rsblt	r9, r9, #0
 801ded4:	f04f 36ff 	movlt.w	r6, #4294967295
 801ded8:	2601      	movge	r6, #1
 801deda:	6823      	ldrlt	r3, [r4, #0]
 801dedc:	bfbc      	itt	lt
 801dede:	425b      	neglt	r3, r3
 801dee0:	6023      	strlt	r3, [r4, #0]
 801dee2:	2a00      	cmp	r2, #0
 801dee4:	da04      	bge.n	801def0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801dee6:	6823      	ldr	r3, [r4, #0]
 801dee8:	4257      	negs	r7, r2
 801deea:	4276      	negs	r6, r6
 801deec:	425b      	negs	r3, r3
 801deee:	6023      	str	r3, [r4, #0]
 801def0:	2d00      	cmp	r5, #0
 801def2:	4638      	mov	r0, r7
 801def4:	bfba      	itte	lt
 801def6:	426d      	neglt	r5, r5
 801def8:	f04f 38ff 	movlt.w	r8, #4294967295
 801defc:	f04f 0801 	movge.w	r8, #1
 801df00:	f7ff ff64 	bl	801ddcc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801df04:	ab03      	add	r3, sp, #12
 801df06:	463a      	mov	r2, r7
 801df08:	e9cd 5300 	strd	r5, r3, [sp]
 801df0c:	4603      	mov	r3, r0
 801df0e:	4648      	mov	r0, r9
 801df10:	f7ff ff7a 	bl	801de08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801df14:	6823      	ldr	r3, [r4, #0]
 801df16:	9a03      	ldr	r2, [sp, #12]
 801df18:	4546      	cmp	r6, r8
 801df1a:	441a      	add	r2, r3
 801df1c:	fb92 f3f5 	sdiv	r3, r2, r5
 801df20:	4418      	add	r0, r3
 801df22:	fb05 2313 	mls	r3, r5, r3, r2
 801df26:	bf18      	it	ne
 801df28:	4240      	negne	r0, r0
 801df2a:	1c72      	adds	r2, r6, #1
 801df2c:	6023      	str	r3, [r4, #0]
 801df2e:	d105      	bne.n	801df3c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801df30:	2b00      	cmp	r3, #0
 801df32:	f1c3 0200 	rsb	r2, r3, #0
 801df36:	db0b      	blt.n	801df50 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801df38:	6022      	str	r2, [r4, #0]
 801df3a:	e006      	b.n	801df4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801df3c:	2e01      	cmp	r6, #1
 801df3e:	d104      	bne.n	801df4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801df40:	2b00      	cmp	r3, #0
 801df42:	da02      	bge.n	801df4a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801df44:	442b      	add	r3, r5
 801df46:	3801      	subs	r0, #1
 801df48:	6023      	str	r3, [r4, #0]
 801df4a:	b005      	add	sp, #20
 801df4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df50:	3801      	subs	r0, #1
 801df52:	1b52      	subs	r2, r2, r5
 801df54:	e7f0      	b.n	801df38 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801df58 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801df58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801df5c:	4c1c      	ldr	r4, [pc, #112]	; (801dfd0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801df5e:	4605      	mov	r5, r0
 801df60:	6807      	ldr	r7, [r0, #0]
 801df62:	69a3      	ldr	r3, [r4, #24]
 801df64:	b92b      	cbnz	r3, 801df72 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801df66:	6840      	ldr	r0, [r0, #4]
 801df68:	e9c5 7000 	strd	r7, r0, [r5]
 801df6c:	b004      	add	sp, #16
 801df6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df72:	f04f 0802 	mov.w	r8, #2
 801df76:	68a2      	ldr	r2, [r4, #8]
 801df78:	ae04      	add	r6, sp, #16
 801df7a:	6820      	ldr	r0, [r4, #0]
 801df7c:	fb93 f1f8 	sdiv	r1, r3, r8
 801df80:	440a      	add	r2, r1
 801df82:	69e1      	ldr	r1, [r4, #28]
 801df84:	f846 2d04 	str.w	r2, [r6, #-4]!
 801df88:	463a      	mov	r2, r7
 801df8a:	9600      	str	r6, [sp, #0]
 801df8c:	f7ff ff97 	bl	801debe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801df90:	69a3      	ldr	r3, [r4, #24]
 801df92:	4607      	mov	r7, r0
 801df94:	686a      	ldr	r2, [r5, #4]
 801df96:	6a21      	ldr	r1, [r4, #32]
 801df98:	9600      	str	r6, [sp, #0]
 801df9a:	6860      	ldr	r0, [r4, #4]
 801df9c:	f7ff ff8f 	bl	801debe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801dfa0:	69a3      	ldr	r3, [r4, #24]
 801dfa2:	6962      	ldr	r2, [r4, #20]
 801dfa4:	4407      	add	r7, r0
 801dfa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801dfa8:	9600      	str	r6, [sp, #0]
 801dfaa:	68e0      	ldr	r0, [r4, #12]
 801dfac:	fb93 f8f8 	sdiv	r8, r3, r8
 801dfb0:	4442      	add	r2, r8
 801dfb2:	9203      	str	r2, [sp, #12]
 801dfb4:	682a      	ldr	r2, [r5, #0]
 801dfb6:	f7ff ff82 	bl	801debe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801dfba:	4680      	mov	r8, r0
 801dfbc:	9600      	str	r6, [sp, #0]
 801dfbe:	69a3      	ldr	r3, [r4, #24]
 801dfc0:	686a      	ldr	r2, [r5, #4]
 801dfc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801dfc4:	6920      	ldr	r0, [r4, #16]
 801dfc6:	f7ff ff7a 	bl	801debe <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801dfca:	4440      	add	r0, r8
 801dfcc:	e7cc      	b.n	801df68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801dfce:	bf00      	nop
 801dfd0:	2400d840 	.word	0x2400d840

0801dfd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801dfd4:	4b07      	ldr	r3, [pc, #28]	; (801dff4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801dfd6:	781b      	ldrb	r3, [r3, #0]
 801dfd8:	2b01      	cmp	r3, #1
 801dfda:	d109      	bne.n	801dff0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801dfdc:	f9b1 3000 	ldrsh.w	r3, [r1]
 801dfe0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dfe4:	8003      	strh	r3, [r0, #0]
 801dfe6:	4b04      	ldr	r3, [pc, #16]	; (801dff8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801dfe8:	881b      	ldrh	r3, [r3, #0]
 801dfea:	3b01      	subs	r3, #1
 801dfec:	1a9b      	subs	r3, r3, r2
 801dfee:	800b      	strh	r3, [r1, #0]
 801dff0:	4770      	bx	lr
 801dff2:	bf00      	nop
 801dff4:	2400d824 	.word	0x2400d824
 801dff8:	2400d820 	.word	0x2400d820

0801dffc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801dffc:	4b07      	ldr	r3, [pc, #28]	; (801e01c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801dffe:	b510      	push	{r4, lr}
 801e000:	781b      	ldrb	r3, [r3, #0]
 801e002:	2b01      	cmp	r3, #1
 801e004:	d108      	bne.n	801e018 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e006:	4b06      	ldr	r3, [pc, #24]	; (801e020 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e008:	880c      	ldrh	r4, [r1, #0]
 801e00a:	881b      	ldrh	r3, [r3, #0]
 801e00c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e010:	3b01      	subs	r3, #1
 801e012:	1b1b      	subs	r3, r3, r4
 801e014:	8003      	strh	r3, [r0, #0]
 801e016:	800a      	strh	r2, [r1, #0]
 801e018:	bd10      	pop	{r4, pc}
 801e01a:	bf00      	nop
 801e01c:	2400d824 	.word	0x2400d824
 801e020:	2400d820 	.word	0x2400d820

0801e024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801e024:	4b0a      	ldr	r3, [pc, #40]	; (801e050 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801e026:	b510      	push	{r4, lr}
 801e028:	781b      	ldrb	r3, [r3, #0]
 801e02a:	2b01      	cmp	r3, #1
 801e02c:	d10e      	bne.n	801e04c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801e02e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e032:	8843      	ldrh	r3, [r0, #2]
 801e034:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e038:	18ca      	adds	r2, r1, r3
 801e03a:	4b06      	ldr	r3, [pc, #24]	; (801e054 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801e03c:	8044      	strh	r4, [r0, #2]
 801e03e:	881b      	ldrh	r3, [r3, #0]
 801e040:	1a9b      	subs	r3, r3, r2
 801e042:	8003      	strh	r3, [r0, #0]
 801e044:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e048:	8081      	strh	r1, [r0, #4]
 801e04a:	80c3      	strh	r3, [r0, #6]
 801e04c:	bd10      	pop	{r4, pc}
 801e04e:	bf00      	nop
 801e050:	2400d824 	.word	0x2400d824
 801e054:	2400d820 	.word	0x2400d820

0801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e058:	4b08      	ldr	r3, [pc, #32]	; (801e07c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801e05a:	781b      	ldrb	r3, [r3, #0]
 801e05c:	2b01      	cmp	r3, #1
 801e05e:	d10c      	bne.n	801e07a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801e060:	8803      	ldrh	r3, [r0, #0]
 801e062:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801e066:	8842      	ldrh	r2, [r0, #2]
 801e068:	8002      	strh	r2, [r0, #0]
 801e06a:	185a      	adds	r2, r3, r1
 801e06c:	4b04      	ldr	r3, [pc, #16]	; (801e080 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801e06e:	881b      	ldrh	r3, [r3, #0]
 801e070:	1a9b      	subs	r3, r3, r2
 801e072:	8043      	strh	r3, [r0, #2]
 801e074:	88c3      	ldrh	r3, [r0, #6]
 801e076:	80c1      	strh	r1, [r0, #6]
 801e078:	8083      	strh	r3, [r0, #4]
 801e07a:	4770      	bx	lr
 801e07c:	2400d824 	.word	0x2400d824
 801e080:	2400d820 	.word	0x2400d820

0801e084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e084:	4b07      	ldr	r3, [pc, #28]	; (801e0a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e086:	b510      	push	{r4, lr}
 801e088:	781b      	ldrb	r3, [r3, #0]
 801e08a:	2b01      	cmp	r3, #1
 801e08c:	d108      	bne.n	801e0a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e08e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e092:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e096:	8003      	strh	r3, [r0, #0]
 801e098:	8893      	ldrh	r3, [r2, #4]
 801e09a:	3b01      	subs	r3, #1
 801e09c:	1b1b      	subs	r3, r3, r4
 801e09e:	800b      	strh	r3, [r1, #0]
 801e0a0:	bd10      	pop	{r4, pc}
 801e0a2:	bf00      	nop
 801e0a4:	2400d824 	.word	0x2400d824

0801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e0a8:	4b0a      	ldr	r3, [pc, #40]	; (801e0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e0aa:	460a      	mov	r2, r1
 801e0ac:	b510      	push	{r4, lr}
 801e0ae:	781b      	ldrb	r3, [r3, #0]
 801e0b0:	2b01      	cmp	r3, #1
 801e0b2:	d10d      	bne.n	801e0d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e0b4:	8881      	ldrh	r1, [r0, #4]
 801e0b6:	8803      	ldrh	r3, [r0, #0]
 801e0b8:	440b      	add	r3, r1
 801e0ba:	4601      	mov	r1, r0
 801e0bc:	3b01      	subs	r3, #1
 801e0be:	f821 3b02 	strh.w	r3, [r1], #2
 801e0c2:	f7ff ffdf 	bl	801e084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e0c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e0ca:	88c2      	ldrh	r2, [r0, #6]
 801e0cc:	80c3      	strh	r3, [r0, #6]
 801e0ce:	8082      	strh	r2, [r0, #4]
 801e0d0:	bd10      	pop	{r4, pc}
 801e0d2:	bf00      	nop
 801e0d4:	2400d824 	.word	0x2400d824

0801e0d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e0d8:	b570      	push	{r4, r5, r6, lr}
 801e0da:	2300      	movs	r3, #0
 801e0dc:	4c0a      	ldr	r4, [pc, #40]	; (801e108 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801e0de:	4605      	mov	r5, r0
 801e0e0:	460e      	mov	r6, r1
 801e0e2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e0e6:	6820      	ldr	r0, [r4, #0]
 801e0e8:	b110      	cbz	r0, 801e0f0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801e0ea:	6803      	ldr	r3, [r0, #0]
 801e0ec:	695b      	ldr	r3, [r3, #20]
 801e0ee:	4798      	blx	r3
 801e0f0:	6026      	str	r6, [r4, #0]
 801e0f2:	4630      	mov	r0, r6
 801e0f4:	6833      	ldr	r3, [r6, #0]
 801e0f6:	68db      	ldr	r3, [r3, #12]
 801e0f8:	4798      	blx	r3
 801e0fa:	682b      	ldr	r3, [r5, #0]
 801e0fc:	4628      	mov	r0, r5
 801e0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e104:	4718      	bx	r3
 801e106:	bf00      	nop
 801e108:	2400d870 	.word	0x2400d870

0801e10c <_ZN8touchgfx11Application13requestRedrawEv>:
 801e10c:	4b06      	ldr	r3, [pc, #24]	; (801e128 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801e10e:	2100      	movs	r1, #0
 801e110:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e114:	4b05      	ldr	r3, [pc, #20]	; (801e12c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801e116:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801e11a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e11e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801e122:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801e126:	4770      	bx	lr
 801e128:	2400d820 	.word	0x2400d820
 801e12c:	2400d822 	.word	0x2400d822

0801e130 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e130:	4b03      	ldr	r3, [pc, #12]	; (801e140 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e132:	6818      	ldr	r0, [r3, #0]
 801e134:	b110      	cbz	r0, 801e13c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e136:	6803      	ldr	r3, [r0, #0]
 801e138:	699b      	ldr	r3, [r3, #24]
 801e13a:	4718      	bx	r3
 801e13c:	4770      	bx	lr
 801e13e:	bf00      	nop
 801e140:	2400d870 	.word	0x2400d870

0801e144 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e144:	4770      	bx	lr
	...

0801e148 <_ZN8touchgfx11Application4drawEv>:
 801e148:	4b09      	ldr	r3, [pc, #36]	; (801e170 <_ZN8touchgfx11Application4drawEv+0x28>)
 801e14a:	b507      	push	{r0, r1, r2, lr}
 801e14c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e150:	2100      	movs	r1, #0
 801e152:	4b08      	ldr	r3, [pc, #32]	; (801e174 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801e154:	9100      	str	r1, [sp, #0]
 801e156:	4669      	mov	r1, sp
 801e158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e15c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e160:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e164:	6803      	ldr	r3, [r0, #0]
 801e166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e168:	4798      	blx	r3
 801e16a:	b003      	add	sp, #12
 801e16c:	f85d fb04 	ldr.w	pc, [sp], #4
 801e170:	2400d820 	.word	0x2400d820
 801e174:	2400d822 	.word	0x2400d822

0801e178 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e178:	4b03      	ldr	r3, [pc, #12]	; (801e188 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e17a:	6818      	ldr	r0, [r3, #0]
 801e17c:	b110      	cbz	r0, 801e184 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e17e:	6803      	ldr	r3, [r0, #0]
 801e180:	69db      	ldr	r3, [r3, #28]
 801e182:	4718      	bx	r3
 801e184:	4770      	bx	lr
 801e186:	bf00      	nop
 801e188:	2400d870 	.word	0x2400d870

0801e18c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e18c:	4b03      	ldr	r3, [pc, #12]	; (801e19c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e18e:	6818      	ldr	r0, [r3, #0]
 801e190:	b110      	cbz	r0, 801e198 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e192:	6803      	ldr	r3, [r0, #0]
 801e194:	6a1b      	ldr	r3, [r3, #32]
 801e196:	4718      	bx	r3
 801e198:	4770      	bx	lr
 801e19a:	bf00      	nop
 801e19c:	2400d870 	.word	0x2400d870

0801e1a0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801e1a6:	4770      	bx	lr

0801e1a8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e1a8:	4b03      	ldr	r3, [pc, #12]	; (801e1b8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e1aa:	6818      	ldr	r0, [r3, #0]
 801e1ac:	b110      	cbz	r0, 801e1b4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e1ae:	6803      	ldr	r3, [r0, #0]
 801e1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1b2:	4718      	bx	r3
 801e1b4:	4770      	bx	lr
 801e1b6:	bf00      	nop
 801e1b8:	2400d870 	.word	0x2400d870

0801e1bc <_ZN8touchgfx11Application15handleTickEventEv>:
 801e1bc:	b570      	push	{r4, r5, r6, lr}
 801e1be:	4d32      	ldr	r5, [pc, #200]	; (801e288 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801e1c0:	4604      	mov	r4, r0
 801e1c2:	6828      	ldr	r0, [r5, #0]
 801e1c4:	b140      	cbz	r0, 801e1d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e1c6:	7a03      	ldrb	r3, [r0, #8]
 801e1c8:	b933      	cbnz	r3, 801e1d8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e1ca:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801e1ce:	6803      	ldr	r3, [r0, #0]
 801e1d0:	689b      	ldr	r3, [r3, #8]
 801e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e1d6:	4718      	bx	r3
 801e1d8:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801e1dc:	b97b      	cbnz	r3, 801e1fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e1de:	b170      	cbz	r0, 801e1fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e1e0:	7a03      	ldrb	r3, [r0, #8]
 801e1e2:	b163      	cbz	r3, 801e1fe <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e1e4:	4b29      	ldr	r3, [pc, #164]	; (801e28c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801e1e6:	6818      	ldr	r0, [r3, #0]
 801e1e8:	b110      	cbz	r0, 801e1f0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801e1ea:	6803      	ldr	r3, [r0, #0]
 801e1ec:	691b      	ldr	r3, [r3, #16]
 801e1ee:	4798      	blx	r3
 801e1f0:	6828      	ldr	r0, [r5, #0]
 801e1f2:	6803      	ldr	r3, [r0, #0]
 801e1f4:	68db      	ldr	r3, [r3, #12]
 801e1f6:	4798      	blx	r3
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801e1fe:	2500      	movs	r5, #0
 801e200:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801e204:	42a8      	cmp	r0, r5
 801e206:	dd0c      	ble.n	801e222 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801e208:	1963      	adds	r3, r4, r5
 801e20a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e20e:	b132      	cbz	r2, 801e21e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801e210:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e214:	4413      	add	r3, r2
 801e216:	6858      	ldr	r0, [r3, #4]
 801e218:	6803      	ldr	r3, [r0, #0]
 801e21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e21c:	4798      	blx	r3
 801e21e:	3501      	adds	r5, #1
 801e220:	e7ee      	b.n	801e200 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e222:	2300      	movs	r3, #0
 801e224:	461a      	mov	r2, r3
 801e226:	4298      	cmp	r0, r3
 801e228:	d015      	beq.n	801e256 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801e22a:	18e1      	adds	r1, r4, r3
 801e22c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801e230:	b16d      	cbz	r5, 801e24e <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801e232:	429a      	cmp	r2, r3
 801e234:	d00a      	beq.n	801e24c <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801e236:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801e23a:	4431      	add	r1, r6
 801e23c:	684e      	ldr	r6, [r1, #4]
 801e23e:	b291      	uxth	r1, r2
 801e240:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e244:	604e      	str	r6, [r1, #4]
 801e246:	18a1      	adds	r1, r4, r2
 801e248:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e24c:	3201      	adds	r2, #1
 801e24e:	3301      	adds	r3, #1
 801e250:	e7e9      	b.n	801e226 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801e252:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801e256:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801e25a:	4295      	cmp	r5, r2
 801e25c:	dd0d      	ble.n	801e27a <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801e25e:	1e6b      	subs	r3, r5, #1
 801e260:	b29b      	uxth	r3, r3
 801e262:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801e266:	4618      	mov	r0, r3
 801e268:	3104      	adds	r1, #4
 801e26a:	4285      	cmp	r5, r0
 801e26c:	ddf1      	ble.n	801e252 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801e26e:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801e272:	3001      	adds	r0, #1
 801e274:	f841 6c04 	str.w	r6, [r1, #-4]
 801e278:	e7f7      	b.n	801e26a <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801e27a:	4b04      	ldr	r3, [pc, #16]	; (801e28c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801e27c:	6818      	ldr	r0, [r3, #0]
 801e27e:	b110      	cbz	r0, 801e286 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801e280:	6803      	ldr	r3, [r0, #0]
 801e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e284:	e7a5      	b.n	801e1d2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801e286:	bd70      	pop	{r4, r5, r6, pc}
 801e288:	2400d874 	.word	0x2400d874
 801e28c:	2400d870 	.word	0x2400d870

0801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801e290:	b510      	push	{r4, lr}
 801e292:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e296:	888a      	ldrh	r2, [r1, #4]
 801e298:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e29c:	4422      	add	r2, r4
 801e29e:	b212      	sxth	r2, r2
 801e2a0:	4293      	cmp	r3, r2
 801e2a2:	da15      	bge.n	801e2d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e2a4:	8882      	ldrh	r2, [r0, #4]
 801e2a6:	4413      	add	r3, r2
 801e2a8:	b21b      	sxth	r3, r3
 801e2aa:	429c      	cmp	r4, r3
 801e2ac:	da10      	bge.n	801e2d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e2ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801e2b2:	88c9      	ldrh	r1, [r1, #6]
 801e2b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e2b8:	4419      	add	r1, r3
 801e2ba:	b209      	sxth	r1, r1
 801e2bc:	428a      	cmp	r2, r1
 801e2be:	da07      	bge.n	801e2d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e2c0:	88c0      	ldrh	r0, [r0, #6]
 801e2c2:	4410      	add	r0, r2
 801e2c4:	b200      	sxth	r0, r0
 801e2c6:	4283      	cmp	r3, r0
 801e2c8:	bfac      	ite	ge
 801e2ca:	2000      	movge	r0, #0
 801e2cc:	2001      	movlt	r0, #1
 801e2ce:	bd10      	pop	{r4, pc}
 801e2d0:	2000      	movs	r0, #0
 801e2d2:	e7fc      	b.n	801e2ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801e2d4 <_ZN8touchgfx4Rect10restrictToEss>:
 801e2d4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	b510      	push	{r4, lr}
 801e2dc:	da04      	bge.n	801e2e8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801e2de:	8884      	ldrh	r4, [r0, #4]
 801e2e0:	4423      	add	r3, r4
 801e2e2:	8083      	strh	r3, [r0, #4]
 801e2e4:	2300      	movs	r3, #0
 801e2e6:	8003      	strh	r3, [r0, #0]
 801e2e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e2ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e2f0:	1b09      	subs	r1, r1, r4
 801e2f2:	428b      	cmp	r3, r1
 801e2f4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e2f8:	bfc8      	it	gt
 801e2fa:	8081      	strhgt	r1, [r0, #4]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	da04      	bge.n	801e30a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801e300:	88c1      	ldrh	r1, [r0, #6]
 801e302:	440b      	add	r3, r1
 801e304:	80c3      	strh	r3, [r0, #6]
 801e306:	2300      	movs	r3, #0
 801e308:	8043      	strh	r3, [r0, #2]
 801e30a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801e30e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e312:	1a52      	subs	r2, r2, r1
 801e314:	4293      	cmp	r3, r2
 801e316:	bfc8      	it	gt
 801e318:	80c2      	strhgt	r2, [r0, #6]
 801e31a:	bd10      	pop	{r4, pc}

0801e31c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801e31c:	4b10      	ldr	r3, [pc, #64]	; (801e360 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801e31e:	b510      	push	{r4, lr}
 801e320:	460c      	mov	r4, r1
 801e322:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e326:	4b0f      	ldr	r3, [pc, #60]	; (801e364 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801e328:	4620      	mov	r0, r4
 801e32a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e32e:	f7ff ffd1 	bl	801e2d4 <_ZN8touchgfx4Rect10restrictToEss>
 801e332:	4b0d      	ldr	r3, [pc, #52]	; (801e368 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801e334:	6818      	ldr	r0, [r3, #0]
 801e336:	b190      	cbz	r0, 801e35e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801e338:	6803      	ldr	r3, [r0, #0]
 801e33a:	4621      	mov	r1, r4
 801e33c:	689b      	ldr	r3, [r3, #8]
 801e33e:	4798      	blx	r3
 801e340:	4b0a      	ldr	r3, [pc, #40]	; (801e36c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801e342:	6818      	ldr	r0, [r3, #0]
 801e344:	b118      	cbz	r0, 801e34e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801e346:	6803      	ldr	r3, [r0, #0]
 801e348:	4621      	mov	r1, r4
 801e34a:	689b      	ldr	r3, [r3, #8]
 801e34c:	4798      	blx	r3
 801e34e:	4b08      	ldr	r3, [pc, #32]	; (801e370 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801e350:	4621      	mov	r1, r4
 801e352:	6818      	ldr	r0, [r3, #0]
 801e354:	6803      	ldr	r3, [r0, #0]
 801e356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e35a:	69db      	ldr	r3, [r3, #28]
 801e35c:	4718      	bx	r3
 801e35e:	bd10      	pop	{r4, pc}
 801e360:	2400d822 	.word	0x2400d822
 801e364:	2400d820 	.word	0x2400d820
 801e368:	2400d870 	.word	0x2400d870
 801e36c:	2400d86c 	.word	0x2400d86c
 801e370:	2400d82c 	.word	0x2400d82c

0801e374 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e376:	4606      	mov	r6, r0
 801e378:	4608      	mov	r0, r1
 801e37a:	460f      	mov	r7, r1
 801e37c:	f7fa fa1b 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e380:	b9e8      	cbnz	r0, 801e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e382:	f9b7 5000 	ldrsh.w	r5, [r7]
 801e386:	f9b6 4000 	ldrsh.w	r4, [r6]
 801e38a:	42a5      	cmp	r5, r4
 801e38c:	db17      	blt.n	801e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e38e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e392:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801e396:	429a      	cmp	r2, r3
 801e398:	db11      	blt.n	801e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e39a:	88b9      	ldrh	r1, [r7, #4]
 801e39c:	440d      	add	r5, r1
 801e39e:	88b1      	ldrh	r1, [r6, #4]
 801e3a0:	440c      	add	r4, r1
 801e3a2:	b22d      	sxth	r5, r5
 801e3a4:	b224      	sxth	r4, r4
 801e3a6:	42a5      	cmp	r5, r4
 801e3a8:	dc09      	bgt.n	801e3be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e3aa:	88f8      	ldrh	r0, [r7, #6]
 801e3ac:	4410      	add	r0, r2
 801e3ae:	88f2      	ldrh	r2, [r6, #6]
 801e3b0:	4413      	add	r3, r2
 801e3b2:	b200      	sxth	r0, r0
 801e3b4:	b21b      	sxth	r3, r3
 801e3b6:	4298      	cmp	r0, r3
 801e3b8:	bfcc      	ite	gt
 801e3ba:	2000      	movgt	r0, #0
 801e3bc:	2001      	movle	r0, #1
 801e3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e3c0 <_ZN8touchgfx11Application11getInstanceEv>:
 801e3c0:	4b01      	ldr	r3, [pc, #4]	; (801e3c8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e3c2:	6818      	ldr	r0, [r3, #0]
 801e3c4:	4770      	bx	lr
 801e3c6:	bf00      	nop
 801e3c8:	2400d880 	.word	0x2400d880

0801e3cc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801e3cc:	b570      	push	{r4, r5, r6, lr}
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801e3d4:	1d04      	adds	r4, r0, #4
 801e3d6:	b295      	uxth	r5, r2
 801e3d8:	429d      	cmp	r5, r3
 801e3da:	d20e      	bcs.n	801e3fa <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801e3dc:	f854 6b04 	ldr.w	r6, [r4], #4
 801e3e0:	4615      	mov	r5, r2
 801e3e2:	3201      	adds	r2, #1
 801e3e4:	428e      	cmp	r6, r1
 801e3e6:	d1f6      	bne.n	801e3d6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801e3e8:	4428      	add	r0, r5
 801e3ea:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801e3ee:	2bff      	cmp	r3, #255	; 0xff
 801e3f0:	d002      	beq.n	801e3f8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801e3f2:	3301      	adds	r3, #1
 801e3f4:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801e3f8:	bd70      	pop	{r4, r5, r6, pc}
 801e3fa:	18c2      	adds	r2, r0, r3
 801e3fc:	2b20      	cmp	r3, #32
 801e3fe:	f04f 0401 	mov.w	r4, #1
 801e402:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801e406:	bf1f      	itttt	ne
 801e408:	191a      	addne	r2, r3, r4
 801e40a:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 801e40e:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 801e412:	6041      	strne	r1, [r0, #4]
 801e414:	e7f0      	b.n	801e3f8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

0801e416 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801e416:	b570      	push	{r4, r5, r6, lr}
 801e418:	2300      	movs	r3, #0
 801e41a:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801e41e:	1d04      	adds	r4, r0, #4
 801e420:	b29a      	uxth	r2, r3
 801e422:	4296      	cmp	r6, r2
 801e424:	d90a      	bls.n	801e43c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801e426:	f854 2b04 	ldr.w	r2, [r4], #4
 801e42a:	428a      	cmp	r2, r1
 801e42c:	d107      	bne.n	801e43e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e42e:	18c5      	adds	r5, r0, r3
 801e430:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801e434:	b11a      	cbz	r2, 801e43e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801e436:	3a01      	subs	r2, #1
 801e438:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801e43c:	bd70      	pop	{r4, r5, r6, pc}
 801e43e:	3301      	adds	r3, #1
 801e440:	e7ee      	b.n	801e420 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801e442 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e442:	2300      	movs	r3, #0
 801e444:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e448:	30a8      	adds	r0, #168	; 0xa8
 801e44a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e44e:	f802 3b01 	strb.w	r3, [r2], #1
 801e452:	4282      	cmp	r2, r0
 801e454:	d1fb      	bne.n	801e44e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e456:	4770      	bx	lr

0801e458 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e458:	4603      	mov	r3, r0
 801e45a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e45e:	2200      	movs	r2, #0
 801e460:	801a      	strh	r2, [r3, #0]
 801e462:	3308      	adds	r3, #8
 801e464:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e468:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e46c:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e470:	428b      	cmp	r3, r1
 801e472:	d1f5      	bne.n	801e460 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e474:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e478:	4770      	bx	lr
	...

0801e47c <_ZN8touchgfx11ApplicationC1Ev>:
 801e47c:	b570      	push	{r4, r5, r6, lr}
 801e47e:	4b19      	ldr	r3, [pc, #100]	; (801e4e4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e480:	2500      	movs	r5, #0
 801e482:	4604      	mov	r4, r0
 801e484:	30a8      	adds	r0, #168	; 0xa8
 801e486:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e48a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e48e:	f7ff ffe3 	bl	801e458 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e492:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e496:	f7ff ffdf 	bl	801e458 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e49a:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801e49e:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801e4a2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801e4a6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801e4aa:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801e4ae:	490e      	ldr	r1, [pc, #56]	; (801e4e8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e4b0:	480e      	ldr	r0, [pc, #56]	; (801e4ec <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e4b2:	f00d feb3 	bl	802c21c <CRC_Lock>
 801e4b6:	4e0e      	ldr	r6, [pc, #56]	; (801e4f0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e4b8:	4b0e      	ldr	r3, [pc, #56]	; (801e4f4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801e4ba:	b158      	cbz	r0, 801e4d4 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801e4bc:	801d      	strh	r5, [r3, #0]
 801e4be:	2300      	movs	r3, #0
 801e4c0:	4a0d      	ldr	r2, [pc, #52]	; (801e4f8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801e4c2:	4620      	mov	r0, r4
 801e4c4:	6013      	str	r3, [r2, #0]
 801e4c6:	4a0d      	ldr	r2, [pc, #52]	; (801e4fc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801e4c8:	6033      	str	r3, [r6, #0]
 801e4ca:	6013      	str	r3, [r2, #0]
 801e4cc:	f7ff ffb9 	bl	801e442 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	bd70      	pop	{r4, r5, r6, pc}
 801e4d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e4d8:	2002      	movs	r0, #2
 801e4da:	801a      	strh	r2, [r3, #0]
 801e4dc:	6030      	str	r0, [r6, #0]
 801e4de:	f001 facb 	bl	801fa78 <_ZN8touchgfx6Screen4drawEv>
 801e4e2:	e7ec      	b.n	801e4be <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801e4e4:	08030794 	.word	0x08030794
 801e4e8:	b5e8b5cd 	.word	0xb5e8b5cd
 801e4ec:	f407a5c2 	.word	0xf407a5c2
 801e4f0:	2400d870 	.word	0x2400d870
 801e4f4:	24000584 	.word	0x24000584
 801e4f8:	2400d880 	.word	0x2400d880
 801e4fc:	2400d874 	.word	0x2400d874

0801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e500:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801e504:	3b01      	subs	r3, #1
 801e506:	b29b      	uxth	r3, r3
 801e508:	428b      	cmp	r3, r1
 801e50a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801e50e:	b510      	push	{r4, lr}
 801e510:	d908      	bls.n	801e524 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801e512:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801e516:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801e51a:	681a      	ldr	r2, [r3, #0]
 801e51c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801e520:	685a      	ldr	r2, [r3, #4]
 801e522:	6062      	str	r2, [r4, #4]
 801e524:	bd10      	pop	{r4, pc}
	...

0801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e52c:	b08f      	sub	sp, #60	; 0x3c
 801e52e:	4b94      	ldr	r3, [pc, #592]	; (801e780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801e530:	4683      	mov	fp, r0
 801e532:	ac0a      	add	r4, sp, #40	; 0x28
 801e534:	e884 0006 	stmia.w	r4, {r1, r2}
 801e538:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e53c:	4620      	mov	r0, r4
 801e53e:	4b91      	ldr	r3, [pc, #580]	; (801e784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801e540:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e544:	f7ff fec6 	bl	801e2d4 <_ZN8touchgfx4Rect10restrictToEss>
 801e548:	4620      	mov	r0, r4
 801e54a:	f7fa f934 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e54e:	2800      	cmp	r0, #0
 801e550:	d16a      	bne.n	801e628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e552:	9403      	str	r4, [sp, #12]
 801e554:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801e558:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801e55c:	2400      	movs	r4, #0
 801e55e:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801e562:	9301      	str	r3, [sp, #4]
 801e564:	36a0      	adds	r6, #160	; 0xa0
 801e566:	42a5      	cmp	r5, r4
 801e568:	d00d      	beq.n	801e586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801e56a:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801e56e:	9803      	ldr	r0, [sp, #12]
 801e570:	f7ff ff00 	bl	801e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e574:	b128      	cbz	r0, 801e582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801e576:	1e69      	subs	r1, r5, #1
 801e578:	9801      	ldr	r0, [sp, #4]
 801e57a:	1b09      	subs	r1, r1, r4
 801e57c:	b289      	uxth	r1, r1
 801e57e:	f7ff ffbf 	bl	801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e582:	3401      	adds	r4, #1
 801e584:	e7ef      	b.n	801e566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801e586:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801e58a:	1e7b      	subs	r3, r7, #1
 801e58c:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801e590:	9704      	str	r7, [sp, #16]
 801e592:	9302      	str	r3, [sp, #8]
 801e594:	2400      	movs	r4, #0
 801e596:	4655      	mov	r5, sl
 801e598:	9705      	str	r7, [sp, #20]
 801e59a:	4626      	mov	r6, r4
 801e59c:	9b05      	ldr	r3, [sp, #20]
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d078      	beq.n	801e694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801e5a2:	9903      	ldr	r1, [sp, #12]
 801e5a4:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801e5a8:	f7ff fe72 	bl	801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e5ac:	b360      	cbz	r0, 801e608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e5ae:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801e5b2:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801e5b6:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801e5ba:	45e6      	cmp	lr, ip
 801e5bc:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801e5c0:	db35      	blt.n	801e62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e5c2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e5c6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801e5ca:	4472      	add	r2, lr
 801e5cc:	4463      	add	r3, ip
 801e5ce:	b212      	sxth	r2, r2
 801e5d0:	b21b      	sxth	r3, r3
 801e5d2:	429a      	cmp	r2, r3
 801e5d4:	dc2b      	bgt.n	801e62e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e5d6:	fa1f f288 	uxth.w	r2, r8
 801e5da:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801e5de:	45c1      	cmp	r9, r8
 801e5e0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e5e4:	4413      	add	r3, r2
 801e5e6:	fa1f fc89 	uxth.w	ip, r9
 801e5ea:	b29b      	uxth	r3, r3
 801e5ec:	fa0f fe83 	sxth.w	lr, r3
 801e5f0:	db0f      	blt.n	801e612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801e5f2:	eba3 030c 	sub.w	r3, r3, ip
 801e5f6:	1ac9      	subs	r1, r1, r3
 801e5f8:	b209      	sxth	r1, r1
 801e5fa:	2900      	cmp	r1, #0
 801e5fc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e600:	dd12      	ble.n	801e628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e602:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801e606:	4604      	mov	r4, r0
 801e608:	9b05      	ldr	r3, [sp, #20]
 801e60a:	3d08      	subs	r5, #8
 801e60c:	3b01      	subs	r3, #1
 801e60e:	9305      	str	r3, [sp, #20]
 801e610:	e7c4      	b.n	801e59c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801e612:	4461      	add	r1, ip
 801e614:	b209      	sxth	r1, r1
 801e616:	4571      	cmp	r1, lr
 801e618:	dc3a      	bgt.n	801e690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e61a:	eba2 020c 	sub.w	r2, r2, ip
 801e61e:	b212      	sxth	r2, r2
 801e620:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801e624:	2a00      	cmp	r2, #0
 801e626:	dcee      	bgt.n	801e606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e628:	b00f      	add	sp, #60	; 0x3c
 801e62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e62e:	45c1      	cmp	r9, r8
 801e630:	db2e      	blt.n	801e690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e632:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801e636:	4499      	add	r9, r3
 801e638:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801e63c:	4498      	add	r8, r3
 801e63e:	fa0f f989 	sxth.w	r9, r9
 801e642:	fa0f f888 	sxth.w	r8, r8
 801e646:	45c1      	cmp	r9, r8
 801e648:	dc22      	bgt.n	801e690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e64a:	fa1f f28c 	uxth.w	r2, ip
 801e64e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801e652:	45e6      	cmp	lr, ip
 801e654:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e658:	4413      	add	r3, r2
 801e65a:	fa1f f88e 	uxth.w	r8, lr
 801e65e:	b29b      	uxth	r3, r3
 801e660:	fa0f f983 	sxth.w	r9, r3
 801e664:	db0a      	blt.n	801e67c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801e666:	eba3 0308 	sub.w	r3, r3, r8
 801e66a:	1ac9      	subs	r1, r1, r3
 801e66c:	b209      	sxth	r1, r1
 801e66e:	2900      	cmp	r1, #0
 801e670:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801e674:	ddd8      	ble.n	801e628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e676:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801e67a:	e7c4      	b.n	801e606 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e67c:	4441      	add	r1, r8
 801e67e:	b209      	sxth	r1, r1
 801e680:	4549      	cmp	r1, r9
 801e682:	dc05      	bgt.n	801e690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e684:	eba2 0208 	sub.w	r2, r2, r8
 801e688:	b212      	sxth	r2, r2
 801e68a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801e68e:	e7c9      	b.n	801e624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801e690:	4606      	mov	r6, r0
 801e692:	e7b9      	b.n	801e608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e694:	2c00      	cmp	r4, #0
 801e696:	f47f af7d 	bne.w	801e594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801e69a:	2e00      	cmp	r6, #0
 801e69c:	f000 81e1 	beq.w	801ea62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e6a0:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801e6a4:	4655      	mov	r5, sl
 801e6a6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801e6aa:	b2b9      	uxth	r1, r7
 801e6ac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e6b0:	b2b3      	uxth	r3, r6
 801e6b2:	9105      	str	r1, [sp, #20]
 801e6b4:	9805      	ldr	r0, [sp, #20]
 801e6b6:	441a      	add	r2, r3
 801e6b8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e6bc:	b292      	uxth	r2, r2
 801e6be:	4401      	add	r1, r0
 801e6c0:	fa0f f882 	sxth.w	r8, r2
 801e6c4:	b289      	uxth	r1, r1
 801e6c6:	9106      	str	r1, [sp, #24]
 801e6c8:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801e6cc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801e6d0:	9b04      	ldr	r3, [sp, #16]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d058      	beq.n	801e788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801e6d6:	9903      	ldr	r1, [sp, #12]
 801e6d8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801e6dc:	f7ff fdd8 	bl	801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e6e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e6e4:	b1d8      	cbz	r0, 801e71e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e6e6:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801e6ea:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801e6ee:	4576      	cmp	r6, lr
 801e6f0:	dc26      	bgt.n	801e740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801e6f2:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801e6f6:	44f4      	add	ip, lr
 801e6f8:	fa0f fc8c 	sxth.w	ip, ip
 801e6fc:	45e0      	cmp	r8, ip
 801e6fe:	db1f      	blt.n	801e740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801e700:	428f      	cmp	r7, r1
 801e702:	fa1f fc81 	uxth.w	ip, r1
 801e706:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801e70a:	dc0f      	bgt.n	801e72c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801e70c:	9806      	ldr	r0, [sp, #24]
 801e70e:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801e712:	eba0 0c0c 	sub.w	ip, r0, ip
 801e716:	eba1 010c 	sub.w	r1, r1, ip
 801e71a:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801e71e:	4620      	mov	r0, r4
 801e720:	9904      	ldr	r1, [sp, #16]
 801e722:	3d08      	subs	r5, #8
 801e724:	4604      	mov	r4, r0
 801e726:	3901      	subs	r1, #1
 801e728:	9104      	str	r1, [sp, #16]
 801e72a:	e7cf      	b.n	801e6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801e72c:	4461      	add	r1, ip
 801e72e:	b209      	sxth	r1, r1
 801e730:	4549      	cmp	r1, r9
 801e732:	dcf5      	bgt.n	801e720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e734:	9905      	ldr	r1, [sp, #20]
 801e736:	eba1 0c0c 	sub.w	ip, r1, ip
 801e73a:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801e73e:	e7ee      	b.n	801e71e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e740:	428f      	cmp	r7, r1
 801e742:	dced      	bgt.n	801e720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e744:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801e748:	4461      	add	r1, ip
 801e74a:	b209      	sxth	r1, r1
 801e74c:	4589      	cmp	r9, r1
 801e74e:	dbe7      	blt.n	801e720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e750:	4576      	cmp	r6, lr
 801e752:	fa1f fc8e 	uxth.w	ip, lr
 801e756:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801e75a:	dc08      	bgt.n	801e76e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801e75c:	eba2 0c0c 	sub.w	ip, r2, ip
 801e760:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801e764:	eba1 010c 	sub.w	r1, r1, ip
 801e768:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801e76c:	e7d7      	b.n	801e71e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e76e:	4461      	add	r1, ip
 801e770:	b209      	sxth	r1, r1
 801e772:	4588      	cmp	r8, r1
 801e774:	dbd4      	blt.n	801e720 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e776:	eba3 0c0c 	sub.w	ip, r3, ip
 801e77a:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801e77e:	e7ce      	b.n	801e71e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e780:	2400d822 	.word	0x2400d822
 801e784:	2400d820 	.word	0x2400d820
 801e788:	2c00      	cmp	r4, #0
 801e78a:	f000 816a 	beq.w	801ea62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e78e:	9b02      	ldr	r3, [sp, #8]
 801e790:	3301      	adds	r3, #1
 801e792:	f000 8166 	beq.w	801ea62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e796:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801e79a:	9803      	ldr	r0, [sp, #12]
 801e79c:	4621      	mov	r1, r4
 801e79e:	f7ff fde9 	bl	801e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e7a2:	b120      	cbz	r0, 801e7ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801e7a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e7a8:	9801      	ldr	r0, [sp, #4]
 801e7aa:	f7ff fea9 	bl	801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e7ae:	9903      	ldr	r1, [sp, #12]
 801e7b0:	4620      	mov	r0, r4
 801e7b2:	f7ff fd6d 	bl	801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e7b6:	2800      	cmp	r0, #0
 801e7b8:	f000 809b 	beq.w	801e8f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801e7bc:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801e7c0:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801e7c4:	b281      	uxth	r1, r0
 801e7c6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801e7ca:	9309      	str	r3, [sp, #36]	; 0x24
 801e7cc:	eb01 0c03 	add.w	ip, r1, r3
 801e7d0:	b2ab      	uxth	r3, r5
 801e7d2:	4285      	cmp	r5, r0
 801e7d4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801e7d8:	fa1f f98c 	uxth.w	r9, ip
 801e7dc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801e7e0:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801e7e4:	eb03 040c 	add.w	r4, r3, ip
 801e7e8:	b2a4      	uxth	r4, r4
 801e7ea:	9405      	str	r4, [sp, #20]
 801e7ec:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801e7f0:	9404      	str	r4, [sp, #16]
 801e7f2:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801e7f6:	f340 809a 	ble.w	801e92e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801e7fa:	1a5b      	subs	r3, r3, r1
 801e7fc:	4596      	cmp	lr, r2
 801e7fe:	fa0f f589 	sxth.w	r5, r9
 801e802:	b29b      	uxth	r3, r3
 801e804:	b21e      	sxth	r6, r3
 801e806:	dd2e      	ble.n	801e866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801e808:	9f02      	ldr	r7, [sp, #8]
 801e80a:	fa1f fe8e 	uxth.w	lr, lr
 801e80e:	b292      	uxth	r2, r2
 801e810:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801e814:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801e818:	9f04      	ldr	r7, [sp, #16]
 801e81a:	ebae 0102 	sub.w	r1, lr, r2
 801e81e:	4486      	add	lr, r0
 801e820:	1b7f      	subs	r7, r7, r5
 801e822:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801e826:	b289      	uxth	r1, r1
 801e828:	442a      	add	r2, r5
 801e82a:	fa0f fe8e 	sxth.w	lr, lr
 801e82e:	b20c      	sxth	r4, r1
 801e830:	b212      	sxth	r2, r2
 801e832:	4367      	muls	r7, r4
 801e834:	ebae 0202 	sub.w	r2, lr, r2
 801e838:	4372      	muls	r2, r6
 801e83a:	4297      	cmp	r7, r2
 801e83c:	db09      	blt.n	801e852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801e83e:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801e842:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801e846:	449c      	add	ip, r3
 801e848:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e84c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e850:	e680      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e852:	4401      	add	r1, r0
 801e854:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801e858:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801e85c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e860:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e864:	e676      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e866:	9f04      	ldr	r7, [sp, #16]
 801e868:	42bd      	cmp	r5, r7
 801e86a:	da27      	bge.n	801e8bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801e86c:	9902      	ldr	r1, [sp, #8]
 801e86e:	1b7f      	subs	r7, r7, r5
 801e870:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801e874:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801e878:	eb04 010e 	add.w	r1, r4, lr
 801e87c:	fa1f f881 	uxth.w	r8, r1
 801e880:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801e884:	4411      	add	r1, r2
 801e886:	fa0f f988 	sxth.w	r9, r8
 801e88a:	eba2 020e 	sub.w	r2, r2, lr
 801e88e:	eba1 0108 	sub.w	r1, r1, r8
 801e892:	4372      	muls	r2, r6
 801e894:	b289      	uxth	r1, r1
 801e896:	fa0f f881 	sxth.w	r8, r1
 801e89a:	fb08 f707 	mul.w	r7, r8, r7
 801e89e:	42ba      	cmp	r2, r7
 801e8a0:	dc06      	bgt.n	801e8b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801e8a2:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801e8a6:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801e8aa:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801e8ae:	e7ca      	b.n	801e846 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801e8b0:	4421      	add	r1, r4
 801e8b2:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801e8b6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e8ba:	e64b      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e8bc:	9d05      	ldr	r5, [sp, #20]
 801e8be:	2c06      	cmp	r4, #6
 801e8c0:	eba9 0505 	sub.w	r5, r9, r5
 801e8c4:	b2ad      	uxth	r5, r5
 801e8c6:	fa0f fe85 	sxth.w	lr, r5
 801e8ca:	d818      	bhi.n	801e8fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801e8cc:	9b04      	ldr	r3, [sp, #16]
 801e8ce:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801e8d2:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801e8d6:	1c63      	adds	r3, r4, #1
 801e8d8:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801e8dc:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801e8e0:	9b01      	ldr	r3, [sp, #4]
 801e8e2:	9d01      	ldr	r5, [sp, #4]
 801e8e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e8e8:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801e8ec:	805a      	strh	r2, [r3, #2]
 801e8ee:	809e      	strh	r6, [r3, #4]
 801e8f0:	80d9      	strh	r1, [r3, #6]
 801e8f2:	9b02      	ldr	r3, [sp, #8]
 801e8f4:	f1aa 0a08 	sub.w	sl, sl, #8
 801e8f8:	3b01      	subs	r3, #1
 801e8fa:	9302      	str	r3, [sp, #8]
 801e8fc:	e747      	b.n	801e78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801e8fe:	9a02      	ldr	r2, [sp, #8]
 801e900:	45b6      	cmp	lr, r6
 801e902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e906:	db0d      	blt.n	801e924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801e908:	449c      	add	ip, r3
 801e90a:	445a      	add	r2, fp
 801e90c:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801e910:	fa1f fc8c 	uxth.w	ip, ip
 801e914:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801e918:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e91c:	448c      	add	ip, r1
 801e91e:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801e922:	e617      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e924:	445a      	add	r2, fp
 801e926:	44ac      	add	ip, r5
 801e928:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801e92c:	e78e      	b.n	801e84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e92e:	fa1f f18e 	uxth.w	r1, lr
 801e932:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801e936:	b293      	uxth	r3, r2
 801e938:	4596      	cmp	lr, r2
 801e93a:	eb01 0806 	add.w	r8, r1, r6
 801e93e:	9306      	str	r3, [sp, #24]
 801e940:	fa1f f888 	uxth.w	r8, r8
 801e944:	9f06      	ldr	r7, [sp, #24]
 801e946:	fa0f f388 	sxth.w	r3, r8
 801e94a:	9307      	str	r3, [sp, #28]
 801e94c:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801e950:	443b      	add	r3, r7
 801e952:	b29b      	uxth	r3, r3
 801e954:	9308      	str	r3, [sp, #32]
 801e956:	da25      	bge.n	801e9a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801e958:	9905      	ldr	r1, [sp, #20]
 801e95a:	eba3 0308 	sub.w	r3, r3, r8
 801e95e:	eba2 020e 	sub.w	r2, r2, lr
 801e962:	1b40      	subs	r0, r0, r5
 801e964:	eba9 0401 	sub.w	r4, r9, r1
 801e968:	b29b      	uxth	r3, r3
 801e96a:	b2a4      	uxth	r4, r4
 801e96c:	b219      	sxth	r1, r3
 801e96e:	fa0f f984 	sxth.w	r9, r4
 801e972:	4348      	muls	r0, r1
 801e974:	fb09 f202 	mul.w	r2, r9, r2
 801e978:	4282      	cmp	r2, r0
 801e97a:	9a02      	ldr	r2, [sp, #8]
 801e97c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e980:	445a      	add	r2, fp
 801e982:	dc06      	bgt.n	801e992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801e984:	9b07      	ldr	r3, [sp, #28]
 801e986:	44a4      	add	ip, r4
 801e988:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801e98c:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801e990:	e75c      	b.n	801e84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e992:	9904      	ldr	r1, [sp, #16]
 801e994:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801e998:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801e99c:	4433      	add	r3, r6
 801e99e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e9a2:	e5d7      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e9a4:	9f06      	ldr	r7, [sp, #24]
 801e9a6:	9b04      	ldr	r3, [sp, #16]
 801e9a8:	1bc9      	subs	r1, r1, r7
 801e9aa:	fa0f f789 	sxth.w	r7, r9
 801e9ae:	b289      	uxth	r1, r1
 801e9b0:	429f      	cmp	r7, r3
 801e9b2:	fa0f fe81 	sxth.w	lr, r1
 801e9b6:	dd22      	ble.n	801e9fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801e9b8:	9a05      	ldr	r2, [sp, #20]
 801e9ba:	1b40      	subs	r0, r0, r5
 801e9bc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e9c0:	eba9 0202 	sub.w	r2, r9, r2
 801e9c4:	9d07      	ldr	r5, [sp, #28]
 801e9c6:	fb0e f000 	mul.w	r0, lr, r0
 801e9ca:	b292      	uxth	r2, r2
 801e9cc:	eba5 0a03 	sub.w	sl, r5, r3
 801e9d0:	9b02      	ldr	r3, [sp, #8]
 801e9d2:	b214      	sxth	r4, r2
 801e9d4:	00db      	lsls	r3, r3, #3
 801e9d6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9da:	445b      	add	r3, fp
 801e9dc:	4550      	cmp	r0, sl
 801e9de:	db03      	blt.n	801e9e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801e9e0:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801e9e4:	4494      	add	ip, r2
 801e9e6:	e731      	b.n	801e84c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e9e8:	9a04      	ldr	r2, [sp, #16]
 801e9ea:	4431      	add	r1, r6
 801e9ec:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801e9f0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801e9f4:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801e9f8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e9fc:	e75b      	b.n	801e8b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801e9fe:	9b08      	ldr	r3, [sp, #32]
 801ea00:	2c06      	cmp	r4, #6
 801ea02:	eba3 0308 	sub.w	r3, r3, r8
 801ea06:	b29b      	uxth	r3, r3
 801ea08:	b21d      	sxth	r5, r3
 801ea0a:	d813      	bhi.n	801ea34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801ea0c:	9b07      	ldr	r3, [sp, #28]
 801ea0e:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801ea12:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801ea16:	1c63      	adds	r3, r4, #1
 801ea18:	9901      	ldr	r1, [sp, #4]
 801ea1a:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801ea1e:	9b01      	ldr	r3, [sp, #4]
 801ea20:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801ea24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ea28:	805a      	strh	r2, [r3, #2]
 801ea2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ea2c:	f8a3 e006 	strh.w	lr, [r3, #6]
 801ea30:	809a      	strh	r2, [r3, #4]
 801ea32:	e75e      	b.n	801e8f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801ea34:	9802      	ldr	r0, [sp, #8]
 801ea36:	4575      	cmp	r5, lr
 801ea38:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ea3c:	db0d      	blt.n	801ea5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801ea3e:	4431      	add	r1, r6
 801ea40:	9b06      	ldr	r3, [sp, #24]
 801ea42:	4458      	add	r0, fp
 801ea44:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801ea48:	b289      	uxth	r1, r1
 801ea4a:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801ea4e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ea52:	4419      	add	r1, r3
 801ea54:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801ea58:	e57c      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ea5a:	4458      	add	r0, fp
 801ea5c:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801ea60:	e79c      	b.n	801e99c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801ea62:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801ea66:	2e07      	cmp	r6, #7
 801ea68:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801ea6c:	d812      	bhi.n	801ea94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801ea6e:	1c75      	adds	r5, r6, #1
 801ea70:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801ea74:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801ea78:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801ea7c:	9d01      	ldr	r5, [sp, #4]
 801ea7e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ea82:	442c      	add	r4, r5
 801ea84:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ea88:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801ea8c:	8061      	strh	r1, [r4, #2]
 801ea8e:	80a2      	strh	r2, [r4, #4]
 801ea90:	80e3      	strh	r3, [r4, #6]
 801ea92:	e5c9      	b.n	801e628 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ea94:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ea98:	3e01      	subs	r6, #1
 801ea9a:	445c      	add	r4, fp
 801ea9c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801eaa0:	f04f 37ff 	mov.w	r7, #4294967295
 801eaa4:	2500      	movs	r5, #0
 801eaa6:	9305      	str	r3, [sp, #20]
 801eaa8:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801eaac:	1e72      	subs	r2, r6, #1
 801eaae:	9302      	str	r3, [sp, #8]
 801eab0:	4691      	mov	r9, r2
 801eab2:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801eab6:	9304      	str	r3, [sp, #16]
 801eab8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801eabc:	f1b9 3fff 	cmp.w	r9, #4294967295
 801eac0:	6818      	ldr	r0, [r3, #0]
 801eac2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801eac6:	9207      	str	r2, [sp, #28]
 801eac8:	bf16      	itet	ne
 801eaca:	9905      	ldrne	r1, [sp, #20]
 801eacc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801ead0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801ead4:	9306      	str	r3, [sp, #24]
 801ead6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801eada:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801eade:	fb18 f801 	smulbb	r8, r8, r1
 801eae2:	6859      	ldr	r1, [r3, #4]
 801eae4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801eae8:	4671      	mov	r1, lr
 801eaea:	a80c      	add	r0, sp, #48	; 0x30
 801eaec:	f7fa fb7e 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eaf0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801eaf4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801eaf8:	f04f 0c08 	mov.w	ip, #8
 801eafc:	9b04      	ldr	r3, [sp, #16]
 801eafe:	9a02      	ldr	r2, [sp, #8]
 801eb00:	fb10 f001 	smulbb	r0, r0, r1
 801eb04:	fb02 8803 	mla	r8, r2, r3, r8
 801eb08:	eba0 0108 	sub.w	r1, r0, r8
 801eb0c:	fb90 f0fc 	sdiv	r0, r0, ip
 801eb10:	4288      	cmp	r0, r1
 801eb12:	dc20      	bgt.n	801eb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801eb14:	4551      	cmp	r1, sl
 801eb16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801eb1a:	da03      	bge.n	801eb24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801eb1c:	b1d9      	cbz	r1, 801eb56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801eb1e:	468a      	mov	sl, r1
 801eb20:	464f      	mov	r7, r9
 801eb22:	4635      	mov	r5, r6
 801eb24:	f109 39ff 	add.w	r9, r9, #4294967295
 801eb28:	f119 0f02 	cmn.w	r9, #2
 801eb2c:	d1c6      	bne.n	801eabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801eb2e:	4616      	mov	r6, r2
 801eb30:	3201      	adds	r2, #1
 801eb32:	f1a4 0408 	sub.w	r4, r4, #8
 801eb36:	d1b7      	bne.n	801eaa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801eb38:	9b01      	ldr	r3, [sp, #4]
 801eb3a:	b2ac      	uxth	r4, r5
 801eb3c:	00ed      	lsls	r5, r5, #3
 801eb3e:	1958      	adds	r0, r3, r5
 801eb40:	1c7b      	adds	r3, r7, #1
 801eb42:	d10b      	bne.n	801eb5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801eb44:	4601      	mov	r1, r0
 801eb46:	9803      	ldr	r0, [sp, #12]
 801eb48:	f7fa fb50 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb4c:	4621      	mov	r1, r4
 801eb4e:	9801      	ldr	r0, [sp, #4]
 801eb50:	f7ff fcd6 	bl	801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb54:	e4fe      	b.n	801e554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801eb56:	464f      	mov	r7, r9
 801eb58:	4635      	mov	r5, r6
 801eb5a:	e7ed      	b.n	801eb38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801eb5c:	9b01      	ldr	r3, [sp, #4]
 801eb5e:	00ff      	lsls	r7, r7, #3
 801eb60:	445d      	add	r5, fp
 801eb62:	19d9      	adds	r1, r3, r7
 801eb64:	445f      	add	r7, fp
 801eb66:	f7fa fb41 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb6a:	9b03      	ldr	r3, [sp, #12]
 801eb6c:	cb03      	ldmia	r3!, {r0, r1}
 801eb6e:	9b03      	ldr	r3, [sp, #12]
 801eb70:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801eb74:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801eb78:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801eb7c:	6869      	ldr	r1, [r5, #4]
 801eb7e:	c303      	stmia	r3!, {r0, r1}
 801eb80:	e7e4      	b.n	801eb4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801eb82:	bf00      	nop

0801eb84 <_ZN8touchgfx11Application10invalidateEv>:
 801eb84:	4b09      	ldr	r3, [pc, #36]	; (801ebac <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801eb86:	b082      	sub	sp, #8
 801eb88:	2100      	movs	r1, #0
 801eb8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eb8e:	4b08      	ldr	r3, [pc, #32]	; (801ebb0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801eb90:	9100      	str	r1, [sp, #0]
 801eb92:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb96:	f8ad 2004 	strh.w	r2, [sp, #4]
 801eb9a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801eb9e:	ab02      	add	r3, sp, #8
 801eba0:	e913 0006 	ldmdb	r3, {r1, r2}
 801eba4:	b002      	add	sp, #8
 801eba6:	f7ff bcbf 	b.w	801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ebaa:	bf00      	nop
 801ebac:	2400d820 	.word	0x2400d820
 801ebb0:	2400d822 	.word	0x2400d822

0801ebb4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebb8:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801ebbc:	b09b      	sub	sp, #108	; 0x6c
 801ebbe:	4604      	mov	r4, r0
 801ebc0:	4630      	mov	r0, r6
 801ebc2:	f7f9 fdf8 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebc6:	4605      	mov	r5, r0
 801ebc8:	b940      	cbnz	r0, 801ebdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801ebca:	4620      	mov	r0, r4
 801ebcc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801ebd0:	f7ff fcaa 	bl	801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ebd4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801ebd8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801ebdc:	4bc8      	ldr	r3, [pc, #800]	; (801ef00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d03e      	beq.n	801ec62 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ebe4:	4dc7      	ldr	r5, [pc, #796]	; (801ef04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	f7f9 fde5 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebec:	4606      	mov	r6, r0
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	d137      	bne.n	801ec62 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ebf2:	4628      	mov	r0, r5
 801ebf4:	f7ff fa16 	bl	801e024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ebf8:	6829      	ldr	r1, [r5, #0]
 801ebfa:	686a      	ldr	r2, [r5, #4]
 801ebfc:	4620      	mov	r0, r4
 801ebfe:	f7ff fc93 	bl	801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ec02:	802e      	strh	r6, [r5, #0]
 801ec04:	806e      	strh	r6, [r5, #2]
 801ec06:	80ae      	strh	r6, [r5, #4]
 801ec08:	80ee      	strh	r6, [r5, #6]
 801ec0a:	ae09      	add	r6, sp, #36	; 0x24
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	f7ff fc23 	bl	801e458 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ec12:	4abd      	ldr	r2, [pc, #756]	; (801ef08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801ec14:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801ec18:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801ec1c:	8815      	ldrh	r5, [r2, #0]
 801ec1e:	9202      	str	r2, [sp, #8]
 801ec20:	462b      	mov	r3, r5
 801ec22:	429f      	cmp	r7, r3
 801ec24:	d924      	bls.n	801ec70 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801ec26:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801ec2a:	2907      	cmp	r1, #7
 801ec2c:	d816      	bhi.n	801ec5c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801ec2e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801ec32:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801ec36:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801ec3a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801ec3e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801ec42:	1c4a      	adds	r2, r1, #1
 801ec44:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801ec48:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801ec4c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801ec50:	f8a2 9002 	strh.w	r9, [r2, #2]
 801ec54:	f8a2 e004 	strh.w	lr, [r2, #4]
 801ec58:	f8a2 c006 	strh.w	ip, [r2, #6]
 801ec5c:	3301      	adds	r3, #1
 801ec5e:	b29b      	uxth	r3, r3
 801ec60:	e7df      	b.n	801ec22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801ec62:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d1cf      	bne.n	801ec0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801ec6a:	b01b      	add	sp, #108	; 0x6c
 801ec6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec70:	462f      	mov	r7, r5
 801ec72:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ec76:	42bb      	cmp	r3, r7
 801ec78:	d90b      	bls.n	801ec92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801ec7a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801ec7e:	3701      	adds	r7, #1
 801ec80:	4620      	mov	r0, r4
 801ec82:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ec86:	b2bf      	uxth	r7, r7
 801ec88:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ec8c:	f7ff fc4c 	bl	801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ec90:	e7ef      	b.n	801ec72 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801ec92:	4a9e      	ldr	r2, [pc, #632]	; (801ef0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801ec94:	6813      	ldr	r3, [r2, #0]
 801ec96:	4690      	mov	r8, r2
 801ec98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ec9c:	2b01      	cmp	r3, #1
 801ec9e:	f040 80e4 	bne.w	801ee6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801eca2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801eca6:	4629      	mov	r1, r5
 801eca8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801ecac:	2500      	movs	r5, #0
 801ecae:	33aa      	adds	r3, #170	; 0xaa
 801ecb0:	428f      	cmp	r7, r1
 801ecb2:	f103 0308 	add.w	r3, r3, #8
 801ecb6:	dd0a      	ble.n	801ecce <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801ecb8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ecbc:	3101      	adds	r1, #1
 801ecbe:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801ecc2:	4402      	add	r2, r0
 801ecc4:	b212      	sxth	r2, r2
 801ecc6:	4295      	cmp	r5, r2
 801ecc8:	bfb8      	it	lt
 801ecca:	4615      	movlt	r5, r2
 801eccc:	e7f0      	b.n	801ecb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801ecce:	4b90      	ldr	r3, [pc, #576]	; (801ef10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801ecd0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801ef0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801ecd4:	881b      	ldrh	r3, [r3, #0]
 801ecd6:	46d8      	mov	r8, fp
 801ecd8:	2b0f      	cmp	r3, #15
 801ecda:	bf8c      	ite	hi
 801ecdc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801ece0:	f04f 0a01 	movls.w	sl, #1
 801ece4:	2300      	movs	r3, #0
 801ece6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ecea:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801ecee:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ecf2:	4438      	add	r0, r7
 801ecf4:	b207      	sxth	r7, r0
 801ecf6:	f8db 0000 	ldr.w	r0, [fp]
 801ecfa:	42bd      	cmp	r5, r7
 801ecfc:	6803      	ldr	r3, [r0, #0]
 801ecfe:	f340 8084 	ble.w	801ee0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801ed02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ed06:	4798      	blx	r3
 801ed08:	eb07 030a 	add.w	r3, r7, sl
 801ed0c:	4298      	cmp	r0, r3
 801ed0e:	da07      	bge.n	801ed20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801ed10:	4285      	cmp	r5, r0
 801ed12:	dd05      	ble.n	801ed20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801ed14:	4287      	cmp	r7, r0
 801ed16:	dd6d      	ble.n	801edf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ed18:	2f00      	cmp	r7, #0
 801ed1a:	dd6b      	ble.n	801edf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801ed1c:	4628      	mov	r0, r5
 801ed1e:	e004      	b.n	801ed2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801ed20:	4287      	cmp	r7, r0
 801ed22:	dcfb      	bgt.n	801ed1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801ed24:	42a8      	cmp	r0, r5
 801ed26:	bfa8      	it	ge
 801ed28:	4628      	movge	r0, r5
 801ed2a:	4b7a      	ldr	r3, [pc, #488]	; (801ef14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801ed2c:	1bc0      	subs	r0, r0, r7
 801ed2e:	2200      	movs	r2, #0
 801ed30:	f8ad 7016 	strh.w	r7, [sp, #22]
 801ed34:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ed38:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ed3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ed40:	9b02      	ldr	r3, [sp, #8]
 801ed42:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ed46:	881f      	ldrh	r7, [r3, #0]
 801ed48:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ed4c:	42bb      	cmp	r3, r7
 801ed4e:	d9cc      	bls.n	801ecea <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801ed50:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801ed54:	ab07      	add	r3, sp, #28
 801ed56:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ed5a:	6851      	ldr	r1, [r2, #4]
 801ed5c:	c303      	stmia	r3!, {r0, r1}
 801ed5e:	a905      	add	r1, sp, #20
 801ed60:	a807      	add	r0, sp, #28
 801ed62:	f7ff fa95 	bl	801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ed66:	2800      	cmp	r0, #0
 801ed68:	d04c      	beq.n	801ee04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801ed6a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801ed6e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801ed72:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801ed76:	4686      	mov	lr, r0
 801ed78:	4290      	cmp	r0, r2
 801ed7a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801ed7e:	4448      	add	r0, r9
 801ed80:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801ed84:	bfb8      	it	lt
 801ed86:	4696      	movlt	lr, r2
 801ed88:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ed8c:	444a      	add	r2, r9
 801ed8e:	b280      	uxth	r0, r0
 801ed90:	4299      	cmp	r1, r3
 801ed92:	468c      	mov	ip, r1
 801ed94:	b292      	uxth	r2, r2
 801ed96:	9303      	str	r3, [sp, #12]
 801ed98:	bfb8      	it	lt
 801ed9a:	469c      	movlt	ip, r3
 801ed9c:	b203      	sxth	r3, r0
 801ed9e:	fa0f f982 	sxth.w	r9, r2
 801eda2:	f8ad e01c 	strh.w	lr, [sp, #28]
 801eda6:	f8ad c01e 	strh.w	ip, [sp, #30]
 801edaa:	454b      	cmp	r3, r9
 801edac:	bfb8      	it	lt
 801edae:	4602      	movlt	r2, r0
 801edb0:	9b03      	ldr	r3, [sp, #12]
 801edb2:	eba2 020e 	sub.w	r2, r2, lr
 801edb6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801edba:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801edbe:	4411      	add	r1, r2
 801edc0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801edc4:	4413      	add	r3, r2
 801edc6:	b289      	uxth	r1, r1
 801edc8:	b29b      	uxth	r3, r3
 801edca:	b208      	sxth	r0, r1
 801edcc:	b21a      	sxth	r2, r3
 801edce:	4290      	cmp	r0, r2
 801edd0:	bfb8      	it	lt
 801edd2:	460b      	movlt	r3, r1
 801edd4:	eba3 030c 	sub.w	r3, r3, ip
 801edd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801eddc:	a807      	add	r0, sp, #28
 801edde:	f7f9 fcea 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ede2:	b920      	cbnz	r0, 801edee <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801ede4:	6823      	ldr	r3, [r4, #0]
 801ede6:	a907      	add	r1, sp, #28
 801ede8:	4620      	mov	r0, r4
 801edea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edec:	4798      	blx	r3
 801edee:	3701      	adds	r7, #1
 801edf0:	b2bf      	uxth	r7, r7
 801edf2:	e7a9      	b.n	801ed48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801edf4:	f8d8 0000 	ldr.w	r0, [r8]
 801edf8:	2101      	movs	r1, #1
 801edfa:	6803      	ldr	r3, [r0, #0]
 801edfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ee00:	4798      	blx	r3
 801ee02:	e772      	b.n	801ecea <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801ee04:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801ee08:	e7e8      	b.n	801eddc <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee0c:	4798      	blx	r3
 801ee0e:	4b42      	ldr	r3, [pc, #264]	; (801ef18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801ee10:	781b      	ldrb	r3, [r3, #0]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	f43f af29 	beq.w	801ec6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ee18:	2300      	movs	r3, #0
 801ee1a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801ee1e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ee22:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801ee26:	9b02      	ldr	r3, [sp, #8]
 801ee28:	881b      	ldrh	r3, [r3, #0]
 801ee2a:	429d      	cmp	r5, r3
 801ee2c:	f67f af1d 	bls.w	801ec6a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ee30:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801ee34:	2907      	cmp	r1, #7
 801ee36:	d815      	bhi.n	801ee64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801ee38:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801ee3c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801ee40:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801ee44:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801ee48:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801ee4c:	1c4a      	adds	r2, r1, #1
 801ee4e:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801ee52:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801ee56:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801ee5a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801ee5e:	f8a2 c004 	strh.w	ip, [r2, #4]
 801ee62:	80d7      	strh	r7, [r2, #6]
 801ee64:	3301      	adds	r3, #1
 801ee66:	b29b      	uxth	r3, r3
 801ee68:	e7df      	b.n	801ee2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801ee6a:	2b02      	cmp	r3, #2
 801ee6c:	f040 8135 	bne.w	801f0da <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801ee70:	4b2a      	ldr	r3, [pc, #168]	; (801ef1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801ee72:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801ee76:	781b      	ldrb	r3, [r3, #0]
 801ee78:	2b01      	cmp	r3, #1
 801ee7a:	f000 809c 	beq.w	801efb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ee7e:	9b02      	ldr	r3, [sp, #8]
 801ee80:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801ee84:	f8b3 b000 	ldrh.w	fp, [r3]
 801ee88:	f10b 0b01 	add.w	fp, fp, #1
 801ee8c:	fa1f fb8b 	uxth.w	fp, fp
 801ee90:	2a00      	cmp	r2, #0
 801ee92:	d0bc      	beq.n	801ee0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ee94:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801ee98:	4659      	mov	r1, fp
 801ee9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801ee9e:	f04f 0800 	mov.w	r8, #0
 801eea2:	441d      	add	r5, r3
 801eea4:	b22d      	sxth	r5, r5
 801eea6:	b28b      	uxth	r3, r1
 801eea8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801eeac:	429a      	cmp	r2, r3
 801eeae:	f240 80c0 	bls.w	801f032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801eeb2:	4427      	add	r7, r4
 801eeb4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801eeb8:	4608      	mov	r0, r1
 801eeba:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801eebe:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801eec2:	4563      	cmp	r3, ip
 801eec4:	f340 80a2 	ble.w	801f00c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801eec8:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801eecc:	4465      	add	r5, ip
 801eece:	b22d      	sxth	r5, r5
 801eed0:	429d      	cmp	r5, r3
 801eed2:	bfa8      	it	ge
 801eed4:	461d      	movge	r5, r3
 801eed6:	3101      	adds	r1, #1
 801eed8:	4680      	mov	r8, r0
 801eeda:	e7e4      	b.n	801eea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801eedc:	d10b      	bne.n	801eef6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801eede:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801eee2:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801eee6:	458c      	cmp	ip, r1
 801eee8:	bfb4      	ite	lt
 801eeea:	469c      	movlt	ip, r3
 801eeec:	46bc      	movge	ip, r7
 801eeee:	4572      	cmp	r2, lr
 801eef0:	bfb8      	it	lt
 801eef2:	4672      	movlt	r2, lr
 801eef4:	e087      	b.n	801f006 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801eef6:	428a      	cmp	r2, r1
 801eef8:	46bc      	mov	ip, r7
 801eefa:	bfb8      	it	lt
 801eefc:	460a      	movlt	r2, r1
 801eefe:	e082      	b.n	801f006 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801ef00:	2400d86c 	.word	0x2400d86c
 801ef04:	2400d878 	.word	0x2400d878
 801ef08:	24000584 	.word	0x24000584
 801ef0c:	2400d82c 	.word	0x2400d82c
 801ef10:	2400d822 	.word	0x2400d822
 801ef14:	2400d820 	.word	0x2400d820
 801ef18:	2400d82a 	.word	0x2400d82a
 801ef1c:	2400d824 	.word	0x2400d824
 801ef20:	1961      	adds	r1, r4, r5
 801ef22:	ab07      	add	r3, sp, #28
 801ef24:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801ef28:	6849      	ldr	r1, [r1, #4]
 801ef2a:	c303      	stmia	r3!, {r0, r1}
 801ef2c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ef30:	a807      	add	r0, sp, #28
 801ef32:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ef36:	2b13      	cmp	r3, #19
 801ef38:	440b      	add	r3, r1
 801ef3a:	bfd8      	it	le
 801ef3c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801ef40:	1a9b      	subs	r3, r3, r2
 801ef42:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ef46:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ef4a:	f7ff f885 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef4e:	a807      	add	r0, sp, #28
 801ef50:	f7f9 fc31 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ef54:	bb78      	cbnz	r0, 801efb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ef56:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ef5a:	4425      	add	r5, r4
 801ef5c:	f8d8 0000 	ldr.w	r0, [r8]
 801ef60:	f1bc 0f14 	cmp.w	ip, #20
 801ef64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ef68:	f8d0 e000 	ldr.w	lr, [r0]
 801ef6c:	bfa8      	it	ge
 801ef6e:	f04f 0c14 	movge.w	ip, #20
 801ef72:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ef76:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ef7a:	fa1f fc8c 	uxth.w	ip, ip
 801ef7e:	f8cd c000 	str.w	ip, [sp]
 801ef82:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801ef86:	47d0      	blx	sl
 801ef88:	4682      	mov	sl, r0
 801ef8a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ef8e:	a807      	add	r0, sp, #28
 801ef90:	f7ff f848 	bl	801e024 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ef94:	6823      	ldr	r3, [r4, #0]
 801ef96:	4620      	mov	r0, r4
 801ef98:	a907      	add	r1, sp, #28
 801ef9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef9c:	4798      	blx	r3
 801ef9e:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801efa2:	eba0 000a 	sub.w	r0, r0, sl
 801efa6:	b200      	sxth	r0, r0
 801efa8:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801efac:	b918      	cbnz	r0, 801efb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801efae:	b2b9      	uxth	r1, r7
 801efb0:	4648      	mov	r0, r9
 801efb2:	f7ff faa5 	bl	801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801efb6:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801efba:	f1bb 0f00 	cmp.w	fp, #0
 801efbe:	f43f af26 	beq.w	801ee0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801efc2:	9b02      	ldr	r3, [sp, #8]
 801efc4:	2700      	movs	r7, #0
 801efc6:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801efca:	881b      	ldrh	r3, [r3, #0]
 801efcc:	3301      	adds	r3, #1
 801efce:	b29b      	uxth	r3, r3
 801efd0:	b299      	uxth	r1, r3
 801efd2:	00fd      	lsls	r5, r7, #3
 801efd4:	458b      	cmp	fp, r1
 801efd6:	d9a3      	bls.n	801ef20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801efd8:	4425      	add	r5, r4
 801efda:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801efde:	469c      	mov	ip, r3
 801efe0:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801efe4:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801efe8:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801efec:	4408      	add	r0, r1
 801efee:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801eff2:	4471      	add	r1, lr
 801eff4:	b200      	sxth	r0, r0
 801eff6:	b209      	sxth	r1, r1
 801eff8:	4288      	cmp	r0, r1
 801effa:	f6bf af6f 	bge.w	801eedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801effe:	4586      	cmp	lr, r0
 801f000:	4672      	mov	r2, lr
 801f002:	bfb8      	it	lt
 801f004:	4602      	movlt	r2, r0
 801f006:	3301      	adds	r3, #1
 801f008:	4667      	mov	r7, ip
 801f00a:	e7e1      	b.n	801efd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801f00c:	d10c      	bne.n	801f028 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801f00e:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801f012:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801f016:	4287      	cmp	r7, r0
 801f018:	bfb4      	ite	lt
 801f01a:	4608      	movlt	r0, r1
 801f01c:	4640      	movge	r0, r8
 801f01e:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801f022:	443b      	add	r3, r7
 801f024:	b21b      	sxth	r3, r3
 801f026:	e753      	b.n	801eed0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801f028:	4565      	cmp	r5, ip
 801f02a:	4640      	mov	r0, r8
 801f02c:	bfa8      	it	ge
 801f02e:	4665      	movge	r5, ip
 801f030:	e751      	b.n	801eed6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801f032:	eb09 0007 	add.w	r0, r9, r7
 801f036:	4427      	add	r7, r4
 801f038:	9203      	str	r2, [sp, #12]
 801f03a:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801f03e:	f1ba 0f13 	cmp.w	sl, #19
 801f042:	bfde      	ittt	le
 801f044:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801f048:	4455      	addle	r5, sl
 801f04a:	b22d      	sxthle	r5, r5
 801f04c:	f7f9 fbb3 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f050:	9a03      	ldr	r2, [sp, #12]
 801f052:	2800      	cmp	r0, #0
 801f054:	f47f af1c 	bne.w	801ee90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801f058:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801f05c:	fa1f fa8a 	uxth.w	sl, sl
 801f060:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f064:	1aad      	subs	r5, r5, r2
 801f066:	4829      	ldr	r0, [pc, #164]	; (801f10c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801f068:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801f06c:	2d14      	cmp	r5, #20
 801f06e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801f072:	6800      	ldr	r0, [r0, #0]
 801f074:	bfa8      	it	ge
 801f076:	2514      	movge	r5, #20
 801f078:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f07c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801f080:	b289      	uxth	r1, r1
 801f082:	f8ad 3020 	strh.w	r3, [sp, #32]
 801f086:	b2ad      	uxth	r5, r5
 801f088:	f8d0 c000 	ldr.w	ip, [r0]
 801f08c:	b292      	uxth	r2, r2
 801f08e:	4555      	cmp	r5, sl
 801f090:	bf94      	ite	ls
 801f092:	9500      	strls	r5, [sp, #0]
 801f094:	f8cd a000 	strhi.w	sl, [sp]
 801f098:	b29b      	uxth	r3, r3
 801f09a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801f09e:	47a8      	blx	r5
 801f0a0:	6823      	ldr	r3, [r4, #0]
 801f0a2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801f0a6:	a907      	add	r1, sp, #28
 801f0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	4798      	blx	r3
 801f0ae:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801f0b2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801f0b6:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801f0ba:	1a5b      	subs	r3, r3, r1
 801f0bc:	440a      	add	r2, r1
 801f0be:	b21b      	sxth	r3, r3
 801f0c0:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801f0c4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	f47f aed8 	bne.w	801ee7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801f0ce:	fa1f f188 	uxth.w	r1, r8
 801f0d2:	4648      	mov	r0, r9
 801f0d4:	f7ff fa14 	bl	801e500 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801f0d8:	e6d1      	b.n	801ee7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801f0da:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801f0de:	42ab      	cmp	r3, r5
 801f0e0:	f67f ae95 	bls.w	801ee0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801f0e4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801f0e8:	ab07      	add	r3, sp, #28
 801f0ea:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801f0ee:	6851      	ldr	r1, [r2, #4]
 801f0f0:	c303      	stmia	r3!, {r0, r1}
 801f0f2:	a807      	add	r0, sp, #28
 801f0f4:	f7f9 fb5f 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801f0f8:	b920      	cbnz	r0, 801f104 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801f0fa:	6823      	ldr	r3, [r4, #0]
 801f0fc:	a907      	add	r1, sp, #28
 801f0fe:	4620      	mov	r0, r4
 801f100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f102:	4798      	blx	r3
 801f104:	3501      	adds	r5, #1
 801f106:	b2ad      	uxth	r5, r5
 801f108:	e7e7      	b.n	801f0da <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801f10a:	bf00      	nop
 801f10c:	2400d82c 	.word	0x2400d82c

0801f110 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801f110:	4b03      	ldr	r3, [pc, #12]	; (801f120 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801f112:	2200      	movs	r2, #0
 801f114:	801a      	strh	r2, [r3, #0]
 801f116:	805a      	strh	r2, [r3, #2]
 801f118:	809a      	strh	r2, [r3, #4]
 801f11a:	80da      	strh	r2, [r3, #6]
 801f11c:	4770      	bx	lr
 801f11e:	bf00      	nop
 801f120:	2400d878 	.word	0x2400d878

0801f124 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f128:	b09d      	sub	sp, #116	; 0x74
 801f12a:	4606      	mov	r6, r0
 801f12c:	4614      	mov	r4, r2
 801f12e:	468a      	mov	sl, r1
 801f130:	a803      	add	r0, sp, #12
 801f132:	461d      	mov	r5, r3
 801f134:	f000 fe4d 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801f138:	6833      	ldr	r3, [r6, #0]
 801f13a:	4630      	mov	r0, r6
 801f13c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801f140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f142:	4798      	blx	r3
 801f144:	6833      	ldr	r3, [r6, #0]
 801f146:	4607      	mov	r7, r0
 801f148:	4630      	mov	r0, r6
 801f14a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f14c:	4798      	blx	r3
 801f14e:	462a      	mov	r2, r5
 801f150:	2500      	movs	r5, #0
 801f152:	4621      	mov	r1, r4
 801f154:	9000      	str	r0, [sp, #0]
 801f156:	463b      	mov	r3, r7
 801f158:	462c      	mov	r4, r5
 801f15a:	46a9      	mov	r9, r5
 801f15c:	46a8      	mov	r8, r5
 801f15e:	a803      	add	r0, sp, #12
 801f160:	f000 fe92 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f164:	2300      	movs	r3, #0
 801f166:	9302      	str	r3, [sp, #8]
 801f168:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801f16c:	429c      	cmp	r4, r3
 801f16e:	d002      	beq.n	801f176 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801f170:	455c      	cmp	r4, fp
 801f172:	bf18      	it	ne
 801f174:	4625      	movne	r5, r4
 801f176:	ab02      	add	r3, sp, #8
 801f178:	4632      	mov	r2, r6
 801f17a:	4651      	mov	r1, sl
 801f17c:	a803      	add	r0, sp, #12
 801f17e:	f001 f989 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f182:	4604      	mov	r4, r0
 801f184:	b108      	cbz	r0, 801f18a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801f186:	280a      	cmp	r0, #10
 801f188:	d10a      	bne.n	801f1a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801f18a:	45c1      	cmp	r9, r8
 801f18c:	bf38      	it	cc
 801f18e:	46c1      	movcc	r9, r8
 801f190:	f04f 0800 	mov.w	r8, #0
 801f194:	2c00      	cmp	r4, #0
 801f196:	d1e5      	bne.n	801f164 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f198:	4648      	mov	r0, r9
 801f19a:	b01d      	add	sp, #116	; 0x74
 801f19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1a0:	9a02      	ldr	r2, [sp, #8]
 801f1a2:	2a00      	cmp	r2, #0
 801f1a4:	d0de      	beq.n	801f164 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f1a6:	7b57      	ldrb	r7, [r2, #13]
 801f1a8:	4629      	mov	r1, r5
 801f1aa:	6833      	ldr	r3, [r6, #0]
 801f1ac:	007f      	lsls	r7, r7, #1
 801f1ae:	8894      	ldrh	r4, [r2, #4]
 801f1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f1b2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801f1b6:	7a97      	ldrb	r7, [r2, #10]
 801f1b8:	4307      	orrs	r7, r0
 801f1ba:	4630      	mov	r0, r6
 801f1bc:	4798      	blx	r3
 801f1be:	4438      	add	r0, r7
 801f1c0:	4480      	add	r8, r0
 801f1c2:	fa1f f888 	uxth.w	r8, r8
 801f1c6:	e7e5      	b.n	801f194 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801f1c8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f1c8:	b508      	push	{r3, lr}
 801f1ca:	6803      	ldr	r3, [r0, #0]
 801f1cc:	68db      	ldr	r3, [r3, #12]
 801f1ce:	4798      	blx	r3
 801f1d0:	b128      	cbz	r0, 801f1de <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f1d2:	7b43      	ldrb	r3, [r0, #13]
 801f1d4:	7a80      	ldrb	r0, [r0, #10]
 801f1d6:	005b      	lsls	r3, r3, #1
 801f1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1dc:	4318      	orrs	r0, r3
 801f1de:	bd08      	pop	{r3, pc}

0801f1e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f1e0:	b40e      	push	{r1, r2, r3}
 801f1e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1e4:	b09e      	sub	sp, #120	; 0x78
 801f1e6:	4605      	mov	r5, r0
 801f1e8:	ab23      	add	r3, sp, #140	; 0x8c
 801f1ea:	a805      	add	r0, sp, #20
 801f1ec:	f853 4b04 	ldr.w	r4, [r3], #4
 801f1f0:	9303      	str	r3, [sp, #12]
 801f1f2:	f000 fdee 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801f1f6:	682b      	ldr	r3, [r5, #0]
 801f1f8:	4628      	mov	r0, r5
 801f1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1fc:	4798      	blx	r3
 801f1fe:	682b      	ldr	r3, [r5, #0]
 801f200:	4606      	mov	r6, r0
 801f202:	4628      	mov	r0, r5
 801f204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f206:	4798      	blx	r3
 801f208:	4633      	mov	r3, r6
 801f20a:	4621      	mov	r1, r4
 801f20c:	ae1e      	add	r6, sp, #120	; 0x78
 801f20e:	2400      	movs	r4, #0
 801f210:	9000      	str	r0, [sp, #0]
 801f212:	9a03      	ldr	r2, [sp, #12]
 801f214:	a805      	add	r0, sp, #20
 801f216:	f000 fe37 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f21a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801f21e:	462a      	mov	r2, r5
 801f220:	4633      	mov	r3, r6
 801f222:	4621      	mov	r1, r4
 801f224:	a805      	add	r0, sp, #20
 801f226:	f001 f935 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f22a:	b300      	cbz	r0, 801f26e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801f22c:	280a      	cmp	r0, #10
 801f22e:	d01a      	beq.n	801f266 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f230:	9f04      	ldr	r7, [sp, #16]
 801f232:	b1c7      	cbz	r7, 801f266 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801f234:	7b78      	ldrb	r0, [r7, #13]
 801f236:	7a3b      	ldrb	r3, [r7, #8]
 801f238:	00c1      	lsls	r1, r0, #3
 801f23a:	88aa      	ldrh	r2, [r5, #4]
 801f23c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f240:	4319      	orrs	r1, r3
 801f242:	0643      	lsls	r3, r0, #25
 801f244:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801f248:	bf48      	it	mi
 801f24a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f24e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f252:	bf48      	it	mi
 801f254:	b219      	sxthmi	r1, r3
 801f256:	79fb      	ldrb	r3, [r7, #7]
 801f258:	4303      	orrs	r3, r0
 801f25a:	4413      	add	r3, r2
 801f25c:	1a5b      	subs	r3, r3, r1
 801f25e:	b29b      	uxth	r3, r3
 801f260:	42a3      	cmp	r3, r4
 801f262:	bfc8      	it	gt
 801f264:	b21c      	sxthgt	r4, r3
 801f266:	4633      	mov	r3, r6
 801f268:	462a      	mov	r2, r5
 801f26a:	2100      	movs	r1, #0
 801f26c:	e7da      	b.n	801f224 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801f26e:	b2a0      	uxth	r0, r4
 801f270:	b01e      	add	sp, #120	; 0x78
 801f272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f276:	b003      	add	sp, #12
 801f278:	4770      	bx	lr

0801f27a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f27a:	b40e      	push	{r1, r2, r3}
 801f27c:	b570      	push	{r4, r5, r6, lr}
 801f27e:	b09d      	sub	sp, #116	; 0x74
 801f280:	4604      	mov	r4, r0
 801f282:	ab21      	add	r3, sp, #132	; 0x84
 801f284:	a803      	add	r0, sp, #12
 801f286:	f853 5b04 	ldr.w	r5, [r3], #4
 801f28a:	9302      	str	r3, [sp, #8]
 801f28c:	f000 fda1 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801f290:	6823      	ldr	r3, [r4, #0]
 801f292:	4620      	mov	r0, r4
 801f294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f296:	4798      	blx	r3
 801f298:	6823      	ldr	r3, [r4, #0]
 801f29a:	4606      	mov	r6, r0
 801f29c:	4620      	mov	r0, r4
 801f29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f2a0:	2401      	movs	r4, #1
 801f2a2:	4798      	blx	r3
 801f2a4:	4633      	mov	r3, r6
 801f2a6:	9000      	str	r0, [sp, #0]
 801f2a8:	4629      	mov	r1, r5
 801f2aa:	9a02      	ldr	r2, [sp, #8]
 801f2ac:	a803      	add	r0, sp, #12
 801f2ae:	f000 fdeb 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f2b2:	a803      	add	r0, sp, #12
 801f2b4:	f001 f9ba 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f2b8:	b2a3      	uxth	r3, r4
 801f2ba:	b138      	cbz	r0, 801f2cc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801f2bc:	280a      	cmp	r0, #10
 801f2be:	a803      	add	r0, sp, #12
 801f2c0:	bf04      	itt	eq
 801f2c2:	3301      	addeq	r3, #1
 801f2c4:	b21c      	sxtheq	r4, r3
 801f2c6:	f001 f9b1 	bl	802062c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f2ca:	e7f5      	b.n	801f2b8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801f2cc:	4618      	mov	r0, r3
 801f2ce:	b01d      	add	sp, #116	; 0x74
 801f2d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2d4:	b003      	add	sp, #12
 801f2d6:	4770      	bx	lr

0801f2d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f2d8:	b40e      	push	{r1, r2, r3}
 801f2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2dc:	b09e      	sub	sp, #120	; 0x78
 801f2de:	4604      	mov	r4, r0
 801f2e0:	ab23      	add	r3, sp, #140	; 0x8c
 801f2e2:	a805      	add	r0, sp, #20
 801f2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 801f2e8:	9303      	str	r3, [sp, #12]
 801f2ea:	f000 fd72 	bl	801fdd2 <_ZN8touchgfx12TextProviderC1Ev>
 801f2ee:	6823      	ldr	r3, [r4, #0]
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f2f4:	4798      	blx	r3
 801f2f6:	6823      	ldr	r3, [r4, #0]
 801f2f8:	4606      	mov	r6, r0
 801f2fa:	4620      	mov	r0, r4
 801f2fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f2fe:	4798      	blx	r3
 801f300:	4633      	mov	r3, r6
 801f302:	4629      	mov	r1, r5
 801f304:	9000      	str	r0, [sp, #0]
 801f306:	9a03      	ldr	r2, [sp, #12]
 801f308:	a805      	add	r0, sp, #20
 801f30a:	f000 fdbd 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f30e:	ad1e      	add	r5, sp, #120	; 0x78
 801f310:	2100      	movs	r1, #0
 801f312:	26ff      	movs	r6, #255	; 0xff
 801f314:	4622      	mov	r2, r4
 801f316:	a805      	add	r0, sp, #20
 801f318:	f845 1d68 	str.w	r1, [r5, #-104]!
 801f31c:	462b      	mov	r3, r5
 801f31e:	f001 f8b9 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f322:	b1d8      	cbz	r0, 801f35c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801f324:	280a      	cmp	r0, #10
 801f326:	d012      	beq.n	801f34e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f328:	9804      	ldr	r0, [sp, #16]
 801f32a:	b180      	cbz	r0, 801f34e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f32c:	7b47      	ldrb	r7, [r0, #13]
 801f32e:	7922      	ldrb	r2, [r4, #4]
 801f330:	00fb      	lsls	r3, r7, #3
 801f332:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f336:	7a03      	ldrb	r3, [r0, #8]
 801f338:	430b      	orrs	r3, r1
 801f33a:	0679      	lsls	r1, r7, #25
 801f33c:	bf44      	itt	mi
 801f33e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f342:	b21b      	sxthmi	r3, r3
 801f344:	1ad3      	subs	r3, r2, r3
 801f346:	b2db      	uxtb	r3, r3
 801f348:	429e      	cmp	r6, r3
 801f34a:	bf28      	it	cs
 801f34c:	461e      	movcs	r6, r3
 801f34e:	462b      	mov	r3, r5
 801f350:	4622      	mov	r2, r4
 801f352:	2100      	movs	r1, #0
 801f354:	a805      	add	r0, sp, #20
 801f356:	f001 f89d 	bl	8020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f35a:	e7e2      	b.n	801f322 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801f35c:	4630      	mov	r0, r6
 801f35e:	b01e      	add	sp, #120	; 0x78
 801f360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f364:	b003      	add	sp, #12
 801f366:	4770      	bx	lr

0801f368 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f368:	b513      	push	{r0, r1, r4, lr}
 801f36a:	6803      	ldr	r3, [r0, #0]
 801f36c:	2400      	movs	r4, #0
 801f36e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f372:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f376:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f37a:	4669      	mov	r1, sp
 801f37c:	691b      	ldr	r3, [r3, #16]
 801f37e:	9400      	str	r4, [sp, #0]
 801f380:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f384:	4798      	blx	r3
 801f386:	b002      	add	sp, #8
 801f388:	bd10      	pop	{r4, pc}

0801f38a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f38a:	b538      	push	{r3, r4, r5, lr}
 801f38c:	680b      	ldr	r3, [r1, #0]
 801f38e:	460c      	mov	r4, r1
 801f390:	4605      	mov	r5, r0
 801f392:	68db      	ldr	r3, [r3, #12]
 801f394:	4798      	blx	r3
 801f396:	6823      	ldr	r3, [r4, #0]
 801f398:	4620      	mov	r0, r4
 801f39a:	4629      	mov	r1, r5
 801f39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f39e:	4798      	blx	r3
 801f3a0:	4628      	mov	r0, r5
 801f3a2:	bd38      	pop	{r3, r4, r5, pc}

0801f3a4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f3a4:	b410      	push	{r4}
 801f3a6:	880a      	ldrh	r2, [r1, #0]
 801f3a8:	8884      	ldrh	r4, [r0, #4]
 801f3aa:	4422      	add	r2, r4
 801f3ac:	800a      	strh	r2, [r1, #0]
 801f3ae:	884a      	ldrh	r2, [r1, #2]
 801f3b0:	88c4      	ldrh	r4, [r0, #6]
 801f3b2:	4422      	add	r2, r4
 801f3b4:	804a      	strh	r2, [r1, #2]
 801f3b6:	6940      	ldr	r0, [r0, #20]
 801f3b8:	b120      	cbz	r0, 801f3c4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f3ba:	6803      	ldr	r3, [r0, #0]
 801f3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3c2:	4718      	bx	r3
 801f3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3c8:	4770      	bx	lr

0801f3ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f3ca:	b570      	push	{r4, r5, r6, lr}
 801f3cc:	8882      	ldrh	r2, [r0, #4]
 801f3ce:	460c      	mov	r4, r1
 801f3d0:	880b      	ldrh	r3, [r1, #0]
 801f3d2:	4605      	mov	r5, r0
 801f3d4:	4413      	add	r3, r2
 801f3d6:	800b      	strh	r3, [r1, #0]
 801f3d8:	884b      	ldrh	r3, [r1, #2]
 801f3da:	88c2      	ldrh	r2, [r0, #6]
 801f3dc:	4413      	add	r3, r2
 801f3de:	804b      	strh	r3, [r1, #2]
 801f3e0:	1d01      	adds	r1, r0, #4
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	f7f9 f9a4 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801f3e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	dd0b      	ble.n	801f408 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f3f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	dd07      	ble.n	801f408 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f3f8:	6968      	ldr	r0, [r5, #20]
 801f3fa:	b128      	cbz	r0, 801f408 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f3fc:	6803      	ldr	r3, [r0, #0]
 801f3fe:	4621      	mov	r1, r4
 801f400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f406:	4718      	bx	r3
 801f408:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f40c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f40c:	b570      	push	{r4, r5, r6, lr}
 801f40e:	8882      	ldrh	r2, [r0, #4]
 801f410:	460c      	mov	r4, r1
 801f412:	880b      	ldrh	r3, [r1, #0]
 801f414:	4605      	mov	r5, r0
 801f416:	4413      	add	r3, r2
 801f418:	800b      	strh	r3, [r1, #0]
 801f41a:	884b      	ldrh	r3, [r1, #2]
 801f41c:	88c2      	ldrh	r2, [r0, #6]
 801f41e:	4413      	add	r3, r2
 801f420:	804b      	strh	r3, [r1, #2]
 801f422:	1d01      	adds	r1, r0, #4
 801f424:	4620      	mov	r0, r4
 801f426:	f7f9 f983 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801f42a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	dd18      	ble.n	801f464 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f432:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f436:	2b00      	cmp	r3, #0
 801f438:	dd14      	ble.n	801f464 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f43a:	6968      	ldr	r0, [r5, #20]
 801f43c:	b128      	cbz	r0, 801f44a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801f43e:	6803      	ldr	r3, [r0, #0]
 801f440:	4621      	mov	r1, r4
 801f442:	691b      	ldr	r3, [r3, #16]
 801f444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f448:	4718      	bx	r3
 801f44a:	4b07      	ldr	r3, [pc, #28]	; (801f468 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	3304      	adds	r3, #4
 801f450:	429d      	cmp	r5, r3
 801f452:	d107      	bne.n	801f464 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f454:	f7fe ffb4 	bl	801e3c0 <_ZN8touchgfx11Application11getInstanceEv>
 801f458:	6821      	ldr	r1, [r4, #0]
 801f45a:	6862      	ldr	r2, [r4, #4]
 801f45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f460:	f7ff b862 	b.w	801e528 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f464:	bd70      	pop	{r4, r5, r6, pc}
 801f466:	bf00      	nop
 801f468:	2400d870 	.word	0x2400d870

0801f46c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f46c:	b570      	push	{r4, r5, r6, lr}
 801f46e:	4604      	mov	r4, r0
 801f470:	4616      	mov	r6, r2
 801f472:	460d      	mov	r5, r1
 801f474:	b901      	cbnz	r1, 801f478 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f476:	b192      	cbz	r2, 801f49e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801f478:	6823      	ldr	r3, [r4, #0]
 801f47a:	4620      	mov	r0, r4
 801f47c:	699b      	ldr	r3, [r3, #24]
 801f47e:	4798      	blx	r3
 801f480:	88e2      	ldrh	r2, [r4, #6]
 801f482:	88a1      	ldrh	r1, [r4, #4]
 801f484:	4620      	mov	r0, r4
 801f486:	4432      	add	r2, r6
 801f488:	4429      	add	r1, r5
 801f48a:	b212      	sxth	r2, r2
 801f48c:	b209      	sxth	r1, r1
 801f48e:	f7f2 fdc4 	bl	801201a <_ZN8touchgfx8Drawable5setXYEss>
 801f492:	6823      	ldr	r3, [r4, #0]
 801f494:	4620      	mov	r0, r4
 801f496:	699b      	ldr	r3, [r3, #24]
 801f498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f49c:	4718      	bx	r3
 801f49e:	bd70      	pop	{r4, r5, r6, pc}

0801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f4a0:	b510      	push	{r4, lr}
 801f4a2:	2300      	movs	r3, #0
 801f4a4:	4604      	mov	r4, r0
 801f4a6:	4608      	mov	r0, r1
 801f4a8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f4ac:	8023      	strh	r3, [r4, #0]
 801f4ae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f4b2:	8063      	strh	r3, [r4, #2]
 801f4b4:	6803      	ldr	r3, [r0, #0]
 801f4b6:	80a1      	strh	r1, [r4, #4]
 801f4b8:	4621      	mov	r1, r4
 801f4ba:	80e2      	strh	r2, [r4, #6]
 801f4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4be:	4798      	blx	r3
 801f4c0:	4620      	mov	r0, r4
 801f4c2:	bd10      	pop	{r4, pc}

0801f4c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f4c4:	b530      	push	{r4, r5, lr}
 801f4c6:	8083      	strh	r3, [r0, #4]
 801f4c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f4cc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f4d0:	7183      	strb	r3, [r0, #6]
 801f4d2:	79c3      	ldrb	r3, [r0, #7]
 801f4d4:	6101      	str	r1, [r0, #16]
 801f4d6:	f365 0306 	bfi	r3, r5, #0, #7
 801f4da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f4de:	8282      	strh	r2, [r0, #20]
 801f4e0:	f365 13c7 	bfi	r3, r5, #7, #1
 801f4e4:	71c3      	strb	r3, [r0, #7]
 801f4e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f4ea:	7203      	strb	r3, [r0, #8]
 801f4ec:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f4f0:	7243      	strb	r3, [r0, #9]
 801f4f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f4f6:	8143      	strh	r3, [r0, #10]
 801f4f8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f4fc:	8183      	strh	r3, [r0, #12]
 801f4fe:	4b01      	ldr	r3, [pc, #4]	; (801f504 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f500:	6003      	str	r3, [r0, #0]
 801f502:	bd30      	pop	{r4, r5, pc}
 801f504:	08030848 	.word	0x08030848

0801f508 <_ZNK8touchgfx9ConstFont4findEt>:
 801f508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f50a:	6904      	ldr	r4, [r0, #16]
 801f50c:	b3bc      	cbz	r4, 801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f50e:	88a3      	ldrh	r3, [r4, #4]
 801f510:	8a82      	ldrh	r2, [r0, #20]
 801f512:	1acb      	subs	r3, r1, r3
 801f514:	f102 32ff 	add.w	r2, r2, #4294967295
 801f518:	d431      	bmi.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f51a:	4293      	cmp	r3, r2
 801f51c:	dd0c      	ble.n	801f538 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801f51e:	230e      	movs	r3, #14
 801f520:	fb03 4302 	mla	r3, r3, r2, r4
 801f524:	889b      	ldrh	r3, [r3, #4]
 801f526:	1a5b      	subs	r3, r3, r1
 801f528:	1ad3      	subs	r3, r2, r3
 801f52a:	429a      	cmp	r2, r3
 801f52c:	db27      	blt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f52e:	2b00      	cmp	r3, #0
 801f530:	bfbc      	itt	lt
 801f532:	2302      	movlt	r3, #2
 801f534:	fb92 f3f3 	sdivlt	r3, r2, r3
 801f538:	2500      	movs	r5, #0
 801f53a:	260e      	movs	r6, #14
 801f53c:	4295      	cmp	r5, r2
 801f53e:	dc1e      	bgt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f540:	fb06 4003 	mla	r0, r6, r3, r4
 801f544:	8887      	ldrh	r7, [r0, #4]
 801f546:	42b9      	cmp	r1, r7
 801f548:	d01a      	beq.n	801f580 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801f54a:	d20d      	bcs.n	801f568 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801f54c:	1e5a      	subs	r2, r3, #1
 801f54e:	4295      	cmp	r5, r2
 801f550:	dc15      	bgt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f552:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801f556:	1a5b      	subs	r3, r3, r1
 801f558:	1ad3      	subs	r3, r2, r3
 801f55a:	429a      	cmp	r2, r3
 801f55c:	db0f      	blt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f55e:	429d      	cmp	r5, r3
 801f560:	ddec      	ble.n	801f53c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f562:	1953      	adds	r3, r2, r5
 801f564:	105b      	asrs	r3, r3, #1
 801f566:	e7e9      	b.n	801f53c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f568:	1c5d      	adds	r5, r3, #1
 801f56a:	42aa      	cmp	r2, r5
 801f56c:	db07      	blt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f56e:	8a43      	ldrh	r3, [r0, #18]
 801f570:	1acb      	subs	r3, r1, r3
 801f572:	442b      	add	r3, r5
 801f574:	429d      	cmp	r5, r3
 801f576:	dc02      	bgt.n	801f57e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f578:	429a      	cmp	r2, r3
 801f57a:	dadf      	bge.n	801f53c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f57c:	e7f1      	b.n	801f562 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801f57e:	2000      	movs	r0, #0
 801f580:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f582 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f584:	4604      	mov	r4, r0
 801f586:	4617      	mov	r7, r2
 801f588:	461e      	mov	r6, r3
 801f58a:	b911      	cbnz	r1, 801f592 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f58c:	2500      	movs	r5, #0
 801f58e:	4628      	mov	r0, r5
 801f590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f592:	290a      	cmp	r1, #10
 801f594:	d0fa      	beq.n	801f58c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f596:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801f59a:	4291      	cmp	r1, r2
 801f59c:	d0f6      	beq.n	801f58c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f59e:	f242 020b 	movw	r2, #8203	; 0x200b
 801f5a2:	4291      	cmp	r1, r2
 801f5a4:	d0f2      	beq.n	801f58c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f5a6:	f7ff ffaf 	bl	801f508 <_ZNK8touchgfx9ConstFont4findEt>
 801f5aa:	4605      	mov	r5, r0
 801f5ac:	b950      	cbnz	r0, 801f5c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801f5ae:	6823      	ldr	r3, [r4, #0]
 801f5b0:	4620      	mov	r0, r4
 801f5b2:	691b      	ldr	r3, [r3, #16]
 801f5b4:	4798      	blx	r3
 801f5b6:	4601      	mov	r1, r0
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f7ff ffa5 	bl	801f508 <_ZNK8touchgfx9ConstFont4findEt>
 801f5be:	4605      	mov	r5, r0
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d0e3      	beq.n	801f58c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f5c4:	6823      	ldr	r3, [r4, #0]
 801f5c6:	4629      	mov	r1, r5
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f5cc:	4798      	blx	r3
 801f5ce:	6038      	str	r0, [r7, #0]
 801f5d0:	6823      	ldr	r3, [r4, #0]
 801f5d2:	4620      	mov	r0, r4
 801f5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5d6:	4798      	blx	r3
 801f5d8:	7030      	strb	r0, [r6, #0]
 801f5da:	e7d8      	b.n	801f58e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801f5dc <_ZN8touchgfx4clzuEm>:
 801f5dc:	4603      	mov	r3, r0
 801f5de:	b1c8      	cbz	r0, 801f614 <_ZN8touchgfx4clzuEm+0x38>
 801f5e0:	0c02      	lsrs	r2, r0, #16
 801f5e2:	0412      	lsls	r2, r2, #16
 801f5e4:	b9a2      	cbnz	r2, 801f610 <_ZN8touchgfx4clzuEm+0x34>
 801f5e6:	0403      	lsls	r3, r0, #16
 801f5e8:	2010      	movs	r0, #16
 801f5ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f5ee:	bf04      	itt	eq
 801f5f0:	021b      	lsleq	r3, r3, #8
 801f5f2:	3008      	addeq	r0, #8
 801f5f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f5f8:	bf04      	itt	eq
 801f5fa:	011b      	lsleq	r3, r3, #4
 801f5fc:	3004      	addeq	r0, #4
 801f5fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f602:	bf04      	itt	eq
 801f604:	009b      	lsleq	r3, r3, #2
 801f606:	3002      	addeq	r0, #2
 801f608:	2b00      	cmp	r3, #0
 801f60a:	db04      	blt.n	801f616 <_ZN8touchgfx4clzuEm+0x3a>
 801f60c:	3001      	adds	r0, #1
 801f60e:	4770      	bx	lr
 801f610:	2000      	movs	r0, #0
 801f612:	e7ea      	b.n	801f5ea <_ZN8touchgfx4clzuEm+0xe>
 801f614:	2020      	movs	r0, #32
 801f616:	4770      	bx	lr

0801f618 <_ZN8touchgfx7muldivuEmmmRm>:
 801f618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f61c:	4680      	mov	r8, r0
 801f61e:	460f      	mov	r7, r1
 801f620:	4615      	mov	r5, r2
 801f622:	461e      	mov	r6, r3
 801f624:	f7ff ffda 	bl	801f5dc <_ZN8touchgfx4clzuEm>
 801f628:	b998      	cbnz	r0, 801f652 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801f62a:	4608      	mov	r0, r1
 801f62c:	f7ff ffd6 	bl	801f5dc <_ZN8touchgfx4clzuEm>
 801f630:	2800      	cmp	r0, #0
 801f632:	dd08      	ble.n	801f646 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801f634:	4633      	mov	r3, r6
 801f636:	462a      	mov	r2, r5
 801f638:	4641      	mov	r1, r8
 801f63a:	4638      	mov	r0, r7
 801f63c:	f7ff ffec 	bl	801f618 <_ZN8touchgfx7muldivuEmmmRm>
 801f640:	b003      	add	sp, #12
 801f642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f646:	f04f 33ff 	mov.w	r3, #4294967295
 801f64a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801f64e:	6033      	str	r3, [r6, #0]
 801f650:	e7f6      	b.n	801f640 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801f652:	fa31 f900 	lsrs.w	r9, r1, r0
 801f656:	fb01 f308 	mul.w	r3, r1, r8
 801f65a:	d105      	bne.n	801f668 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801f65c:	fbb3 f0f5 	udiv	r0, r3, r5
 801f660:	fb05 3510 	mls	r5, r5, r0, r3
 801f664:	6035      	str	r5, [r6, #0]
 801f666:	e7eb      	b.n	801f640 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801f668:	2301      	movs	r3, #1
 801f66a:	fa08 fb00 	lsl.w	fp, r8, r0
 801f66e:	462a      	mov	r2, r5
 801f670:	4641      	mov	r1, r8
 801f672:	fa03 f000 	lsl.w	r0, r3, r0
 801f676:	4633      	mov	r3, r6
 801f678:	fbbb faf5 	udiv	sl, fp, r5
 801f67c:	3801      	subs	r0, #1
 801f67e:	fb09 f40a 	mul.w	r4, r9, sl
 801f682:	4038      	ands	r0, r7
 801f684:	f7ff ffc8 	bl	801f618 <_ZN8touchgfx7muldivuEmmmRm>
 801f688:	462a      	mov	r2, r5
 801f68a:	4607      	mov	r7, r0
 801f68c:	ab01      	add	r3, sp, #4
 801f68e:	fb05 b11a 	mls	r1, r5, sl, fp
 801f692:	4648      	mov	r0, r9
 801f694:	f7ff ffc0 	bl	801f618 <_ZN8touchgfx7muldivuEmmmRm>
 801f698:	9b01      	ldr	r3, [sp, #4]
 801f69a:	6832      	ldr	r2, [r6, #0]
 801f69c:	441a      	add	r2, r3
 801f69e:	fbb2 f3f5 	udiv	r3, r2, r5
 801f6a2:	441c      	add	r4, r3
 801f6a4:	fb05 2513 	mls	r5, r5, r3, r2
 801f6a8:	443c      	add	r4, r7
 801f6aa:	4420      	add	r0, r4
 801f6ac:	e7da      	b.n	801f664 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801f6ae <_ZN8touchgfx6muldivElllRl>:
 801f6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	461e      	mov	r6, r3
 801f6b4:	bfba      	itte	lt
 801f6b6:	4240      	neglt	r0, r0
 801f6b8:	f04f 34ff 	movlt.w	r4, #4294967295
 801f6bc:	2401      	movge	r4, #1
 801f6be:	2900      	cmp	r1, #0
 801f6c0:	bfbc      	itt	lt
 801f6c2:	4249      	neglt	r1, r1
 801f6c4:	4264      	neglt	r4, r4
 801f6c6:	2a00      	cmp	r2, #0
 801f6c8:	bfb6      	itet	lt
 801f6ca:	4265      	neglt	r5, r4
 801f6cc:	4625      	movge	r5, r4
 801f6ce:	4252      	neglt	r2, r2
 801f6d0:	4288      	cmp	r0, r1
 801f6d2:	bfc2      	ittt	gt
 801f6d4:	4603      	movgt	r3, r0
 801f6d6:	4608      	movgt	r0, r1
 801f6d8:	4619      	movgt	r1, r3
 801f6da:	ab01      	add	r3, sp, #4
 801f6dc:	f7ff ff9c 	bl	801f618 <_ZN8touchgfx7muldivuEmmmRm>
 801f6e0:	9b01      	ldr	r3, [sp, #4]
 801f6e2:	4368      	muls	r0, r5
 801f6e4:	435c      	muls	r4, r3
 801f6e6:	6034      	str	r4, [r6, #0]
 801f6e8:	b002      	add	sp, #8
 801f6ea:	bd70      	pop	{r4, r5, r6, pc}

0801f6ec <_ZN8touchgfx6muldivElll>:
 801f6ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f6ee:	4606      	mov	r6, r0
 801f6f0:	ab01      	add	r3, sp, #4
 801f6f2:	460d      	mov	r5, r1
 801f6f4:	4614      	mov	r4, r2
 801f6f6:	f7ff ffda 	bl	801f6ae <_ZN8touchgfx6muldivElllRl>
 801f6fa:	2e00      	cmp	r6, #0
 801f6fc:	db20      	blt.n	801f740 <_ZN8touchgfx6muldivElll+0x54>
 801f6fe:	bf14      	ite	ne
 801f700:	2301      	movne	r3, #1
 801f702:	2300      	moveq	r3, #0
 801f704:	2d00      	cmp	r5, #0
 801f706:	db1e      	blt.n	801f746 <_ZN8touchgfx6muldivElll+0x5a>
 801f708:	bf14      	ite	ne
 801f70a:	2201      	movne	r2, #1
 801f70c:	2200      	moveq	r2, #0
 801f70e:	2c00      	cmp	r4, #0
 801f710:	fb03 f202 	mul.w	r2, r3, r2
 801f714:	db1a      	blt.n	801f74c <_ZN8touchgfx6muldivElll+0x60>
 801f716:	bf14      	ite	ne
 801f718:	2301      	movne	r3, #1
 801f71a:	2300      	moveq	r3, #0
 801f71c:	4353      	muls	r3, r2
 801f71e:	2b01      	cmp	r3, #1
 801f720:	d117      	bne.n	801f752 <_ZN8touchgfx6muldivElll+0x66>
 801f722:	2c00      	cmp	r4, #0
 801f724:	9b01      	ldr	r3, [sp, #4]
 801f726:	bfb8      	it	lt
 801f728:	4264      	neglt	r4, r4
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	f104 0401 	add.w	r4, r4, #1
 801f730:	bfb8      	it	lt
 801f732:	425b      	neglt	r3, r3
 801f734:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f738:	db00      	blt.n	801f73c <_ZN8touchgfx6muldivElll+0x50>
 801f73a:	3001      	adds	r0, #1
 801f73c:	b002      	add	sp, #8
 801f73e:	bd70      	pop	{r4, r5, r6, pc}
 801f740:	f04f 33ff 	mov.w	r3, #4294967295
 801f744:	e7de      	b.n	801f704 <_ZN8touchgfx6muldivElll+0x18>
 801f746:	f04f 32ff 	mov.w	r2, #4294967295
 801f74a:	e7e0      	b.n	801f70e <_ZN8touchgfx6muldivElll+0x22>
 801f74c:	f04f 33ff 	mov.w	r3, #4294967295
 801f750:	e7e4      	b.n	801f71c <_ZN8touchgfx6muldivElll+0x30>
 801f752:	3301      	adds	r3, #1
 801f754:	d1f2      	bne.n	801f73c <_ZN8touchgfx6muldivElll+0x50>
 801f756:	9b01      	ldr	r3, [sp, #4]
 801f758:	2c00      	cmp	r4, #0
 801f75a:	bfb8      	it	lt
 801f75c:	4264      	neglt	r4, r4
 801f75e:	2b00      	cmp	r3, #0
 801f760:	bfb8      	it	lt
 801f762:	425b      	neglt	r3, r3
 801f764:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f768:	bfc8      	it	gt
 801f76a:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801f76e:	e7e5      	b.n	801f73c <_ZN8touchgfx6muldivElll+0x50>

0801f770 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801f770:	2002      	movs	r0, #2
 801f772:	4770      	bx	lr

0801f774 <_ZN8touchgfx12GestureEventD1Ev>:
 801f774:	4770      	bx	lr

0801f776 <_ZN8touchgfx12GestureEventD0Ev>:
 801f776:	b510      	push	{r4, lr}
 801f778:	4604      	mov	r4, r0
 801f77a:	210c      	movs	r1, #12
 801f77c:	f00d f966 	bl	802ca4c <_ZdlPvj>
 801f780:	4620      	mov	r0, r4
 801f782:	bd10      	pop	{r4, pc}

0801f784 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f784:	b530      	push	{r4, r5, lr}
 801f786:	460d      	mov	r5, r1
 801f788:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f78a:	b087      	sub	sp, #28
 801f78c:	4604      	mov	r4, r0
 801f78e:	b301      	cbz	r1, 801f7d2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f790:	a801      	add	r0, sp, #4
 801f792:	f7ff fe85 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f796:	892a      	ldrh	r2, [r5, #8]
 801f798:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f79c:	7928      	ldrb	r0, [r5, #4]
 801f79e:	1ad2      	subs	r2, r2, r3
 801f7a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f7a2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f7a6:	441a      	add	r2, r3
 801f7a8:	896b      	ldrh	r3, [r5, #10]
 801f7aa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f7ae:	f88d 0010 	strb.w	r0, [sp, #16]
 801f7b2:	1b5b      	subs	r3, r3, r5
 801f7b4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f7b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f7b8:	442b      	add	r3, r5
 801f7ba:	4d07      	ldr	r5, [pc, #28]	; (801f7d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f7bc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f7c0:	a903      	add	r1, sp, #12
 801f7c2:	9503      	str	r5, [sp, #12]
 801f7c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f7c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f7cc:	6803      	ldr	r3, [r0, #0]
 801f7ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f7d0:	4798      	blx	r3
 801f7d2:	b007      	add	sp, #28
 801f7d4:	bd30      	pop	{r4, r5, pc}
 801f7d6:	bf00      	nop
 801f7d8:	080308a0 	.word	0x080308a0

0801f7dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801f7e2:	b08a      	sub	sp, #40	; 0x28
 801f7e4:	4604      	mov	r4, r0
 801f7e6:	460d      	mov	r5, r1
 801f7e8:	b113      	cbz	r3, 801f7f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801f7ea:	790b      	ldrb	r3, [r1, #4]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d044      	beq.n	801f87a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f7f0:	f104 0804 	add.w	r8, r4, #4
 801f7f4:	a803      	add	r0, sp, #12
 801f7f6:	4641      	mov	r1, r8
 801f7f8:	f7ff fe52 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f7fc:	792b      	ldrb	r3, [r5, #4]
 801f7fe:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801f802:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f806:	b983      	cbnz	r3, 801f82a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801f808:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801f80c:	892a      	ldrh	r2, [r5, #8]
 801f80e:	88e9      	ldrh	r1, [r5, #6]
 801f810:	4640      	mov	r0, r8
 801f812:	1b92      	subs	r2, r2, r6
 801f814:	9301      	str	r3, [sp, #4]
 801f816:	1bc9      	subs	r1, r1, r7
 801f818:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801f81c:	b212      	sxth	r2, r2
 801f81e:	9300      	str	r3, [sp, #0]
 801f820:	b209      	sxth	r1, r1
 801f822:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f826:	f7f8 fea1 	bl	801856c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801f82a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f82c:	b329      	cbz	r1, 801f87a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f82e:	a805      	add	r0, sp, #20
 801f830:	f7ff fe36 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f834:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f838:	792b      	ldrb	r3, [r5, #4]
 801f83a:	a907      	add	r1, sp, #28
 801f83c:	1abf      	subs	r7, r7, r2
 801f83e:	88ea      	ldrh	r2, [r5, #6]
 801f840:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f842:	4417      	add	r7, r2
 801f844:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801f846:	f88d 3020 	strb.w	r3, [sp, #32]
 801f84a:	4417      	add	r7, r2
 801f84c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f850:	1ab6      	subs	r6, r6, r2
 801f852:	892a      	ldrh	r2, [r5, #8]
 801f854:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801f858:	4416      	add	r6, r2
 801f85a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f85c:	4416      	add	r6, r2
 801f85e:	4a08      	ldr	r2, [pc, #32]	; (801f880 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801f860:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801f864:	2600      	movs	r6, #0
 801f866:	9207      	str	r2, [sp, #28]
 801f868:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801f86c:	6803      	ldr	r3, [r0, #0]
 801f86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f870:	4798      	blx	r3
 801f872:	792b      	ldrb	r3, [r5, #4]
 801f874:	b10b      	cbz	r3, 801f87a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f876:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801f87a:	b00a      	add	sp, #40	; 0x28
 801f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f880:	08030000 	.word	0x08030000

0801f884 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f888:	460c      	mov	r4, r1
 801f88a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f88c:	b088      	sub	sp, #32
 801f88e:	4605      	mov	r5, r0
 801f890:	2900      	cmp	r1, #0
 801f892:	d06d      	beq.n	801f970 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801f894:	4668      	mov	r0, sp
 801f896:	f7ff fe03 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f89a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801f89c:	88e3      	ldrh	r3, [r4, #6]
 801f89e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801f8a2:	440b      	add	r3, r1
 801f8a4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801f8a8:	b21b      	sxth	r3, r3
 801f8aa:	4543      	cmp	r3, r8
 801f8ac:	db31      	blt.n	801f912 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f8ae:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801f8b2:	44c4      	add	ip, r8
 801f8b4:	fa0f fc8c 	sxth.w	ip, ip
 801f8b8:	4563      	cmp	r3, ip
 801f8ba:	da2a      	bge.n	801f912 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f8bc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801f8be:	8926      	ldrh	r6, [r4, #8]
 801f8c0:	4416      	add	r6, r2
 801f8c2:	b236      	sxth	r6, r6
 801f8c4:	42be      	cmp	r6, r7
 801f8c6:	db24      	blt.n	801f912 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f8c8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f8cc:	4438      	add	r0, r7
 801f8ce:	b200      	sxth	r0, r0
 801f8d0:	4286      	cmp	r6, r0
 801f8d2:	da1e      	bge.n	801f912 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f8d4:	8963      	ldrh	r3, [r4, #10]
 801f8d6:	4419      	add	r1, r3
 801f8d8:	b209      	sxth	r1, r1
 801f8da:	4541      	cmp	r1, r8
 801f8dc:	db08      	blt.n	801f8f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f8de:	4561      	cmp	r1, ip
 801f8e0:	da06      	bge.n	801f8f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f8e2:	89a3      	ldrh	r3, [r4, #12]
 801f8e4:	441a      	add	r2, r3
 801f8e6:	b212      	sxth	r2, r2
 801f8e8:	42ba      	cmp	r2, r7
 801f8ea:	db01      	blt.n	801f8f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f8ec:	4282      	cmp	r2, r0
 801f8ee:	db10      	blt.n	801f912 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f8f0:	4b21      	ldr	r3, [pc, #132]	; (801f978 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801f8f2:	a904      	add	r1, sp, #16
 801f8f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f8f6:	9304      	str	r3, [sp, #16]
 801f8f8:	2302      	movs	r3, #2
 801f8fa:	f88d 3014 	strb.w	r3, [sp, #20]
 801f8fe:	2300      	movs	r3, #0
 801f900:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f904:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f908:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f90c:	6803      	ldr	r3, [r0, #0]
 801f90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f910:	4798      	blx	r3
 801f912:	1d29      	adds	r1, r5, #4
 801f914:	a802      	add	r0, sp, #8
 801f916:	f7ff fdc3 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f91a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f91e:	88e0      	ldrh	r0, [r4, #6]
 801f920:	eba3 0808 	sub.w	r8, r3, r8
 801f924:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f928:	7921      	ldrb	r1, [r4, #4]
 801f92a:	fa1f f888 	uxth.w	r8, r8
 801f92e:	1bdf      	subs	r7, r3, r7
 801f930:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801f934:	b2bb      	uxth	r3, r7
 801f936:	4440      	add	r0, r8
 801f938:	8922      	ldrh	r2, [r4, #8]
 801f93a:	8967      	ldrh	r7, [r4, #10]
 801f93c:	4460      	add	r0, ip
 801f93e:	89a4      	ldrh	r4, [r4, #12]
 801f940:	441a      	add	r2, r3
 801f942:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f944:	44b8      	add	r8, r7
 801f946:	4423      	add	r3, r4
 801f948:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f94c:	4432      	add	r2, r6
 801f94e:	44e0      	add	r8, ip
 801f950:	4433      	add	r3, r6
 801f952:	4c0a      	ldr	r4, [pc, #40]	; (801f97c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801f954:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f956:	f88d 1014 	strb.w	r1, [sp, #20]
 801f95a:	a904      	add	r1, sp, #16
 801f95c:	9404      	str	r4, [sp, #16]
 801f95e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f962:	f8ad 801a 	strh.w	r8, [sp, #26]
 801f966:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f96a:	6803      	ldr	r3, [r0, #0]
 801f96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f96e:	4798      	blx	r3
 801f970:	b008      	add	sp, #32
 801f972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f976:	bf00      	nop
 801f978:	08030000 	.word	0x08030000
 801f97c:	08030014 	.word	0x08030014

0801f980 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f982:	4604      	mov	r4, r0
 801f984:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f988:	3201      	adds	r2, #1
 801f98a:	d112      	bne.n	801f9b2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801f98c:	2500      	movs	r5, #0
 801f98e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f992:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f996:	6803      	ldr	r3, [r0, #0]
 801f998:	9500      	str	r5, [sp, #0]
 801f99a:	466d      	mov	r5, sp
 801f99c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f9a0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f9a4:	4629      	mov	r1, r5
 801f9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9a8:	4798      	blx	r3
 801f9aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f9ae:	e884 0003 	stmia.w	r4, {r0, r1}
 801f9b2:	4620      	mov	r0, r4
 801f9b4:	b003      	add	sp, #12
 801f9b6:	bd30      	pop	{r4, r5, pc}

0801f9b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f9b8:	b513      	push	{r0, r1, r4, lr}
 801f9ba:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f9be:	4604      	mov	r4, r0
 801f9c0:	3301      	adds	r3, #1
 801f9c2:	d109      	bne.n	801f9d8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f9c4:	4601      	mov	r1, r0
 801f9c6:	4668      	mov	r0, sp
 801f9c8:	f7ff fd6a 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f9cc:	f8bd 3000 	ldrh.w	r3, [sp]
 801f9d0:	8423      	strh	r3, [r4, #32]
 801f9d2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f9d6:	8463      	strh	r3, [r4, #34]	; 0x22
 801f9d8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f9dc:	b002      	add	sp, #8
 801f9de:	bd10      	pop	{r4, pc}

0801f9e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f9e0:	b513      	push	{r0, r1, r4, lr}
 801f9e2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f9e6:	4604      	mov	r4, r0
 801f9e8:	3301      	adds	r3, #1
 801f9ea:	d109      	bne.n	801fa00 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f9ec:	4601      	mov	r1, r0
 801f9ee:	4668      	mov	r0, sp
 801f9f0:	f7ff fd56 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f9f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801f9f8:	8423      	strh	r3, [r4, #32]
 801f9fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f9fe:	8463      	strh	r3, [r4, #34]	; 0x22
 801fa00:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801fa04:	b002      	add	sp, #8
 801fa06:	bd10      	pop	{r4, pc}

0801fa08 <_ZN8touchgfx6ScreenC1Ev>:
 801fa08:	b570      	push	{r4, r5, r6, lr}
 801fa0a:	4b17      	ldr	r3, [pc, #92]	; (801fa68 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801fa0c:	4605      	mov	r5, r0
 801fa0e:	4a17      	ldr	r2, [pc, #92]	; (801fa6c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801fa10:	2101      	movs	r1, #1
 801fa12:	f845 3b04 	str.w	r3, [r5], #4
 801fa16:	2300      	movs	r3, #0
 801fa18:	6042      	str	r2, [r0, #4]
 801fa1a:	4604      	mov	r4, r0
 801fa1c:	8103      	strh	r3, [r0, #8]
 801fa1e:	8143      	strh	r3, [r0, #10]
 801fa20:	8183      	strh	r3, [r0, #12]
 801fa22:	81c3      	strh	r3, [r0, #14]
 801fa24:	8203      	strh	r3, [r0, #16]
 801fa26:	8243      	strh	r3, [r0, #18]
 801fa28:	8283      	strh	r3, [r0, #20]
 801fa2a:	82c3      	strh	r3, [r0, #22]
 801fa2c:	6203      	str	r3, [r0, #32]
 801fa2e:	8483      	strh	r3, [r0, #36]	; 0x24
 801fa30:	84c3      	strh	r3, [r0, #38]	; 0x26
 801fa32:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801fa36:	6343      	str	r3, [r0, #52]	; 0x34
 801fa38:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801fa3c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801fa40:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801fa44:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801fa48:	4b09      	ldr	r3, [pc, #36]	; (801fa70 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801fa4a:	4628      	mov	r0, r5
 801fa4c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801fa50:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801fa52:	4a08      	ldr	r2, [pc, #32]	; (801fa74 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801fa54:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fa58:	4798      	blx	r3
 801fa5a:	6863      	ldr	r3, [r4, #4]
 801fa5c:	4628      	mov	r0, r5
 801fa5e:	4631      	mov	r1, r6
 801fa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fa62:	4798      	blx	r3
 801fa64:	4620      	mov	r0, r4
 801fa66:	bd70      	pop	{r4, r5, r6, pc}
 801fa68:	080308b4 	.word	0x080308b4
 801fa6c:	0802fea8 	.word	0x0802fea8
 801fa70:	2400d822 	.word	0x2400d822
 801fa74:	2400d820 	.word	0x2400d820

0801fa78 <_ZN8touchgfx6Screen4drawEv>:
 801fa78:	4b09      	ldr	r3, [pc, #36]	; (801faa0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801fa7a:	b507      	push	{r0, r1, r2, lr}
 801fa7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fa80:	2100      	movs	r1, #0
 801fa82:	4b08      	ldr	r3, [pc, #32]	; (801faa4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801fa84:	9100      	str	r1, [sp, #0]
 801fa86:	4669      	mov	r1, sp
 801fa88:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fa8c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801fa90:	f8ad 3006 	strh.w	r3, [sp, #6]
 801fa94:	6803      	ldr	r3, [r0, #0]
 801fa96:	689b      	ldr	r3, [r3, #8]
 801fa98:	4798      	blx	r3
 801fa9a:	b003      	add	sp, #12
 801fa9c:	f85d fb04 	ldr.w	pc, [sp], #4
 801faa0:	2400d820 	.word	0x2400d820
 801faa4:	2400d822 	.word	0x2400d822

0801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801fab0:	b089      	sub	sp, #36	; 0x24
 801fab2:	4680      	mov	r8, r0
 801fab4:	460c      	mov	r4, r1
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	4615      	mov	r5, r2
 801faba:	dd0e      	ble.n	801fada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fabc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	dd0a      	ble.n	801fada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fac4:	4628      	mov	r0, r5
 801fac6:	f7ff ff5b 	bl	801f980 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801faca:	4621      	mov	r1, r4
 801facc:	f7fe fbe0 	bl	801e290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801fad0:	69eb      	ldr	r3, [r5, #28]
 801fad2:	b928      	cbnz	r0, 801fae0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801fad4:	461d      	mov	r5, r3
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d1f4      	bne.n	801fac4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801fada:	b009      	add	sp, #36	; 0x24
 801fadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fae0:	ae04      	add	r6, sp, #16
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	f000 80b5 	beq.w	801fc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fae8:	682b      	ldr	r3, [r5, #0]
 801faea:	4629      	mov	r1, r5
 801faec:	a802      	add	r0, sp, #8
 801faee:	68db      	ldr	r3, [r3, #12]
 801faf0:	4798      	blx	r3
 801faf2:	4628      	mov	r0, r5
 801faf4:	f7ff ff60 	bl	801f9b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801faf8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801fafc:	4407      	add	r7, r0
 801fafe:	4628      	mov	r0, r5
 801fb00:	f7ff ff6e 	bl	801f9e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fb04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fb08:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801fb0c:	b23f      	sxth	r7, r7
 801fb0e:	4418      	add	r0, r3
 801fb10:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801fb14:	4621      	mov	r1, r4
 801fb16:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fb1a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fb1e:	4630      	mov	r0, r6
 801fb20:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fb24:	f8ad 7010 	strh.w	r7, [sp, #16]
 801fb28:	f7f8 fe02 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801fb2c:	4628      	mov	r0, r5
 801fb2e:	f7ff ff27 	bl	801f980 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fb32:	ab06      	add	r3, sp, #24
 801fb34:	4602      	mov	r2, r0
 801fb36:	e896 0003 	ldmia.w	r6, {r0, r1}
 801fb3a:	e883 0003 	stmia.w	r3, {r0, r1}
 801fb3e:	4611      	mov	r1, r2
 801fb40:	4618      	mov	r0, r3
 801fb42:	f7f8 fdf5 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801fb46:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801fb4a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801fb4e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801fb52:	4299      	cmp	r1, r3
 801fb54:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801fb58:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801fb5c:	d10b      	bne.n	801fb76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fb5e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fb62:	4552      	cmp	r2, sl
 801fb64:	d107      	bne.n	801fb76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fb66:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801fb6a:	455a      	cmp	r2, fp
 801fb6c:	d103      	bne.n	801fb76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fb6e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801fb72:	454a      	cmp	r2, r9
 801fb74:	d06d      	beq.n	801fc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fb76:	f1bb 0f00 	cmp.w	fp, #0
 801fb7a:	dd65      	ble.n	801fc48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fb7c:	f1b9 0f00 	cmp.w	r9, #0
 801fb80:	dd62      	ble.n	801fc48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fb82:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fb86:	fa1f f08a 	uxth.w	r0, sl
 801fb8a:	4552      	cmp	r2, sl
 801fb8c:	9000      	str	r0, [sp, #0]
 801fb8e:	da12      	bge.n	801fbb6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801fb90:	9301      	str	r3, [sp, #4]
 801fb92:	9b00      	ldr	r3, [sp, #0]
 801fb94:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fb98:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fb9c:	1a9a      	subs	r2, r3, r2
 801fb9e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801fba2:	4631      	mov	r1, r6
 801fba4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fba8:	4640      	mov	r0, r8
 801fbaa:	f8ad 2016 	strh.w	r2, [sp, #22]
 801fbae:	69ea      	ldr	r2, [r5, #28]
 801fbb0:	f7ff ff7a 	bl	801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fbb4:	9b01      	ldr	r3, [sp, #4]
 801fbb6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801fbba:	b29f      	uxth	r7, r3
 801fbbc:	429a      	cmp	r2, r3
 801fbbe:	da0d      	bge.n	801fbdc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801fbc0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fbc4:	1aba      	subs	r2, r7, r2
 801fbc6:	f8ad a012 	strh.w	sl, [sp, #18]
 801fbca:	4631      	mov	r1, r6
 801fbcc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fbd0:	4640      	mov	r0, r8
 801fbd2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fbd6:	69ea      	ldr	r2, [r5, #28]
 801fbd8:	f7ff ff66 	bl	801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fbdc:	8822      	ldrh	r2, [r4, #0]
 801fbde:	445f      	add	r7, fp
 801fbe0:	88a3      	ldrh	r3, [r4, #4]
 801fbe2:	b2bf      	uxth	r7, r7
 801fbe4:	4413      	add	r3, r2
 801fbe6:	b23a      	sxth	r2, r7
 801fbe8:	b29b      	uxth	r3, r3
 801fbea:	b219      	sxth	r1, r3
 801fbec:	4291      	cmp	r1, r2
 801fbee:	dd0d      	ble.n	801fc0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801fbf0:	1bdb      	subs	r3, r3, r7
 801fbf2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fbf6:	f8ad a012 	strh.w	sl, [sp, #18]
 801fbfa:	4631      	mov	r1, r6
 801fbfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801fc00:	4640      	mov	r0, r8
 801fc02:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fc06:	69ea      	ldr	r2, [r5, #28]
 801fc08:	f7ff ff4e 	bl	801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fc0c:	88e2      	ldrh	r2, [r4, #6]
 801fc0e:	8863      	ldrh	r3, [r4, #2]
 801fc10:	4413      	add	r3, r2
 801fc12:	9a00      	ldr	r2, [sp, #0]
 801fc14:	444a      	add	r2, r9
 801fc16:	b29b      	uxth	r3, r3
 801fc18:	fa1f f982 	uxth.w	r9, r2
 801fc1c:	b219      	sxth	r1, r3
 801fc1e:	fa0f f289 	sxth.w	r2, r9
 801fc22:	428a      	cmp	r2, r1
 801fc24:	da15      	bge.n	801fc52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fc26:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fc2a:	eba3 0309 	sub.w	r3, r3, r9
 801fc2e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fc32:	f8ad 1014 	strh.w	r1, [sp, #20]
 801fc36:	4631      	mov	r1, r6
 801fc38:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fc3c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fc40:	f8ad 3016 	strh.w	r3, [sp, #22]
 801fc44:	69ea      	ldr	r2, [r5, #28]
 801fc46:	e001      	b.n	801fc4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801fc48:	69ea      	ldr	r2, [r5, #28]
 801fc4a:	4621      	mov	r1, r4
 801fc4c:	4640      	mov	r0, r8
 801fc4e:	f7ff ff2b 	bl	801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fc52:	4628      	mov	r0, r5
 801fc54:	f7ff fe94 	bl	801f980 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fc58:	6861      	ldr	r1, [r4, #4]
 801fc5a:	4602      	mov	r2, r0
 801fc5c:	4633      	mov	r3, r6
 801fc5e:	6820      	ldr	r0, [r4, #0]
 801fc60:	c303      	stmia	r3!, {r0, r1}
 801fc62:	4611      	mov	r1, r2
 801fc64:	4630      	mov	r0, r6
 801fc66:	f7f8 fd63 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801fc6a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	f77f af33 	ble.w	801fada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fc74:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fc78:	2b00      	cmp	r3, #0
 801fc7a:	f77f af2e 	ble.w	801fada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fc7e:	4628      	mov	r0, r5
 801fc80:	f7ff fe9a 	bl	801f9b8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fc84:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801fc88:	1a18      	subs	r0, r3, r0
 801fc8a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fc8e:	4628      	mov	r0, r5
 801fc90:	f7ff fea6 	bl	801f9e0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fc94:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fc98:	4631      	mov	r1, r6
 801fc9a:	1a18      	subs	r0, r3, r0
 801fc9c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fca0:	4628      	mov	r0, r5
 801fca2:	682b      	ldr	r3, [r5, #0]
 801fca4:	689b      	ldr	r3, [r3, #8]
 801fca6:	4798      	blx	r3
 801fca8:	e717      	b.n	801fada <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801fcaa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801fcaa:	b570      	push	{r4, r5, r6, lr}
 801fcac:	1d06      	adds	r6, r0, #4
 801fcae:	b086      	sub	sp, #24
 801fcb0:	460c      	mov	r4, r1
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	4631      	mov	r1, r6
 801fcb6:	4605      	mov	r5, r0
 801fcb8:	a802      	add	r0, sp, #8
 801fcba:	9301      	str	r3, [sp, #4]
 801fcbc:	f7ff fbf0 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fcc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fcc4:	8822      	ldrh	r2, [r4, #0]
 801fcc6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801fcca:	1ad2      	subs	r2, r2, r3
 801fccc:	8863      	ldrh	r3, [r4, #2]
 801fcce:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fcd2:	1a5b      	subs	r3, r3, r1
 801fcd4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801fcd8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fcdc:	aa01      	add	r2, sp, #4
 801fcde:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fce2:	4630      	mov	r0, r6
 801fce4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801fce8:	a904      	add	r1, sp, #16
 801fcea:	f8ad 3012 	strh.w	r3, [sp, #18]
 801fcee:	f7f8 fdf7 	bl	80188e0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fcf2:	9a01      	ldr	r2, [sp, #4]
 801fcf4:	b11a      	cbz	r2, 801fcfe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801fcf6:	4621      	mov	r1, r4
 801fcf8:	4628      	mov	r0, r5
 801fcfa:	f7ff fed5 	bl	801faa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fcfe:	b006      	add	sp, #24
 801fd00:	bd70      	pop	{r4, r5, r6, pc}

0801fd02 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fd02:	4602      	mov	r2, r0
 801fd04:	b530      	push	{r4, r5, lr}
 801fd06:	4604      	mov	r4, r0
 801fd08:	b085      	sub	sp, #20
 801fd0a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fd0e:	460d      	mov	r5, r1
 801fd10:	466b      	mov	r3, sp
 801fd12:	6851      	ldr	r1, [r2, #4]
 801fd14:	c303      	stmia	r3!, {r0, r1}
 801fd16:	4629      	mov	r1, r5
 801fd18:	4668      	mov	r0, sp
 801fd1a:	f7f8 fd09 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 801fd1e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801fd22:	b12b      	cbz	r3, 801fd30 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801fd24:	4669      	mov	r1, sp
 801fd26:	4620      	mov	r0, r4
 801fd28:	f7ff ffbf 	bl	801fcaa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801fd2c:	b005      	add	sp, #20
 801fd2e:	bd30      	pop	{r4, r5, pc}
 801fd30:	3404      	adds	r4, #4
 801fd32:	a802      	add	r0, sp, #8
 801fd34:	4621      	mov	r1, r4
 801fd36:	f7ff fbb3 	bl	801f4a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fd3a:	f8bd 3000 	ldrh.w	r3, [sp]
 801fd3e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fd42:	4669      	mov	r1, sp
 801fd44:	4620      	mov	r0, r4
 801fd46:	1a9b      	subs	r3, r3, r2
 801fd48:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801fd4c:	f8ad 3000 	strh.w	r3, [sp]
 801fd50:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fd54:	1a9b      	subs	r3, r3, r2
 801fd56:	f8ad 3002 	strh.w	r3, [sp, #2]
 801fd5a:	f7f8 fd88 	bl	801886e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fd5e:	e7e5      	b.n	801fd2c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801fd60 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fd60:	460b      	mov	r3, r1
 801fd62:	680a      	ldr	r2, [r1, #0]
 801fd64:	1d01      	adds	r1, r0, #4
 801fd66:	6992      	ldr	r2, [r2, #24]
 801fd68:	4618      	mov	r0, r3
 801fd6a:	4710      	bx	r2

0801fd6c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801fd6c:	4298      	cmp	r0, r3
 801fd6e:	d200      	bcs.n	801fd72 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801fd70:	b913      	cbnz	r3, 801fd78 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801fd72:	440a      	add	r2, r1
 801fd74:	b210      	sxth	r0, r2
 801fd76:	4770      	bx	lr
 801fd78:	ee07 0a90 	vmov	s15, r0
 801fd7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801fd80:	ee07 3a90 	vmov	s15, r3
 801fd84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fd88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801fd8c:	ee07 2a90 	vmov	s15, r2
 801fd90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fd94:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801fd98:	ee07 1a90 	vmov	s15, r1
 801fd9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fda0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801fda4:	ee67 5a07 	vmul.f32	s11, s14, s14
 801fda8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801fdac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801fdb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 801fdb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdbc:	bfcc      	ite	gt
 801fdbe:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801fdc2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801fdc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fdca:	ee17 3a90 	vmov	r3, s15
 801fdce:	b218      	sxth	r0, r3
 801fdd0:	4770      	bx	lr

0801fdd2 <_ZN8touchgfx12TextProviderC1Ev>:
 801fdd2:	b538      	push	{r3, r4, r5, lr}
 801fdd4:	2500      	movs	r5, #0
 801fdd6:	2302      	movs	r3, #2
 801fdd8:	4604      	mov	r4, r0
 801fdda:	220e      	movs	r2, #14
 801fddc:	7403      	strb	r3, [r0, #16]
 801fdde:	4629      	mov	r1, r5
 801fde0:	6145      	str	r5, [r0, #20]
 801fde2:	7605      	strb	r5, [r0, #24]
 801fde4:	83c5      	strh	r5, [r0, #30]
 801fde6:	8405      	strh	r5, [r0, #32]
 801fde8:	86c5      	strh	r5, [r0, #54]	; 0x36
 801fdea:	8705      	strh	r5, [r0, #56]	; 0x38
 801fdec:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801fdee:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801fdf2:	e9c0 5500 	strd	r5, r5, [r0]
 801fdf6:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801fdfa:	304c      	adds	r0, #76	; 0x4c
 801fdfc:	f00c fee0 	bl	802cbc0 <memset>
 801fe00:	2301      	movs	r3, #1
 801fe02:	4620      	mov	r0, r4
 801fe04:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801fe08:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801fe0c:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801fe10:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801fe14:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801fe18:	f7f5 fa2a 	bl	8015270 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fe1c:	4620      	mov	r0, r4
 801fe1e:	bd38      	pop	{r3, r4, r5, pc}

0801fe20 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801fe20:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801fe22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fe26:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801fe28:	fab0 f080 	clz	r0, r0
 801fe2c:	0940      	lsrs	r0, r0, #5
 801fe2e:	4770      	bx	lr

0801fe30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fe30:	b530      	push	{r4, r5, lr}
 801fe32:	2500      	movs	r5, #0
 801fe34:	2401      	movs	r4, #1
 801fe36:	6843      	ldr	r3, [r0, #4]
 801fe38:	b913      	cbnz	r3, 801fe40 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801fe3a:	6803      	ldr	r3, [r0, #0]
 801fe3c:	b313      	cbz	r3, 801fe84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fe3e:	6043      	str	r3, [r0, #4]
 801fe40:	7e03      	ldrb	r3, [r0, #24]
 801fe42:	b143      	cbz	r3, 801fe56 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801fe44:	6943      	ldr	r3, [r0, #20]
 801fe46:	b12b      	cbz	r3, 801fe54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe48:	881a      	ldrh	r2, [r3, #0]
 801fe4a:	b11a      	cbz	r2, 801fe54 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fe4c:	1c9a      	adds	r2, r3, #2
 801fe4e:	6142      	str	r2, [r0, #20]
 801fe50:	8818      	ldrh	r0, [r3, #0]
 801fe52:	bd30      	pop	{r4, r5, pc}
 801fe54:	7605      	strb	r5, [r0, #24]
 801fe56:	6843      	ldr	r3, [r0, #4]
 801fe58:	8819      	ldrh	r1, [r3, #0]
 801fe5a:	b199      	cbz	r1, 801fe84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fe5c:	1c9a      	adds	r2, r3, #2
 801fe5e:	2902      	cmp	r1, #2
 801fe60:	6042      	str	r2, [r0, #4]
 801fe62:	d1f5      	bne.n	801fe50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801fe64:	7c03      	ldrb	r3, [r0, #16]
 801fe66:	2b01      	cmp	r3, #1
 801fe68:	d8e5      	bhi.n	801fe36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fe6a:	1c5a      	adds	r2, r3, #1
 801fe6c:	3302      	adds	r3, #2
 801fe6e:	7402      	strb	r2, [r0, #16]
 801fe70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801fe74:	6143      	str	r3, [r0, #20]
 801fe76:	2b00      	cmp	r3, #0
 801fe78:	d0dd      	beq.n	801fe36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fe7a:	881b      	ldrh	r3, [r3, #0]
 801fe7c:	2b00      	cmp	r3, #0
 801fe7e:	d0da      	beq.n	801fe36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fe80:	7604      	strb	r4, [r0, #24]
 801fe82:	e7d8      	b.n	801fe36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fe84:	2000      	movs	r0, #0
 801fe86:	e7e4      	b.n	801fe52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801fe88:	6001      	str	r1, [r0, #0]
 801fe8a:	2100      	movs	r1, #0
 801fe8c:	b430      	push	{r4, r5}
 801fe8e:	6041      	str	r1, [r0, #4]
 801fe90:	6815      	ldr	r5, [r2, #0]
 801fe92:	6085      	str	r5, [r0, #8]
 801fe94:	6852      	ldr	r2, [r2, #4]
 801fe96:	6443      	str	r3, [r0, #68]	; 0x44
 801fe98:	9b02      	ldr	r3, [sp, #8]
 801fe9a:	60c2      	str	r2, [r0, #12]
 801fe9c:	7401      	strb	r1, [r0, #16]
 801fe9e:	6141      	str	r1, [r0, #20]
 801fea0:	7601      	strb	r1, [r0, #24]
 801fea2:	8701      	strh	r1, [r0, #56]	; 0x38
 801fea4:	8401      	strh	r1, [r0, #32]
 801fea6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801feaa:	6483      	str	r3, [r0, #72]	; 0x48
 801feac:	bc30      	pop	{r4, r5}
 801feae:	f7f5 b9df 	b.w	8015270 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801feb2 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801feb2:	b408      	push	{r3}
 801feb4:	b510      	push	{r4, lr}
 801feb6:	b085      	sub	sp, #20
 801feb8:	ac07      	add	r4, sp, #28
 801feba:	f854 3b04 	ldr.w	r3, [r4], #4
 801febe:	9300      	str	r3, [sp, #0]
 801fec0:	4613      	mov	r3, r2
 801fec2:	4622      	mov	r2, r4
 801fec4:	9403      	str	r4, [sp, #12]
 801fec6:	f7ff ffdf 	bl	801fe88 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801feca:	b005      	add	sp, #20
 801fecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fed0:	b001      	add	sp, #4
 801fed2:	4770      	bx	lr

0801fed4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801fed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fed6:	4605      	mov	r5, r0
 801fed8:	4608      	mov	r0, r1
 801feda:	b1f1      	cbz	r1, 801ff1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801fedc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801fee0:	460b      	mov	r3, r1
 801fee2:	f101 0708 	add.w	r7, r1, #8
 801fee6:	4622      	mov	r2, r4
 801fee8:	6818      	ldr	r0, [r3, #0]
 801feea:	3308      	adds	r3, #8
 801feec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fef0:	4626      	mov	r6, r4
 801fef2:	42bb      	cmp	r3, r7
 801fef4:	c603      	stmia	r6!, {r0, r1}
 801fef6:	4634      	mov	r4, r6
 801fef8:	d1f6      	bne.n	801fee8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801fefa:	6818      	ldr	r0, [r3, #0]
 801fefc:	6030      	str	r0, [r6, #0]
 801fefe:	4610      	mov	r0, r2
 801ff00:	889b      	ldrh	r3, [r3, #4]
 801ff02:	80b3      	strh	r3, [r6, #4]
 801ff04:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801ff08:	015b      	lsls	r3, r3, #5
 801ff0a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ff0e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ff12:	430b      	orrs	r3, r1
 801ff14:	425b      	negs	r3, r3
 801ff16:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ff1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ff1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ff1c:	b538      	push	{r3, r4, r5, lr}
 801ff1e:	460c      	mov	r4, r1
 801ff20:	6811      	ldr	r1, [r2, #0]
 801ff22:	4610      	mov	r0, r2
 801ff24:	68cd      	ldr	r5, [r1, #12]
 801ff26:	4619      	mov	r1, r3
 801ff28:	47a8      	blx	r5
 801ff2a:	2800      	cmp	r0, #0
 801ff2c:	bf08      	it	eq
 801ff2e:	4620      	moveq	r0, r4
 801ff30:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ff34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff36:	4604      	mov	r4, r0
 801ff38:	4615      	mov	r5, r2
 801ff3a:	4608      	mov	r0, r1
 801ff3c:	b93a      	cbnz	r2, 801ff4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ff3e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ff42:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ff46:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ff4a:	4628      	mov	r0, r5
 801ff4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff4e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ff52:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ff56:	8893      	ldrh	r3, [r2, #4]
 801ff58:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ff5c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ff60:	79ee      	ldrb	r6, [r5, #7]
 801ff62:	4316      	orrs	r6, r2
 801ff64:	19da      	adds	r2, r3, r7
 801ff66:	b291      	uxth	r1, r2
 801ff68:	b2b7      	uxth	r7, r6
 801ff6a:	291d      	cmp	r1, #29
 801ff6c:	d87b      	bhi.n	8020066 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ff6e:	2201      	movs	r2, #1
 801ff70:	10f6      	asrs	r6, r6, #3
 801ff72:	408a      	lsls	r2, r1
 801ff74:	4974      	ldr	r1, [pc, #464]	; (8020148 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ff76:	420a      	tst	r2, r1
 801ff78:	d12e      	bne.n	801ffd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ff7a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ff7e:	d072      	beq.n	8020066 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ff80:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ff84:	462b      	mov	r3, r5
 801ff86:	f105 0e08 	add.w	lr, r5, #8
 801ff8a:	4615      	mov	r5, r2
 801ff8c:	6818      	ldr	r0, [r3, #0]
 801ff8e:	3308      	adds	r3, #8
 801ff90:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ff94:	4694      	mov	ip, r2
 801ff96:	4573      	cmp	r3, lr
 801ff98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ff9c:	4662      	mov	r2, ip
 801ff9e:	d1f5      	bne.n	801ff8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ffa0:	6818      	ldr	r0, [r3, #0]
 801ffa2:	f8cc 0000 	str.w	r0, [ip]
 801ffa6:	889b      	ldrh	r3, [r3, #4]
 801ffa8:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ffac:	b2b3      	uxth	r3, r6
 801ffae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ffb2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ffb6:	1aca      	subs	r2, r1, r3
 801ffb8:	1bcf      	subs	r7, r1, r7
 801ffba:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801ffbe:	b292      	uxth	r2, r2
 801ffc0:	1afb      	subs	r3, r7, r3
 801ffc2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801ffc6:	10d2      	asrs	r2, r2, #3
 801ffc8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801ffcc:	4302      	orrs	r2, r0
 801ffce:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801ffd2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ffd6:	e7b8      	b.n	801ff4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ffd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ffda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ffde:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ffe0:	f640 6333 	movw	r3, #3635	; 0xe33
 801ffe4:	4299      	cmp	r1, r3
 801ffe6:	d110      	bne.n	802000a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801ffe8:	6803      	ldr	r3, [r0, #0]
 801ffea:	68db      	ldr	r3, [r3, #12]
 801ffec:	4798      	blx	r3
 801ffee:	7b41      	ldrb	r1, [r0, #13]
 801fff0:	00cb      	lsls	r3, r1, #3
 801fff2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fff6:	7a03      	ldrb	r3, [r0, #8]
 801fff8:	0648      	lsls	r0, r1, #25
 801fffa:	ea43 0302 	orr.w	r3, r3, r2
 801fffe:	bf44      	itt	mi
 8020000:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020004:	b21b      	sxthmi	r3, r3
 8020006:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 802000a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 802000e:	462a      	mov	r2, r5
 8020010:	f105 0c08 	add.w	ip, r5, #8
 8020014:	443b      	add	r3, r7
 8020016:	4433      	add	r3, r6
 8020018:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 802001c:	b29b      	uxth	r3, r3
 802001e:	4635      	mov	r5, r6
 8020020:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020024:	6810      	ldr	r0, [r2, #0]
 8020026:	3208      	adds	r2, #8
 8020028:	f852 1c04 	ldr.w	r1, [r2, #-4]
 802002c:	4637      	mov	r7, r6
 802002e:	4562      	cmp	r2, ip
 8020030:	c703      	stmia	r7!, {r0, r1}
 8020032:	463e      	mov	r6, r7
 8020034:	d1f6      	bne.n	8020024 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8020036:	6810      	ldr	r0, [r2, #0]
 8020038:	6038      	str	r0, [r7, #0]
 802003a:	8892      	ldrh	r2, [r2, #4]
 802003c:	80ba      	strh	r2, [r7, #4]
 802003e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020042:	10db      	asrs	r3, r3, #3
 8020044:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020048:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802004c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020050:	4313      	orrs	r3, r2
 8020052:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8020056:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802005a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 802005e:	1a9b      	subs	r3, r3, r2
 8020060:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8020064:	e771      	b.n	801ff4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8020066:	f023 0204 	bic.w	r2, r3, #4
 802006a:	f640 611b 	movw	r1, #3611	; 0xe1b
 802006e:	428a      	cmp	r2, r1
 8020070:	d003      	beq.n	802007a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8020072:	f640 621d 	movw	r2, #3613	; 0xe1d
 8020076:	4293      	cmp	r3, r2
 8020078:	d120      	bne.n	80200bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 802007a:	3b01      	subs	r3, #1
 802007c:	4602      	mov	r2, r0
 802007e:	4629      	mov	r1, r5
 8020080:	4620      	mov	r0, r4
 8020082:	b29b      	uxth	r3, r3
 8020084:	f7ff ff4a 	bl	801ff1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020088:	7b41      	ldrb	r1, [r0, #13]
 802008a:	00cb      	lsls	r3, r1, #3
 802008c:	0649      	lsls	r1, r1, #25
 802008e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020092:	7a03      	ldrb	r3, [r0, #8]
 8020094:	ea43 0302 	orr.w	r3, r3, r2
 8020098:	bf44      	itt	mi
 802009a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802009e:	b21b      	sxthmi	r3, r3
 80200a0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80200a4:	7b6b      	ldrb	r3, [r5, #13]
 80200a6:	7aaa      	ldrb	r2, [r5, #10]
 80200a8:	005b      	lsls	r3, r3, #1
 80200aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80200ae:	4313      	orrs	r3, r2
 80200b0:	115a      	asrs	r2, r3, #5
 80200b2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80200b6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80200ba:	e035      	b.n	8020128 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80200bc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80200c0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80200c4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80200c8:	7a2a      	ldrb	r2, [r5, #8]
 80200ca:	ea42 0201 	orr.w	r2, r2, r1
 80200ce:	f640 6109 	movw	r1, #3593	; 0xe09
 80200d2:	bf1c      	itt	ne
 80200d4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80200d8:	b212      	sxthne	r2, r2
 80200da:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80200de:	f023 0210 	bic.w	r2, r3, #16
 80200e2:	428a      	cmp	r2, r1
 80200e4:	d003      	beq.n	80200ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80200e6:	f640 6213 	movw	r2, #3603	; 0xe13
 80200ea:	4293      	cmp	r3, r2
 80200ec:	d129      	bne.n	8020142 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80200ee:	7b6e      	ldrb	r6, [r5, #13]
 80200f0:	4629      	mov	r1, r5
 80200f2:	0076      	lsls	r6, r6, #1
 80200f4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80200f8:	7aae      	ldrb	r6, [r5, #10]
 80200fa:	4316      	orrs	r6, r2
 80200fc:	f640 6213 	movw	r2, #3603	; 0xe13
 8020100:	4293      	cmp	r3, r2
 8020102:	4602      	mov	r2, r0
 8020104:	4620      	mov	r0, r4
 8020106:	bf16      	itet	ne
 8020108:	f103 33ff 	addne.w	r3, r3, #4294967295
 802010c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8020110:	b29b      	uxthne	r3, r3
 8020112:	f7ff ff03 	bl	801ff1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8020116:	7b43      	ldrb	r3, [r0, #13]
 8020118:	7a82      	ldrb	r2, [r0, #10]
 802011a:	005b      	lsls	r3, r3, #1
 802011c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020120:	4313      	orrs	r3, r2
 8020122:	1af6      	subs	r6, r6, r3
 8020124:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8020128:	7b69      	ldrb	r1, [r5, #13]
 802012a:	00cb      	lsls	r3, r1, #3
 802012c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020130:	7a2b      	ldrb	r3, [r5, #8]
 8020132:	4313      	orrs	r3, r2
 8020134:	064a      	lsls	r2, r1, #25
 8020136:	bf44      	itt	mi
 8020138:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802013c:	b21b      	sxthmi	r3, r3
 802013e:	1bdb      	subs	r3, r3, r7
 8020140:	e747      	b.n	801ffd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8020142:	2300      	movs	r3, #0
 8020144:	e7b7      	b.n	80200b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8020146:	bf00      	nop
 8020148:	3fc00079 	.word	0x3fc00079

0802014c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 802014c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020150:	4604      	mov	r4, r0
 8020152:	b942      	cbnz	r2, 8020166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8020154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020158:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 802015c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8020160:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8020164:	e047      	b.n	80201f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8020166:	7b51      	ldrb	r1, [r2, #13]
 8020168:	8893      	ldrh	r3, [r2, #4]
 802016a:	010d      	lsls	r5, r1, #4
 802016c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8020170:	79d5      	ldrb	r5, [r2, #7]
 8020172:	4305      	orrs	r5, r0
 8020174:	2d04      	cmp	r5, #4
 8020176:	bfcc      	ite	gt
 8020178:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 802017c:	f04f 0e01 	movle.w	lr, #1
 8020180:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8020184:	f200 80ab 	bhi.w	80202de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8020188:	f240 60e7 	movw	r0, #1767	; 0x6e7
 802018c:	4283      	cmp	r3, r0
 802018e:	d216      	bcs.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020190:	f240 605b 	movw	r0, #1627	; 0x65b
 8020194:	4283      	cmp	r3, r0
 8020196:	d859      	bhi.n	802024c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8020198:	f240 6057 	movw	r0, #1623	; 0x657
 802019c:	4283      	cmp	r3, r0
 802019e:	d20e      	bcs.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201a0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80201a4:	d24a      	bcs.n	802023c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80201a6:	f240 604e 	movw	r0, #1614	; 0x64e
 80201aa:	4283      	cmp	r3, r0
 80201ac:	d207      	bcs.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201ae:	f240 601a 	movw	r0, #1562	; 0x61a
 80201b2:	4283      	cmp	r3, r0
 80201b4:	d02a      	beq.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80201b6:	d821      	bhi.n	80201fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80201b8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80201bc:	d35b      	bcc.n	8020276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80201be:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80201c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80201c6:	f040 80d0 	bne.w	802036a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80201ca:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80201ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80201d2:	f040 80ca 	bne.w	802036a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80201d6:	00cb      	lsls	r3, r1, #3
 80201d8:	0649      	lsls	r1, r1, #25
 80201da:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80201de:	7a13      	ldrb	r3, [r2, #8]
 80201e0:	ea43 0300 	orr.w	r3, r3, r0
 80201e4:	bf44      	itt	mi
 80201e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80201ea:	b21b      	sxthmi	r3, r3
 80201ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80201f0:	1b5d      	subs	r5, r3, r5
 80201f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80201f6:	4610      	mov	r0, r2
 80201f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80201fc:	f240 604b 	movw	r0, #1611	; 0x64b
 8020200:	4283      	cmp	r3, r0
 8020202:	d338      	bcc.n	8020276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020204:	f240 604c 	movw	r0, #1612	; 0x64c
 8020208:	4283      	cmp	r3, r0
 802020a:	d9d8      	bls.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802020c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8020210:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8020214:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020218:	f040 80f3 	bne.w	8020402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 802021c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020220:	f040 80ef 	bne.w	8020402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8020224:	00cb      	lsls	r3, r1, #3
 8020226:	064e      	lsls	r6, r1, #25
 8020228:	f403 7080 	and.w	r0, r3, #256	; 0x100
 802022c:	7a13      	ldrb	r3, [r2, #8]
 802022e:	ea43 0300 	orr.w	r3, r3, r0
 8020232:	bf44      	itt	mi
 8020234:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020238:	b21b      	sxthmi	r3, r3
 802023a:	e7d9      	b.n	80201f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 802023c:	f240 6054 	movw	r0, #1620	; 0x654
 8020240:	4283      	cmp	r3, r0
 8020242:	d8e3      	bhi.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020244:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8020248:	d9e0      	bls.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802024a:	e7b8      	b.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802024c:	f240 6074 	movw	r0, #1652	; 0x674
 8020250:	4283      	cmp	r3, r0
 8020252:	d0b4      	beq.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020254:	d82d      	bhi.n	80202b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8020256:	f240 605e 	movw	r0, #1630	; 0x65e
 802025a:	4283      	cmp	r3, r0
 802025c:	d804      	bhi.n	8020268 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 802025e:	f240 605d 	movw	r0, #1629	; 0x65d
 8020262:	4283      	cmp	r3, r0
 8020264:	d3d2      	bcc.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020266:	e7aa      	b.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020268:	f240 605f 	movw	r0, #1631	; 0x65f
 802026c:	4283      	cmp	r3, r0
 802026e:	d0cd      	beq.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020270:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8020274:	d0a3      	beq.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020276:	00cb      	lsls	r3, r1, #3
 8020278:	0649      	lsls	r1, r1, #25
 802027a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 802027e:	7a13      	ldrb	r3, [r2, #8]
 8020280:	ea43 0300 	orr.w	r3, r3, r0
 8020284:	bf44      	itt	mi
 8020286:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802028a:	b21b      	sxthmi	r3, r3
 802028c:	1b5d      	subs	r5, r3, r5
 802028e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020292:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8020296:	7b53      	ldrb	r3, [r2, #13]
 8020298:	015b      	lsls	r3, r3, #5
 802029a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 802029e:	7993      	ldrb	r3, [r2, #6]
 80202a0:	430b      	orrs	r3, r1
 80202a2:	2105      	movs	r1, #5
 80202a4:	005b      	lsls	r3, r3, #1
 80202a6:	fb93 f3f1 	sdiv	r3, r3, r1
 80202aa:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80202ae:	440b      	add	r3, r1
 80202b0:	e756      	b.n	8020160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80202b2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80202b6:	4283      	cmp	r3, r0
 80202b8:	d809      	bhi.n	80202ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80202ba:	f240 60df 	movw	r0, #1759	; 0x6df
 80202be:	4283      	cmp	r3, r0
 80202c0:	f4bf af7d 	bcs.w	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80202c4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80202c8:	2b05      	cmp	r3, #5
 80202ca:	d8d4      	bhi.n	8020276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80202cc:	e777      	b.n	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80202ce:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80202d2:	4283      	cmp	r3, r0
 80202d4:	d09a      	beq.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80202d6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80202da:	4283      	cmp	r3, r0
 80202dc:	e7ca      	b.n	8020274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80202de:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80202e2:	d22b      	bcs.n	802033c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80202e4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80202e8:	4283      	cmp	r3, r0
 80202ea:	d28f      	bcs.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80202ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80202f0:	4283      	cmp	r3, r0
 80202f2:	d816      	bhi.n	8020322 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80202f4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80202f8:	4283      	cmp	r3, r0
 80202fa:	f4bf af60 	bcs.w	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80202fe:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8020302:	4283      	cmp	r3, r0
 8020304:	d80a      	bhi.n	802031c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8020306:	f240 60eb 	movw	r0, #1771	; 0x6eb
 802030a:	4283      	cmp	r3, r0
 802030c:	f4bf af57 	bcs.w	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020310:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8020314:	4283      	cmp	r3, r0
 8020316:	f43f af79 	beq.w	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802031a:	e7ac      	b.n	8020276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 802031c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8020320:	e7f8      	b.n	8020314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8020322:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8020326:	4283      	cmp	r3, r0
 8020328:	d802      	bhi.n	8020330 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 802032a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 802032e:	e798      	b.n	8020262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8020330:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8020334:	4283      	cmp	r3, r0
 8020336:	f47f af42 	bne.w	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802033a:	e767      	b.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802033c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8020340:	4283      	cmp	r3, r0
 8020342:	f43f af63 	beq.w	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020346:	d802      	bhi.n	802034e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8020348:	f640 00f2 	movw	r0, #2290	; 0x8f2
 802034c:	e7f2      	b.n	8020334 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 802034e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8020352:	4283      	cmp	r3, r0
 8020354:	d805      	bhi.n	8020362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8020356:	f640 00f9 	movw	r0, #2297	; 0x8f9
 802035a:	4283      	cmp	r3, r0
 802035c:	f4ff af2f 	bcc.w	80201be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020360:	e754      	b.n	802020c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020362:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8020366:	4283      	cmp	r3, r0
 8020368:	e7af      	b.n	80202ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 802036a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 802036e:	4617      	mov	r7, r2
 8020370:	f102 0808 	add.w	r8, r2, #8
 8020374:	4666      	mov	r6, ip
 8020376:	6838      	ldr	r0, [r7, #0]
 8020378:	3708      	adds	r7, #8
 802037a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 802037e:	46e6      	mov	lr, ip
 8020380:	4547      	cmp	r7, r8
 8020382:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8020386:	46f4      	mov	ip, lr
 8020388:	d1f5      	bne.n	8020376 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 802038a:	6838      	ldr	r0, [r7, #0]
 802038c:	f8ce 0000 	str.w	r0, [lr]
 8020390:	88b9      	ldrh	r1, [r7, #4]
 8020392:	f8ae 1004 	strh.w	r1, [lr, #4]
 8020396:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 802039a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802039e:	d009      	beq.n	80203b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80203a0:	7b51      	ldrb	r1, [r2, #13]
 80203a2:	7992      	ldrb	r2, [r2, #6]
 80203a4:	0149      	lsls	r1, r1, #5
 80203a6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80203aa:	4311      	orrs	r1, r2
 80203ac:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80203b0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80203b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80203b8:	b2ad      	uxth	r5, r5
 80203ba:	d00d      	beq.n	80203d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80203bc:	442b      	add	r3, r5
 80203be:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80203c2:	b29b      	uxth	r3, r3
 80203c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80203c8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80203cc:	10db      	asrs	r3, r3, #3
 80203ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80203d2:	4313      	orrs	r3, r2
 80203d4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80203d8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80203dc:	00cb      	lsls	r3, r1, #3
 80203de:	064f      	lsls	r7, r1, #25
 80203e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80203e4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80203e8:	ea43 0302 	orr.w	r3, r3, r2
 80203ec:	bf44      	itt	mi
 80203ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80203f2:	b21b      	sxthmi	r3, r3
 80203f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80203f8:	1b5b      	subs	r3, r3, r5
 80203fa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80203fe:	4632      	mov	r2, r6
 8020400:	e6f9      	b.n	80201f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8020402:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8020406:	4617      	mov	r7, r2
 8020408:	f102 0908 	add.w	r9, r2, #8
 802040c:	4666      	mov	r6, ip
 802040e:	6838      	ldr	r0, [r7, #0]
 8020410:	3708      	adds	r7, #8
 8020412:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8020416:	46e0      	mov	r8, ip
 8020418:	454f      	cmp	r7, r9
 802041a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 802041e:	46c4      	mov	ip, r8
 8020420:	d1f5      	bne.n	802040e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8020422:	6838      	ldr	r0, [r7, #0]
 8020424:	f8c8 0000 	str.w	r0, [r8]
 8020428:	88b9      	ldrh	r1, [r7, #4]
 802042a:	f8a8 1004 	strh.w	r1, [r8, #4]
 802042e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8020432:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020436:	d009      	beq.n	802044c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8020438:	7b51      	ldrb	r1, [r2, #13]
 802043a:	7992      	ldrb	r2, [r2, #6]
 802043c:	0149      	lsls	r1, r1, #5
 802043e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020442:	4311      	orrs	r1, r2
 8020444:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020448:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 802044c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020450:	d00e      	beq.n	8020470 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8020452:	eba3 030e 	sub.w	r3, r3, lr
 8020456:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 802045a:	b29b      	uxth	r3, r3
 802045c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020460:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8020464:	10db      	asrs	r3, r3, #3
 8020466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802046a:	4313      	orrs	r3, r2
 802046c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8020470:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8020474:	00cb      	lsls	r3, r1, #3
 8020476:	0648      	lsls	r0, r1, #25
 8020478:	f403 7280 	and.w	r2, r3, #256	; 0x100
 802047c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8020480:	ea43 0302 	orr.w	r3, r3, r2
 8020484:	bf44      	itt	mi
 8020486:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802048a:	b21b      	sxthmi	r3, r3
 802048c:	1b5d      	subs	r5, r3, r5
 802048e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8020492:	e7b4      	b.n	80203fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08020494 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8020494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020498:	461e      	mov	r6, r3
 802049a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 802049c:	4604      	mov	r4, r0
 802049e:	4617      	mov	r7, r2
 80204a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80204a4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80204a8:	f7f4 fe3c 	bl	8015124 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80204ac:	4605      	mov	r5, r0
 80204ae:	b918      	cbnz	r0, 80204b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80204b0:	6030      	str	r0, [r6, #0]
 80204b2:	4628      	mov	r0, r5
 80204b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	4601      	mov	r1, r0
 80204bc:	4638      	mov	r0, r7
 80204be:	68db      	ldr	r3, [r3, #12]
 80204c0:	4798      	blx	r3
 80204c2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80204c6:	4602      	mov	r2, r0
 80204c8:	6030      	str	r0, [r6, #0]
 80204ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80204ce:	d213      	bcs.n	80204f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80204d0:	4643      	mov	r3, r8
 80204d2:	4639      	mov	r1, r7
 80204d4:	4620      	mov	r0, r4
 80204d6:	f7ff fe39 	bl	802014c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80204da:	6030      	str	r0, [r6, #0]
 80204dc:	6833      	ldr	r3, [r6, #0]
 80204de:	b143      	cbz	r3, 80204f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80204e0:	7b5a      	ldrb	r2, [r3, #13]
 80204e2:	7a9b      	ldrb	r3, [r3, #10]
 80204e4:	0052      	lsls	r2, r2, #1
 80204e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80204ea:	4313      	orrs	r3, r2
 80204ec:	bf0c      	ite	eq
 80204ee:	2301      	moveq	r3, #1
 80204f0:	2300      	movne	r3, #0
 80204f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80204f6:	e7dc      	b.n	80204b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80204f8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80204fc:	b29b      	uxth	r3, r3
 80204fe:	2b7f      	cmp	r3, #127	; 0x7f
 8020500:	d804      	bhi.n	802050c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8020502:	4639      	mov	r1, r7
 8020504:	4620      	mov	r0, r4
 8020506:	f7ff fd15 	bl	801ff34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 802050a:	e7e6      	b.n	80204da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 802050c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020510:	2b00      	cmp	r3, #0
 8020512:	d0e3      	beq.n	80204dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8020514:	f640 1302 	movw	r3, #2306	; 0x902
 8020518:	429d      	cmp	r5, r3
 802051a:	d1df      	bne.n	80204dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 802051c:	4601      	mov	r1, r0
 802051e:	4620      	mov	r0, r4
 8020520:	f7ff fcd8 	bl	801fed4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020524:	e7d9      	b.n	80204da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08020526 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020526:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802052a:	461e      	mov	r6, r3
 802052c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 802052e:	4604      	mov	r4, r0
 8020530:	4617      	mov	r7, r2
 8020532:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020536:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 802053a:	f7f4 fdf3 	bl	8015124 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 802053e:	4605      	mov	r5, r0
 8020540:	b918      	cbnz	r0, 802054a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8020542:	6030      	str	r0, [r6, #0]
 8020544:	4628      	mov	r0, r5
 8020546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802054a:	683b      	ldr	r3, [r7, #0]
 802054c:	4601      	mov	r1, r0
 802054e:	4638      	mov	r0, r7
 8020550:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020558:	47c8      	blx	r9
 802055a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 802055e:	4602      	mov	r2, r0
 8020560:	6030      	str	r0, [r6, #0]
 8020562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020566:	d213      	bcs.n	8020590 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8020568:	4643      	mov	r3, r8
 802056a:	4639      	mov	r1, r7
 802056c:	4620      	mov	r0, r4
 802056e:	f7ff fded 	bl	802014c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8020572:	6030      	str	r0, [r6, #0]
 8020574:	6833      	ldr	r3, [r6, #0]
 8020576:	b143      	cbz	r3, 802058a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8020578:	7b5a      	ldrb	r2, [r3, #13]
 802057a:	7a9b      	ldrb	r3, [r3, #10]
 802057c:	0052      	lsls	r2, r2, #1
 802057e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020582:	4313      	orrs	r3, r2
 8020584:	bf0c      	ite	eq
 8020586:	2301      	moveq	r3, #1
 8020588:	2300      	movne	r3, #0
 802058a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 802058e:	e7d9      	b.n	8020544 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8020590:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8020594:	b29b      	uxth	r3, r3
 8020596:	2b7f      	cmp	r3, #127	; 0x7f
 8020598:	d804      	bhi.n	80205a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 802059a:	4639      	mov	r1, r7
 802059c:	4620      	mov	r0, r4
 802059e:	f7ff fcc9 	bl	801ff34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80205a2:	e7e6      	b.n	8020572 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80205a4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80205a8:	2b00      	cmp	r3, #0
 80205aa:	d0e3      	beq.n	8020574 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80205ac:	f640 1302 	movw	r3, #2306	; 0x902
 80205b0:	429d      	cmp	r5, r3
 80205b2:	d1df      	bne.n	8020574 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80205b4:	4601      	mov	r1, r0
 80205b6:	4620      	mov	r0, r4
 80205b8:	f7ff fc8c 	bl	801fed4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80205bc:	e7d9      	b.n	8020572 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080205be <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80205be:	b510      	push	{r4, lr}
 80205c0:	4604      	mov	r4, r0
 80205c2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80205c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80205c8:	b1e1      	cbz	r1, 8020604 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80205ca:	2b0a      	cmp	r3, #10
 80205cc:	d02d      	beq.n	802062a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80205ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80205d0:	3901      	subs	r1, #1
 80205d2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80205d6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80205d8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80205dc:	1c51      	adds	r1, r2, #1
 80205de:	b289      	uxth	r1, r1
 80205e0:	2901      	cmp	r1, #1
 80205e2:	bf8a      	itet	hi
 80205e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80205e8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80205ea:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80205ec:	1c5a      	adds	r2, r3, #1
 80205ee:	8722      	strh	r2, [r4, #56]	; 0x38
 80205f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80205f2:	4413      	add	r3, r2
 80205f4:	b29b      	uxth	r3, r3
 80205f6:	2b09      	cmp	r3, #9
 80205f8:	bf88      	it	hi
 80205fa:	3b0a      	subhi	r3, #10
 80205fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020600:	8458      	strh	r0, [r3, #34]	; 0x22
 8020602:	e7de      	b.n	80205c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020604:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020606:	2b0a      	cmp	r3, #10
 8020608:	d00f      	beq.n	802062a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 802060a:	4620      	mov	r0, r4
 802060c:	f7ff fc10 	bl	801fe30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020610:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020612:	1c5a      	adds	r2, r3, #1
 8020614:	8722      	strh	r2, [r4, #56]	; 0x38
 8020616:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020618:	4413      	add	r3, r2
 802061a:	b29b      	uxth	r3, r3
 802061c:	2b09      	cmp	r3, #9
 802061e:	bf88      	it	hi
 8020620:	3b0a      	subhi	r3, #10
 8020622:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020626:	8458      	strh	r0, [r3, #34]	; 0x22
 8020628:	e7ec      	b.n	8020604 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 802062a:	bd10      	pop	{r4, pc}

0802062c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 802062c:	b538      	push	{r3, r4, r5, lr}
 802062e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020630:	4604      	mov	r4, r0
 8020632:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8020636:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8020638:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 802063a:	3a01      	subs	r2, #1
 802063c:	8702      	strh	r2, [r0, #56]	; 0x38
 802063e:	1c5a      	adds	r2, r3, #1
 8020640:	b292      	uxth	r2, r2
 8020642:	2a09      	cmp	r2, #9
 8020644:	bf8a      	itet	hi
 8020646:	3b09      	subhi	r3, #9
 8020648:	86c2      	strhls	r2, [r0, #54]	; 0x36
 802064a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 802064c:	f7ff ffb7 	bl	80205be <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020650:	8c23      	ldrh	r3, [r4, #32]
 8020652:	2b01      	cmp	r3, #1
 8020654:	bf9c      	itt	ls
 8020656:	3301      	addls	r3, #1
 8020658:	8423      	strhls	r3, [r4, #32]
 802065a:	8be3      	ldrh	r3, [r4, #30]
 802065c:	b90b      	cbnz	r3, 8020662 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 802065e:	2302      	movs	r3, #2
 8020660:	83e3      	strh	r3, [r4, #30]
 8020662:	8be3      	ldrh	r3, [r4, #30]
 8020664:	4628      	mov	r0, r5
 8020666:	3b01      	subs	r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	83e3      	strh	r3, [r4, #30]
 802066c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020670:	8365      	strh	r5, [r4, #26]
 8020672:	bd38      	pop	{r3, r4, r5, pc}

08020674 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8020674:	428a      	cmp	r2, r1
 8020676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802067a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 802067c:	d932      	bls.n	80206e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 802067e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8020680:	1a54      	subs	r4, r2, r1
 8020682:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8020686:	19ee      	adds	r6, r5, r7
 8020688:	fa1f fe84 	uxth.w	lr, r4
 802068c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8020690:	3e01      	subs	r6, #1
 8020692:	b2b4      	uxth	r4, r6
 8020694:	eba4 090e 	sub.w	r9, r4, lr
 8020698:	fa1f f989 	uxth.w	r9, r9
 802069c:	2c09      	cmp	r4, #9
 802069e:	4626      	mov	r6, r4
 80206a0:	bf88      	it	hi
 80206a2:	f1a4 060a 	subhi.w	r6, r4, #10
 80206a6:	f1bc 0f00 	cmp.w	ip, #0
 80206aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80206ae:	bf08      	it	eq
 80206b0:	f04f 0c02 	moveq.w	ip, #2
 80206b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80206b8:	b2a4      	uxth	r4, r4
 80206ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80206be:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80206c2:	454c      	cmp	r4, r9
 80206c4:	fa1f fc8c 	uxth.w	ip, ip
 80206c8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80206cc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80206d0:	d1e4      	bne.n	802069c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80206d2:	eba5 050e 	sub.w	r5, r5, lr
 80206d6:	eb0e 0408 	add.w	r4, lr, r8
 80206da:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80206de:	8705      	strh	r5, [r0, #56]	; 0x38
 80206e0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80206e4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80206e6:	250a      	movs	r5, #10
 80206e8:	1a64      	subs	r4, r4, r1
 80206ea:	4439      	add	r1, r7
 80206ec:	b289      	uxth	r1, r1
 80206ee:	8704      	strh	r4, [r0, #56]	; 0x38
 80206f0:	2909      	cmp	r1, #9
 80206f2:	bf88      	it	hi
 80206f4:	390a      	subhi	r1, #10
 80206f6:	86c1      	strh	r1, [r0, #54]	; 0x36
 80206f8:	b18a      	cbz	r2, 802071e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80206fa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80206fc:	3a01      	subs	r2, #1
 80206fe:	3101      	adds	r1, #1
 8020700:	b292      	uxth	r2, r2
 8020702:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020706:	8701      	strh	r1, [r0, #56]	; 0x38
 8020708:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802070a:	b901      	cbnz	r1, 802070e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 802070c:	86c5      	strh	r5, [r0, #54]	; 0x36
 802070e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020710:	3901      	subs	r1, #1
 8020712:	b289      	uxth	r1, r1
 8020714:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020716:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802071a:	844c      	strh	r4, [r1, #34]	; 0x22
 802071c:	e7ec      	b.n	80206f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 802071e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020722:	f7ff bf4c 	b.w	80205be <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08020726 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020726:	b570      	push	{r4, r5, r6, lr}
 8020728:	2500      	movs	r5, #0
 802072a:	4295      	cmp	r5, r2
 802072c:	d011      	beq.n	8020752 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 802072e:	8bc4      	ldrh	r4, [r0, #30]
 8020730:	f831 6b02 	ldrh.w	r6, [r1], #2
 8020734:	4414      	add	r4, r2
 8020736:	3c01      	subs	r4, #1
 8020738:	1b64      	subs	r4, r4, r5
 802073a:	b2a4      	uxth	r4, r4
 802073c:	2c01      	cmp	r4, #1
 802073e:	bf88      	it	hi
 8020740:	3c02      	subhi	r4, #2
 8020742:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020746:	8b64      	ldrh	r4, [r4, #26]
 8020748:	42b4      	cmp	r4, r6
 802074a:	d117      	bne.n	802077c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 802074c:	3501      	adds	r5, #1
 802074e:	b2ad      	uxth	r5, r5
 8020750:	e7eb      	b.n	802072a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8020752:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020756:	2400      	movs	r4, #0
 8020758:	4413      	add	r3, r2
 802075a:	b2a2      	uxth	r2, r4
 802075c:	429a      	cmp	r2, r3
 802075e:	da0f      	bge.n	8020780 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8020760:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8020762:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8020766:	3401      	adds	r4, #1
 8020768:	4432      	add	r2, r6
 802076a:	b292      	uxth	r2, r2
 802076c:	2a09      	cmp	r2, #9
 802076e:	bf88      	it	hi
 8020770:	3a0a      	subhi	r2, #10
 8020772:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020776:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8020778:	42aa      	cmp	r2, r5
 802077a:	d0ee      	beq.n	802075a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 802077c:	2000      	movs	r0, #0
 802077e:	bd70      	pop	{r4, r5, r6, pc}
 8020780:	2001      	movs	r0, #1
 8020782:	e7fc      	b.n	802077e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08020784 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8020784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020788:	4605      	mov	r5, r0
 802078a:	4616      	mov	r6, r2
 802078c:	1c8c      	adds	r4, r1, #2
 802078e:	8809      	ldrh	r1, [r1, #0]
 8020790:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8020794:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020798:	42b3      	cmp	r3, r6
 802079a:	d124      	bne.n	80207e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 802079c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80207a0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80207a4:	f001 070f 	and.w	r7, r1, #15
 80207a8:	4652      	mov	r2, sl
 80207aa:	f8cd 8000 	str.w	r8, [sp]
 80207ae:	464b      	mov	r3, r9
 80207b0:	4621      	mov	r1, r4
 80207b2:	4628      	mov	r0, r5
 80207b4:	f7ff ffb7 	bl	8020726 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80207b8:	4683      	mov	fp, r0
 80207ba:	b168      	cbz	r0, 80207d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80207bc:	eb0a 0109 	add.w	r1, sl, r9
 80207c0:	463a      	mov	r2, r7
 80207c2:	4628      	mov	r0, r5
 80207c4:	4441      	add	r1, r8
 80207c6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80207ca:	4649      	mov	r1, r9
 80207cc:	f7ff ff52 	bl	8020674 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80207d0:	4658      	mov	r0, fp
 80207d2:	b003      	add	sp, #12
 80207d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207d8:	eb07 010a 	add.w	r1, r7, sl
 80207dc:	4449      	add	r1, r9
 80207de:	4441      	add	r1, r8
 80207e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80207e4:	e7d2      	b.n	802078c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80207e6:	f04f 0b00 	mov.w	fp, #0
 80207ea:	e7f1      	b.n	80207d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080207ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80207ec:	b570      	push	{r4, r5, r6, lr}
 80207ee:	8810      	ldrh	r0, [r2, #0]
 80207f0:	4298      	cmp	r0, r3
 80207f2:	d817      	bhi.n	8020824 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80207f4:	1e48      	subs	r0, r1, #1
 80207f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80207fa:	4298      	cmp	r0, r3
 80207fc:	d312      	bcc.n	8020824 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80207fe:	2400      	movs	r4, #0
 8020800:	428c      	cmp	r4, r1
 8020802:	d20f      	bcs.n	8020824 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020804:	1860      	adds	r0, r4, r1
 8020806:	1040      	asrs	r0, r0, #1
 8020808:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 802080c:	0085      	lsls	r5, r0, #2
 802080e:	42b3      	cmp	r3, r6
 8020810:	d902      	bls.n	8020818 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020812:	3001      	adds	r0, #1
 8020814:	b284      	uxth	r4, r0
 8020816:	e7f3      	b.n	8020800 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020818:	d201      	bcs.n	802081e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 802081a:	b281      	uxth	r1, r0
 802081c:	e7f0      	b.n	8020800 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 802081e:	442a      	add	r2, r5
 8020820:	8850      	ldrh	r0, [r2, #2]
 8020822:	bd70      	pop	{r4, r5, r6, pc}
 8020824:	2000      	movs	r0, #0
 8020826:	e7fc      	b.n	8020822 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08020828 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8020828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802082c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 802082e:	4604      	mov	r4, r0
 8020830:	260b      	movs	r6, #11
 8020832:	886f      	ldrh	r7, [r5, #2]
 8020834:	087f      	lsrs	r7, r7, #1
 8020836:	3e01      	subs	r6, #1
 8020838:	d013      	beq.n	8020862 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 802083a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 802083c:	462a      	mov	r2, r5
 802083e:	4639      	mov	r1, r7
 8020840:	4620      	mov	r0, r4
 8020842:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020846:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 802084a:	4643      	mov	r3, r8
 802084c:	f7ff ffce 	bl	80207ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020850:	b138      	cbz	r0, 8020862 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8020852:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020856:	4642      	mov	r2, r8
 8020858:	4620      	mov	r0, r4
 802085a:	f7ff ff93 	bl	8020784 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 802085e:	2800      	cmp	r0, #0
 8020860:	d1e9      	bne.n	8020836 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8020862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08020868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8020868:	b570      	push	{r4, r5, r6, lr}
 802086a:	694a      	ldr	r2, [r1, #20]
 802086c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 802086e:	684b      	ldr	r3, [r1, #4]
 8020870:	1b54      	subs	r4, r2, r5
 8020872:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8020874:	f000 8106 	beq.w	8020a84 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8020878:	1b9b      	subs	r3, r3, r6
 802087a:	d003      	beq.n	8020884 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 802087c:	4363      	muls	r3, r4
 802087e:	2210      	movs	r2, #16
 8020880:	fb93 f3f2 	sdiv	r3, r3, r2
 8020884:	680c      	ldr	r4, [r1, #0]
 8020886:	698a      	ldr	r2, [r1, #24]
 8020888:	1b65      	subs	r5, r4, r5
 802088a:	f000 80fd 	beq.w	8020a88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 802088e:	1b92      	subs	r2, r2, r6
 8020890:	d003      	beq.n	802089a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020892:	436a      	muls	r2, r5
 8020894:	2410      	movs	r4, #16
 8020896:	fb92 f2f4 	sdiv	r2, r2, r4
 802089a:	1a9b      	subs	r3, r3, r2
 802089c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8020ac4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80208a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208a4:	460a      	mov	r2, r1
 80208a6:	ee07 3a90 	vmov	s15, r3
 80208aa:	f100 040c 	add.w	r4, r0, #12
 80208ae:	4603      	mov	r3, r0
 80208b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80208b8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80208bc:	eeb1 6a43 	vneg.f32	s12, s6
 80208c0:	edd2 7a02 	vldr	s15, [r2, #8]
 80208c4:	3214      	adds	r2, #20
 80208c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80208ca:	ece3 6a01 	vstmia	r3!, {s13}
 80208ce:	429c      	cmp	r4, r3
 80208d0:	ed52 7a02 	vldr	s15, [r2, #-8]
 80208d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80208d8:	edc3 7a02 	vstr	s15, [r3, #8]
 80208dc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80208e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80208e4:	edc3 7a05 	vstr	s15, [r3, #20]
 80208e8:	d1ea      	bne.n	80208c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80208ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80208ec:	698b      	ldr	r3, [r1, #24]
 80208ee:	edd0 4a02 	vldr	s9, [r0, #8]
 80208f2:	1a9b      	subs	r3, r3, r2
 80208f4:	edd0 3a00 	vldr	s7, [r0]
 80208f8:	edd0 6a01 	vldr	s13, [r0, #4]
 80208fc:	ee07 3a90 	vmov	s15, r3
 8020900:	684b      	ldr	r3, [r1, #4]
 8020902:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8020906:	ed90 5a05 	vldr	s10, [r0, #20]
 802090a:	1a9b      	subs	r3, r3, r2
 802090c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020910:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8020914:	ed90 2a03 	vldr	s4, [r0, #12]
 8020918:	ee07 3a10 	vmov	s14, r3
 802091c:	edd0 5a04 	vldr	s11, [r0, #16]
 8020920:	ee67 7a84 	vmul.f32	s15, s15, s8
 8020924:	ed90 1a07 	vldr	s2, [r0, #28]
 8020928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802092c:	edd0 2a06 	vldr	s5, [r0, #24]
 8020930:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8020934:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8020938:	ee27 7a04 	vmul.f32	s14, s14, s8
 802093c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8020940:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020944:	ee67 7a83 	vmul.f32	s15, s15, s6
 8020948:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 802094c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802094e:	694a      	ldr	r2, [r1, #20]
 8020950:	1b13      	subs	r3, r2, r4
 8020952:	ee07 3a10 	vmov	s14, r3
 8020956:	680b      	ldr	r3, [r1, #0]
 8020958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802095c:	1b1b      	subs	r3, r3, r4
 802095e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020962:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8020966:	ee07 3a10 	vmov	s14, r3
 802096a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802096e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020972:	eee6 4a87 	vfma.f32	s9, s13, s14
 8020976:	ee64 4a86 	vmul.f32	s9, s9, s12
 802097a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 802097e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8020980:	698b      	ldr	r3, [r1, #24]
 8020982:	1a9b      	subs	r3, r3, r2
 8020984:	ee06 3a90 	vmov	s13, r3
 8020988:	684b      	ldr	r3, [r1, #4]
 802098a:	1a9b      	subs	r3, r3, r2
 802098c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020990:	ee07 3a10 	vmov	s14, r3
 8020994:	ee66 6a84 	vmul.f32	s13, s13, s8
 8020998:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802099c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80209a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80209a4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80209a8:	ee66 6a83 	vmul.f32	s13, s13, s6
 80209ac:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80209b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80209b2:	694a      	ldr	r2, [r1, #20]
 80209b4:	1b13      	subs	r3, r2, r4
 80209b6:	ee07 3a10 	vmov	s14, r3
 80209ba:	680b      	ldr	r3, [r1, #0]
 80209bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209c0:	1b1b      	subs	r3, r3, r4
 80209c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80209c6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80209ca:	ee07 3a10 	vmov	s14, r3
 80209ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209d2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80209d6:	eea5 5a87 	vfma.f32	s10, s11, s14
 80209da:	edd0 5a08 	vldr	s11, [r0, #32]
 80209de:	ee31 1a65 	vsub.f32	s2, s2, s11
 80209e2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80209e6:	ee25 5a06 	vmul.f32	s10, s10, s12
 80209ea:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80209ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80209f0:	698b      	ldr	r3, [r1, #24]
 80209f2:	1a9b      	subs	r3, r3, r2
 80209f4:	ee07 3a10 	vmov	s14, r3
 80209f8:	684b      	ldr	r3, [r1, #4]
 80209fa:	1a9b      	subs	r3, r3, r2
 80209fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020a00:	ee01 3a90 	vmov	s3, r3
 8020a04:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020a08:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020a0c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020a10:	ee61 1a84 	vmul.f32	s3, s3, s8
 8020a14:	eea1 7a21 	vfma.f32	s14, s2, s3
 8020a18:	ee27 7a03 	vmul.f32	s14, s14, s6
 8020a1c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8020a20:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8020a22:	694a      	ldr	r2, [r1, #20]
 8020a24:	1b13      	subs	r3, r2, r4
 8020a26:	ee03 3a10 	vmov	s6, r3
 8020a2a:	680b      	ldr	r3, [r1, #0]
 8020a2c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8020a30:	1b1b      	subs	r3, r3, r4
 8020a32:	ee23 3a04 	vmul.f32	s6, s6, s8
 8020a36:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8020a3a:	ee03 3a10 	vmov	s6, r3
 8020a3e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8020a42:	ee23 4a04 	vmul.f32	s8, s6, s8
 8020a46:	eee1 5a04 	vfma.f32	s11, s2, s8
 8020a4a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8020a4e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8020a52:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8020a56:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8020a5a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8020a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a62:	dd13      	ble.n	8020a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8020a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020a68:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8020a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020a6e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8020a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a7a:	dd15      	ble.n	8020aa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8020a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8020a80:	6403      	str	r3, [r0, #64]	; 0x40
 8020a82:	bd70      	pop	{r4, r5, r6, pc}
 8020a84:	4623      	mov	r3, r4
 8020a86:	e6fd      	b.n	8020884 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8020a88:	462a      	mov	r2, r5
 8020a8a:	e706      	b.n	802089a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8020a8c:	d502      	bpl.n	8020a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8020a8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8020a92:	e7e9      	b.n	8020a68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8020a94:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8020a98:	eea3 2a85 	vfma.f32	s4, s7, s10
 8020a9c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8020aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa4:	dade      	bge.n	8020a64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8020aa6:	e7f2      	b.n	8020a8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8020aa8:	d502      	bpl.n	8020ab0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8020aaa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8020aae:	e7e7      	b.n	8020a80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8020ab0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8020ab4:	eee3 4a86 	vfma.f32	s9, s7, s12
 8020ab8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8020abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ac0:	dadc      	bge.n	8020a7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8020ac2:	e7f2      	b.n	8020aaa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8020ac4:	3d800000 	.word	0x3d800000

08020ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8020ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020acc:	2714      	movs	r7, #20
 8020ace:	435f      	muls	r7, r3
 8020ad0:	eb02 0c07 	add.w	ip, r2, r7
 8020ad4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8020ad8:	f115 0e0f 	adds.w	lr, r5, #15
 8020adc:	f100 80a2 	bmi.w	8020c24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8020ae0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8020ae4:	9c08      	ldr	r4, [sp, #32]
 8020ae6:	2614      	movs	r6, #20
 8020ae8:	f8c0 e014 	str.w	lr, [r0, #20]
 8020aec:	4366      	muls	r6, r4
 8020aee:	eb02 0806 	add.w	r8, r2, r6
 8020af2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020af6:	f115 040f 	adds.w	r4, r5, #15
 8020afa:	f100 809f 	bmi.w	8020c3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8020afe:	1124      	asrs	r4, r4, #4
 8020b00:	eba4 040e 	sub.w	r4, r4, lr
 8020b04:	6184      	str	r4, [r0, #24]
 8020b06:	2c00      	cmp	r4, #0
 8020b08:	f000 808a 	beq.w	8020c20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8020b0c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8020b10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8020b14:	5995      	ldr	r5, [r2, r6]
 8020b16:	eba4 0809 	sub.w	r8, r4, r9
 8020b1a:	59d4      	ldr	r4, [r2, r7]
 8020b1c:	eba5 0a04 	sub.w	sl, r5, r4
 8020b20:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8020b24:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8020b28:	fb0e fe05 	mul.w	lr, lr, r5
 8020b2c:	fb0a ee19 	mls	lr, sl, r9, lr
 8020b30:	fb08 e404 	mla	r4, r8, r4, lr
 8020b34:	3c01      	subs	r4, #1
 8020b36:	19a4      	adds	r4, r4, r6
 8020b38:	f100 808c 	bmi.w	8020c54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8020b3c:	fb94 fef6 	sdiv	lr, r4, r6
 8020b40:	fb06 441e 	mls	r4, r6, lr, r4
 8020b44:	f8c0 e000 	str.w	lr, [r0]
 8020b48:	6104      	str	r4, [r0, #16]
 8020b4a:	2d00      	cmp	r5, #0
 8020b4c:	f2c0 8095 	blt.w	8020c7a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8020b50:	fb95 f4f6 	sdiv	r4, r5, r6
 8020b54:	fb06 5514 	mls	r5, r6, r4, r5
 8020b58:	6044      	str	r4, [r0, #4]
 8020b5a:	6085      	str	r5, [r0, #8]
 8020b5c:	60c6      	str	r6, [r0, #12]
 8020b5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020b62:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8020b66:	6945      	ldr	r5, [r0, #20]
 8020b68:	59d2      	ldr	r2, [r2, r7]
 8020b6a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8020b6e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8020c9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8020b72:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8020b76:	ee07 4a10 	vmov	s14, r4
 8020b7a:	6804      	ldr	r4, [r0, #0]
 8020b7c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8020b80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020b84:	ee07 2a90 	vmov	s15, r2
 8020b88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020b94:	edd3 6a00 	vldr	s13, [r3]
 8020b98:	eee6 6a07 	vfma.f32	s13, s12, s14
 8020b9c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8020ba0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8020ba4:	edc0 6a07 	vstr	s13, [r0, #28]
 8020ba8:	edd0 6a01 	vldr	s13, [r0, #4]
 8020bac:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8020bb0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020bb4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8020bb8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020bbc:	ed80 6a08 	vstr	s12, [r0, #32]
 8020bc0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8020bc2:	6242      	str	r2, [r0, #36]	; 0x24
 8020bc4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8020bc8:	ed93 6a03 	vldr	s12, [r3, #12]
 8020bcc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020bd0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8020bd4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8020bd8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8020bdc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8020be0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8020be4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020be8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8020bec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8020bee:	6302      	str	r2, [r0, #48]	; 0x30
 8020bf0:	ed93 6a06 	vldr	s12, [r3, #24]
 8020bf4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8020bf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020bfc:	eeb0 7a46 	vmov.f32	s14, s12
 8020c00:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8020c04:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020c08:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8020c0c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8020c10:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8020c14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020c18:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8020c1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8020c1e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c24:	2410      	movs	r4, #16
 8020c26:	f1c5 0501 	rsb	r5, r5, #1
 8020c2a:	fb9e fef4 	sdiv	lr, lr, r4
 8020c2e:	f015 050f 	ands.w	r5, r5, #15
 8020c32:	bf18      	it	ne
 8020c34:	2501      	movne	r5, #1
 8020c36:	ebae 0e05 	sub.w	lr, lr, r5
 8020c3a:	e753      	b.n	8020ae4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8020c3c:	f04f 0910 	mov.w	r9, #16
 8020c40:	f1c5 0501 	rsb	r5, r5, #1
 8020c44:	fb94 f4f9 	sdiv	r4, r4, r9
 8020c48:	f015 050f 	ands.w	r5, r5, #15
 8020c4c:	bf18      	it	ne
 8020c4e:	2501      	movne	r5, #1
 8020c50:	1b64      	subs	r4, r4, r5
 8020c52:	e755      	b.n	8020b00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8020c54:	4264      	negs	r4, r4
 8020c56:	fb94 fef6 	sdiv	lr, r4, r6
 8020c5a:	f1ce 0800 	rsb	r8, lr, #0
 8020c5e:	fb06 441e 	mls	r4, r6, lr, r4
 8020c62:	f8c0 8000 	str.w	r8, [r0]
 8020c66:	6104      	str	r4, [r0, #16]
 8020c68:	2c00      	cmp	r4, #0
 8020c6a:	f43f af6e 	beq.w	8020b4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8020c6e:	ea6f 0e0e 	mvn.w	lr, lr
 8020c72:	1b34      	subs	r4, r6, r4
 8020c74:	f8c0 e000 	str.w	lr, [r0]
 8020c78:	e766      	b.n	8020b48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8020c7a:	426d      	negs	r5, r5
 8020c7c:	fb95 f4f6 	sdiv	r4, r5, r6
 8020c80:	f1c4 0e00 	rsb	lr, r4, #0
 8020c84:	fb06 5514 	mls	r5, r6, r4, r5
 8020c88:	f8c0 e004 	str.w	lr, [r0, #4]
 8020c8c:	6085      	str	r5, [r0, #8]
 8020c8e:	2d00      	cmp	r5, #0
 8020c90:	f43f af64 	beq.w	8020b5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8020c94:	43e4      	mvns	r4, r4
 8020c96:	1b75      	subs	r5, r6, r5
 8020c98:	6044      	str	r4, [r0, #4]
 8020c9a:	e75e      	b.n	8020b5a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8020c9c:	3d800000 	.word	0x3d800000

08020ca0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020ca0:	4b01      	ldr	r3, [pc, #4]	; (8020ca8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020ca2:	6018      	str	r0, [r3, #0]
 8020ca4:	4770      	bx	lr
 8020ca6:	bf00      	nop
 8020ca8:	2400d894 	.word	0x2400d894

08020cac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8020cac:	4b06      	ldr	r3, [pc, #24]	; (8020cc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8020cae:	881a      	ldrh	r2, [r3, #0]
 8020cb0:	4282      	cmp	r2, r0
 8020cb2:	d807      	bhi.n	8020cc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8020cb4:	4b05      	ldr	r3, [pc, #20]	; (8020ccc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8020cb6:	881b      	ldrh	r3, [r3, #0]
 8020cb8:	4413      	add	r3, r2
 8020cba:	4298      	cmp	r0, r3
 8020cbc:	bfac      	ite	ge
 8020cbe:	2000      	movge	r0, #0
 8020cc0:	2001      	movlt	r0, #1
 8020cc2:	4770      	bx	lr
 8020cc4:	2000      	movs	r0, #0
 8020cc6:	4770      	bx	lr
 8020cc8:	2400d8b4 	.word	0x2400d8b4
 8020ccc:	2400d8b8 	.word	0x2400d8b8

08020cd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020cd0:	b508      	push	{r3, lr}
 8020cd2:	4601      	mov	r1, r0
 8020cd4:	f7ff ffea 	bl	8020cac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020cd8:	b118      	cbz	r0, 8020ce2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8020cda:	4b02      	ldr	r3, [pc, #8]	; (8020ce4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8020ce2:	bd08      	pop	{r3, pc}
 8020ce4:	2400d898 	.word	0x2400d898

08020ce8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8020ce8:	b538      	push	{r3, r4, r5, lr}
 8020cea:	4604      	mov	r4, r0
 8020cec:	f7ff ffde 	bl	8020cac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020cf0:	b188      	cbz	r0, 8020d16 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8020cf2:	4b09      	ldr	r3, [pc, #36]	; (8020d18 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8020cf4:	881a      	ldrh	r2, [r3, #0]
 8020cf6:	4b09      	ldr	r3, [pc, #36]	; (8020d1c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8020cf8:	1aa4      	subs	r4, r4, r2
 8020cfa:	220e      	movs	r2, #14
 8020cfc:	681d      	ldr	r5, [r3, #0]
 8020cfe:	4362      	muls	r2, r4
 8020d00:	18ac      	adds	r4, r5, r2
 8020d02:	7b23      	ldrb	r3, [r4, #12]
 8020d04:	f013 0320 	ands.w	r3, r3, #32
 8020d08:	bf17      	itett	ne
 8020d0a:	680b      	ldrne	r3, [r1, #0]
 8020d0c:	4618      	moveq	r0, r3
 8020d0e:	50ab      	strne	r3, [r5, r2]
 8020d10:	684b      	ldrne	r3, [r1, #4]
 8020d12:	bf18      	it	ne
 8020d14:	6063      	strne	r3, [r4, #4]
 8020d16:	bd38      	pop	{r3, r4, r5, pc}
 8020d18:	2400d8b4 	.word	0x2400d8b4
 8020d1c:	2400d89c 	.word	0x2400d89c

08020d20 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8020d20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8020d24:	4606      	mov	r6, r0
 8020d26:	460c      	mov	r4, r1
 8020d28:	f7ff ffc0 	bl	8020cac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8020d2c:	b918      	cbnz	r0, 8020d36 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8020d2e:	2000      	movs	r0, #0
 8020d30:	b002      	add	sp, #8
 8020d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d36:	4608      	mov	r0, r1
 8020d38:	f7f7 fd3d 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020d3c:	2800      	cmp	r0, #0
 8020d3e:	d1f6      	bne.n	8020d2e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020d40:	4b3f      	ldr	r3, [pc, #252]	; (8020e40 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8020d42:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8020e44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8020d46:	881d      	ldrh	r5, [r3, #0]
 8020d48:	f8d9 a000 	ldr.w	sl, [r9]
 8020d4c:	46c8      	mov	r8, r9
 8020d4e:	1b73      	subs	r3, r6, r5
 8020d50:	250e      	movs	r5, #14
 8020d52:	435d      	muls	r5, r3
 8020d54:	eb0a 0705 	add.w	r7, sl, r5
 8020d58:	7b3b      	ldrb	r3, [r7, #12]
 8020d5a:	f013 0f20 	tst.w	r3, #32
 8020d5e:	d0e6      	beq.n	8020d2e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020d60:	4621      	mov	r1, r4
 8020d62:	4638      	mov	r0, r7
 8020d64:	f7fd fb06 	bl	801e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 8020d68:	2800      	cmp	r0, #0
 8020d6a:	d1e1      	bne.n	8020d30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8020d6c:	4639      	mov	r1, r7
 8020d6e:	4620      	mov	r0, r4
 8020d70:	f7fd fb00 	bl	801e374 <_ZNK8touchgfx4Rect8includesERKS0_>
 8020d74:	b108      	cbz	r0, 8020d7a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8020d76:	4621      	mov	r1, r4
 8020d78:	e020      	b.n	8020dbc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8020d7a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020d7e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8020d82:	429a      	cmp	r2, r3
 8020d84:	d11e      	bne.n	8020dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020d86:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020d8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8020d8e:	429a      	cmp	r2, r3
 8020d90:	d118      	bne.n	8020dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020d92:	6820      	ldr	r0, [r4, #0]
 8020d94:	466b      	mov	r3, sp
 8020d96:	6861      	ldr	r1, [r4, #4]
 8020d98:	c303      	stmia	r3!, {r0, r1}
 8020d9a:	4639      	mov	r1, r7
 8020d9c:	4668      	mov	r0, sp
 8020d9e:	f7f8 fa25 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8020da2:	f8d9 3000 	ldr.w	r3, [r9]
 8020da6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8020daa:	442b      	add	r3, r5
 8020dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8020db0:	4413      	add	r3, r2
 8020db2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8020db6:	4293      	cmp	r3, r2
 8020db8:	dc04      	bgt.n	8020dc4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8020dba:	4669      	mov	r1, sp
 8020dbc:	4630      	mov	r0, r6
 8020dbe:	f7ff ff93 	bl	8020ce8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8020dc2:	e7b5      	b.n	8020d30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8020dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8020dc8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8020dcc:	442b      	add	r3, r5
 8020dce:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020dd2:	4291      	cmp	r1, r2
 8020dd4:	d119      	bne.n	8020e0a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8020dd6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8020dda:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020dde:	4291      	cmp	r1, r2
 8020de0:	d113      	bne.n	8020e0a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8020de2:	6820      	ldr	r0, [r4, #0]
 8020de4:	466a      	mov	r2, sp
 8020de6:	6861      	ldr	r1, [r4, #4]
 8020de8:	c203      	stmia	r2!, {r0, r1}
 8020dea:	4619      	mov	r1, r3
 8020dec:	4668      	mov	r0, sp
 8020dee:	f7f8 f9fd 	bl	80191ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8020df2:	f8d8 3000 	ldr.w	r3, [r8]
 8020df6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8020dfa:	442b      	add	r3, r5
 8020dfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020e00:	4413      	add	r3, r2
 8020e02:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8020e06:	4293      	cmp	r3, r2
 8020e08:	ddd7      	ble.n	8020dba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	f7f7 fcd3 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020e10:	b990      	cbnz	r0, 8020e38 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8020e12:	88a7      	ldrh	r7, [r4, #4]
 8020e14:	88e3      	ldrh	r3, [r4, #6]
 8020e16:	fb17 f703 	smulbb	r7, r7, r3
 8020e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8020e1e:	441d      	add	r5, r3
 8020e20:	4628      	mov	r0, r5
 8020e22:	f7f7 fcc8 	bl	80187b6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020e26:	b948      	cbnz	r0, 8020e3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8020e28:	88ab      	ldrh	r3, [r5, #4]
 8020e2a:	88ea      	ldrh	r2, [r5, #6]
 8020e2c:	fb13 f302 	smulbb	r3, r3, r2
 8020e30:	42bb      	cmp	r3, r7
 8020e32:	f6bf af7c 	bge.w	8020d2e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8020e36:	e79e      	b.n	8020d76 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8020e38:	2700      	movs	r7, #0
 8020e3a:	e7ee      	b.n	8020e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8020e3c:	2300      	movs	r3, #0
 8020e3e:	e7f7      	b.n	8020e30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8020e40:	2400d8b4 	.word	0x2400d8b4
 8020e44:	2400d89c 	.word	0x2400d89c

08020e48 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e4a:	4c24      	ldr	r4, [pc, #144]	; (8020edc <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8020e4c:	6823      	ldr	r3, [r4, #0]
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d042      	beq.n	8020ed8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020e52:	4a23      	ldr	r2, [pc, #140]	; (8020ee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8020e54:	4d23      	ldr	r5, [pc, #140]	; (8020ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8020e56:	8811      	ldrh	r1, [r2, #0]
 8020e58:	f8b5 c000 	ldrh.w	ip, [r5]
 8020e5c:	4822      	ldr	r0, [pc, #136]	; (8020ee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020e5e:	4461      	add	r1, ip
 8020e60:	1c4a      	adds	r2, r1, #1
 8020e62:	008f      	lsls	r7, r1, #2
 8020e64:	f022 0201 	bic.w	r2, r2, #1
 8020e68:	19de      	adds	r6, r3, r7
 8020e6a:	0412      	lsls	r2, r2, #16
 8020e6c:	6006      	str	r6, [r0, #0]
 8020e6e:	4e1f      	ldr	r6, [pc, #124]	; (8020eec <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020e70:	0c12      	lsrs	r2, r2, #16
 8020e72:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8020e76:	19da      	adds	r2, r3, r7
 8020e78:	6032      	str	r2, [r6, #0]
 8020e7a:	220e      	movs	r2, #14
 8020e7c:	fb02 f20c 	mul.w	r2, r2, ip
 8020e80:	3203      	adds	r2, #3
 8020e82:	f022 0203 	bic.w	r2, r2, #3
 8020e86:	443a      	add	r2, r7
 8020e88:	4f19      	ldr	r7, [pc, #100]	; (8020ef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020e8a:	4413      	add	r3, r2
 8020e8c:	603b      	str	r3, [r7, #0]
 8020e8e:	2300      	movs	r3, #0
 8020e90:	4f18      	ldr	r7, [pc, #96]	; (8020ef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8020e92:	469c      	mov	ip, r3
 8020e94:	803b      	strh	r3, [r7, #0]
 8020e96:	4f18      	ldr	r7, [pc, #96]	; (8020ef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020e98:	683f      	ldr	r7, [r7, #0]
 8020e9a:	1aba      	subs	r2, r7, r2
 8020e9c:	4f17      	ldr	r7, [pc, #92]	; (8020efc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8020e9e:	603a      	str	r2, [r7, #0]
 8020ea0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8020ea4:	4a16      	ldr	r2, [pc, #88]	; (8020f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020ea6:	8013      	strh	r3, [r2, #0]
 8020ea8:	428b      	cmp	r3, r1
 8020eaa:	d10d      	bne.n	8020ec8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8020eac:	882d      	ldrh	r5, [r5, #0]
 8020eae:	2300      	movs	r3, #0
 8020eb0:	6830      	ldr	r0, [r6, #0]
 8020eb2:	240e      	movs	r4, #14
 8020eb4:	429d      	cmp	r5, r3
 8020eb6:	d90f      	bls.n	8020ed8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8020eb8:	fb04 0203 	mla	r2, r4, r3, r0
 8020ebc:	3301      	adds	r3, #1
 8020ebe:	7b11      	ldrb	r1, [r2, #12]
 8020ec0:	f36f 1145 	bfc	r1, #5, #1
 8020ec4:	7311      	strb	r1, [r2, #12]
 8020ec6:	e7f5      	b.n	8020eb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8020ec8:	6822      	ldr	r2, [r4, #0]
 8020eca:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8020ece:	6802      	ldr	r2, [r0, #0]
 8020ed0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8020ed4:	3301      	adds	r3, #1
 8020ed6:	e7e7      	b.n	8020ea8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8020ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020eda:	bf00      	nop
 8020edc:	2400d898 	.word	0x2400d898
 8020ee0:	2400d8b4 	.word	0x2400d8b4
 8020ee4:	2400d8b8 	.word	0x2400d8b8
 8020ee8:	2400d8ac 	.word	0x2400d8ac
 8020eec:	2400d89c 	.word	0x2400d89c
 8020ef0:	2400d8a4 	.word	0x2400d8a4
 8020ef4:	2400d8b6 	.word	0x2400d8b6
 8020ef8:	2400d8a0 	.word	0x2400d8a0
 8020efc:	2400d8b0 	.word	0x2400d8b0
 8020f00:	2400d8a8 	.word	0x2400d8a8

08020f04 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020f04:	4b06      	ldr	r3, [pc, #24]	; (8020f20 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	b943      	cbnz	r3, 8020f1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020f0a:	b139      	cbz	r1, 8020f1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8020f0c:	4b05      	ldr	r3, [pc, #20]	; (8020f24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8020f0e:	801a      	strh	r2, [r3, #0]
 8020f10:	4b05      	ldr	r3, [pc, #20]	; (8020f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8020f12:	6019      	str	r1, [r3, #0]
 8020f14:	4b05      	ldr	r3, [pc, #20]	; (8020f2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8020f16:	6018      	str	r0, [r3, #0]
 8020f18:	f7ff bf96 	b.w	8020e48 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8020f1c:	4770      	bx	lr
 8020f1e:	bf00      	nop
 8020f20:	2400d8a4 	.word	0x2400d8a4
 8020f24:	2400d8b8 	.word	0x2400d8b8
 8020f28:	2400d8a0 	.word	0x2400d8a0
 8020f2c:	2400d898 	.word	0x2400d898

08020f30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020f30:	b470      	push	{r4, r5, r6}
 8020f32:	4c07      	ldr	r4, [pc, #28]	; (8020f50 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020f34:	4605      	mov	r5, r0
 8020f36:	4610      	mov	r0, r2
 8020f38:	9a03      	ldr	r2, [sp, #12]
 8020f3a:	6826      	ldr	r6, [r4, #0]
 8020f3c:	b936      	cbnz	r6, 8020f4c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020f3e:	6025      	str	r5, [r4, #0]
 8020f40:	4c04      	ldr	r4, [pc, #16]	; (8020f54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8020f42:	8021      	strh	r1, [r4, #0]
 8020f44:	4619      	mov	r1, r3
 8020f46:	bc70      	pop	{r4, r5, r6}
 8020f48:	f7ff bfdc 	b.w	8020f04 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020f4c:	bc70      	pop	{r4, r5, r6}
 8020f4e:	4770      	bx	lr
 8020f50:	2400d8bc 	.word	0x2400d8bc
 8020f54:	2400d8b4 	.word	0x2400d8b4

08020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020f58:	4a12      	ldr	r2, [pc, #72]	; (8020fa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8020f5a:	8803      	ldrh	r3, [r0, #0]
 8020f5c:	8812      	ldrh	r2, [r2, #0]
 8020f5e:	4293      	cmp	r3, r2
 8020f60:	d207      	bcs.n	8020f72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8020f62:	4a11      	ldr	r2, [pc, #68]	; (8020fa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8020f64:	2114      	movs	r1, #20
 8020f66:	6812      	ldr	r2, [r2, #0]
 8020f68:	fb01 2303 	mla	r3, r1, r3, r2
 8020f6c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8020f70:	4770      	bx	lr
 8020f72:	490e      	ldr	r1, [pc, #56]	; (8020fac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8020f74:	8809      	ldrh	r1, [r1, #0]
 8020f76:	4411      	add	r1, r2
 8020f78:	428b      	cmp	r3, r1
 8020f7a:	da04      	bge.n	8020f86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8020f7c:	1a9b      	subs	r3, r3, r2
 8020f7e:	4a0c      	ldr	r2, [pc, #48]	; (8020fb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020f80:	210e      	movs	r1, #14
 8020f82:	6812      	ldr	r2, [r2, #0]
 8020f84:	e7f0      	b.n	8020f68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8020f86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020f8a:	4293      	cmp	r3, r2
 8020f8c:	d108      	bne.n	8020fa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8020f8e:	4b09      	ldr	r3, [pc, #36]	; (8020fb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020f90:	781b      	ldrb	r3, [r3, #0]
 8020f92:	b91b      	cbnz	r3, 8020f9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8020f94:	4b08      	ldr	r3, [pc, #32]	; (8020fb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8020f96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8020f9a:	4770      	bx	lr
 8020f9c:	4b07      	ldr	r3, [pc, #28]	; (8020fbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020f9e:	e7fa      	b.n	8020f96 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8020fa0:	2000      	movs	r0, #0
 8020fa2:	4770      	bx	lr
 8020fa4:	2400d8b4 	.word	0x2400d8b4
 8020fa8:	2400d8bc 	.word	0x2400d8bc
 8020fac:	2400d8b8 	.word	0x2400d8b8
 8020fb0:	2400d89c 	.word	0x2400d89c
 8020fb4:	2400d824 	.word	0x2400d824
 8020fb8:	2400d826 	.word	0x2400d826
 8020fbc:	2400d828 	.word	0x2400d828

08020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020fc0:	4a12      	ldr	r2, [pc, #72]	; (802100c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8020fc2:	8803      	ldrh	r3, [r0, #0]
 8020fc4:	8812      	ldrh	r2, [r2, #0]
 8020fc6:	4293      	cmp	r3, r2
 8020fc8:	d207      	bcs.n	8020fda <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8020fca:	4a11      	ldr	r2, [pc, #68]	; (8021010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020fcc:	2114      	movs	r1, #20
 8020fce:	6812      	ldr	r2, [r2, #0]
 8020fd0:	fb01 2303 	mla	r3, r1, r3, r2
 8020fd4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8020fd8:	4770      	bx	lr
 8020fda:	490e      	ldr	r1, [pc, #56]	; (8021014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8020fdc:	8809      	ldrh	r1, [r1, #0]
 8020fde:	4411      	add	r1, r2
 8020fe0:	428b      	cmp	r3, r1
 8020fe2:	da04      	bge.n	8020fee <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8020fe4:	1a9b      	subs	r3, r3, r2
 8020fe6:	4a0c      	ldr	r2, [pc, #48]	; (8021018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020fe8:	210e      	movs	r1, #14
 8020fea:	6812      	ldr	r2, [r2, #0]
 8020fec:	e7f0      	b.n	8020fd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8020fee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020ff2:	4293      	cmp	r3, r2
 8020ff4:	d108      	bne.n	8021008 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8020ff6:	4b09      	ldr	r3, [pc, #36]	; (802101c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020ff8:	781b      	ldrb	r3, [r3, #0]
 8020ffa:	b91b      	cbnz	r3, 8021004 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8020ffc:	4b08      	ldr	r3, [pc, #32]	; (8021020 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020ffe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8021002:	4770      	bx	lr
 8021004:	4b07      	ldr	r3, [pc, #28]	; (8021024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8021006:	e7fa      	b.n	8020ffe <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8021008:	2000      	movs	r0, #0
 802100a:	4770      	bx	lr
 802100c:	2400d8b4 	.word	0x2400d8b4
 8021010:	2400d8bc 	.word	0x2400d8bc
 8021014:	2400d8b8 	.word	0x2400d8b8
 8021018:	2400d89c 	.word	0x2400d89c
 802101c:	2400d824 	.word	0x2400d824
 8021020:	2400d828 	.word	0x2400d828
 8021024:	2400d826 	.word	0x2400d826

08021028 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8021028:	4a1f      	ldr	r2, [pc, #124]	; (80210a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 802102a:	b510      	push	{r4, lr}
 802102c:	880b      	ldrh	r3, [r1, #0]
 802102e:	8812      	ldrh	r2, [r2, #0]
 8021030:	4293      	cmp	r3, r2
 8021032:	d213      	bcs.n	802105c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8021034:	4a1d      	ldr	r2, [pc, #116]	; (80210ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8021036:	2114      	movs	r1, #20
 8021038:	6812      	ldr	r2, [r2, #0]
 802103a:	fb01 2303 	mla	r3, r1, r3, r2
 802103e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8021042:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8021046:	8a1a      	ldrh	r2, [r3, #16]
 8021048:	8a5b      	ldrh	r3, [r3, #18]
 802104a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 802104e:	8004      	strh	r4, [r0, #0]
 8021050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021054:	8041      	strh	r1, [r0, #2]
 8021056:	8082      	strh	r2, [r0, #4]
 8021058:	80c3      	strh	r3, [r0, #6]
 802105a:	e00e      	b.n	802107a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 802105c:	4914      	ldr	r1, [pc, #80]	; (80210b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 802105e:	8809      	ldrh	r1, [r1, #0]
 8021060:	4411      	add	r1, r2
 8021062:	428b      	cmp	r3, r1
 8021064:	da0a      	bge.n	802107c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8021066:	1a9b      	subs	r3, r3, r2
 8021068:	4a12      	ldr	r2, [pc, #72]	; (80210b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 802106a:	210e      	movs	r1, #14
 802106c:	6812      	ldr	r2, [r2, #0]
 802106e:	fb01 2303 	mla	r3, r1, r3, r2
 8021072:	681a      	ldr	r2, [r3, #0]
 8021074:	6002      	str	r2, [r0, #0]
 8021076:	685a      	ldr	r2, [r3, #4]
 8021078:	6042      	str	r2, [r0, #4]
 802107a:	bd10      	pop	{r4, pc}
 802107c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021080:	4293      	cmp	r3, r2
 8021082:	d10b      	bne.n	802109c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8021084:	4b0c      	ldr	r3, [pc, #48]	; (80210b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8021086:	f9b3 1000 	ldrsh.w	r1, [r3]
 802108a:	4b0c      	ldr	r3, [pc, #48]	; (80210bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 802108c:	8081      	strh	r1, [r0, #4]
 802108e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8021092:	2300      	movs	r3, #0
 8021094:	80c2      	strh	r2, [r0, #6]
 8021096:	8003      	strh	r3, [r0, #0]
 8021098:	8043      	strh	r3, [r0, #2]
 802109a:	e7ee      	b.n	802107a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 802109c:	2300      	movs	r3, #0
 802109e:	8003      	strh	r3, [r0, #0]
 80210a0:	8043      	strh	r3, [r0, #2]
 80210a2:	8083      	strh	r3, [r0, #4]
 80210a4:	e7d8      	b.n	8021058 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80210a6:	bf00      	nop
 80210a8:	2400d8b4 	.word	0x2400d8b4
 80210ac:	2400d8bc 	.word	0x2400d8bc
 80210b0:	2400d8b8 	.word	0x2400d8b8
 80210b4:	2400d89c 	.word	0x2400d89c
 80210b8:	2400d820 	.word	0x2400d820
 80210bc:	2400d822 	.word	0x2400d822

080210c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80210c0:	4a17      	ldr	r2, [pc, #92]	; (8021120 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80210c2:	8803      	ldrh	r3, [r0, #0]
 80210c4:	8812      	ldrh	r2, [r2, #0]
 80210c6:	4293      	cmp	r3, r2
 80210c8:	d213      	bcs.n	80210f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80210ca:	4a16      	ldr	r2, [pc, #88]	; (8021124 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80210cc:	2114      	movs	r1, #20
 80210ce:	6812      	ldr	r2, [r2, #0]
 80210d0:	fb01 2303 	mla	r3, r1, r3, r2
 80210d4:	8a1a      	ldrh	r2, [r3, #16]
 80210d6:	8919      	ldrh	r1, [r3, #8]
 80210d8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80210dc:	428a      	cmp	r2, r1
 80210de:	db1d      	blt.n	802111c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80210e0:	8a58      	ldrh	r0, [r3, #18]
 80210e2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80210e6:	895b      	ldrh	r3, [r3, #10]
 80210e8:	4298      	cmp	r0, r3
 80210ea:	bfac      	ite	ge
 80210ec:	2000      	movge	r0, #0
 80210ee:	2001      	movlt	r0, #1
 80210f0:	4770      	bx	lr
 80210f2:	490d      	ldr	r1, [pc, #52]	; (8021128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80210f4:	8809      	ldrh	r1, [r1, #0]
 80210f6:	4411      	add	r1, r2
 80210f8:	428b      	cmp	r3, r1
 80210fa:	da0d      	bge.n	8021118 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80210fc:	1a9b      	subs	r3, r3, r2
 80210fe:	4a0b      	ldr	r2, [pc, #44]	; (802112c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8021100:	210e      	movs	r1, #14
 8021102:	6812      	ldr	r2, [r2, #0]
 8021104:	fb01 2303 	mla	r3, r1, r3, r2
 8021108:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802110c:	891a      	ldrh	r2, [r3, #8]
 802110e:	4291      	cmp	r1, r2
 8021110:	db04      	blt.n	802111c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8021112:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8021116:	e7e6      	b.n	80210e6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8021118:	2000      	movs	r0, #0
 802111a:	4770      	bx	lr
 802111c:	2001      	movs	r0, #1
 802111e:	4770      	bx	lr
 8021120:	2400d8b4 	.word	0x2400d8b4
 8021124:	2400d8bc 	.word	0x2400d8bc
 8021128:	2400d8b8 	.word	0x2400d8b8
 802112c:	2400d89c 	.word	0x2400d89c

08021130 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021130:	4a12      	ldr	r2, [pc, #72]	; (802117c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8021132:	8803      	ldrh	r3, [r0, #0]
 8021134:	8811      	ldrh	r1, [r2, #0]
 8021136:	428b      	cmp	r3, r1
 8021138:	d20b      	bcs.n	8021152 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 802113a:	4a11      	ldr	r2, [pc, #68]	; (8021180 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 802113c:	6812      	ldr	r2, [r2, #0]
 802113e:	b112      	cbz	r2, 8021146 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021140:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021144:	b9c0      	cbnz	r0, 8021178 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8021146:	4a0f      	ldr	r2, [pc, #60]	; (8021184 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8021148:	6811      	ldr	r1, [r2, #0]
 802114a:	2214      	movs	r2, #20
 802114c:	4353      	muls	r3, r2
 802114e:	58c8      	ldr	r0, [r1, r3]
 8021150:	4770      	bx	lr
 8021152:	4a0d      	ldr	r2, [pc, #52]	; (8021188 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8021154:	8812      	ldrh	r2, [r2, #0]
 8021156:	440a      	add	r2, r1
 8021158:	4293      	cmp	r3, r2
 802115a:	da04      	bge.n	8021166 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 802115c:	4a08      	ldr	r2, [pc, #32]	; (8021180 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 802115e:	6812      	ldr	r2, [r2, #0]
 8021160:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021164:	4770      	bx	lr
 8021166:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802116a:	4293      	cmp	r3, r2
 802116c:	d103      	bne.n	8021176 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 802116e:	4b07      	ldr	r3, [pc, #28]	; (802118c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8021174:	4770      	bx	lr
 8021176:	2000      	movs	r0, #0
 8021178:	4770      	bx	lr
 802117a:	bf00      	nop
 802117c:	2400d8b4 	.word	0x2400d8b4
 8021180:	2400d898 	.word	0x2400d898
 8021184:	2400d8bc 	.word	0x2400d8bc
 8021188:	2400d8b8 	.word	0x2400d8b8
 802118c:	2400d82c 	.word	0x2400d82c

08021190 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8021190:	4b24      	ldr	r3, [pc, #144]	; (8021224 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8021192:	8802      	ldrh	r2, [r0, #0]
 8021194:	8818      	ldrh	r0, [r3, #0]
 8021196:	4282      	cmp	r2, r0
 8021198:	d221      	bcs.n	80211de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 802119a:	4b23      	ldr	r3, [pc, #140]	; (8021228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 802119c:	6819      	ldr	r1, [r3, #0]
 802119e:	2314      	movs	r3, #20
 80211a0:	fb03 1302 	mla	r3, r3, r2, r1
 80211a4:	6858      	ldr	r0, [r3, #4]
 80211a6:	2800      	cmp	r0, #0
 80211a8:	d03a      	beq.n	8021220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80211aa:	4920      	ldr	r1, [pc, #128]	; (802122c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80211ac:	6809      	ldr	r1, [r1, #0]
 80211ae:	2900      	cmp	r1, #0
 80211b0:	d036      	beq.n	8021220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80211b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80211b6:	2900      	cmp	r1, #0
 80211b8:	d032      	beq.n	8021220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80211ba:	891a      	ldrh	r2, [r3, #8]
 80211bc:	8958      	ldrh	r0, [r3, #10]
 80211be:	4350      	muls	r0, r2
 80211c0:	7c5a      	ldrb	r2, [r3, #17]
 80211c2:	7cdb      	ldrb	r3, [r3, #19]
 80211c4:	0952      	lsrs	r2, r2, #5
 80211c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80211ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80211ce:	2b0b      	cmp	r3, #11
 80211d0:	bf18      	it	ne
 80211d2:	0040      	lslne	r0, r0, #1
 80211d4:	3003      	adds	r0, #3
 80211d6:	f020 0003 	bic.w	r0, r0, #3
 80211da:	4408      	add	r0, r1
 80211dc:	4770      	bx	lr
 80211de:	4b14      	ldr	r3, [pc, #80]	; (8021230 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80211e0:	881b      	ldrh	r3, [r3, #0]
 80211e2:	4403      	add	r3, r0
 80211e4:	429a      	cmp	r2, r3
 80211e6:	da1a      	bge.n	802121e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80211e8:	4b12      	ldr	r3, [pc, #72]	; (8021234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80211ea:	1a10      	subs	r0, r2, r0
 80211ec:	210e      	movs	r1, #14
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	fb01 3000 	mla	r0, r1, r0, r3
 80211f4:	7b03      	ldrb	r3, [r0, #12]
 80211f6:	f003 031f 	and.w	r3, r3, #31
 80211fa:	2b0b      	cmp	r3, #11
 80211fc:	d10b      	bne.n	8021216 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80211fe:	8903      	ldrh	r3, [r0, #8]
 8021200:	8940      	ldrh	r0, [r0, #10]
 8021202:	4358      	muls	r0, r3
 8021204:	4b09      	ldr	r3, [pc, #36]	; (802122c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021206:	3003      	adds	r0, #3
 8021208:	6819      	ldr	r1, [r3, #0]
 802120a:	f020 0303 	bic.w	r3, r0, #3
 802120e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8021212:	4418      	add	r0, r3
 8021214:	4770      	bx	lr
 8021216:	2b0d      	cmp	r3, #13
 8021218:	d101      	bne.n	802121e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 802121a:	300d      	adds	r0, #13
 802121c:	4770      	bx	lr
 802121e:	2000      	movs	r0, #0
 8021220:	4770      	bx	lr
 8021222:	bf00      	nop
 8021224:	2400d8b4 	.word	0x2400d8b4
 8021228:	2400d8bc 	.word	0x2400d8bc
 802122c:	2400d898 	.word	0x2400d898
 8021230:	2400d8b8 	.word	0x2400d8b8
 8021234:	2400d89c 	.word	0x2400d89c

08021238 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8021238:	4a17      	ldr	r2, [pc, #92]	; (8021298 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 802123a:	b510      	push	{r4, lr}
 802123c:	8803      	ldrh	r3, [r0, #0]
 802123e:	8812      	ldrh	r2, [r2, #0]
 8021240:	4293      	cmp	r3, r2
 8021242:	d20c      	bcs.n	802125e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021244:	4a15      	ldr	r2, [pc, #84]	; (802129c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8021246:	2114      	movs	r1, #20
 8021248:	6812      	ldr	r2, [r2, #0]
 802124a:	fb01 2303 	mla	r3, r1, r3, r2
 802124e:	7c58      	ldrb	r0, [r3, #17]
 8021250:	0942      	lsrs	r2, r0, #5
 8021252:	7cd8      	ldrb	r0, [r3, #19]
 8021254:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021258:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 802125c:	bd10      	pop	{r4, pc}
 802125e:	4910      	ldr	r1, [pc, #64]	; (80212a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8021260:	8809      	ldrh	r1, [r1, #0]
 8021262:	4411      	add	r1, r2
 8021264:	428b      	cmp	r3, r1
 8021266:	da09      	bge.n	802127c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021268:	1a9b      	subs	r3, r3, r2
 802126a:	4a0e      	ldr	r2, [pc, #56]	; (80212a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 802126c:	210e      	movs	r1, #14
 802126e:	6812      	ldr	r2, [r2, #0]
 8021270:	fb01 2303 	mla	r3, r1, r3, r2
 8021274:	7b18      	ldrb	r0, [r3, #12]
 8021276:	f000 001f 	and.w	r0, r0, #31
 802127a:	e7ef      	b.n	802125c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 802127c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021280:	4293      	cmp	r3, r2
 8021282:	d106      	bne.n	8021292 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8021284:	f7ef ff9c 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 8021288:	6803      	ldr	r3, [r0, #0]
 802128a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021290:	4718      	bx	r3
 8021292:	2000      	movs	r0, #0
 8021294:	e7e2      	b.n	802125c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8021296:	bf00      	nop
 8021298:	2400d8b4 	.word	0x2400d8b4
 802129c:	2400d8bc 	.word	0x2400d8bc
 80212a0:	2400d8b8 	.word	0x2400d8b8
 80212a4:	2400d89c 	.word	0x2400d89c

080212a8 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 80212a8:	2020      	movs	r0, #32
 80212aa:	4770      	bx	lr

080212ac <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 80212ac:	2002      	movs	r0, #2
 80212ae:	4770      	bx	lr

080212b0 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 80212b0:	4b02      	ldr	r3, [pc, #8]	; (80212bc <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 80212b2:	8818      	ldrh	r0, [r3, #0]
 80212b4:	0080      	lsls	r0, r0, #2
 80212b6:	b280      	uxth	r0, r0
 80212b8:	4770      	bx	lr
 80212ba:	bf00      	nop
 80212bc:	2400d826 	.word	0x2400d826

080212c0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80212c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212c4:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80212c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80212ca:	f1bc 0f00 	cmp.w	ip, #0
 80212ce:	d073      	beq.n	80213b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80212d0:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 80212d4:	2c00      	cmp	r4, #0
 80212d6:	dd6f      	ble.n	80213b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80212d8:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 80212dc:	2e00      	cmp	r6, #0
 80212de:	dd6b      	ble.n	80213b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 80212e0:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 80212e4:	4356      	muls	r6, r2
 80212e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80212ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80212ee:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80212f2:	fb02 3305 	mla	r3, r2, r5, r3
 80212f6:	eba2 0204 	sub.w	r2, r2, r4
 80212fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80212fe:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8021302:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8021306:	d10a      	bne.n	802131e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 8021308:	42b1      	cmp	r1, r6
 802130a:	d255      	bcs.n	80213b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 802130c:	eb01 030a 	add.w	r3, r1, sl
 8021310:	4299      	cmp	r1, r3
 8021312:	d202      	bcs.n	802131a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 8021314:	f841 0b04 	str.w	r0, [r1], #4
 8021318:	e7fa      	b.n	8021310 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 802131a:	4411      	add	r1, r2
 802131c:	e7f4      	b.n	8021308 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 802131e:	fa1f fe8c 	uxth.w	lr, ip
 8021322:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8021326:	f3c0 2807 	ubfx	r8, r0, #8, #8
 802132a:	fa5f f980 	uxtb.w	r9, r0
 802132e:	fb03 f30e 	mul.w	r3, r3, lr
 8021332:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8021336:	fb08 f80e 	mul.w	r8, r8, lr
 802133a:	9301      	str	r3, [sp, #4]
 802133c:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 8021340:	fb09 f90e 	mul.w	r9, r9, lr
 8021344:	9300      	str	r3, [sp, #0]
 8021346:	42b1      	cmp	r1, r6
 8021348:	d236      	bcs.n	80213b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 802134a:	eb01 0b0a 	add.w	fp, r1, sl
 802134e:	4559      	cmp	r1, fp
 8021350:	d230      	bcs.n	80213b4 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 8021352:	680b      	ldr	r3, [r1, #0]
 8021354:	0e1c      	lsrs	r4, r3, #24
 8021356:	d102      	bne.n	802135e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 8021358:	9b00      	ldr	r3, [sp, #0]
 802135a:	600b      	str	r3, [r1, #0]
 802135c:	e7f7      	b.n	802134e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 802135e:	fb04 f00e 	mul.w	r0, r4, lr
 8021362:	eb0c 0504 	add.w	r5, ip, r4
 8021366:	3104      	adds	r1, #4
 8021368:	1c47      	adds	r7, r0, #1
 802136a:	eb07 2720 	add.w	r7, r7, r0, asr #8
 802136e:	1238      	asrs	r0, r7, #8
 8021370:	1a27      	subs	r7, r4, r0
 8021372:	1a2d      	subs	r5, r5, r0
 8021374:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8021378:	9801      	ldr	r0, [sp, #4]
 802137a:	b2ed      	uxtb	r5, r5
 802137c:	fb07 0404 	mla	r4, r7, r4, r0
 8021380:	b2d8      	uxtb	r0, r3
 8021382:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021386:	fb07 9000 	mla	r0, r7, r0, r9
 802138a:	fbb4 f4f5 	udiv	r4, r4, r5
 802138e:	fbb0 f0f5 	udiv	r0, r0, r5
 8021392:	0424      	lsls	r4, r4, #16
 8021394:	b2c0      	uxtb	r0, r0
 8021396:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 802139a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 802139e:	4320      	orrs	r0, r4
 80213a0:	fb07 8403 	mla	r4, r7, r3, r8
 80213a4:	fbb4 f4f5 	udiv	r4, r4, r5
 80213a8:	0224      	lsls	r4, r4, #8
 80213aa:	b2a4      	uxth	r4, r4
 80213ac:	4320      	orrs	r0, r4
 80213ae:	f841 0c04 	str.w	r0, [r1, #-4]
 80213b2:	e7cc      	b.n	802134e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 80213b4:	4411      	add	r1, r2
 80213b6:	e7c6      	b.n	8021346 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 80213b8:	b003      	add	sp, #12
 80213ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080213c0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80213c0:	2bff      	cmp	r3, #255	; 0xff
 80213c2:	d061      	beq.n	8021488 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80213c4:	2a33      	cmp	r2, #51	; 0x33
 80213c6:	d83d      	bhi.n	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 80213c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80213cc:	00500054 	.word	0x00500054
 80213d0:	004e0052 	.word	0x004e0052
 80213d4:	00560058 	.word	0x00560058
 80213d8:	003c003c 	.word	0x003c003c
 80213dc:	010000fe 	.word	0x010000fe
 80213e0:	010000fe 	.word	0x010000fe
 80213e4:	003c003c 	.word	0x003c003c
 80213e8:	003c003c 	.word	0x003c003c
 80213ec:	003c003c 	.word	0x003c003c
 80213f0:	003c003c 	.word	0x003c003c
 80213f4:	003c003c 	.word	0x003c003c
 80213f8:	003c003c 	.word	0x003c003c
 80213fc:	003c003c 	.word	0x003c003c
 8021400:	003c003c 	.word	0x003c003c
 8021404:	003c003c 	.word	0x003c003c
 8021408:	003c003c 	.word	0x003c003c
 802140c:	003c003c 	.word	0x003c003c
 8021410:	003c003c 	.word	0x003c003c
 8021414:	003c003c 	.word	0x003c003c
 8021418:	003c003c 	.word	0x003c003c
 802141c:	003c003c 	.word	0x003c003c
 8021420:	003c003c 	.word	0x003c003c
 8021424:	00340042 	.word	0x00340042
 8021428:	00e400eb 	.word	0x00e400eb
 802142c:	005a005c 	.word	0x005a005c
 8021430:	005a005c 	.word	0x005a005c
 8021434:	684b      	ldr	r3, [r1, #4]
 8021436:	781b      	ldrb	r3, [r3, #0]
 8021438:	2b01      	cmp	r3, #1
 802143a:	d005      	beq.n	8021448 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 802143c:	f0c0 80af 	bcc.w	802159e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 8021440:	2b02      	cmp	r3, #2
 8021442:	d003      	beq.n	802144c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 8021444:	2000      	movs	r0, #0
 8021446:	4770      	bx	lr
 8021448:	6a00      	ldr	r0, [r0, #32]
 802144a:	4770      	bx	lr
 802144c:	6900      	ldr	r0, [r0, #16]
 802144e:	4770      	bx	lr
 8021450:	684b      	ldr	r3, [r1, #4]
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	2b01      	cmp	r3, #1
 8021456:	d005      	beq.n	8021464 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 8021458:	f0c0 80a8 	bcc.w	80215ac <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 802145c:	2b02      	cmp	r3, #2
 802145e:	d1f1      	bne.n	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8021460:	6880      	ldr	r0, [r0, #8]
 8021462:	4770      	bx	lr
 8021464:	6980      	ldr	r0, [r0, #24]
 8021466:	4770      	bx	lr
 8021468:	6c00      	ldr	r0, [r0, #64]	; 0x40
 802146a:	4770      	bx	lr
 802146c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 802146e:	4770      	bx	lr
 8021470:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8021472:	4770      	bx	lr
 8021474:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021476:	4770      	bx	lr
 8021478:	6d80      	ldr	r0, [r0, #88]	; 0x58
 802147a:	4770      	bx	lr
 802147c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 802147e:	4770      	bx	lr
 8021480:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021482:	4770      	bx	lr
 8021484:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8021486:	4770      	bx	lr
 8021488:	2a33      	cmp	r2, #51	; 0x33
 802148a:	d8db      	bhi.n	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 802148c:	a301      	add	r3, pc, #4	; (adr r3, 8021494 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 802148e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8021492:	bf00      	nop
 8021494:	080215bd 	.word	0x080215bd
 8021498:	080215b5 	.word	0x080215b5
 802149c:	080215b9 	.word	0x080215b9
 80214a0:	080215b1 	.word	0x080215b1
 80214a4:	080215c5 	.word	0x080215c5
 80214a8:	080215c1 	.word	0x080215c1
 80214ac:	08021445 	.word	0x08021445
 80214b0:	08021445 	.word	0x08021445
 80214b4:	080215c9 	.word	0x080215c9
 80214b8:	080215cd 	.word	0x080215cd
 80214bc:	080215c9 	.word	0x080215c9
 80214c0:	080215cd 	.word	0x080215cd
 80214c4:	08021445 	.word	0x08021445
 80214c8:	08021445 	.word	0x08021445
 80214cc:	08021445 	.word	0x08021445
 80214d0:	08021445 	.word	0x08021445
 80214d4:	08021445 	.word	0x08021445
 80214d8:	08021445 	.word	0x08021445
 80214dc:	08021445 	.word	0x08021445
 80214e0:	08021445 	.word	0x08021445
 80214e4:	08021445 	.word	0x08021445
 80214e8:	08021445 	.word	0x08021445
 80214ec:	08021445 	.word	0x08021445
 80214f0:	08021445 	.word	0x08021445
 80214f4:	08021445 	.word	0x08021445
 80214f8:	08021445 	.word	0x08021445
 80214fc:	08021445 	.word	0x08021445
 8021500:	08021445 	.word	0x08021445
 8021504:	08021445 	.word	0x08021445
 8021508:	08021445 	.word	0x08021445
 802150c:	08021445 	.word	0x08021445
 8021510:	08021445 	.word	0x08021445
 8021514:	08021445 	.word	0x08021445
 8021518:	08021445 	.word	0x08021445
 802151c:	08021445 	.word	0x08021445
 8021520:	08021445 	.word	0x08021445
 8021524:	08021445 	.word	0x08021445
 8021528:	08021445 	.word	0x08021445
 802152c:	08021445 	.word	0x08021445
 8021530:	08021445 	.word	0x08021445
 8021534:	08021445 	.word	0x08021445
 8021538:	08021445 	.word	0x08021445
 802153c:	08021445 	.word	0x08021445
 8021540:	08021445 	.word	0x08021445
 8021544:	0802157d 	.word	0x0802157d
 8021548:	08021565 	.word	0x08021565
 802154c:	080215a3 	.word	0x080215a3
 8021550:	08021595 	.word	0x08021595
 8021554:	080215d5 	.word	0x080215d5
 8021558:	080215d1 	.word	0x080215d1
 802155c:	080215d5 	.word	0x080215d5
 8021560:	080215d1 	.word	0x080215d1
 8021564:	684b      	ldr	r3, [r1, #4]
 8021566:	781b      	ldrb	r3, [r3, #0]
 8021568:	2b01      	cmp	r3, #1
 802156a:	d005      	beq.n	8021578 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 802156c:	d317      	bcc.n	802159e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 802156e:	2b02      	cmp	r3, #2
 8021570:	f47f af68 	bne.w	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 8021574:	6940      	ldr	r0, [r0, #20]
 8021576:	4770      	bx	lr
 8021578:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802157a:	4770      	bx	lr
 802157c:	684b      	ldr	r3, [r1, #4]
 802157e:	781b      	ldrb	r3, [r3, #0]
 8021580:	2b01      	cmp	r3, #1
 8021582:	d005      	beq.n	8021590 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 8021584:	d312      	bcc.n	80215ac <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 8021586:	2b02      	cmp	r3, #2
 8021588:	f47f af5c 	bne.w	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 802158c:	68c0      	ldr	r0, [r0, #12]
 802158e:	4770      	bx	lr
 8021590:	69c0      	ldr	r0, [r0, #28]
 8021592:	4770      	bx	lr
 8021594:	684b      	ldr	r3, [r1, #4]
 8021596:	781b      	ldrb	r3, [r3, #0]
 8021598:	2b00      	cmp	r3, #0
 802159a:	f47f af53 	bne.w	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 802159e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80215a0:	4770      	bx	lr
 80215a2:	684b      	ldr	r3, [r1, #4]
 80215a4:	781b      	ldrb	r3, [r3, #0]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	f47f af4c 	bne.w	8021444 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 80215ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80215ae:	4770      	bx	lr
 80215b0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80215b2:	4770      	bx	lr
 80215b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80215b6:	4770      	bx	lr
 80215b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80215ba:	4770      	bx	lr
 80215bc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80215be:	4770      	bx	lr
 80215c0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80215c2:	4770      	bx	lr
 80215c4:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80215c6:	4770      	bx	lr
 80215c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80215ca:	4770      	bx	lr
 80215cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80215ce:	4770      	bx	lr
 80215d0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80215d2:	4770      	bx	lr
 80215d4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80215d6:	4770      	bx	lr

080215d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80215d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215dc:	b087      	sub	sp, #28
 80215de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80215e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80215e4:	9100      	str	r1, [sp, #0]
 80215e6:	6868      	ldr	r0, [r5, #4]
 80215e8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80215ec:	9204      	str	r2, [sp, #16]
 80215ee:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80215f2:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	; 0x58
 80215f6:	fb00 1404 	mla	r4, r0, r4, r1
 80215fa:	6829      	ldr	r1, [r5, #0]
 80215fc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021600:	f8db 1000 	ldr.w	r1, [fp]
 8021604:	9101      	str	r1, [sp, #4]
 8021606:	f8db 1004 	ldr.w	r1, [fp, #4]
 802160a:	3104      	adds	r1, #4
 802160c:	9102      	str	r1, [sp, #8]
 802160e:	9900      	ldr	r1, [sp, #0]
 8021610:	2900      	cmp	r1, #0
 8021612:	dc03      	bgt.n	802161c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8021614:	9904      	ldr	r1, [sp, #16]
 8021616:	2900      	cmp	r1, #0
 8021618:	f340 815a 	ble.w	80218d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802161c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802161e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 8021622:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 8021626:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021628:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 802162c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8021630:	2b00      	cmp	r3, #0
 8021632:	dd0e      	ble.n	8021652 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021634:	1405      	asrs	r5, r0, #16
 8021636:	d405      	bmi.n	8021644 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021638:	4565      	cmp	r5, ip
 802163a:	da03      	bge.n	8021644 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802163c:	140d      	asrs	r5, r1, #16
 802163e:	d401      	bmi.n	8021644 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021640:	42bd      	cmp	r5, r7
 8021642:	db07      	blt.n	8021654 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021644:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021646:	3b01      	subs	r3, #1
 8021648:	3404      	adds	r4, #4
 802164a:	4428      	add	r0, r5
 802164c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802164e:	4429      	add	r1, r5
 8021650:	e7ee      	b.n	8021630 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021652:	d04d      	beq.n	80216f0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8021654:	1e5d      	subs	r5, r3, #1
 8021656:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021658:	fb06 0605 	mla	r6, r6, r5, r0
 802165c:	1436      	asrs	r6, r6, #16
 802165e:	d43d      	bmi.n	80216dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8021660:	4566      	cmp	r6, ip
 8021662:	da3b      	bge.n	80216dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8021664:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8021666:	fb06 1505 	mla	r5, r6, r5, r1
 802166a:	142d      	asrs	r5, r5, #16
 802166c:	d436      	bmi.n	80216dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802166e:	42bd      	cmp	r5, r7
 8021670:	da34      	bge.n	80216dc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8021672:	1d25      	adds	r5, r4, #4
 8021674:	4699      	mov	r9, r3
 8021676:	f1b9 0f00 	cmp.w	r9, #0
 802167a:	dd35      	ble.n	80216e8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802167c:	140e      	asrs	r6, r1, #16
 802167e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 8021682:	1407      	asrs	r7, r0, #16
 8021684:	2aff      	cmp	r2, #255	; 0xff
 8021686:	46b6      	mov	lr, r6
 8021688:	9e01      	ldr	r6, [sp, #4]
 802168a:	fb0c 660e 	mla	r6, ip, lr, r6
 802168e:	5df6      	ldrb	r6, [r6, r7]
 8021690:	9f02      	ldr	r7, [sp, #8]
 8021692:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 8021696:	ea4f 2726 	mov.w	r7, r6, asr #8
 802169a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 802169e:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 80216a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80216a6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80216aa:	b2f6      	uxtb	r6, r6
 80216ac:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80216b0:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80216b4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80216b8:	f040 80d4 	bne.w	8021864 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80216bc:	f805 6c04 	strb.w	r6, [r5, #-4]
 80216c0:	f805 cc03 	strb.w	ip, [r5, #-3]
 80216c4:	f805 7c02 	strb.w	r7, [r5, #-2]
 80216c8:	f805 2c01 	strb.w	r2, [r5, #-1]
 80216cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80216ce:	3504      	adds	r5, #4
 80216d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80216d4:	4430      	add	r0, r6
 80216d6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80216d8:	4431      	add	r1, r6
 80216da:	e7cc      	b.n	8021676 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80216dc:	f04f 0c00 	mov.w	ip, #0
 80216e0:	eb03 050c 	add.w	r5, r3, ip
 80216e4:	2d00      	cmp	r5, #0
 80216e6:	dc3f      	bgt.n	8021768 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80216e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80216ec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80216f0:	9b00      	ldr	r3, [sp, #0]
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	f340 80ec 	ble.w	80218d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80216f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80216fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021702:	eeb0 6a62 	vmov.f32	s12, s5
 8021706:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802170a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802170e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021712:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021716:	eeb0 6a43 	vmov.f32	s12, s6
 802171a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802171e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021722:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021726:	ee61 7a27 	vmul.f32	s15, s2, s15
 802172a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802172e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021732:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021736:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802173a:	ee12 1a90 	vmov	r1, s5
 802173e:	eef0 2a47 	vmov.f32	s5, s14
 8021742:	fb91 f3f3 	sdiv	r3, r1, r3
 8021746:	ee13 1a10 	vmov	r1, s6
 802174a:	9313      	str	r3, [sp, #76]	; 0x4c
 802174c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802174e:	eeb0 3a67 	vmov.f32	s6, s15
 8021752:	fb91 f3f3 	sdiv	r3, r1, r3
 8021756:	9314      	str	r3, [sp, #80]	; 0x50
 8021758:	9b00      	ldr	r3, [sp, #0]
 802175a:	9904      	ldr	r1, [sp, #16]
 802175c:	3b01      	subs	r3, #1
 802175e:	9300      	str	r3, [sp, #0]
 8021760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021762:	bf08      	it	eq
 8021764:	460b      	moveq	r3, r1
 8021766:	e752      	b.n	802160e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021768:	1407      	asrs	r7, r0, #16
 802176a:	d435      	bmi.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802176c:	f8db 6008 	ldr.w	r6, [fp, #8]
 8021770:	42be      	cmp	r6, r7
 8021772:	dd31      	ble.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021774:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8021778:	d42e      	bmi.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802177a:	f8db 500c 	ldr.w	r5, [fp, #12]
 802177e:	4575      	cmp	r5, lr
 8021780:	dd2a      	ble.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021782:	9d01      	ldr	r5, [sp, #4]
 8021784:	b236      	sxth	r6, r6
 8021786:	2aff      	cmp	r2, #255	; 0xff
 8021788:	fb0e 5606 	mla	r6, lr, r6, r5
 802178c:	5df5      	ldrb	r5, [r6, r7]
 802178e:	9e02      	ldr	r6, [sp, #8]
 8021790:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 8021794:	ea4f 2625 	mov.w	r6, r5, asr #8
 8021798:	ea4f 07e5 	mov.w	r7, r5, asr #3
 802179c:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80217a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80217a4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80217a8:	b2ed      	uxtb	r5, r5
 80217aa:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80217ae:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80217b2:	9603      	str	r6, [sp, #12]
 80217b4:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80217b8:	462e      	mov	r6, r5
 80217ba:	d114      	bne.n	80217e6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80217bc:	f06f 0503 	mvn.w	r5, #3
 80217c0:	fb05 fe0c 	mul.w	lr, r5, ip
 80217c4:	9d03      	ldr	r5, [sp, #12]
 80217c6:	f804 600e 	strb.w	r6, [r4, lr]
 80217ca:	44a6      	add	lr, r4
 80217cc:	f88e 7001 	strb.w	r7, [lr, #1]
 80217d0:	f88e 5002 	strb.w	r5, [lr, #2]
 80217d4:	f88e 2003 	strb.w	r2, [lr, #3]
 80217d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80217da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80217de:	4428      	add	r0, r5
 80217e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80217e2:	4429      	add	r1, r5
 80217e4:	e77c      	b.n	80216e0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80217e6:	2a00      	cmp	r2, #0
 80217e8:	d0f6      	beq.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80217ea:	fb12 f707 	smulbb	r7, r2, r7
 80217ee:	f06f 0503 	mvn.w	r5, #3
 80217f2:	fb05 fa0c 	mul.w	sl, r5, ip
 80217f6:	eb04 090a 	add.w	r9, r4, sl
 80217fa:	f899 5003 	ldrb.w	r5, [r9, #3]
 80217fe:	fb02 fe05 	mul.w	lr, r2, r5
 8021802:	f10e 0801 	add.w	r8, lr, #1
 8021806:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 802180a:	eb02 0e05 	add.w	lr, r2, r5
 802180e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021812:	ebae 0e08 	sub.w	lr, lr, r8
 8021816:	eba5 0808 	sub.w	r8, r5, r8
 802181a:	f814 500a 	ldrb.w	r5, [r4, sl]
 802181e:	fa5f fe8e 	uxtb.w	lr, lr
 8021822:	9505      	str	r5, [sp, #20]
 8021824:	fb16 f502 	smulbb	r5, r6, r2
 8021828:	462e      	mov	r6, r5
 802182a:	9d05      	ldr	r5, [sp, #20]
 802182c:	fb08 6505 	mla	r5, r8, r5, r6
 8021830:	9e03      	ldr	r6, [sp, #12]
 8021832:	fb95 f5fe 	sdiv	r5, r5, lr
 8021836:	f804 500a 	strb.w	r5, [r4, sl]
 802183a:	fb12 f606 	smulbb	r6, r2, r6
 802183e:	f899 5001 	ldrb.w	r5, [r9, #1]
 8021842:	f889 e003 	strb.w	lr, [r9, #3]
 8021846:	fb08 7705 	mla	r7, r8, r5, r7
 802184a:	f899 5002 	ldrb.w	r5, [r9, #2]
 802184e:	fb08 6605 	mla	r6, r8, r5, r6
 8021852:	fb97 f7fe 	sdiv	r7, r7, lr
 8021856:	fb96 f6fe 	sdiv	r6, r6, lr
 802185a:	f889 7001 	strb.w	r7, [r9, #1]
 802185e:	f889 6002 	strb.w	r6, [r9, #2]
 8021862:	e7b9      	b.n	80217d8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021864:	2a00      	cmp	r2, #0
 8021866:	f43f af31 	beq.w	80216cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802186a:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 802186e:	fb16 f602 	smulbb	r6, r6, r2
 8021872:	fb12 fc0c 	smulbb	ip, r2, ip
 8021876:	fb12 f707 	smulbb	r7, r2, r7
 802187a:	fb02 fe0a 	mul.w	lr, r2, sl
 802187e:	f10e 0801 	add.w	r8, lr, #1
 8021882:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 8021886:	eb02 0e0a 	add.w	lr, r2, sl
 802188a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802188e:	ebae 0e08 	sub.w	lr, lr, r8
 8021892:	ebaa 0808 	sub.w	r8, sl, r8
 8021896:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 802189a:	fa5f fe8e 	uxtb.w	lr, lr
 802189e:	fb08 660a 	mla	r6, r8, sl, r6
 80218a2:	f805 ec01 	strb.w	lr, [r5, #-1]
 80218a6:	fb96 f6fe 	sdiv	r6, r6, lr
 80218aa:	f805 6c04 	strb.w	r6, [r5, #-4]
 80218ae:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 80218b2:	fb08 cc06 	mla	ip, r8, r6, ip
 80218b6:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 80218ba:	fb08 7706 	mla	r7, r8, r6, r7
 80218be:	fb9c fcfe 	sdiv	ip, ip, lr
 80218c2:	fb97 f7fe 	sdiv	r7, r7, lr
 80218c6:	f805 cc03 	strb.w	ip, [r5, #-3]
 80218ca:	f805 7c02 	strb.w	r7, [r5, #-2]
 80218ce:	e6fd      	b.n	80216cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80218d0:	b007      	add	sp, #28
 80218d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80218d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218da:	b085      	sub	sp, #20
 80218dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80218e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80218e2:	9203      	str	r2, [sp, #12]
 80218e4:	6860      	ldr	r0, [r4, #4]
 80218e6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80218e8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80218ec:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	; 0x44
 80218f0:	fb00 2505 	mla	r5, r0, r5, r2
 80218f4:	6822      	ldr	r2, [r4, #0]
 80218f6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80218fa:	683a      	ldr	r2, [r7, #0]
 80218fc:	9201      	str	r2, [sp, #4]
 80218fe:	687a      	ldr	r2, [r7, #4]
 8021900:	3204      	adds	r2, #4
 8021902:	9202      	str	r2, [sp, #8]
 8021904:	2900      	cmp	r1, #0
 8021906:	dc03      	bgt.n	8021910 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021908:	9a03      	ldr	r2, [sp, #12]
 802190a:	2a00      	cmp	r2, #0
 802190c:	f340 80c4 	ble.w	8021a98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021912:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8021916:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802191a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802191c:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8021920:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021924:	2b00      	cmp	r3, #0
 8021926:	dd0c      	ble.n	8021942 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021928:	1404      	asrs	r4, r0, #16
 802192a:	d405      	bmi.n	8021938 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802192c:	454c      	cmp	r4, r9
 802192e:	da03      	bge.n	8021938 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021930:	1414      	asrs	r4, r2, #16
 8021932:	d401      	bmi.n	8021938 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021934:	4564      	cmp	r4, ip
 8021936:	db05      	blt.n	8021944 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021938:	4440      	add	r0, r8
 802193a:	4472      	add	r2, lr
 802193c:	3b01      	subs	r3, #1
 802193e:	3504      	adds	r5, #4
 8021940:	e7f0      	b.n	8021924 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021942:	d00e      	beq.n	8021962 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021944:	1e5c      	subs	r4, r3, #1
 8021946:	fb08 0604 	mla	r6, r8, r4, r0
 802194a:	1436      	asrs	r6, r6, #16
 802194c:	d53e      	bpl.n	80219cc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 802194e:	4699      	mov	r9, r3
 8021950:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 8021954:	f1b9 0f00 	cmp.w	r9, #0
 8021958:	dc6b      	bgt.n	8021a32 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 802195a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802195e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8021962:	2900      	cmp	r1, #0
 8021964:	f340 8098 	ble.w	8021a98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8021968:	ee30 0a04 	vadd.f32	s0, s0, s8
 802196c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802196e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021972:	3901      	subs	r1, #1
 8021974:	eeb0 6a62 	vmov.f32	s12, s5
 8021978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802197c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021984:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021988:	eeb0 6a43 	vmov.f32	s12, s6
 802198c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021990:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021998:	ee61 7a27 	vmul.f32	s15, s2, s15
 802199c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80219a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80219a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219ac:	ee12 2a90 	vmov	r2, s5
 80219b0:	eef0 2a47 	vmov.f32	s5, s14
 80219b4:	fb92 f8f3 	sdiv	r8, r2, r3
 80219b8:	ee13 2a10 	vmov	r2, s6
 80219bc:	eeb0 3a67 	vmov.f32	s6, s15
 80219c0:	fb92 fef3 	sdiv	lr, r2, r3
 80219c4:	9a03      	ldr	r2, [sp, #12]
 80219c6:	bf08      	it	eq
 80219c8:	4613      	moveq	r3, r2
 80219ca:	e79b      	b.n	8021904 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80219cc:	454e      	cmp	r6, r9
 80219ce:	dabe      	bge.n	802194e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80219d0:	fb0e 2404 	mla	r4, lr, r4, r2
 80219d4:	1424      	asrs	r4, r4, #16
 80219d6:	d4ba      	bmi.n	802194e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80219d8:	4564      	cmp	r4, ip
 80219da:	dab8      	bge.n	802194e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80219dc:	4699      	mov	r9, r3
 80219de:	46aa      	mov	sl, r5
 80219e0:	f1b9 0f00 	cmp.w	r9, #0
 80219e4:	ddb9      	ble.n	802195a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80219e6:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 80219ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80219ee:	9c01      	ldr	r4, [sp, #4]
 80219f0:	1406      	asrs	r6, r0, #16
 80219f2:	4472      	add	r2, lr
 80219f4:	4440      	add	r0, r8
 80219f6:	fb0c 440b 	mla	r4, ip, fp, r4
 80219fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80219fe:	5da4      	ldrb	r4, [r4, r6]
 8021a00:	9e02      	ldr	r6, [sp, #8]
 8021a02:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 8021a06:	10f4      	asrs	r4, r6, #3
 8021a08:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8021a0c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a10:	00f6      	lsls	r6, r6, #3
 8021a12:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021a16:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021a1a:	b2f6      	uxtb	r6, r6
 8021a1c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021a20:	0224      	lsls	r4, r4, #8
 8021a22:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021a26:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8021a2a:	4334      	orrs	r4, r6
 8021a2c:	f84a 4b04 	str.w	r4, [sl], #4
 8021a30:	e7d6      	b.n	80219e0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 8021a32:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8021a36:	d42a      	bmi.n	8021a8e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8021a38:	68be      	ldr	r6, [r7, #8]
 8021a3a:	4566      	cmp	r6, ip
 8021a3c:	dd27      	ble.n	8021a8e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8021a3e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8021a42:	d424      	bmi.n	8021a8e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8021a44:	68fc      	ldr	r4, [r7, #12]
 8021a46:	455c      	cmp	r4, fp
 8021a48:	dd21      	ble.n	8021a8e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8021a4a:	9c01      	ldr	r4, [sp, #4]
 8021a4c:	b236      	sxth	r6, r6
 8021a4e:	fb0b 4606 	mla	r6, fp, r6, r4
 8021a52:	f06f 0b03 	mvn.w	fp, #3
 8021a56:	f816 400c 	ldrb.w	r4, [r6, ip]
 8021a5a:	fb0b fb09 	mul.w	fp, fp, r9
 8021a5e:	9e02      	ldr	r6, [sp, #8]
 8021a60:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 8021a64:	10f4      	asrs	r4, r6, #3
 8021a66:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8021a6a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a6e:	00f6      	lsls	r6, r6, #3
 8021a70:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021a74:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021a78:	b2f6      	uxtb	r6, r6
 8021a7a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021a7e:	0224      	lsls	r4, r4, #8
 8021a80:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021a84:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8021a88:	4334      	orrs	r4, r6
 8021a8a:	f84a 400b 	str.w	r4, [sl, fp]
 8021a8e:	4440      	add	r0, r8
 8021a90:	4472      	add	r2, lr
 8021a92:	f109 39ff 	add.w	r9, r9, #4294967295
 8021a96:	e75d      	b.n	8021954 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021a98:	b005      	add	sp, #20
 8021a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a9e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021aa2:	b085      	sub	sp, #20
 8021aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021aa8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021aaa:	9101      	str	r1, [sp, #4]
 8021aac:	6868      	ldr	r0, [r5, #4]
 8021aae:	9203      	str	r2, [sp, #12]
 8021ab0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8021ab4:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 8021ab8:	fb00 1404 	mla	r4, r0, r4, r1
 8021abc:	6829      	ldr	r1, [r5, #0]
 8021abe:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021ac2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021ac4:	6809      	ldr	r1, [r1, #0]
 8021ac6:	9102      	str	r1, [sp, #8]
 8021ac8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021aca:	6849      	ldr	r1, [r1, #4]
 8021acc:	3104      	adds	r1, #4
 8021ace:	9100      	str	r1, [sp, #0]
 8021ad0:	9901      	ldr	r1, [sp, #4]
 8021ad2:	2900      	cmp	r1, #0
 8021ad4:	dc03      	bgt.n	8021ade <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8021ad6:	9903      	ldr	r1, [sp, #12]
 8021ad8:	2900      	cmp	r1, #0
 8021ada:	f340 813d 	ble.w	8021d58 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021ade:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021ae0:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8021ae4:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 8021ae8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021aea:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 8021aee:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021af0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	dd0e      	ble.n	8021b16 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021af8:	1405      	asrs	r5, r0, #16
 8021afa:	d405      	bmi.n	8021b08 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021afc:	4565      	cmp	r5, ip
 8021afe:	da03      	bge.n	8021b08 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021b00:	140d      	asrs	r5, r1, #16
 8021b02:	d401      	bmi.n	8021b08 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021b04:	42bd      	cmp	r5, r7
 8021b06:	db07      	blt.n	8021b18 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021b08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021b0a:	3b01      	subs	r3, #1
 8021b0c:	3404      	adds	r4, #4
 8021b0e:	4428      	add	r0, r5
 8021b10:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021b12:	4429      	add	r1, r5
 8021b14:	e7ee      	b.n	8021af4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021b16:	d044      	beq.n	8021ba2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8021b18:	1e5d      	subs	r5, r3, #1
 8021b1a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021b1c:	fb06 0605 	mla	r6, r6, r5, r0
 8021b20:	1436      	asrs	r6, r6, #16
 8021b22:	d436      	bmi.n	8021b92 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8021b24:	4566      	cmp	r6, ip
 8021b26:	da34      	bge.n	8021b92 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8021b28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021b2a:	fb06 1505 	mla	r5, r6, r5, r1
 8021b2e:	142d      	asrs	r5, r5, #16
 8021b30:	d42f      	bmi.n	8021b92 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8021b32:	42bd      	cmp	r5, r7
 8021b34:	da2d      	bge.n	8021b92 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8021b36:	1d25      	adds	r5, r4, #4
 8021b38:	469a      	mov	sl, r3
 8021b3a:	f1ba 0f00 	cmp.w	sl, #0
 8021b3e:	dd2c      	ble.n	8021b9a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8021b40:	140e      	asrs	r6, r1, #16
 8021b42:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8021b44:	2aff      	cmp	r2, #255	; 0xff
 8021b46:	46b6      	mov	lr, r6
 8021b48:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8021b4c:	9e02      	ldr	r6, [sp, #8]
 8021b4e:	ea4f 4720 	mov.w	r7, r0, asr #16
 8021b52:	fb0c 660e 	mla	r6, ip, lr, r6
 8021b56:	5df6      	ldrb	r6, [r6, r7]
 8021b58:	9f00      	ldr	r7, [sp, #0]
 8021b5a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021b5e:	4437      	add	r7, r6
 8021b60:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021b64:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021b68:	9f00      	ldr	r7, [sp, #0]
 8021b6a:	f817 9006 	ldrb.w	r9, [r7, r6]
 8021b6e:	f040 80be 	bne.w	8021cee <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021b72:	f805 9c04 	strb.w	r9, [r5, #-4]
 8021b76:	f805 8c03 	strb.w	r8, [r5, #-3]
 8021b7a:	f805 ec02 	strb.w	lr, [r5, #-2]
 8021b7e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8021b82:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021b84:	3504      	adds	r5, #4
 8021b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021b8a:	4430      	add	r0, r6
 8021b8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021b8e:	4431      	add	r1, r6
 8021b90:	e7d3      	b.n	8021b3a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021b92:	2500      	movs	r5, #0
 8021b94:	195e      	adds	r6, r3, r5
 8021b96:	2e00      	cmp	r6, #0
 8021b98:	dc3f      	bgt.n	8021c1a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021b9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b9e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8021ba2:	9b01      	ldr	r3, [sp, #4]
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	f340 80d7 	ble.w	8021d58 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021baa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021bb4:	eeb0 6a62 	vmov.f32	s12, s5
 8021bb8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021bbc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021bc0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021bc4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021bc8:	eeb0 6a43 	vmov.f32	s12, s6
 8021bcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021bd0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021bd4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021bd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021bdc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021be0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021be4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021be8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021bec:	ee12 1a90 	vmov	r1, s5
 8021bf0:	eef0 2a47 	vmov.f32	s5, s14
 8021bf4:	fb91 f3f3 	sdiv	r3, r1, r3
 8021bf8:	ee13 1a10 	vmov	r1, s6
 8021bfc:	9311      	str	r3, [sp, #68]	; 0x44
 8021bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c00:	eeb0 3a67 	vmov.f32	s6, s15
 8021c04:	fb91 f3f3 	sdiv	r3, r1, r3
 8021c08:	9312      	str	r3, [sp, #72]	; 0x48
 8021c0a:	9b01      	ldr	r3, [sp, #4]
 8021c0c:	9903      	ldr	r1, [sp, #12]
 8021c0e:	3b01      	subs	r3, #1
 8021c10:	9301      	str	r3, [sp, #4]
 8021c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c14:	bf08      	it	eq
 8021c16:	460b      	moveq	r3, r1
 8021c18:	e75a      	b.n	8021ad0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8021c1a:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8021c1e:	d427      	bmi.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c20:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8021c22:	68b7      	ldr	r7, [r6, #8]
 8021c24:	4567      	cmp	r7, ip
 8021c26:	dd23      	ble.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c28:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8021c2c:	d420      	bmi.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c2e:	68f6      	ldr	r6, [r6, #12]
 8021c30:	4576      	cmp	r6, lr
 8021c32:	dd1d      	ble.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c34:	9e02      	ldr	r6, [sp, #8]
 8021c36:	b23f      	sxth	r7, r7
 8021c38:	2aff      	cmp	r2, #255	; 0xff
 8021c3a:	fb0e 6707 	mla	r7, lr, r7, r6
 8021c3e:	f817 600c 	ldrb.w	r6, [r7, ip]
 8021c42:	9f00      	ldr	r7, [sp, #0]
 8021c44:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021c48:	4437      	add	r7, r6
 8021c4a:	f897 8002 	ldrb.w	r8, [r7, #2]
 8021c4e:	f897 9001 	ldrb.w	r9, [r7, #1]
 8021c52:	9f00      	ldr	r7, [sp, #0]
 8021c54:	f817 a006 	ldrb.w	sl, [r7, r6]
 8021c58:	d110      	bne.n	8021c7c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8021c5a:	f06f 0603 	mvn.w	r6, #3
 8021c5e:	436e      	muls	r6, r5
 8021c60:	f804 a006 	strb.w	sl, [r4, r6]
 8021c64:	4426      	add	r6, r4
 8021c66:	f886 9001 	strb.w	r9, [r6, #1]
 8021c6a:	f886 8002 	strb.w	r8, [r6, #2]
 8021c6e:	70f2      	strb	r2, [r6, #3]
 8021c70:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021c72:	3d01      	subs	r5, #1
 8021c74:	4430      	add	r0, r6
 8021c76:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021c78:	4431      	add	r1, r6
 8021c7a:	e78b      	b.n	8021b94 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 8021c7c:	2a00      	cmp	r2, #0
 8021c7e:	d0f7      	beq.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021c80:	fb1a fa02 	smulbb	sl, sl, r2
 8021c84:	f06f 0603 	mvn.w	r6, #3
 8021c88:	fb12 f909 	smulbb	r9, r2, r9
 8021c8c:	fb12 f808 	smulbb	r8, r2, r8
 8021c90:	fb06 fb05 	mul.w	fp, r6, r5
 8021c94:	eb04 0c0b 	add.w	ip, r4, fp
 8021c98:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8021c9c:	fb02 f607 	mul.w	r6, r2, r7
 8021ca0:	f106 0e01 	add.w	lr, r6, #1
 8021ca4:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8021ca8:	19d6      	adds	r6, r2, r7
 8021caa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021cae:	eba7 070e 	sub.w	r7, r7, lr
 8021cb2:	eba6 060e 	sub.w	r6, r6, lr
 8021cb6:	f814 e00b 	ldrb.w	lr, [r4, fp]
 8021cba:	b2f6      	uxtb	r6, r6
 8021cbc:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021cc0:	fb9a faf6 	sdiv	sl, sl, r6
 8021cc4:	f804 a00b 	strb.w	sl, [r4, fp]
 8021cc8:	f89c e001 	ldrb.w	lr, [ip, #1]
 8021ccc:	f88c 6003 	strb.w	r6, [ip, #3]
 8021cd0:	fb07 990e 	mla	r9, r7, lr, r9
 8021cd4:	f89c e002 	ldrb.w	lr, [ip, #2]
 8021cd8:	fb07 880e 	mla	r8, r7, lr, r8
 8021cdc:	fb99 f9f6 	sdiv	r9, r9, r6
 8021ce0:	fb98 f8f6 	sdiv	r8, r8, r6
 8021ce4:	f88c 9001 	strb.w	r9, [ip, #1]
 8021ce8:	f88c 8002 	strb.w	r8, [ip, #2]
 8021cec:	e7c0      	b.n	8021c70 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8021cee:	2a00      	cmp	r2, #0
 8021cf0:	f43f af47 	beq.w	8021b82 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8021cf4:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 8021cf8:	fb19 f902 	smulbb	r9, r9, r2
 8021cfc:	fb12 f808 	smulbb	r8, r2, r8
 8021d00:	fb02 fc0b 	mul.w	ip, r2, fp
 8021d04:	eb02 060b 	add.w	r6, r2, fp
 8021d08:	fb12 fe0e 	smulbb	lr, r2, lr
 8021d0c:	f10c 0701 	add.w	r7, ip, #1
 8021d10:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021d14:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8021d18:	ebab 070c 	sub.w	r7, fp, ip
 8021d1c:	eba6 060c 	sub.w	r6, r6, ip
 8021d20:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8021d24:	b2f6      	uxtb	r6, r6
 8021d26:	fb07 990c 	mla	r9, r7, ip, r9
 8021d2a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8021d2e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8021d32:	fb07 880c 	mla	r8, r7, ip, r8
 8021d36:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8021d3a:	fb07 ee0c 	mla	lr, r7, ip, lr
 8021d3e:	fb99 f9f6 	sdiv	r9, r9, r6
 8021d42:	fb98 f8f6 	sdiv	r8, r8, r6
 8021d46:	fb9e fef6 	sdiv	lr, lr, r6
 8021d4a:	f805 9c04 	strb.w	r9, [r5, #-4]
 8021d4e:	f805 8c03 	strb.w	r8, [r5, #-3]
 8021d52:	f805 ec02 	strb.w	lr, [r5, #-2]
 8021d56:	e714      	b.n	8021b82 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8021d58:	b005      	add	sp, #20
 8021d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d5e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021d5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021d64:	4693      	mov	fp, r2
 8021d66:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021d6c:	6870      	ldr	r0, [r6, #4]
 8021d6e:	686f      	ldr	r7, [r5, #4]
 8021d70:	9100      	str	r1, [sp, #0]
 8021d72:	3704      	adds	r7, #4
 8021d74:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021d78:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8021d7c:	fb00 2404 	mla	r4, r0, r4, r2
 8021d80:	6832      	ldr	r2, [r6, #0]
 8021d82:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8021d86:	682a      	ldr	r2, [r5, #0]
 8021d88:	9201      	str	r2, [sp, #4]
 8021d8a:	9a00      	ldr	r2, [sp, #0]
 8021d8c:	2a00      	cmp	r2, #0
 8021d8e:	dc03      	bgt.n	8021d98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021d90:	f1bb 0f00 	cmp.w	fp, #0
 8021d94:	f340 80bd 	ble.w	8021f12 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021d9a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8021d9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021da4:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 8021da8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	dd0c      	ble.n	8021dca <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021db0:	1406      	asrs	r6, r0, #16
 8021db2:	d405      	bmi.n	8021dc0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021db4:	4556      	cmp	r6, sl
 8021db6:	da03      	bge.n	8021dc0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021db8:	1416      	asrs	r6, r2, #16
 8021dba:	d401      	bmi.n	8021dc0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8021dbc:	454e      	cmp	r6, r9
 8021dbe:	db05      	blt.n	8021dcc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021dc0:	4440      	add	r0, r8
 8021dc2:	4472      	add	r2, lr
 8021dc4:	3b01      	subs	r3, #1
 8021dc6:	3404      	adds	r4, #4
 8021dc8:	e7f0      	b.n	8021dac <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8021dca:	d03e      	beq.n	8021e4a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 8021dcc:	1e5e      	subs	r6, r3, #1
 8021dce:	fb08 0c06 	mla	ip, r8, r6, r0
 8021dd2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8021dd6:	d42e      	bmi.n	8021e36 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 8021dd8:	45d4      	cmp	ip, sl
 8021dda:	da2c      	bge.n	8021e36 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 8021ddc:	fb0e 2606 	mla	r6, lr, r6, r2
 8021de0:	1436      	asrs	r6, r6, #16
 8021de2:	d428      	bmi.n	8021e36 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 8021de4:	454e      	cmp	r6, r9
 8021de6:	da26      	bge.n	8021e36 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 8021de8:	1d26      	adds	r6, r4, #4
 8021dea:	469c      	mov	ip, r3
 8021dec:	f1bc 0f00 	cmp.w	ip, #0
 8021df0:	f106 0604 	add.w	r6, r6, #4
 8021df4:	dd25      	ble.n	8021e42 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8021df6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8021dfa:	ea4f 4922 	mov.w	r9, r2, asr #16
 8021dfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021e02:	4472      	add	r2, lr
 8021e04:	468a      	mov	sl, r1
 8021e06:	9901      	ldr	r1, [sp, #4]
 8021e08:	fb0a 1909 	mla	r9, sl, r9, r1
 8021e0c:	1401      	asrs	r1, r0, #16
 8021e0e:	4440      	add	r0, r8
 8021e10:	f819 9001 	ldrb.w	r9, [r9, r1]
 8021e14:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021e18:	eb07 0a09 	add.w	sl, r7, r9
 8021e1c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8021e20:	f806 9c08 	strb.w	r9, [r6, #-8]
 8021e24:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021e28:	f806 9c07 	strb.w	r9, [r6, #-7]
 8021e2c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021e30:	f806 9c06 	strb.w	r9, [r6, #-6]
 8021e34:	e7da      	b.n	8021dec <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021e36:	2600      	movs	r6, #0
 8021e38:	eb03 0c06 	add.w	ip, r3, r6
 8021e3c:	f1bc 0f00 	cmp.w	ip, #0
 8021e40:	dc3a      	bgt.n	8021eb8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8021e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021e46:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8021e4a:	9b00      	ldr	r3, [sp, #0]
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	dd60      	ble.n	8021f12 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021e50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021e56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e5a:	eeb0 6a62 	vmov.f32	s12, s5
 8021e5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021e62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e6a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8021e6e:	eeb0 6a43 	vmov.f32	s12, s6
 8021e72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021e76:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021e7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e92:	ee12 2a90 	vmov	r2, s5
 8021e96:	eef0 2a47 	vmov.f32	s5, s14
 8021e9a:	fb92 f8f3 	sdiv	r8, r2, r3
 8021e9e:	ee13 2a10 	vmov	r2, s6
 8021ea2:	eeb0 3a67 	vmov.f32	s6, s15
 8021ea6:	fb92 fef3 	sdiv	lr, r2, r3
 8021eaa:	9b00      	ldr	r3, [sp, #0]
 8021eac:	3b01      	subs	r3, #1
 8021eae:	9300      	str	r3, [sp, #0]
 8021eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021eb2:	bf08      	it	eq
 8021eb4:	465b      	moveq	r3, fp
 8021eb6:	e768      	b.n	8021d8a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8021eb8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021ebc:	d425      	bmi.n	8021f0a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021ebe:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8021ec2:	45cc      	cmp	ip, r9
 8021ec4:	dd21      	ble.n	8021f0a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021ec6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021eca:	d41e      	bmi.n	8021f0a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021ecc:	68e9      	ldr	r1, [r5, #12]
 8021ece:	4551      	cmp	r1, sl
 8021ed0:	dd1b      	ble.n	8021f0a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021ed2:	9901      	ldr	r1, [sp, #4]
 8021ed4:	fa0f fc8c 	sxth.w	ip, ip
 8021ed8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8021edc:	f06f 0103 	mvn.w	r1, #3
 8021ee0:	f81c c009 	ldrb.w	ip, [ip, r9]
 8021ee4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021ee8:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8021eec:	eb07 090c 	add.w	r9, r7, ip
 8021ef0:	fb01 fc06 	mul.w	ip, r1, r6
 8021ef4:	f804 a00c 	strb.w	sl, [r4, ip]
 8021ef8:	44a4      	add	ip, r4
 8021efa:	f899 a001 	ldrb.w	sl, [r9, #1]
 8021efe:	f88c a001 	strb.w	sl, [ip, #1]
 8021f02:	f899 9002 	ldrb.w	r9, [r9, #2]
 8021f06:	f88c 9002 	strb.w	r9, [ip, #2]
 8021f0a:	4440      	add	r0, r8
 8021f0c:	4472      	add	r2, lr
 8021f0e:	3e01      	subs	r6, #1
 8021f10:	e792      	b.n	8021e38 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8021f12:	b003      	add	sp, #12
 8021f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f18 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f1c:	b089      	sub	sp, #36	; 0x24
 8021f1e:	469b      	mov	fp, r3
 8021f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021f24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021f26:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8021f2a:	9101      	str	r1, [sp, #4]
 8021f2c:	9205      	str	r2, [sp, #20]
 8021f2e:	9306      	str	r3, [sp, #24]
 8021f30:	6842      	ldr	r2, [r0, #4]
 8021f32:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8021f36:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 8021f3a:	fb02 3101 	mla	r1, r2, r1, r3
 8021f3e:	6803      	ldr	r3, [r0, #0]
 8021f40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021f44:	f8da 3000 	ldr.w	r3, [sl]
 8021f48:	9302      	str	r3, [sp, #8]
 8021f4a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8021f4e:	3304      	adds	r3, #4
 8021f50:	9303      	str	r3, [sp, #12]
 8021f52:	9b01      	ldr	r3, [sp, #4]
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	dc03      	bgt.n	8021f60 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021f58:	9b05      	ldr	r3, [sp, #20]
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	f340 814e 	ble.w	80221fc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8021f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021f62:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 8021f66:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8021f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021f6c:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 8021f70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8021f74:	f1bb 0f00 	cmp.w	fp, #0
 8021f78:	dd0f      	ble.n	8021f9a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f7a:	1410      	asrs	r0, r2, #16
 8021f7c:	d405      	bmi.n	8021f8a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f7e:	42b0      	cmp	r0, r6
 8021f80:	da03      	bge.n	8021f8a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f82:	1418      	asrs	r0, r3, #16
 8021f84:	d401      	bmi.n	8021f8a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021f86:	42a8      	cmp	r0, r5
 8021f88:	db08      	blt.n	8021f9c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021f8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021f90:	3104      	adds	r1, #4
 8021f92:	4402      	add	r2, r0
 8021f94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021f96:	4403      	add	r3, r0
 8021f98:	e7ec      	b.n	8021f74 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021f9a:	d04a      	beq.n	8022032 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8021f9c:	f10b 30ff 	add.w	r0, fp, #4294967295
 8021fa0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021fa2:	fb04 2400 	mla	r4, r4, r0, r2
 8021fa6:	1424      	asrs	r4, r4, #16
 8021fa8:	d43a      	bmi.n	8022020 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8021faa:	42b4      	cmp	r4, r6
 8021fac:	da38      	bge.n	8022020 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8021fae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8021fb0:	fb04 3000 	mla	r0, r4, r0, r3
 8021fb4:	1400      	asrs	r0, r0, #16
 8021fb6:	d433      	bmi.n	8022020 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8021fb8:	42a8      	cmp	r0, r5
 8021fba:	da31      	bge.n	8022020 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8021fbc:	1d08      	adds	r0, r1, #4
 8021fbe:	46dc      	mov	ip, fp
 8021fc0:	f1bc 0f00 	cmp.w	ip, #0
 8021fc4:	dd31      	ble.n	802202a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021fc6:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 8021fca:	141c      	asrs	r4, r3, #16
 8021fcc:	9f02      	ldr	r7, [sp, #8]
 8021fce:	1415      	asrs	r5, r2, #16
 8021fd0:	fb06 7404 	mla	r4, r6, r4, r7
 8021fd4:	5d64      	ldrb	r4, [r4, r5]
 8021fd6:	9d03      	ldr	r5, [sp, #12]
 8021fd8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8021fdc:	9d06      	ldr	r5, [sp, #24]
 8021fde:	0e34      	lsrs	r4, r6, #24
 8021fe0:	436c      	muls	r4, r5
 8021fe2:	1c65      	adds	r5, r4, #1
 8021fe4:	eb05 2424 	add.w	r4, r5, r4, asr #8
 8021fe8:	f3c6 4507 	ubfx	r5, r6, #16, #8
 8021fec:	1224      	asrs	r4, r4, #8
 8021fee:	b2ef      	uxtb	r7, r5
 8021ff0:	2cff      	cmp	r4, #255	; 0xff
 8021ff2:	9704      	str	r7, [sp, #16]
 8021ff4:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8021ff8:	fa5f fe87 	uxtb.w	lr, r7
 8021ffc:	f040 80ca 	bne.w	8022194 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022000:	f800 6c04 	strb.w	r6, [r0, #-4]
 8022004:	f800 7c03 	strb.w	r7, [r0, #-3]
 8022008:	f800 5c02 	strb.w	r5, [r0, #-2]
 802200c:	f800 4c01 	strb.w	r4, [r0, #-1]
 8022010:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022012:	3004      	adds	r0, #4
 8022014:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022018:	4422      	add	r2, r4
 802201a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802201c:	4423      	add	r3, r4
 802201e:	e7cf      	b.n	8021fc0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022020:	2700      	movs	r7, #0
 8022022:	eb0b 0007 	add.w	r0, fp, r7
 8022026:	2800      	cmp	r0, #0
 8022028:	dc41      	bgt.n	80220ae <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 802202a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 802202e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022032:	9b01      	ldr	r3, [sp, #4]
 8022034:	2b00      	cmp	r3, #0
 8022036:	f340 80e1 	ble.w	80221fc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802203a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802203e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022040:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022044:	eeb0 6a62 	vmov.f32	s12, s5
 8022048:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802204c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022050:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022054:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8022058:	eeb0 6a43 	vmov.f32	s12, s6
 802205c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022060:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8022064:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022068:	ee61 7a27 	vmul.f32	s15, s2, s15
 802206c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022070:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022074:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022078:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802207c:	ee12 2a90 	vmov	r2, s5
 8022080:	eef0 2a47 	vmov.f32	s5, s14
 8022084:	fb92 f3f3 	sdiv	r3, r2, r3
 8022088:	ee13 2a10 	vmov	r2, s6
 802208c:	9315      	str	r3, [sp, #84]	; 0x54
 802208e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022090:	eeb0 3a67 	vmov.f32	s6, s15
 8022094:	fb92 f3f3 	sdiv	r3, r2, r3
 8022098:	9316      	str	r3, [sp, #88]	; 0x58
 802209a:	9b01      	ldr	r3, [sp, #4]
 802209c:	9a05      	ldr	r2, [sp, #20]
 802209e:	3b01      	subs	r3, #1
 80220a0:	9301      	str	r3, [sp, #4]
 80220a2:	bf08      	it	eq
 80220a4:	4693      	moveq	fp, r2
 80220a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80220a8:	bf18      	it	ne
 80220aa:	469b      	movne	fp, r3
 80220ac:	e751      	b.n	8021f52 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80220ae:	1415      	asrs	r5, r2, #16
 80220b0:	d42f      	bmi.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80220b2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80220b6:	42ac      	cmp	r4, r5
 80220b8:	dd2b      	ble.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80220ba:	141e      	asrs	r6, r3, #16
 80220bc:	d429      	bmi.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80220be:	f8da 000c 	ldr.w	r0, [sl, #12]
 80220c2:	42b0      	cmp	r0, r6
 80220c4:	dd25      	ble.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80220c6:	9802      	ldr	r0, [sp, #8]
 80220c8:	b224      	sxth	r4, r4
 80220ca:	fb06 0404 	mla	r4, r6, r4, r0
 80220ce:	5d60      	ldrb	r0, [r4, r5]
 80220d0:	9c03      	ldr	r4, [sp, #12]
 80220d2:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 80220d6:	9c06      	ldr	r4, [sp, #24]
 80220d8:	0e28      	lsrs	r0, r5, #24
 80220da:	4360      	muls	r0, r4
 80220dc:	1c44      	adds	r4, r0, #1
 80220de:	eb04 2020 	add.w	r0, r4, r0, asr #8
 80220e2:	f3c5 4407 	ubfx	r4, r5, #16, #8
 80220e6:	1200      	asrs	r0, r0, #8
 80220e8:	b2e6      	uxtb	r6, r4
 80220ea:	28ff      	cmp	r0, #255	; 0xff
 80220ec:	9607      	str	r6, [sp, #28]
 80220ee:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80220f2:	fa5f fe86 	uxtb.w	lr, r6
 80220f6:	d112      	bne.n	802211e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80220f8:	f06f 0c03 	mvn.w	ip, #3
 80220fc:	fb0c fc07 	mul.w	ip, ip, r7
 8022100:	f801 500c 	strb.w	r5, [r1, ip]
 8022104:	448c      	add	ip, r1
 8022106:	f88c 6001 	strb.w	r6, [ip, #1]
 802210a:	f88c 4002 	strb.w	r4, [ip, #2]
 802210e:	f88c 0003 	strb.w	r0, [ip, #3]
 8022112:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022114:	3f01      	subs	r7, #1
 8022116:	4402      	add	r2, r0
 8022118:	9816      	ldr	r0, [sp, #88]	; 0x58
 802211a:	4403      	add	r3, r0
 802211c:	e781      	b.n	8022022 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 802211e:	b2c4      	uxtb	r4, r0
 8022120:	9404      	str	r4, [sp, #16]
 8022122:	2800      	cmp	r0, #0
 8022124:	d0f5      	beq.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022126:	f06f 0403 	mvn.w	r4, #3
 802212a:	b2ed      	uxtb	r5, r5
 802212c:	fb00 fe0e 	mul.w	lr, r0, lr
 8022130:	fb04 f807 	mul.w	r8, r4, r7
 8022134:	9c04      	ldr	r4, [sp, #16]
 8022136:	eb01 0c08 	add.w	ip, r1, r8
 802213a:	f89c 9003 	ldrb.w	r9, [ip, #3]
 802213e:	fb04 f609 	mul.w	r6, r4, r9
 8022142:	1c74      	adds	r4, r6, #1
 8022144:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022148:	9c04      	ldr	r4, [sp, #16]
 802214a:	1236      	asrs	r6, r6, #8
 802214c:	444c      	add	r4, r9
 802214e:	1ba4      	subs	r4, r4, r6
 8022150:	eba9 0606 	sub.w	r6, r9, r6
 8022154:	f811 9008 	ldrb.w	r9, [r1, r8]
 8022158:	b2e4      	uxtb	r4, r4
 802215a:	fb06 f909 	mul.w	r9, r6, r9
 802215e:	fb00 9505 	mla	r5, r0, r5, r9
 8022162:	fb95 f5f4 	sdiv	r5, r5, r4
 8022166:	f801 5008 	strb.w	r5, [r1, r8]
 802216a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802216e:	f89c 9002 	ldrb.w	r9, [ip, #2]
 8022172:	fb06 ee05 	mla	lr, r6, r5, lr
 8022176:	9d07      	ldr	r5, [sp, #28]
 8022178:	f88c 4003 	strb.w	r4, [ip, #3]
 802217c:	4368      	muls	r0, r5
 802217e:	fb06 0609 	mla	r6, r6, r9, r0
 8022182:	fb9e fef4 	sdiv	lr, lr, r4
 8022186:	fb96 f6f4 	sdiv	r6, r6, r4
 802218a:	f88c e001 	strb.w	lr, [ip, #1]
 802218e:	f88c 6002 	strb.w	r6, [ip, #2]
 8022192:	e7be      	b.n	8022112 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022194:	b2e5      	uxtb	r5, r4
 8022196:	2c00      	cmp	r4, #0
 8022198:	f43f af3a 	beq.w	8022010 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 802219c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 80221a0:	b2f6      	uxtb	r6, r6
 80221a2:	fb04 fe0e 	mul.w	lr, r4, lr
 80221a6:	fb05 f908 	mul.w	r9, r5, r8
 80221aa:	4445      	add	r5, r8
 80221ac:	f109 0701 	add.w	r7, r9, #1
 80221b0:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 80221b4:	123f      	asrs	r7, r7, #8
 80221b6:	1bed      	subs	r5, r5, r7
 80221b8:	eba8 0707 	sub.w	r7, r8, r7
 80221bc:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 80221c0:	b2ed      	uxtb	r5, r5
 80221c2:	fb07 f808 	mul.w	r8, r7, r8
 80221c6:	f800 5c01 	strb.w	r5, [r0, #-1]
 80221ca:	fb04 8606 	mla	r6, r4, r6, r8
 80221ce:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 80221d2:	fb96 f6f5 	sdiv	r6, r6, r5
 80221d6:	f800 6c04 	strb.w	r6, [r0, #-4]
 80221da:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 80221de:	fb07 ee06 	mla	lr, r7, r6, lr
 80221e2:	9e04      	ldr	r6, [sp, #16]
 80221e4:	4374      	muls	r4, r6
 80221e6:	fb07 4708 	mla	r7, r7, r8, r4
 80221ea:	fb9e fef5 	sdiv	lr, lr, r5
 80221ee:	fb97 f7f5 	sdiv	r7, r7, r5
 80221f2:	f800 ec03 	strb.w	lr, [r0, #-3]
 80221f6:	f800 7c02 	strb.w	r7, [r0, #-2]
 80221fa:	e709      	b.n	8022010 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 80221fc:	b009      	add	sp, #36	; 0x24
 80221fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022202 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022206:	b087      	sub	sp, #28
 8022208:	469b      	mov	fp, r3
 802220a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802220e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022210:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8022214:	9100      	str	r1, [sp, #0]
 8022216:	9204      	str	r2, [sp, #16]
 8022218:	9305      	str	r3, [sp, #20]
 802221a:	6842      	ldr	r2, [r0, #4]
 802221c:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	; 0x58
 8022220:	fb02 3101 	mla	r1, r2, r1, r3
 8022224:	6803      	ldr	r3, [r0, #0]
 8022226:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 802222a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802222c:	681b      	ldr	r3, [r3, #0]
 802222e:	9301      	str	r3, [sp, #4]
 8022230:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022232:	685b      	ldr	r3, [r3, #4]
 8022234:	9302      	str	r3, [sp, #8]
 8022236:	9b00      	ldr	r3, [sp, #0]
 8022238:	2b00      	cmp	r3, #0
 802223a:	dc03      	bgt.n	8022244 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802223c:	9b04      	ldr	r3, [sp, #16]
 802223e:	2b00      	cmp	r3, #0
 8022240:	f340 8156 	ble.w	80224f0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8022244:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022246:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 802224a:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 802224e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022250:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8022254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 802225a:	f1bb 0f00 	cmp.w	fp, #0
 802225e:	dd0f      	ble.n	8022280 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022260:	1410      	asrs	r0, r2, #16
 8022262:	d405      	bmi.n	8022270 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022264:	42b0      	cmp	r0, r6
 8022266:	da03      	bge.n	8022270 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022268:	1418      	asrs	r0, r3, #16
 802226a:	d401      	bmi.n	8022270 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802226c:	42a8      	cmp	r0, r5
 802226e:	db08      	blt.n	8022282 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8022270:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022276:	3104      	adds	r1, #4
 8022278:	4402      	add	r2, r0
 802227a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802227c:	4403      	add	r3, r0
 802227e:	e7ec      	b.n	802225a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022280:	d053      	beq.n	802232a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022282:	f10b 30ff 	add.w	r0, fp, #4294967295
 8022286:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022288:	fb04 2400 	mla	r4, r4, r0, r2
 802228c:	1424      	asrs	r4, r4, #16
 802228e:	d442      	bmi.n	8022316 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022290:	42b4      	cmp	r4, r6
 8022292:	da40      	bge.n	8022316 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8022294:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022296:	fb04 3000 	mla	r0, r4, r0, r3
 802229a:	1400      	asrs	r0, r0, #16
 802229c:	d43b      	bmi.n	8022316 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802229e:	42a8      	cmp	r0, r5
 80222a0:	da39      	bge.n	8022316 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80222a2:	1d08      	adds	r0, r1, #4
 80222a4:	46d8      	mov	r8, fp
 80222a6:	f1b8 0f00 	cmp.w	r8, #0
 80222aa:	dd3a      	ble.n	8022322 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80222ac:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80222ae:	141c      	asrs	r4, r3, #16
 80222b0:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 80222b4:	1415      	asrs	r5, r2, #16
 80222b6:	fb06 5404 	mla	r4, r6, r4, r5
 80222ba:	9e02      	ldr	r6, [sp, #8]
 80222bc:	9d01      	ldr	r5, [sp, #4]
 80222be:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 80222c2:	5d34      	ldrb	r4, [r6, r4]
 80222c4:	9e05      	ldr	r6, [sp, #20]
 80222c6:	ea4f 2e25 	mov.w	lr, r5, asr #8
 80222ca:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 80222ce:	4374      	muls	r4, r6
 80222d0:	00ed      	lsls	r5, r5, #3
 80222d2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80222d6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80222da:	1c66      	adds	r6, r4, #1
 80222dc:	b2ed      	uxtb	r5, r5
 80222de:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80222e2:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 80222e6:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80222ea:	1224      	asrs	r4, r4, #8
 80222ec:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80222f0:	2cff      	cmp	r4, #255	; 0xff
 80222f2:	f040 80cb 	bne.w	802248c <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80222f6:	f800 5c04 	strb.w	r5, [r0, #-4]
 80222fa:	f800 cc03 	strb.w	ip, [r0, #-3]
 80222fe:	f800 ec02 	strb.w	lr, [r0, #-2]
 8022302:	f800 4c01 	strb.w	r4, [r0, #-1]
 8022306:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022308:	3004      	adds	r0, #4
 802230a:	f108 38ff 	add.w	r8, r8, #4294967295
 802230e:	4422      	add	r2, r4
 8022310:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022312:	4423      	add	r3, r4
 8022314:	e7c7      	b.n	80222a6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8022316:	f04f 0c00 	mov.w	ip, #0
 802231a:	eb0b 000c 	add.w	r0, fp, ip
 802231e:	2800      	cmp	r0, #0
 8022320:	dc41      	bgt.n	80223a6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8022322:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 8022326:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802232a:	9b00      	ldr	r3, [sp, #0]
 802232c:	2b00      	cmp	r3, #0
 802232e:	f340 80df 	ble.w	80224f0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8022332:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022338:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802233c:	eeb0 6a62 	vmov.f32	s12, s5
 8022340:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022344:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022348:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802234c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022350:	eeb0 6a43 	vmov.f32	s12, s6
 8022354:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022358:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802235c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022360:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022364:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022368:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802236c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022370:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022374:	ee12 2a90 	vmov	r2, s5
 8022378:	eef0 2a47 	vmov.f32	s5, s14
 802237c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022380:	ee13 2a10 	vmov	r2, s6
 8022384:	9313      	str	r3, [sp, #76]	; 0x4c
 8022386:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022388:	eeb0 3a67 	vmov.f32	s6, s15
 802238c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022390:	9314      	str	r3, [sp, #80]	; 0x50
 8022392:	9b00      	ldr	r3, [sp, #0]
 8022394:	9a04      	ldr	r2, [sp, #16]
 8022396:	3b01      	subs	r3, #1
 8022398:	9300      	str	r3, [sp, #0]
 802239a:	bf08      	it	eq
 802239c:	4693      	moveq	fp, r2
 802239e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223a0:	bf18      	it	ne
 80223a2:	469b      	movne	fp, r3
 80223a4:	e747      	b.n	8022236 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80223a6:	1415      	asrs	r5, r2, #16
 80223a8:	d433      	bmi.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80223aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80223ac:	6884      	ldr	r4, [r0, #8]
 80223ae:	42ac      	cmp	r4, r5
 80223b0:	dd2f      	ble.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80223b2:	141e      	asrs	r6, r3, #16
 80223b4:	d42d      	bmi.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80223b6:	68c0      	ldr	r0, [r0, #12]
 80223b8:	42b0      	cmp	r0, r6
 80223ba:	dd2a      	ble.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80223bc:	b224      	sxth	r4, r4
 80223be:	9801      	ldr	r0, [sp, #4]
 80223c0:	fb06 5504 	mla	r5, r6, r4, r5
 80223c4:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 80223c8:	9802      	ldr	r0, [sp, #8]
 80223ca:	ea4f 2e24 	mov.w	lr, r4, asr #8
 80223ce:	5d40      	ldrb	r0, [r0, r5]
 80223d0:	10e7      	asrs	r7, r4, #3
 80223d2:	9d05      	ldr	r5, [sp, #20]
 80223d4:	00e4      	lsls	r4, r4, #3
 80223d6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80223da:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80223de:	4368      	muls	r0, r5
 80223e0:	b2e4      	uxtb	r4, r4
 80223e2:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80223e6:	1c45      	adds	r5, r0, #1
 80223e8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80223ec:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80223f0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80223f4:	9403      	str	r4, [sp, #12]
 80223f6:	1200      	asrs	r0, r0, #8
 80223f8:	28ff      	cmp	r0, #255	; 0xff
 80223fa:	d111      	bne.n	8022420 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 80223fc:	f06f 0403 	mvn.w	r4, #3
 8022400:	fb04 f50c 	mul.w	r5, r4, ip
 8022404:	9c03      	ldr	r4, [sp, #12]
 8022406:	554c      	strb	r4, [r1, r5]
 8022408:	440d      	add	r5, r1
 802240a:	706f      	strb	r7, [r5, #1]
 802240c:	f885 e002 	strb.w	lr, [r5, #2]
 8022410:	70e8      	strb	r0, [r5, #3]
 8022412:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022414:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022418:	4402      	add	r2, r0
 802241a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802241c:	4403      	add	r3, r0
 802241e:	e77c      	b.n	802231a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8022420:	b2c5      	uxtb	r5, r0
 8022422:	2800      	cmp	r0, #0
 8022424:	d0f5      	beq.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8022426:	f06f 0403 	mvn.w	r4, #3
 802242a:	4347      	muls	r7, r0
 802242c:	fb04 f90c 	mul.w	r9, r4, ip
 8022430:	eb01 0809 	add.w	r8, r1, r9
 8022434:	f898 a003 	ldrb.w	sl, [r8, #3]
 8022438:	fb05 f60a 	mul.w	r6, r5, sl
 802243c:	4455      	add	r5, sl
 802243e:	1c74      	adds	r4, r6, #1
 8022440:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022444:	9c03      	ldr	r4, [sp, #12]
 8022446:	1236      	asrs	r6, r6, #8
 8022448:	4344      	muls	r4, r0
 802244a:	fb00 f00e 	mul.w	r0, r0, lr
 802244e:	1bad      	subs	r5, r5, r6
 8022450:	ebaa 0606 	sub.w	r6, sl, r6
 8022454:	f811 a009 	ldrb.w	sl, [r1, r9]
 8022458:	b2ed      	uxtb	r5, r5
 802245a:	fb06 440a 	mla	r4, r6, sl, r4
 802245e:	fb94 f4f5 	sdiv	r4, r4, r5
 8022462:	f801 4009 	strb.w	r4, [r1, r9]
 8022466:	f898 4001 	ldrb.w	r4, [r8, #1]
 802246a:	f898 a002 	ldrb.w	sl, [r8, #2]
 802246e:	fb06 7704 	mla	r7, r6, r4, r7
 8022472:	fb06 060a 	mla	r6, r6, sl, r0
 8022476:	f888 5003 	strb.w	r5, [r8, #3]
 802247a:	fb97 f7f5 	sdiv	r7, r7, r5
 802247e:	fb96 f6f5 	sdiv	r6, r6, r5
 8022482:	f888 7001 	strb.w	r7, [r8, #1]
 8022486:	f888 6002 	strb.w	r6, [r8, #2]
 802248a:	e7c2      	b.n	8022412 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802248c:	b2e6      	uxtb	r6, r4
 802248e:	2c00      	cmp	r4, #0
 8022490:	f43f af39 	beq.w	8022306 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022494:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 8022498:	4365      	muls	r5, r4
 802249a:	fb04 fc0c 	mul.w	ip, r4, ip
 802249e:	fb06 fa09 	mul.w	sl, r6, r9
 80224a2:	444e      	add	r6, r9
 80224a4:	fb04 f40e 	mul.w	r4, r4, lr
 80224a8:	f10a 0701 	add.w	r7, sl, #1
 80224ac:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 80224b0:	123f      	asrs	r7, r7, #8
 80224b2:	1bf6      	subs	r6, r6, r7
 80224b4:	eba9 0707 	sub.w	r7, r9, r7
 80224b8:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 80224bc:	b2f6      	uxtb	r6, r6
 80224be:	fb07 5509 	mla	r5, r7, r9, r5
 80224c2:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 80224c6:	f800 6c01 	strb.w	r6, [r0, #-1]
 80224ca:	fb95 f5f6 	sdiv	r5, r5, r6
 80224ce:	f800 5c04 	strb.w	r5, [r0, #-4]
 80224d2:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80224d6:	fb07 cc05 	mla	ip, r7, r5, ip
 80224da:	fb07 4709 	mla	r7, r7, r9, r4
 80224de:	fb9c fcf6 	sdiv	ip, ip, r6
 80224e2:	fb97 f7f6 	sdiv	r7, r7, r6
 80224e6:	f800 cc03 	strb.w	ip, [r0, #-3]
 80224ea:	f800 7c02 	strb.w	r7, [r0, #-2]
 80224ee:	e70a      	b.n	8022306 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 80224f0:	b007      	add	sp, #28
 80224f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080224f6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224fa:	b087      	sub	sp, #28
 80224fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022500:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022502:	9101      	str	r1, [sp, #4]
 8022504:	9205      	str	r2, [sp, #20]
 8022506:	6861      	ldr	r1, [r4, #4]
 8022508:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802250c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8022510:	fb01 2000 	mla	r0, r1, r0, r2
 8022514:	6822      	ldr	r2, [r4, #0]
 8022516:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 802251a:	f8db 2000 	ldr.w	r2, [fp]
 802251e:	9202      	str	r2, [sp, #8]
 8022520:	f8db 2004 	ldr.w	r2, [fp, #4]
 8022524:	9203      	str	r2, [sp, #12]
 8022526:	9a01      	ldr	r2, [sp, #4]
 8022528:	2a00      	cmp	r2, #0
 802252a:	dc03      	bgt.n	8022534 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802252c:	9a05      	ldr	r2, [sp, #20]
 802252e:	2a00      	cmp	r2, #0
 8022530:	f340 8151 	ble.w	80227d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022534:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022536:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802253a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802253e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022540:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8022544:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022548:	2b00      	cmp	r3, #0
 802254a:	dd0e      	ble.n	802256a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802254c:	140c      	asrs	r4, r1, #16
 802254e:	d405      	bmi.n	802255c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022550:	42bc      	cmp	r4, r7
 8022552:	da03      	bge.n	802255c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022554:	1414      	asrs	r4, r2, #16
 8022556:	d401      	bmi.n	802255c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022558:	42b4      	cmp	r4, r6
 802255a:	db07      	blt.n	802256c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802255c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802255e:	3b01      	subs	r3, #1
 8022560:	3004      	adds	r0, #4
 8022562:	4421      	add	r1, r4
 8022564:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022566:	4422      	add	r2, r4
 8022568:	e7ee      	b.n	8022548 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802256a:	d049      	beq.n	8022600 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 802256c:	1e5c      	subs	r4, r3, #1
 802256e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022570:	fb05 1504 	mla	r5, r5, r4, r1
 8022574:	142d      	asrs	r5, r5, #16
 8022576:	d43b      	bmi.n	80225f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8022578:	42bd      	cmp	r5, r7
 802257a:	da39      	bge.n	80225f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802257c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802257e:	fb05 2404 	mla	r4, r5, r4, r2
 8022582:	1424      	asrs	r4, r4, #16
 8022584:	d434      	bmi.n	80225f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8022586:	42b4      	cmp	r4, r6
 8022588:	da32      	bge.n	80225f0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802258a:	1d04      	adds	r4, r0, #4
 802258c:	4699      	mov	r9, r3
 802258e:	f1b9 0f00 	cmp.w	r9, #0
 8022592:	dd31      	ble.n	80225f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 8022594:	1415      	asrs	r5, r2, #16
 8022596:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802259a:	140e      	asrs	r6, r1, #16
 802259c:	fb07 6605 	mla	r6, r7, r5, r6
 80225a0:	9d02      	ldr	r5, [sp, #8]
 80225a2:	9f03      	ldr	r7, [sp, #12]
 80225a4:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 80225a8:	5dbe      	ldrb	r6, [r7, r6]
 80225aa:	ea4f 2825 	mov.w	r8, r5, asr #8
 80225ae:	10ef      	asrs	r7, r5, #3
 80225b0:	2eff      	cmp	r6, #255	; 0xff
 80225b2:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80225b6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80225ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80225be:	b2ed      	uxtb	r5, r5
 80225c0:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80225c4:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80225c8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80225cc:	f040 80cd 	bne.w	802276a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 80225d0:	f804 5c04 	strb.w	r5, [r4, #-4]
 80225d4:	f804 7c03 	strb.w	r7, [r4, #-3]
 80225d8:	f804 8c02 	strb.w	r8, [r4, #-2]
 80225dc:	f804 6c01 	strb.w	r6, [r4, #-1]
 80225e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80225e2:	3404      	adds	r4, #4
 80225e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80225e8:	4429      	add	r1, r5
 80225ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80225ec:	442a      	add	r2, r5
 80225ee:	e7ce      	b.n	802258e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80225f0:	2700      	movs	r7, #0
 80225f2:	19dc      	adds	r4, r3, r7
 80225f4:	2c00      	cmp	r4, #0
 80225f6:	dc3f      	bgt.n	8022678 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 80225f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80225fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8022600:	9b01      	ldr	r3, [sp, #4]
 8022602:	2b00      	cmp	r3, #0
 8022604:	f340 80e7 	ble.w	80227d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022608:	ee30 0a04 	vadd.f32	s0, s0, s8
 802260c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802260e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022612:	eeb0 6a62 	vmov.f32	s12, s5
 8022616:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802261a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802261e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022622:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022626:	eeb0 6a43 	vmov.f32	s12, s6
 802262a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802262e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022636:	ee61 7a27 	vmul.f32	s15, s2, s15
 802263a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802263e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022642:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802264a:	ee12 2a90 	vmov	r2, s5
 802264e:	eef0 2a47 	vmov.f32	s5, s14
 8022652:	fb92 f3f3 	sdiv	r3, r2, r3
 8022656:	ee13 2a10 	vmov	r2, s6
 802265a:	9313      	str	r3, [sp, #76]	; 0x4c
 802265c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802265e:	eeb0 3a67 	vmov.f32	s6, s15
 8022662:	fb92 f3f3 	sdiv	r3, r2, r3
 8022666:	9314      	str	r3, [sp, #80]	; 0x50
 8022668:	9b01      	ldr	r3, [sp, #4]
 802266a:	9a05      	ldr	r2, [sp, #20]
 802266c:	3b01      	subs	r3, #1
 802266e:	9301      	str	r3, [sp, #4]
 8022670:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022672:	bf08      	it	eq
 8022674:	4613      	moveq	r3, r2
 8022676:	e756      	b.n	8022526 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8022678:	140e      	asrs	r6, r1, #16
 802267a:	d434      	bmi.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802267c:	f8db 5008 	ldr.w	r5, [fp, #8]
 8022680:	42b5      	cmp	r5, r6
 8022682:	dd30      	ble.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022684:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8022688:	d42d      	bmi.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802268a:	f8db 400c 	ldr.w	r4, [fp, #12]
 802268e:	4564      	cmp	r4, ip
 8022690:	dd29      	ble.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022692:	b22d      	sxth	r5, r5
 8022694:	9c02      	ldr	r4, [sp, #8]
 8022696:	fb0c 6505 	mla	r5, ip, r5, r6
 802269a:	9e03      	ldr	r6, [sp, #12]
 802269c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80226a0:	5d75      	ldrb	r5, [r6, r5]
 80226a2:	ea4f 2824 	mov.w	r8, r4, asr #8
 80226a6:	2dff      	cmp	r5, #255	; 0xff
 80226a8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80226ac:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 80226b0:	9604      	str	r6, [sp, #16]
 80226b2:	ea4f 06e4 	mov.w	r6, r4, asr #3
 80226b6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80226ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80226be:	b2e4      	uxtb	r4, r4
 80226c0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80226c4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80226c8:	d113      	bne.n	80226f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80226ca:	f06f 0c03 	mvn.w	ip, #3
 80226ce:	fb0c fc07 	mul.w	ip, ip, r7
 80226d2:	f800 400c 	strb.w	r4, [r0, ip]
 80226d6:	4484      	add	ip, r0
 80226d8:	9c04      	ldr	r4, [sp, #16]
 80226da:	f88c 6001 	strb.w	r6, [ip, #1]
 80226de:	f88c 4002 	strb.w	r4, [ip, #2]
 80226e2:	f88c 5003 	strb.w	r5, [ip, #3]
 80226e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80226e8:	3f01      	subs	r7, #1
 80226ea:	4421      	add	r1, r4
 80226ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80226ee:	4422      	add	r2, r4
 80226f0:	e77f      	b.n	80225f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80226f2:	2d00      	cmp	r5, #0
 80226f4:	d0f7      	beq.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80226f6:	fb14 f405 	smulbb	r4, r4, r5
 80226fa:	f06f 0c03 	mvn.w	ip, #3
 80226fe:	fb15 f606 	smulbb	r6, r5, r6
 8022702:	fb0c fa07 	mul.w	sl, ip, r7
 8022706:	eb00 090a 	add.w	r9, r0, sl
 802270a:	f899 8003 	ldrb.w	r8, [r9, #3]
 802270e:	fb05 fc08 	mul.w	ip, r5, r8
 8022712:	f10c 0e01 	add.w	lr, ip, #1
 8022716:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802271a:	eb05 0c08 	add.w	ip, r5, r8
 802271e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022722:	ebac 0c0e 	sub.w	ip, ip, lr
 8022726:	eba8 0e0e 	sub.w	lr, r8, lr
 802272a:	f810 800a 	ldrb.w	r8, [r0, sl]
 802272e:	fa5f fc8c 	uxtb.w	ip, ip
 8022732:	fb0e 4408 	mla	r4, lr, r8, r4
 8022736:	fb94 f4fc 	sdiv	r4, r4, ip
 802273a:	f800 400a 	strb.w	r4, [r0, sl]
 802273e:	f899 4001 	ldrb.w	r4, [r9, #1]
 8022742:	f889 c003 	strb.w	ip, [r9, #3]
 8022746:	fb0e 6604 	mla	r6, lr, r4, r6
 802274a:	f899 4002 	ldrb.w	r4, [r9, #2]
 802274e:	fb96 f6fc 	sdiv	r6, r6, ip
 8022752:	f889 6001 	strb.w	r6, [r9, #1]
 8022756:	9e04      	ldr	r6, [sp, #16]
 8022758:	fb15 f506 	smulbb	r5, r5, r6
 802275c:	fb0e 5504 	mla	r5, lr, r4, r5
 8022760:	fb95 f5fc 	sdiv	r5, r5, ip
 8022764:	f889 5002 	strb.w	r5, [r9, #2]
 8022768:	e7bd      	b.n	80226e6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802276a:	2e00      	cmp	r6, #0
 802276c:	f43f af38 	beq.w	80225e0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8022770:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 8022774:	fb15 f506 	smulbb	r5, r5, r6
 8022778:	fb16 f707 	smulbb	r7, r6, r7
 802277c:	fb06 fc0a 	mul.w	ip, r6, sl
 8022780:	f10c 0e01 	add.w	lr, ip, #1
 8022784:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8022788:	eb06 0c0a 	add.w	ip, r6, sl
 802278c:	fb16 f608 	smulbb	r6, r6, r8
 8022790:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022794:	ebac 0c0e 	sub.w	ip, ip, lr
 8022798:	ebaa 0e0e 	sub.w	lr, sl, lr
 802279c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80227a0:	fa5f fc8c 	uxtb.w	ip, ip
 80227a4:	fb0e 550a 	mla	r5, lr, sl, r5
 80227a8:	f804 cc01 	strb.w	ip, [r4, #-1]
 80227ac:	fb95 f5fc 	sdiv	r5, r5, ip
 80227b0:	f804 5c04 	strb.w	r5, [r4, #-4]
 80227b4:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 80227b8:	fb0e 7705 	mla	r7, lr, r5, r7
 80227bc:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 80227c0:	fb0e 6605 	mla	r6, lr, r5, r6
 80227c4:	fb97 f7fc 	sdiv	r7, r7, ip
 80227c8:	fb96 f6fc 	sdiv	r6, r6, ip
 80227cc:	f804 7c03 	strb.w	r7, [r4, #-3]
 80227d0:	f804 6c02 	strb.w	r6, [r4, #-2]
 80227d4:	e704      	b.n	80225e0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80227d6:	b007      	add	sp, #28
 80227d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227dc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80227dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227e0:	b085      	sub	sp, #20
 80227e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80227e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80227e8:	9101      	str	r1, [sp, #4]
 80227ea:	6868      	ldr	r0, [r5, #4]
 80227ec:	9203      	str	r2, [sp, #12]
 80227ee:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80227f2:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 80227f6:	fb00 1404 	mla	r4, r0, r4, r1
 80227fa:	6829      	ldr	r1, [r5, #0]
 80227fc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022800:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022802:	6809      	ldr	r1, [r1, #0]
 8022804:	9102      	str	r1, [sp, #8]
 8022806:	9901      	ldr	r1, [sp, #4]
 8022808:	2900      	cmp	r1, #0
 802280a:	dc03      	bgt.n	8022814 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802280c:	9903      	ldr	r1, [sp, #12]
 802280e:	2900      	cmp	r1, #0
 8022810:	f340 8150 	ble.w	8022ab4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8022814:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022816:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 802281a:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 802281e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022820:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 8022824:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022826:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 802282a:	2b00      	cmp	r3, #0
 802282c:	dd0e      	ble.n	802284c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802282e:	1405      	asrs	r5, r0, #16
 8022830:	d405      	bmi.n	802283e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022832:	4565      	cmp	r5, ip
 8022834:	da03      	bge.n	802283e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022836:	140d      	asrs	r5, r1, #16
 8022838:	d401      	bmi.n	802283e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802283a:	42bd      	cmp	r5, r7
 802283c:	db07      	blt.n	802284e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802283e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022840:	3b01      	subs	r3, #1
 8022842:	3404      	adds	r4, #4
 8022844:	4428      	add	r0, r5
 8022846:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022848:	4429      	add	r1, r5
 802284a:	e7ee      	b.n	802282a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802284c:	d04c      	beq.n	80228e8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802284e:	1e5d      	subs	r5, r3, #1
 8022850:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022852:	fb06 0605 	mla	r6, r6, r5, r0
 8022856:	1436      	asrs	r6, r6, #16
 8022858:	d43c      	bmi.n	80228d4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 802285a:	4566      	cmp	r6, ip
 802285c:	da3a      	bge.n	80228d4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 802285e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022860:	fb06 1505 	mla	r5, r6, r5, r1
 8022864:	142d      	asrs	r5, r5, #16
 8022866:	d435      	bmi.n	80228d4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 8022868:	42bd      	cmp	r5, r7
 802286a:	da33      	bge.n	80228d4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 802286c:	1d25      	adds	r5, r4, #4
 802286e:	4699      	mov	r9, r3
 8022870:	f1b9 0f00 	cmp.w	r9, #0
 8022874:	dd34      	ble.n	80228e0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022876:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8022878:	140e      	asrs	r6, r1, #16
 802287a:	2aff      	cmp	r2, #255	; 0xff
 802287c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8022880:	ea4f 4720 	mov.w	r7, r0, asr #16
 8022884:	fb0c 7606 	mla	r6, ip, r6, r7
 8022888:	9f02      	ldr	r7, [sp, #8]
 802288a:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 802288e:	ea4f 2726 	mov.w	r7, r6, asr #8
 8022892:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 8022896:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 802289a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802289e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80228a2:	b2f6      	uxtb	r6, r6
 80228a4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80228a8:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 80228ac:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80228b0:	f040 80ca 	bne.w	8022a48 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80228b4:	f805 6c04 	strb.w	r6, [r5, #-4]
 80228b8:	f805 cc03 	strb.w	ip, [r5, #-3]
 80228bc:	f805 7c02 	strb.w	r7, [r5, #-2]
 80228c0:	f805 2c01 	strb.w	r2, [r5, #-1]
 80228c4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80228c6:	3504      	adds	r5, #4
 80228c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80228cc:	4430      	add	r0, r6
 80228ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80228d0:	4431      	add	r1, r6
 80228d2:	e7cd      	b.n	8022870 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80228d4:	f04f 0c00 	mov.w	ip, #0
 80228d8:	eb03 050c 	add.w	r5, r3, ip
 80228dc:	2d00      	cmp	r5, #0
 80228de:	dc3f      	bgt.n	8022960 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80228e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80228e4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80228e8:	9b01      	ldr	r3, [sp, #4]
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	f340 80e2 	ble.w	8022ab4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80228f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80228f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80228f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80228fa:	eeb0 6a62 	vmov.f32	s12, s5
 80228fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022902:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022906:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802290a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802290e:	eeb0 6a43 	vmov.f32	s12, s6
 8022912:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022916:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802291a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802291e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022922:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022926:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802292a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802292e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022932:	ee12 1a90 	vmov	r1, s5
 8022936:	eef0 2a47 	vmov.f32	s5, s14
 802293a:	fb91 f3f3 	sdiv	r3, r1, r3
 802293e:	ee13 1a10 	vmov	r1, s6
 8022942:	9311      	str	r3, [sp, #68]	; 0x44
 8022944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022946:	eeb0 3a67 	vmov.f32	s6, s15
 802294a:	fb91 f3f3 	sdiv	r3, r1, r3
 802294e:	9312      	str	r3, [sp, #72]	; 0x48
 8022950:	9b01      	ldr	r3, [sp, #4]
 8022952:	9903      	ldr	r1, [sp, #12]
 8022954:	3b01      	subs	r3, #1
 8022956:	9301      	str	r3, [sp, #4]
 8022958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802295a:	bf08      	it	eq
 802295c:	460b      	moveq	r3, r1
 802295e:	e752      	b.n	8022806 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022960:	1407      	asrs	r7, r0, #16
 8022962:	d42f      	bmi.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022964:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8022966:	68ae      	ldr	r6, [r5, #8]
 8022968:	42be      	cmp	r6, r7
 802296a:	dd2b      	ble.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802296c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8022970:	d428      	bmi.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022972:	68ed      	ldr	r5, [r5, #12]
 8022974:	4575      	cmp	r5, lr
 8022976:	dd25      	ble.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022978:	b236      	sxth	r6, r6
 802297a:	9d02      	ldr	r5, [sp, #8]
 802297c:	2aff      	cmp	r2, #255	; 0xff
 802297e:	fb0e 7606 	mla	r6, lr, r6, r7
 8022982:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 8022986:	ea4f 2625 	mov.w	r6, r5, asr #8
 802298a:	ea4f 07e5 	mov.w	r7, r5, asr #3
 802298e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8022992:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022996:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802299a:	b2ed      	uxtb	r5, r5
 802299c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80229a0:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80229a4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80229a8:	d113      	bne.n	80229d2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80229aa:	f06f 0e03 	mvn.w	lr, #3
 80229ae:	fb0e fe0c 	mul.w	lr, lr, ip
 80229b2:	f804 500e 	strb.w	r5, [r4, lr]
 80229b6:	44a6      	add	lr, r4
 80229b8:	f88e 7001 	strb.w	r7, [lr, #1]
 80229bc:	f88e 6002 	strb.w	r6, [lr, #2]
 80229c0:	f88e 2003 	strb.w	r2, [lr, #3]
 80229c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80229c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80229ca:	4428      	add	r0, r5
 80229cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80229ce:	4429      	add	r1, r5
 80229d0:	e782      	b.n	80228d8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 80229d2:	2a00      	cmp	r2, #0
 80229d4:	d0f6      	beq.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80229d6:	fb15 f502 	smulbb	r5, r5, r2
 80229da:	f06f 0e03 	mvn.w	lr, #3
 80229de:	fb12 f707 	smulbb	r7, r2, r7
 80229e2:	fb12 f606 	smulbb	r6, r2, r6
 80229e6:	fb0e fa0c 	mul.w	sl, lr, ip
 80229ea:	eb04 090a 	add.w	r9, r4, sl
 80229ee:	f899 b003 	ldrb.w	fp, [r9, #3]
 80229f2:	fb02 fe0b 	mul.w	lr, r2, fp
 80229f6:	f10e 0801 	add.w	r8, lr, #1
 80229fa:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 80229fe:	eb02 0e0b 	add.w	lr, r2, fp
 8022a02:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a06:	ebae 0e08 	sub.w	lr, lr, r8
 8022a0a:	ebab 0808 	sub.w	r8, fp, r8
 8022a0e:	f814 b00a 	ldrb.w	fp, [r4, sl]
 8022a12:	fa5f fe8e 	uxtb.w	lr, lr
 8022a16:	fb08 550b 	mla	r5, r8, fp, r5
 8022a1a:	fb95 f5fe 	sdiv	r5, r5, lr
 8022a1e:	f804 500a 	strb.w	r5, [r4, sl]
 8022a22:	f899 5001 	ldrb.w	r5, [r9, #1]
 8022a26:	f889 e003 	strb.w	lr, [r9, #3]
 8022a2a:	fb08 7705 	mla	r7, r8, r5, r7
 8022a2e:	f899 5002 	ldrb.w	r5, [r9, #2]
 8022a32:	fb08 6605 	mla	r6, r8, r5, r6
 8022a36:	fb97 f7fe 	sdiv	r7, r7, lr
 8022a3a:	fb96 f6fe 	sdiv	r6, r6, lr
 8022a3e:	f889 7001 	strb.w	r7, [r9, #1]
 8022a42:	f889 6002 	strb.w	r6, [r9, #2]
 8022a46:	e7bd      	b.n	80229c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022a48:	2a00      	cmp	r2, #0
 8022a4a:	f43f af3b 	beq.w	80228c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8022a4e:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 8022a52:	fb16 f602 	smulbb	r6, r6, r2
 8022a56:	fb12 fc0c 	smulbb	ip, r2, ip
 8022a5a:	fb12 f707 	smulbb	r7, r2, r7
 8022a5e:	fb02 fe0a 	mul.w	lr, r2, sl
 8022a62:	f10e 0801 	add.w	r8, lr, #1
 8022a66:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 8022a6a:	eb02 0e0a 	add.w	lr, r2, sl
 8022a6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022a72:	ebae 0e08 	sub.w	lr, lr, r8
 8022a76:	ebaa 0808 	sub.w	r8, sl, r8
 8022a7a:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 8022a7e:	fa5f fe8e 	uxtb.w	lr, lr
 8022a82:	fb08 660a 	mla	r6, r8, sl, r6
 8022a86:	f805 ec01 	strb.w	lr, [r5, #-1]
 8022a8a:	fb96 f6fe 	sdiv	r6, r6, lr
 8022a8e:	f805 6c04 	strb.w	r6, [r5, #-4]
 8022a92:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 8022a96:	fb08 cc06 	mla	ip, r8, r6, ip
 8022a9a:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 8022a9e:	fb08 7706 	mla	r7, r8, r6, r7
 8022aa2:	fb9c fcfe 	sdiv	ip, ip, lr
 8022aa6:	fb97 f7fe 	sdiv	r7, r7, lr
 8022aaa:	f805 cc03 	strb.w	ip, [r5, #-3]
 8022aae:	f805 7c02 	strb.w	r7, [r5, #-2]
 8022ab2:	e707      	b.n	80228c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8022ab4:	b005      	add	sp, #20
 8022ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022aba <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022abe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022ac4:	9201      	str	r2, [sp, #4]
 8022ac6:	6860      	ldr	r0, [r4, #4]
 8022ac8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022aca:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8022ace:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8022ad2:	fb00 2505 	mla	r5, r0, r5, r2
 8022ad6:	6822      	ldr	r2, [r4, #0]
 8022ad8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8022adc:	683a      	ldr	r2, [r7, #0]
 8022ade:	9200      	str	r2, [sp, #0]
 8022ae0:	2900      	cmp	r1, #0
 8022ae2:	dc03      	bgt.n	8022aec <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8022ae4:	9a01      	ldr	r2, [sp, #4]
 8022ae6:	2a00      	cmp	r2, #0
 8022ae8:	f340 80be 	ble.w	8022c68 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022aee:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8022af2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022af8:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 8022afc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022b00:	2b00      	cmp	r3, #0
 8022b02:	dd0c      	ble.n	8022b1e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022b04:	1404      	asrs	r4, r0, #16
 8022b06:	d405      	bmi.n	8022b14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022b08:	454c      	cmp	r4, r9
 8022b0a:	da03      	bge.n	8022b14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022b0c:	1414      	asrs	r4, r2, #16
 8022b0e:	d401      	bmi.n	8022b14 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022b10:	4564      	cmp	r4, ip
 8022b12:	db05      	blt.n	8022b20 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022b14:	4440      	add	r0, r8
 8022b16:	4472      	add	r2, lr
 8022b18:	3b01      	subs	r3, #1
 8022b1a:	3504      	adds	r5, #4
 8022b1c:	e7f0      	b.n	8022b00 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022b1e:	d00e      	beq.n	8022b3e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022b20:	1e5c      	subs	r4, r3, #1
 8022b22:	fb08 0604 	mla	r6, r8, r4, r0
 8022b26:	1436      	asrs	r6, r6, #16
 8022b28:	d53e      	bpl.n	8022ba8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8022b2a:	4699      	mov	r9, r3
 8022b2c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 8022b30:	f1b9 0f00 	cmp.w	r9, #0
 8022b34:	dc68      	bgt.n	8022c08 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022b36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b3a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8022b3e:	2900      	cmp	r1, #0
 8022b40:	f340 8092 	ble.w	8022c68 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8022b44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022b4e:	3901      	subs	r1, #1
 8022b50:	eeb0 6a62 	vmov.f32	s12, s5
 8022b54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022b58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022b5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022b60:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8022b64:	eeb0 6a43 	vmov.f32	s12, s6
 8022b68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022b6c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8022b70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022b74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022b78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022b7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022b80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022b84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022b88:	ee12 2a90 	vmov	r2, s5
 8022b8c:	eef0 2a47 	vmov.f32	s5, s14
 8022b90:	fb92 f8f3 	sdiv	r8, r2, r3
 8022b94:	ee13 2a10 	vmov	r2, s6
 8022b98:	eeb0 3a67 	vmov.f32	s6, s15
 8022b9c:	fb92 fef3 	sdiv	lr, r2, r3
 8022ba0:	9a01      	ldr	r2, [sp, #4]
 8022ba2:	bf08      	it	eq
 8022ba4:	4613      	moveq	r3, r2
 8022ba6:	e79b      	b.n	8022ae0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 8022ba8:	454e      	cmp	r6, r9
 8022baa:	dabe      	bge.n	8022b2a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022bac:	fb0e 2404 	mla	r4, lr, r4, r2
 8022bb0:	1424      	asrs	r4, r4, #16
 8022bb2:	d4ba      	bmi.n	8022b2a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022bb4:	4564      	cmp	r4, ip
 8022bb6:	dab8      	bge.n	8022b2a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022bb8:	4699      	mov	r9, r3
 8022bba:	46aa      	mov	sl, r5
 8022bbc:	f1b9 0f00 	cmp.w	r9, #0
 8022bc0:	ddb9      	ble.n	8022b36 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022bc2:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8022bc6:	1406      	asrs	r6, r0, #16
 8022bc8:	1414      	asrs	r4, r2, #16
 8022bca:	4440      	add	r0, r8
 8022bcc:	4472      	add	r2, lr
 8022bce:	f109 39ff 	add.w	r9, r9, #4294967295
 8022bd2:	fb0c 6404 	mla	r4, ip, r4, r6
 8022bd6:	9e00      	ldr	r6, [sp, #0]
 8022bd8:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 8022bdc:	10f4      	asrs	r4, r6, #3
 8022bde:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8022be2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022be6:	00f6      	lsls	r6, r6, #3
 8022be8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022bec:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022bf0:	b2f6      	uxtb	r6, r6
 8022bf2:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8022bf6:	0224      	lsls	r4, r4, #8
 8022bf8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022bfc:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8022c00:	4334      	orrs	r4, r6
 8022c02:	f84a 4b04 	str.w	r4, [sl], #4
 8022c06:	e7d9      	b.n	8022bbc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 8022c08:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8022c0c:	d427      	bmi.n	8022c5e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8022c0e:	68be      	ldr	r6, [r7, #8]
 8022c10:	4566      	cmp	r6, ip
 8022c12:	dd24      	ble.n	8022c5e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8022c14:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8022c18:	d421      	bmi.n	8022c5e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8022c1a:	68fc      	ldr	r4, [r7, #12]
 8022c1c:	455c      	cmp	r4, fp
 8022c1e:	dd1e      	ble.n	8022c5e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8022c20:	b236      	sxth	r6, r6
 8022c22:	9c00      	ldr	r4, [sp, #0]
 8022c24:	fb0b c606 	mla	r6, fp, r6, ip
 8022c28:	f06f 0b03 	mvn.w	fp, #3
 8022c2c:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 8022c30:	fb0b fb09 	mul.w	fp, fp, r9
 8022c34:	10f4      	asrs	r4, r6, #3
 8022c36:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8022c3a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022c3e:	00f6      	lsls	r6, r6, #3
 8022c40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c44:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022c48:	b2f6      	uxtb	r6, r6
 8022c4a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8022c4e:	0224      	lsls	r4, r4, #8
 8022c50:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022c54:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8022c58:	4334      	orrs	r4, r6
 8022c5a:	f84a 400b 	str.w	r4, [sl, fp]
 8022c5e:	4440      	add	r0, r8
 8022c60:	4472      	add	r2, lr
 8022c62:	f109 39ff 	add.w	r9, r9, #4294967295
 8022c66:	e763      	b.n	8022b30 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022c68:	b003      	add	sp, #12
 8022c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c6e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c72:	b085      	sub	sp, #20
 8022c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022c78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022c7a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8022c7e:	6868      	ldr	r0, [r5, #4]
 8022c80:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8022c84:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 8022c88:	fb00 1404 	mla	r4, r0, r4, r1
 8022c8c:	6829      	ldr	r1, [r5, #0]
 8022c8e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022c92:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022c94:	6809      	ldr	r1, [r1, #0]
 8022c96:	9101      	str	r1, [sp, #4]
 8022c98:	9902      	ldr	r1, [sp, #8]
 8022c9a:	2900      	cmp	r1, #0
 8022c9c:	dc03      	bgt.n	8022ca6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022c9e:	9903      	ldr	r1, [sp, #12]
 8022ca0:	2900      	cmp	r1, #0
 8022ca2:	f340 8137 	ble.w	8022f14 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022ca6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022ca8:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022cac:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 8022cb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022cb2:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 8022cb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022cb8:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	dd0e      	ble.n	8022cde <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022cc0:	1405      	asrs	r5, r0, #16
 8022cc2:	d405      	bmi.n	8022cd0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022cc4:	4565      	cmp	r5, ip
 8022cc6:	da03      	bge.n	8022cd0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022cc8:	140d      	asrs	r5, r1, #16
 8022cca:	d401      	bmi.n	8022cd0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8022ccc:	42bd      	cmp	r5, r7
 8022cce:	db07      	blt.n	8022ce0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8022cd0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022cd2:	3b01      	subs	r3, #1
 8022cd4:	3404      	adds	r4, #4
 8022cd6:	4428      	add	r0, r5
 8022cd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022cda:	4429      	add	r1, r5
 8022cdc:	e7ee      	b.n	8022cbc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022cde:	d041      	beq.n	8022d64 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 8022ce0:	1e5d      	subs	r5, r3, #1
 8022ce2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022ce4:	fb06 0605 	mla	r6, r6, r5, r0
 8022ce8:	1436      	asrs	r6, r6, #16
 8022cea:	d433      	bmi.n	8022d54 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8022cec:	4566      	cmp	r6, ip
 8022cee:	da31      	bge.n	8022d54 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8022cf0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022cf2:	fb06 1505 	mla	r5, r6, r5, r1
 8022cf6:	142d      	asrs	r5, r5, #16
 8022cf8:	d42c      	bmi.n	8022d54 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8022cfa:	42bd      	cmp	r5, r7
 8022cfc:	da2a      	bge.n	8022d54 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8022cfe:	1d25      	adds	r5, r4, #4
 8022d00:	469a      	mov	sl, r3
 8022d02:	f1ba 0f00 	cmp.w	sl, #0
 8022d06:	dd29      	ble.n	8022d5c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8022d08:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8022d0a:	140e      	asrs	r6, r1, #16
 8022d0c:	2aff      	cmp	r2, #255	; 0xff
 8022d0e:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 8022d12:	ea4f 4720 	mov.w	r7, r0, asr #16
 8022d16:	fb0c 7606 	mla	r6, ip, r6, r7
 8022d1a:	9f01      	ldr	r7, [sp, #4]
 8022d1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022d20:	4437      	add	r7, r6
 8022d22:	f897 e002 	ldrb.w	lr, [r7, #2]
 8022d26:	f897 8001 	ldrb.w	r8, [r7, #1]
 8022d2a:	9f01      	ldr	r7, [sp, #4]
 8022d2c:	f817 9006 	ldrb.w	r9, [r7, r6]
 8022d30:	f040 80bb 	bne.w	8022eaa <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8022d34:	f805 9c04 	strb.w	r9, [r5, #-4]
 8022d38:	f805 8c03 	strb.w	r8, [r5, #-3]
 8022d3c:	f805 ec02 	strb.w	lr, [r5, #-2]
 8022d40:	f805 2c01 	strb.w	r2, [r5, #-1]
 8022d44:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022d46:	3504      	adds	r5, #4
 8022d48:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022d4c:	4430      	add	r0, r6
 8022d4e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022d50:	4431      	add	r1, r6
 8022d52:	e7d6      	b.n	8022d02 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022d54:	2500      	movs	r5, #0
 8022d56:	195e      	adds	r6, r3, r5
 8022d58:	2e00      	cmp	r6, #0
 8022d5a:	dc3f      	bgt.n	8022ddc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8022d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022d64:	9b02      	ldr	r3, [sp, #8]
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	f340 80d4 	ble.w	8022f14 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022d6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d76:	eeb0 6a62 	vmov.f32	s12, s5
 8022d7a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022d7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d82:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d86:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022d8a:	eeb0 6a43 	vmov.f32	s12, s6
 8022d8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d92:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022d96:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d9e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022da2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022da6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022daa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022dae:	ee12 1a90 	vmov	r1, s5
 8022db2:	eef0 2a47 	vmov.f32	s5, s14
 8022db6:	fb91 f3f3 	sdiv	r3, r1, r3
 8022dba:	ee13 1a10 	vmov	r1, s6
 8022dbe:	9311      	str	r3, [sp, #68]	; 0x44
 8022dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dc2:	eeb0 3a67 	vmov.f32	s6, s15
 8022dc6:	fb91 f3f3 	sdiv	r3, r1, r3
 8022dca:	9312      	str	r3, [sp, #72]	; 0x48
 8022dcc:	9b02      	ldr	r3, [sp, #8]
 8022dce:	9903      	ldr	r1, [sp, #12]
 8022dd0:	3b01      	subs	r3, #1
 8022dd2:	9302      	str	r3, [sp, #8]
 8022dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dd6:	bf08      	it	eq
 8022dd8:	460b      	moveq	r3, r1
 8022dda:	e75d      	b.n	8022c98 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8022ddc:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8022de0:	d424      	bmi.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022de2:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8022de4:	68b7      	ldr	r7, [r6, #8]
 8022de6:	4567      	cmp	r7, ip
 8022de8:	dd20      	ble.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022dea:	ea5f 4e21 	movs.w	lr, r1, asr #16
 8022dee:	d41d      	bmi.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022df0:	68f6      	ldr	r6, [r6, #12]
 8022df2:	4576      	cmp	r6, lr
 8022df4:	dd1a      	ble.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022df6:	b23f      	sxth	r7, r7
 8022df8:	9e01      	ldr	r6, [sp, #4]
 8022dfa:	2aff      	cmp	r2, #255	; 0xff
 8022dfc:	fb0e cc07 	mla	ip, lr, r7, ip
 8022e00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022e04:	4466      	add	r6, ip
 8022e06:	f896 8002 	ldrb.w	r8, [r6, #2]
 8022e0a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022e0e:	9e01      	ldr	r6, [sp, #4]
 8022e10:	f816 a00c 	ldrb.w	sl, [r6, ip]
 8022e14:	d110      	bne.n	8022e38 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8022e16:	f06f 0603 	mvn.w	r6, #3
 8022e1a:	436e      	muls	r6, r5
 8022e1c:	f804 a006 	strb.w	sl, [r4, r6]
 8022e20:	4426      	add	r6, r4
 8022e22:	f886 9001 	strb.w	r9, [r6, #1]
 8022e26:	f886 8002 	strb.w	r8, [r6, #2]
 8022e2a:	70f2      	strb	r2, [r6, #3]
 8022e2c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022e2e:	3d01      	subs	r5, #1
 8022e30:	4430      	add	r0, r6
 8022e32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8022e34:	4431      	add	r1, r6
 8022e36:	e78e      	b.n	8022d56 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 8022e38:	2a00      	cmp	r2, #0
 8022e3a:	d0f7      	beq.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022e3c:	fb1a fa02 	smulbb	sl, sl, r2
 8022e40:	f06f 0603 	mvn.w	r6, #3
 8022e44:	fb12 f909 	smulbb	r9, r2, r9
 8022e48:	fb12 f808 	smulbb	r8, r2, r8
 8022e4c:	fb06 fb05 	mul.w	fp, r6, r5
 8022e50:	eb04 0c0b 	add.w	ip, r4, fp
 8022e54:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8022e58:	fb02 f607 	mul.w	r6, r2, r7
 8022e5c:	f106 0e01 	add.w	lr, r6, #1
 8022e60:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8022e64:	19d6      	adds	r6, r2, r7
 8022e66:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022e6a:	eba7 070e 	sub.w	r7, r7, lr
 8022e6e:	eba6 060e 	sub.w	r6, r6, lr
 8022e72:	f814 e00b 	ldrb.w	lr, [r4, fp]
 8022e76:	b2f6      	uxtb	r6, r6
 8022e78:	fb07 aa0e 	mla	sl, r7, lr, sl
 8022e7c:	fb9a faf6 	sdiv	sl, sl, r6
 8022e80:	f804 a00b 	strb.w	sl, [r4, fp]
 8022e84:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022e88:	f88c 6003 	strb.w	r6, [ip, #3]
 8022e8c:	fb07 990e 	mla	r9, r7, lr, r9
 8022e90:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022e94:	fb07 880e 	mla	r8, r7, lr, r8
 8022e98:	fb99 f9f6 	sdiv	r9, r9, r6
 8022e9c:	fb98 f8f6 	sdiv	r8, r8, r6
 8022ea0:	f88c 9001 	strb.w	r9, [ip, #1]
 8022ea4:	f88c 8002 	strb.w	r8, [ip, #2]
 8022ea8:	e7c0      	b.n	8022e2c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8022eaa:	2a00      	cmp	r2, #0
 8022eac:	f43f af4a 	beq.w	8022d44 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8022eb0:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 8022eb4:	fb19 f902 	smulbb	r9, r9, r2
 8022eb8:	fb12 f808 	smulbb	r8, r2, r8
 8022ebc:	fb02 fc0b 	mul.w	ip, r2, fp
 8022ec0:	eb02 060b 	add.w	r6, r2, fp
 8022ec4:	fb12 fe0e 	smulbb	lr, r2, lr
 8022ec8:	f10c 0701 	add.w	r7, ip, #1
 8022ecc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022ed0:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8022ed4:	ebab 070c 	sub.w	r7, fp, ip
 8022ed8:	eba6 060c 	sub.w	r6, r6, ip
 8022edc:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8022ee0:	b2f6      	uxtb	r6, r6
 8022ee2:	fb07 990c 	mla	r9, r7, ip, r9
 8022ee6:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8022eea:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022eee:	fb07 880c 	mla	r8, r7, ip, r8
 8022ef2:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8022ef6:	fb07 ee0c 	mla	lr, r7, ip, lr
 8022efa:	fb99 f9f6 	sdiv	r9, r9, r6
 8022efe:	fb98 f8f6 	sdiv	r8, r8, r6
 8022f02:	fb9e fef6 	sdiv	lr, lr, r6
 8022f06:	f805 9c04 	strb.w	r9, [r5, #-4]
 8022f0a:	f805 8c03 	strb.w	r8, [r5, #-3]
 8022f0e:	f805 ec02 	strb.w	lr, [r5, #-2]
 8022f12:	e717      	b.n	8022d44 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8022f14:	b005      	add	sp, #20
 8022f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f1a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f1e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022f24:	9201      	str	r2, [sp, #4]
 8022f26:	6868      	ldr	r0, [r5, #4]
 8022f28:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022f2a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8022f2e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8022f32:	fb00 2404 	mla	r4, r0, r4, r2
 8022f36:	682a      	ldr	r2, [r5, #0]
 8022f38:	f8d7 8000 	ldr.w	r8, [r7]
 8022f3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8022f40:	2900      	cmp	r1, #0
 8022f42:	dc03      	bgt.n	8022f4c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8022f44:	9a01      	ldr	r2, [sp, #4]
 8022f46:	2a00      	cmp	r2, #0
 8022f48:	f340 80af 	ble.w	80230aa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022f4e:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8022f52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f58:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8022f5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022f60:	2b00      	cmp	r3, #0
 8022f62:	dd0c      	ble.n	8022f7e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022f64:	1405      	asrs	r5, r0, #16
 8022f66:	d405      	bmi.n	8022f74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022f68:	4555      	cmp	r5, sl
 8022f6a:	da03      	bge.n	8022f74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022f6c:	1415      	asrs	r5, r2, #16
 8022f6e:	d401      	bmi.n	8022f74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022f70:	454d      	cmp	r5, r9
 8022f72:	db05      	blt.n	8022f80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022f74:	4470      	add	r0, lr
 8022f76:	4462      	add	r2, ip
 8022f78:	3b01      	subs	r3, #1
 8022f7a:	3404      	adds	r4, #4
 8022f7c:	e7f0      	b.n	8022f60 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022f7e:	d037      	beq.n	8022ff0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8022f80:	1e5d      	subs	r5, r3, #1
 8022f82:	fb0e 0605 	mla	r6, lr, r5, r0
 8022f86:	1436      	asrs	r6, r6, #16
 8022f88:	d42a      	bmi.n	8022fe0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8022f8a:	4556      	cmp	r6, sl
 8022f8c:	da28      	bge.n	8022fe0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8022f8e:	fb0c 2505 	mla	r5, ip, r5, r2
 8022f92:	142d      	asrs	r5, r5, #16
 8022f94:	d424      	bmi.n	8022fe0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8022f96:	454d      	cmp	r5, r9
 8022f98:	da22      	bge.n	8022fe0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8022f9a:	1d26      	adds	r6, r4, #4
 8022f9c:	4699      	mov	r9, r3
 8022f9e:	f1b9 0f00 	cmp.w	r9, #0
 8022fa2:	f106 0604 	add.w	r6, r6, #4
 8022fa6:	dd1f      	ble.n	8022fe8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 8022fa8:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8022fac:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8022fb0:	1415      	asrs	r5, r2, #16
 8022fb2:	4470      	add	r0, lr
 8022fb4:	4462      	add	r2, ip
 8022fb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8022fba:	fb0b a505 	mla	r5, fp, r5, sl
 8022fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022fc2:	eb08 0a05 	add.w	sl, r8, r5
 8022fc6:	f818 5005 	ldrb.w	r5, [r8, r5]
 8022fca:	f806 5c08 	strb.w	r5, [r6, #-8]
 8022fce:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8022fd2:	f806 5c07 	strb.w	r5, [r6, #-7]
 8022fd6:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8022fda:	f806 5c06 	strb.w	r5, [r6, #-6]
 8022fde:	e7de      	b.n	8022f9e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022fe0:	2600      	movs	r6, #0
 8022fe2:	199d      	adds	r5, r3, r6
 8022fe4:	2d00      	cmp	r5, #0
 8022fe6:	dc37      	bgt.n	8023058 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022fec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8022ff0:	2900      	cmp	r1, #0
 8022ff2:	dd5a      	ble.n	80230aa <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022ff4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ffa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ffe:	3901      	subs	r1, #1
 8023000:	eeb0 6a62 	vmov.f32	s12, s5
 8023004:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023008:	ee31 1a05 	vadd.f32	s2, s2, s10
 802300c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023010:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8023014:	eeb0 6a43 	vmov.f32	s12, s6
 8023018:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802301c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8023020:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023024:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023028:	ee77 2a62 	vsub.f32	s5, s14, s5
 802302c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023030:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023034:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023038:	ee12 2a90 	vmov	r2, s5
 802303c:	eef0 2a47 	vmov.f32	s5, s14
 8023040:	fb92 fef3 	sdiv	lr, r2, r3
 8023044:	ee13 2a10 	vmov	r2, s6
 8023048:	eeb0 3a67 	vmov.f32	s6, s15
 802304c:	fb92 fcf3 	sdiv	ip, r2, r3
 8023050:	9a01      	ldr	r2, [sp, #4]
 8023052:	bf08      	it	eq
 8023054:	4613      	moveq	r3, r2
 8023056:	e773      	b.n	8022f40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 8023058:	ea5f 4920 	movs.w	r9, r0, asr #16
 802305c:	d421      	bmi.n	80230a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802305e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8023062:	45cb      	cmp	fp, r9
 8023064:	dd1d      	ble.n	80230a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023066:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802306a:	d41a      	bmi.n	80230a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802306c:	68fd      	ldr	r5, [r7, #12]
 802306e:	4555      	cmp	r5, sl
 8023070:	dd17      	ble.n	80230a2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8023072:	fa0f f58b 	sxth.w	r5, fp
 8023076:	fb0a 9505 	mla	r5, sl, r5, r9
 802307a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802307e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8023082:	eb08 0b05 	add.w	fp, r8, r5
 8023086:	f06f 0503 	mvn.w	r5, #3
 802308a:	4375      	muls	r5, r6
 802308c:	f804 9005 	strb.w	r9, [r4, r5]
 8023090:	4425      	add	r5, r4
 8023092:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8023096:	f885 9001 	strb.w	r9, [r5, #1]
 802309a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 802309e:	f885 9002 	strb.w	r9, [r5, #2]
 80230a2:	4470      	add	r0, lr
 80230a4:	4462      	add	r2, ip
 80230a6:	3e01      	subs	r6, #1
 80230a8:	e79b      	b.n	8022fe2 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80230aa:	b003      	add	sp, #12
 80230ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080230b0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80230b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b4:	b087      	sub	sp, #28
 80230b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80230ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80230bc:	9203      	str	r2, [sp, #12]
 80230be:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80230c2:	9100      	str	r1, [sp, #0]
 80230c4:	9204      	str	r2, [sp, #16]
 80230c6:	6861      	ldr	r1, [r4, #4]
 80230c8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80230cc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80230d0:	fb01 2000 	mla	r0, r1, r0, r2
 80230d4:	6822      	ldr	r2, [r4, #0]
 80230d6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80230da:	f8db 2000 	ldr.w	r2, [fp]
 80230de:	9201      	str	r2, [sp, #4]
 80230e0:	9a00      	ldr	r2, [sp, #0]
 80230e2:	2a00      	cmp	r2, #0
 80230e4:	dc03      	bgt.n	80230ee <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80230e6:	9a03      	ldr	r2, [sp, #12]
 80230e8:	2a00      	cmp	r2, #0
 80230ea:	f340 8147 	ble.w	802337c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 80230ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80230f0:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80230f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80230f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80230fa:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80230fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8023102:	2b00      	cmp	r3, #0
 8023104:	dd0e      	ble.n	8023124 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023106:	140c      	asrs	r4, r1, #16
 8023108:	d405      	bmi.n	8023116 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802310a:	42bc      	cmp	r4, r7
 802310c:	da03      	bge.n	8023116 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802310e:	1414      	asrs	r4, r2, #16
 8023110:	d401      	bmi.n	8023116 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023112:	42b4      	cmp	r4, r6
 8023114:	db07      	blt.n	8023126 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8023116:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023118:	3b01      	subs	r3, #1
 802311a:	3004      	adds	r0, #4
 802311c:	4421      	add	r1, r4
 802311e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023120:	4422      	add	r2, r4
 8023122:	e7ee      	b.n	8023102 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023124:	d048      	beq.n	80231b8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8023126:	1e5c      	subs	r4, r3, #1
 8023128:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802312a:	fb05 1504 	mla	r5, r5, r4, r1
 802312e:	142d      	asrs	r5, r5, #16
 8023130:	d438      	bmi.n	80231a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8023132:	42bd      	cmp	r5, r7
 8023134:	da36      	bge.n	80231a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8023136:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023138:	fb05 2404 	mla	r4, r5, r4, r2
 802313c:	1424      	asrs	r4, r4, #16
 802313e:	d431      	bmi.n	80231a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8023140:	42b4      	cmp	r4, r6
 8023142:	da2f      	bge.n	80231a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8023144:	469e      	mov	lr, r3
 8023146:	4604      	mov	r4, r0
 8023148:	f1be 0f00 	cmp.w	lr, #0
 802314c:	dd30      	ble.n	80231b0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 802314e:	140e      	asrs	r6, r1, #16
 8023150:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8023154:	1415      	asrs	r5, r2, #16
 8023156:	fb07 6505 	mla	r5, r7, r5, r6
 802315a:	9e01      	ldr	r6, [sp, #4]
 802315c:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8023160:	0e35      	lsrs	r5, r6, #24
 8023162:	d017      	beq.n	8023194 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8023164:	9f04      	ldr	r7, [sp, #16]
 8023166:	f3c6 4907 	ubfx	r9, r6, #16, #8
 802316a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 802316e:	437d      	muls	r5, r7
 8023170:	fa5f f88c 	uxtb.w	r8, ip
 8023174:	1c6f      	adds	r7, r5, #1
 8023176:	eb07 2525 	add.w	r5, r7, r5, asr #8
 802317a:	fa5f f789 	uxtb.w	r7, r9
 802317e:	122d      	asrs	r5, r5, #8
 8023180:	9702      	str	r7, [sp, #8]
 8023182:	2dff      	cmp	r5, #255	; 0xff
 8023184:	f040 80c7 	bne.w	8023316 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8023188:	7026      	strb	r6, [r4, #0]
 802318a:	f884 c001 	strb.w	ip, [r4, #1]
 802318e:	f884 9002 	strb.w	r9, [r4, #2]
 8023192:	70e5      	strb	r5, [r4, #3]
 8023194:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023196:	3404      	adds	r4, #4
 8023198:	f10e 3eff 	add.w	lr, lr, #4294967295
 802319c:	4429      	add	r1, r5
 802319e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80231a0:	442a      	add	r2, r5
 80231a2:	e7d1      	b.n	8023148 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80231a4:	f04f 0c00 	mov.w	ip, #0
 80231a8:	eb03 040c 	add.w	r4, r3, ip
 80231ac:	2c00      	cmp	r4, #0
 80231ae:	dc3f      	bgt.n	8023230 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 80231b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80231b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80231b8:	9b00      	ldr	r3, [sp, #0]
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	f340 80de 	ble.w	802337c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 80231c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80231c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80231c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80231ca:	eeb0 6a62 	vmov.f32	s12, s5
 80231ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80231d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80231da:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80231de:	eeb0 6a43 	vmov.f32	s12, s6
 80231e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80231e6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80231ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80231ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80231f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80231f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80231fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80231fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023202:	ee12 2a90 	vmov	r2, s5
 8023206:	eef0 2a47 	vmov.f32	s5, s14
 802320a:	fb92 f3f3 	sdiv	r3, r2, r3
 802320e:	ee13 2a10 	vmov	r2, s6
 8023212:	9313      	str	r3, [sp, #76]	; 0x4c
 8023214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023216:	eeb0 3a67 	vmov.f32	s6, s15
 802321a:	fb92 f3f3 	sdiv	r3, r2, r3
 802321e:	9314      	str	r3, [sp, #80]	; 0x50
 8023220:	9b00      	ldr	r3, [sp, #0]
 8023222:	9a03      	ldr	r2, [sp, #12]
 8023224:	3b01      	subs	r3, #1
 8023226:	9300      	str	r3, [sp, #0]
 8023228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802322a:	bf08      	it	eq
 802322c:	4613      	moveq	r3, r2
 802322e:	e757      	b.n	80230e0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8023230:	140e      	asrs	r6, r1, #16
 8023232:	d42e      	bmi.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023234:	f8db 5008 	ldr.w	r5, [fp, #8]
 8023238:	42b5      	cmp	r5, r6
 802323a:	dd2a      	ble.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802323c:	1417      	asrs	r7, r2, #16
 802323e:	d428      	bmi.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023240:	f8db 400c 	ldr.w	r4, [fp, #12]
 8023244:	42bc      	cmp	r4, r7
 8023246:	dd24      	ble.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023248:	b22d      	sxth	r5, r5
 802324a:	9c01      	ldr	r4, [sp, #4]
 802324c:	fb07 6505 	mla	r5, r7, r5, r6
 8023250:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8023254:	0e2c      	lsrs	r4, r5, #24
 8023256:	d01c      	beq.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023258:	9e04      	ldr	r6, [sp, #16]
 802325a:	4374      	muls	r4, r6
 802325c:	1c66      	adds	r6, r4, #1
 802325e:	eb06 2424 	add.w	r4, r6, r4, asr #8
 8023262:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8023266:	1224      	asrs	r4, r4, #8
 8023268:	b2f7      	uxtb	r7, r6
 802326a:	2cff      	cmp	r4, #255	; 0xff
 802326c:	9705      	str	r7, [sp, #20]
 802326e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8023272:	fa5f f887 	uxtb.w	r8, r7
 8023276:	d113      	bne.n	80232a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8023278:	f06f 0e03 	mvn.w	lr, #3
 802327c:	fb0e fe0c 	mul.w	lr, lr, ip
 8023280:	f800 500e 	strb.w	r5, [r0, lr]
 8023284:	4486      	add	lr, r0
 8023286:	f88e 7001 	strb.w	r7, [lr, #1]
 802328a:	f88e 6002 	strb.w	r6, [lr, #2]
 802328e:	f88e 4003 	strb.w	r4, [lr, #3]
 8023292:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023294:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023298:	4421      	add	r1, r4
 802329a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802329c:	4422      	add	r2, r4
 802329e:	e783      	b.n	80231a8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 80232a0:	b2e6      	uxtb	r6, r4
 80232a2:	9602      	str	r6, [sp, #8]
 80232a4:	2c00      	cmp	r4, #0
 80232a6:	d0f4      	beq.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80232a8:	f06f 0603 	mvn.w	r6, #3
 80232ac:	b2ed      	uxtb	r5, r5
 80232ae:	fb04 f808 	mul.w	r8, r4, r8
 80232b2:	fb06 f90c 	mul.w	r9, r6, ip
 80232b6:	9e02      	ldr	r6, [sp, #8]
 80232b8:	eb00 0e09 	add.w	lr, r0, r9
 80232bc:	f89e a003 	ldrb.w	sl, [lr, #3]
 80232c0:	fb06 f70a 	mul.w	r7, r6, sl
 80232c4:	1c7e      	adds	r6, r7, #1
 80232c6:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 80232ca:	9e02      	ldr	r6, [sp, #8]
 80232cc:	123f      	asrs	r7, r7, #8
 80232ce:	4456      	add	r6, sl
 80232d0:	1bf6      	subs	r6, r6, r7
 80232d2:	ebaa 0707 	sub.w	r7, sl, r7
 80232d6:	f810 a009 	ldrb.w	sl, [r0, r9]
 80232da:	b2f6      	uxtb	r6, r6
 80232dc:	fb07 fa0a 	mul.w	sl, r7, sl
 80232e0:	fb04 a505 	mla	r5, r4, r5, sl
 80232e4:	fb95 f5f6 	sdiv	r5, r5, r6
 80232e8:	f800 5009 	strb.w	r5, [r0, r9]
 80232ec:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80232f0:	f89e a002 	ldrb.w	sl, [lr, #2]
 80232f4:	fb07 8805 	mla	r8, r7, r5, r8
 80232f8:	9d05      	ldr	r5, [sp, #20]
 80232fa:	f88e 6003 	strb.w	r6, [lr, #3]
 80232fe:	436c      	muls	r4, r5
 8023300:	fb07 470a 	mla	r7, r7, sl, r4
 8023304:	fb98 f8f6 	sdiv	r8, r8, r6
 8023308:	fb97 f7f6 	sdiv	r7, r7, r6
 802330c:	f88e 8001 	strb.w	r8, [lr, #1]
 8023310:	f88e 7002 	strb.w	r7, [lr, #2]
 8023314:	e7bd      	b.n	8023292 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8023316:	b2ef      	uxtb	r7, r5
 8023318:	2d00      	cmp	r5, #0
 802331a:	f43f af3b 	beq.w	8023194 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 802331e:	f894 9003 	ldrb.w	r9, [r4, #3]
 8023322:	b2f6      	uxtb	r6, r6
 8023324:	fb05 f808 	mul.w	r8, r5, r8
 8023328:	fb07 fa09 	mul.w	sl, r7, r9
 802332c:	444f      	add	r7, r9
 802332e:	f10a 0c01 	add.w	ip, sl, #1
 8023332:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8023336:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802333a:	eba7 070c 	sub.w	r7, r7, ip
 802333e:	eba9 0c0c 	sub.w	ip, r9, ip
 8023342:	f894 9000 	ldrb.w	r9, [r4]
 8023346:	b2ff      	uxtb	r7, r7
 8023348:	fb0c f909 	mul.w	r9, ip, r9
 802334c:	70e7      	strb	r7, [r4, #3]
 802334e:	fb05 9606 	mla	r6, r5, r6, r9
 8023352:	f894 9002 	ldrb.w	r9, [r4, #2]
 8023356:	fb96 f6f7 	sdiv	r6, r6, r7
 802335a:	7026      	strb	r6, [r4, #0]
 802335c:	7866      	ldrb	r6, [r4, #1]
 802335e:	fb0c 8806 	mla	r8, ip, r6, r8
 8023362:	9e02      	ldr	r6, [sp, #8]
 8023364:	4375      	muls	r5, r6
 8023366:	fb0c 5c09 	mla	ip, ip, r9, r5
 802336a:	fb98 f8f7 	sdiv	r8, r8, r7
 802336e:	fb9c fcf7 	sdiv	ip, ip, r7
 8023372:	f884 8001 	strb.w	r8, [r4, #1]
 8023376:	f884 c002 	strb.w	ip, [r4, #2]
 802337a:	e70b      	b.n	8023194 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 802337c:	b007      	add	sp, #28
 802337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023384 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023388:	b089      	sub	sp, #36	; 0x24
 802338a:	469a      	mov	sl, r3
 802338c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023390:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8023392:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8023396:	9102      	str	r1, [sp, #8]
 8023398:	9206      	str	r2, [sp, #24]
 802339a:	9307      	str	r3, [sp, #28]
 802339c:	6842      	ldr	r2, [r0, #4]
 802339e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80233a2:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 80233a6:	fb02 3101 	mla	r1, r2, r1, r3
 80233aa:	6803      	ldr	r3, [r0, #0]
 80233ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80233b0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80233b4:	3301      	adds	r3, #1
 80233b6:	f023 0301 	bic.w	r3, r3, #1
 80233ba:	9303      	str	r3, [sp, #12]
 80233bc:	f8db 3000 	ldr.w	r3, [fp]
 80233c0:	9304      	str	r3, [sp, #16]
 80233c2:	9b02      	ldr	r3, [sp, #8]
 80233c4:	2b00      	cmp	r3, #0
 80233c6:	dc03      	bgt.n	80233d0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80233c8:	9b06      	ldr	r3, [sp, #24]
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	f340 8154 	ble.w	8023678 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80233d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80233d2:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 80233d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80233da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80233dc:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 80233e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80233e4:	9301      	str	r3, [sp, #4]
 80233e6:	f1ba 0f00 	cmp.w	sl, #0
 80233ea:	dd12      	ble.n	8023412 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80233ec:	1410      	asrs	r0, r2, #16
 80233ee:	d406      	bmi.n	80233fe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80233f0:	42b0      	cmp	r0, r6
 80233f2:	da04      	bge.n	80233fe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80233f4:	9b01      	ldr	r3, [sp, #4]
 80233f6:	1418      	asrs	r0, r3, #16
 80233f8:	d401      	bmi.n	80233fe <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80233fa:	42a8      	cmp	r0, r5
 80233fc:	db0a      	blt.n	8023414 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80233fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023400:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023404:	9b01      	ldr	r3, [sp, #4]
 8023406:	3104      	adds	r1, #4
 8023408:	4402      	add	r2, r0
 802340a:	9816      	ldr	r0, [sp, #88]	; 0x58
 802340c:	4403      	add	r3, r0
 802340e:	9301      	str	r3, [sp, #4]
 8023410:	e7e9      	b.n	80233e6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023412:	d050      	beq.n	80234b6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023414:	f10a 30ff 	add.w	r0, sl, #4294967295
 8023418:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802341a:	fb04 2400 	mla	r4, r4, r0, r2
 802341e:	1424      	asrs	r4, r4, #16
 8023420:	d440      	bmi.n	80234a4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023422:	42b4      	cmp	r4, r6
 8023424:	da3e      	bge.n	80234a4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023426:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023428:	9b01      	ldr	r3, [sp, #4]
 802342a:	fb04 3000 	mla	r0, r4, r0, r3
 802342e:	1400      	asrs	r0, r0, #16
 8023430:	d438      	bmi.n	80234a4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023432:	42a8      	cmp	r0, r5
 8023434:	da36      	bge.n	80234a4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023436:	1d08      	adds	r0, r1, #4
 8023438:	46d6      	mov	lr, sl
 802343a:	f1be 0f00 	cmp.w	lr, #0
 802343e:	dd36      	ble.n	80234ae <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8023440:	9b01      	ldr	r3, [sp, #4]
 8023442:	1414      	asrs	r4, r2, #16
 8023444:	141d      	asrs	r5, r3, #16
 8023446:	9b03      	ldr	r3, [sp, #12]
 8023448:	fb03 4505 	mla	r5, r3, r5, r4
 802344c:	9b04      	ldr	r3, [sp, #16]
 802344e:	086c      	lsrs	r4, r5, #1
 8023450:	5d1c      	ldrb	r4, [r3, r4]
 8023452:	07eb      	lsls	r3, r5, #31
 8023454:	9b07      	ldr	r3, [sp, #28]
 8023456:	bf54      	ite	pl
 8023458:	f004 040f 	andpl.w	r4, r4, #15
 802345c:	1124      	asrmi	r4, r4, #4
 802345e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023462:	b2e4      	uxtb	r4, r4
 8023464:	435c      	muls	r4, r3
 8023466:	1c65      	adds	r5, r4, #1
 8023468:	eb05 2424 	add.w	r4, r5, r4, asr #8
 802346c:	4d84      	ldr	r5, [pc, #528]	; (8023680 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 802346e:	1224      	asrs	r4, r4, #8
 8023470:	f895 9002 	ldrb.w	r9, [r5, #2]
 8023474:	786f      	ldrb	r7, [r5, #1]
 8023476:	2cff      	cmp	r4, #255	; 0xff
 8023478:	f895 c000 	ldrb.w	ip, [r5]
 802347c:	f040 80cb 	bne.w	8023616 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023480:	f800 cc04 	strb.w	ip, [r0, #-4]
 8023484:	f800 7c03 	strb.w	r7, [r0, #-3]
 8023488:	f800 9c02 	strb.w	r9, [r0, #-2]
 802348c:	f800 4c01 	strb.w	r4, [r0, #-1]
 8023490:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023492:	3004      	adds	r0, #4
 8023494:	9c01      	ldr	r4, [sp, #4]
 8023496:	f10e 3eff 	add.w	lr, lr, #4294967295
 802349a:	441a      	add	r2, r3
 802349c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802349e:	441c      	add	r4, r3
 80234a0:	9401      	str	r4, [sp, #4]
 80234a2:	e7ca      	b.n	802343a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80234a4:	2600      	movs	r6, #0
 80234a6:	eb0a 0006 	add.w	r0, sl, r6
 80234aa:	2800      	cmp	r0, #0
 80234ac:	dc41      	bgt.n	8023532 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80234ae:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80234b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80234b6:	9b02      	ldr	r3, [sp, #8]
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	f340 80dd 	ble.w	8023678 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80234be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80234c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234c8:	eeb0 6a62 	vmov.f32	s12, s5
 80234cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234d8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80234dc:	eeb0 6a43 	vmov.f32	s12, s6
 80234e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234e4:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 80234e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 80234f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80234f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80234f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80234fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023500:	ee12 2a90 	vmov	r2, s5
 8023504:	eef0 2a47 	vmov.f32	s5, s14
 8023508:	fb92 f3f3 	sdiv	r3, r2, r3
 802350c:	ee13 2a10 	vmov	r2, s6
 8023510:	9315      	str	r3, [sp, #84]	; 0x54
 8023512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023514:	eeb0 3a67 	vmov.f32	s6, s15
 8023518:	fb92 f3f3 	sdiv	r3, r2, r3
 802351c:	9316      	str	r3, [sp, #88]	; 0x58
 802351e:	9b02      	ldr	r3, [sp, #8]
 8023520:	9a06      	ldr	r2, [sp, #24]
 8023522:	3b01      	subs	r3, #1
 8023524:	9302      	str	r3, [sp, #8]
 8023526:	bf08      	it	eq
 8023528:	4692      	moveq	sl, r2
 802352a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802352c:	bf18      	it	ne
 802352e:	469a      	movne	sl, r3
 8023530:	e747      	b.n	80233c2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023532:	1414      	asrs	r4, r2, #16
 8023534:	d432      	bmi.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023536:	f8db 0008 	ldr.w	r0, [fp, #8]
 802353a:	42a0      	cmp	r0, r4
 802353c:	dd2e      	ble.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802353e:	9b01      	ldr	r3, [sp, #4]
 8023540:	141d      	asrs	r5, r3, #16
 8023542:	d42b      	bmi.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023544:	f8db 000c 	ldr.w	r0, [fp, #12]
 8023548:	42a8      	cmp	r0, r5
 802354a:	dd27      	ble.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802354c:	9803      	ldr	r0, [sp, #12]
 802354e:	fb05 4400 	mla	r4, r5, r0, r4
 8023552:	9d04      	ldr	r5, [sp, #16]
 8023554:	0860      	lsrs	r0, r4, #1
 8023556:	07e4      	lsls	r4, r4, #31
 8023558:	9c07      	ldr	r4, [sp, #28]
 802355a:	5c28      	ldrb	r0, [r5, r0]
 802355c:	bf54      	ite	pl
 802355e:	f000 000f 	andpl.w	r0, r0, #15
 8023562:	1100      	asrmi	r0, r0, #4
 8023564:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023568:	b2c0      	uxtb	r0, r0
 802356a:	4360      	muls	r0, r4
 802356c:	1c44      	adds	r4, r0, #1
 802356e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 8023572:	4c43      	ldr	r4, [pc, #268]	; (8023680 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8023574:	1200      	asrs	r0, r0, #8
 8023576:	78a5      	ldrb	r5, [r4, #2]
 8023578:	f894 c001 	ldrb.w	ip, [r4, #1]
 802357c:	28ff      	cmp	r0, #255	; 0xff
 802357e:	9505      	str	r5, [sp, #20]
 8023580:	f894 e000 	ldrb.w	lr, [r4]
 8023584:	d112      	bne.n	80235ac <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023586:	f06f 0303 	mvn.w	r3, #3
 802358a:	fb03 f406 	mul.w	r4, r3, r6
 802358e:	f801 e004 	strb.w	lr, [r1, r4]
 8023592:	440c      	add	r4, r1
 8023594:	f884 c001 	strb.w	ip, [r4, #1]
 8023598:	70a5      	strb	r5, [r4, #2]
 802359a:	70e0      	strb	r0, [r4, #3]
 802359c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802359e:	3e01      	subs	r6, #1
 80235a0:	9801      	ldr	r0, [sp, #4]
 80235a2:	441a      	add	r2, r3
 80235a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80235a6:	4418      	add	r0, r3
 80235a8:	9001      	str	r0, [sp, #4]
 80235aa:	e77c      	b.n	80234a6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80235ac:	b2c4      	uxtb	r4, r0
 80235ae:	2800      	cmp	r0, #0
 80235b0:	d0f4      	beq.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80235b2:	f06f 0303 	mvn.w	r3, #3
 80235b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80235ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80235be:	fb03 f806 	mul.w	r8, r3, r6
 80235c2:	eb01 0708 	add.w	r7, r1, r8
 80235c6:	f897 9003 	ldrb.w	r9, [r7, #3]
 80235ca:	fb04 f509 	mul.w	r5, r4, r9
 80235ce:	444c      	add	r4, r9
 80235d0:	1c6b      	adds	r3, r5, #1
 80235d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80235d6:	9b05      	ldr	r3, [sp, #20]
 80235d8:	122d      	asrs	r5, r5, #8
 80235da:	4358      	muls	r0, r3
 80235dc:	1b64      	subs	r4, r4, r5
 80235de:	eba9 0505 	sub.w	r5, r9, r5
 80235e2:	f811 9008 	ldrb.w	r9, [r1, r8]
 80235e6:	b2e4      	uxtb	r4, r4
 80235e8:	fb05 ee09 	mla	lr, r5, r9, lr
 80235ec:	fb9e fef4 	sdiv	lr, lr, r4
 80235f0:	f801 e008 	strb.w	lr, [r1, r8]
 80235f4:	f897 e001 	ldrb.w	lr, [r7, #1]
 80235f8:	f897 9002 	ldrb.w	r9, [r7, #2]
 80235fc:	fb05 cc0e 	mla	ip, r5, lr, ip
 8023600:	fb05 0509 	mla	r5, r5, r9, r0
 8023604:	70fc      	strb	r4, [r7, #3]
 8023606:	fb9c fcf4 	sdiv	ip, ip, r4
 802360a:	fb95 f5f4 	sdiv	r5, r5, r4
 802360e:	f887 c001 	strb.w	ip, [r7, #1]
 8023612:	70bd      	strb	r5, [r7, #2]
 8023614:	e7c2      	b.n	802359c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023616:	b2e5      	uxtb	r5, r4
 8023618:	2c00      	cmp	r4, #0
 802361a:	f43f af39 	beq.w	8023490 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802361e:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 8023622:	fb04 fc0c 	mul.w	ip, r4, ip
 8023626:	4367      	muls	r7, r4
 8023628:	fb05 f608 	mul.w	r6, r5, r8
 802362c:	4445      	add	r5, r8
 802362e:	fb04 f409 	mul.w	r4, r4, r9
 8023632:	1c73      	adds	r3, r6, #1
 8023634:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023638:	1236      	asrs	r6, r6, #8
 802363a:	1bad      	subs	r5, r5, r6
 802363c:	eba8 0606 	sub.w	r6, r8, r6
 8023640:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 8023644:	b2ed      	uxtb	r5, r5
 8023646:	fb06 cc08 	mla	ip, r6, r8, ip
 802364a:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 802364e:	f800 5c01 	strb.w	r5, [r0, #-1]
 8023652:	fb9c fcf5 	sdiv	ip, ip, r5
 8023656:	f800 cc04 	strb.w	ip, [r0, #-4]
 802365a:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 802365e:	fb06 770c 	mla	r7, r6, ip, r7
 8023662:	fb06 4608 	mla	r6, r6, r8, r4
 8023666:	fb97 f7f5 	sdiv	r7, r7, r5
 802366a:	fb96 f6f5 	sdiv	r6, r6, r5
 802366e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8023672:	f800 6c02 	strb.w	r6, [r0, #-2]
 8023676:	e70b      	b.n	8023490 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023678:	b009      	add	sp, #36	; 0x24
 802367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802367e:	bf00      	nop
 8023680:	2400d83c 	.word	0x2400d83c

08023684 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023688:	b089      	sub	sp, #36	; 0x24
 802368a:	469a      	mov	sl, r3
 802368c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023690:	4cb8      	ldr	r4, [pc, #736]	; (8023974 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 8023692:	9102      	str	r1, [sp, #8]
 8023694:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8023696:	9205      	str	r2, [sp, #20]
 8023698:	684a      	ldr	r2, [r1, #4]
 802369a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 802369e:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 80236a2:	fb02 3000 	mla	r0, r2, r0, r3
 80236a6:	680b      	ldr	r3, [r1, #0]
 80236a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80236ac:	f8db 3008 	ldr.w	r3, [fp, #8]
 80236b0:	3301      	adds	r3, #1
 80236b2:	f023 0301 	bic.w	r3, r3, #1
 80236b6:	9303      	str	r3, [sp, #12]
 80236b8:	f8db 3000 	ldr.w	r3, [fp]
 80236bc:	9304      	str	r3, [sp, #16]
 80236be:	9b02      	ldr	r3, [sp, #8]
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	dc03      	bgt.n	80236cc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80236c4:	9b05      	ldr	r3, [sp, #20]
 80236c6:	2b00      	cmp	r3, #0
 80236c8:	f340 8150 	ble.w	802396c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80236cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80236ce:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80236d2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80236d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80236d8:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80236dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80236e0:	9301      	str	r3, [sp, #4]
 80236e2:	f1ba 0f00 	cmp.w	sl, #0
 80236e6:	dd12      	ble.n	802370e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80236e8:	140b      	asrs	r3, r1, #16
 80236ea:	d406      	bmi.n	80236fa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236ec:	42bb      	cmp	r3, r7
 80236ee:	da04      	bge.n	80236fa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236f0:	9b01      	ldr	r3, [sp, #4]
 80236f2:	141b      	asrs	r3, r3, #16
 80236f4:	d401      	bmi.n	80236fa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236f6:	42b3      	cmp	r3, r6
 80236f8:	db0a      	blt.n	8023710 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80236fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80236fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023700:	9a01      	ldr	r2, [sp, #4]
 8023702:	3004      	adds	r0, #4
 8023704:	4419      	add	r1, r3
 8023706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023708:	441a      	add	r2, r3
 802370a:	9201      	str	r2, [sp, #4]
 802370c:	e7e9      	b.n	80236e2 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802370e:	d046      	beq.n	802379e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8023710:	f10a 33ff 	add.w	r3, sl, #4294967295
 8023714:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8023716:	fb05 1503 	mla	r5, r5, r3, r1
 802371a:	142d      	asrs	r5, r5, #16
 802371c:	d436      	bmi.n	802378c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802371e:	42bd      	cmp	r5, r7
 8023720:	da34      	bge.n	802378c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8023722:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023724:	9a01      	ldr	r2, [sp, #4]
 8023726:	fb05 2303 	mla	r3, r5, r3, r2
 802372a:	141b      	asrs	r3, r3, #16
 802372c:	d42e      	bmi.n	802378c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 802372e:	42b3      	cmp	r3, r6
 8023730:	da2c      	bge.n	802378c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 8023732:	1d05      	adds	r5, r0, #4
 8023734:	46d0      	mov	r8, sl
 8023736:	f1b8 0f00 	cmp.w	r8, #0
 802373a:	dd2c      	ble.n	8023796 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802373c:	9b01      	ldr	r3, [sp, #4]
 802373e:	9a03      	ldr	r2, [sp, #12]
 8023740:	141e      	asrs	r6, r3, #16
 8023742:	f894 e000 	ldrb.w	lr, [r4]
 8023746:	140b      	asrs	r3, r1, #16
 8023748:	fb02 3606 	mla	r6, r2, r6, r3
 802374c:	9a04      	ldr	r2, [sp, #16]
 802374e:	0873      	lsrs	r3, r6, #1
 8023750:	5cd3      	ldrb	r3, [r2, r3]
 8023752:	07f2      	lsls	r2, r6, #31
 8023754:	bf54      	ite	pl
 8023756:	f003 030f 	andpl.w	r3, r3, #15
 802375a:	111b      	asrmi	r3, r3, #4
 802375c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023760:	b2db      	uxtb	r3, r3
 8023762:	2bff      	cmp	r3, #255	; 0xff
 8023764:	f040 80c9 	bne.w	80238fa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023768:	f805 ec04 	strb.w	lr, [r5, #-4]
 802376c:	7863      	ldrb	r3, [r4, #1]
 802376e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8023772:	78a3      	ldrb	r3, [r4, #2]
 8023774:	f805 3c02 	strb.w	r3, [r5, #-2]
 8023778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802377a:	3504      	adds	r5, #4
 802377c:	9a01      	ldr	r2, [sp, #4]
 802377e:	f108 38ff 	add.w	r8, r8, #4294967295
 8023782:	4419      	add	r1, r3
 8023784:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023786:	441a      	add	r2, r3
 8023788:	9201      	str	r2, [sp, #4]
 802378a:	e7d4      	b.n	8023736 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802378c:	2500      	movs	r5, #0
 802378e:	eb0a 0305 	add.w	r3, sl, r5
 8023792:	2b00      	cmp	r3, #0
 8023794:	dc41      	bgt.n	802381a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023796:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 802379a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802379e:	9b02      	ldr	r3, [sp, #8]
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f340 80e3 	ble.w	802396c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80237a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80237aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80237b0:	eeb0 6a62 	vmov.f32	s12, s5
 80237b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80237b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80237bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80237c0:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80237c4:	eeb0 6a43 	vmov.f32	s12, s6
 80237c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80237cc:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 80237d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80237d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80237d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80237dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80237e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80237e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80237e8:	ee12 2a90 	vmov	r2, s5
 80237ec:	eef0 2a47 	vmov.f32	s5, s14
 80237f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80237f4:	ee13 2a10 	vmov	r2, s6
 80237f8:	9315      	str	r3, [sp, #84]	; 0x54
 80237fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237fc:	eeb0 3a67 	vmov.f32	s6, s15
 8023800:	fb92 f3f3 	sdiv	r3, r2, r3
 8023804:	9316      	str	r3, [sp, #88]	; 0x58
 8023806:	9b02      	ldr	r3, [sp, #8]
 8023808:	9a05      	ldr	r2, [sp, #20]
 802380a:	3b01      	subs	r3, #1
 802380c:	9302      	str	r3, [sp, #8]
 802380e:	bf08      	it	eq
 8023810:	4692      	moveq	sl, r2
 8023812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023814:	bf18      	it	ne
 8023816:	469a      	movne	sl, r3
 8023818:	e751      	b.n	80236be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802381a:	140e      	asrs	r6, r1, #16
 802381c:	d426      	bmi.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802381e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8023822:	42b3      	cmp	r3, r6
 8023824:	dd22      	ble.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023826:	9b01      	ldr	r3, [sp, #4]
 8023828:	141f      	asrs	r7, r3, #16
 802382a:	d41f      	bmi.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802382c:	f8db 300c 	ldr.w	r3, [fp, #12]
 8023830:	42bb      	cmp	r3, r7
 8023832:	dd1b      	ble.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023834:	9b03      	ldr	r3, [sp, #12]
 8023836:	f894 8000 	ldrb.w	r8, [r4]
 802383a:	fb07 6603 	mla	r6, r7, r3, r6
 802383e:	9f04      	ldr	r7, [sp, #16]
 8023840:	0873      	lsrs	r3, r6, #1
 8023842:	07f6      	lsls	r6, r6, #31
 8023844:	5cfb      	ldrb	r3, [r7, r3]
 8023846:	bf54      	ite	pl
 8023848:	f003 030f 	andpl.w	r3, r3, #15
 802384c:	111b      	asrmi	r3, r3, #4
 802384e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023852:	b2db      	uxtb	r3, r3
 8023854:	2bff      	cmp	r3, #255	; 0xff
 8023856:	d111      	bne.n	802387c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8023858:	f06f 0303 	mvn.w	r3, #3
 802385c:	436b      	muls	r3, r5
 802385e:	f800 8003 	strb.w	r8, [r0, r3]
 8023862:	4403      	add	r3, r0
 8023864:	7866      	ldrb	r6, [r4, #1]
 8023866:	705e      	strb	r6, [r3, #1]
 8023868:	78a6      	ldrb	r6, [r4, #2]
 802386a:	709e      	strb	r6, [r3, #2]
 802386c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802386e:	3d01      	subs	r5, #1
 8023870:	9a01      	ldr	r2, [sp, #4]
 8023872:	4419      	add	r1, r3
 8023874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023876:	441a      	add	r2, r3
 8023878:	9201      	str	r2, [sp, #4]
 802387a:	e788      	b.n	802378e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 802387c:	2b00      	cmp	r3, #0
 802387e:	d0f5      	beq.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023880:	f06f 0203 	mvn.w	r2, #3
 8023884:	78a6      	ldrb	r6, [r4, #2]
 8023886:	fb18 f803 	smulbb	r8, r8, r3
 802388a:	fb02 f905 	mul.w	r9, r2, r5
 802388e:	9606      	str	r6, [sp, #24]
 8023890:	eb00 0c09 	add.w	ip, r0, r9
 8023894:	7866      	ldrb	r6, [r4, #1]
 8023896:	f89c 7003 	ldrb.w	r7, [ip, #3]
 802389a:	9607      	str	r6, [sp, #28]
 802389c:	fb03 f607 	mul.w	r6, r3, r7
 80238a0:	9a07      	ldr	r2, [sp, #28]
 80238a2:	f106 0e01 	add.w	lr, r6, #1
 80238a6:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 80238aa:	18fe      	adds	r6, r7, r3
 80238ac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80238b0:	eba7 070e 	sub.w	r7, r7, lr
 80238b4:	eba6 060e 	sub.w	r6, r6, lr
 80238b8:	f810 e009 	ldrb.w	lr, [r0, r9]
 80238bc:	b2f6      	uxtb	r6, r6
 80238be:	fb07 880e 	mla	r8, r7, lr, r8
 80238c2:	fb98 f8f6 	sdiv	r8, r8, r6
 80238c6:	f800 8009 	strb.w	r8, [r0, r9]
 80238ca:	fb13 f902 	smulbb	r9, r3, r2
 80238ce:	f89c e001 	ldrb.w	lr, [ip, #1]
 80238d2:	9a06      	ldr	r2, [sp, #24]
 80238d4:	fb07 990e 	mla	r9, r7, lr, r9
 80238d8:	f89c e002 	ldrb.w	lr, [ip, #2]
 80238dc:	fb13 f302 	smulbb	r3, r3, r2
 80238e0:	f88c 6003 	strb.w	r6, [ip, #3]
 80238e4:	fb07 330e 	mla	r3, r7, lr, r3
 80238e8:	fb99 f9f6 	sdiv	r9, r9, r6
 80238ec:	fb93 f3f6 	sdiv	r3, r3, r6
 80238f0:	f88c 9001 	strb.w	r9, [ip, #1]
 80238f4:	f88c 3002 	strb.w	r3, [ip, #2]
 80238f8:	e7b8      	b.n	802386c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	f43f af3c 	beq.w	8023778 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8023900:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8023904:	fb1e fe03 	smulbb	lr, lr, r3
 8023908:	78a2      	ldrb	r2, [r4, #2]
 802390a:	fb03 fc09 	mul.w	ip, r3, r9
 802390e:	eb09 0603 	add.w	r6, r9, r3
 8023912:	9206      	str	r2, [sp, #24]
 8023914:	f10c 0701 	add.w	r7, ip, #1
 8023918:	7862      	ldrb	r2, [r4, #1]
 802391a:	eb07 272c 	add.w	r7, r7, ip, asr #8
 802391e:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8023922:	eba9 070c 	sub.w	r7, r9, ip
 8023926:	eba6 060c 	sub.w	r6, r6, ip
 802392a:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 802392e:	fb13 f902 	smulbb	r9, r3, r2
 8023932:	9a06      	ldr	r2, [sp, #24]
 8023934:	b2f6      	uxtb	r6, r6
 8023936:	fb07 ee0c 	mla	lr, r7, ip, lr
 802393a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 802393e:	fb13 f302 	smulbb	r3, r3, r2
 8023942:	f805 6c01 	strb.w	r6, [r5, #-1]
 8023946:	fb07 990c 	mla	r9, r7, ip, r9
 802394a:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 802394e:	fb07 330c 	mla	r3, r7, ip, r3
 8023952:	fb9e fef6 	sdiv	lr, lr, r6
 8023956:	fb99 f9f6 	sdiv	r9, r9, r6
 802395a:	fb93 f3f6 	sdiv	r3, r3, r6
 802395e:	f805 ec04 	strb.w	lr, [r5, #-4]
 8023962:	f805 9c03 	strb.w	r9, [r5, #-3]
 8023966:	f805 3c02 	strb.w	r3, [r5, #-2]
 802396a:	e705      	b.n	8023778 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 802396c:	b009      	add	sp, #36	; 0x24
 802396e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023972:	bf00      	nop
 8023974:	2400d83c 	.word	0x2400d83c

08023978 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8023978:	4770      	bx	lr

0802397a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 802397a:	4770      	bx	lr

0802397c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 802397c:	4770      	bx	lr

0802397e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802397e:	4770      	bx	lr

08023980 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023980:	4770      	bx	lr

08023982 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023982:	4770      	bx	lr

08023984 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023984:	4770      	bx	lr

08023986 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8023986:	4770      	bx	lr

08023988 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023988:	4770      	bx	lr

0802398a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802398a:	4770      	bx	lr

0802398c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802398c:	4770      	bx	lr

0802398e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 802398e:	4770      	bx	lr

08023990 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023990:	4770      	bx	lr

08023992 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023992:	4770      	bx	lr

08023994 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023994:	4770      	bx	lr

08023996 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023996:	4770      	bx	lr

08023998 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023998:	4770      	bx	lr

0802399a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802399a:	4770      	bx	lr

0802399c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802399c:	4770      	bx	lr

0802399e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802399e:	4770      	bx	lr

080239a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80239a0:	4770      	bx	lr

080239a2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80239a2:	4770      	bx	lr

080239a4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80239a4:	4770      	bx	lr

080239a6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80239a6:	4770      	bx	lr

080239a8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80239a8:	4770      	bx	lr

080239aa <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80239aa:	4770      	bx	lr

080239ac <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80239ac:	4770      	bx	lr

080239ae <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80239ae:	4770      	bx	lr

080239b0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80239b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239b4:	b091      	sub	sp, #68	; 0x44
 80239b6:	460f      	mov	r7, r1
 80239b8:	4614      	mov	r4, r2
 80239ba:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80239be:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 80239c2:	f1b8 0f00 	cmp.w	r8, #0
 80239c6:	d054      	beq.n	8023a72 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 80239c8:	6810      	ldr	r0, [r2, #0]
 80239ca:	ae0c      	add	r6, sp, #48	; 0x30
 80239cc:	6851      	ldr	r1, [r2, #4]
 80239ce:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8023ba4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 80239d2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8023ba8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 80239d6:	c603      	stmia	r6!, {r0, r1}
 80239d8:	6818      	ldr	r0, [r3, #0]
 80239da:	ae0e      	add	r6, sp, #56	; 0x38
 80239dc:	6859      	ldr	r1, [r3, #4]
 80239de:	c603      	stmia	r6!, {r0, r1}
 80239e0:	a80c      	add	r0, sp, #48	; 0x30
 80239e2:	f7fa fb39 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239e6:	4621      	mov	r1, r4
 80239e8:	a80e      	add	r0, sp, #56	; 0x38
 80239ea:	f7fa fb5d 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239ee:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80239f2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80239f6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80239fa:	f8d9 0000 	ldr.w	r0, [r9]
 80239fe:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023a02:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8023a06:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 8023a0a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023a0e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8023a12:	440a      	add	r2, r1
 8023a14:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023a18:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023a1c:	4413      	add	r3, r2
 8023a1e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023a22:	6803      	ldr	r3, [r0, #0]
 8023a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a26:	4798      	blx	r3
 8023a28:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023a2c:	d024      	beq.n	8023a78 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 8023a2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023a32:	f8d9 0000 	ldr.w	r0, [r9]
 8023a36:	d022      	beq.n	8023a7e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8023a38:	2102      	movs	r1, #2
 8023a3a:	f04f 0e00 	mov.w	lr, #0
 8023a3e:	f8d0 c000 	ldr.w	ip, [r0]
 8023a42:	b2b6      	uxth	r6, r6
 8023a44:	9106      	str	r1, [sp, #24]
 8023a46:	b2bf      	uxth	r7, r7
 8023a48:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8023a4c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8023a50:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 8023a54:	f8ba 1000 	ldrh.w	r1, [sl]
 8023a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8023a5c:	9601      	str	r6, [sp, #4]
 8023a5e:	9700      	str	r7, [sp, #0]
 8023a60:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8023a64:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023a68:	9102      	str	r1, [sp, #8]
 8023a6a:	4621      	mov	r1, r4
 8023a6c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8023a70:	47a8      	blx	r5
 8023a72:	b011      	add	sp, #68	; 0x44
 8023a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a78:	f010 0f20 	tst.w	r0, #32
 8023a7c:	e7d9      	b.n	8023a32 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 8023a7e:	6803      	ldr	r3, [r0, #0]
 8023a80:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8023a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a86:	4798      	blx	r3
 8023a88:	f8ba c000 	ldrh.w	ip, [sl]
 8023a8c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023a90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023a94:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023a98:	fb0c f606 	mul.w	r6, ip, r6
 8023a9c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023aa0:	fb0c 2303 	mla	r3, ip, r3, r2
 8023aa4:	ebac 0c07 	sub.w	ip, ip, r7
 8023aa8:	eba9 0907 	sub.w	r9, r9, r7
 8023aac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023ab0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023ab4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8023ab8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8023abc:	d148      	bne.n	8023b50 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8023abe:	2d00      	cmp	r5, #0
 8023ac0:	d146      	bne.n	8023b50 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8023ac2:	42b0      	cmp	r0, r6
 8023ac4:	d268      	bcs.n	8023b98 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8023ac6:	eb00 020b 	add.w	r2, r0, fp
 8023aca:	4290      	cmp	r0, r2
 8023acc:	d204      	bcs.n	8023ad8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8023ace:	f854 3b04 	ldr.w	r3, [r4], #4
 8023ad2:	f840 3b04 	str.w	r3, [r0], #4
 8023ad6:	e7f8      	b.n	8023aca <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8023ad8:	4460      	add	r0, ip
 8023ada:	444c      	add	r4, r9
 8023adc:	e7f1      	b.n	8023ac2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 8023ade:	fb04 f70a 	mul.w	r7, r4, sl
 8023ae2:	4454      	add	r4, sl
 8023ae4:	1c7a      	adds	r2, r7, #1
 8023ae6:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8023aea:	1212      	asrs	r2, r2, #8
 8023aec:	ebaa 0702 	sub.w	r7, sl, r2
 8023af0:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8023af4:	1aa4      	subs	r4, r4, r2
 8023af6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8023afa:	fb07 fa0a 	mul.w	sl, r7, sl
 8023afe:	b2e4      	uxtb	r4, r4
 8023b00:	fb05 a202 	mla	r2, r5, r2, sl
 8023b04:	fa5f fa8e 	uxtb.w	sl, lr
 8023b08:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023b0c:	fb07 fa0a 	mul.w	sl, r7, sl
 8023b10:	fb07 fe0e 	mul.w	lr, r7, lr
 8023b14:	fbb2 f2f4 	udiv	r2, r2, r4
 8023b18:	0412      	lsls	r2, r2, #16
 8023b1a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8023b1e:	4611      	mov	r1, r2
 8023b20:	b2da      	uxtb	r2, r3
 8023b22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023b26:	fb05 a202 	mla	r2, r5, r2, sl
 8023b2a:	fb05 e503 	mla	r5, r5, r3, lr
 8023b2e:	fbb2 f2f4 	udiv	r2, r2, r4
 8023b32:	b2d2      	uxtb	r2, r2
 8023b34:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8023b38:	fbb5 f4f4 	udiv	r4, r5, r4
 8023b3c:	0224      	lsls	r4, r4, #8
 8023b3e:	430a      	orrs	r2, r1
 8023b40:	b2a4      	uxth	r4, r4
 8023b42:	4322      	orrs	r2, r4
 8023b44:	6002      	str	r2, [r0, #0]
 8023b46:	e025      	b.n	8023b94 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8023b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b4a:	4460      	add	r0, ip
 8023b4c:	444b      	add	r3, r9
 8023b4e:	461c      	mov	r4, r3
 8023b50:	42b0      	cmp	r0, r6
 8023b52:	d221      	bcs.n	8023b98 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8023b54:	eb00 030b 	add.w	r3, r0, fp
 8023b58:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 8023b5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b5e:	4298      	cmp	r0, r3
 8023b60:	d2f2      	bcs.n	8023b48 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8023b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b64:	f852 3b04 	ldr.w	r3, [r2], #4
 8023b68:	0e1d      	lsrs	r5, r3, #24
 8023b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8023b6c:	fb05 f408 	mul.w	r4, r5, r8
 8023b70:	1c65      	adds	r5, r4, #1
 8023b72:	eb05 2524 	add.w	r5, r5, r4, asr #8
 8023b76:	122d      	asrs	r5, r5, #8
 8023b78:	d00c      	beq.n	8023b94 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8023b7a:	2dff      	cmp	r5, #255	; 0xff
 8023b7c:	b2ec      	uxtb	r4, r5
 8023b7e:	d004      	beq.n	8023b8a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 8023b80:	f8d0 e000 	ldr.w	lr, [r0]
 8023b84:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 8023b88:	d1a9      	bne.n	8023ade <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 8023b8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8023b8e:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 8023b92:	6005      	str	r5, [r0, #0]
 8023b94:	3004      	adds	r0, #4
 8023b96:	e7e1      	b.n	8023b5c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 8023b98:	4b02      	ldr	r3, [pc, #8]	; (8023ba4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 8023b9a:	6818      	ldr	r0, [r3, #0]
 8023b9c:	6803      	ldr	r3, [r0, #0]
 8023b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ba0:	4798      	blx	r3
 8023ba2:	e766      	b.n	8023a72 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8023ba4:	2400d82c 	.word	0x2400d82c
 8023ba8:	2400d826 	.word	0x2400d826

08023bac <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8023bac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023bb0:	2300      	movs	r3, #0
 8023bb2:	9300      	str	r3, [sp, #0]
 8023bb4:	4b3e      	ldr	r3, [pc, #248]	; (8023cb0 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8023bb6:	781b      	ldrb	r3, [r3, #0]
 8023bb8:	2b00      	cmp	r3, #0
 8023bba:	d137      	bne.n	8023c2c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8023bbc:	4a3d      	ldr	r2, [pc, #244]	; (8023cb4 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8023bbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023bc2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	d132      	bne.n	8023c30 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8023bca:	4b3b      	ldr	r3, [pc, #236]	; (8023cb8 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8023bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023bd0:	ac02      	add	r4, sp, #8
 8023bd2:	6808      	ldr	r0, [r1, #0]
 8023bd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023bd8:	ab02      	add	r3, sp, #8
 8023bda:	6849      	ldr	r1, [r1, #4]
 8023bdc:	4d37      	ldr	r5, [pc, #220]	; (8023cbc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8023bde:	c303      	stmia	r3!, {r0, r1}
 8023be0:	4669      	mov	r1, sp
 8023be2:	4620      	mov	r0, r4
 8023be4:	f7fa fa60 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023be8:	4668      	mov	r0, sp
 8023bea:	f7fa fa35 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023bee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8023bf2:	f8bd 2000 	ldrh.w	r2, [sp]
 8023bf6:	462f      	mov	r7, r5
 8023bf8:	6828      	ldr	r0, [r5, #0]
 8023bfa:	4413      	add	r3, r2
 8023bfc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8023c00:	f8ad 3008 	strh.w	r3, [sp, #8]
 8023c04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8023c08:	4413      	add	r3, r2
 8023c0a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8023c0e:	6803      	ldr	r3, [r0, #0]
 8023c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c12:	4798      	blx	r3
 8023c14:	f010 0f01 	tst.w	r0, #1
 8023c18:	d00c      	beq.n	8023c34 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8023c1a:	6828      	ldr	r0, [r5, #0]
 8023c1c:	6803      	ldr	r3, [r0, #0]
 8023c1e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023c24:	4798      	blx	r3
 8023c26:	b004      	add	sp, #16
 8023c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023c2c:	4a22      	ldr	r2, [pc, #136]	; (8023cb8 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8023c2e:	e7c6      	b.n	8023bbe <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8023c30:	4b20      	ldr	r3, [pc, #128]	; (8023cb4 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8023c32:	e7cb      	b.n	8023bcc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8023c34:	6828      	ldr	r0, [r5, #0]
 8023c36:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8023c3a:	6803      	ldr	r3, [r0, #0]
 8023c3c:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8023c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c42:	4798      	blx	r3
 8023c44:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8023c48:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8023c4c:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 8023c50:	fb15 3404 	smlabb	r4, r5, r4, r3
 8023c54:	eba5 0508 	sub.w	r5, r5, r8
 8023c58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8023c5c:	6838      	ldr	r0, [r7, #0]
 8023c5e:	00ad      	lsls	r5, r5, #2
 8023c60:	6803      	ldr	r3, [r0, #0]
 8023c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c64:	4798      	blx	r3
 8023c66:	4b13      	ldr	r3, [pc, #76]	; (8023cb4 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8023c68:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023c6c:	881a      	ldrh	r2, [r3, #0]
 8023c6e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023c72:	4356      	muls	r6, r2
 8023c74:	fb02 1303 	mla	r3, r2, r3, r1
 8023c78:	eba2 0208 	sub.w	r2, r2, r8
 8023c7c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023c80:	0092      	lsls	r2, r2, #2
 8023c82:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8023c86:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8023c8a:	42b0      	cmp	r0, r6
 8023c8c:	d20b      	bcs.n	8023ca6 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8023c8e:	eb00 0c03 	add.w	ip, r0, r3
 8023c92:	4560      	cmp	r0, ip
 8023c94:	d204      	bcs.n	8023ca0 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 8023c96:	f854 1b04 	ldr.w	r1, [r4], #4
 8023c9a:	f840 1b04 	str.w	r1, [r0], #4
 8023c9e:	e7f8      	b.n	8023c92 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 8023ca0:	4410      	add	r0, r2
 8023ca2:	442c      	add	r4, r5
 8023ca4:	e7f1      	b.n	8023c8a <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8023ca6:	6838      	ldr	r0, [r7, #0]
 8023ca8:	6803      	ldr	r3, [r0, #0]
 8023caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cac:	4798      	blx	r3
 8023cae:	e7ba      	b.n	8023c26 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8023cb0:	2400d824 	.word	0x2400d824
 8023cb4:	2400d826 	.word	0x2400d826
 8023cb8:	2400d828 	.word	0x2400d828
 8023cbc:	2400d82c 	.word	0x2400d82c

08023cc0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8023cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cc4:	b089      	sub	sp, #36	; 0x24
 8023cc6:	4607      	mov	r7, r0
 8023cc8:	4689      	mov	r9, r1
 8023cca:	4692      	mov	sl, r2
 8023ccc:	ac08      	add	r4, sp, #32
 8023cce:	461e      	mov	r6, r3
 8023cd0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8023cd4:	4620      	mov	r0, r4
 8023cd6:	f7fd fa2b 	bl	8021130 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023cda:	683b      	ldr	r3, [r7, #0]
 8023cdc:	4605      	mov	r5, r0
 8023cde:	4620      	mov	r0, r4
 8023ce0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8023ce4:	f7fd f938 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023ce8:	4683      	mov	fp, r0
 8023cea:	4620      	mov	r0, r4
 8023cec:	f7fd f968 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023cf0:	4653      	mov	r3, sl
 8023cf2:	464a      	mov	r2, r9
 8023cf4:	4639      	mov	r1, r7
 8023cf6:	9500      	str	r5, [sp, #0]
 8023cf8:	e9cd b001 	strd	fp, r0, [sp, #4]
 8023cfc:	a806      	add	r0, sp, #24
 8023cfe:	47c0      	blx	r8
 8023d00:	a906      	add	r1, sp, #24
 8023d02:	4630      	mov	r0, r6
 8023d04:	f7fd f80c 	bl	8020d20 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8023d08:	4628      	mov	r0, r5
 8023d0a:	b009      	add	sp, #36	; 0x24
 8023d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023d10 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023d10:	b510      	push	{r4, lr}
 8023d12:	4604      	mov	r4, r0
 8023d14:	2104      	movs	r1, #4
 8023d16:	f008 fe99 	bl	802ca4c <_ZdlPvj>
 8023d1a:	4620      	mov	r0, r4
 8023d1c:	bd10      	pop	{r4, pc}

08023d1e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8023d1e:	b510      	push	{r4, lr}
 8023d20:	4604      	mov	r4, r0
 8023d22:	2104      	movs	r1, #4
 8023d24:	f008 fe92 	bl	802ca4c <_ZdlPvj>
 8023d28:	4620      	mov	r0, r4
 8023d2a:	bd10      	pop	{r4, pc}

08023d2c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023d2c:	b510      	push	{r4, lr}
 8023d2e:	4604      	mov	r4, r0
 8023d30:	2104      	movs	r1, #4
 8023d32:	f008 fe8b 	bl	802ca4c <_ZdlPvj>
 8023d36:	4620      	mov	r0, r4
 8023d38:	bd10      	pop	{r4, pc}

08023d3a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8023d3a:	b510      	push	{r4, lr}
 8023d3c:	4604      	mov	r4, r0
 8023d3e:	2104      	movs	r1, #4
 8023d40:	f008 fe84 	bl	802ca4c <_ZdlPvj>
 8023d44:	4620      	mov	r0, r4
 8023d46:	bd10      	pop	{r4, pc}

08023d48 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023d48:	b510      	push	{r4, lr}
 8023d4a:	4604      	mov	r4, r0
 8023d4c:	2104      	movs	r1, #4
 8023d4e:	f008 fe7d 	bl	802ca4c <_ZdlPvj>
 8023d52:	4620      	mov	r0, r4
 8023d54:	bd10      	pop	{r4, pc}

08023d56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023d56:	b510      	push	{r4, lr}
 8023d58:	4604      	mov	r4, r0
 8023d5a:	2104      	movs	r1, #4
 8023d5c:	f008 fe76 	bl	802ca4c <_ZdlPvj>
 8023d60:	4620      	mov	r0, r4
 8023d62:	bd10      	pop	{r4, pc}

08023d64 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023d64:	b510      	push	{r4, lr}
 8023d66:	4604      	mov	r4, r0
 8023d68:	2104      	movs	r1, #4
 8023d6a:	f008 fe6f 	bl	802ca4c <_ZdlPvj>
 8023d6e:	4620      	mov	r0, r4
 8023d70:	bd10      	pop	{r4, pc}

08023d72 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023d72:	b510      	push	{r4, lr}
 8023d74:	4604      	mov	r4, r0
 8023d76:	2104      	movs	r1, #4
 8023d78:	f008 fe68 	bl	802ca4c <_ZdlPvj>
 8023d7c:	4620      	mov	r0, r4
 8023d7e:	bd10      	pop	{r4, pc}

08023d80 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023d80:	b510      	push	{r4, lr}
 8023d82:	4604      	mov	r4, r0
 8023d84:	2104      	movs	r1, #4
 8023d86:	f008 fe61 	bl	802ca4c <_ZdlPvj>
 8023d8a:	4620      	mov	r0, r4
 8023d8c:	bd10      	pop	{r4, pc}

08023d8e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023d8e:	b510      	push	{r4, lr}
 8023d90:	4604      	mov	r4, r0
 8023d92:	2104      	movs	r1, #4
 8023d94:	f008 fe5a 	bl	802ca4c <_ZdlPvj>
 8023d98:	4620      	mov	r0, r4
 8023d9a:	bd10      	pop	{r4, pc}

08023d9c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023d9c:	b510      	push	{r4, lr}
 8023d9e:	4604      	mov	r4, r0
 8023da0:	2104      	movs	r1, #4
 8023da2:	f008 fe53 	bl	802ca4c <_ZdlPvj>
 8023da6:	4620      	mov	r0, r4
 8023da8:	bd10      	pop	{r4, pc}

08023daa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8023daa:	b510      	push	{r4, lr}
 8023dac:	4604      	mov	r4, r0
 8023dae:	2104      	movs	r1, #4
 8023db0:	f008 fe4c 	bl	802ca4c <_ZdlPvj>
 8023db4:	4620      	mov	r0, r4
 8023db6:	bd10      	pop	{r4, pc}

08023db8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8023db8:	b510      	push	{r4, lr}
 8023dba:	4604      	mov	r4, r0
 8023dbc:	2104      	movs	r1, #4
 8023dbe:	f008 fe45 	bl	802ca4c <_ZdlPvj>
 8023dc2:	4620      	mov	r0, r4
 8023dc4:	bd10      	pop	{r4, pc}

08023dc6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023dc6:	b510      	push	{r4, lr}
 8023dc8:	4604      	mov	r4, r0
 8023dca:	2104      	movs	r1, #4
 8023dcc:	f008 fe3e 	bl	802ca4c <_ZdlPvj>
 8023dd0:	4620      	mov	r0, r4
 8023dd2:	bd10      	pop	{r4, pc}

08023dd4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023dd4:	b510      	push	{r4, lr}
 8023dd6:	4604      	mov	r4, r0
 8023dd8:	2104      	movs	r1, #4
 8023dda:	f008 fe37 	bl	802ca4c <_ZdlPvj>
 8023dde:	4620      	mov	r0, r4
 8023de0:	bd10      	pop	{r4, pc}

08023de2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8023de2:	b510      	push	{r4, lr}
 8023de4:	4604      	mov	r4, r0
 8023de6:	2104      	movs	r1, #4
 8023de8:	f008 fe30 	bl	802ca4c <_ZdlPvj>
 8023dec:	4620      	mov	r0, r4
 8023dee:	bd10      	pop	{r4, pc}

08023df0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8023df0:	b510      	push	{r4, lr}
 8023df2:	4604      	mov	r4, r0
 8023df4:	2104      	movs	r1, #4
 8023df6:	f008 fe29 	bl	802ca4c <_ZdlPvj>
 8023dfa:	4620      	mov	r0, r4
 8023dfc:	bd10      	pop	{r4, pc}

08023dfe <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023dfe:	b510      	push	{r4, lr}
 8023e00:	4604      	mov	r4, r0
 8023e02:	2104      	movs	r1, #4
 8023e04:	f008 fe22 	bl	802ca4c <_ZdlPvj>
 8023e08:	4620      	mov	r0, r4
 8023e0a:	bd10      	pop	{r4, pc}

08023e0c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8023e0c:	b510      	push	{r4, lr}
 8023e0e:	4604      	mov	r4, r0
 8023e10:	2104      	movs	r1, #4
 8023e12:	f008 fe1b 	bl	802ca4c <_ZdlPvj>
 8023e16:	4620      	mov	r0, r4
 8023e18:	bd10      	pop	{r4, pc}

08023e1a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8023e1a:	b510      	push	{r4, lr}
 8023e1c:	4604      	mov	r4, r0
 8023e1e:	2104      	movs	r1, #4
 8023e20:	f008 fe14 	bl	802ca4c <_ZdlPvj>
 8023e24:	4620      	mov	r0, r4
 8023e26:	bd10      	pop	{r4, pc}

08023e28 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8023e28:	b510      	push	{r4, lr}
 8023e2a:	4604      	mov	r4, r0
 8023e2c:	2104      	movs	r1, #4
 8023e2e:	f008 fe0d 	bl	802ca4c <_ZdlPvj>
 8023e32:	4620      	mov	r0, r4
 8023e34:	bd10      	pop	{r4, pc}

08023e36 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8023e36:	b510      	push	{r4, lr}
 8023e38:	4604      	mov	r4, r0
 8023e3a:	2104      	movs	r1, #4
 8023e3c:	f008 fe06 	bl	802ca4c <_ZdlPvj>
 8023e40:	4620      	mov	r0, r4
 8023e42:	bd10      	pop	{r4, pc}

08023e44 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8023e44:	b510      	push	{r4, lr}
 8023e46:	4604      	mov	r4, r0
 8023e48:	2104      	movs	r1, #4
 8023e4a:	f008 fdff 	bl	802ca4c <_ZdlPvj>
 8023e4e:	4620      	mov	r0, r4
 8023e50:	bd10      	pop	{r4, pc}

08023e52 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8023e52:	b510      	push	{r4, lr}
 8023e54:	4604      	mov	r4, r0
 8023e56:	2104      	movs	r1, #4
 8023e58:	f008 fdf8 	bl	802ca4c <_ZdlPvj>
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	bd10      	pop	{r4, pc}

08023e60 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8023e60:	b510      	push	{r4, lr}
 8023e62:	4604      	mov	r4, r0
 8023e64:	2104      	movs	r1, #4
 8023e66:	f008 fdf1 	bl	802ca4c <_ZdlPvj>
 8023e6a:	4620      	mov	r0, r4
 8023e6c:	bd10      	pop	{r4, pc}

08023e6e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8023e6e:	b510      	push	{r4, lr}
 8023e70:	4604      	mov	r4, r0
 8023e72:	2104      	movs	r1, #4
 8023e74:	f008 fdea 	bl	802ca4c <_ZdlPvj>
 8023e78:	4620      	mov	r0, r4
 8023e7a:	bd10      	pop	{r4, pc}

08023e7c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8023e7c:	b510      	push	{r4, lr}
 8023e7e:	4604      	mov	r4, r0
 8023e80:	2104      	movs	r1, #4
 8023e82:	f008 fde3 	bl	802ca4c <_ZdlPvj>
 8023e86:	4620      	mov	r0, r4
 8023e88:	bd10      	pop	{r4, pc}

08023e8a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8023e8a:	b510      	push	{r4, lr}
 8023e8c:	4604      	mov	r4, r0
 8023e8e:	2104      	movs	r1, #4
 8023e90:	f008 fddc 	bl	802ca4c <_ZdlPvj>
 8023e94:	4620      	mov	r0, r4
 8023e96:	bd10      	pop	{r4, pc}

08023e98 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8023e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e9a:	4606      	mov	r6, r0
 8023e9c:	b087      	sub	sp, #28
 8023e9e:	4615      	mov	r5, r2
 8023ea0:	461f      	mov	r7, r3
 8023ea2:	b353      	cbz	r3, 8023efa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023ea4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	dd26      	ble.n	8023efa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023eac:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	dd22      	ble.n	8023efa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023eb4:	6808      	ldr	r0, [r1, #0]
 8023eb6:	aa04      	add	r2, sp, #16
 8023eb8:	6849      	ldr	r1, [r1, #4]
 8023eba:	4c1b      	ldr	r4, [pc, #108]	; (8023f28 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8023ebc:	c203      	stmia	r2!, {r0, r1}
 8023ebe:	a804      	add	r0, sp, #16
 8023ec0:	f7fa f8ca 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023ec4:	6820      	ldr	r0, [r4, #0]
 8023ec6:	6803      	ldr	r3, [r0, #0]
 8023ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023eca:	4798      	blx	r3
 8023ecc:	2fff      	cmp	r7, #255	; 0xff
 8023ece:	d016      	beq.n	8023efe <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8023ed0:	f010 0f08 	tst.w	r0, #8
 8023ed4:	6820      	ldr	r0, [r4, #0]
 8023ed6:	d015      	beq.n	8023f04 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8023ed8:	2400      	movs	r4, #0
 8023eda:	6801      	ldr	r1, [r0, #0]
 8023edc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023ee0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023ee4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8023ee8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8023eec:	9401      	str	r4, [sp, #4]
 8023eee:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023ef2:	9400      	str	r4, [sp, #0]
 8023ef4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8023ef6:	4629      	mov	r1, r5
 8023ef8:	47a0      	blx	r4
 8023efa:	b007      	add	sp, #28
 8023efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023efe:	f010 0f02 	tst.w	r0, #2
 8023f02:	e7e7      	b.n	8023ed4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8023f04:	6803      	ldr	r3, [r0, #0]
 8023f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f08:	4798      	blx	r3
 8023f0a:	4b08      	ldr	r3, [pc, #32]	; (8023f2c <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8023f0c:	4601      	mov	r1, r0
 8023f0e:	4630      	mov	r0, r6
 8023f10:	881a      	ldrh	r2, [r3, #0]
 8023f12:	6833      	ldr	r3, [r6, #0]
 8023f14:	e9cd 5700 	strd	r5, r7, [sp]
 8023f18:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8023f1a:	ab04      	add	r3, sp, #16
 8023f1c:	47a8      	blx	r5
 8023f1e:	6820      	ldr	r0, [r4, #0]
 8023f20:	6803      	ldr	r3, [r0, #0]
 8023f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023f24:	4798      	blx	r3
 8023f26:	e7e8      	b.n	8023efa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8023f28:	2400d82c 	.word	0x2400d82c
 8023f2c:	2400d826 	.word	0x2400d826

08023f30 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8023f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f34:	b08d      	sub	sp, #52	; 0x34
 8023f36:	469b      	mov	fp, r3
 8023f38:	4617      	mov	r7, r2
 8023f3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8023f3e:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 8023f42:	4605      	mov	r5, r0
 8023f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8023f48:	a806      	add	r0, sp, #24
 8023f4a:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 8023f4e:	460c      	mov	r4, r1
 8023f50:	4659      	mov	r1, fp
 8023f52:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023f56:	f8ad 301a 	strh.w	r3, [sp, #26]
 8023f5a:	f8ad a01c 	strh.w	sl, [sp, #28]
 8023f5e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8023f62:	f7f4 fbe5 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 8023f66:	4639      	mov	r1, r7
 8023f68:	a806      	add	r0, sp, #24
 8023f6a:	f7f4 fbe1 	bl	8018730 <_ZN8touchgfx4RectaNERKS0_>
 8023f6e:	4b74      	ldr	r3, [pc, #464]	; (8024140 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 8023f70:	f8b3 9000 	ldrh.w	r9, [r3]
 8023f74:	4b73      	ldr	r3, [pc, #460]	; (8024144 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8023f76:	fa0f f289 	sxth.w	r2, r9
 8023f7a:	8819      	ldrh	r1, [r3, #0]
 8023f7c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023f80:	b208      	sxth	r0, r1
 8023f82:	2b00      	cmp	r3, #0
 8023f84:	da07      	bge.n	8023f96 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8023f86:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8023f8a:	443b      	add	r3, r7
 8023f8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023f90:	2300      	movs	r3, #0
 8023f92:	f8ad 3018 	strh.w	r3, [sp, #24]
 8023f96:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8023f9a:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8023f9e:	1ad2      	subs	r2, r2, r3
 8023fa0:	4297      	cmp	r7, r2
 8023fa2:	bfc4      	itt	gt
 8023fa4:	eba9 0203 	subgt.w	r2, r9, r3
 8023fa8:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 8023fac:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8023fb0:	2a00      	cmp	r2, #0
 8023fb2:	da07      	bge.n	8023fc4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8023fb4:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8023fb8:	443a      	add	r2, r7
 8023fba:	f8ad 201e 	strh.w	r2, [sp, #30]
 8023fbe:	2200      	movs	r2, #0
 8023fc0:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023fc4:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8023fc8:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8023fcc:	1a80      	subs	r0, r0, r2
 8023fce:	4287      	cmp	r7, r0
 8023fd0:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8023fd4:	bfc4      	itt	gt
 8023fd6:	1a88      	subgt	r0, r1, r2
 8023fd8:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 8023fdc:	485a      	ldr	r0, [pc, #360]	; (8024148 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8023fde:	7800      	ldrb	r0, [r0, #0]
 8023fe0:	2800      	cmp	r0, #0
 8023fe2:	f040 8082 	bne.w	80240ea <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ba>
 8023fe6:	454f      	cmp	r7, r9
 8023fe8:	bf14      	ite	ne
 8023fea:	f04f 0900 	movne.w	r9, #0
 8023fee:	f04f 0901 	moveq.w	r9, #1
 8023ff2:	2f00      	cmp	r7, #0
 8023ff4:	dd7d      	ble.n	80240f2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8023ff6:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 8023ffa:	f1b8 0f00 	cmp.w	r8, #0
 8023ffe:	dd78      	ble.n	80240f2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8024000:	f8bb 1000 	ldrh.w	r1, [fp]
 8024004:	a808      	add	r0, sp, #32
 8024006:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 802400a:	1a5b      	subs	r3, r3, r1
 802400c:	a90a      	add	r1, sp, #40	; 0x28
 802400e:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
 8024012:	b21b      	sxth	r3, r3
 8024014:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8024018:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 802401c:	9302      	str	r3, [sp, #8]
 802401e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024022:	1ad2      	subs	r2, r2, r3
 8024024:	b213      	sxth	r3, r2
 8024026:	9303      	str	r3, [sp, #12]
 8024028:	9b02      	ldr	r3, [sp, #8]
 802402a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802402e:	9b03      	ldr	r3, [sp, #12]
 8024030:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8024034:	2300      	movs	r3, #0
 8024036:	930a      	str	r3, [sp, #40]	; 0x28
 8024038:	f7fa f836 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802403c:	a806      	add	r0, sp, #24
 802403e:	f7fa f80b 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024042:	a80a      	add	r0, sp, #40	; 0x28
 8024044:	f7fa f808 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024048:	4b40      	ldr	r3, [pc, #256]	; (802414c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 802404a:	4620      	mov	r0, r4
 802404c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8024050:	881a      	ldrh	r2, [r3, #0]
 8024052:	6823      	ldr	r3, [r4, #0]
 8024054:	9205      	str	r2, [sp, #20]
 8024056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024058:	4798      	blx	r3
 802405a:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 802405e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8024062:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8024066:	fb1a 3304 	smlabb	r3, sl, r4, r3
 802406a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802406c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8024070:	4b37      	ldr	r3, [pc, #220]	; (8024150 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8024072:	6818      	ldr	r0, [r3, #0]
 8024074:	9304      	str	r3, [sp, #16]
 8024076:	6801      	ldr	r1, [r0, #0]
 8024078:	6b09      	ldr	r1, [r1, #48]	; 0x30
 802407a:	4788      	blx	r1
 802407c:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8024080:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8024084:	fb0b 1606 	mla	r6, fp, r6, r1
 8024088:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 802408c:	9301      	str	r3, [sp, #4]
 802408e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8024092:	f1b9 0f00 	cmp.w	r9, #0
 8024096:	d135      	bne.n	8024104 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>
 8024098:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802409c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80240a0:	f04f 0900 	mov.w	r9, #0
 80240a4:	ebaa 0a03 	sub.w	sl, sl, r3
 80240a8:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80240ac:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8024150 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>
 80240b0:	9304      	str	r3, [sp, #16]
 80240b2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80240b6:	454b      	cmp	r3, r9
 80240b8:	dd32      	ble.n	8024120 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80240ba:	f8da 0000 	ldr.w	r0, [sl]
 80240be:	4621      	mov	r1, r4
 80240c0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80240c4:	6802      	ldr	r2, [r0, #0]
 80240c6:	009b      	lsls	r3, r3, #2
 80240c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80240ca:	4616      	mov	r6, r2
 80240cc:	9a01      	ldr	r2, [sp, #4]
 80240ce:	47b0      	blx	r6
 80240d0:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 80240d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80240d8:	4294      	cmp	r4, r2
 80240da:	d229      	bcs.n	8024130 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>
 80240dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80240e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80240e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80240e8:	e7f6      	b.n	80240d8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80240ea:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80240ee:	4589      	cmp	r9, r1
 80240f0:	e77a      	b.n	8023fe8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80240f2:	2300      	movs	r3, #0
 80240f4:	802b      	strh	r3, [r5, #0]
 80240f6:	806b      	strh	r3, [r5, #2]
 80240f8:	80ab      	strh	r3, [r5, #4]
 80240fa:	80eb      	strh	r3, [r5, #6]
 80240fc:	4628      	mov	r0, r5
 80240fe:	b00d      	add	sp, #52	; 0x34
 8024100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024104:	4592      	cmp	sl, r2
 8024106:	d1c7      	bne.n	8024098 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x168>
 8024108:	6818      	ldr	r0, [r3, #0]
 802410a:	4621      	mov	r1, r4
 802410c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8024110:	6802      	ldr	r2, [r0, #0]
 8024112:	fb0b f303 	mul.w	r3, fp, r3
 8024116:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 802411a:	009b      	lsls	r3, r3, #2
 802411c:	9a01      	ldr	r2, [sp, #4]
 802411e:	47c8      	blx	r9
 8024120:	9b02      	ldr	r3, [sp, #8]
 8024122:	80af      	strh	r7, [r5, #4]
 8024124:	802b      	strh	r3, [r5, #0]
 8024126:	9b03      	ldr	r3, [sp, #12]
 8024128:	f8a5 8006 	strh.w	r8, [r5, #6]
 802412c:	806b      	strh	r3, [r5, #2]
 802412e:	e7e5      	b.n	80240fc <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 8024130:	9b01      	ldr	r3, [sp, #4]
 8024132:	f109 0901 	add.w	r9, r9, #1
 8024136:	445b      	add	r3, fp
 8024138:	9301      	str	r3, [sp, #4]
 802413a:	9b04      	ldr	r3, [sp, #16]
 802413c:	441c      	add	r4, r3
 802413e:	e7b8      	b.n	80240b2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x182>
 8024140:	2400d820 	.word	0x2400d820
 8024144:	2400d822 	.word	0x2400d822
 8024148:	2400d824 	.word	0x2400d824
 802414c:	2400d826 	.word	0x2400d826
 8024150:	2400d82c 	.word	0x2400d82c

08024154 <_ZN8touchgfx8LCD32bppC1Ev>:
 8024154:	2200      	movs	r2, #0
 8024156:	4910      	ldr	r1, [pc, #64]	; (8024198 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 8024158:	6042      	str	r2, [r0, #4]
 802415a:	6001      	str	r1, [r0, #0]
 802415c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024160:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8024164:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8024168:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802416c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8024170:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8024174:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8024178:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802417c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8024180:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8024184:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8024188:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 802418c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8024190:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8024194:	4770      	bx	lr
 8024196:	bf00      	nop
 8024198:	08030b18 	.word	0x08030b18

0802419c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 802419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241a0:	4604      	mov	r4, r0
 80241a2:	b08f      	sub	sp, #60	; 0x3c
 80241a4:	460d      	mov	r5, r1
 80241a6:	461e      	mov	r6, r3
 80241a8:	2b00      	cmp	r3, #0
 80241aa:	d052      	beq.n	8024252 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 80241ac:	6808      	ldr	r0, [r1, #0]
 80241ae:	ab0a      	add	r3, sp, #40	; 0x28
 80241b0:	6849      	ldr	r1, [r1, #4]
 80241b2:	4f70      	ldr	r7, [pc, #448]	; (8024374 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 80241b4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8024378 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 80241b8:	c303      	stmia	r3!, {r0, r1}
 80241ba:	6810      	ldr	r0, [r2, #0]
 80241bc:	ab0c      	add	r3, sp, #48	; 0x30
 80241be:	6851      	ldr	r1, [r2, #4]
 80241c0:	c303      	stmia	r3!, {r0, r1}
 80241c2:	a80a      	add	r0, sp, #40	; 0x28
 80241c4:	f7f9 ff48 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80241c8:	4629      	mov	r1, r5
 80241ca:	a80c      	add	r0, sp, #48	; 0x30
 80241cc:	f7f9 ff6c 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80241d0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80241d4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80241d8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80241dc:	6838      	ldr	r0, [r7, #0]
 80241de:	fb11 2103 	smlabb	r1, r1, r3, r2
 80241e2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80241e6:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 80241ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80241ee:	440c      	add	r4, r1
 80241f0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80241f4:	440a      	add	r2, r1
 80241f6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80241fa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80241fe:	4413      	add	r3, r2
 8024200:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8024204:	6803      	ldr	r3, [r0, #0]
 8024206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024208:	4798      	blx	r3
 802420a:	2eff      	cmp	r6, #255	; 0xff
 802420c:	d024      	beq.n	8024258 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 802420e:	f010 0f04 	tst.w	r0, #4
 8024212:	6838      	ldr	r0, [r7, #0]
 8024214:	d023      	beq.n	802425e <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8024216:	2100      	movs	r1, #0
 8024218:	f04f 0c02 	mov.w	ip, #2
 802421c:	6807      	ldr	r7, [r0, #0]
 802421e:	b2ad      	uxth	r5, r5
 8024220:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8024224:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8024228:	e9cd c107 	strd	ip, r1, [sp, #28]
 802422c:	f04f 0c01 	mov.w	ip, #1
 8024230:	f8cd c018 	str.w	ip, [sp, #24]
 8024234:	f8b9 c000 	ldrh.w	ip, [r9]
 8024238:	9603      	str	r6, [sp, #12]
 802423a:	9501      	str	r5, [sp, #4]
 802423c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8024240:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8024244:	9102      	str	r1, [sp, #8]
 8024246:	fa1f f188 	uxth.w	r1, r8
 802424a:	9100      	str	r1, [sp, #0]
 802424c:	4621      	mov	r1, r4
 802424e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8024250:	47a8      	blx	r5
 8024252:	b00f      	add	sp, #60	; 0x3c
 8024254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024258:	f010 0f01 	tst.w	r0, #1
 802425c:	e7d9      	b.n	8024212 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 802425e:	6803      	ldr	r3, [r0, #0]
 8024260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024262:	4798      	blx	r3
 8024264:	f8b9 3000 	ldrh.w	r3, [r9]
 8024268:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802426c:	2eff      	cmp	r6, #255	; 0xff
 802426e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8024272:	fb03 f505 	mul.w	r5, r3, r5
 8024276:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 802427a:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 802427e:	fb03 1202 	mla	r2, r3, r2, r1
 8024282:	eba3 0308 	sub.w	r3, r3, r8
 8024286:	eba7 0708 	sub.w	r7, r7, r8
 802428a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802428e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024292:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8024296:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802429a:	d04c      	beq.n	8024336 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 802429c:	42a8      	cmp	r0, r5
 802429e:	d263      	bcs.n	8024368 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 80242a0:	eb00 0e0c 	add.w	lr, r0, ip
 80242a4:	4621      	mov	r1, r4
 80242a6:	4570      	cmp	r0, lr
 80242a8:	460c      	mov	r4, r1
 80242aa:	f101 0103 	add.w	r1, r1, #3
 80242ae:	d23d      	bcs.n	802432c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 80242b0:	6802      	ldr	r2, [r0, #0]
 80242b2:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 80242b6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80242ba:	fb1b fb06 	smulbb	fp, fp, r6
 80242be:	fa5f fa82 	uxtb.w	sl, r2
 80242c2:	fb06 f809 	mul.w	r8, r6, r9
 80242c6:	f108 0401 	add.w	r4, r8, #1
 80242ca:	eb04 2428 	add.w	r4, r4, r8, asr #8
 80242ce:	eb06 0809 	add.w	r8, r6, r9
 80242d2:	1224      	asrs	r4, r4, #8
 80242d4:	eba9 0904 	sub.w	r9, r9, r4
 80242d8:	eba8 0804 	sub.w	r8, r8, r4
 80242dc:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 80242e0:	fb09 fa0a 	mul.w	sl, r9, sl
 80242e4:	fa5f f888 	uxtb.w	r8, r8
 80242e8:	fb04 a406 	mla	r4, r4, r6, sl
 80242ec:	fbb4 f4f8 	udiv	r4, r4, r8
 80242f0:	b2e4      	uxtb	r4, r4
 80242f2:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 80242f6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80242fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80242fe:	fb09 b404 	mla	r4, r9, r4, fp
 8024302:	fbb4 f4f8 	udiv	r4, r4, r8
 8024306:	0424      	lsls	r4, r4, #16
 8024308:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 802430c:	ea4a 0404 	orr.w	r4, sl, r4
 8024310:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8024314:	fb1a fa06 	smulbb	sl, sl, r6
 8024318:	fb09 a202 	mla	r2, r9, r2, sl
 802431c:	fbb2 f2f8 	udiv	r2, r2, r8
 8024320:	0212      	lsls	r2, r2, #8
 8024322:	b292      	uxth	r2, r2
 8024324:	4322      	orrs	r2, r4
 8024326:	f840 2b04 	str.w	r2, [r0], #4
 802432a:	e7bc      	b.n	80242a6 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 802432c:	4418      	add	r0, r3
 802432e:	443c      	add	r4, r7
 8024330:	e7b4      	b.n	802429c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8024332:	4418      	add	r0, r3
 8024334:	443c      	add	r4, r7
 8024336:	42a8      	cmp	r0, r5
 8024338:	d216      	bcs.n	8024368 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 802433a:	eb00 060c 	add.w	r6, r0, ip
 802433e:	4621      	mov	r1, r4
 8024340:	42b0      	cmp	r0, r6
 8024342:	460c      	mov	r4, r1
 8024344:	f101 0103 	add.w	r1, r1, #3
 8024348:	d2f3      	bcs.n	8024332 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 802434a:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 802434e:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8024352:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8024356:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802435a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 802435e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8024362:	f840 2b04 	str.w	r2, [r0], #4
 8024366:	e7eb      	b.n	8024340 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8024368:	4b02      	ldr	r3, [pc, #8]	; (8024374 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 802436a:	6818      	ldr	r0, [r3, #0]
 802436c:	6803      	ldr	r3, [r0, #0]
 802436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024370:	4798      	blx	r3
 8024372:	e76e      	b.n	8024252 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8024374:	2400d82c 	.word	0x2400d82c
 8024378:	2400d826 	.word	0x2400d826

0802437c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 802437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024380:	4607      	mov	r7, r0
 8024382:	b091      	sub	sp, #68	; 0x44
 8024384:	460c      	mov	r4, r1
 8024386:	4698      	mov	r8, r3
 8024388:	2b00      	cmp	r3, #0
 802438a:	d04f      	beq.n	802442c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802438c:	6808      	ldr	r0, [r1, #0]
 802438e:	ab0c      	add	r3, sp, #48	; 0x30
 8024390:	6849      	ldr	r1, [r1, #4]
 8024392:	4e7e      	ldr	r6, [pc, #504]	; (802458c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8024394:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8024590 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8024398:	c303      	stmia	r3!, {r0, r1}
 802439a:	6810      	ldr	r0, [r2, #0]
 802439c:	ab0e      	add	r3, sp, #56	; 0x38
 802439e:	6851      	ldr	r1, [r2, #4]
 80243a0:	c303      	stmia	r3!, {r0, r1}
 80243a2:	a80c      	add	r0, sp, #48	; 0x30
 80243a4:	f7f9 fe58 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80243a8:	4621      	mov	r1, r4
 80243aa:	a80e      	add	r0, sp, #56	; 0x38
 80243ac:	f7f9 fe7c 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80243b0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80243b4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80243b8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80243bc:	6830      	ldr	r0, [r6, #0]
 80243be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80243c2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80243c6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80243ca:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 80243ce:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80243d2:	440a      	add	r2, r1
 80243d4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80243d8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80243dc:	4413      	add	r3, r2
 80243de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80243e2:	6803      	ldr	r3, [r0, #0]
 80243e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80243e6:	4798      	blx	r3
 80243e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80243ec:	d021      	beq.n	8024432 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80243ee:	f010 0f04 	tst.w	r0, #4
 80243f2:	6830      	ldr	r0, [r6, #0]
 80243f4:	d020      	beq.n	8024438 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80243f6:	2100      	movs	r1, #0
 80243f8:	f04f 0c02 	mov.w	ip, #2
 80243fc:	6806      	ldr	r6, [r0, #0]
 80243fe:	b2a4      	uxth	r4, r4
 8024400:	9106      	str	r1, [sp, #24]
 8024402:	b2ad      	uxth	r5, r5
 8024404:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8024408:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802440c:	e9cd c107 	strd	ip, r1, [sp, #28]
 8024410:	f8b9 c000 	ldrh.w	ip, [r9]
 8024414:	f8cd 800c 	str.w	r8, [sp, #12]
 8024418:	9501      	str	r5, [sp, #4]
 802441a:	9400      	str	r4, [sp, #0]
 802441c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8024420:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8024424:	9102      	str	r1, [sp, #8]
 8024426:	4639      	mov	r1, r7
 8024428:	6c34      	ldr	r4, [r6, #64]	; 0x40
 802442a:	47a0      	blx	r4
 802442c:	b011      	add	sp, #68	; 0x44
 802442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024432:	f010 0f01 	tst.w	r0, #1
 8024436:	e7dc      	b.n	80243f2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8024438:	6803      	ldr	r3, [r0, #0]
 802443a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024440:	4798      	blx	r3
 8024442:	f8b9 c000 	ldrh.w	ip, [r9]
 8024446:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802444a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802444e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8024452:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8024456:	fb0c 2303 	mla	r3, ip, r3, r2
 802445a:	ebaa 0a04 	sub.w	sl, sl, r4
 802445e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024462:	fb0c f305 	mul.w	r3, ip, r5
 8024466:	ebac 0c04 	sub.w	ip, ip, r4
 802446a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 802446e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024472:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024476:	d02d      	beq.n	80244d4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8024478:	ea4f 6208 	mov.w	r2, r8, lsl #24
 802447c:	920a      	str	r2, [sp, #40]	; 0x28
 802447e:	4298      	cmp	r0, r3
 8024480:	d27d      	bcs.n	802457e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8024482:	eb00 020b 	add.w	r2, r0, fp
 8024486:	920b      	str	r2, [sp, #44]	; 0x2c
 8024488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802448a:	4290      	cmp	r0, r2
 802448c:	d274      	bcs.n	8024578 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 802448e:	f837 eb02 	ldrh.w	lr, [r7], #2
 8024492:	f850 4b04 	ldr.w	r4, [r0], #4
 8024496:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 802449a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802449e:	ea4f 262e 	mov.w	r6, lr, asr #8
 80244a2:	b2ed      	uxtb	r5, r5
 80244a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80244a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80244ac:	ea5f 6914 	movs.w	r9, r4, lsr #24
 80244b0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80244b4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80244b8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80244bc:	d129      	bne.n	8024512 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 80244be:	0212      	lsls	r2, r2, #8
 80244c0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80244c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80244c6:	4335      	orrs	r5, r6
 80244c8:	4315      	orrs	r5, r2
 80244ca:	f840 5c04 	str.w	r5, [r0, #-4]
 80244ce:	e7db      	b.n	8024488 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 80244d0:	4460      	add	r0, ip
 80244d2:	4457      	add	r7, sl
 80244d4:	4298      	cmp	r0, r3
 80244d6:	d252      	bcs.n	802457e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 80244d8:	eb00 040b 	add.w	r4, r0, fp
 80244dc:	42a0      	cmp	r0, r4
 80244de:	d2f7      	bcs.n	80244d0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 80244e0:	f837 5b02 	ldrh.w	r5, [r7], #2
 80244e4:	10e9      	asrs	r1, r5, #3
 80244e6:	122e      	asrs	r6, r5, #8
 80244e8:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 80244ec:	00ed      	lsls	r5, r5, #3
 80244ee:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80244f2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80244f6:	b2ed      	uxtb	r5, r5
 80244f8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80244fc:	0212      	lsls	r2, r2, #8
 80244fe:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024502:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8024506:	432a      	orrs	r2, r5
 8024508:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 802450c:	f840 2b04 	str.w	r2, [r0], #4
 8024510:	e7e4      	b.n	80244dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8024512:	fb18 f505 	smulbb	r5, r8, r5
 8024516:	fb08 fe09 	mul.w	lr, r8, r9
 802451a:	fb18 f606 	smulbb	r6, r8, r6
 802451e:	fb18 f202 	smulbb	r2, r8, r2
 8024522:	f10e 0101 	add.w	r1, lr, #1
 8024526:	eb01 212e 	add.w	r1, r1, lr, asr #8
 802452a:	eb08 0e09 	add.w	lr, r8, r9
 802452e:	1209      	asrs	r1, r1, #8
 8024530:	eba9 0901 	sub.w	r9, r9, r1
 8024534:	ebae 0e01 	sub.w	lr, lr, r1
 8024538:	b2e1      	uxtb	r1, r4
 802453a:	fa5f fe8e 	uxtb.w	lr, lr
 802453e:	fb09 5101 	mla	r1, r9, r1, r5
 8024542:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8024546:	fb09 6605 	mla	r6, r9, r5, r6
 802454a:	fbb1 f1fe 	udiv	r1, r1, lr
 802454e:	fbb6 f6fe 	udiv	r6, r6, lr
 8024552:	b2c9      	uxtb	r1, r1
 8024554:	0436      	lsls	r6, r6, #16
 8024556:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 802455a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 802455e:	4331      	orrs	r1, r6
 8024560:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8024564:	fb09 2606 	mla	r6, r9, r6, r2
 8024568:	fbb6 f6fe 	udiv	r6, r6, lr
 802456c:	0236      	lsls	r6, r6, #8
 802456e:	b2b6      	uxth	r6, r6
 8024570:	4331      	orrs	r1, r6
 8024572:	f840 1c04 	str.w	r1, [r0, #-4]
 8024576:	e787      	b.n	8024488 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8024578:	4460      	add	r0, ip
 802457a:	4457      	add	r7, sl
 802457c:	e77f      	b.n	802447e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 802457e:	4b03      	ldr	r3, [pc, #12]	; (802458c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8024580:	6818      	ldr	r0, [r3, #0]
 8024582:	6803      	ldr	r3, [r0, #0]
 8024584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024586:	4798      	blx	r3
 8024588:	e750      	b.n	802442c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802458a:	bf00      	nop
 802458c:	2400d82c 	.word	0x2400d82c
 8024590:	2400d826 	.word	0x2400d826

08024594 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024594:	b4f0      	push	{r4, r5, r6, r7}
 8024596:	4616      	mov	r6, r2
 8024598:	461c      	mov	r4, r3
 802459a:	460d      	mov	r5, r1
 802459c:	9a04      	ldr	r2, [sp, #16]
 802459e:	2e01      	cmp	r6, #1
 80245a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80245a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80245a8:	d012      	beq.n	80245d0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80245aa:	d303      	bcc.n	80245b4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80245ac:	2e02      	cmp	r6, #2
 80245ae:	d006      	beq.n	80245be <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 80245b0:	bcf0      	pop	{r4, r5, r6, r7}
 80245b2:	4770      	bx	lr
 80245b4:	4621      	mov	r1, r4
 80245b6:	4628      	mov	r0, r5
 80245b8:	bcf0      	pop	{r4, r5, r6, r7}
 80245ba:	f7ff bedf 	b.w	802437c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80245be:	6805      	ldr	r5, [r0, #0]
 80245c0:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80245c4:	68ed      	ldr	r5, [r5, #12]
 80245c6:	4613      	mov	r3, r2
 80245c8:	4622      	mov	r2, r4
 80245ca:	46ac      	mov	ip, r5
 80245cc:	bcf0      	pop	{r4, r5, r6, r7}
 80245ce:	4760      	bx	ip
 80245d0:	4621      	mov	r1, r4
 80245d2:	4628      	mov	r0, r5
 80245d4:	bcf0      	pop	{r4, r5, r6, r7}
 80245d6:	f7ff bde1 	b.w	802419c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

080245dc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80245dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245e0:	b093      	sub	sp, #76	; 0x4c
 80245e2:	4681      	mov	r9, r0
 80245e4:	460f      	mov	r7, r1
 80245e6:	6810      	ldr	r0, [r2, #0]
 80245e8:	6851      	ldr	r1, [r2, #4]
 80245ea:	ac0e      	add	r4, sp, #56	; 0x38
 80245ec:	4616      	mov	r6, r2
 80245ee:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80245f2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80247a0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 80245f6:	c403      	stmia	r4!, {r0, r1}
 80245f8:	6818      	ldr	r0, [r3, #0]
 80245fa:	ac10      	add	r4, sp, #64	; 0x40
 80245fc:	6859      	ldr	r1, [r3, #4]
 80245fe:	c403      	stmia	r4!, {r0, r1}
 8024600:	a80e      	add	r0, sp, #56	; 0x38
 8024602:	f7f9 fd29 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024606:	4631      	mov	r1, r6
 8024608:	a810      	add	r0, sp, #64	; 0x40
 802460a:	4e64      	ldr	r6, [pc, #400]	; (802479c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 802460c:	f7f9 fd4c 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024610:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024614:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024618:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802461c:	6830      	ldr	r0, [r6, #0]
 802461e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024622:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8024626:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802462a:	4489      	add	r9, r1
 802462c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024630:	440a      	add	r2, r1
 8024632:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024636:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802463a:	4413      	add	r3, r2
 802463c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024640:	6803      	ldr	r3, [r0, #0]
 8024642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024644:	4798      	blx	r3
 8024646:	f010 0f80 	tst.w	r0, #128	; 0x80
 802464a:	6830      	ldr	r0, [r6, #0]
 802464c:	d01f      	beq.n	802468e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 802464e:	2102      	movs	r1, #2
 8024650:	2600      	movs	r6, #0
 8024652:	6802      	ldr	r2, [r0, #0]
 8024654:	b2a4      	uxth	r4, r4
 8024656:	b2ad      	uxth	r5, r5
 8024658:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802465c:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8024660:	210b      	movs	r1, #11
 8024662:	9107      	str	r1, [sp, #28]
 8024664:	f8ba 1000 	ldrh.w	r1, [sl]
 8024668:	9502      	str	r5, [sp, #8]
 802466a:	9106      	str	r1, [sp, #24]
 802466c:	2101      	movs	r1, #1
 802466e:	9401      	str	r4, [sp, #4]
 8024670:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8024674:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024678:	9103      	str	r1, [sp, #12]
 802467a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 802467e:	9100      	str	r1, [sp, #0]
 8024680:	4649      	mov	r1, r9
 8024682:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8024684:	463a      	mov	r2, r7
 8024686:	47a0      	blx	r4
 8024688:	b013      	add	sp, #76	; 0x4c
 802468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802468e:	6803      	ldr	r3, [r0, #0]
 8024690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024692:	4798      	blx	r3
 8024694:	f8ba 3000 	ldrh.w	r3, [sl]
 8024698:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802469c:	f04f 0e04 	mov.w	lr, #4
 80246a0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80246a4:	435d      	muls	r5, r3
 80246a6:	fb03 1202 	mla	r2, r3, r2, r1
 80246aa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80246ae:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80246b2:	920c      	str	r2, [sp, #48]	; 0x30
 80246b4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80246b8:	1b12      	subs	r2, r2, r4
 80246ba:	920d      	str	r2, [sp, #52]	; 0x34
 80246bc:	00a2      	lsls	r2, r4, #2
 80246be:	1b1c      	subs	r4, r3, r4
 80246c0:	920a      	str	r2, [sp, #40]	; 0x28
 80246c2:	00a3      	lsls	r3, r4, #2
 80246c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80246c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80246c8:	4298      	cmp	r0, r3
 80246ca:	d261      	bcs.n	8024790 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80246cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246ce:	eb00 0a03 	add.w	sl, r0, r3
 80246d2:	4550      	cmp	r0, sl
 80246d4:	d257      	bcs.n	8024786 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80246d6:	f819 2b01 	ldrb.w	r2, [r9], #1
 80246da:	fb1e e202 	smlabb	r2, lr, r2, lr
 80246de:	eb07 0c02 	add.w	ip, r7, r2
 80246e2:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80246e6:	fb03 f308 	mul.w	r3, r3, r8
 80246ea:	1c5c      	adds	r4, r3, #1
 80246ec:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80246f0:	1224      	asrs	r4, r4, #8
 80246f2:	2cff      	cmp	r4, #255	; 0xff
 80246f4:	d003      	beq.n	80246fe <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 80246f6:	6803      	ldr	r3, [r0, #0]
 80246f8:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 80246fc:	d10d      	bne.n	802471a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80246fe:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024702:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8024706:	021b      	lsls	r3, r3, #8
 8024708:	5cba      	ldrb	r2, [r7, r2]
 802470a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802470e:	4313      	orrs	r3, r2
 8024710:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8024714:	6004      	str	r4, [r0, #0]
 8024716:	3004      	adds	r0, #4
 8024718:	e7db      	b.n	80246d2 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 802471a:	b2e5      	uxtb	r5, r4
 802471c:	2c00      	cmp	r4, #0
 802471e:	d0fa      	beq.n	8024716 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8024720:	fb05 f10b 	mul.w	r1, r5, fp
 8024724:	445d      	add	r5, fp
 8024726:	5cba      	ldrb	r2, [r7, r2]
 8024728:	1c4e      	adds	r6, r1, #1
 802472a:	eb06 2121 	add.w	r1, r6, r1, asr #8
 802472e:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8024732:	1209      	asrs	r1, r1, #8
 8024734:	1a6d      	subs	r5, r5, r1
 8024736:	ebab 0101 	sub.w	r1, fp, r1
 802473a:	f89c b002 	ldrb.w	fp, [ip, #2]
 802473e:	b2ed      	uxtb	r5, r5
 8024740:	fb04 fb0b 	mul.w	fp, r4, fp
 8024744:	fb01 b606 	mla	r6, r1, r6, fp
 8024748:	fa5f fb83 	uxtb.w	fp, r3
 802474c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024750:	fb01 fb0b 	mul.w	fp, r1, fp
 8024754:	fb04 b202 	mla	r2, r4, r2, fp
 8024758:	fbb6 f6f5 	udiv	r6, r6, r5
 802475c:	fbb2 f2f5 	udiv	r2, r2, r5
 8024760:	0436      	lsls	r6, r6, #16
 8024762:	b2d2      	uxtb	r2, r2
 8024764:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8024768:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802476c:	4316      	orrs	r6, r2
 802476e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024772:	4354      	muls	r4, r2
 8024774:	fb01 4203 	mla	r2, r1, r3, r4
 8024778:	fbb2 f2f5 	udiv	r2, r2, r5
 802477c:	0212      	lsls	r2, r2, #8
 802477e:	b292      	uxth	r2, r2
 8024780:	4316      	orrs	r6, r2
 8024782:	6006      	str	r6, [r0, #0]
 8024784:	e7c7      	b.n	8024716 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8024786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024788:	4418      	add	r0, r3
 802478a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802478c:	4499      	add	r9, r3
 802478e:	e79a      	b.n	80246c6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8024790:	4b02      	ldr	r3, [pc, #8]	; (802479c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024792:	6818      	ldr	r0, [r3, #0]
 8024794:	6803      	ldr	r3, [r0, #0]
 8024796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024798:	4798      	blx	r3
 802479a:	e775      	b.n	8024688 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802479c:	2400d82c 	.word	0x2400d82c
 80247a0:	2400d826 	.word	0x2400d826

080247a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80247a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247a8:	b093      	sub	sp, #76	; 0x4c
 80247aa:	4606      	mov	r6, r0
 80247ac:	4689      	mov	r9, r1
 80247ae:	6810      	ldr	r0, [r2, #0]
 80247b0:	6851      	ldr	r1, [r2, #4]
 80247b2:	ac0e      	add	r4, sp, #56	; 0x38
 80247b4:	4615      	mov	r5, r2
 80247b6:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80247ba:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80249a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 80247be:	c403      	stmia	r4!, {r0, r1}
 80247c0:	6818      	ldr	r0, [r3, #0]
 80247c2:	ac10      	add	r4, sp, #64	; 0x40
 80247c4:	6859      	ldr	r1, [r3, #4]
 80247c6:	c403      	stmia	r4!, {r0, r1}
 80247c8:	a80e      	add	r0, sp, #56	; 0x38
 80247ca:	f7f9 fc45 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80247ce:	4629      	mov	r1, r5
 80247d0:	a810      	add	r0, sp, #64	; 0x40
 80247d2:	f7f9 fc69 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80247d6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80247da:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80247de:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80247e2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80247e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80247ea:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 80247ee:	1875      	adds	r5, r6, r1
 80247f0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80247f4:	4e69      	ldr	r6, [pc, #420]	; (802499c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80247f6:	440a      	add	r2, r1
 80247f8:	6830      	ldr	r0, [r6, #0]
 80247fa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80247fe:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024802:	4413      	add	r3, r2
 8024804:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024808:	6803      	ldr	r3, [r0, #0]
 802480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802480c:	4798      	blx	r3
 802480e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8024812:	d020      	beq.n	8024856 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 8024814:	6830      	ldr	r0, [r6, #0]
 8024816:	2200      	movs	r2, #0
 8024818:	2602      	movs	r6, #2
 802481a:	b2a4      	uxth	r4, r4
 802481c:	6801      	ldr	r1, [r0, #0]
 802481e:	b2bf      	uxth	r7, r7
 8024820:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024824:	e9cd 6208 	strd	r6, r2, [sp, #32]
 8024828:	260b      	movs	r6, #11
 802482a:	9607      	str	r6, [sp, #28]
 802482c:	f8ba 6000 	ldrh.w	r6, [sl]
 8024830:	f8cd 8010 	str.w	r8, [sp, #16]
 8024834:	9702      	str	r7, [sp, #8]
 8024836:	9401      	str	r4, [sp, #4]
 8024838:	e9cd 2605 	strd	r2, r6, [sp, #20]
 802483c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024840:	9203      	str	r2, [sp, #12]
 8024842:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024846:	9200      	str	r2, [sp, #0]
 8024848:	464a      	mov	r2, r9
 802484a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802484c:	4629      	mov	r1, r5
 802484e:	47a0      	blx	r4
 8024850:	b013      	add	sp, #76	; 0x4c
 8024852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024856:	6830      	ldr	r0, [r6, #0]
 8024858:	f109 0904 	add.w	r9, r9, #4
 802485c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024860:	6803      	ldr	r3, [r0, #0]
 8024862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024864:	4798      	blx	r3
 8024866:	f8ba c000 	ldrh.w	ip, [sl]
 802486a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802486e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024872:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024876:	fb0c f707 	mul.w	r7, ip, r7
 802487a:	fb0c 2303 	mla	r3, ip, r3, r2
 802487e:	ebac 0c04 	sub.w	ip, ip, r4
 8024882:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024886:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 802488a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802488e:	eba3 0304 	sub.w	r3, r3, r4
 8024892:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8024896:	930b      	str	r3, [sp, #44]	; 0x2c
 8024898:	d025      	beq.n	80248e6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 802489a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 802489e:	930c      	str	r3, [sp, #48]	; 0x30
 80248a0:	42b8      	cmp	r0, r7
 80248a2:	d274      	bcs.n	802498e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 80248a4:	eb00 030b 	add.w	r3, r0, fp
 80248a8:	930d      	str	r3, [sp, #52]	; 0x34
 80248aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80248ac:	4298      	cmp	r0, r3
 80248ae:	d26a      	bcs.n	8024986 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 80248b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80248b4:	f850 3b04 	ldr.w	r3, [r0], #4
 80248b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80248bc:	0e1c      	lsrs	r4, r3, #24
 80248be:	eb09 0201 	add.w	r2, r9, r1
 80248c2:	f819 6001 	ldrb.w	r6, [r9, r1]
 80248c6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80248ca:	7851      	ldrb	r1, [r2, #1]
 80248cc:	d124      	bne.n	8024918 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 80248ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80248d0:	431e      	orrs	r6, r3
 80248d2:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 80248d6:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 80248da:	f840 1c04 	str.w	r1, [r0, #-4]
 80248de:	e7e4      	b.n	80248aa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 80248e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80248e2:	4460      	add	r0, ip
 80248e4:	441d      	add	r5, r3
 80248e6:	42b8      	cmp	r0, r7
 80248e8:	d251      	bcs.n	802498e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 80248ea:	eb00 010b 	add.w	r1, r0, fp
 80248ee:	4288      	cmp	r0, r1
 80248f0:	d2f6      	bcs.n	80248e0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 80248f2:	f815 2b01 	ldrb.w	r2, [r5], #1
 80248f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248fa:	f819 3002 	ldrb.w	r3, [r9, r2]
 80248fe:	eb09 0402 	add.w	r4, r9, r2
 8024902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8024906:	78a6      	ldrb	r6, [r4, #2]
 8024908:	7862      	ldrb	r2, [r4, #1]
 802490a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802490e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8024912:	f840 3b04 	str.w	r3, [r0], #4
 8024916:	e7ea      	b.n	80248ee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 8024918:	fb18 f606 	smulbb	r6, r8, r6
 802491c:	fb08 fe04 	mul.w	lr, r8, r4
 8024920:	fb18 fa0a 	smulbb	sl, r8, sl
 8024924:	fb18 f101 	smulbb	r1, r8, r1
 8024928:	f10e 0201 	add.w	r2, lr, #1
 802492c:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8024930:	eb08 0e04 	add.w	lr, r8, r4
 8024934:	1212      	asrs	r2, r2, #8
 8024936:	ebae 0e02 	sub.w	lr, lr, r2
 802493a:	1aa2      	subs	r2, r4, r2
 802493c:	b2dc      	uxtb	r4, r3
 802493e:	fa5f fe8e 	uxtb.w	lr, lr
 8024942:	fb02 6604 	mla	r6, r2, r4, r6
 8024946:	f3c3 4407 	ubfx	r4, r3, #16, #8
 802494a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802494e:	fb02 aa04 	mla	sl, r2, r4, sl
 8024952:	fb02 1303 	mla	r3, r2, r3, r1
 8024956:	fbb6 f6fe 	udiv	r6, r6, lr
 802495a:	fbba fafe 	udiv	sl, sl, lr
 802495e:	b2f6      	uxtb	r6, r6
 8024960:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8024964:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8024968:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 802496c:	ea46 060a 	orr.w	r6, r6, sl
 8024970:	fbb3 fafe 	udiv	sl, r3, lr
 8024974:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8024978:	fa1f fa8a 	uxth.w	sl, sl
 802497c:	ea46 060a 	orr.w	r6, r6, sl
 8024980:	f840 6c04 	str.w	r6, [r0, #-4]
 8024984:	e791      	b.n	80248aa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8024986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024988:	4460      	add	r0, ip
 802498a:	441d      	add	r5, r3
 802498c:	e788      	b.n	80248a0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 802498e:	4b03      	ldr	r3, [pc, #12]	; (802499c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8024990:	6818      	ldr	r0, [r3, #0]
 8024992:	6803      	ldr	r3, [r0, #0]
 8024994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024996:	4798      	blx	r3
 8024998:	e75a      	b.n	8024850 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 802499a:	bf00      	nop
 802499c:	2400d82c 	.word	0x2400d82c
 80249a0:	2400d826 	.word	0x2400d826

080249a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80249a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249a8:	b089      	sub	sp, #36	; 0x24
 80249aa:	4605      	mov	r5, r0
 80249ac:	4689      	mov	r9, r1
 80249ae:	6810      	ldr	r0, [r2, #0]
 80249b0:	6851      	ldr	r1, [r2, #4]
 80249b2:	ac04      	add	r4, sp, #16
 80249b4:	4616      	mov	r6, r2
 80249b6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80249ba:	f109 0904 	add.w	r9, r9, #4
 80249be:	c403      	stmia	r4!, {r0, r1}
 80249c0:	6818      	ldr	r0, [r3, #0]
 80249c2:	ac06      	add	r4, sp, #24
 80249c4:	6859      	ldr	r1, [r3, #4]
 80249c6:	c403      	stmia	r4!, {r0, r1}
 80249c8:	a804      	add	r0, sp, #16
 80249ca:	f7f9 fb45 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80249ce:	4631      	mov	r1, r6
 80249d0:	a806      	add	r0, sp, #24
 80249d2:	f7f9 fb69 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80249d6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80249da:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80249de:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80249e2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80249e6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80249ea:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 80249ee:	186e      	adds	r6, r5, r1
 80249f0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80249f4:	440a      	add	r2, r1
 80249f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80249fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80249fe:	4413      	add	r3, r2
 8024a00:	f8ad 301a 	strh.w	r3, [sp, #26]
 8024a04:	4b57      	ldr	r3, [pc, #348]	; (8024b64 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024a06:	6818      	ldr	r0, [r3, #0]
 8024a08:	6803      	ldr	r3, [r0, #0]
 8024a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024a0c:	4798      	blx	r3
 8024a0e:	4b56      	ldr	r3, [pc, #344]	; (8024b68 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8024a10:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8024a14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024a18:	f8b3 c000 	ldrh.w	ip, [r3]
 8024a1c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8024a20:	fb0a fa0c 	mul.w	sl, sl, ip
 8024a24:	fb0c 2303 	mla	r3, ip, r3, r2
 8024a28:	ebac 0c0b 	sub.w	ip, ip, fp
 8024a2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024a30:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8024a34:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8024a38:	eba3 030b 	sub.w	r3, r3, fp
 8024a3c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8024a40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8024a44:	9301      	str	r3, [sp, #4]
 8024a46:	d02e      	beq.n	8024aa6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8024a48:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8024a4c:	9302      	str	r3, [sp, #8]
 8024a4e:	4550      	cmp	r0, sl
 8024a50:	d27f      	bcs.n	8024b52 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8024a52:	eb00 030b 	add.w	r3, r0, fp
 8024a56:	9303      	str	r3, [sp, #12]
 8024a58:	9b03      	ldr	r3, [sp, #12]
 8024a5a:	4298      	cmp	r0, r3
 8024a5c:	d275      	bcs.n	8024b4a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 8024a5e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8024a62:	6802      	ldr	r2, [r0, #0]
 8024a64:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8024a68:	0e17      	lsrs	r7, r2, #24
 8024a6a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8024a6e:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8024a72:	ea4f 2521 	mov.w	r5, r1, asr #8
 8024a76:	b2e4      	uxtb	r4, r4
 8024a78:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024a7c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024a80:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024a84:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8024a88:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024a8c:	d12c      	bne.n	8024ae8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 8024a8e:	021b      	lsls	r3, r3, #8
 8024a90:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8024a94:	9b02      	ldr	r3, [sp, #8]
 8024a96:	432c      	orrs	r4, r5
 8024a98:	431c      	orrs	r4, r3
 8024a9a:	6004      	str	r4, [r0, #0]
 8024a9c:	3004      	adds	r0, #4
 8024a9e:	e7db      	b.n	8024a58 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8024aa0:	9b01      	ldr	r3, [sp, #4]
 8024aa2:	4460      	add	r0, ip
 8024aa4:	441e      	add	r6, r3
 8024aa6:	4550      	cmp	r0, sl
 8024aa8:	d253      	bcs.n	8024b52 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8024aaa:	eb00 020b 	add.w	r2, r0, fp
 8024aae:	4290      	cmp	r0, r2
 8024ab0:	d2f6      	bcs.n	8024aa0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8024ab2:	f816 3b01 	ldrb.w	r3, [r6], #1
 8024ab6:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 8024aba:	10e9      	asrs	r1, r5, #3
 8024abc:	122c      	asrs	r4, r5, #8
 8024abe:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8024ac2:	00e9      	lsls	r1, r5, #3
 8024ac4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024ac8:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8024acc:	b2c9      	uxtb	r1, r1
 8024ace:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024ad2:	021b      	lsls	r3, r3, #8
 8024ad4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8024ad8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8024adc:	430b      	orrs	r3, r1
 8024ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8024ae2:	f840 3b04 	str.w	r3, [r0], #4
 8024ae6:	e7e2      	b.n	8024aae <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8024ae8:	fb18 f404 	smulbb	r4, r8, r4
 8024aec:	fb08 fe07 	mul.w	lr, r8, r7
 8024af0:	fb18 f505 	smulbb	r5, r8, r5
 8024af4:	fb18 f303 	smulbb	r3, r8, r3
 8024af8:	f10e 0101 	add.w	r1, lr, #1
 8024afc:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8024b00:	eb08 0e07 	add.w	lr, r8, r7
 8024b04:	1209      	asrs	r1, r1, #8
 8024b06:	ebae 0e01 	sub.w	lr, lr, r1
 8024b0a:	1a79      	subs	r1, r7, r1
 8024b0c:	b2d7      	uxtb	r7, r2
 8024b0e:	fa5f fe8e 	uxtb.w	lr, lr
 8024b12:	fb01 4707 	mla	r7, r1, r7, r4
 8024b16:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8024b1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024b1e:	fb01 5504 	mla	r5, r1, r4, r5
 8024b22:	fb01 3202 	mla	r2, r1, r2, r3
 8024b26:	fbb7 f7fe 	udiv	r7, r7, lr
 8024b2a:	fbb5 f5fe 	udiv	r5, r5, lr
 8024b2e:	b2ff      	uxtb	r7, r7
 8024b30:	042d      	lsls	r5, r5, #16
 8024b32:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 8024b36:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8024b3a:	432f      	orrs	r7, r5
 8024b3c:	fbb2 f5fe 	udiv	r5, r2, lr
 8024b40:	022d      	lsls	r5, r5, #8
 8024b42:	b2ad      	uxth	r5, r5
 8024b44:	432f      	orrs	r7, r5
 8024b46:	6007      	str	r7, [r0, #0]
 8024b48:	e7a8      	b.n	8024a9c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8024b4a:	9b01      	ldr	r3, [sp, #4]
 8024b4c:	4460      	add	r0, ip
 8024b4e:	441e      	add	r6, r3
 8024b50:	e77d      	b.n	8024a4e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 8024b52:	4b04      	ldr	r3, [pc, #16]	; (8024b64 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8024b54:	6818      	ldr	r0, [r3, #0]
 8024b56:	6803      	ldr	r3, [r0, #0]
 8024b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b5a:	4798      	blx	r3
 8024b5c:	b009      	add	sp, #36	; 0x24
 8024b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b62:	bf00      	nop
 8024b64:	2400d82c 	.word	0x2400d82c
 8024b68:	2400d826 	.word	0x2400d826

08024b6c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8024b6c:	b430      	push	{r4, r5}
 8024b6e:	780d      	ldrb	r5, [r1, #0]
 8024b70:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8024b74:	2d01      	cmp	r5, #1
 8024b76:	d00a      	beq.n	8024b8e <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8024b78:	d305      	bcc.n	8024b86 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8024b7a:	2d02      	cmp	r5, #2
 8024b7c:	d10b      	bne.n	8024b96 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8024b7e:	9402      	str	r4, [sp, #8]
 8024b80:	bc30      	pop	{r4, r5}
 8024b82:	f7ff bf0f 	b.w	80249a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8024b86:	9402      	str	r4, [sp, #8]
 8024b88:	bc30      	pop	{r4, r5}
 8024b8a:	f7ff bd27 	b.w	80245dc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8024b8e:	9402      	str	r4, [sp, #8]
 8024b90:	bc30      	pop	{r4, r5}
 8024b92:	f7ff be07 	b.w	80247a4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8024b96:	bc30      	pop	{r4, r5}
 8024b98:	4770      	bx	lr

08024b9a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8024b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024b9e:	b085      	sub	sp, #20
 8024ba0:	4606      	mov	r6, r0
 8024ba2:	460c      	mov	r4, r1
 8024ba4:	4691      	mov	r9, r2
 8024ba6:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8024baa:	4698      	mov	r8, r3
 8024bac:	b1d5      	cbz	r5, 8024be4 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024bae:	4608      	mov	r0, r1
 8024bb0:	f7fc f9d2 	bl	8020f58 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8024bb4:	4607      	mov	r7, r0
 8024bb6:	4620      	mov	r0, r4
 8024bb8:	f7fc fa02 	bl	8020fc0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8024bbc:	f8ad 000e 	strh.w	r0, [sp, #14]
 8024bc0:	4620      	mov	r0, r4
 8024bc2:	f8ad 9008 	strh.w	r9, [sp, #8]
 8024bc6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024bca:	f8ad 700c 	strh.w	r7, [sp, #12]
 8024bce:	f7fc fb33 	bl	8021238 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024bd2:	b950      	cbnz	r0, 8024bea <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8024bd4:	4620      	mov	r0, r4
 8024bd6:	f7fc faab 	bl	8021130 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024bda:	462b      	mov	r3, r5
 8024bdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024bde:	a902      	add	r1, sp, #8
 8024be0:	f7ff fbcc 	bl	802437c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8024be4:	b005      	add	sp, #20
 8024be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024bea:	2801      	cmp	r0, #1
 8024bec:	d108      	bne.n	8024c00 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8024bee:	4620      	mov	r0, r4
 8024bf0:	f7fc fa9e 	bl	8021130 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024bf4:	462b      	mov	r3, r5
 8024bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024bf8:	a902      	add	r1, sp, #8
 8024bfa:	f7ff facf 	bl	802419c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8024bfe:	e7f1      	b.n	8024be4 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024c00:	2802      	cmp	r0, #2
 8024c02:	d110      	bne.n	8024c26 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8024c04:	6833      	ldr	r3, [r6, #0]
 8024c06:	4620      	mov	r0, r4
 8024c08:	68df      	ldr	r7, [r3, #12]
 8024c0a:	f7fc fa91 	bl	8021130 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c0e:	4680      	mov	r8, r0
 8024c10:	4620      	mov	r0, r4
 8024c12:	f7fc fa55 	bl	80210c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8024c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c18:	aa02      	add	r2, sp, #8
 8024c1a:	4641      	mov	r1, r8
 8024c1c:	e9cd 5000 	strd	r5, r0, [sp]
 8024c20:	4630      	mov	r0, r6
 8024c22:	47b8      	blx	r7
 8024c24:	e7de      	b.n	8024be4 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024c26:	280b      	cmp	r0, #11
 8024c28:	d1dc      	bne.n	8024be4 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8024c2a:	4620      	mov	r0, r4
 8024c2c:	f7fc fa80 	bl	8021130 <_ZNK8touchgfx6Bitmap7getDataEv>
 8024c30:	4606      	mov	r6, r0
 8024c32:	4620      	mov	r0, r4
 8024c34:	f7fc faac 	bl	8021190 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024c38:	9500      	str	r5, [sp, #0]
 8024c3a:	4601      	mov	r1, r0
 8024c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024c3e:	aa02      	add	r2, sp, #8
 8024c40:	4630      	mov	r0, r6
 8024c42:	f7ff ff93 	bl	8024b6c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8024c46:	e7cd      	b.n	8024be4 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

08024c48 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8024c48:	b160      	cbz	r0, 8024c64 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8024c4a:	2903      	cmp	r1, #3
 8024c4c:	d818      	bhi.n	8024c80 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024c4e:	e8df f001 	tbb	[pc, r1]
 8024c52:	1902      	.short	0x1902
 8024c54:	1b06      	.short	0x1b06
 8024c56:	4b0e      	ldr	r3, [pc, #56]	; (8024c90 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024c58:	8818      	ldrh	r0, [r3, #0]
 8024c5a:	4240      	negs	r0, r0
 8024c5c:	4770      	bx	lr
 8024c5e:	4b0c      	ldr	r3, [pc, #48]	; (8024c90 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8024c60:	8818      	ldrh	r0, [r3, #0]
 8024c62:	4770      	bx	lr
 8024c64:	2903      	cmp	r1, #3
 8024c66:	d80b      	bhi.n	8024c80 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8024c68:	a301      	add	r3, pc, #4	; (adr r3, 8024c70 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8024c6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024c6e:	bf00      	nop
 8024c70:	08024c85 	.word	0x08024c85
 8024c74:	08024c5f 	.word	0x08024c5f
 8024c78:	08024c89 	.word	0x08024c89
 8024c7c:	08024c57 	.word	0x08024c57
 8024c80:	2000      	movs	r0, #0
 8024c82:	4770      	bx	lr
 8024c84:	2001      	movs	r0, #1
 8024c86:	4770      	bx	lr
 8024c88:	f04f 30ff 	mov.w	r0, #4294967295
 8024c8c:	4770      	bx	lr
 8024c8e:	bf00      	nop
 8024c90:	2400d826 	.word	0x2400d826

08024c94 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8024c94:	b160      	cbz	r0, 8024cb0 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8024c96:	2903      	cmp	r1, #3
 8024c98:	d818      	bhi.n	8024ccc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8024c9a:	e8df f001 	tbb	[pc, r1]
 8024c9e:	0219      	.short	0x0219
 8024ca0:	051b      	.short	0x051b
 8024ca2:	4b0e      	ldr	r3, [pc, #56]	; (8024cdc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024ca4:	8818      	ldrh	r0, [r3, #0]
 8024ca6:	4770      	bx	lr
 8024ca8:	4b0c      	ldr	r3, [pc, #48]	; (8024cdc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8024caa:	8818      	ldrh	r0, [r3, #0]
 8024cac:	4240      	negs	r0, r0
 8024cae:	4770      	bx	lr
 8024cb0:	2903      	cmp	r1, #3
 8024cb2:	d80b      	bhi.n	8024ccc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8024cb4:	a301      	add	r3, pc, #4	; (adr r3, 8024cbc <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8024cb6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024cba:	bf00      	nop
 8024cbc:	08024ca3 	.word	0x08024ca3
 8024cc0:	08024cd5 	.word	0x08024cd5
 8024cc4:	08024ca9 	.word	0x08024ca9
 8024cc8:	08024cd1 	.word	0x08024cd1
 8024ccc:	2000      	movs	r0, #0
 8024cce:	4770      	bx	lr
 8024cd0:	2001      	movs	r0, #1
 8024cd2:	4770      	bx	lr
 8024cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8024cd8:	4770      	bx	lr
 8024cda:	bf00      	nop
 8024cdc:	2400d826 	.word	0x2400d826

08024ce0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8024ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ce4:	b099      	sub	sp, #100	; 0x64
 8024ce6:	910b      	str	r1, [sp, #44]	; 0x2c
 8024ce8:	a914      	add	r1, sp, #80	; 0x50
 8024cea:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8024cee:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8024cf2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8024cf6:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 8024cfa:	e881 000c 	stmia.w	r1, {r2, r3}
 8024cfe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8024d02:	930a      	str	r3, [sp, #40]	; 0x28
 8024d04:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8024d08:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8024d0c:	9310      	str	r3, [sp, #64]	; 0x40
 8024d0e:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8024d12:	9309      	str	r3, [sp, #36]	; 0x24
 8024d14:	7b4b      	ldrb	r3, [r1, #13]
 8024d16:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8024d1a:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8024d1e:	f891 8006 	ldrb.w	r8, [r1, #6]
 8024d22:	ea58 0800 	orrs.w	r8, r8, r0
 8024d26:	f000 815b 	beq.w	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8024d2a:	011b      	lsls	r3, r3, #4
 8024d2c:	79c8      	ldrb	r0, [r1, #7]
 8024d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024d32:	4303      	orrs	r3, r0
 8024d34:	930d      	str	r3, [sp, #52]	; 0x34
 8024d36:	f000 8153 	beq.w	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8024d3a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8024d3e:	b29b      	uxth	r3, r3
 8024d40:	2f00      	cmp	r7, #0
 8024d42:	f000 80f3 	beq.w	8024f2c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 8024d46:	1aff      	subs	r7, r7, r3
 8024d48:	b2bf      	uxth	r7, r7
 8024d4a:	043d      	lsls	r5, r7, #16
 8024d4c:	d502      	bpl.n	8024d54 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024d4e:	1bf6      	subs	r6, r6, r7
 8024d50:	2700      	movs	r7, #0
 8024d52:	b236      	sxth	r6, r6
 8024d54:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024d58:	fa1f f588 	uxth.w	r5, r8
 8024d5c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8024d60:	428e      	cmp	r6, r1
 8024d62:	b28b      	uxth	r3, r1
 8024d64:	bfbf      	itttt	lt
 8024d66:	18ff      	addlt	r7, r7, r3
 8024d68:	1bbe      	sublt	r6, r7, r6
 8024d6a:	b2b7      	uxthlt	r7, r6
 8024d6c:	460e      	movlt	r6, r1
 8024d6e:	8891      	ldrh	r1, [r2, #4]
 8024d70:	440b      	add	r3, r1
 8024d72:	4631      	mov	r1, r6
 8024d74:	b21b      	sxth	r3, r3
 8024d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d78:	88d3      	ldrh	r3, [r2, #6]
 8024d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d7c:	449a      	add	sl, r3
 8024d7e:	fa0f f38a 	sxth.w	r3, sl
 8024d82:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8024d86:	930e      	str	r3, [sp, #56]	; 0x38
 8024d88:	4bb1      	ldr	r3, [pc, #708]	; (8025050 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8024d8a:	f893 b000 	ldrb.w	fp, [r3]
 8024d8e:	f10b 30ff 	add.w	r0, fp, #4294967295
 8024d92:	4243      	negs	r3, r0
 8024d94:	4143      	adcs	r3, r0
 8024d96:	a814      	add	r0, sp, #80	; 0x50
 8024d98:	930c      	str	r3, [sp, #48]	; 0x30
 8024d9a:	464b      	mov	r3, r9
 8024d9c:	f7f8 ffd7 	bl	801dd4e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024da0:	4631      	mov	r1, r6
 8024da2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8024da6:	464b      	mov	r3, r9
 8024da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024daa:	a814      	add	r0, sp, #80	; 0x50
 8024dac:	f7f8 ffec 	bl	801dd88 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8024db0:	a918      	add	r1, sp, #96	; 0x60
 8024db2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024db6:	a817      	add	r0, sp, #92	; 0x5c
 8024db8:	f7f9 f90c 	bl	801dfd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8024dbc:	f1b9 0f00 	cmp.w	r9, #0
 8024dc0:	f040 80b7 	bne.w	8024f32 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8024dc4:	f1bb 0f01 	cmp.w	fp, #1
 8024dc8:	f040 80bb 	bne.w	8024f42 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 8024dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024dce:	b153      	cbz	r3, 8024de6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8024dd0:	2508      	movs	r5, #8
 8024dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024dd4:	fb95 f3f3 	sdiv	r3, r5, r3
 8024dd8:	1e5d      	subs	r5, r3, #1
 8024dda:	4445      	add	r5, r8
 8024ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8024de0:	fb15 f503 	smulbb	r5, r5, r3
 8024de4:	b2ad      	uxth	r5, r5
 8024de6:	b907      	cbnz	r7, 8024dea <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8024de8:	b16c      	cbz	r4, 8024e06 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8024dea:	fb04 7305 	mla	r3, r4, r5, r7
 8024dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024df0:	ebaa 0a04 	sub.w	sl, sl, r4
 8024df4:	4353      	muls	r3, r2
 8024df6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024df8:	fa1f fa8a 	uxth.w	sl, sl
 8024dfc:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8024e00:	f003 0407 	and.w	r4, r3, #7
 8024e04:	9228      	str	r2, [sp, #160]	; 0xa0
 8024e06:	4649      	mov	r1, r9
 8024e08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024e0a:	f7ff ff1d 	bl	8024c48 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8024e0e:	4683      	mov	fp, r0
 8024e10:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024e12:	f7ff ff3f 	bl	8024c94 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8024e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024e1a:	4681      	mov	r9, r0
 8024e1c:	1a9b      	subs	r3, r3, r2
 8024e1e:	459a      	cmp	sl, r3
 8024e20:	bfa8      	it	ge
 8024e22:	469a      	movge	sl, r3
 8024e24:	f1ba 0f00 	cmp.w	sl, #0
 8024e28:	f340 80da 	ble.w	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8024e2c:	1bf6      	subs	r6, r6, r7
 8024e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024e30:	1b9e      	subs	r6, r3, r6
 8024e32:	4546      	cmp	r6, r8
 8024e34:	bfd4      	ite	le
 8024e36:	ebc7 0706 	rsble	r7, r7, r6
 8024e3a:	ebc7 0708 	rsbgt	r7, r7, r8
 8024e3e:	2f00      	cmp	r7, #0
 8024e40:	f340 80ce 	ble.w	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8024e44:	1bed      	subs	r5, r5, r7
 8024e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e48:	436b      	muls	r3, r5
 8024e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8024e4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024e4e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024e52:	0c1d      	lsrs	r5, r3, #16
 8024e54:	0a1e      	lsrs	r6, r3, #8
 8024e56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8024e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e5e:	2b00      	cmp	r3, #0
 8024e60:	f040 80c3 	bne.w	8024fea <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8024e64:	4b7b      	ldr	r3, [pc, #492]	; (8025054 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8024e66:	6818      	ldr	r0, [r3, #0]
 8024e68:	6803      	ldr	r3, [r0, #0]
 8024e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024e6c:	4798      	blx	r3
 8024e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024e70:	2301      	movs	r3, #1
 8024e72:	4093      	lsls	r3, r2
 8024e74:	4a78      	ldr	r2, [pc, #480]	; (8025058 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8024e76:	3b01      	subs	r3, #1
 8024e78:	8811      	ldrh	r1, [r2, #0]
 8024e7a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8024e7e:	b2db      	uxtb	r3, r3
 8024e80:	930d      	str	r3, [sp, #52]	; 0x34
 8024e82:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8024e86:	fb01 2303 	mla	r3, r1, r3, r2
 8024e8a:	22ff      	movs	r2, #255	; 0xff
 8024e8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024e8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8024e92:	fb92 f2f1 	sdiv	r2, r2, r1
 8024e96:	fb02 f208 	mul.w	r2, r2, r8
 8024e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8024e9c:	9210      	str	r2, [sp, #64]	; 0x40
 8024e9e:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8024ea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024ea4:	fb07 9b1b 	mls	fp, r7, fp, r9
 8024ea8:	920c      	str	r2, [sp, #48]	; 0x30
 8024eaa:	fb02 f907 	mul.w	r9, r2, r7
 8024eae:	b2f2      	uxtb	r2, r6
 8024eb0:	781b      	ldrb	r3, [r3, #0]
 8024eb2:	9211      	str	r2, [sp, #68]	; 0x44
 8024eb4:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8024eb8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024eba:	4123      	asrs	r3, r4
 8024ebc:	b2d2      	uxtb	r2, r2
 8024ebe:	b2db      	uxtb	r3, r3
 8024ec0:	9212      	str	r2, [sp, #72]	; 0x48
 8024ec2:	b2ea      	uxtb	r2, r5
 8024ec4:	9213      	str	r2, [sp, #76]	; 0x4c
 8024ec6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8024eca:	f0c0 80d8 	bcc.w	802507e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8024ece:	46b8      	mov	r8, r7
 8024ed0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8024ed4:	f118 38ff 	adds.w	r8, r8, #4294967295
 8024ed8:	f0c0 80c0 	bcc.w	802505c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8024edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024ede:	401a      	ands	r2, r3
 8024ee0:	d013      	beq.n	8024f0a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8024ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8024ee4:	fb12 f201 	smulbb	r2, r2, r1
 8024ee8:	b292      	uxth	r2, r2
 8024eea:	1c51      	adds	r1, r2, #1
 8024eec:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8024ef0:	1209      	asrs	r1, r1, #8
 8024ef2:	b2ce      	uxtb	r6, r1
 8024ef4:	2eff      	cmp	r6, #255	; 0xff
 8024ef6:	d003      	beq.n	8024f00 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8024ef8:	f8dc 5000 	ldr.w	r5, [ip]
 8024efc:	0e2a      	lsrs	r2, r5, #24
 8024efe:	d176      	bne.n	8024fee <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8024f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8024f06:	f8cc 1000 	str.w	r1, [ip]
 8024f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024f0c:	4414      	add	r4, r2
 8024f0e:	b2a4      	uxth	r4, r4
 8024f10:	2c07      	cmp	r4, #7
 8024f12:	bf89      	itett	hi
 8024f14:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 8024f16:	4113      	asrls	r3, r2
 8024f18:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8024f1a:	2400      	movhi	r4, #0
 8024f1c:	bf89      	itett	hi
 8024f1e:	3201      	addhi	r2, #1
 8024f20:	b2db      	uxtbls	r3, r3
 8024f22:	785b      	ldrbhi	r3, [r3, #1]
 8024f24:	9228      	strhi	r2, [sp, #160]	; 0xa0
 8024f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024f28:	4494      	add	ip, r2
 8024f2a:	e7d3      	b.n	8024ed4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8024f2c:	441e      	add	r6, r3
 8024f2e:	b236      	sxth	r6, r6
 8024f30:	e710      	b.n	8024d54 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8024f32:	f1b9 0f01 	cmp.w	r9, #1
 8024f36:	f47f af49 	bne.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024f3a:	f1bb 0f01 	cmp.w	fp, #1
 8024f3e:	f47f af45 	bne.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024f42:	f8df b110 	ldr.w	fp, [pc, #272]	; 8025054 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8024f46:	f8db 0000 	ldr.w	r0, [fp]
 8024f4a:	6803      	ldr	r3, [r0, #0]
 8024f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024f4e:	4798      	blx	r3
 8024f50:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8024f54:	465a      	mov	r2, fp
 8024f56:	d006      	beq.n	8024f66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8024f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f5a:	2b04      	cmp	r3, #4
 8024f5c:	d143      	bne.n	8024fe6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 8024f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f60:	3300      	adds	r3, #0
 8024f62:	bf18      	it	ne
 8024f64:	2301      	movne	r3, #1
 8024f66:	0581      	lsls	r1, r0, #22
 8024f68:	f140 8092 	bpl.w	8025090 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8024f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024f6e:	2908      	cmp	r1, #8
 8024f70:	f040 808e 	bne.w	8025090 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8024f74:	2b00      	cmp	r3, #0
 8024f76:	bf0c      	ite	eq
 8024f78:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8024f7c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8024f80:	2f00      	cmp	r7, #0
 8024f82:	f47f af23 	bne.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024f86:	2c00      	cmp	r4, #0
 8024f88:	f47f af20 	bne.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024f8c:	eb08 0306 	add.w	r3, r8, r6
 8024f90:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024f92:	4283      	cmp	r3, r0
 8024f94:	f73f af1a 	bgt.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f9c:	4403      	add	r3, r0
 8024f9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024fa0:	4283      	cmp	r3, r0
 8024fa2:	f73f af13 	bgt.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8024fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fa8:	2600      	movs	r6, #0
 8024faa:	6810      	ldr	r0, [r2, #0]
 8024fac:	2b08      	cmp	r3, #8
 8024fae:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8024fb2:	6804      	ldr	r4, [r0, #0]
 8024fb4:	bf18      	it	ne
 8024fb6:	3501      	addne	r5, #1
 8024fb8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8024fbc:	bf18      	it	ne
 8024fbe:	f025 0501 	bicne.w	r5, r5, #1
 8024fc2:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8024fc6:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8024fca:	bf18      	it	ne
 8024fcc:	b2ad      	uxthne	r5, r5
 8024fce:	9104      	str	r1, [sp, #16]
 8024fd0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024fd2:	e9cd 5a00 	strd	r5, sl, [sp]
 8024fd6:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8024fda:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024fdc:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8024fde:	47a0      	blx	r4
 8024fe0:	b019      	add	sp, #100	; 0x64
 8024fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fe6:	2300      	movs	r3, #0
 8024fe8:	e7bd      	b.n	8024f66 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8024fea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024fec:	e73f      	b.n	8024e6e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 8024fee:	2e00      	cmp	r6, #0
 8024ff0:	d08b      	beq.n	8024f0a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8024ff2:	fb06 f102 	mul.w	r1, r6, r2
 8024ff6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024ff8:	f101 0e01 	add.w	lr, r1, #1
 8024ffc:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8025000:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025004:	eba2 090e 	sub.w	r9, r2, lr
 8025008:	4432      	add	r2, r6
 802500a:	eba2 020e 	sub.w	r2, r2, lr
 802500e:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8025012:	b2d1      	uxtb	r1, r2
 8025014:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025016:	4372      	muls	r2, r6
 8025018:	fb09 2e0e 	mla	lr, r9, lr, r2
 802501c:	b2ea      	uxtb	r2, r5
 802501e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8025022:	fb09 f202 	mul.w	r2, r9, r2
 8025026:	fb06 2200 	mla	r2, r6, r0, r2
 802502a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802502c:	fb92 f2f1 	sdiv	r2, r2, r1
 8025030:	4346      	muls	r6, r0
 8025032:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8025036:	fb9e fef1 	sdiv	lr, lr, r1
 802503a:	fb09 6505 	mla	r5, r9, r5, r6
 802503e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 8025042:	fb95 f5f1 	sdiv	r5, r5, r1
 8025046:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 802504a:	f8cc 5000 	str.w	r5, [ip]
 802504e:	e75c      	b.n	8024f0a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8025050:	2400d824 	.word	0x2400d824
 8025054:	2400d82c 	.word	0x2400d82c
 8025058:	2400d826 	.word	0x2400d826
 802505c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802505e:	b152      	cbz	r2, 8025076 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8025060:	4414      	add	r4, r2
 8025062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025064:	b2a4      	uxth	r4, r4
 8025066:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802506a:	f004 0407 	and.w	r4, r4, #7
 802506e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025070:	781b      	ldrb	r3, [r3, #0]
 8025072:	4123      	asrs	r3, r4
 8025074:	b2db      	uxtb	r3, r3
 8025076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025078:	445a      	add	r2, fp
 802507a:	920a      	str	r2, [sp, #40]	; 0x28
 802507c:	e723      	b.n	8024ec6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 802507e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025080:	2b00      	cmp	r3, #0
 8025082:	d1ad      	bne.n	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8025084:	4b05      	ldr	r3, [pc, #20]	; (802509c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 8025086:	6818      	ldr	r0, [r3, #0]
 8025088:	6803      	ldr	r3, [r0, #0]
 802508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802508c:	4798      	blx	r3
 802508e:	e7a7      	b.n	8024fe0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8025090:	2b00      	cmp	r3, #0
 8025092:	f43f ae9b 	beq.w	8024dcc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8025096:	f44f 7180 	mov.w	r1, #256	; 0x100
 802509a:	e771      	b.n	8024f80 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 802509c:	2400d82c 	.word	0x2400d82c

080250a0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80250a0:	b538      	push	{r3, r4, r5, lr}
 80250a2:	4c15      	ldr	r4, [pc, #84]	; (80250f8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80250a4:	4605      	mov	r5, r0
 80250a6:	7823      	ldrb	r3, [r4, #0]
 80250a8:	f3bf 8f5b 	dmb	ish
 80250ac:	07da      	lsls	r2, r3, #31
 80250ae:	d40b      	bmi.n	80250c8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80250b0:	4620      	mov	r0, r4
 80250b2:	f007 fccd 	bl	802ca50 <__cxa_guard_acquire>
 80250b6:	b138      	cbz	r0, 80250c8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80250b8:	4620      	mov	r0, r4
 80250ba:	f007 fcd5 	bl	802ca68 <__cxa_guard_release>
 80250be:	4a0f      	ldr	r2, [pc, #60]	; (80250fc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80250c0:	490f      	ldr	r1, [pc, #60]	; (8025100 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80250c2:	4810      	ldr	r0, [pc, #64]	; (8025104 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80250c4:	f007 fcbd 	bl	802ca42 <__aeabi_atexit>
 80250c8:	4c0f      	ldr	r4, [pc, #60]	; (8025108 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80250ca:	7823      	ldrb	r3, [r4, #0]
 80250cc:	f3bf 8f5b 	dmb	ish
 80250d0:	07db      	lsls	r3, r3, #31
 80250d2:	d40b      	bmi.n	80250ec <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80250d4:	4620      	mov	r0, r4
 80250d6:	f007 fcbb 	bl	802ca50 <__cxa_guard_acquire>
 80250da:	b138      	cbz	r0, 80250ec <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80250dc:	4620      	mov	r0, r4
 80250de:	f007 fcc3 	bl	802ca68 <__cxa_guard_release>
 80250e2:	4a06      	ldr	r2, [pc, #24]	; (80250fc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80250e4:	4909      	ldr	r1, [pc, #36]	; (802510c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80250e6:	480a      	ldr	r0, [pc, #40]	; (8025110 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80250e8:	f007 fcab 	bl	802ca42 <__aeabi_atexit>
 80250ec:	4b05      	ldr	r3, [pc, #20]	; (8025104 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80250ee:	612b      	str	r3, [r5, #16]
 80250f0:	4b07      	ldr	r3, [pc, #28]	; (8025110 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80250f2:	616b      	str	r3, [r5, #20]
 80250f4:	bd38      	pop	{r3, r4, r5, pc}
 80250f6:	bf00      	nop
 80250f8:	2400d904 	.word	0x2400d904
 80250fc:	24000000 	.word	0x24000000
 8025100:	080239ab 	.word	0x080239ab
 8025104:	240005cc 	.word	0x240005cc
 8025108:	2400d908 	.word	0x2400d908
 802510c:	080239a9 	.word	0x080239a9
 8025110:	240005d0 	.word	0x240005d0

08025114 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8025114:	b538      	push	{r3, r4, r5, lr}
 8025116:	4c15      	ldr	r4, [pc, #84]	; (802516c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8025118:	4605      	mov	r5, r0
 802511a:	7823      	ldrb	r3, [r4, #0]
 802511c:	f3bf 8f5b 	dmb	ish
 8025120:	07da      	lsls	r2, r3, #31
 8025122:	d40b      	bmi.n	802513c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8025124:	4620      	mov	r0, r4
 8025126:	f007 fc93 	bl	802ca50 <__cxa_guard_acquire>
 802512a:	b138      	cbz	r0, 802513c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802512c:	4620      	mov	r0, r4
 802512e:	f007 fc9b 	bl	802ca68 <__cxa_guard_release>
 8025132:	4a0f      	ldr	r2, [pc, #60]	; (8025170 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025134:	490f      	ldr	r1, [pc, #60]	; (8025174 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8025136:	4810      	ldr	r0, [pc, #64]	; (8025178 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025138:	f007 fc83 	bl	802ca42 <__aeabi_atexit>
 802513c:	4c0f      	ldr	r4, [pc, #60]	; (802517c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802513e:	7823      	ldrb	r3, [r4, #0]
 8025140:	f3bf 8f5b 	dmb	ish
 8025144:	07db      	lsls	r3, r3, #31
 8025146:	d40b      	bmi.n	8025160 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025148:	4620      	mov	r0, r4
 802514a:	f007 fc81 	bl	802ca50 <__cxa_guard_acquire>
 802514e:	b138      	cbz	r0, 8025160 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025150:	4620      	mov	r0, r4
 8025152:	f007 fc89 	bl	802ca68 <__cxa_guard_release>
 8025156:	4a06      	ldr	r2, [pc, #24]	; (8025170 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025158:	4909      	ldr	r1, [pc, #36]	; (8025180 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802515a:	480a      	ldr	r0, [pc, #40]	; (8025184 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802515c:	f007 fc71 	bl	802ca42 <__aeabi_atexit>
 8025160:	4b05      	ldr	r3, [pc, #20]	; (8025178 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025162:	60ab      	str	r3, [r5, #8]
 8025164:	4b07      	ldr	r3, [pc, #28]	; (8025184 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8025166:	60eb      	str	r3, [r5, #12]
 8025168:	bd38      	pop	{r3, r4, r5, pc}
 802516a:	bf00      	nop
 802516c:	2400d8dc 	.word	0x2400d8dc
 8025170:	24000000 	.word	0x24000000
 8025174:	080239af 	.word	0x080239af
 8025178:	240005a4 	.word	0x240005a4
 802517c:	2400d8e0 	.word	0x2400d8e0
 8025180:	080239ad 	.word	0x080239ad
 8025184:	240005a8 	.word	0x240005a8

08025188 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8025188:	b510      	push	{r4, lr}
 802518a:	4604      	mov	r4, r0
 802518c:	f7ff ff88 	bl	80250a0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8025190:	4620      	mov	r0, r4
 8025192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025196:	f7ff bfbd 	b.w	8025114 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802519c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802519c:	b538      	push	{r3, r4, r5, lr}
 802519e:	4c15      	ldr	r4, [pc, #84]	; (80251f4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80251a0:	4605      	mov	r5, r0
 80251a2:	7823      	ldrb	r3, [r4, #0]
 80251a4:	f3bf 8f5b 	dmb	ish
 80251a8:	07da      	lsls	r2, r3, #31
 80251aa:	d40b      	bmi.n	80251c4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80251ac:	4620      	mov	r0, r4
 80251ae:	f007 fc4f 	bl	802ca50 <__cxa_guard_acquire>
 80251b2:	b138      	cbz	r0, 80251c4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80251b4:	4620      	mov	r0, r4
 80251b6:	f007 fc57 	bl	802ca68 <__cxa_guard_release>
 80251ba:	4a0f      	ldr	r2, [pc, #60]	; (80251f8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80251bc:	490f      	ldr	r1, [pc, #60]	; (80251fc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80251be:	4810      	ldr	r0, [pc, #64]	; (8025200 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80251c0:	f007 fc3f 	bl	802ca42 <__aeabi_atexit>
 80251c4:	4c0f      	ldr	r4, [pc, #60]	; (8025204 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80251c6:	7823      	ldrb	r3, [r4, #0]
 80251c8:	f3bf 8f5b 	dmb	ish
 80251cc:	07db      	lsls	r3, r3, #31
 80251ce:	d40b      	bmi.n	80251e8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80251d0:	4620      	mov	r0, r4
 80251d2:	f007 fc3d 	bl	802ca50 <__cxa_guard_acquire>
 80251d6:	b138      	cbz	r0, 80251e8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80251d8:	4620      	mov	r0, r4
 80251da:	f007 fc45 	bl	802ca68 <__cxa_guard_release>
 80251de:	4a06      	ldr	r2, [pc, #24]	; (80251f8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80251e0:	4909      	ldr	r1, [pc, #36]	; (8025208 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80251e2:	480a      	ldr	r0, [pc, #40]	; (802520c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80251e4:	f007 fc2d 	bl	802ca42 <__aeabi_atexit>
 80251e8:	4b05      	ldr	r3, [pc, #20]	; (8025200 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80251ea:	622b      	str	r3, [r5, #32]
 80251ec:	4b07      	ldr	r3, [pc, #28]	; (802520c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80251ee:	626b      	str	r3, [r5, #36]	; 0x24
 80251f0:	bd38      	pop	{r3, r4, r5, pc}
 80251f2:	bf00      	nop
 80251f4:	2400d90c 	.word	0x2400d90c
 80251f8:	24000000 	.word	0x24000000
 80251fc:	080239a3 	.word	0x080239a3
 8025200:	240005d4 	.word	0x240005d4
 8025204:	2400d910 	.word	0x2400d910
 8025208:	080239a1 	.word	0x080239a1
 802520c:	240005d8 	.word	0x240005d8

08025210 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8025210:	b538      	push	{r3, r4, r5, lr}
 8025212:	4c15      	ldr	r4, [pc, #84]	; (8025268 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025214:	4605      	mov	r5, r0
 8025216:	7823      	ldrb	r3, [r4, #0]
 8025218:	f3bf 8f5b 	dmb	ish
 802521c:	07da      	lsls	r2, r3, #31
 802521e:	d40b      	bmi.n	8025238 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025220:	4620      	mov	r0, r4
 8025222:	f007 fc15 	bl	802ca50 <__cxa_guard_acquire>
 8025226:	b138      	cbz	r0, 8025238 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025228:	4620      	mov	r0, r4
 802522a:	f007 fc1d 	bl	802ca68 <__cxa_guard_release>
 802522e:	4a0f      	ldr	r2, [pc, #60]	; (802526c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025230:	490f      	ldr	r1, [pc, #60]	; (8025270 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8025232:	4810      	ldr	r0, [pc, #64]	; (8025274 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025234:	f007 fc05 	bl	802ca42 <__aeabi_atexit>
 8025238:	4c0f      	ldr	r4, [pc, #60]	; (8025278 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802523a:	7823      	ldrb	r3, [r4, #0]
 802523c:	f3bf 8f5b 	dmb	ish
 8025240:	07db      	lsls	r3, r3, #31
 8025242:	d40b      	bmi.n	802525c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025244:	4620      	mov	r0, r4
 8025246:	f007 fc03 	bl	802ca50 <__cxa_guard_acquire>
 802524a:	b138      	cbz	r0, 802525c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802524c:	4620      	mov	r0, r4
 802524e:	f007 fc0b 	bl	802ca68 <__cxa_guard_release>
 8025252:	4a06      	ldr	r2, [pc, #24]	; (802526c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025254:	4909      	ldr	r1, [pc, #36]	; (802527c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8025256:	480a      	ldr	r0, [pc, #40]	; (8025280 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025258:	f007 fbf3 	bl	802ca42 <__aeabi_atexit>
 802525c:	4b05      	ldr	r3, [pc, #20]	; (8025274 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802525e:	61ab      	str	r3, [r5, #24]
 8025260:	4b07      	ldr	r3, [pc, #28]	; (8025280 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025262:	61eb      	str	r3, [r5, #28]
 8025264:	bd38      	pop	{r3, r4, r5, pc}
 8025266:	bf00      	nop
 8025268:	2400d8e4 	.word	0x2400d8e4
 802526c:	24000000 	.word	0x24000000
 8025270:	080239a7 	.word	0x080239a7
 8025274:	240005ac 	.word	0x240005ac
 8025278:	2400d8e8 	.word	0x2400d8e8
 802527c:	080239a5 	.word	0x080239a5
 8025280:	240005b0 	.word	0x240005b0

08025284 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8025284:	b510      	push	{r4, lr}
 8025286:	4604      	mov	r4, r0
 8025288:	f7ff ff88 	bl	802519c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802528c:	4620      	mov	r0, r4
 802528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025292:	f7ff bfbd 	b.w	8025210 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025298 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025298:	b538      	push	{r3, r4, r5, lr}
 802529a:	4c0b      	ldr	r4, [pc, #44]	; (80252c8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 802529c:	4605      	mov	r5, r0
 802529e:	7823      	ldrb	r3, [r4, #0]
 80252a0:	f3bf 8f5b 	dmb	ish
 80252a4:	07db      	lsls	r3, r3, #31
 80252a6:	d40b      	bmi.n	80252c0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80252a8:	4620      	mov	r0, r4
 80252aa:	f007 fbd1 	bl	802ca50 <__cxa_guard_acquire>
 80252ae:	b138      	cbz	r0, 80252c0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80252b0:	4620      	mov	r0, r4
 80252b2:	f007 fbd9 	bl	802ca68 <__cxa_guard_release>
 80252b6:	4a05      	ldr	r2, [pc, #20]	; (80252cc <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 80252b8:	4905      	ldr	r1, [pc, #20]	; (80252d0 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 80252ba:	4806      	ldr	r0, [pc, #24]	; (80252d4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 80252bc:	f007 fbc1 	bl	802ca42 <__aeabi_atexit>
 80252c0:	4b04      	ldr	r3, [pc, #16]	; (80252d4 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 80252c2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80252c4:	bd38      	pop	{r3, r4, r5, pc}
 80252c6:	bf00      	nop
 80252c8:	2400d91c 	.word	0x2400d91c
 80252cc:	24000000 	.word	0x24000000
 80252d0:	0802399d 	.word	0x0802399d
 80252d4:	240005e4 	.word	0x240005e4

080252d8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80252d8:	b538      	push	{r3, r4, r5, lr}
 80252da:	4c0b      	ldr	r4, [pc, #44]	; (8025308 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 80252dc:	4605      	mov	r5, r0
 80252de:	7823      	ldrb	r3, [r4, #0]
 80252e0:	f3bf 8f5b 	dmb	ish
 80252e4:	07db      	lsls	r3, r3, #31
 80252e6:	d40b      	bmi.n	8025300 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80252e8:	4620      	mov	r0, r4
 80252ea:	f007 fbb1 	bl	802ca50 <__cxa_guard_acquire>
 80252ee:	b138      	cbz	r0, 8025300 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80252f0:	4620      	mov	r0, r4
 80252f2:	f007 fbb9 	bl	802ca68 <__cxa_guard_release>
 80252f6:	4a05      	ldr	r2, [pc, #20]	; (802530c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 80252f8:	4905      	ldr	r1, [pc, #20]	; (8025310 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 80252fa:	4806      	ldr	r0, [pc, #24]	; (8025314 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 80252fc:	f007 fba1 	bl	802ca42 <__aeabi_atexit>
 8025300:	4b04      	ldr	r3, [pc, #16]	; (8025314 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8025302:	62ab      	str	r3, [r5, #40]	; 0x28
 8025304:	bd38      	pop	{r3, r4, r5, pc}
 8025306:	bf00      	nop
 8025308:	2400d8ec 	.word	0x2400d8ec
 802530c:	24000000 	.word	0x24000000
 8025310:	0802399f 	.word	0x0802399f
 8025314:	240005b4 	.word	0x240005b4

08025318 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8025318:	b510      	push	{r4, lr}
 802531a:	4604      	mov	r4, r0
 802531c:	f7ff ffbc 	bl	8025298 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8025320:	4620      	mov	r0, r4
 8025322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025326:	f7ff bfd7 	b.w	80252d8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802532c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802532c:	b538      	push	{r3, r4, r5, lr}
 802532e:	4c15      	ldr	r4, [pc, #84]	; (8025384 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8025330:	4605      	mov	r5, r0
 8025332:	7823      	ldrb	r3, [r4, #0]
 8025334:	f3bf 8f5b 	dmb	ish
 8025338:	07da      	lsls	r2, r3, #31
 802533a:	d40b      	bmi.n	8025354 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802533c:	4620      	mov	r0, r4
 802533e:	f007 fb87 	bl	802ca50 <__cxa_guard_acquire>
 8025342:	b138      	cbz	r0, 8025354 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8025344:	4620      	mov	r0, r4
 8025346:	f007 fb8f 	bl	802ca68 <__cxa_guard_release>
 802534a:	4a0f      	ldr	r2, [pc, #60]	; (8025388 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802534c:	490f      	ldr	r1, [pc, #60]	; (802538c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802534e:	4810      	ldr	r0, [pc, #64]	; (8025390 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8025350:	f007 fb77 	bl	802ca42 <__aeabi_atexit>
 8025354:	4c0f      	ldr	r4, [pc, #60]	; (8025394 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8025356:	7823      	ldrb	r3, [r4, #0]
 8025358:	f3bf 8f5b 	dmb	ish
 802535c:	07db      	lsls	r3, r3, #31
 802535e:	d40b      	bmi.n	8025378 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025360:	4620      	mov	r0, r4
 8025362:	f007 fb75 	bl	802ca50 <__cxa_guard_acquire>
 8025366:	b138      	cbz	r0, 8025378 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8025368:	4620      	mov	r0, r4
 802536a:	f007 fb7d 	bl	802ca68 <__cxa_guard_release>
 802536e:	4a06      	ldr	r2, [pc, #24]	; (8025388 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8025370:	4909      	ldr	r1, [pc, #36]	; (8025398 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8025372:	480a      	ldr	r0, [pc, #40]	; (802539c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8025374:	f007 fb65 	bl	802ca42 <__aeabi_atexit>
 8025378:	4b05      	ldr	r3, [pc, #20]	; (8025390 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802537a:	64ab      	str	r3, [r5, #72]	; 0x48
 802537c:	4b07      	ldr	r3, [pc, #28]	; (802539c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802537e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8025380:	bd38      	pop	{r3, r4, r5, pc}
 8025382:	bf00      	nop
 8025384:	2400d920 	.word	0x2400d920
 8025388:	24000000 	.word	0x24000000
 802538c:	0802398f 	.word	0x0802398f
 8025390:	240005e8 	.word	0x240005e8
 8025394:	2400d924 	.word	0x2400d924
 8025398:	0802398d 	.word	0x0802398d
 802539c:	240005ec 	.word	0x240005ec

080253a0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80253a0:	b538      	push	{r3, r4, r5, lr}
 80253a2:	4c15      	ldr	r4, [pc, #84]	; (80253f8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80253a4:	4605      	mov	r5, r0
 80253a6:	7823      	ldrb	r3, [r4, #0]
 80253a8:	f3bf 8f5b 	dmb	ish
 80253ac:	07da      	lsls	r2, r3, #31
 80253ae:	d40b      	bmi.n	80253c8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80253b0:	4620      	mov	r0, r4
 80253b2:	f007 fb4d 	bl	802ca50 <__cxa_guard_acquire>
 80253b6:	b138      	cbz	r0, 80253c8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80253b8:	4620      	mov	r0, r4
 80253ba:	f007 fb55 	bl	802ca68 <__cxa_guard_release>
 80253be:	4a0f      	ldr	r2, [pc, #60]	; (80253fc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80253c0:	490f      	ldr	r1, [pc, #60]	; (8025400 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80253c2:	4810      	ldr	r0, [pc, #64]	; (8025404 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80253c4:	f007 fb3d 	bl	802ca42 <__aeabi_atexit>
 80253c8:	4c0f      	ldr	r4, [pc, #60]	; (8025408 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80253ca:	7823      	ldrb	r3, [r4, #0]
 80253cc:	f3bf 8f5b 	dmb	ish
 80253d0:	07db      	lsls	r3, r3, #31
 80253d2:	d40b      	bmi.n	80253ec <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80253d4:	4620      	mov	r0, r4
 80253d6:	f007 fb3b 	bl	802ca50 <__cxa_guard_acquire>
 80253da:	b138      	cbz	r0, 80253ec <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80253dc:	4620      	mov	r0, r4
 80253de:	f007 fb43 	bl	802ca68 <__cxa_guard_release>
 80253e2:	4a06      	ldr	r2, [pc, #24]	; (80253fc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80253e4:	4909      	ldr	r1, [pc, #36]	; (802540c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80253e6:	480a      	ldr	r0, [pc, #40]	; (8025410 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80253e8:	f007 fb2b 	bl	802ca42 <__aeabi_atexit>
 80253ec:	4b05      	ldr	r3, [pc, #20]	; (8025404 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80253ee:	642b      	str	r3, [r5, #64]	; 0x40
 80253f0:	4b07      	ldr	r3, [pc, #28]	; (8025410 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80253f2:	646b      	str	r3, [r5, #68]	; 0x44
 80253f4:	bd38      	pop	{r3, r4, r5, pc}
 80253f6:	bf00      	nop
 80253f8:	2400d928 	.word	0x2400d928
 80253fc:	24000000 	.word	0x24000000
 8025400:	08023997 	.word	0x08023997
 8025404:	240005f0 	.word	0x240005f0
 8025408:	2400d92c 	.word	0x2400d92c
 802540c:	08023995 	.word	0x08023995
 8025410:	240005f4 	.word	0x240005f4

08025414 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8025414:	b538      	push	{r3, r4, r5, lr}
 8025416:	4c15      	ldr	r4, [pc, #84]	; (802546c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8025418:	4605      	mov	r5, r0
 802541a:	7823      	ldrb	r3, [r4, #0]
 802541c:	f3bf 8f5b 	dmb	ish
 8025420:	07da      	lsls	r2, r3, #31
 8025422:	d40b      	bmi.n	802543c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8025424:	4620      	mov	r0, r4
 8025426:	f007 fb13 	bl	802ca50 <__cxa_guard_acquire>
 802542a:	b138      	cbz	r0, 802543c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802542c:	4620      	mov	r0, r4
 802542e:	f007 fb1b 	bl	802ca68 <__cxa_guard_release>
 8025432:	4a0f      	ldr	r2, [pc, #60]	; (8025470 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025434:	490f      	ldr	r1, [pc, #60]	; (8025474 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8025436:	4810      	ldr	r0, [pc, #64]	; (8025478 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025438:	f007 fb03 	bl	802ca42 <__aeabi_atexit>
 802543c:	4c0f      	ldr	r4, [pc, #60]	; (802547c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802543e:	7823      	ldrb	r3, [r4, #0]
 8025440:	f3bf 8f5b 	dmb	ish
 8025444:	07db      	lsls	r3, r3, #31
 8025446:	d40b      	bmi.n	8025460 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025448:	4620      	mov	r0, r4
 802544a:	f007 fb01 	bl	802ca50 <__cxa_guard_acquire>
 802544e:	b138      	cbz	r0, 8025460 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8025450:	4620      	mov	r0, r4
 8025452:	f007 fb09 	bl	802ca68 <__cxa_guard_release>
 8025456:	4a06      	ldr	r2, [pc, #24]	; (8025470 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8025458:	4909      	ldr	r1, [pc, #36]	; (8025480 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802545a:	480a      	ldr	r0, [pc, #40]	; (8025484 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802545c:	f007 faf1 	bl	802ca42 <__aeabi_atexit>
 8025460:	4b05      	ldr	r3, [pc, #20]	; (8025478 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8025462:	63ab      	str	r3, [r5, #56]	; 0x38
 8025464:	4b07      	ldr	r3, [pc, #28]	; (8025484 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8025466:	63eb      	str	r3, [r5, #60]	; 0x3c
 8025468:	bd38      	pop	{r3, r4, r5, pc}
 802546a:	bf00      	nop
 802546c:	2400d8f8 	.word	0x2400d8f8
 8025470:	24000000 	.word	0x24000000
 8025474:	08023993 	.word	0x08023993
 8025478:	240005c0 	.word	0x240005c0
 802547c:	2400d8fc 	.word	0x2400d8fc
 8025480:	08023991 	.word	0x08023991
 8025484:	240005c4 	.word	0x240005c4

08025488 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8025488:	b538      	push	{r3, r4, r5, lr}
 802548a:	4c15      	ldr	r4, [pc, #84]	; (80254e0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802548c:	4605      	mov	r5, r0
 802548e:	7823      	ldrb	r3, [r4, #0]
 8025490:	f3bf 8f5b 	dmb	ish
 8025494:	07da      	lsls	r2, r3, #31
 8025496:	d40b      	bmi.n	80254b0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8025498:	4620      	mov	r0, r4
 802549a:	f007 fad9 	bl	802ca50 <__cxa_guard_acquire>
 802549e:	b138      	cbz	r0, 80254b0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80254a0:	4620      	mov	r0, r4
 80254a2:	f007 fae1 	bl	802ca68 <__cxa_guard_release>
 80254a6:	4a0f      	ldr	r2, [pc, #60]	; (80254e4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80254a8:	490f      	ldr	r1, [pc, #60]	; (80254e8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80254aa:	4810      	ldr	r0, [pc, #64]	; (80254ec <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80254ac:	f007 fac9 	bl	802ca42 <__aeabi_atexit>
 80254b0:	4c0f      	ldr	r4, [pc, #60]	; (80254f0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80254b2:	7823      	ldrb	r3, [r4, #0]
 80254b4:	f3bf 8f5b 	dmb	ish
 80254b8:	07db      	lsls	r3, r3, #31
 80254ba:	d40b      	bmi.n	80254d4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80254bc:	4620      	mov	r0, r4
 80254be:	f007 fac7 	bl	802ca50 <__cxa_guard_acquire>
 80254c2:	b138      	cbz	r0, 80254d4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80254c4:	4620      	mov	r0, r4
 80254c6:	f007 facf 	bl	802ca68 <__cxa_guard_release>
 80254ca:	4a06      	ldr	r2, [pc, #24]	; (80254e4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80254cc:	4909      	ldr	r1, [pc, #36]	; (80254f4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80254ce:	480a      	ldr	r0, [pc, #40]	; (80254f8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80254d0:	f007 fab7 	bl	802ca42 <__aeabi_atexit>
 80254d4:	4b05      	ldr	r3, [pc, #20]	; (80254ec <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80254d6:	632b      	str	r3, [r5, #48]	; 0x30
 80254d8:	4b07      	ldr	r3, [pc, #28]	; (80254f8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80254da:	636b      	str	r3, [r5, #52]	; 0x34
 80254dc:	bd38      	pop	{r3, r4, r5, pc}
 80254de:	bf00      	nop
 80254e0:	2400d914 	.word	0x2400d914
 80254e4:	24000000 	.word	0x24000000
 80254e8:	0802399b 	.word	0x0802399b
 80254ec:	240005dc 	.word	0x240005dc
 80254f0:	2400d918 	.word	0x2400d918
 80254f4:	08023999 	.word	0x08023999
 80254f8:	240005e0 	.word	0x240005e0

080254fc <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 80254fc:	b510      	push	{r4, lr}
 80254fe:	4604      	mov	r4, r0
 8025500:	f7ff ff14 	bl	802532c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8025504:	4620      	mov	r0, r4
 8025506:	f7ff ff85 	bl	8025414 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802550a:	4620      	mov	r0, r4
 802550c:	f7ff ff48 	bl	80253a0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8025510:	4620      	mov	r0, r4
 8025512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025516:	f7ff bfb7 	b.w	8025488 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0802551c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802551c:	b538      	push	{r3, r4, r5, lr}
 802551e:	4c15      	ldr	r4, [pc, #84]	; (8025574 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8025520:	4605      	mov	r5, r0
 8025522:	7823      	ldrb	r3, [r4, #0]
 8025524:	f3bf 8f5b 	dmb	ish
 8025528:	07da      	lsls	r2, r3, #31
 802552a:	d40b      	bmi.n	8025544 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802552c:	4620      	mov	r0, r4
 802552e:	f007 fa8f 	bl	802ca50 <__cxa_guard_acquire>
 8025532:	b138      	cbz	r0, 8025544 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8025534:	4620      	mov	r0, r4
 8025536:	f007 fa97 	bl	802ca68 <__cxa_guard_release>
 802553a:	4a0f      	ldr	r2, [pc, #60]	; (8025578 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802553c:	490f      	ldr	r1, [pc, #60]	; (802557c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802553e:	4810      	ldr	r0, [pc, #64]	; (8025580 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8025540:	f007 fa7f 	bl	802ca42 <__aeabi_atexit>
 8025544:	4c0f      	ldr	r4, [pc, #60]	; (8025584 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8025546:	7823      	ldrb	r3, [r4, #0]
 8025548:	f3bf 8f5b 	dmb	ish
 802554c:	07db      	lsls	r3, r3, #31
 802554e:	d40b      	bmi.n	8025568 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025550:	4620      	mov	r0, r4
 8025552:	f007 fa7d 	bl	802ca50 <__cxa_guard_acquire>
 8025556:	b138      	cbz	r0, 8025568 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8025558:	4620      	mov	r0, r4
 802555a:	f007 fa85 	bl	802ca68 <__cxa_guard_release>
 802555e:	4a06      	ldr	r2, [pc, #24]	; (8025578 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8025560:	4909      	ldr	r1, [pc, #36]	; (8025588 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8025562:	480a      	ldr	r0, [pc, #40]	; (802558c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8025564:	f007 fa6d 	bl	802ca42 <__aeabi_atexit>
 8025568:	4b05      	ldr	r3, [pc, #20]	; (8025580 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802556a:	65ab      	str	r3, [r5, #88]	; 0x58
 802556c:	4b07      	ldr	r3, [pc, #28]	; (802558c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802556e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8025570:	bd38      	pop	{r3, r4, r5, pc}
 8025572:	bf00      	nop
 8025574:	2400d8f0 	.word	0x2400d8f0
 8025578:	24000000 	.word	0x24000000
 802557c:	08023987 	.word	0x08023987
 8025580:	240005b8 	.word	0x240005b8
 8025584:	2400d8f4 	.word	0x2400d8f4
 8025588:	08023985 	.word	0x08023985
 802558c:	240005bc 	.word	0x240005bc

08025590 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8025590:	b538      	push	{r3, r4, r5, lr}
 8025592:	4c15      	ldr	r4, [pc, #84]	; (80255e8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8025594:	4605      	mov	r5, r0
 8025596:	7823      	ldrb	r3, [r4, #0]
 8025598:	f3bf 8f5b 	dmb	ish
 802559c:	07da      	lsls	r2, r3, #31
 802559e:	d40b      	bmi.n	80255b8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80255a0:	4620      	mov	r0, r4
 80255a2:	f007 fa55 	bl	802ca50 <__cxa_guard_acquire>
 80255a6:	b138      	cbz	r0, 80255b8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 80255a8:	4620      	mov	r0, r4
 80255aa:	f007 fa5d 	bl	802ca68 <__cxa_guard_release>
 80255ae:	4a0f      	ldr	r2, [pc, #60]	; (80255ec <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80255b0:	490f      	ldr	r1, [pc, #60]	; (80255f0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 80255b2:	4810      	ldr	r0, [pc, #64]	; (80255f4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80255b4:	f007 fa45 	bl	802ca42 <__aeabi_atexit>
 80255b8:	4c0f      	ldr	r4, [pc, #60]	; (80255f8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 80255ba:	7823      	ldrb	r3, [r4, #0]
 80255bc:	f3bf 8f5b 	dmb	ish
 80255c0:	07db      	lsls	r3, r3, #31
 80255c2:	d40b      	bmi.n	80255dc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80255c4:	4620      	mov	r0, r4
 80255c6:	f007 fa43 	bl	802ca50 <__cxa_guard_acquire>
 80255ca:	b138      	cbz	r0, 80255dc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 80255cc:	4620      	mov	r0, r4
 80255ce:	f007 fa4b 	bl	802ca68 <__cxa_guard_release>
 80255d2:	4a06      	ldr	r2, [pc, #24]	; (80255ec <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 80255d4:	4909      	ldr	r1, [pc, #36]	; (80255fc <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 80255d6:	480a      	ldr	r0, [pc, #40]	; (8025600 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80255d8:	f007 fa33 	bl	802ca42 <__aeabi_atexit>
 80255dc:	4b05      	ldr	r3, [pc, #20]	; (80255f4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80255de:	652b      	str	r3, [r5, #80]	; 0x50
 80255e0:	4b07      	ldr	r3, [pc, #28]	; (8025600 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80255e2:	656b      	str	r3, [r5, #84]	; 0x54
 80255e4:	bd38      	pop	{r3, r4, r5, pc}
 80255e6:	bf00      	nop
 80255e8:	2400d8c8 	.word	0x2400d8c8
 80255ec:	24000000 	.word	0x24000000
 80255f0:	0802398b 	.word	0x0802398b
 80255f4:	24000590 	.word	0x24000590
 80255f8:	2400d8cc 	.word	0x2400d8cc
 80255fc:	08023989 	.word	0x08023989
 8025600:	24000594 	.word	0x24000594

08025604 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 8025604:	b510      	push	{r4, lr}
 8025606:	4604      	mov	r4, r0
 8025608:	f7ff ff88 	bl	802551c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 802560c:	4620      	mov	r0, r4
 802560e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025612:	f7ff bfbd 	b.w	8025590 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08025618 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8025618:	b538      	push	{r3, r4, r5, lr}
 802561a:	4c0b      	ldr	r4, [pc, #44]	; (8025648 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 802561c:	4605      	mov	r5, r0
 802561e:	7823      	ldrb	r3, [r4, #0]
 8025620:	f3bf 8f5b 	dmb	ish
 8025624:	07db      	lsls	r3, r3, #31
 8025626:	d40b      	bmi.n	8025640 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025628:	4620      	mov	r0, r4
 802562a:	f007 fa11 	bl	802ca50 <__cxa_guard_acquire>
 802562e:	b138      	cbz	r0, 8025640 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8025630:	4620      	mov	r0, r4
 8025632:	f007 fa19 	bl	802ca68 <__cxa_guard_release>
 8025636:	4a05      	ldr	r2, [pc, #20]	; (802564c <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8025638:	4905      	ldr	r1, [pc, #20]	; (8025650 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 802563a:	4806      	ldr	r0, [pc, #24]	; (8025654 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802563c:	f007 fa01 	bl	802ca42 <__aeabi_atexit>
 8025640:	4b04      	ldr	r3, [pc, #16]	; (8025654 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 8025642:	666b      	str	r3, [r5, #100]	; 0x64
 8025644:	bd38      	pop	{r3, r4, r5, pc}
 8025646:	bf00      	nop
 8025648:	2400d900 	.word	0x2400d900
 802564c:	24000000 	.word	0x24000000
 8025650:	08023981 	.word	0x08023981
 8025654:	240005c8 	.word	0x240005c8

08025658 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8025658:	b538      	push	{r3, r4, r5, lr}
 802565a:	4c0b      	ldr	r4, [pc, #44]	; (8025688 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 802565c:	4605      	mov	r5, r0
 802565e:	7823      	ldrb	r3, [r4, #0]
 8025660:	f3bf 8f5b 	dmb	ish
 8025664:	07db      	lsls	r3, r3, #31
 8025666:	d40b      	bmi.n	8025680 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025668:	4620      	mov	r0, r4
 802566a:	f007 f9f1 	bl	802ca50 <__cxa_guard_acquire>
 802566e:	b138      	cbz	r0, 8025680 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8025670:	4620      	mov	r0, r4
 8025672:	f007 f9f9 	bl	802ca68 <__cxa_guard_release>
 8025676:	4a05      	ldr	r2, [pc, #20]	; (802568c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8025678:	4905      	ldr	r1, [pc, #20]	; (8025690 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 802567a:	4806      	ldr	r0, [pc, #24]	; (8025694 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 802567c:	f007 f9e1 	bl	802ca42 <__aeabi_atexit>
 8025680:	4b04      	ldr	r3, [pc, #16]	; (8025694 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8025682:	662b      	str	r3, [r5, #96]	; 0x60
 8025684:	bd38      	pop	{r3, r4, r5, pc}
 8025686:	bf00      	nop
 8025688:	2400d8d8 	.word	0x2400d8d8
 802568c:	24000000 	.word	0x24000000
 8025690:	08023983 	.word	0x08023983
 8025694:	240005a0 	.word	0x240005a0

08025698 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8025698:	b510      	push	{r4, lr}
 802569a:	4604      	mov	r4, r0
 802569c:	f7ff ffbc 	bl	8025618 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80256a0:	4620      	mov	r0, r4
 80256a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256a6:	f7ff bfd7 	b.w	8025658 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080256ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80256ac:	b538      	push	{r3, r4, r5, lr}
 80256ae:	4c15      	ldr	r4, [pc, #84]	; (8025704 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80256b0:	4605      	mov	r5, r0
 80256b2:	7823      	ldrb	r3, [r4, #0]
 80256b4:	f3bf 8f5b 	dmb	ish
 80256b8:	07da      	lsls	r2, r3, #31
 80256ba:	d40b      	bmi.n	80256d4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80256bc:	4620      	mov	r0, r4
 80256be:	f007 f9c7 	bl	802ca50 <__cxa_guard_acquire>
 80256c2:	b138      	cbz	r0, 80256d4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80256c4:	4620      	mov	r0, r4
 80256c6:	f007 f9cf 	bl	802ca68 <__cxa_guard_release>
 80256ca:	4a0f      	ldr	r2, [pc, #60]	; (8025708 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80256cc:	490f      	ldr	r1, [pc, #60]	; (802570c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80256ce:	4810      	ldr	r0, [pc, #64]	; (8025710 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80256d0:	f007 f9b7 	bl	802ca42 <__aeabi_atexit>
 80256d4:	4c0f      	ldr	r4, [pc, #60]	; (8025714 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80256d6:	7823      	ldrb	r3, [r4, #0]
 80256d8:	f3bf 8f5b 	dmb	ish
 80256dc:	07db      	lsls	r3, r3, #31
 80256de:	d40b      	bmi.n	80256f8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80256e0:	4620      	mov	r0, r4
 80256e2:	f007 f9b5 	bl	802ca50 <__cxa_guard_acquire>
 80256e6:	b138      	cbz	r0, 80256f8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80256e8:	4620      	mov	r0, r4
 80256ea:	f007 f9bd 	bl	802ca68 <__cxa_guard_release>
 80256ee:	4a06      	ldr	r2, [pc, #24]	; (8025708 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80256f0:	4909      	ldr	r1, [pc, #36]	; (8025718 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80256f2:	480a      	ldr	r0, [pc, #40]	; (802571c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80256f4:	f007 f9a5 	bl	802ca42 <__aeabi_atexit>
 80256f8:	4b05      	ldr	r3, [pc, #20]	; (8025710 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80256fa:	672b      	str	r3, [r5, #112]	; 0x70
 80256fc:	4b07      	ldr	r3, [pc, #28]	; (802571c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80256fe:	676b      	str	r3, [r5, #116]	; 0x74
 8025700:	bd38      	pop	{r3, r4, r5, pc}
 8025702:	bf00      	nop
 8025704:	2400d8d0 	.word	0x2400d8d0
 8025708:	24000000 	.word	0x24000000
 802570c:	0802397b 	.word	0x0802397b
 8025710:	24000598 	.word	0x24000598
 8025714:	2400d8d4 	.word	0x2400d8d4
 8025718:	08023979 	.word	0x08023979
 802571c:	2400059c 	.word	0x2400059c

08025720 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 8025720:	b538      	push	{r3, r4, r5, lr}
 8025722:	4c15      	ldr	r4, [pc, #84]	; (8025778 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8025724:	4605      	mov	r5, r0
 8025726:	7823      	ldrb	r3, [r4, #0]
 8025728:	f3bf 8f5b 	dmb	ish
 802572c:	07da      	lsls	r2, r3, #31
 802572e:	d40b      	bmi.n	8025748 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025730:	4620      	mov	r0, r4
 8025732:	f007 f98d 	bl	802ca50 <__cxa_guard_acquire>
 8025736:	b138      	cbz	r0, 8025748 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8025738:	4620      	mov	r0, r4
 802573a:	f007 f995 	bl	802ca68 <__cxa_guard_release>
 802573e:	4a0f      	ldr	r2, [pc, #60]	; (802577c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025740:	490f      	ldr	r1, [pc, #60]	; (8025780 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8025742:	4810      	ldr	r0, [pc, #64]	; (8025784 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8025744:	f007 f97d 	bl	802ca42 <__aeabi_atexit>
 8025748:	4c0f      	ldr	r4, [pc, #60]	; (8025788 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802574a:	7823      	ldrb	r3, [r4, #0]
 802574c:	f3bf 8f5b 	dmb	ish
 8025750:	07db      	lsls	r3, r3, #31
 8025752:	d40b      	bmi.n	802576c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8025754:	4620      	mov	r0, r4
 8025756:	f007 f97b 	bl	802ca50 <__cxa_guard_acquire>
 802575a:	b138      	cbz	r0, 802576c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802575c:	4620      	mov	r0, r4
 802575e:	f007 f983 	bl	802ca68 <__cxa_guard_release>
 8025762:	4a06      	ldr	r2, [pc, #24]	; (802577c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8025764:	4909      	ldr	r1, [pc, #36]	; (802578c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8025766:	480a      	ldr	r0, [pc, #40]	; (8025790 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025768:	f007 f96b 	bl	802ca42 <__aeabi_atexit>
 802576c:	4b05      	ldr	r3, [pc, #20]	; (8025784 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802576e:	66ab      	str	r3, [r5, #104]	; 0x68
 8025770:	4b07      	ldr	r3, [pc, #28]	; (8025790 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8025772:	66eb      	str	r3, [r5, #108]	; 0x6c
 8025774:	bd38      	pop	{r3, r4, r5, pc}
 8025776:	bf00      	nop
 8025778:	2400d8c0 	.word	0x2400d8c0
 802577c:	24000000 	.word	0x24000000
 8025780:	0802397f 	.word	0x0802397f
 8025784:	24000588 	.word	0x24000588
 8025788:	2400d8c4 	.word	0x2400d8c4
 802578c:	0802397d 	.word	0x0802397d
 8025790:	2400058c 	.word	0x2400058c

08025794 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 8025794:	b510      	push	{r4, lr}
 8025796:	4604      	mov	r4, r0
 8025798:	f7ff ff88 	bl	80256ac <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802579c:	4620      	mov	r0, r4
 802579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257a2:	f7ff bfbd 	b.w	8025720 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

080257a6 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 80257a6:	b510      	push	{r4, lr}
 80257a8:	4604      	mov	r4, r0
 80257aa:	f7ff fff3 	bl	8025794 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 80257ae:	4620      	mov	r0, r4
 80257b0:	f7ff ff72 	bl	8025698 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 80257b4:	4620      	mov	r0, r4
 80257b6:	f7ff fdaf 	bl	8025318 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 80257ba:	4620      	mov	r0, r4
 80257bc:	f7ff fce4 	bl	8025188 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 80257c0:	4620      	mov	r0, r4
 80257c2:	f7ff fd5f 	bl	8025284 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 80257c6:	4620      	mov	r0, r4
 80257c8:	f7ff fe98 	bl	80254fc <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 80257cc:	4620      	mov	r0, r4
 80257ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257d2:	f7ff bf17 	b.w	8025604 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>

080257d6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 80257d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257da:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 80257de:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80257e2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80257e6:	f1b8 0f00 	cmp.w	r8, #0
 80257ea:	fb08 640e 	mla	r4, r8, lr, r6
 80257ee:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 80257f2:	9001      	str	r0, [sp, #4]
 80257f4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80257f8:	eb02 0a04 	add.w	sl, r2, r4
 80257fc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8025800:	6808      	ldr	r0, [r1, #0]
 8025802:	f2c0 80dc 	blt.w	80259be <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8025806:	45c3      	cmp	fp, r8
 8025808:	f340 80d9 	ble.w	80259be <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 802580c:	2e00      	cmp	r6, #0
 802580e:	f2c0 80d4 	blt.w	80259ba <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8025812:	45b6      	cmp	lr, r6
 8025814:	f340 80d1 	ble.w	80259ba <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8025818:	5d12      	ldrb	r2, [r2, r4]
 802581a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802581e:	ea4f 222c 	mov.w	r2, ip, asr #8
 8025822:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8025826:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802582a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802582e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025832:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8025836:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 802583a:	fa5f fc8c 	uxtb.w	ip, ip
 802583e:	0212      	lsls	r2, r2, #8
 8025840:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025844:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8025848:	ea42 020c 	orr.w	r2, r2, ip
 802584c:	1c74      	adds	r4, r6, #1
 802584e:	f100 80b7 	bmi.w	80259c0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025852:	45a6      	cmp	lr, r4
 8025854:	f340 80b4 	ble.w	80259c0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8025858:	2d00      	cmp	r5, #0
 802585a:	f000 80b1 	beq.w	80259c0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 802585e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8025862:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8025866:	ea4f 04ec 	mov.w	r4, ip, asr #3
 802586a:	ea4f 292c 	mov.w	r9, ip, asr #8
 802586e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025872:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025876:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 802587a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802587e:	fa5f fc8c 	uxtb.w	ip, ip
 8025882:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8025886:	0224      	lsls	r4, r4, #8
 8025888:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 802588c:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8025890:	ea49 090c 	orr.w	r9, r9, ip
 8025894:	f118 0801 	adds.w	r8, r8, #1
 8025898:	f100 8096 	bmi.w	80259c8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 802589c:	45c3      	cmp	fp, r8
 802589e:	f340 8093 	ble.w	80259c8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80258a2:	9c01      	ldr	r4, [sp, #4]
 80258a4:	2c00      	cmp	r4, #0
 80258a6:	f000 808f 	beq.w	80259c8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 80258aa:	2e00      	cmp	r6, #0
 80258ac:	f2c0 808a 	blt.w	80259c4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80258b0:	45b6      	cmp	lr, r6
 80258b2:	f340 8087 	ble.w	80259c4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 80258b6:	f81a 400e 	ldrb.w	r4, [sl, lr]
 80258ba:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 80258be:	ea4f 2824 	mov.w	r8, r4, asr #8
 80258c2:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 80258c6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80258ca:	00e4      	lsls	r4, r4, #3
 80258cc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80258d0:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 80258d4:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 80258d8:	b2e4      	uxtb	r4, r4
 80258da:	ea4f 2808 	mov.w	r8, r8, lsl #8
 80258de:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80258e2:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 80258e6:	ea48 0804 	orr.w	r8, r8, r4
 80258ea:	3601      	adds	r6, #1
 80258ec:	d419      	bmi.n	8025922 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80258ee:	45b6      	cmp	lr, r6
 80258f0:	dd17      	ble.n	8025922 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80258f2:	b1b5      	cbz	r5, 8025922 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80258f4:	44d6      	add	lr, sl
 80258f6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80258fa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80258fe:	10dc      	asrs	r4, r3, #3
 8025900:	1218      	asrs	r0, r3, #8
 8025902:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025906:	00db      	lsls	r3, r3, #3
 8025908:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802590c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8025910:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8025914:	b2db      	uxtb	r3, r3
 8025916:	0220      	lsls	r0, r4, #8
 8025918:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802591c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8025920:	4318      	orrs	r0, r3
 8025922:	b2ad      	uxth	r5, r5
 8025924:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8025928:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802592c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025930:	fb05 fa03 	mul.w	sl, r5, r3
 8025934:	012d      	lsls	r5, r5, #4
 8025936:	2fff      	cmp	r7, #255	; 0xff
 8025938:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 802593c:	f5c5 7b80 	rsb	fp, r5, #256	; 0x100
 8025940:	eba5 050a 	sub.w	r5, r5, sl
 8025944:	fa1f fe83 	uxth.w	lr, r3
 8025948:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 802594c:	b2ad      	uxth	r5, r5
 802594e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025952:	ebab 0b0e 	sub.w	fp, fp, lr
 8025956:	fb05 f303 	mul.w	r3, r5, r3
 802595a:	fa1f fb8b 	uxth.w	fp, fp
 802595e:	fb05 f509 	mul.w	r5, r5, r9
 8025962:	fb0b 3606 	mla	r6, fp, r6, r3
 8025966:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802596a:	fb0b 5502 	mla	r5, fp, r2, r5
 802596e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025972:	fb0a 6603 	mla	r6, sl, r3, r6
 8025976:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 802597a:	fb0a 5000 	mla	r0, sl, r0, r5
 802597e:	fb0e 6303 	mla	r3, lr, r3, r6
 8025982:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8025986:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802598a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 802598e:	fb0e 0303 	mla	r3, lr, r3, r0
 8025992:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8025996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802599a:	ea43 0306 	orr.w	r3, r3, r6
 802599e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80259a2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80259a6:	b2d4      	uxtb	r4, r2
 80259a8:	b2c5      	uxtb	r5, r0
 80259aa:	d10f      	bne.n	80259cc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 80259ac:	700b      	strb	r3, [r1, #0]
 80259ae:	7048      	strb	r0, [r1, #1]
 80259b0:	708a      	strb	r2, [r1, #2]
 80259b2:	70cf      	strb	r7, [r1, #3]
 80259b4:	b003      	add	sp, #12
 80259b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259ba:	4602      	mov	r2, r0
 80259bc:	e746      	b.n	802584c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 80259be:	4602      	mov	r2, r0
 80259c0:	4681      	mov	r9, r0
 80259c2:	e767      	b.n	8025894 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 80259c4:	4680      	mov	r8, r0
 80259c6:	e790      	b.n	80258ea <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 80259c8:	4680      	mov	r8, r0
 80259ca:	e7aa      	b.n	8025922 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 80259cc:	2f00      	cmp	r7, #0
 80259ce:	d0f1      	beq.n	80259b4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 80259d0:	78ce      	ldrb	r6, [r1, #3]
 80259d2:	b2db      	uxtb	r3, r3
 80259d4:	fb17 f505 	smulbb	r5, r7, r5
 80259d8:	fb07 f206 	mul.w	r2, r7, r6
 80259dc:	1c50      	adds	r0, r2, #1
 80259de:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80259e2:	19ba      	adds	r2, r7, r6
 80259e4:	1200      	asrs	r0, r0, #8
 80259e6:	1a12      	subs	r2, r2, r0
 80259e8:	1a30      	subs	r0, r6, r0
 80259ea:	780e      	ldrb	r6, [r1, #0]
 80259ec:	b2d2      	uxtb	r2, r2
 80259ee:	4346      	muls	r6, r0
 80259f0:	70ca      	strb	r2, [r1, #3]
 80259f2:	fb07 6303 	mla	r3, r7, r3, r6
 80259f6:	fb17 f704 	smulbb	r7, r7, r4
 80259fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80259fe:	700b      	strb	r3, [r1, #0]
 8025a00:	784b      	ldrb	r3, [r1, #1]
 8025a02:	fb00 5303 	mla	r3, r0, r3, r5
 8025a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8025a0a:	704b      	strb	r3, [r1, #1]
 8025a0c:	788b      	ldrb	r3, [r1, #2]
 8025a0e:	fb00 7703 	mla	r7, r0, r3, r7
 8025a12:	fb97 f7f2 	sdiv	r7, r7, r2
 8025a16:	708f      	strb	r7, [r1, #2]
 8025a18:	e7cc      	b.n	80259b4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08025a1a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a1e:	b097      	sub	sp, #92	; 0x5c
 8025a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025a24:	9213      	str	r2, [sp, #76]	; 0x4c
 8025a26:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025a28:	9014      	str	r0, [sp, #80]	; 0x50
 8025a2a:	910c      	str	r1, [sp, #48]	; 0x30
 8025a2c:	6850      	ldr	r0, [r2, #4]
 8025a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8025a30:	6812      	ldr	r2, [r2, #0]
 8025a32:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
 8025a36:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8025a3a:	e9dd a621 	ldrd	sl, r6, [sp, #132]	; 0x84
 8025a3e:	fb00 1303 	mla	r3, r0, r3, r1
 8025a42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025a46:	930a      	str	r3, [sp, #40]	; 0x28
 8025a48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a4a:	681b      	ldr	r3, [r3, #0]
 8025a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8025a4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a50:	685f      	ldr	r7, [r3, #4]
 8025a52:	3704      	adds	r7, #4
 8025a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	dc03      	bgt.n	8025a62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025a5c:	2b00      	cmp	r3, #0
 8025a5e:	f340 826a 	ble.w	8025f36 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8025a62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025a64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025a68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025a6c:	1e48      	subs	r0, r1, #1
 8025a6e:	f102 3cff 	add.w	ip, r2, #4294967295
 8025a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	f340 80ce 	ble.w	8025c16 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025a7a:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 8025a7e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025a82:	d406      	bmi.n	8025a92 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a84:	4586      	cmp	lr, r0
 8025a86:	da04      	bge.n	8025a92 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	db02      	blt.n	8025a92 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025a8c:	4563      	cmp	r3, ip
 8025a8e:	f2c0 80c3 	blt.w	8025c18 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8025a92:	f11e 0e01 	adds.w	lr, lr, #1
 8025a96:	f100 80b3 	bmi.w	8025c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025a9a:	4571      	cmp	r1, lr
 8025a9c:	f2c0 80b0 	blt.w	8025c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025aa0:	3301      	adds	r3, #1
 8025aa2:	f100 80ad 	bmi.w	8025c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025aa6:	429a      	cmp	r2, r3
 8025aa8:	f2c0 80aa 	blt.w	8025c00 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8025aac:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
 8025ab0:	f1bb 0f00 	cmp.w	fp, #0
 8025ab4:	f340 80ce 	ble.w	8025c54 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025ab8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025aba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025abe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025ac0:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8025ac4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8025ac8:	ea5f 422a 	movs.w	r2, sl, asr #16
 8025acc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025ad0:	689b      	ldr	r3, [r3, #8]
 8025ad2:	f100 8141 	bmi.w	8025d58 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025ad6:	f103 39ff 	add.w	r9, r3, #4294967295
 8025ada:	454a      	cmp	r2, r9
 8025adc:	f280 813c 	bge.w	8025d58 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025ae0:	f1bc 0f00 	cmp.w	ip, #0
 8025ae4:	f2c0 8138 	blt.w	8025d58 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025ae8:	f10e 39ff 	add.w	r9, lr, #4294967295
 8025aec:	45cc      	cmp	ip, r9
 8025aee:	f280 8133 	bge.w	8025d58 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025af2:	b21b      	sxth	r3, r3
 8025af4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025af6:	fb0c 2203 	mla	r2, ip, r3, r2
 8025afa:	eb05 0902 	add.w	r9, r5, r2
 8025afe:	5caa      	ldrb	r2, [r5, r2]
 8025b00:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8025b04:	2800      	cmp	r0, #0
 8025b06:	f000 80e9 	beq.w	8025cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8025b0a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025b0e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025b12:	920f      	str	r2, [sp, #60]	; 0x3c
 8025b14:	b151      	cbz	r1, 8025b2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025b16:	eb09 0203 	add.w	r2, r9, r3
 8025b1a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025b1e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025b22:	930d      	str	r3, [sp, #52]	; 0x34
 8025b24:	7853      	ldrb	r3, [r2, #1]
 8025b26:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8025b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025b2e:	fb10 f201 	smulbb	r2, r0, r1
 8025b32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025b34:	2cff      	cmp	r4, #255	; 0xff
 8025b36:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025b3a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025b3e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025b42:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8025b46:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025b4a:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8025b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025b54:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8025b58:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025b5c:	ea43 0305 	orr.w	r3, r3, r5
 8025b60:	fb02 f303 	mul.w	r3, r2, r3
 8025b64:	fb09 330c 	mla	r3, r9, ip, r3
 8025b68:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025b6c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025b70:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025b74:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025b78:	f1c1 0c10 	rsb	ip, r1, #16
 8025b7c:	ebac 0c00 	sub.w	ip, ip, r0
 8025b80:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025b84:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025b88:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025b8e:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8025b92:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025b96:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025b9a:	ea40 0003 	orr.w	r0, r0, r3
 8025b9e:	fb02 c200 	mla	r2, r2, r0, ip
 8025ba2:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8025ba6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8025baa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025bae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025bb2:	ea42 0203 	orr.w	r2, r2, r3
 8025bb6:	b293      	uxth	r3, r2
 8025bb8:	ea4f 2223 	mov.w	r2, r3, asr #8
 8025bbc:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8025bc0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8025bc4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025bc8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025bcc:	b2db      	uxtb	r3, r3
 8025bce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025bd2:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8025bd6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025bda:	f040 8088 	bne.w	8025cee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8025bde:	f888 3000 	strb.w	r3, [r8]
 8025be2:	f888 1001 	strb.w	r1, [r8, #1]
 8025be6:	f888 2002 	strb.w	r2, [r8, #2]
 8025bea:	f888 4003 	strb.w	r4, [r8, #3]
 8025bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025bf0:	f108 0804 	add.w	r8, r8, #4
 8025bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025bf8:	449a      	add	sl, r3
 8025bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025bfc:	441e      	add	r6, r3
 8025bfe:	e757      	b.n	8025ab0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025c00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025c02:	449a      	add	sl, r3
 8025c04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c06:	441e      	add	r6, r3
 8025c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c0a:	3b01      	subs	r3, #1
 8025c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8025c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c10:	3304      	adds	r3, #4
 8025c12:	930a      	str	r3, [sp, #40]	; 0x28
 8025c14:	e72d      	b.n	8025a72 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025c16:	d024      	beq.n	8025c62 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c1a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025c1c:	3b01      	subs	r3, #1
 8025c1e:	fb00 a003 	mla	r0, r0, r3, sl
 8025c22:	1400      	asrs	r0, r0, #16
 8025c24:	f53f af42 	bmi.w	8025aac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c28:	3901      	subs	r1, #1
 8025c2a:	4288      	cmp	r0, r1
 8025c2c:	f6bf af3e 	bge.w	8025aac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c30:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025c32:	fb01 6303 	mla	r3, r1, r3, r6
 8025c36:	141b      	asrs	r3, r3, #16
 8025c38:	f53f af38 	bmi.w	8025aac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c3c:	3a01      	subs	r2, #1
 8025c3e:	4293      	cmp	r3, r2
 8025c40:	f6bf af34 	bge.w	8025aac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c46:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025c4a:	3304      	adds	r3, #4
 8025c4c:	f1b9 0f00 	cmp.w	r9, #0
 8025c50:	f300 80a1 	bgt.w	8025d96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c56:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8025c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025c5c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8025c60:	930a      	str	r3, [sp, #40]	; 0x28
 8025c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c64:	2b00      	cmp	r3, #0
 8025c66:	f340 8166 	ble.w	8025f36 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8025c6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025c6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025c74:	eeb0 6a62 	vmov.f32	s12, s5
 8025c78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025c7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025c80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025c84:	ee16 aa10 	vmov	sl, s12
 8025c88:	eeb0 6a43 	vmov.f32	s12, s6
 8025c8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025c90:	ee16 6a10 	vmov	r6, s12
 8025c94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025c98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025c9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ca0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025ca4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025ca8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025cac:	ee12 2a90 	vmov	r2, s5
 8025cb0:	eef0 2a47 	vmov.f32	s5, s14
 8025cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cb8:	ee13 2a10 	vmov	r2, s6
 8025cbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8025cbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cc0:	eeb0 3a67 	vmov.f32	s6, s15
 8025cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cc8:	9324      	str	r3, [sp, #144]	; 0x90
 8025cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ccc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025cce:	3b01      	subs	r3, #1
 8025cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8025cd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cd4:	bf08      	it	eq
 8025cd6:	4613      	moveq	r3, r2
 8025cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8025cda:	e6bb      	b.n	8025a54 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025cdc:	2900      	cmp	r1, #0
 8025cde:	f43f af25 	beq.w	8025b2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025ce2:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025ce6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025cea:	930d      	str	r3, [sp, #52]	; 0x34
 8025cec:	e71e      	b.n	8025b2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8025cee:	2c00      	cmp	r4, #0
 8025cf0:	f43f af7d 	beq.w	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025cf4:	f898 e003 	ldrb.w	lr, [r8, #3]
 8025cf8:	fb13 f304 	smulbb	r3, r3, r4
 8025cfc:	fb14 f101 	smulbb	r1, r4, r1
 8025d00:	fb14 f202 	smulbb	r2, r4, r2
 8025d04:	fb04 fc0e 	mul.w	ip, r4, lr
 8025d08:	f10c 0001 	add.w	r0, ip, #1
 8025d0c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025d10:	eb04 0c0e 	add.w	ip, r4, lr
 8025d14:	1200      	asrs	r0, r0, #8
 8025d16:	ebac 0c00 	sub.w	ip, ip, r0
 8025d1a:	ebae 0000 	sub.w	r0, lr, r0
 8025d1e:	f898 e000 	ldrb.w	lr, [r8]
 8025d22:	fa5f fc8c 	uxtb.w	ip, ip
 8025d26:	fb00 330e 	mla	r3, r0, lr, r3
 8025d2a:	f888 c003 	strb.w	ip, [r8, #3]
 8025d2e:	fb93 f3fc 	sdiv	r3, r3, ip
 8025d32:	f888 3000 	strb.w	r3, [r8]
 8025d36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025d3a:	fb00 1103 	mla	r1, r0, r3, r1
 8025d3e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8025d42:	fb00 2003 	mla	r0, r0, r3, r2
 8025d46:	fb91 f1fc 	sdiv	r1, r1, ip
 8025d4a:	fb90 f0fc 	sdiv	r0, r0, ip
 8025d4e:	f888 1001 	strb.w	r1, [r8, #1]
 8025d52:	f888 0002 	strb.w	r0, [r8, #2]
 8025d56:	e74a      	b.n	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d58:	f112 0901 	adds.w	r9, r2, #1
 8025d5c:	f53f af47 	bmi.w	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d60:	454b      	cmp	r3, r9
 8025d62:	f6ff af44 	blt.w	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d66:	f11c 0901 	adds.w	r9, ip, #1
 8025d6a:	f53f af40 	bmi.w	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d6e:	45ce      	cmp	lr, r9
 8025d70:	f6ff af3d 	blt.w	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d74:	9202      	str	r2, [sp, #8]
 8025d76:	b21b      	sxth	r3, r3
 8025d78:	fa0f f28e 	sxth.w	r2, lr
 8025d7c:	9300      	str	r3, [sp, #0]
 8025d7e:	463b      	mov	r3, r7
 8025d80:	9201      	str	r2, [sp, #4]
 8025d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025d84:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025d88:	e9cd c003 	strd	ip, r0, [sp, #12]
 8025d8c:	4641      	mov	r1, r8
 8025d8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8025d90:	f7ff fd21 	bl	80257d6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8025d94:	e72b      	b.n	8025bee <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8025d96:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025d98:	ea4f 412a 	mov.w	r1, sl, asr #16
 8025d9c:	1430      	asrs	r0, r6, #16
 8025d9e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8025da0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025da4:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8025da8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025dac:	fb02 1000 	mla	r0, r2, r0, r1
 8025db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025db2:	4401      	add	r1, r0
 8025db4:	5c28      	ldrb	r0, [r5, r0]
 8025db6:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8025dba:	f1b8 0f00 	cmp.w	r8, #0
 8025dbe:	d07d      	beq.n	8025ebc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8025dc0:	f891 e001 	ldrb.w	lr, [r1, #1]
 8025dc4:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8025dc8:	9511      	str	r5, [sp, #68]	; 0x44
 8025dca:	f1bc 0f00 	cmp.w	ip, #0
 8025dce:	d00a      	beq.n	8025de6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025dd0:	eb01 0e02 	add.w	lr, r1, r2
 8025dd4:	5c8a      	ldrb	r2, [r1, r2]
 8025dd6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025dda:	920e      	str	r2, [sp, #56]	; 0x38
 8025ddc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025de0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025de4:	9212      	str	r2, [sp, #72]	; 0x48
 8025de6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025de8:	fb18 f10c 	smulbb	r1, r8, ip
 8025dec:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8025dee:	2cff      	cmp	r4, #255	; 0xff
 8025df0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8025df4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025df8:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8025dfc:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8025e00:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025e04:	ea4e 0e02 	orr.w	lr, lr, r2
 8025e08:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8025e0c:	9215      	str	r2, [sp, #84]	; 0x54
 8025e0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025e10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8025e12:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025e16:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025e1a:	ea42 020b 	orr.w	r2, r2, fp
 8025e1e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025e22:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e26:	fb01 f202 	mul.w	r2, r1, r2
 8025e2a:	fb05 2e0e 	mla	lr, r5, lr, r2
 8025e2e:	f00b 62fc 	and.w	r2, fp, #132120576	; 0x7e00000
 8025e32:	ea42 0b00 	orr.w	fp, r2, r0
 8025e36:	f1cc 0010 	rsb	r0, ip, #16
 8025e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025e3c:	eba0 0808 	sub.w	r8, r0, r8
 8025e40:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8025e44:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8025e48:	fb08 ee0b 	mla	lr, r8, fp, lr
 8025e4c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025e50:	f422 68fc 	bic.w	r8, r2, #2016	; 0x7e0
 8025e54:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025e58:	ea4b 0808 	orr.w	r8, fp, r8
 8025e5c:	fb01 ee08 	mla	lr, r1, r8, lr
 8025e60:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025e64:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025e68:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025e6c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025e70:	ea42 0e0e 	orr.w	lr, r2, lr
 8025e74:	fa1f f28e 	uxth.w	r2, lr
 8025e78:	ea4f 2122 	mov.w	r1, r2, asr #8
 8025e7c:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8025e80:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025e84:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025e88:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025e8c:	b2d2      	uxtb	r2, r2
 8025e8e:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025e92:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025e96:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025e9a:	d117      	bne.n	8025ecc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8025e9c:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025ea0:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025ea4:	f803 1c02 	strb.w	r1, [r3, #-2]
 8025ea8:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025eac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025eae:	3304      	adds	r3, #4
 8025eb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8025eb4:	4492      	add	sl, r2
 8025eb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8025eb8:	4416      	add	r6, r2
 8025eba:	e6c7      	b.n	8025c4c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8025ebc:	f1bc 0f00 	cmp.w	ip, #0
 8025ec0:	d091      	beq.n	8025de6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ec2:	5c8a      	ldrb	r2, [r1, r2]
 8025ec4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025ec8:	920e      	str	r2, [sp, #56]	; 0x38
 8025eca:	e78c      	b.n	8025de6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025ecc:	2c00      	cmp	r4, #0
 8025ece:	d0ed      	beq.n	8025eac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025ed0:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8025ed4:	fb12 f204 	smulbb	r2, r2, r4
 8025ed8:	fb14 f000 	smulbb	r0, r4, r0
 8025edc:	fb14 f101 	smulbb	r1, r4, r1
 8025ee0:	fb04 fc08 	mul.w	ip, r4, r8
 8025ee4:	f10c 0e01 	add.w	lr, ip, #1
 8025ee8:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8025eec:	eb04 0c08 	add.w	ip, r4, r8
 8025ef0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8025ef4:	ebac 0c0e 	sub.w	ip, ip, lr
 8025ef8:	eba8 0e0e 	sub.w	lr, r8, lr
 8025efc:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8025f00:	fa5f fc8c 	uxtb.w	ip, ip
 8025f04:	fb0e 2208 	mla	r2, lr, r8, r2
 8025f08:	f803 cc01 	strb.w	ip, [r3, #-1]
 8025f0c:	fb92 f2fc 	sdiv	r2, r2, ip
 8025f10:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025f14:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8025f18:	fb0e 0002 	mla	r0, lr, r2, r0
 8025f1c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8025f20:	fb0e 1e02 	mla	lr, lr, r2, r1
 8025f24:	fb90 f0fc 	sdiv	r0, r0, ip
 8025f28:	fb9e fefc 	sdiv	lr, lr, ip
 8025f2c:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025f30:	f803 ec02 	strb.w	lr, [r3, #-2]
 8025f34:	e7ba      	b.n	8025eac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8025f36:	b017      	add	sp, #92	; 0x5c
 8025f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f3c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 8025f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f40:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	; 0x2c
 8025f44:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025f48:	f1be 0f00 	cmp.w	lr, #0
 8025f4c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8025f50:	fb0e 7409 	mla	r4, lr, r9, r7
 8025f54:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8025f58:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8025f5c:	eb02 0a04 	add.w	sl, r2, r4
 8025f60:	6808      	ldr	r0, [r1, #0]
 8025f62:	f2c0 80c5 	blt.w	80260f0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025f66:	45f0      	cmp	r8, lr
 8025f68:	f340 80c2 	ble.w	80260f0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8025f6c:	2f00      	cmp	r7, #0
 8025f6e:	f2c0 80bd 	blt.w	80260ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025f72:	45b9      	cmp	r9, r7
 8025f74:	f340 80ba 	ble.w	80260ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8025f78:	5d12      	ldrb	r2, [r2, r4]
 8025f7a:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8025f7e:	122c      	asrs	r4, r5, #8
 8025f80:	10ea      	asrs	r2, r5, #3
 8025f82:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025f86:	00ed      	lsls	r5, r5, #3
 8025f88:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025f8c:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8025f90:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8025f94:	b2ed      	uxtb	r5, r5
 8025f96:	0224      	lsls	r4, r4, #8
 8025f98:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025f9c:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8025fa0:	432c      	orrs	r4, r5
 8025fa2:	1c7a      	adds	r2, r7, #1
 8025fa4:	f100 80a7 	bmi.w	80260f6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025fa8:	4591      	cmp	r9, r2
 8025faa:	f340 80a4 	ble.w	80260f6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025fae:	2e00      	cmp	r6, #0
 8025fb0:	f000 80a1 	beq.w	80260f6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8025fb4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025fb8:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 8025fbc:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8025fc0:	ea4f 252b 	mov.w	r5, fp, asr #8
 8025fc4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025fc8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025fcc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025fd0:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025fd4:	fa5f fb8b 	uxtb.w	fp, fp
 8025fd8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8025fdc:	0212      	lsls	r2, r2, #8
 8025fde:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8025fe2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8025fe6:	ea45 050b 	orr.w	r5, r5, fp
 8025fea:	f11e 0e01 	adds.w	lr, lr, #1
 8025fee:	f100 8086 	bmi.w	80260fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025ff2:	45f0      	cmp	r8, lr
 8025ff4:	f340 8083 	ble.w	80260fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025ff8:	f1bc 0f00 	cmp.w	ip, #0
 8025ffc:	d07f      	beq.n	80260fe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8025ffe:	2f00      	cmp	r7, #0
 8026000:	db7b      	blt.n	80260fa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8026002:	45b9      	cmp	r9, r7
 8026004:	dd79      	ble.n	80260fa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8026006:	f81a 2009 	ldrb.w	r2, [sl, r9]
 802600a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802600e:	ea4f 222e 	mov.w	r2, lr, asr #8
 8026012:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8026016:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802601a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802601e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8026022:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8026026:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 802602a:	fa5f fe8e 	uxtb.w	lr, lr
 802602e:	0212      	lsls	r2, r2, #8
 8026030:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8026034:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8026038:	ea42 020e 	orr.w	r2, r2, lr
 802603c:	3701      	adds	r7, #1
 802603e:	d419      	bmi.n	8026074 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8026040:	45b9      	cmp	r9, r7
 8026042:	dd17      	ble.n	8026074 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8026044:	b1b6      	cbz	r6, 8026074 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 8026046:	44d1      	add	r9, sl
 8026048:	f899 0001 	ldrb.w	r0, [r9, #1]
 802604c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8026050:	10df      	asrs	r7, r3, #3
 8026052:	1218      	asrs	r0, r3, #8
 8026054:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026058:	00db      	lsls	r3, r3, #3
 802605a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802605e:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8026062:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8026066:	b2db      	uxtb	r3, r3
 8026068:	0238      	lsls	r0, r7, #8
 802606a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802606e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8026072:	4318      	orrs	r0, r3
 8026074:	b2b6      	uxth	r6, r6
 8026076:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802607a:	fa1f f78c 	uxth.w	r7, ip
 802607e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026082:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026086:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802608a:	fb06 fc07 	mul.w	ip, r6, r7
 802608e:	0136      	lsls	r6, r6, #4
 8026090:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026094:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8026098:	eba6 060c 	sub.w	r6, r6, ip
 802609c:	b2bf      	uxth	r7, r7
 802609e:	b2b6      	uxth	r6, r6
 80260a0:	ebae 0e07 	sub.w	lr, lr, r7
 80260a4:	4373      	muls	r3, r6
 80260a6:	fa1f fe8e 	uxth.w	lr, lr
 80260aa:	4375      	muls	r5, r6
 80260ac:	fb0e 3808 	mla	r8, lr, r8, r3
 80260b0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80260b4:	fb0e 5404 	mla	r4, lr, r4, r5
 80260b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80260bc:	fb0c 8803 	mla	r8, ip, r3, r8
 80260c0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80260c4:	fb0c 4000 	mla	r0, ip, r0, r4
 80260c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80260cc:	fb07 8303 	mla	r3, r7, r3, r8
 80260d0:	fb07 0002 	mla	r0, r7, r2, r0
 80260d4:	0a1b      	lsrs	r3, r3, #8
 80260d6:	0a00      	lsrs	r0, r0, #8
 80260d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80260e0:	4318      	orrs	r0, r3
 80260e2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80260e6:	6008      	str	r0, [r1, #0]
 80260e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260ec:	4604      	mov	r4, r0
 80260ee:	e758      	b.n	8025fa2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 80260f0:	4605      	mov	r5, r0
 80260f2:	4604      	mov	r4, r0
 80260f4:	e779      	b.n	8025fea <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 80260f6:	4605      	mov	r5, r0
 80260f8:	e777      	b.n	8025fea <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 80260fa:	4602      	mov	r2, r0
 80260fc:	e79e      	b.n	802603c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 80260fe:	4602      	mov	r2, r0
 8026100:	e7b8      	b.n	8026074 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08026102 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026106:	b093      	sub	sp, #76	; 0x4c
 8026108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802610c:	920f      	str	r2, [sp, #60]	; 0x3c
 802610e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026110:	9010      	str	r0, [sp, #64]	; 0x40
 8026112:	9108      	str	r1, [sp, #32]
 8026114:	6850      	ldr	r0, [r2, #4]
 8026116:	9306      	str	r3, [sp, #24]
 8026118:	6812      	ldr	r2, [r2, #0]
 802611a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802611e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026122:	fb00 1303 	mla	r3, r0, r3, r1
 8026126:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 802612a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802612c:	681b      	ldr	r3, [r3, #0]
 802612e:	9307      	str	r3, [sp, #28]
 8026130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026132:	685f      	ldr	r7, [r3, #4]
 8026134:	3704      	adds	r7, #4
 8026136:	9b08      	ldr	r3, [sp, #32]
 8026138:	2b00      	cmp	r3, #0
 802613a:	dc03      	bgt.n	8026144 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802613c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802613e:	2b00      	cmp	r3, #0
 8026140:	f340 81d9 	ble.w	80264f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8026144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026146:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802614a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802614e:	1e48      	subs	r0, r1, #1
 8026150:	f102 3cff 	add.w	ip, r2, #4294967295
 8026154:	9b06      	ldr	r3, [sp, #24]
 8026156:	2b00      	cmp	r3, #0
 8026158:	f340 80bc 	ble.w	80262d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802615c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026160:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026164:	d406      	bmi.n	8026174 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026166:	4586      	cmp	lr, r0
 8026168:	da04      	bge.n	8026174 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802616a:	2b00      	cmp	r3, #0
 802616c:	db02      	blt.n	8026174 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802616e:	4563      	cmp	r3, ip
 8026170:	f2c0 80b1 	blt.w	80262d6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8026174:	f11e 0e01 	adds.w	lr, lr, #1
 8026178:	f100 80a2 	bmi.w	80262c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802617c:	4571      	cmp	r1, lr
 802617e:	f2c0 809f 	blt.w	80262c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026182:	3301      	adds	r3, #1
 8026184:	f100 809c 	bmi.w	80262c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8026188:	429a      	cmp	r2, r3
 802618a:	f2c0 8099 	blt.w	80262c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802618e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026192:	46c8      	mov	r8, r9
 8026194:	f1bb 0f00 	cmp.w	fp, #0
 8026198:	f340 80b9 	ble.w	802630e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802619c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802619e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80261a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261a4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80261a8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80261ac:	1422      	asrs	r2, r4, #16
 80261ae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80261b2:	689b      	ldr	r3, [r3, #8]
 80261b4:	f100 80f6 	bmi.w	80263a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80261bc:	4552      	cmp	r2, sl
 80261be:	f280 80f1 	bge.w	80263a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261c2:	f1bc 0f00 	cmp.w	ip, #0
 80261c6:	f2c0 80ed 	blt.w	80263a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80261ce:	45d4      	cmp	ip, sl
 80261d0:	f280 80e8 	bge.w	80263a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80261d4:	b21b      	sxth	r3, r3
 80261d6:	9d07      	ldr	r5, [sp, #28]
 80261d8:	fb0c 2203 	mla	r2, ip, r3, r2
 80261dc:	eb05 0a02 	add.w	sl, r5, r2
 80261e0:	5caa      	ldrb	r2, [r5, r2]
 80261e2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80261e6:	2800      	cmp	r0, #0
 80261e8:	f000 80d3 	beq.w	8026392 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80261ec:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80261f0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80261f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80261f6:	b151      	cbz	r1, 802620e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80261f8:	eb0a 0203 	add.w	r2, sl, r3
 80261fc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8026200:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026204:	9309      	str	r3, [sp, #36]	; 0x24
 8026206:	7853      	ldrb	r3, [r2, #1]
 8026208:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802620c:	930c      	str	r3, [sp, #48]	; 0x30
 802620e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026210:	fb10 f201 	smulbb	r2, r0, r1
 8026214:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026216:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802621a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802621e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026222:	10d2      	asrs	r2, r2, #3
 8026224:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026228:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802622c:	ea4c 0c03 	orr.w	ip, ip, r3
 8026230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026232:	041b      	lsls	r3, r3, #16
 8026234:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026238:	432b      	orrs	r3, r5
 802623a:	4353      	muls	r3, r2
 802623c:	fb0a 330c 	mla	r3, sl, ip, r3
 8026240:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8026244:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026248:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802624c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8026250:	f1c1 0c10 	rsb	ip, r1, #16
 8026254:	ebac 0c00 	sub.w	ip, ip, r0
 8026258:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802625c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8026260:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8026264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026266:	0418      	lsls	r0, r3, #16
 8026268:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802626c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026270:	4318      	orrs	r0, r3
 8026272:	fb02 c200 	mla	r2, r2, r0, ip
 8026276:	0d51      	lsrs	r1, r2, #21
 8026278:	0952      	lsrs	r2, r2, #5
 802627a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802627e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026282:	430a      	orrs	r2, r1
 8026284:	b291      	uxth	r1, r2
 8026286:	10ca      	asrs	r2, r1, #3
 8026288:	1208      	asrs	r0, r1, #8
 802628a:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 802628e:	00c9      	lsls	r1, r1, #3
 8026290:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026294:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026298:	b2c9      	uxtb	r1, r1
 802629a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802629e:	021b      	lsls	r3, r3, #8
 80262a0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80262a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80262a8:	430b      	orrs	r3, r1
 80262aa:	f8c8 3000 	str.w	r3, [r8]
 80262ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80262b0:	f108 0804 	add.w	r8, r8, #4
 80262b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80262b8:	441c      	add	r4, r3
 80262ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80262bc:	441e      	add	r6, r3
 80262be:	e769      	b.n	8026194 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80262c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80262c2:	f109 0904 	add.w	r9, r9, #4
 80262c6:	441c      	add	r4, r3
 80262c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80262ca:	441e      	add	r6, r3
 80262cc:	9b06      	ldr	r3, [sp, #24]
 80262ce:	3b01      	subs	r3, #1
 80262d0:	9306      	str	r3, [sp, #24]
 80262d2:	e73f      	b.n	8026154 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80262d4:	d020      	beq.n	8026318 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80262d6:	9b06      	ldr	r3, [sp, #24]
 80262d8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80262da:	3b01      	subs	r3, #1
 80262dc:	fb00 4003 	mla	r0, r0, r3, r4
 80262e0:	1400      	asrs	r0, r0, #16
 80262e2:	f53f af54 	bmi.w	802618e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80262e6:	3901      	subs	r1, #1
 80262e8:	4288      	cmp	r0, r1
 80262ea:	f6bf af50 	bge.w	802618e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80262ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 80262f0:	fb01 6303 	mla	r3, r1, r3, r6
 80262f4:	141b      	asrs	r3, r3, #16
 80262f6:	f53f af4a 	bmi.w	802618e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80262fa:	3a01      	subs	r2, #1
 80262fc:	4293      	cmp	r3, r2
 80262fe:	f6bf af46 	bge.w	802618e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026302:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026306:	46ca      	mov	sl, r9
 8026308:	f1b8 0f00 	cmp.w	r8, #0
 802630c:	dc67      	bgt.n	80263de <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802630e:	9b06      	ldr	r3, [sp, #24]
 8026310:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026314:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8026318:	9b08      	ldr	r3, [sp, #32]
 802631a:	2b00      	cmp	r3, #0
 802631c:	f340 80eb 	ble.w	80264f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8026320:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026324:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026326:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802632a:	eeb0 6a62 	vmov.f32	s12, s5
 802632e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026332:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026336:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802633a:	ee16 4a10 	vmov	r4, s12
 802633e:	eeb0 6a43 	vmov.f32	s12, s6
 8026342:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026346:	ee16 6a10 	vmov	r6, s12
 802634a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802634e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026352:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026356:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802635a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802635e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026362:	ee12 2a90 	vmov	r2, s5
 8026366:	eef0 2a47 	vmov.f32	s5, s14
 802636a:	fb92 f3f3 	sdiv	r3, r2, r3
 802636e:	ee13 2a10 	vmov	r2, s6
 8026372:	931f      	str	r3, [sp, #124]	; 0x7c
 8026374:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026376:	eeb0 3a67 	vmov.f32	s6, s15
 802637a:	fb92 f3f3 	sdiv	r3, r2, r3
 802637e:	9320      	str	r3, [sp, #128]	; 0x80
 8026380:	9b08      	ldr	r3, [sp, #32]
 8026382:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026384:	3b01      	subs	r3, #1
 8026386:	9308      	str	r3, [sp, #32]
 8026388:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802638a:	bf08      	it	eq
 802638c:	4613      	moveq	r3, r2
 802638e:	9306      	str	r3, [sp, #24]
 8026390:	e6d1      	b.n	8026136 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8026392:	2900      	cmp	r1, #0
 8026394:	f43f af3b 	beq.w	802620e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8026398:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802639c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80263a0:	9309      	str	r3, [sp, #36]	; 0x24
 80263a2:	e734      	b.n	802620e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80263a4:	f112 0a01 	adds.w	sl, r2, #1
 80263a8:	d481      	bmi.n	80262ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263aa:	4553      	cmp	r3, sl
 80263ac:	f6ff af7f 	blt.w	80262ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263b0:	f11c 0a01 	adds.w	sl, ip, #1
 80263b4:	f53f af7b 	bmi.w	80262ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263b8:	45d6      	cmp	lr, sl
 80263ba:	f6ff af78 	blt.w	80262ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263be:	b21b      	sxth	r3, r3
 80263c0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80263c4:	fa0f f28e 	sxth.w	r2, lr
 80263c8:	9300      	str	r3, [sp, #0]
 80263ca:	463b      	mov	r3, r7
 80263cc:	9201      	str	r2, [sp, #4]
 80263ce:	9a07      	ldr	r2, [sp, #28]
 80263d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80263d4:	4641      	mov	r1, r8
 80263d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80263d8:	f7ff fdb0 	bl	8025f3c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 80263dc:	e767      	b.n	80262ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80263e0:	1422      	asrs	r2, r4, #16
 80263e2:	1431      	asrs	r1, r6, #16
 80263e4:	9d07      	ldr	r5, [sp, #28]
 80263e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80263ea:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80263ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80263f2:	fb03 2101 	mla	r1, r3, r1, r2
 80263f6:	9a07      	ldr	r2, [sp, #28]
 80263f8:	440a      	add	r2, r1
 80263fa:	5c69      	ldrb	r1, [r5, r1]
 80263fc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8026400:	f1be 0f00 	cmp.w	lr, #0
 8026404:	d070      	beq.n	80264e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026406:	f892 c001 	ldrb.w	ip, [r2, #1]
 802640a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802640e:	950d      	str	r5, [sp, #52]	; 0x34
 8026410:	b150      	cbz	r0, 8026428 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8026412:	eb02 0c03 	add.w	ip, r2, r3
 8026416:	5cd3      	ldrb	r3, [r2, r3]
 8026418:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802641c:	930a      	str	r3, [sp, #40]	; 0x28
 802641e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026422:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026426:	930e      	str	r3, [sp, #56]	; 0x38
 8026428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802642a:	fb1e f200 	smulbb	r2, lr, r0
 802642e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026430:	f108 38ff 	add.w	r8, r8, #4294967295
 8026434:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026438:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802643c:	10d2      	asrs	r2, r2, #3
 802643e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026442:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026446:	ea4c 0c03 	orr.w	ip, ip, r3
 802644a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802644e:	9311      	str	r3, [sp, #68]	; 0x44
 8026450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026452:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026454:	041b      	lsls	r3, r3, #16
 8026456:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802645a:	ea43 030b 	orr.w	r3, r3, fp
 802645e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026462:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026466:	4353      	muls	r3, r2
 8026468:	fb05 3c0c 	mla	ip, r5, ip, r3
 802646c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8026470:	ea43 0b01 	orr.w	fp, r3, r1
 8026474:	f1c0 0110 	rsb	r1, r0, #16
 8026478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802647a:	eba1 0e0e 	sub.w	lr, r1, lr
 802647e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8026482:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026486:	fb0e cc0b 	mla	ip, lr, fp, ip
 802648a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802648e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8026492:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026496:	ea4b 0e0e 	orr.w	lr, fp, lr
 802649a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802649e:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80264a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80264a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80264aa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80264ae:	ea42 0c0c 	orr.w	ip, r2, ip
 80264b2:	fa1f f28c 	uxth.w	r2, ip
 80264b6:	10d3      	asrs	r3, r2, #3
 80264b8:	1211      	asrs	r1, r2, #8
 80264ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80264be:	00d2      	lsls	r2, r2, #3
 80264c0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80264c4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80264c8:	b2d2      	uxtb	r2, r2
 80264ca:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80264ce:	021b      	lsls	r3, r3, #8
 80264d0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80264d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80264d8:	431a      	orrs	r2, r3
 80264da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80264dc:	441c      	add	r4, r3
 80264de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80264e0:	f84a 2b04 	str.w	r2, [sl], #4
 80264e4:	441e      	add	r6, r3
 80264e6:	e70f      	b.n	8026308 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80264e8:	2800      	cmp	r0, #0
 80264ea:	d09d      	beq.n	8026428 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80264ec:	5cd3      	ldrb	r3, [r2, r3]
 80264ee:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80264f2:	930a      	str	r3, [sp, #40]	; 0x28
 80264f4:	e798      	b.n	8026428 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80264f6:	b013      	add	sp, #76	; 0x4c
 80264f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080264fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 80264fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026500:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 8026504:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8026508:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802650c:	f1b8 0f00 	cmp.w	r8, #0
 8026510:	fb08 750e 	mla	r5, r8, lr, r7
 8026514:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8026518:	9001      	str	r0, [sp, #4]
 802651a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 802651e:	eb02 0a05 	add.w	sl, r2, r5
 8026522:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8026526:	6808      	ldr	r0, [r1, #0]
 8026528:	f2c0 80b2 	blt.w	8026690 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802652c:	45c3      	cmp	fp, r8
 802652e:	f340 80af 	ble.w	8026690 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8026532:	2f00      	cmp	r7, #0
 8026534:	f2c0 80aa 	blt.w	802668c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8026538:	45be      	cmp	lr, r7
 802653a:	f340 80a7 	ble.w	802668c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 802653e:	5d55      	ldrb	r5, [r2, r5]
 8026540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026544:	195a      	adds	r2, r3, r5
 8026546:	5d5d      	ldrb	r5, [r3, r5]
 8026548:	f892 9001 	ldrb.w	r9, [r2, #1]
 802654c:	7892      	ldrb	r2, [r2, #2]
 802654e:	0412      	lsls	r2, r2, #16
 8026550:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8026554:	432a      	orrs	r2, r5
 8026556:	1c7d      	adds	r5, r7, #1
 8026558:	f100 809b 	bmi.w	8026692 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802655c:	45ae      	cmp	lr, r5
 802655e:	f340 8098 	ble.w	8026692 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026562:	2c00      	cmp	r4, #0
 8026564:	f000 8095 	beq.w	8026692 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8026568:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802656c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8026570:	eb03 0509 	add.w	r5, r3, r9
 8026574:	f813 9009 	ldrb.w	r9, [r3, r9]
 8026578:	786e      	ldrb	r6, [r5, #1]
 802657a:	78ad      	ldrb	r5, [r5, #2]
 802657c:	042d      	lsls	r5, r5, #16
 802657e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8026582:	ea45 0509 	orr.w	r5, r5, r9
 8026586:	f118 0801 	adds.w	r8, r8, #1
 802658a:	f100 8086 	bmi.w	802669a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802658e:	45c3      	cmp	fp, r8
 8026590:	f340 8083 	ble.w	802669a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 8026594:	9e01      	ldr	r6, [sp, #4]
 8026596:	2e00      	cmp	r6, #0
 8026598:	d07f      	beq.n	802669a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802659a:	2f00      	cmp	r7, #0
 802659c:	eb0a 090e 	add.w	r9, sl, lr
 80265a0:	db79      	blt.n	8026696 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80265a2:	45be      	cmp	lr, r7
 80265a4:	dd77      	ble.n	8026696 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 80265a6:	f81a a00e 	ldrb.w	sl, [sl, lr]
 80265aa:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80265ae:	eb03 080a 	add.w	r8, r3, sl
 80265b2:	f813 a00a 	ldrb.w	sl, [r3, sl]
 80265b6:	f898 b001 	ldrb.w	fp, [r8, #1]
 80265ba:	f898 8002 	ldrb.w	r8, [r8, #2]
 80265be:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80265c2:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 80265c6:	ea48 080a 	orr.w	r8, r8, sl
 80265ca:	3701      	adds	r7, #1
 80265cc:	d411      	bmi.n	80265f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80265ce:	45be      	cmp	lr, r7
 80265d0:	dd0f      	ble.n	80265f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80265d2:	b174      	cbz	r4, 80265f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80265d4:	f899 7001 	ldrb.w	r7, [r9, #1]
 80265d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80265dc:	eb03 0e07 	add.w	lr, r3, r7
 80265e0:	5ddb      	ldrb	r3, [r3, r7]
 80265e2:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80265e6:	f89e 9001 	ldrb.w	r9, [lr, #1]
 80265ea:	0400      	lsls	r0, r0, #16
 80265ec:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 80265f0:	4318      	orrs	r0, r3
 80265f2:	b2a4      	uxth	r4, r4
 80265f4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80265f8:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 80265fc:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8026600:	fb04 fe06 	mul.w	lr, r4, r6
 8026604:	0124      	lsls	r4, r4, #4
 8026606:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802660a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802660e:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 8026612:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8026616:	eba4 040e 	sub.w	r4, r4, lr
 802661a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802661e:	b2b6      	uxth	r6, r6
 8026620:	b2a4      	uxth	r4, r4
 8026622:	eba9 0906 	sub.w	r9, r9, r6
 8026626:	fb04 f303 	mul.w	r3, r4, r3
 802662a:	fa1f f989 	uxth.w	r9, r9
 802662e:	fb04 f405 	mul.w	r4, r4, r5
 8026632:	fb09 3707 	mla	r7, r9, r7, r3
 8026636:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802663a:	fb09 4402 	mla	r4, r9, r2, r4
 802663e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026642:	fb0e 7703 	mla	r7, lr, r3, r7
 8026646:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 802664a:	fb0e 4000 	mla	r0, lr, r0, r4
 802664e:	fb06 7303 	mla	r3, r6, r3, r7
 8026652:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026656:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802665a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 802665e:	fb06 0303 	mla	r3, r6, r3, r0
 8026662:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8026666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802666a:	ea43 0307 	orr.w	r3, r3, r7
 802666e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026672:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026676:	b2d4      	uxtb	r4, r2
 8026678:	b2c5      	uxtb	r5, r0
 802667a:	d110      	bne.n	802669e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 802667c:	700b      	strb	r3, [r1, #0]
 802667e:	7048      	strb	r0, [r1, #1]
 8026680:	708a      	strb	r2, [r1, #2]
 8026682:	f881 c003 	strb.w	ip, [r1, #3]
 8026686:	b003      	add	sp, #12
 8026688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802668c:	4602      	mov	r2, r0
 802668e:	e762      	b.n	8026556 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 8026690:	4602      	mov	r2, r0
 8026692:	4605      	mov	r5, r0
 8026694:	e777      	b.n	8026586 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 8026696:	4680      	mov	r8, r0
 8026698:	e797      	b.n	80265ca <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 802669a:	4680      	mov	r8, r0
 802669c:	e7a9      	b.n	80265f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802669e:	f1bc 0f00 	cmp.w	ip, #0
 80266a2:	d0f0      	beq.n	8026686 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 80266a4:	78ce      	ldrb	r6, [r1, #3]
 80266a6:	b2db      	uxtb	r3, r3
 80266a8:	fb1c f505 	smulbb	r5, ip, r5
 80266ac:	fb0c f206 	mul.w	r2, ip, r6
 80266b0:	1c50      	adds	r0, r2, #1
 80266b2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80266b6:	eb0c 0206 	add.w	r2, ip, r6
 80266ba:	1200      	asrs	r0, r0, #8
 80266bc:	1a12      	subs	r2, r2, r0
 80266be:	1a30      	subs	r0, r6, r0
 80266c0:	780e      	ldrb	r6, [r1, #0]
 80266c2:	b2d2      	uxtb	r2, r2
 80266c4:	4346      	muls	r6, r0
 80266c6:	70ca      	strb	r2, [r1, #3]
 80266c8:	fb0c 6303 	mla	r3, ip, r3, r6
 80266cc:	fb1c fc04 	smulbb	ip, ip, r4
 80266d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80266d4:	700b      	strb	r3, [r1, #0]
 80266d6:	784b      	ldrb	r3, [r1, #1]
 80266d8:	fb00 5303 	mla	r3, r0, r3, r5
 80266dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80266e0:	704b      	strb	r3, [r1, #1]
 80266e2:	788b      	ldrb	r3, [r1, #2]
 80266e4:	fb00 cc03 	mla	ip, r0, r3, ip
 80266e8:	fb9c fcf2 	sdiv	ip, ip, r2
 80266ec:	f881 c002 	strb.w	ip, [r1, #2]
 80266f0:	e7c9      	b.n	8026686 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

080266f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80266f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266f6:	b091      	sub	sp, #68	; 0x44
 80266f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80266fc:	920e      	str	r2, [sp, #56]	; 0x38
 80266fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026700:	900f      	str	r0, [sp, #60]	; 0x3c
 8026702:	910c      	str	r1, [sp, #48]	; 0x30
 8026704:	6850      	ldr	r0, [r2, #4]
 8026706:	9309      	str	r3, [sp, #36]	; 0x24
 8026708:	6812      	ldr	r2, [r2, #0]
 802670a:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 802670e:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 8026712:	fb00 1303 	mla	r3, r0, r3, r1
 8026716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802671a:	930a      	str	r3, [sp, #40]	; 0x28
 802671c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802671e:	681b      	ldr	r3, [r3, #0]
 8026720:	930b      	str	r3, [sp, #44]	; 0x2c
 8026722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026724:	685d      	ldr	r5, [r3, #4]
 8026726:	3504      	adds	r5, #4
 8026728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802672a:	2b00      	cmp	r3, #0
 802672c:	dc03      	bgt.n	8026736 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802672e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026730:	2b00      	cmp	r3, #0
 8026732:	f340 825d 	ble.w	8026bf0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026736:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8026738:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802673c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026740:	1e48      	subs	r0, r1, #1
 8026742:	1e56      	subs	r6, r2, #1
 8026744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026746:	2b00      	cmp	r3, #0
 8026748:	f340 80c9 	ble.w	80268de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802674c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 802674e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026750:	143f      	asrs	r7, r7, #16
 8026752:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026756:	d406      	bmi.n	8026766 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026758:	4287      	cmp	r7, r0
 802675a:	da04      	bge.n	8026766 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802675c:	2b00      	cmp	r3, #0
 802675e:	db02      	blt.n	8026766 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8026760:	42b3      	cmp	r3, r6
 8026762:	f2c0 80bd 	blt.w	80268e0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026766:	3701      	adds	r7, #1
 8026768:	f100 80aa 	bmi.w	80268c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802676c:	42b9      	cmp	r1, r7
 802676e:	f2c0 80a7 	blt.w	80268c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026772:	3301      	adds	r3, #1
 8026774:	f100 80a4 	bmi.w	80268c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026778:	429a      	cmp	r2, r3
 802677a:	f2c0 80a1 	blt.w	80268c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026780:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026782:	930d      	str	r3, [sp, #52]	; 0x34
 8026784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026786:	2b00      	cmp	r3, #0
 8026788:	f340 80ca 	ble.w	8026920 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802678c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802678e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026790:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026792:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8026796:	141f      	asrs	r7, r3, #16
 8026798:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802679a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802679e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80267a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80267a2:	1400      	asrs	r0, r0, #16
 80267a4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80267a8:	6892      	ldr	r2, [r2, #8]
 80267aa:	f100 8138 	bmi.w	8026a1e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80267ae:	f102 3eff 	add.w	lr, r2, #4294967295
 80267b2:	4570      	cmp	r0, lr
 80267b4:	f280 8133 	bge.w	8026a1e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80267b8:	2f00      	cmp	r7, #0
 80267ba:	f2c0 8130 	blt.w	8026a1e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80267be:	f10c 3eff 	add.w	lr, ip, #4294967295
 80267c2:	4577      	cmp	r7, lr
 80267c4:	f280 812b 	bge.w	8026a1e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80267c8:	b212      	sxth	r2, r2
 80267ca:	fb07 0002 	mla	r0, r7, r2, r0
 80267ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80267d0:	eb07 0c00 	add.w	ip, r7, r0
 80267d4:	5c38      	ldrb	r0, [r7, r0]
 80267d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80267da:	eb05 0800 	add.w	r8, r5, r0
 80267de:	2b00      	cmp	r3, #0
 80267e0:	f000 80e2 	beq.w	80269a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80267e4:	f89c e001 	ldrb.w	lr, [ip, #1]
 80267e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80267ec:	44ae      	add	lr, r5
 80267ee:	2900      	cmp	r1, #0
 80267f0:	f000 80e3 	beq.w	80269ba <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80267f4:	eb0c 0702 	add.w	r7, ip, r2
 80267f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80267fc:	f897 c001 	ldrb.w	ip, [r7, #1]
 8026800:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026804:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026808:	442a      	add	r2, r5
 802680a:	44ac      	add	ip, r5
 802680c:	b29b      	uxth	r3, r3
 802680e:	5c2f      	ldrb	r7, [r5, r0]
 8026810:	b289      	uxth	r1, r1
 8026812:	f89e 0000 	ldrb.w	r0, [lr]
 8026816:	f89e a001 	ldrb.w	sl, [lr, #1]
 802681a:	2cff      	cmp	r4, #255	; 0xff
 802681c:	fb03 fb01 	mul.w	fp, r3, r1
 8026820:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8026824:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026828:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802682c:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8026830:	eba3 030b 	sub.w	r3, r3, fp
 8026834:	b289      	uxth	r1, r1
 8026836:	b29b      	uxth	r3, r3
 8026838:	eba9 0901 	sub.w	r9, r9, r1
 802683c:	fb03 f000 	mul.w	r0, r3, r0
 8026840:	fa1f f989 	uxth.w	r9, r9
 8026844:	fb03 fa0a 	mul.w	sl, r3, sl
 8026848:	fb03 f30e 	mul.w	r3, r3, lr
 802684c:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026850:	fb09 0007 	mla	r0, r9, r7, r0
 8026854:	7817      	ldrb	r7, [r2, #0]
 8026856:	fb01 0007 	mla	r0, r1, r7, r0
 802685a:	f89c 7000 	ldrb.w	r7, [ip]
 802685e:	fb0b 0707 	mla	r7, fp, r7, r0
 8026862:	f898 0001 	ldrb.w	r0, [r8, #1]
 8026866:	f898 8002 	ldrb.w	r8, [r8, #2]
 802686a:	fb09 aa00 	mla	sl, r9, r0, sl
 802686e:	7850      	ldrb	r0, [r2, #1]
 8026870:	fb09 3308 	mla	r3, r9, r8, r3
 8026874:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8026878:	fb01 aa00 	mla	sl, r1, r0, sl
 802687c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026880:	fb01 330e 	mla	r3, r1, lr, r3
 8026884:	ea4f 2727 	mov.w	r7, r7, asr #8
 8026888:	fb0b a000 	mla	r0, fp, r0, sl
 802688c:	fb0b 3b02 	mla	fp, fp, r2, r3
 8026890:	ea4f 2020 	mov.w	r0, r0, asr #8
 8026894:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026898:	f040 8095 	bne.w	80269c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802689c:	7037      	strb	r7, [r6, #0]
 802689e:	7070      	strb	r0, [r6, #1]
 80268a0:	f886 b002 	strb.w	fp, [r6, #2]
 80268a4:	70f4      	strb	r4, [r6, #3]
 80268a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80268a8:	3604      	adds	r6, #4
 80268aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80268ac:	4413      	add	r3, r2
 80268ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80268b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80268b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80268b4:	4413      	add	r3, r2
 80268b6:	931c      	str	r3, [sp, #112]	; 0x70
 80268b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80268ba:	3b01      	subs	r3, #1
 80268bc:	930d      	str	r3, [sp, #52]	; 0x34
 80268be:	e761      	b.n	8026784 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80268c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80268c2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80268c4:	443b      	add	r3, r7
 80268c6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80268c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80268ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80268cc:	443b      	add	r3, r7
 80268ce:	931c      	str	r3, [sp, #112]	; 0x70
 80268d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80268d2:	3b01      	subs	r3, #1
 80268d4:	9309      	str	r3, [sp, #36]	; 0x24
 80268d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80268d8:	3304      	adds	r3, #4
 80268da:	930a      	str	r3, [sp, #40]	; 0x28
 80268dc:	e732      	b.n	8026744 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80268de:	d026      	beq.n	802692e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 80268e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80268e2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80268e4:	3b01      	subs	r3, #1
 80268e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80268e8:	fb00 6003 	mla	r0, r0, r3, r6
 80268ec:	1400      	asrs	r0, r0, #16
 80268ee:	f53f af46 	bmi.w	802677e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80268f2:	3901      	subs	r1, #1
 80268f4:	4288      	cmp	r0, r1
 80268f6:	f6bf af42 	bge.w	802677e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80268fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80268fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80268fe:	fb01 0303 	mla	r3, r1, r3, r0
 8026902:	141b      	asrs	r3, r3, #16
 8026904:	f53f af3b 	bmi.w	802677e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026908:	3a01      	subs	r2, #1
 802690a:	4293      	cmp	r3, r2
 802690c:	f6bf af37 	bge.w	802677e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026912:	1d19      	adds	r1, r3, #4
 8026914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026916:	930d      	str	r3, [sp, #52]	; 0x34
 8026918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802691a:	2b00      	cmp	r3, #0
 802691c:	f300 809e 	bgt.w	8026a5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8026920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802692c:	930a      	str	r3, [sp, #40]	; 0x28
 802692e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026930:	2b00      	cmp	r3, #0
 8026932:	f340 815d 	ble.w	8026bf0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8026936:	ee30 0a04 	vadd.f32	s0, s0, s8
 802693a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802693c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026940:	eeb0 6a62 	vmov.f32	s12, s5
 8026944:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026948:	ee31 1a05 	vadd.f32	s2, s2, s10
 802694c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026950:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 8026954:	eeb0 6a43 	vmov.f32	s12, s6
 8026958:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802695c:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8026960:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026964:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026968:	ee77 2a62 	vsub.f32	s5, s14, s5
 802696c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026970:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026974:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026978:	ee12 2a90 	vmov	r2, s5
 802697c:	eef0 2a47 	vmov.f32	s5, s14
 8026980:	fb92 f3f3 	sdiv	r3, r2, r3
 8026984:	ee13 2a10 	vmov	r2, s6
 8026988:	931d      	str	r3, [sp, #116]	; 0x74
 802698a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802698c:	eeb0 3a67 	vmov.f32	s6, s15
 8026990:	fb92 f3f3 	sdiv	r3, r2, r3
 8026994:	931e      	str	r3, [sp, #120]	; 0x78
 8026996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802699a:	3b01      	subs	r3, #1
 802699c:	930c      	str	r3, [sp, #48]	; 0x30
 802699e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80269a0:	bf08      	it	eq
 80269a2:	4613      	moveq	r3, r2
 80269a4:	9309      	str	r3, [sp, #36]	; 0x24
 80269a6:	e6bf      	b.n	8026728 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80269a8:	b151      	cbz	r1, 80269c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 80269aa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80269ae:	46c4      	mov	ip, r8
 80269b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80269b4:	442a      	add	r2, r5
 80269b6:	46c6      	mov	lr, r8
 80269b8:	e728      	b.n	802680c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80269ba:	46c4      	mov	ip, r8
 80269bc:	4642      	mov	r2, r8
 80269be:	e725      	b.n	802680c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80269c0:	46c4      	mov	ip, r8
 80269c2:	4642      	mov	r2, r8
 80269c4:	e7f7      	b.n	80269b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80269c6:	2c00      	cmp	r4, #0
 80269c8:	f43f af6d 	beq.w	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80269cc:	78f1      	ldrb	r1, [r6, #3]
 80269ce:	b2ff      	uxtb	r7, r7
 80269d0:	f896 a001 	ldrb.w	sl, [r6, #1]
 80269d4:	b2c0      	uxtb	r0, r0
 80269d6:	fb04 f201 	mul.w	r2, r4, r1
 80269da:	fa5f fb8b 	uxtb.w	fp, fp
 80269de:	1c53      	adds	r3, r2, #1
 80269e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80269e4:	1862      	adds	r2, r4, r1
 80269e6:	121b      	asrs	r3, r3, #8
 80269e8:	1ad2      	subs	r2, r2, r3
 80269ea:	1acb      	subs	r3, r1, r3
 80269ec:	7831      	ldrb	r1, [r6, #0]
 80269ee:	fb03 fa0a 	mul.w	sl, r3, sl
 80269f2:	b2d2      	uxtb	r2, r2
 80269f4:	4359      	muls	r1, r3
 80269f6:	fb04 a000 	mla	r0, r4, r0, sl
 80269fa:	fb04 1707 	mla	r7, r4, r7, r1
 80269fe:	78b1      	ldrb	r1, [r6, #2]
 8026a00:	70f2      	strb	r2, [r6, #3]
 8026a02:	434b      	muls	r3, r1
 8026a04:	fb04 3b0b 	mla	fp, r4, fp, r3
 8026a08:	fb97 f7f2 	sdiv	r7, r7, r2
 8026a0c:	fb90 f0f2 	sdiv	r0, r0, r2
 8026a10:	fb9b fbf2 	sdiv	fp, fp, r2
 8026a14:	7037      	strb	r7, [r6, #0]
 8026a16:	7070      	strb	r0, [r6, #1]
 8026a18:	f886 b002 	strb.w	fp, [r6, #2]
 8026a1c:	e743      	b.n	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a1e:	f110 0e01 	adds.w	lr, r0, #1
 8026a22:	f53f af40 	bmi.w	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a26:	4572      	cmp	r2, lr
 8026a28:	f6ff af3d 	blt.w	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a2c:	f117 0e01 	adds.w	lr, r7, #1
 8026a30:	f53f af39 	bmi.w	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a34:	45f4      	cmp	ip, lr
 8026a36:	f6ff af36 	blt.w	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a3a:	b212      	sxth	r2, r2
 8026a3c:	9002      	str	r0, [sp, #8]
 8026a3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026a40:	9200      	str	r2, [sp, #0]
 8026a42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026a44:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8026a48:	fa0f f38c 	sxth.w	r3, ip
 8026a4c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026a50:	9301      	str	r3, [sp, #4]
 8026a52:	4631      	mov	r1, r6
 8026a54:	462b      	mov	r3, r5
 8026a56:	f7ff fd51 	bl	80264fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8026a5a:	e724      	b.n	80268a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8026a5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026a5e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8026a60:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8026a64:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8026a66:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8026a68:	1436      	asrs	r6, r6, #16
 8026a6a:	143f      	asrs	r7, r7, #16
 8026a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026a6e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026a72:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8026a76:	fb02 7606 	mla	r6, r2, r6, r7
 8026a7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026a7c:	eb07 0c06 	add.w	ip, r7, r6
 8026a80:	5dbe      	ldrb	r6, [r7, r6]
 8026a82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026a86:	eb05 0806 	add.w	r8, r5, r6
 8026a8a:	2b00      	cmp	r3, #0
 8026a8c:	d06d      	beq.n	8026b6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8026a8e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8026a92:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8026a96:	44ae      	add	lr, r5
 8026a98:	2800      	cmp	r0, #0
 8026a9a:	d06f      	beq.n	8026b7c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8026a9c:	eb0c 0702 	add.w	r7, ip, r2
 8026aa0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026aa4:	f897 c001 	ldrb.w	ip, [r7, #1]
 8026aa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026aac:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8026ab0:	442a      	add	r2, r5
 8026ab2:	44ac      	add	ip, r5
 8026ab4:	b29b      	uxth	r3, r3
 8026ab6:	5daf      	ldrb	r7, [r5, r6]
 8026ab8:	b280      	uxth	r0, r0
 8026aba:	f89e 6000 	ldrb.w	r6, [lr]
 8026abe:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026ac2:	2cff      	cmp	r4, #255	; 0xff
 8026ac4:	fb03 fb00 	mul.w	fp, r3, r0
 8026ac8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8026acc:	f89e e002 	ldrb.w	lr, [lr, #2]
 8026ad0:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8026ad4:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8026ad8:	eba3 030b 	sub.w	r3, r3, fp
 8026adc:	b280      	uxth	r0, r0
 8026ade:	b29b      	uxth	r3, r3
 8026ae0:	eba9 0900 	sub.w	r9, r9, r0
 8026ae4:	fb03 f606 	mul.w	r6, r3, r6
 8026ae8:	fa1f f989 	uxth.w	r9, r9
 8026aec:	fb03 fa0a 	mul.w	sl, r3, sl
 8026af0:	fb03 f30e 	mul.w	r3, r3, lr
 8026af4:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026af8:	fb09 6607 	mla	r6, r9, r7, r6
 8026afc:	7817      	ldrb	r7, [r2, #0]
 8026afe:	fb00 6607 	mla	r6, r0, r7, r6
 8026b02:	f89c 7000 	ldrb.w	r7, [ip]
 8026b06:	fb0b 6707 	mla	r7, fp, r7, r6
 8026b0a:	f898 6001 	ldrb.w	r6, [r8, #1]
 8026b0e:	f898 8002 	ldrb.w	r8, [r8, #2]
 8026b12:	fb09 aa06 	mla	sl, r9, r6, sl
 8026b16:	7856      	ldrb	r6, [r2, #1]
 8026b18:	fb09 3308 	mla	r3, r9, r8, r3
 8026b1c:	ea4f 2727 	mov.w	r7, r7, asr #8
 8026b20:	fb00 aa06 	mla	sl, r0, r6, sl
 8026b24:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8026b28:	fb00 330e 	mla	r3, r0, lr, r3
 8026b2c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8026b30:	fb0b a606 	mla	r6, fp, r6, sl
 8026b34:	fb0b 330e 	mla	r3, fp, lr, r3
 8026b38:	ea4f 2626 	mov.w	r6, r6, asr #8
 8026b3c:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8026b40:	d122      	bne.n	8026b88 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8026b42:	f801 7c04 	strb.w	r7, [r1, #-4]
 8026b46:	f801 6c03 	strb.w	r6, [r1, #-3]
 8026b4a:	f801 bc02 	strb.w	fp, [r1, #-2]
 8026b4e:	f801 4c01 	strb.w	r4, [r1, #-1]
 8026b52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026b54:	3104      	adds	r1, #4
 8026b56:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026b58:	4413      	add	r3, r2
 8026b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026b5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8026b5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026b60:	4413      	add	r3, r2
 8026b62:	931c      	str	r3, [sp, #112]	; 0x70
 8026b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b66:	3b01      	subs	r3, #1
 8026b68:	e6d5      	b.n	8026916 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8026b6a:	b150      	cbz	r0, 8026b82 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026b6c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8026b70:	46c4      	mov	ip, r8
 8026b72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026b76:	442a      	add	r2, r5
 8026b78:	46c6      	mov	lr, r8
 8026b7a:	e79b      	b.n	8026ab4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026b7c:	46c4      	mov	ip, r8
 8026b7e:	4642      	mov	r2, r8
 8026b80:	e798      	b.n	8026ab4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026b82:	46c4      	mov	ip, r8
 8026b84:	4642      	mov	r2, r8
 8026b86:	e7f7      	b.n	8026b78 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8026b88:	2c00      	cmp	r4, #0
 8026b8a:	d0e2      	beq.n	8026b52 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8026b8c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8026b90:	b2ff      	uxtb	r7, r7
 8026b92:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8026b96:	b2f6      	uxtb	r6, r6
 8026b98:	fb04 f300 	mul.w	r3, r4, r0
 8026b9c:	eb04 0c00 	add.w	ip, r4, r0
 8026ba0:	fa5f fb8b 	uxtb.w	fp, fp
 8026ba4:	1c5a      	adds	r2, r3, #1
 8026ba6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026baa:	1213      	asrs	r3, r2, #8
 8026bac:	1ac2      	subs	r2, r0, r3
 8026bae:	ebac 0c03 	sub.w	ip, ip, r3
 8026bb2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8026bb6:	fb02 fa0a 	mul.w	sl, r2, sl
 8026bba:	fa5f fc8c 	uxtb.w	ip, ip
 8026bbe:	4353      	muls	r3, r2
 8026bc0:	fb04 a606 	mla	r6, r4, r6, sl
 8026bc4:	fb04 3707 	mla	r7, r4, r7, r3
 8026bc8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8026bcc:	f801 cc01 	strb.w	ip, [r1, #-1]
 8026bd0:	435a      	muls	r2, r3
 8026bd2:	fb04 2b0b 	mla	fp, r4, fp, r2
 8026bd6:	fb97 f7fc 	sdiv	r7, r7, ip
 8026bda:	fb96 f6fc 	sdiv	r6, r6, ip
 8026bde:	fb9b fbfc 	sdiv	fp, fp, ip
 8026be2:	f801 7c04 	strb.w	r7, [r1, #-4]
 8026be6:	f801 6c03 	strb.w	r6, [r1, #-3]
 8026bea:	f801 bc02 	strb.w	fp, [r1, #-2]
 8026bee:	e7b0      	b.n	8026b52 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8026bf0:	b011      	add	sp, #68	; 0x44
 8026bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bf6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8026bf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bfa:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
 8026bfe:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8026c02:	f1b8 0f00 	cmp.w	r8, #0
 8026c06:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8026c0a:	fb08 740e 	mla	r4, r8, lr, r7
 8026c0e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8026c12:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8026c16:	eb02 0904 	add.w	r9, r2, r4
 8026c1a:	6808      	ldr	r0, [r1, #0]
 8026c1c:	f2c0 8099 	blt.w	8026d52 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8026c20:	45c2      	cmp	sl, r8
 8026c22:	f340 8096 	ble.w	8026d52 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8026c26:	2f00      	cmp	r7, #0
 8026c28:	f2c0 8091 	blt.w	8026d4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8026c2c:	45be      	cmp	lr, r7
 8026c2e:	f340 808e 	ble.w	8026d4e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8026c32:	5d12      	ldrb	r2, [r2, r4]
 8026c34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c38:	189c      	adds	r4, r3, r2
 8026c3a:	5c9a      	ldrb	r2, [r3, r2]
 8026c3c:	7866      	ldrb	r6, [r4, #1]
 8026c3e:	78a4      	ldrb	r4, [r4, #2]
 8026c40:	0424      	lsls	r4, r4, #16
 8026c42:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8026c46:	4314      	orrs	r4, r2
 8026c48:	1c7a      	adds	r2, r7, #1
 8026c4a:	f100 8085 	bmi.w	8026d58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026c4e:	4596      	cmp	lr, r2
 8026c50:	f340 8082 	ble.w	8026d58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026c54:	2d00      	cmp	r5, #0
 8026c56:	d07f      	beq.n	8026d58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8026c58:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c60:	189e      	adds	r6, r3, r2
 8026c62:	5c9a      	ldrb	r2, [r3, r2]
 8026c64:	f896 b001 	ldrb.w	fp, [r6, #1]
 8026c68:	78b6      	ldrb	r6, [r6, #2]
 8026c6a:	0436      	lsls	r6, r6, #16
 8026c6c:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8026c70:	4316      	orrs	r6, r2
 8026c72:	f118 0801 	adds.w	r8, r8, #1
 8026c76:	d473      	bmi.n	8026d60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026c78:	45c2      	cmp	sl, r8
 8026c7a:	dd71      	ble.n	8026d60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026c7c:	f1bc 0f00 	cmp.w	ip, #0
 8026c80:	d06e      	beq.n	8026d60 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8026c82:	2f00      	cmp	r7, #0
 8026c84:	eb09 080e 	add.w	r8, r9, lr
 8026c88:	db68      	blt.n	8026d5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8026c8a:	45be      	cmp	lr, r7
 8026c8c:	dd66      	ble.n	8026d5c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8026c8e:	f819 900e 	ldrb.w	r9, [r9, lr]
 8026c92:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8026c96:	eb03 0209 	add.w	r2, r3, r9
 8026c9a:	f813 9009 	ldrb.w	r9, [r3, r9]
 8026c9e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8026ca2:	7892      	ldrb	r2, [r2, #2]
 8026ca4:	0412      	lsls	r2, r2, #16
 8026ca6:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8026caa:	ea42 0209 	orr.w	r2, r2, r9
 8026cae:	3701      	adds	r7, #1
 8026cb0:	d411      	bmi.n	8026cd6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8026cb2:	45be      	cmp	lr, r7
 8026cb4:	dd0f      	ble.n	8026cd6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8026cb6:	b175      	cbz	r5, 8026cd6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8026cb8:	f898 7001 	ldrb.w	r7, [r8, #1]
 8026cbc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026cc0:	eb03 0e07 	add.w	lr, r3, r7
 8026cc4:	5ddb      	ldrb	r3, [r3, r7]
 8026cc6:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8026cca:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8026cce:	0400      	lsls	r0, r0, #16
 8026cd0:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8026cd4:	4318      	orrs	r0, r3
 8026cd6:	b2ad      	uxth	r5, r5
 8026cd8:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8026cdc:	fa1f f78c 	uxth.w	r7, ip
 8026ce0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026ce4:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026ce8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026cec:	fb05 fc07 	mul.w	ip, r5, r7
 8026cf0:	012d      	lsls	r5, r5, #4
 8026cf2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026cf6:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8026cfa:	eba5 050c 	sub.w	r5, r5, ip
 8026cfe:	b2bf      	uxth	r7, r7
 8026d00:	b2ad      	uxth	r5, r5
 8026d02:	ebae 0e07 	sub.w	lr, lr, r7
 8026d06:	436b      	muls	r3, r5
 8026d08:	fa1f fe8e 	uxth.w	lr, lr
 8026d0c:	436e      	muls	r6, r5
 8026d0e:	fb0e 3808 	mla	r8, lr, r8, r3
 8026d12:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026d16:	fb0e 6404 	mla	r4, lr, r4, r6
 8026d1a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d1e:	fb0c 8803 	mla	r8, ip, r3, r8
 8026d22:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026d26:	fb0c 4000 	mla	r0, ip, r0, r4
 8026d2a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d2e:	fb07 8303 	mla	r3, r7, r3, r8
 8026d32:	fb07 0002 	mla	r0, r7, r2, r0
 8026d36:	0a1b      	lsrs	r3, r3, #8
 8026d38:	0a00      	lsrs	r0, r0, #8
 8026d3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d3e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d42:	4318      	orrs	r0, r3
 8026d44:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026d48:	6008      	str	r0, [r1, #0]
 8026d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d4e:	4604      	mov	r4, r0
 8026d50:	e77a      	b.n	8026c48 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8026d52:	4606      	mov	r6, r0
 8026d54:	4604      	mov	r4, r0
 8026d56:	e78c      	b.n	8026c72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8026d58:	4606      	mov	r6, r0
 8026d5a:	e78a      	b.n	8026c72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8026d5c:	4602      	mov	r2, r0
 8026d5e:	e7a6      	b.n	8026cae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8026d60:	4602      	mov	r2, r0
 8026d62:	e7b8      	b.n	8026cd6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08026d64 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d68:	b08f      	sub	sp, #60	; 0x3c
 8026d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026d6e:	920c      	str	r2, [sp, #48]	; 0x30
 8026d70:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026d72:	900d      	str	r0, [sp, #52]	; 0x34
 8026d74:	910a      	str	r1, [sp, #40]	; 0x28
 8026d76:	6850      	ldr	r0, [r2, #4]
 8026d78:	9306      	str	r3, [sp, #24]
 8026d7a:	6812      	ldr	r2, [r2, #0]
 8026d7c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8026d80:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8026d84:	fb00 1303 	mla	r3, r0, r3, r1
 8026d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026d8c:	9307      	str	r3, [sp, #28]
 8026d8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d90:	681b      	ldr	r3, [r3, #0]
 8026d92:	9308      	str	r3, [sp, #32]
 8026d94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d96:	685c      	ldr	r4, [r3, #4]
 8026d98:	3404      	adds	r4, #4
 8026d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	dc03      	bgt.n	8026da8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8026da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026da2:	2b00      	cmp	r3, #0
 8026da4:	f340 81dc 	ble.w	8027160 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026daa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026dae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026db2:	1e48      	subs	r0, r1, #1
 8026db4:	1e56      	subs	r6, r2, #1
 8026db6:	9b06      	ldr	r3, [sp, #24]
 8026db8:	2b00      	cmp	r3, #0
 8026dba:	f340 80ba 	ble.w	8026f32 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8026dbe:	ea5f 472b 	movs.w	r7, fp, asr #16
 8026dc2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026dc6:	d406      	bmi.n	8026dd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026dc8:	4287      	cmp	r7, r0
 8026dca:	da04      	bge.n	8026dd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	db02      	blt.n	8026dd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026dd0:	42b3      	cmp	r3, r6
 8026dd2:	f2c0 80af 	blt.w	8026f34 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8026dd6:	3701      	adds	r7, #1
 8026dd8:	f100 80a0 	bmi.w	8026f1c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026ddc:	42b9      	cmp	r1, r7
 8026dde:	f2c0 809d 	blt.w	8026f1c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026de2:	3301      	adds	r3, #1
 8026de4:	f100 809a 	bmi.w	8026f1c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026de8:	429a      	cmp	r2, r3
 8026dea:	f2c0 8097 	blt.w	8026f1c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8026dee:	9b06      	ldr	r3, [sp, #24]
 8026df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8026df2:	9b07      	ldr	r3, [sp, #28]
 8026df4:	9309      	str	r3, [sp, #36]	; 0x24
 8026df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	f340 80b8 	ble.w	8026f6e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8026dfe:	9820      	ldr	r0, [sp, #128]	; 0x80
 8026e00:	142e      	asrs	r6, r5, #16
 8026e02:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026e04:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026e08:	68c7      	ldr	r7, [r0, #12]
 8026e0a:	ea5f 402b 	movs.w	r0, fp, asr #16
 8026e0e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026e12:	6892      	ldr	r2, [r2, #8]
 8026e14:	f100 80fe 	bmi.w	8027014 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e18:	f102 3cff 	add.w	ip, r2, #4294967295
 8026e1c:	4560      	cmp	r0, ip
 8026e1e:	f280 80f9 	bge.w	8027014 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e22:	2e00      	cmp	r6, #0
 8026e24:	f2c0 80f6 	blt.w	8027014 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e28:	f107 3cff 	add.w	ip, r7, #4294967295
 8026e2c:	4566      	cmp	r6, ip
 8026e2e:	f280 80f1 	bge.w	8027014 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8026e32:	b212      	sxth	r2, r2
 8026e34:	fb06 0002 	mla	r0, r6, r2, r0
 8026e38:	9e08      	ldr	r6, [sp, #32]
 8026e3a:	5c37      	ldrb	r7, [r6, r0]
 8026e3c:	eb06 0e00 	add.w	lr, r6, r0
 8026e40:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026e44:	eb04 0c07 	add.w	ip, r4, r7
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	f000 80d4 	beq.w	8026ff6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8026e4e:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8026e52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026e56:	4426      	add	r6, r4
 8026e58:	2900      	cmp	r1, #0
 8026e5a:	f000 80d5 	beq.w	8027008 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026e5e:	eb0e 0002 	add.w	r0, lr, r2
 8026e62:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026e66:	7840      	ldrb	r0, [r0, #1]
 8026e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026e6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026e70:	4422      	add	r2, r4
 8026e72:	4420      	add	r0, r4
 8026e74:	b29b      	uxth	r3, r3
 8026e76:	f814 a007 	ldrb.w	sl, [r4, r7]
 8026e7a:	b289      	uxth	r1, r1
 8026e7c:	7837      	ldrb	r7, [r6, #0]
 8026e7e:	f896 8001 	ldrb.w	r8, [r6, #1]
 8026e82:	fb03 f901 	mul.w	r9, r3, r1
 8026e86:	011b      	lsls	r3, r3, #4
 8026e88:	78b6      	ldrb	r6, [r6, #2]
 8026e8a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026e8e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026e92:	eba3 0309 	sub.w	r3, r3, r9
 8026e96:	b289      	uxth	r1, r1
 8026e98:	b29b      	uxth	r3, r3
 8026e9a:	ebae 0e01 	sub.w	lr, lr, r1
 8026e9e:	435f      	muls	r7, r3
 8026ea0:	fa1f fe8e 	uxth.w	lr, lr
 8026ea4:	fb03 f808 	mul.w	r8, r3, r8
 8026ea8:	4373      	muls	r3, r6
 8026eaa:	fb0e 770a 	mla	r7, lr, sl, r7
 8026eae:	f892 a000 	ldrb.w	sl, [r2]
 8026eb2:	fb01 770a 	mla	r7, r1, sl, r7
 8026eb6:	f890 a000 	ldrb.w	sl, [r0]
 8026eba:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026ebe:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8026ec2:	f89c c002 	ldrb.w	ip, [ip, #2]
 8026ec6:	fb0e 8807 	mla	r8, lr, r7, r8
 8026eca:	7857      	ldrb	r7, [r2, #1]
 8026ecc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8026ed0:	fb0e 330c 	mla	r3, lr, ip, r3
 8026ed4:	fb01 8807 	mla	r8, r1, r7, r8
 8026ed8:	7847      	ldrb	r7, [r0, #1]
 8026eda:	fb09 8707 	mla	r7, r9, r7, r8
 8026ede:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026ee2:	ea4a 0707 	orr.w	r7, sl, r7
 8026ee6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026eea:	fb01 310a 	mla	r1, r1, sl, r3
 8026eee:	f890 a002 	ldrb.w	sl, [r0, #2]
 8026ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ef4:	fb09 1a0a 	mla	sl, r9, sl, r1
 8026ef8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8026efc:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8026f00:	ea47 070a 	orr.w	r7, r7, sl
 8026f04:	601f      	str	r7, [r3, #0]
 8026f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f08:	3304      	adds	r3, #4
 8026f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8026f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026f0e:	449b      	add	fp, r3
 8026f10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f12:	441d      	add	r5, r3
 8026f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f16:	3b01      	subs	r3, #1
 8026f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8026f1a:	e76c      	b.n	8026df6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026f1e:	449b      	add	fp, r3
 8026f20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f22:	441d      	add	r5, r3
 8026f24:	9b06      	ldr	r3, [sp, #24]
 8026f26:	3b01      	subs	r3, #1
 8026f28:	9306      	str	r3, [sp, #24]
 8026f2a:	9b07      	ldr	r3, [sp, #28]
 8026f2c:	3304      	adds	r3, #4
 8026f2e:	9307      	str	r3, [sp, #28]
 8026f30:	e741      	b.n	8026db6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026f32:	d023      	beq.n	8026f7c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8026f34:	9b06      	ldr	r3, [sp, #24]
 8026f36:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026f38:	3b01      	subs	r3, #1
 8026f3a:	fb00 b003 	mla	r0, r0, r3, fp
 8026f3e:	1400      	asrs	r0, r0, #16
 8026f40:	f53f af55 	bmi.w	8026dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f44:	3901      	subs	r1, #1
 8026f46:	4288      	cmp	r0, r1
 8026f48:	f6bf af51 	bge.w	8026dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8026f4e:	fb01 5303 	mla	r3, r1, r3, r5
 8026f52:	141b      	asrs	r3, r3, #16
 8026f54:	f53f af4b 	bmi.w	8026dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f58:	3a01      	subs	r2, #1
 8026f5a:	4293      	cmp	r3, r2
 8026f5c:	f6bf af47 	bge.w	8026dee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8026f60:	9b06      	ldr	r3, [sp, #24]
 8026f62:	9309      	str	r3, [sp, #36]	; 0x24
 8026f64:	9b07      	ldr	r3, [sp, #28]
 8026f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8026f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f6a:	2b00      	cmp	r3, #0
 8026f6c:	dc6f      	bgt.n	802704e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8026f6e:	9b06      	ldr	r3, [sp, #24]
 8026f70:	9a07      	ldr	r2, [sp, #28]
 8026f72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026f76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026f7a:	9307      	str	r3, [sp, #28]
 8026f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f7e:	2b00      	cmp	r3, #0
 8026f80:	f340 80ee 	ble.w	8027160 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8026f84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026f88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026f8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026f8e:	eeb0 6a62 	vmov.f32	s12, s5
 8026f92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026f96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026f9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026f9e:	ee16 ba10 	vmov	fp, s12
 8026fa2:	eeb0 6a43 	vmov.f32	s12, s6
 8026fa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026faa:	ee16 5a10 	vmov	r5, s12
 8026fae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026fb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026fb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026fba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026fbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026fc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026fc6:	ee12 2a90 	vmov	r2, s5
 8026fca:	eef0 2a47 	vmov.f32	s5, s14
 8026fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fd2:	ee13 2a10 	vmov	r2, s6
 8026fd6:	931b      	str	r3, [sp, #108]	; 0x6c
 8026fd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026fda:	eeb0 3a67 	vmov.f32	s6, s15
 8026fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fe2:	931c      	str	r3, [sp, #112]	; 0x70
 8026fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026fe8:	3b01      	subs	r3, #1
 8026fea:	930a      	str	r3, [sp, #40]	; 0x28
 8026fec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026fee:	bf08      	it	eq
 8026ff0:	4613      	moveq	r3, r2
 8026ff2:	9306      	str	r3, [sp, #24]
 8026ff4:	e6d1      	b.n	8026d9a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8026ff6:	b151      	cbz	r1, 802700e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026ff8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8026ffc:	4660      	mov	r0, ip
 8026ffe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027002:	4422      	add	r2, r4
 8027004:	4666      	mov	r6, ip
 8027006:	e735      	b.n	8026e74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8027008:	4660      	mov	r0, ip
 802700a:	4662      	mov	r2, ip
 802700c:	e732      	b.n	8026e74 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802700e:	4660      	mov	r0, ip
 8027010:	4662      	mov	r2, ip
 8027012:	e7f7      	b.n	8027004 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8027014:	f110 0c01 	adds.w	ip, r0, #1
 8027018:	f53f af75 	bmi.w	8026f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802701c:	4562      	cmp	r2, ip
 802701e:	f6ff af72 	blt.w	8026f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027022:	f116 0c01 	adds.w	ip, r6, #1
 8027026:	f53f af6e 	bmi.w	8026f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802702a:	4567      	cmp	r7, ip
 802702c:	f6ff af6b 	blt.w	8026f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027030:	b23f      	sxth	r7, r7
 8027032:	b212      	sxth	r2, r2
 8027034:	9701      	str	r7, [sp, #4]
 8027036:	9200      	str	r2, [sp, #0]
 8027038:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802703c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8027040:	4623      	mov	r3, r4
 8027042:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027044:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8027048:	f7ff fdd5 	bl	8026bf6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 802704c:	e75b      	b.n	8026f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802704e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027050:	ea4f 462b 	mov.w	r6, fp, asr #16
 8027054:	1428      	asrs	r0, r5, #16
 8027056:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802705a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802705e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027062:	fb02 6000 	mla	r0, r2, r0, r6
 8027066:	9e08      	ldr	r6, [sp, #32]
 8027068:	5c37      	ldrb	r7, [r6, r0]
 802706a:	eb06 0e00 	add.w	lr, r6, r0
 802706e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027072:	eb04 0c07 	add.w	ip, r4, r7
 8027076:	2b00      	cmp	r3, #0
 8027078:	d063      	beq.n	8027142 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802707a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802707e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027082:	4426      	add	r6, r4
 8027084:	2900      	cmp	r1, #0
 8027086:	d065      	beq.n	8027154 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8027088:	eb0e 0002 	add.w	r0, lr, r2
 802708c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8027090:	7840      	ldrb	r0, [r0, #1]
 8027092:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027096:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802709a:	4422      	add	r2, r4
 802709c:	4420      	add	r0, r4
 802709e:	b29b      	uxth	r3, r3
 80270a0:	f814 a007 	ldrb.w	sl, [r4, r7]
 80270a4:	b289      	uxth	r1, r1
 80270a6:	7837      	ldrb	r7, [r6, #0]
 80270a8:	f896 8001 	ldrb.w	r8, [r6, #1]
 80270ac:	fb03 f901 	mul.w	r9, r3, r1
 80270b0:	011b      	lsls	r3, r3, #4
 80270b2:	78b6      	ldrb	r6, [r6, #2]
 80270b4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80270b8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80270bc:	eba3 0309 	sub.w	r3, r3, r9
 80270c0:	b289      	uxth	r1, r1
 80270c2:	b29b      	uxth	r3, r3
 80270c4:	ebae 0e01 	sub.w	lr, lr, r1
 80270c8:	435f      	muls	r7, r3
 80270ca:	fa1f fe8e 	uxth.w	lr, lr
 80270ce:	fb03 f808 	mul.w	r8, r3, r8
 80270d2:	4373      	muls	r3, r6
 80270d4:	7896      	ldrb	r6, [r2, #2]
 80270d6:	fb0e 770a 	mla	r7, lr, sl, r7
 80270da:	f892 a000 	ldrb.w	sl, [r2]
 80270de:	fb01 770a 	mla	r7, r1, sl, r7
 80270e2:	f890 a000 	ldrb.w	sl, [r0]
 80270e6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80270ea:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80270ee:	f89c c002 	ldrb.w	ip, [ip, #2]
 80270f2:	fb0e 8807 	mla	r8, lr, r7, r8
 80270f6:	7857      	ldrb	r7, [r2, #1]
 80270f8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80270fc:	fb0e 330c 	mla	r3, lr, ip, r3
 8027100:	fb01 8807 	mla	r8, r1, r7, r8
 8027104:	7847      	ldrb	r7, [r0, #1]
 8027106:	fb01 3306 	mla	r3, r1, r6, r3
 802710a:	fb09 8707 	mla	r7, r9, r7, r8
 802710e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027112:	ea4a 0707 	orr.w	r7, sl, r7
 8027116:	f890 a002 	ldrb.w	sl, [r0, #2]
 802711a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802711e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027120:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8027124:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8027128:	ea47 070a 	orr.w	r7, r7, sl
 802712c:	f843 7b04 	str.w	r7, [r3], #4
 8027130:	930b      	str	r3, [sp, #44]	; 0x2c
 8027132:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027134:	449b      	add	fp, r3
 8027136:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027138:	441d      	add	r5, r3
 802713a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802713c:	3b01      	subs	r3, #1
 802713e:	9309      	str	r3, [sp, #36]	; 0x24
 8027140:	e712      	b.n	8026f68 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8027142:	b151      	cbz	r1, 802715a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027144:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8027148:	4660      	mov	r0, ip
 802714a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802714e:	4422      	add	r2, r4
 8027150:	4666      	mov	r6, ip
 8027152:	e7a4      	b.n	802709e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8027154:	4660      	mov	r0, ip
 8027156:	4662      	mov	r2, ip
 8027158:	e7a1      	b.n	802709e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802715a:	4660      	mov	r0, ip
 802715c:	4662      	mov	r2, ip
 802715e:	e7f7      	b.n	8027150 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8027160:	b00f      	add	sp, #60	; 0x3c
 8027162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027166 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8027166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802716a:	b085      	sub	sp, #20
 802716c:	6808      	ldr	r0, [r1, #0]
 802716e:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 8027172:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8027176:	f1b9 0f00 	cmp.w	r9, #0
 802717a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802717e:	fb09 6408 	mla	r4, r9, r8, r6
 8027182:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8027186:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802718a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 802718e:	eb02 0a04 	add.w	sl, r2, r4
 8027192:	f2c0 8103 	blt.w	802739c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8027196:	45cb      	cmp	fp, r9
 8027198:	f340 8100 	ble.w	802739c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 802719c:	2e00      	cmp	r6, #0
 802719e:	f2c0 80fb 	blt.w	8027398 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 80271a2:	45b0      	cmp	r8, r6
 80271a4:	f340 80f8 	ble.w	8027398 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 80271a8:	5d12      	ldrb	r2, [r2, r4]
 80271aa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80271ae:	1c72      	adds	r2, r6, #1
 80271b0:	f100 80f5 	bmi.w	802739e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80271b4:	4590      	cmp	r8, r2
 80271b6:	f340 80f2 	ble.w	802739e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80271ba:	f1bc 0f00 	cmp.w	ip, #0
 80271be:	f000 80ee 	beq.w	802739e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 80271c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80271c6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80271ca:	f119 0901 	adds.w	r9, r9, #1
 80271ce:	f100 80ea 	bmi.w	80273a6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80271d2:	45cb      	cmp	fp, r9
 80271d4:	f340 80e7 	ble.w	80273a6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80271d8:	f1be 0f00 	cmp.w	lr, #0
 80271dc:	f000 80e3 	beq.w	80273a6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 80271e0:	2e00      	cmp	r6, #0
 80271e2:	f2c0 80de 	blt.w	80273a2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 80271e6:	45b0      	cmp	r8, r6
 80271e8:	f340 80db 	ble.w	80273a2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 80271ec:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80271f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80271f4:	3601      	adds	r6, #1
 80271f6:	d409      	bmi.n	802720c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80271f8:	45b0      	cmp	r8, r6
 80271fa:	dd07      	ble.n	802720c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80271fc:	f1bc 0f00 	cmp.w	ip, #0
 8027200:	d004      	beq.n	802720c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8027202:	44d0      	add	r8, sl
 8027204:	f898 0001 	ldrb.w	r0, [r8, #1]
 8027208:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802720c:	fa1f fc8c 	uxth.w	ip, ip
 8027210:	fa1f f38e 	uxth.w	r3, lr
 8027214:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8027218:	fb03 fe0c 	mul.w	lr, r3, ip
 802721c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027220:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027224:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8027228:	ebac 060e 	sub.w	r6, ip, lr
 802722c:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8027230:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027234:	b29b      	uxth	r3, r3
 8027236:	b2b6      	uxth	r6, r6
 8027238:	ebac 0c03 	sub.w	ip, ip, r3
 802723c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027240:	9601      	str	r6, [sp, #4]
 8027242:	fa1f f68c 	uxth.w	r6, ip
 8027246:	9602      	str	r6, [sp, #8]
 8027248:	9e01      	ldr	r6, [sp, #4]
 802724a:	fb06 fc0a 	mul.w	ip, r6, sl
 802724e:	9e02      	ldr	r6, [sp, #8]
 8027250:	fb06 cc0b 	mla	ip, r6, fp, ip
 8027254:	fb03 cc09 	mla	ip, r3, r9, ip
 8027258:	fb0e cc08 	mla	ip, lr, r8, ip
 802725c:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8027260:	9603      	str	r6, [sp, #12]
 8027262:	2e00      	cmp	r6, #0
 8027264:	f000 8095 	beq.w	8027392 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8027268:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802726c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027270:	fb0b fc0c 	mul.w	ip, fp, ip
 8027274:	fb0b f505 	mul.w	r5, fp, r5
 8027278:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802727c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027280:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027284:	44dc      	add	ip, fp
 8027286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802728a:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 802728e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027292:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027296:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802729a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802729e:	fb0a fc0c 	mul.w	ip, sl, ip
 80272a2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80272a6:	fb0a fa04 	mul.w	sl, sl, r4
 80272aa:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80272ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80272b2:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 80272b6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80272ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80272be:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 80272c2:	4465      	add	r5, ip
 80272c4:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 80272c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80272cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272d0:	fb09 fc0c 	mul.w	ip, r9, ip
 80272d4:	0a2d      	lsrs	r5, r5, #8
 80272d6:	fb09 f902 	mul.w	r9, r9, r2
 80272da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272de:	ea4f 241c 	mov.w	r4, ip, lsr #8
 80272e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80272e6:	f509 7280 	add.w	r2, r9, #256	; 0x100
 80272ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80272ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80272f2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80272f6:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 80272fa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80272fe:	4464      	add	r4, ip
 8027300:	fb08 f202 	mul.w	r2, r8, r2
 8027304:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027308:	fb08 f800 	mul.w	r8, r8, r0
 802730c:	0a24      	lsrs	r4, r4, #8
 802730e:	0a10      	lsrs	r0, r2, #8
 8027310:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8027314:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027318:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802731c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027320:	4402      	add	r2, r0
 8027322:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027326:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802732a:	9801      	ldr	r0, [sp, #4]
 802732c:	0a12      	lsrs	r2, r2, #8
 802732e:	4345      	muls	r5, r0
 8027330:	9802      	ldr	r0, [sp, #8]
 8027332:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027336:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802733a:	fb06 5500 	mla	r5, r6, r0, r5
 802733e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027342:	fb02 520e 	mla	r2, r2, lr, r5
 8027346:	fb04 2403 	mla	r4, r4, r3, r2
 802734a:	9a01      	ldr	r2, [sp, #4]
 802734c:	fb02 f60a 	mul.w	r6, r2, sl
 8027350:	0a24      	lsrs	r4, r4, #8
 8027352:	9a03      	ldr	r2, [sp, #12]
 8027354:	fb00 660b 	mla	r6, r0, fp, r6
 8027358:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802735c:	fb07 fc02 	mul.w	ip, r7, r2
 8027360:	fb0e 6e08 	mla	lr, lr, r8, r6
 8027364:	fb03 e309 	mla	r3, r3, r9, lr
 8027368:	0a1b      	lsrs	r3, r3, #8
 802736a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802736e:	4323      	orrs	r3, r4
 8027370:	f10c 0401 	add.w	r4, ip, #1
 8027374:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8027378:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802737c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027380:	1224      	asrs	r4, r4, #8
 8027382:	b2d5      	uxtb	r5, r2
 8027384:	2cff      	cmp	r4, #255	; 0xff
 8027386:	b2c6      	uxtb	r6, r0
 8027388:	d10f      	bne.n	80273aa <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 802738a:	700b      	strb	r3, [r1, #0]
 802738c:	7048      	strb	r0, [r1, #1]
 802738e:	708a      	strb	r2, [r1, #2]
 8027390:	70cc      	strb	r4, [r1, #3]
 8027392:	b005      	add	sp, #20
 8027394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027398:	4605      	mov	r5, r0
 802739a:	e708      	b.n	80271ae <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 802739c:	4605      	mov	r5, r0
 802739e:	4604      	mov	r4, r0
 80273a0:	e713      	b.n	80271ca <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 80273a2:	4602      	mov	r2, r0
 80273a4:	e726      	b.n	80271f4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 80273a6:	4602      	mov	r2, r0
 80273a8:	e730      	b.n	802720c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80273aa:	b2e2      	uxtb	r2, r4
 80273ac:	2c00      	cmp	r4, #0
 80273ae:	d0f0      	beq.n	8027392 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 80273b0:	78cc      	ldrb	r4, [r1, #3]
 80273b2:	b2db      	uxtb	r3, r3
 80273b4:	fb17 f606 	smulbb	r6, r7, r6
 80273b8:	fb02 fc04 	mul.w	ip, r2, r4
 80273bc:	4422      	add	r2, r4
 80273be:	f10c 0001 	add.w	r0, ip, #1
 80273c2:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80273c6:	1200      	asrs	r0, r0, #8
 80273c8:	1a24      	subs	r4, r4, r0
 80273ca:	1a12      	subs	r2, r2, r0
 80273cc:	7808      	ldrb	r0, [r1, #0]
 80273ce:	b2d2      	uxtb	r2, r2
 80273d0:	4360      	muls	r0, r4
 80273d2:	70ca      	strb	r2, [r1, #3]
 80273d4:	fb07 0303 	mla	r3, r7, r3, r0
 80273d8:	7848      	ldrb	r0, [r1, #1]
 80273da:	fb17 f705 	smulbb	r7, r7, r5
 80273de:	fb04 6000 	mla	r0, r4, r0, r6
 80273e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80273e6:	2bff      	cmp	r3, #255	; 0xff
 80273e8:	bfd6      	itet	le
 80273ea:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80273ee:	23ff      	movgt	r3, #255	; 0xff
 80273f0:	b2db      	uxtble	r3, r3
 80273f2:	fb90 f0f2 	sdiv	r0, r0, r2
 80273f6:	700b      	strb	r3, [r1, #0]
 80273f8:	28ff      	cmp	r0, #255	; 0xff
 80273fa:	788b      	ldrb	r3, [r1, #2]
 80273fc:	bfd4      	ite	le
 80273fe:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027402:	20ff      	movgt	r0, #255	; 0xff
 8027404:	fb04 7303 	mla	r3, r4, r3, r7
 8027408:	bfd8      	it	le
 802740a:	b2c0      	uxtble	r0, r0
 802740c:	fb93 f3f2 	sdiv	r3, r3, r2
 8027410:	2bff      	cmp	r3, #255	; 0xff
 8027412:	7048      	strb	r0, [r1, #1]
 8027414:	bfd6      	itet	le
 8027416:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802741a:	23ff      	movgt	r3, #255	; 0xff
 802741c:	b2db      	uxtble	r3, r3
 802741e:	708b      	strb	r3, [r1, #2]
 8027420:	e7b7      	b.n	8027392 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

08027422 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027426:	b09d      	sub	sp, #116	; 0x74
 8027428:	921a      	str	r2, [sp, #104]	; 0x68
 802742a:	9308      	str	r3, [sp, #32]
 802742c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802742e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8027432:	901b      	str	r0, [sp, #108]	; 0x6c
 8027434:	9118      	str	r1, [sp, #96]	; 0x60
 8027436:	6850      	ldr	r0, [r2, #4]
 8027438:	9309      	str	r3, [sp, #36]	; 0x24
 802743a:	6812      	ldr	r2, [r2, #0]
 802743c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8027440:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8027444:	fb00 1303 	mla	r3, r0, r3, r1
 8027448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802744c:	930c      	str	r3, [sp, #48]	; 0x30
 802744e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027450:	681b      	ldr	r3, [r3, #0]
 8027452:	9311      	str	r3, [sp, #68]	; 0x44
 8027454:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027456:	685f      	ldr	r7, [r3, #4]
 8027458:	3704      	adds	r7, #4
 802745a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802745c:	2b00      	cmp	r3, #0
 802745e:	dc03      	bgt.n	8027468 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8027462:	2b00      	cmp	r3, #0
 8027464:	f340 83cd 	ble.w	8027c02 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8027468:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802746a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802746e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027472:	1e48      	subs	r0, r1, #1
 8027474:	f102 3cff 	add.w	ip, r2, #4294967295
 8027478:	9b08      	ldr	r3, [sp, #32]
 802747a:	2b00      	cmp	r3, #0
 802747c:	f340 816c 	ble.w	8027758 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8027480:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027484:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027488:	d406      	bmi.n	8027498 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802748a:	4586      	cmp	lr, r0
 802748c:	da04      	bge.n	8027498 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802748e:	2b00      	cmp	r3, #0
 8027490:	db02      	blt.n	8027498 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8027492:	4563      	cmp	r3, ip
 8027494:	f2c0 8161 	blt.w	802775a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8027498:	f11e 0e01 	adds.w	lr, lr, #1
 802749c:	f100 8151 	bmi.w	8027742 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80274a0:	4571      	cmp	r1, lr
 80274a2:	f2c0 814e 	blt.w	8027742 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80274a6:	3301      	adds	r3, #1
 80274a8:	f100 814b 	bmi.w	8027742 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80274ac:	429a      	cmp	r2, r3
 80274ae:	f2c0 8148 	blt.w	8027742 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80274b2:	9b08      	ldr	r3, [sp, #32]
 80274b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80274b8:	9319      	str	r3, [sp, #100]	; 0x64
 80274ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80274bc:	2b00      	cmp	r3, #0
 80274be:	f340 8169 	ble.w	8027794 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 80274c2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80274c4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80274c8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80274cc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80274d0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80274d4:	1423      	asrs	r3, r4, #16
 80274d6:	f100 81f7 	bmi.w	80278c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80274da:	f100 39ff 	add.w	r9, r0, #4294967295
 80274de:	454b      	cmp	r3, r9
 80274e0:	f280 81f2 	bge.w	80278c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80274e4:	f1bc 0f00 	cmp.w	ip, #0
 80274e8:	f2c0 81ee 	blt.w	80278c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80274ec:	f10e 39ff 	add.w	r9, lr, #4294967295
 80274f0:	45cc      	cmp	ip, r9
 80274f2:	f280 81e9 	bge.w	80278c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80274f6:	b200      	sxth	r0, r0
 80274f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80274fa:	fb0c 3300 	mla	r3, ip, r0, r3
 80274fe:	eb05 0903 	add.w	r9, r5, r3
 8027502:	5ceb      	ldrb	r3, [r5, r3]
 8027504:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8027508:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802750c:	2a00      	cmp	r2, #0
 802750e:	f000 8187 	beq.w	8027820 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8027512:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027516:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802751a:	950d      	str	r5, [sp, #52]	; 0x34
 802751c:	0e2d      	lsrs	r5, r5, #24
 802751e:	9514      	str	r5, [sp, #80]	; 0x50
 8027520:	b179      	cbz	r1, 8027542 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027522:	eb09 0c00 	add.w	ip, r9, r0
 8027526:	f819 0000 	ldrb.w	r0, [r9, r0]
 802752a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802752e:	900a      	str	r0, [sp, #40]	; 0x28
 8027530:	0e00      	lsrs	r0, r0, #24
 8027532:	9012      	str	r0, [sp, #72]	; 0x48
 8027534:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027538:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802753c:	900e      	str	r0, [sp, #56]	; 0x38
 802753e:	0e00      	lsrs	r0, r0, #24
 8027540:	9015      	str	r0, [sp, #84]	; 0x54
 8027542:	b292      	uxth	r2, r2
 8027544:	9814      	ldr	r0, [sp, #80]	; 0x50
 8027546:	b289      	uxth	r1, r1
 8027548:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802754a:	fb02 fa01 	mul.w	sl, r2, r1
 802754e:	0112      	lsls	r2, r2, #4
 8027550:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8027554:	eba2 090a 	sub.w	r9, r2, sl
 8027558:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802755c:	b289      	uxth	r1, r1
 802755e:	fa1f f989 	uxth.w	r9, r9
 8027562:	1a52      	subs	r2, r2, r1
 8027564:	fb09 f000 	mul.w	r0, r9, r0
 8027568:	b292      	uxth	r2, r2
 802756a:	fb02 000e 	mla	r0, r2, lr, r0
 802756e:	fb01 0005 	mla	r0, r1, r5, r0
 8027572:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027574:	fb0a 0005 	mla	r0, sl, r5, r0
 8027578:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802757c:	2800      	cmp	r0, #0
 802757e:	f000 80d6 	beq.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027582:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027586:	d01b      	beq.n	80275c0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8027588:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 802758c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027590:	fb0e fb0b 	mul.w	fp, lr, fp
 8027594:	fb0e fe03 	mul.w	lr, lr, r3
 8027598:	ea4f 231b 	mov.w	r3, fp, lsr #8
 802759c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80275a0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80275a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275a8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80275ac:	445b      	add	r3, fp
 80275ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275b2:	0a1b      	lsrs	r3, r3, #8
 80275b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80275b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80275bc:	ea43 030c 	orr.w	r3, r3, ip
 80275c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80275c2:	2dff      	cmp	r5, #255	; 0xff
 80275c4:	d021      	beq.n	802760a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80275c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80275c8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80275cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80275ce:	fb05 fc0c 	mul.w	ip, r5, ip
 80275d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80275d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275d8:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80275dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80275de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275e6:	fb05 fb0b 	mul.w	fp, r5, fp
 80275ea:	44e6      	add	lr, ip
 80275ec:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80275f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275f4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80275f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275fc:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027600:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027604:	ea4e 050b 	orr.w	r5, lr, fp
 8027608:	950d      	str	r5, [sp, #52]	; 0x34
 802760a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802760c:	2dff      	cmp	r5, #255	; 0xff
 802760e:	d021      	beq.n	8027654 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8027610:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8027612:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027616:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027618:	fb05 fc0c 	mul.w	ip, r5, ip
 802761c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802761e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027622:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8027626:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027628:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802762c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027630:	fb05 fb0b 	mul.w	fp, r5, fp
 8027634:	44e6      	add	lr, ip
 8027636:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802763a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802763e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8027642:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027646:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802764a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802764e:	ea4e 050b 	orr.w	r5, lr, fp
 8027652:	950a      	str	r5, [sp, #40]	; 0x28
 8027654:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027656:	2dff      	cmp	r5, #255	; 0xff
 8027658:	d021      	beq.n	802769e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802765a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802765c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027660:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027662:	fb05 fc0c 	mul.w	ip, r5, ip
 8027666:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027668:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802766c:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8027670:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027672:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027676:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802767a:	fb05 fb0b 	mul.w	fp, r5, fp
 802767e:	44e6      	add	lr, ip
 8027680:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8027684:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027688:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802768c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027690:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027694:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027698:	ea4e 050b 	orr.w	r5, lr, fp
 802769c:	950e      	str	r5, [sp, #56]	; 0x38
 802769e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80276a0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80276a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80276a8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80276ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80276ae:	fb09 fc0c 	mul.w	ip, r9, ip
 80276b2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80276b6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80276ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80276bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 80276c0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80276c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80276c6:	fb0a cc0e 	mla	ip, sl, lr, ip
 80276ca:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80276ce:	fb09 f90e 	mul.w	r9, r9, lr
 80276d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80276d6:	fb02 9303 	mla	r3, r2, r3, r9
 80276da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80276dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80276e0:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 80276e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80276e6:	fb01 330b 	mla	r3, r1, fp, r3
 80276ea:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80276ee:	fb0a 3a01 	mla	sl, sl, r1, r3
 80276f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276f4:	4358      	muls	r0, r3
 80276f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80276fa:	1c43      	adds	r3, r0, #1
 80276fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027700:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027704:	ea4c 0c0a 	orr.w	ip, ip, sl
 8027708:	1200      	asrs	r0, r0, #8
 802770a:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802770e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8027712:	28ff      	cmp	r0, #255	; 0xff
 8027714:	b2d9      	uxtb	r1, r3
 8027716:	fa5f fe82 	uxtb.w	lr, r2
 802771a:	f040 808c 	bne.w	8027836 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 802771e:	f888 c000 	strb.w	ip, [r8]
 8027722:	f888 2001 	strb.w	r2, [r8, #1]
 8027726:	f888 3002 	strb.w	r3, [r8, #2]
 802772a:	f888 0003 	strb.w	r0, [r8, #3]
 802772e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027730:	f108 0804 	add.w	r8, r8, #4
 8027734:	441c      	add	r4, r3
 8027736:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027738:	441e      	add	r6, r3
 802773a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802773c:	3b01      	subs	r3, #1
 802773e:	9319      	str	r3, [sp, #100]	; 0x64
 8027740:	e6bb      	b.n	80274ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027742:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027744:	441c      	add	r4, r3
 8027746:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027748:	441e      	add	r6, r3
 802774a:	9b08      	ldr	r3, [sp, #32]
 802774c:	3b01      	subs	r3, #1
 802774e:	9308      	str	r3, [sp, #32]
 8027750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027752:	3304      	adds	r3, #4
 8027754:	930c      	str	r3, [sp, #48]	; 0x30
 8027756:	e68f      	b.n	8027478 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027758:	d023      	beq.n	80277a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802775a:	9b08      	ldr	r3, [sp, #32]
 802775c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802775e:	3b01      	subs	r3, #1
 8027760:	fb00 4003 	mla	r0, r0, r3, r4
 8027764:	1400      	asrs	r0, r0, #16
 8027766:	f53f aea4 	bmi.w	80274b2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802776a:	3901      	subs	r1, #1
 802776c:	4288      	cmp	r0, r1
 802776e:	f6bf aea0 	bge.w	80274b2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027772:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027774:	fb01 6303 	mla	r3, r1, r3, r6
 8027778:	141b      	asrs	r3, r3, #16
 802777a:	f53f ae9a 	bmi.w	80274b2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802777e:	3a01      	subs	r2, #1
 8027780:	4293      	cmp	r3, r2
 8027782:	f6bf ae96 	bge.w	80274b2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027786:	9b08      	ldr	r3, [sp, #32]
 8027788:	990c      	ldr	r1, [sp, #48]	; 0x30
 802778a:	9319      	str	r3, [sp, #100]	; 0x64
 802778c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802778e:	2b00      	cmp	r3, #0
 8027790:	f300 80ba 	bgt.w	8027908 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8027794:	9b08      	ldr	r3, [sp, #32]
 8027796:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802779a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802779c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80277a0:	930c      	str	r3, [sp, #48]	; 0x30
 80277a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	f340 822c 	ble.w	8027c02 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80277aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80277b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277b8:	eef0 6a62 	vmov.f32	s13, s5
 80277bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277c8:	ee16 4a90 	vmov	r4, s13
 80277cc:	eef0 6a43 	vmov.f32	s13, s6
 80277d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277d4:	ee16 6a90 	vmov	r6, s13
 80277d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80277dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80277e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80277e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80277e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80277ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80277f0:	ee12 2a90 	vmov	r2, s5
 80277f4:	eef0 2a47 	vmov.f32	s5, s14
 80277f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80277fc:	ee13 2a10 	vmov	r2, s6
 8027800:	9329      	str	r3, [sp, #164]	; 0xa4
 8027802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027804:	eeb0 3a67 	vmov.f32	s6, s15
 8027808:	fb92 f3f3 	sdiv	r3, r2, r3
 802780c:	932a      	str	r3, [sp, #168]	; 0xa8
 802780e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027810:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8027812:	3b01      	subs	r3, #1
 8027814:	9318      	str	r3, [sp, #96]	; 0x60
 8027816:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027818:	bf08      	it	eq
 802781a:	4613      	moveq	r3, r2
 802781c:	9308      	str	r3, [sp, #32]
 802781e:	e61c      	b.n	802745a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027820:	2900      	cmp	r1, #0
 8027822:	f43f ae8e 	beq.w	8027542 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027826:	f819 0000 	ldrb.w	r0, [r9, r0]
 802782a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802782e:	900a      	str	r0, [sp, #40]	; 0x28
 8027830:	0e00      	lsrs	r0, r0, #24
 8027832:	9012      	str	r0, [sp, #72]	; 0x48
 8027834:	e685      	b.n	8027542 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8027836:	b2c3      	uxtb	r3, r0
 8027838:	2800      	cmp	r0, #0
 802783a:	f43f af78 	beq.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802783e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8027842:	fa5f fc8c 	uxtb.w	ip, ip
 8027846:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027848:	fb03 f900 	mul.w	r9, r3, r0
 802784c:	4403      	add	r3, r0
 802784e:	f109 0201 	add.w	r2, r9, #1
 8027852:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8027856:	1212      	asrs	r2, r2, #8
 8027858:	1a80      	subs	r0, r0, r2
 802785a:	1a9b      	subs	r3, r3, r2
 802785c:	f898 2000 	ldrb.w	r2, [r8]
 8027860:	b2db      	uxtb	r3, r3
 8027862:	4342      	muls	r2, r0
 8027864:	f888 3003 	strb.w	r3, [r8, #3]
 8027868:	fb05 220c 	mla	r2, r5, ip, r2
 802786c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802786e:	fb92 f2f3 	sdiv	r2, r2, r3
 8027872:	fb15 fe0e 	smulbb	lr, r5, lr
 8027876:	2aff      	cmp	r2, #255	; 0xff
 8027878:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802787a:	bfd4      	ite	le
 802787c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027880:	22ff      	movgt	r2, #255	; 0xff
 8027882:	fb15 f101 	smulbb	r1, r5, r1
 8027886:	bfd8      	it	le
 8027888:	b2d2      	uxtble	r2, r2
 802788a:	f888 2000 	strb.w	r2, [r8]
 802788e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8027892:	fb00 e202 	mla	r2, r0, r2, lr
 8027896:	fb92 f2f3 	sdiv	r2, r2, r3
 802789a:	2aff      	cmp	r2, #255	; 0xff
 802789c:	bfd6      	itet	le
 802789e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80278a2:	22ff      	movgt	r2, #255	; 0xff
 80278a4:	b2d2      	uxtble	r2, r2
 80278a6:	f888 2001 	strb.w	r2, [r8, #1]
 80278aa:	f898 2002 	ldrb.w	r2, [r8, #2]
 80278ae:	fb00 1202 	mla	r2, r0, r2, r1
 80278b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80278b6:	2aff      	cmp	r2, #255	; 0xff
 80278b8:	bfd6      	itet	le
 80278ba:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80278be:	22ff      	movgt	r2, #255	; 0xff
 80278c0:	b2d2      	uxtble	r2, r2
 80278c2:	f888 2002 	strb.w	r2, [r8, #2]
 80278c6:	e732      	b.n	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80278c8:	f113 0901 	adds.w	r9, r3, #1
 80278cc:	f53f af2f 	bmi.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80278d0:	4548      	cmp	r0, r9
 80278d2:	f6ff af2c 	blt.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80278d6:	f11c 0901 	adds.w	r9, ip, #1
 80278da:	f53f af28 	bmi.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80278de:	45ce      	cmp	lr, r9
 80278e0:	f6ff af25 	blt.w	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80278e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80278e6:	b200      	sxth	r0, r0
 80278e8:	9302      	str	r3, [sp, #8]
 80278ea:	fa0f f38e 	sxth.w	r3, lr
 80278ee:	9000      	str	r0, [sp, #0]
 80278f0:	9301      	str	r3, [sp, #4]
 80278f2:	463b      	mov	r3, r7
 80278f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80278f6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80278fa:	e9cd c203 	strd	ip, r2, [sp, #12]
 80278fe:	4641      	mov	r1, r8
 8027900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027902:	f7ff fc30 	bl	8027166 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8027906:	e712      	b.n	802772e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027908:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802790a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 802790e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027910:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027914:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8027918:	1433      	asrs	r3, r6, #16
 802791a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802791e:	fb0c e303 	mla	r3, ip, r3, lr
 8027922:	eb05 0e03 	add.w	lr, r5, r3
 8027926:	5ceb      	ldrb	r3, [r5, r3]
 8027928:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 802792c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027930:	2a00      	cmp	r2, #0
 8027932:	f000 8116 	beq.w	8027b62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8027936:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802793a:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 802793e:	950f      	str	r5, [sp, #60]	; 0x3c
 8027940:	0e2d      	lsrs	r5, r5, #24
 8027942:	9516      	str	r5, [sp, #88]	; 0x58
 8027944:	b178      	cbz	r0, 8027966 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027946:	eb0e 090c 	add.w	r9, lr, ip
 802794a:	f81e c00c 	ldrb.w	ip, [lr, ip]
 802794e:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027952:	f899 c001 	ldrb.w	ip, [r9, #1]
 8027956:	950b      	str	r5, [sp, #44]	; 0x2c
 8027958:	0e2d      	lsrs	r5, r5, #24
 802795a:	9513      	str	r5, [sp, #76]	; 0x4c
 802795c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027960:	9510      	str	r5, [sp, #64]	; 0x40
 8027962:	0e2d      	lsrs	r5, r5, #24
 8027964:	9517      	str	r5, [sp, #92]	; 0x5c
 8027966:	b292      	uxth	r2, r2
 8027968:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802796a:	b280      	uxth	r0, r0
 802796c:	fb02 fa00 	mul.w	sl, r2, r0
 8027970:	0112      	lsls	r2, r2, #4
 8027972:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027976:	eba2 090a 	sub.w	r9, r2, sl
 802797a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802797e:	fa1f fc80 	uxth.w	ip, r0
 8027982:	9816      	ldr	r0, [sp, #88]	; 0x58
 8027984:	fa1f f989 	uxth.w	r9, r9
 8027988:	eba2 020c 	sub.w	r2, r2, ip
 802798c:	fb09 f000 	mul.w	r0, r9, r0
 8027990:	b292      	uxth	r2, r2
 8027992:	fb02 0008 	mla	r0, r2, r8, r0
 8027996:	fb0c 0005 	mla	r0, ip, r5, r0
 802799a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 802799c:	fb0a 0005 	mla	r0, sl, r5, r0
 80279a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80279a4:	2800      	cmp	r0, #0
 80279a6:	f000 80d3 	beq.w	8027b50 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80279aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80279ae:	d01b      	beq.n	80279e8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80279b0:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 80279b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80279b8:	fb08 fb0b 	mul.w	fp, r8, fp
 80279bc:	fb08 f803 	mul.w	r8, r8, r3
 80279c0:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80279c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80279c8:	f508 7e80 	add.w	lr, r8, #256	; 0x100
 80279cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80279d0:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 80279d4:	445b      	add	r3, fp
 80279d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279da:	0a1b      	lsrs	r3, r3, #8
 80279dc:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80279e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80279e4:	ea43 030e 	orr.w	r3, r3, lr
 80279e8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80279ea:	2dff      	cmp	r5, #255	; 0xff
 80279ec:	d021      	beq.n	8027a32 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80279ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80279f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80279f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80279f6:	fb05 fe0e 	mul.w	lr, r5, lr
 80279fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80279fc:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8027a00:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8027a04:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027a06:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027a0a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027a0e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a12:	44f0      	add	r8, lr
 8027a14:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8027a18:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027a1c:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8027a20:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027a24:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027a28:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027a2c:	ea48 050b 	orr.w	r5, r8, fp
 8027a30:	950f      	str	r5, [sp, #60]	; 0x3c
 8027a32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027a34:	2dff      	cmp	r5, #255	; 0xff
 8027a36:	d021      	beq.n	8027a7c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8027a38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a3a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a3e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027a40:	fb05 fe0e 	mul.w	lr, r5, lr
 8027a44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a46:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8027a4a:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8027a4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027a50:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027a54:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027a58:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a5c:	44f0      	add	r8, lr
 8027a5e:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8027a62:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027a66:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8027a6a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027a6e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027a72:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027a76:	ea48 050b 	orr.w	r5, r8, fp
 8027a7a:	950b      	str	r5, [sp, #44]	; 0x2c
 8027a7c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027a7e:	2dff      	cmp	r5, #255	; 0xff
 8027a80:	d021      	beq.n	8027ac6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 8027a82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027a84:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a88:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027a8a:	fb05 fe0e 	mul.w	lr, r5, lr
 8027a8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027a90:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8027a94:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8027a98:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8027a9a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027a9e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027aa2:	fb05 fb0b 	mul.w	fp, r5, fp
 8027aa6:	44f0      	add	r8, lr
 8027aa8:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8027aac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027ab0:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8027ab4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027ab8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027abc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027ac0:	ea48 050b 	orr.w	r5, r8, fp
 8027ac4:	9510      	str	r5, [sp, #64]	; 0x40
 8027ac6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027ac8:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8027acc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ad0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027ad4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027ad6:	fb09 fe0e 	mul.w	lr, r9, lr
 8027ada:	fb02 ee08 	mla	lr, r2, r8, lr
 8027ade:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8027ae2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027ae4:	fb0c ee08 	mla	lr, ip, r8, lr
 8027ae8:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8027aec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027aee:	fb0a ee08 	mla	lr, sl, r8, lr
 8027af2:	f405 487f 	and.w	r8, r5, #65280	; 0xff00
 8027af6:	fb09 f908 	mul.w	r9, r9, r8
 8027afa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027afe:	fb02 9303 	mla	r3, r2, r3, r9
 8027b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027b04:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027b08:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8027b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027b0e:	fb0c 330b 	mla	r3, ip, fp, r3
 8027b12:	f402 487f 	and.w	r8, r2, #65280	; 0xff00
 8027b16:	fb0a 3808 	mla	r8, sl, r8, r3
 8027b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b1c:	4358      	muls	r0, r3
 8027b1e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027b22:	1c43      	adds	r3, r0, #1
 8027b24:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027b28:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027b2c:	ea4e 0e08 	orr.w	lr, lr, r8
 8027b30:	1200      	asrs	r0, r0, #8
 8027b32:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8027b36:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8027b3a:	28ff      	cmp	r0, #255	; 0xff
 8027b3c:	fa5f fc83 	uxtb.w	ip, r3
 8027b40:	fa5f f882 	uxtb.w	r8, r2
 8027b44:	d118      	bne.n	8027b78 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8027b46:	f881 e000 	strb.w	lr, [r1]
 8027b4a:	704a      	strb	r2, [r1, #1]
 8027b4c:	708b      	strb	r3, [r1, #2]
 8027b4e:	70c8      	strb	r0, [r1, #3]
 8027b50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b52:	3104      	adds	r1, #4
 8027b54:	441c      	add	r4, r3
 8027b56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b58:	441e      	add	r6, r3
 8027b5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027b5c:	3b01      	subs	r3, #1
 8027b5e:	9319      	str	r3, [sp, #100]	; 0x64
 8027b60:	e614      	b.n	802778c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8027b62:	2800      	cmp	r0, #0
 8027b64:	f43f aeff 	beq.w	8027966 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027b68:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8027b6c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8027b70:	950b      	str	r5, [sp, #44]	; 0x2c
 8027b72:	0e2d      	lsrs	r5, r5, #24
 8027b74:	9513      	str	r5, [sp, #76]	; 0x4c
 8027b76:	e6f6      	b.n	8027966 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8027b78:	b2c3      	uxtb	r3, r0
 8027b7a:	2800      	cmp	r0, #0
 8027b7c:	d0e8      	beq.n	8027b50 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027b7e:	78c8      	ldrb	r0, [r1, #3]
 8027b80:	fa5f fe8e 	uxtb.w	lr, lr
 8027b84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027b86:	fb03 f900 	mul.w	r9, r3, r0
 8027b8a:	4403      	add	r3, r0
 8027b8c:	f109 0201 	add.w	r2, r9, #1
 8027b90:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8027b94:	1212      	asrs	r2, r2, #8
 8027b96:	1a9b      	subs	r3, r3, r2
 8027b98:	1a82      	subs	r2, r0, r2
 8027b9a:	7808      	ldrb	r0, [r1, #0]
 8027b9c:	b2db      	uxtb	r3, r3
 8027b9e:	4350      	muls	r0, r2
 8027ba0:	70cb      	strb	r3, [r1, #3]
 8027ba2:	fb05 0e0e 	mla	lr, r5, lr, r0
 8027ba6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027ba8:	7848      	ldrb	r0, [r1, #1]
 8027baa:	fb15 f808 	smulbb	r8, r5, r8
 8027bae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027bb0:	fb9e fef3 	sdiv	lr, lr, r3
 8027bb4:	fb02 8000 	mla	r0, r2, r0, r8
 8027bb8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027bbc:	fb15 fc0c 	smulbb	ip, r5, ip
 8027bc0:	bfd4      	ite	le
 8027bc2:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8027bc6:	f04f 0eff 	movgt.w	lr, #255	; 0xff
 8027bca:	fb90 f0f3 	sdiv	r0, r0, r3
 8027bce:	bfd8      	it	le
 8027bd0:	fa5f fe8e 	uxtble.w	lr, lr
 8027bd4:	28ff      	cmp	r0, #255	; 0xff
 8027bd6:	bfd4      	ite	le
 8027bd8:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027bdc:	20ff      	movgt	r0, #255	; 0xff
 8027bde:	f881 e000 	strb.w	lr, [r1]
 8027be2:	bfd8      	it	le
 8027be4:	b2c0      	uxtble	r0, r0
 8027be6:	7048      	strb	r0, [r1, #1]
 8027be8:	7888      	ldrb	r0, [r1, #2]
 8027bea:	fb02 c200 	mla	r2, r2, r0, ip
 8027bee:	fb92 f2f3 	sdiv	r2, r2, r3
 8027bf2:	2aff      	cmp	r2, #255	; 0xff
 8027bf4:	bfd6      	itet	le
 8027bf6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027bfa:	22ff      	movgt	r2, #255	; 0xff
 8027bfc:	b2d2      	uxtble	r2, r2
 8027bfe:	708a      	strb	r2, [r1, #2]
 8027c00:	e7a6      	b.n	8027b50 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027c02:	b01d      	add	sp, #116	; 0x74
 8027c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027c08 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8027c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c0c:	b087      	sub	sp, #28
 8027c0e:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
 8027c12:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8027c16:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8027c1a:	2e00      	cmp	r6, #0
 8027c1c:	9002      	str	r0, [sp, #8]
 8027c1e:	fb06 8005 	mla	r0, r6, r5, r8
 8027c22:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8027c26:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8027c2a:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 8027c2e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8027c32:	9703      	str	r7, [sp, #12]
 8027c34:	eb03 0700 	add.w	r7, r3, r0
 8027c38:	9704      	str	r7, [sp, #16]
 8027c3a:	f2c0 8133 	blt.w	8027ea4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8027c3e:	45b3      	cmp	fp, r6
 8027c40:	f340 8130 	ble.w	8027ea4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8027c44:	f1b8 0f00 	cmp.w	r8, #0
 8027c48:	f2c0 8128 	blt.w	8027e9c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8027c4c:	4545      	cmp	r5, r8
 8027c4e:	f340 8125 	ble.w	8027e9c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8027c52:	f813 c000 	ldrb.w	ip, [r3, r0]
 8027c56:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8027c5a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8027c5e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027c62:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 8027c66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027c6a:	fb0c f303 	mul.w	r3, ip, r3
 8027c6e:	fb0a f202 	mul.w	r2, sl, r2
 8027c72:	f103 0a20 	add.w	sl, r3, #32
 8027c76:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8027c7a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8027c7e:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8027c82:	4402      	add	r2, r0
 8027c84:	0a1b      	lsrs	r3, r3, #8
 8027c86:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8027c8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027c8e:	ea47 0a03 	orr.w	sl, r7, r3
 8027c92:	f118 0301 	adds.w	r3, r8, #1
 8027c96:	f100 810a 	bmi.w	8027eae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8027c9a:	429d      	cmp	r5, r3
 8027c9c:	f340 8107 	ble.w	8027eae <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8027ca0:	2c00      	cmp	r4, #0
 8027ca2:	f000 8107 	beq.w	8027eb4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8027ca6:	9b04      	ldr	r3, [sp, #16]
 8027ca8:	785a      	ldrb	r2, [r3, #1]
 8027caa:	9b03      	ldr	r3, [sp, #12]
 8027cac:	10d7      	asrs	r7, r2, #3
 8027cae:	885b      	ldrh	r3, [r3, #2]
 8027cb0:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8027cb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027cb8:	4347      	muls	r7, r0
 8027cba:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8027cbe:	4353      	muls	r3, r2
 8027cc0:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8027cc4:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8027cc8:	444f      	add	r7, r9
 8027cca:	f103 0920 	add.w	r9, r3, #32
 8027cce:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8027cd2:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8027cd6:	0a1b      	lsrs	r3, r3, #8
 8027cd8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027cdc:	4303      	orrs	r3, r0
 8027cde:	9301      	str	r3, [sp, #4]
 8027ce0:	3601      	adds	r6, #1
 8027ce2:	f100 80ed 	bmi.w	8027ec0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8027ce6:	45b3      	cmp	fp, r6
 8027ce8:	f340 80ea 	ble.w	8027ec0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8027cec:	f1be 0f00 	cmp.w	lr, #0
 8027cf0:	f000 80eb 	beq.w	8027eca <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8027cf4:	f1b8 0f00 	cmp.w	r8, #0
 8027cf8:	f2c0 80df 	blt.w	8027eba <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8027cfc:	4545      	cmp	r5, r8
 8027cfe:	f340 80dc 	ble.w	8027eba <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8027d02:	9b04      	ldr	r3, [sp, #16]
 8027d04:	5d5f      	ldrb	r7, [r3, r5]
 8027d06:	9b03      	ldr	r3, [sp, #12]
 8027d08:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027d0c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8027d10:	f423 66fc 	bic.w	r6, r3, #2016	; 0x7e0
 8027d14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027d18:	fb09 f906 	mul.w	r9, r9, r6
 8027d1c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027d20:	437b      	muls	r3, r7
 8027d22:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8027d26:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8027d2a:	44d9      	add	r9, fp
 8027d2c:	f103 0b20 	add.w	fp, r3, #32
 8027d30:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8027d34:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8027d38:	0a1b      	lsrs	r3, r3, #8
 8027d3a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027d3e:	431e      	orrs	r6, r3
 8027d40:	f118 0801 	adds.w	r8, r8, #1
 8027d44:	f100 80c6 	bmi.w	8027ed4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8027d48:	4545      	cmp	r5, r8
 8027d4a:	f340 80c3 	ble.w	8027ed4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8027d4e:	2c00      	cmp	r4, #0
 8027d50:	f000 80c3 	beq.w	8027eda <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8027d54:	3501      	adds	r5, #1
 8027d56:	9b04      	ldr	r3, [sp, #16]
 8027d58:	9803      	ldr	r0, [sp, #12]
 8027d5a:	5d5b      	ldrb	r3, [r3, r5]
 8027d5c:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8027d60:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8027d64:	f428 65fc 	bic.w	r5, r8, #2016	; 0x7e0
 8027d68:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027d6c:	fb09 f905 	mul.w	r9, r9, r5
 8027d70:	f64f 051f 	movw	r5, #63519	; 0xf81f
 8027d74:	fb03 f808 	mul.w	r8, r3, r8
 8027d78:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8027d7c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8027d80:	44d9      	add	r9, fp
 8027d82:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8027d86:	f108 0920 	add.w	r9, r8, #32
 8027d8a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8027d8e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027d92:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027d96:	ea45 0508 	orr.w	r5, r5, r8
 8027d9a:	fa1f f984 	uxth.w	r9, r4
 8027d9e:	fa1f f88e 	uxth.w	r8, lr
 8027da2:	fb09 f008 	mul.w	r0, r9, r8
 8027da6:	9003      	str	r0, [sp, #12]
 8027da8:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8027dac:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8027db0:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 8027db4:	9004      	str	r0, [sp, #16]
 8027db6:	9803      	ldr	r0, [sp, #12]
 8027db8:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8027dbc:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8027dc0:	ea49 090a 	orr.w	r9, r9, sl
 8027dc4:	f1ce 0a10 	rsb	sl, lr, #16
 8027dc8:	fa1f f088 	uxth.w	r0, r8
 8027dcc:	fb14 f80e 	smulbb	r8, r4, lr
 8027dd0:	ebaa 0a04 	sub.w	sl, sl, r4
 8027dd4:	9005      	str	r0, [sp, #20]
 8027dd6:	9801      	ldr	r0, [sp, #4]
 8027dd8:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8027ddc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027de0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027de4:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8027de8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027dec:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8027df0:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8027df4:	ea4b 0000 	orr.w	r0, fp, r0
 8027df8:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027dfc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027e00:	4360      	muls	r0, r4
 8027e02:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e06:	9c04      	ldr	r4, [sp, #16]
 8027e08:	ea4b 0505 	orr.w	r5, fp, r5
 8027e0c:	fb0a 0009 	mla	r0, sl, r9, r0
 8027e10:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8027e14:	fb08 0005 	mla	r0, r8, r5, r0
 8027e18:	0435      	lsls	r5, r6, #16
 8027e1a:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027e1e:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8027e22:	432e      	orrs	r6, r5
 8027e24:	9d05      	ldr	r5, [sp, #20]
 8027e26:	fb0e 0e06 	mla	lr, lr, r6, r0
 8027e2a:	1b64      	subs	r4, r4, r5
 8027e2c:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8027e30:	b2a4      	uxth	r4, r4
 8027e32:	1bad      	subs	r5, r5, r6
 8027e34:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8027e38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027e3c:	b2ad      	uxth	r5, r5
 8027e3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e42:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027e46:	436a      	muls	r2, r5
 8027e48:	ea40 0e0e 	orr.w	lr, r0, lr
 8027e4c:	fb0c 2204 	mla	r2, ip, r4, r2
 8027e50:	9c05      	ldr	r4, [sp, #20]
 8027e52:	fa1f f08e 	uxth.w	r0, lr
 8027e56:	fb04 2707 	mla	r7, r4, r7, r2
 8027e5a:	9a02      	ldr	r2, [sp, #8]
 8027e5c:	1205      	asrs	r5, r0, #8
 8027e5e:	fb06 7303 	mla	r3, r6, r3, r7
 8027e62:	10c7      	asrs	r7, r0, #3
 8027e64:	00c0      	lsls	r0, r0, #3
 8027e66:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027e6e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027e72:	b2c0      	uxtb	r0, r0
 8027e74:	4353      	muls	r3, r2
 8027e76:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8027e7a:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8027e7e:	1c5a      	adds	r2, r3, #1
 8027e80:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8027e84:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027e88:	121b      	asrs	r3, r3, #8
 8027e8a:	2bff      	cmp	r3, #255	; 0xff
 8027e8c:	d128      	bne.n	8027ee0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 8027e8e:	7008      	strb	r0, [r1, #0]
 8027e90:	704f      	strb	r7, [r1, #1]
 8027e92:	708d      	strb	r5, [r1, #2]
 8027e94:	70cb      	strb	r3, [r1, #3]
 8027e96:	b007      	add	sp, #28
 8027e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e9c:	f04f 0c00 	mov.w	ip, #0
 8027ea0:	46e2      	mov	sl, ip
 8027ea2:	e6f6      	b.n	8027c92 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8027ea4:	2200      	movs	r2, #0
 8027ea6:	4694      	mov	ip, r2
 8027ea8:	9201      	str	r2, [sp, #4]
 8027eaa:	4692      	mov	sl, r2
 8027eac:	e718      	b.n	8027ce0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027eae:	2200      	movs	r2, #0
 8027eb0:	9201      	str	r2, [sp, #4]
 8027eb2:	e715      	b.n	8027ce0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027eb4:	4622      	mov	r2, r4
 8027eb6:	9401      	str	r4, [sp, #4]
 8027eb8:	e712      	b.n	8027ce0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8027eba:	2700      	movs	r7, #0
 8027ebc:	463e      	mov	r6, r7
 8027ebe:	e73f      	b.n	8027d40 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8027ec0:	2300      	movs	r3, #0
 8027ec2:	461f      	mov	r7, r3
 8027ec4:	461d      	mov	r5, r3
 8027ec6:	461e      	mov	r6, r3
 8027ec8:	e767      	b.n	8027d9a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027eca:	4673      	mov	r3, lr
 8027ecc:	4677      	mov	r7, lr
 8027ece:	4675      	mov	r5, lr
 8027ed0:	4676      	mov	r6, lr
 8027ed2:	e762      	b.n	8027d9a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027ed4:	2300      	movs	r3, #0
 8027ed6:	461d      	mov	r5, r3
 8027ed8:	e75f      	b.n	8027d9a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027eda:	4623      	mov	r3, r4
 8027edc:	4625      	mov	r5, r4
 8027ede:	e75c      	b.n	8027d9a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8027ee0:	b2dc      	uxtb	r4, r3
 8027ee2:	2b00      	cmp	r3, #0
 8027ee4:	d0d7      	beq.n	8027e96 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8027ee6:	f891 c003 	ldrb.w	ip, [r1, #3]
 8027eea:	fb04 f20c 	mul.w	r2, r4, ip
 8027eee:	eb0c 0304 	add.w	r3, ip, r4
 8027ef2:	780c      	ldrb	r4, [r1, #0]
 8027ef4:	1c56      	adds	r6, r2, #1
 8027ef6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8027efa:	1232      	asrs	r2, r6, #8
 8027efc:	ebac 0602 	sub.w	r6, ip, r2
 8027f00:	1a9b      	subs	r3, r3, r2
 8027f02:	9a02      	ldr	r2, [sp, #8]
 8027f04:	b2db      	uxtb	r3, r3
 8027f06:	fb10 f002 	smulbb	r0, r0, r2
 8027f0a:	9a02      	ldr	r2, [sp, #8]
 8027f0c:	fb06 0404 	mla	r4, r6, r4, r0
 8027f10:	fb12 f707 	smulbb	r7, r2, r7
 8027f14:	7848      	ldrb	r0, [r1, #1]
 8027f16:	788a      	ldrb	r2, [r1, #2]
 8027f18:	fb06 7000 	mla	r0, r6, r0, r7
 8027f1c:	fb94 f4f3 	sdiv	r4, r4, r3
 8027f20:	fb90 f0f3 	sdiv	r0, r0, r3
 8027f24:	2cff      	cmp	r4, #255	; 0xff
 8027f26:	bfd6      	itet	le
 8027f28:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8027f2c:	24ff      	movgt	r4, #255	; 0xff
 8027f2e:	b2e4      	uxtble	r4, r4
 8027f30:	28ff      	cmp	r0, #255	; 0xff
 8027f32:	bfd4      	ite	le
 8027f34:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027f38:	20ff      	movgt	r0, #255	; 0xff
 8027f3a:	700c      	strb	r4, [r1, #0]
 8027f3c:	bfd8      	it	le
 8027f3e:	b2c0      	uxtble	r0, r0
 8027f40:	7048      	strb	r0, [r1, #1]
 8027f42:	9802      	ldr	r0, [sp, #8]
 8027f44:	fb10 f505 	smulbb	r5, r0, r5
 8027f48:	fb06 5202 	mla	r2, r6, r2, r5
 8027f4c:	fb92 f2f3 	sdiv	r2, r2, r3
 8027f50:	2aff      	cmp	r2, #255	; 0xff
 8027f52:	bfd6      	itet	le
 8027f54:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027f58:	22ff      	movgt	r2, #255	; 0xff
 8027f5a:	b2d2      	uxtble	r2, r2
 8027f5c:	708a      	strb	r2, [r1, #2]
 8027f5e:	e799      	b.n	8027e94 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08027f60 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f64:	b097      	sub	sp, #92	; 0x5c
 8027f66:	9214      	str	r2, [sp, #80]	; 0x50
 8027f68:	9309      	str	r3, [sp, #36]	; 0x24
 8027f6a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027f6c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027f70:	9015      	str	r0, [sp, #84]	; 0x54
 8027f72:	9112      	str	r1, [sp, #72]	; 0x48
 8027f74:	6850      	ldr	r0, [r2, #4]
 8027f76:	930a      	str	r3, [sp, #40]	; 0x28
 8027f78:	6812      	ldr	r2, [r2, #0]
 8027f7a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027f7e:	fb00 1303 	mla	r3, r0, r3, r1
 8027f82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8027f88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f8a:	681b      	ldr	r3, [r3, #0]
 8027f8c:	930c      	str	r3, [sp, #48]	; 0x30
 8027f8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027f90:	685b      	ldr	r3, [r3, #4]
 8027f92:	930d      	str	r3, [sp, #52]	; 0x34
 8027f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027f96:	2b00      	cmp	r3, #0
 8027f98:	dc03      	bgt.n	8027fa2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f9c:	2b00      	cmp	r3, #0
 8027f9e:	f340 8407 	ble.w	80287b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8027fa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027fa4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fa8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027fac:	1e48      	subs	r0, r1, #1
 8027fae:	1e55      	subs	r5, r2, #1
 8027fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	f340 81b7 	ble.w	8028326 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8027fb8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8027fba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027fbc:	1436      	asrs	r6, r6, #16
 8027fbe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027fc2:	d406      	bmi.n	8027fd2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027fc4:	4286      	cmp	r6, r0
 8027fc6:	da04      	bge.n	8027fd2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	db02      	blt.n	8027fd2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8027fcc:	42ab      	cmp	r3, r5
 8027fce:	f2c0 81ab 	blt.w	8028328 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027fd2:	3601      	adds	r6, #1
 8027fd4:	f100 8198 	bmi.w	8028308 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027fd8:	42b1      	cmp	r1, r6
 8027fda:	f2c0 8195 	blt.w	8028308 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027fde:	3301      	adds	r3, #1
 8027fe0:	f100 8192 	bmi.w	8028308 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027fe4:	429a      	cmp	r2, r3
 8027fe6:	f2c0 818f 	blt.w	8028308 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027fec:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8027ff0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027ff2:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027ff6:	2b00      	cmp	r3, #0
 8027ff8:	f340 81b7 	ble.w	802836a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8027ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027ffe:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8028000:	1418      	asrs	r0, r3, #16
 8028002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028004:	1436      	asrs	r6, r6, #16
 8028006:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802800a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802800c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8028010:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028012:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028016:	f100 820f 	bmi.w	8028438 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802801a:	f102 3eff 	add.w	lr, r2, #4294967295
 802801e:	4576      	cmp	r6, lr
 8028020:	f280 820a 	bge.w	8028438 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8028024:	2800      	cmp	r0, #0
 8028026:	f2c0 8207 	blt.w	8028438 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802802a:	f103 3eff 	add.w	lr, r3, #4294967295
 802802e:	4570      	cmp	r0, lr
 8028030:	f280 8202 	bge.w	8028438 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8028034:	b212      	sxth	r2, r2
 8028036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028038:	fa1f fe81 	uxth.w	lr, r1
 802803c:	fb00 6002 	mla	r0, r0, r2, r6
 8028040:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8028044:	eb03 0a00 	add.w	sl, r3, r0
 8028048:	f813 9000 	ldrb.w	r9, [r3, r0]
 802804c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028050:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028054:	b29b      	uxth	r3, r3
 8028056:	f1bc 0f00 	cmp.w	ip, #0
 802805a:	f000 81cc 	beq.w	80283f6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802805e:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028062:	eb0a 0b02 	add.w	fp, sl, r2
 8028066:	fa1f fa8c 	uxth.w	sl, ip
 802806a:	940e      	str	r4, [sp, #56]	; 0x38
 802806c:	fb0a fe0e 	mul.w	lr, sl, lr
 8028070:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028074:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028078:	eba6 060e 	sub.w	r6, r6, lr
 802807c:	940f      	str	r4, [sp, #60]	; 0x3c
 802807e:	fa1f fa8a 	uxth.w	sl, sl
 8028082:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028084:	b2b6      	uxth	r6, r6
 8028086:	eba3 030a 	sub.w	r3, r3, sl
 802808a:	fb08 f606 	mul.w	r6, r8, r6
 802808e:	b29b      	uxth	r3, r3
 8028090:	fb09 6303 	mla	r3, r9, r3, r6
 8028094:	fb0a 3304 	mla	r3, sl, r4, r3
 8028098:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802809a:	fb0e 3304 	mla	r3, lr, r4, r3
 802809e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	f000 8123 	beq.w	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80280a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80280aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80280ae:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 80280b2:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80280b6:	f000 81a3 	beq.w	8028400 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 80280ba:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80280be:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80280c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80280c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80280ca:	fb09 f000 	mul.w	r0, r9, r0
 80280ce:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 80280d2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80280d6:	f100 0b20 	add.w	fp, r0, #32
 80280da:	44ce      	add	lr, r9
 80280dc:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80280e0:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80280e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80280e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80280ec:	ea4e 0909 	orr.w	r9, lr, r9
 80280f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80280f4:	8870      	ldrh	r0, [r6, #2]
 80280f6:	d019      	beq.n	802812c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80280f8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80280fc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028100:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028104:	fb0a fe0e 	mul.w	lr, sl, lr
 8028108:	fb08 f800 	mul.w	r8, r8, r0
 802810c:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8028110:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028114:	f108 0b20 	add.w	fp, r8, #32
 8028118:	4486      	add	lr, r0
 802811a:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802811e:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028122:	0a00      	lsrs	r0, r0, #8
 8028124:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028128:	ea4e 0000 	orr.w	r0, lr, r0
 802812c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028130:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028134:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028138:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802813c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028140:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028144:	ea4e 0909 	orr.w	r9, lr, r9
 8028148:	ea4a 0000 	orr.w	r0, sl, r0
 802814c:	f1bc 0f00 	cmp.w	ip, #0
 8028150:	f000 8158 	beq.w	8028404 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8028154:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8028158:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802815a:	3a01      	subs	r2, #1
 802815c:	2cff      	cmp	r4, #255	; 0xff
 802815e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028162:	f102 0202 	add.w	r2, r2, #2
 8028166:	eb06 0e02 	add.w	lr, r6, r2
 802816a:	5ab2      	ldrh	r2, [r6, r2]
 802816c:	d018      	beq.n	80281a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802816e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8028172:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028176:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802817a:	fb04 fa02 	mul.w	sl, r4, r2
 802817e:	fb08 f806 	mul.w	r8, r8, r6
 8028182:	f10a 0620 	add.w	r6, sl, #32
 8028186:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 802818a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802818e:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8028192:	4442      	add	r2, r8
 8028194:	0a36      	lsrs	r6, r6, #8
 8028196:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 802819a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802819e:	4332      	orrs	r2, r6
 80281a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80281a2:	f8be 6002 	ldrh.w	r6, [lr, #2]
 80281a6:	2cff      	cmp	r4, #255	; 0xff
 80281a8:	d01a      	beq.n	80281e0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80281aa:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 80281ae:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80281b2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80281b6:	fb04 fa06 	mul.w	sl, r4, r6
 80281ba:	fb08 f80e 	mul.w	r8, r8, lr
 80281be:	f10a 0e20 	add.w	lr, sl, #32
 80281c2:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 80281c6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80281ca:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80281ce:	4446      	add	r6, r8
 80281d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80281d4:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 80281d8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80281dc:	ea46 060e 	orr.w	r6, r6, lr
 80281e0:	fb1c fe01 	smulbb	lr, ip, r1
 80281e4:	f1cc 0810 	rsb	r8, ip, #16
 80281e8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80281ec:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80281f0:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80281f4:	eba8 0801 	sub.w	r8, r8, r1
 80281f8:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 80281fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028200:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8028204:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8028208:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802820c:	ea4a 0202 	orr.w	r2, sl, r2
 8028210:	4341      	muls	r1, r0
 8028212:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028216:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802821a:	fb09 1108 	mla	r1, r9, r8, r1
 802821e:	ea4b 0606 	orr.w	r6, fp, r6
 8028222:	fb0c 1102 	mla	r1, ip, r2, r1
 8028226:	fb0e 1e06 	mla	lr, lr, r6, r1
 802822a:	ea4f 505e 	mov.w	r0, lr, lsr #21
 802822e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028232:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028236:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802823a:	ea40 0e0e 	orr.w	lr, r0, lr
 802823e:	fa1f f08e 	uxth.w	r0, lr
 8028242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028244:	1206      	asrs	r6, r0, #8
 8028246:	10c1      	asrs	r1, r0, #3
 8028248:	4353      	muls	r3, r2
 802824a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802824e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028252:	1c5a      	adds	r2, r3, #1
 8028254:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8028258:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802825c:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8028260:	00c2      	lsls	r2, r0, #3
 8028262:	121b      	asrs	r3, r3, #8
 8028264:	b2d2      	uxtb	r2, r2
 8028266:	2bff      	cmp	r3, #255	; 0xff
 8028268:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802826c:	f000 80de 	beq.w	802842c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8028270:	b2d8      	uxtb	r0, r3
 8028272:	2b00      	cmp	r3, #0
 8028274:	d03b      	beq.n	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028276:	f895 c003 	ldrb.w	ip, [r5, #3]
 802827a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802827c:	fb00 fe0c 	mul.w	lr, r0, ip
 8028280:	4460      	add	r0, ip
 8028282:	fb12 f204 	smulbb	r2, r2, r4
 8028286:	f10e 0301 	add.w	r3, lr, #1
 802828a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802828e:	121b      	asrs	r3, r3, #8
 8028290:	ebac 0c03 	sub.w	ip, ip, r3
 8028294:	1ac0      	subs	r0, r0, r3
 8028296:	782b      	ldrb	r3, [r5, #0]
 8028298:	b2c0      	uxtb	r0, r0
 802829a:	fb0c 2303 	mla	r3, ip, r3, r2
 802829e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80282a0:	70e8      	strb	r0, [r5, #3]
 80282a2:	fb12 f101 	smulbb	r1, r2, r1
 80282a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80282a8:	fb93 f3f0 	sdiv	r3, r3, r0
 80282ac:	fb12 f606 	smulbb	r6, r2, r6
 80282b0:	2bff      	cmp	r3, #255	; 0xff
 80282b2:	bfd6      	itet	le
 80282b4:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80282b8:	23ff      	movgt	r3, #255	; 0xff
 80282ba:	b2db      	uxtble	r3, r3
 80282bc:	702b      	strb	r3, [r5, #0]
 80282be:	786b      	ldrb	r3, [r5, #1]
 80282c0:	fb0c 1303 	mla	r3, ip, r3, r1
 80282c4:	fb93 f3f0 	sdiv	r3, r3, r0
 80282c8:	2bff      	cmp	r3, #255	; 0xff
 80282ca:	bfd6      	itet	le
 80282cc:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80282d0:	23ff      	movgt	r3, #255	; 0xff
 80282d2:	b2db      	uxtble	r3, r3
 80282d4:	706b      	strb	r3, [r5, #1]
 80282d6:	78ab      	ldrb	r3, [r5, #2]
 80282d8:	fb0c 6303 	mla	r3, ip, r3, r6
 80282dc:	fb93 f3f0 	sdiv	r3, r3, r0
 80282e0:	2bff      	cmp	r3, #255	; 0xff
 80282e2:	bfd6      	itet	le
 80282e4:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80282e8:	23ff      	movgt	r3, #255	; 0xff
 80282ea:	b2db      	uxtble	r3, r3
 80282ec:	70ab      	strb	r3, [r5, #2]
 80282ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80282f0:	3504      	adds	r5, #4
 80282f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80282f4:	4413      	add	r3, r2
 80282f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80282f8:	9321      	str	r3, [sp, #132]	; 0x84
 80282fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80282fc:	441a      	add	r2, r3
 80282fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028300:	3b01      	subs	r3, #1
 8028302:	9222      	str	r2, [sp, #136]	; 0x88
 8028304:	9313      	str	r3, [sp, #76]	; 0x4c
 8028306:	e675      	b.n	8027ff4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8028308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802830a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802830c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 802830e:	4433      	add	r3, r6
 8028310:	9321      	str	r3, [sp, #132]	; 0x84
 8028312:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028314:	441c      	add	r4, r3
 8028316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028318:	3b01      	subs	r3, #1
 802831a:	9422      	str	r4, [sp, #136]	; 0x88
 802831c:	9309      	str	r3, [sp, #36]	; 0x24
 802831e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028320:	3304      	adds	r3, #4
 8028322:	930b      	str	r3, [sp, #44]	; 0x2c
 8028324:	e644      	b.n	8027fb0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028326:	d027      	beq.n	8028378 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8028328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802832a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802832c:	3b01      	subs	r3, #1
 802832e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8028330:	fb00 5003 	mla	r0, r0, r3, r5
 8028334:	1400      	asrs	r0, r0, #16
 8028336:	f53f ae58 	bmi.w	8027fea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802833a:	3901      	subs	r1, #1
 802833c:	4288      	cmp	r0, r1
 802833e:	f6bf ae54 	bge.w	8027fea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028342:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028344:	9822      	ldr	r0, [sp, #136]	; 0x88
 8028346:	fb01 0303 	mla	r3, r1, r3, r0
 802834a:	141b      	asrs	r3, r3, #16
 802834c:	f53f ae4d 	bmi.w	8027fea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028350:	3a01      	subs	r2, #1
 8028352:	4293      	cmp	r3, r2
 8028354:	f6bf ae49 	bge.w	8027fea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802835a:	f64f 071f 	movw	r7, #63519	; 0xf81f
 802835e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028360:	9313      	str	r3, [sp, #76]	; 0x4c
 8028362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028364:	2b00      	cmp	r3, #0
 8028366:	f300 8086 	bgt.w	8028476 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802836a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802836c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028372:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028376:	930b      	str	r3, [sp, #44]	; 0x2c
 8028378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802837a:	2b00      	cmp	r3, #0
 802837c:	f340 8218 	ble.w	80287b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8028380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028384:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028386:	ee30 0a04 	vadd.f32	s0, s0, s8
 802838a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802838e:	eef0 6a62 	vmov.f32	s13, s5
 8028392:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028396:	ee31 1a05 	vadd.f32	s2, s2, s10
 802839a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802839e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 80283a2:	eef0 6a43 	vmov.f32	s13, s6
 80283a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283aa:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80283ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80283b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80283b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80283ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80283be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80283c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80283c6:	ee12 2a90 	vmov	r2, s5
 80283ca:	eef0 2a47 	vmov.f32	s5, s14
 80283ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80283d2:	ee13 2a10 	vmov	r2, s6
 80283d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80283d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80283da:	eeb0 3a67 	vmov.f32	s6, s15
 80283de:	fb92 f3f3 	sdiv	r3, r2, r3
 80283e2:	9324      	str	r3, [sp, #144]	; 0x90
 80283e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80283e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80283e8:	3b01      	subs	r3, #1
 80283ea:	9312      	str	r3, [sp, #72]	; 0x48
 80283ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80283ee:	bf08      	it	eq
 80283f0:	4613      	moveq	r3, r2
 80283f2:	9309      	str	r3, [sp, #36]	; 0x24
 80283f4:	e5ce      	b.n	8027f94 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80283f6:	fb08 f606 	mul.w	r6, r8, r6
 80283fa:	fb09 6303 	mla	r3, r9, r3, r6
 80283fe:	e64e      	b.n	802809e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8028400:	4681      	mov	r9, r0
 8028402:	e675      	b.n	80280f0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8028404:	f1c1 0210 	rsb	r2, r1, #16
 8028408:	4341      	muls	r1, r0
 802840a:	fb09 1902 	mla	r9, r9, r2, r1
 802840e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028412:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028416:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802841a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802841e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028422:	ea40 0909 	orr.w	r9, r0, r9
 8028426:	fa1f f089 	uxth.w	r0, r9
 802842a:	e70a      	b.n	8028242 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802842c:	0209      	lsls	r1, r1, #8
 802842e:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8028432:	4332      	orrs	r2, r6
 8028434:	602a      	str	r2, [r5, #0]
 8028436:	e75a      	b.n	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028438:	f116 0e01 	adds.w	lr, r6, #1
 802843c:	f53f af57 	bmi.w	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028440:	4572      	cmp	r2, lr
 8028442:	f6ff af54 	blt.w	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028446:	f110 0e01 	adds.w	lr, r0, #1
 802844a:	f53f af50 	bmi.w	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 802844e:	4573      	cmp	r3, lr
 8028450:	f6ff af4d 	blt.w	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028456:	b21b      	sxth	r3, r3
 8028458:	b212      	sxth	r2, r2
 802845a:	9602      	str	r6, [sp, #8]
 802845c:	9301      	str	r3, [sp, #4]
 802845e:	9200      	str	r2, [sp, #0]
 8028460:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8028464:	e9cd c405 	strd	ip, r4, [sp, #20]
 8028468:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802846c:	4629      	mov	r1, r5
 802846e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028470:	f7ff fbca 	bl	8027c08 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 8028474:	e73b      	b.n	80282ee <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8028476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028478:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802847c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802847e:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8028482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028484:	fa1f fe82 	uxth.w	lr, r2
 8028488:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802848e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028492:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8028496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028498:	141b      	asrs	r3, r3, #16
 802849a:	fb00 3c0c 	mla	ip, r0, ip, r3
 802849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80284a0:	eb03 0a0c 	add.w	sl, r3, ip
 80284a4:	f813 900c 	ldrb.w	r9, [r3, ip]
 80284a8:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80284ac:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80284b0:	b29b      	uxth	r3, r3
 80284b2:	2e00      	cmp	r6, #0
 80284b4:	f000 815c 	beq.w	8028770 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 80284b8:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80284bc:	eb0a 0b00 	add.w	fp, sl, r0
 80284c0:	fa1f fa86 	uxth.w	sl, r6
 80284c4:	9410      	str	r4, [sp, #64]	; 0x40
 80284c6:	fb0a fe0e 	mul.w	lr, sl, lr
 80284ca:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80284ce:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80284d2:	eba5 050e 	sub.w	r5, r5, lr
 80284d6:	9411      	str	r4, [sp, #68]	; 0x44
 80284d8:	fa1f fa8a 	uxth.w	sl, sl
 80284dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80284de:	b2ad      	uxth	r5, r5
 80284e0:	eba3 030a 	sub.w	r3, r3, sl
 80284e4:	fb08 f505 	mul.w	r5, r8, r5
 80284e8:	b29b      	uxth	r3, r3
 80284ea:	fb09 5303 	mla	r3, r9, r3, r5
 80284ee:	fb0a 3304 	mla	r3, sl, r4, r3
 80284f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80284f4:	fb0e 3304 	mla	r3, lr, r4, r3
 80284f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80284fc:	2b00      	cmp	r3, #0
 80284fe:	f000 812a 	beq.w	8028756 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8028502:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028504:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028508:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 802850c:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8028510:	f000 8133 	beq.w	802877a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 8028514:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8028518:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802851c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028520:	fb0a fe0e 	mul.w	lr, sl, lr
 8028524:	fb09 fc0c 	mul.w	ip, r9, ip
 8028528:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802852c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028530:	f10c 0b20 	add.w	fp, ip, #32
 8028534:	44ce      	add	lr, r9
 8028536:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 802853a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802853e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028542:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028546:	ea4e 0909 	orr.w	r9, lr, r9
 802854a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802854e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8028552:	d01a      	beq.n	802858a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 8028554:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8028558:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802855c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028560:	fb0a fe0e 	mul.w	lr, sl, lr
 8028564:	fb08 f80c 	mul.w	r8, r8, ip
 8028568:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 802856c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028570:	f108 0b20 	add.w	fp, r8, #32
 8028574:	44e6      	add	lr, ip
 8028576:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 802857a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802857e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028582:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028586:	ea4e 0c0c 	orr.w	ip, lr, ip
 802858a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802858e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028592:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 8028596:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802859a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802859e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80285a2:	ea4e 0909 	orr.w	r9, lr, r9
 80285a6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80285aa:	2e00      	cmp	r6, #0
 80285ac:	f000 80e7 	beq.w	802877e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 80285b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80285b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80285b6:	3801      	subs	r0, #1
 80285b8:	2cff      	cmp	r4, #255	; 0xff
 80285ba:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80285be:	f100 0002 	add.w	r0, r0, #2
 80285c2:	eb05 0e00 	add.w	lr, r5, r0
 80285c6:	5a28      	ldrh	r0, [r5, r0]
 80285c8:	d018      	beq.n	80285fc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 80285ca:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 80285ce:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80285d2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80285d6:	fb04 fa00 	mul.w	sl, r4, r0
 80285da:	fb08 f805 	mul.w	r8, r8, r5
 80285de:	f10a 0520 	add.w	r5, sl, #32
 80285e2:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 80285e6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80285ea:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80285ee:	4440      	add	r0, r8
 80285f0:	0a2d      	lsrs	r5, r5, #8
 80285f2:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 80285f6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80285fa:	4328      	orrs	r0, r5
 80285fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80285fe:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028602:	2cff      	cmp	r4, #255	; 0xff
 8028604:	d01a      	beq.n	802863c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028606:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802860a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802860e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028612:	fb04 fa05 	mul.w	sl, r4, r5
 8028616:	fb08 f80e 	mul.w	r8, r8, lr
 802861a:	f10a 0e20 	add.w	lr, sl, #32
 802861e:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 8028622:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028626:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802862a:	4445      	add	r5, r8
 802862c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028630:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 8028634:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8028638:	ea45 050e 	orr.w	r5, r5, lr
 802863c:	fb16 fe02 	smulbb	lr, r6, r2
 8028640:	f1c6 0810 	rsb	r8, r6, #16
 8028644:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028648:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802864c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028650:	eba8 0802 	sub.w	r8, r8, r2
 8028654:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028658:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802865c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8028660:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028664:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028668:	ea4a 0000 	orr.w	r0, sl, r0
 802866c:	fb0c f202 	mul.w	r2, ip, r2
 8028670:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8028674:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028678:	fb09 2208 	mla	r2, r9, r8, r2
 802867c:	ea4b 0505 	orr.w	r5, fp, r5
 8028680:	fb06 2200 	mla	r2, r6, r0, r2
 8028684:	fb0e 2205 	mla	r2, lr, r5, r2
 8028688:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 802868c:	0952      	lsrs	r2, r2, #5
 802868e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028692:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028696:	ea4c 0c05 	orr.w	ip, ip, r5
 802869a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802869c:	fa1f fc8c 	uxth.w	ip, ip
 80286a0:	4353      	muls	r3, r2
 80286a2:	ea4f 262c 	mov.w	r6, ip, asr #8
 80286a6:	ea4f 00ec 	mov.w	r0, ip, asr #3
 80286aa:	1c5a      	adds	r2, r3, #1
 80286ac:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80286b0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80286b4:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80286b8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80286bc:	121b      	asrs	r3, r3, #8
 80286be:	b2d2      	uxtb	r2, r2
 80286c0:	2bff      	cmp	r3, #255	; 0xff
 80286c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80286c6:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80286ca:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80286ce:	d069      	beq.n	80287a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 80286d0:	b2dd      	uxtb	r5, r3
 80286d2:	2b00      	cmp	r3, #0
 80286d4:	d03f      	beq.n	8028756 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80286d6:	f891 c003 	ldrb.w	ip, [r1, #3]
 80286da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80286dc:	fb05 fe0c 	mul.w	lr, r5, ip
 80286e0:	4465      	add	r5, ip
 80286e2:	f891 8000 	ldrb.w	r8, [r1]
 80286e6:	fb12 f204 	smulbb	r2, r2, r4
 80286ea:	f10e 0301 	add.w	r3, lr, #1
 80286ee:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80286f2:	121b      	asrs	r3, r3, #8
 80286f4:	1aed      	subs	r5, r5, r3
 80286f6:	ebac 0303 	sub.w	r3, ip, r3
 80286fa:	f891 c001 	ldrb.w	ip, [r1, #1]
 80286fe:	b2ed      	uxtb	r5, r5
 8028700:	fb03 2208 	mla	r2, r3, r8, r2
 8028704:	fb92 f2f5 	sdiv	r2, r2, r5
 8028708:	2aff      	cmp	r2, #255	; 0xff
 802870a:	70cd      	strb	r5, [r1, #3]
 802870c:	bfd6      	itet	le
 802870e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028712:	22ff      	movgt	r2, #255	; 0xff
 8028714:	b2d2      	uxtble	r2, r2
 8028716:	700a      	strb	r2, [r1, #0]
 8028718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802871a:	fb12 f000 	smulbb	r0, r2, r0
 802871e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028720:	fb03 000c 	mla	r0, r3, ip, r0
 8028724:	fb12 f606 	smulbb	r6, r2, r6
 8028728:	f891 c002 	ldrb.w	ip, [r1, #2]
 802872c:	fb90 f0f5 	sdiv	r0, r0, r5
 8028730:	fb03 630c 	mla	r3, r3, ip, r6
 8028734:	28ff      	cmp	r0, #255	; 0xff
 8028736:	fb93 f3f5 	sdiv	r3, r3, r5
 802873a:	bfd6      	itet	le
 802873c:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028740:	20ff      	movgt	r0, #255	; 0xff
 8028742:	b2c0      	uxtble	r0, r0
 8028744:	2bff      	cmp	r3, #255	; 0xff
 8028746:	bfd4      	ite	le
 8028748:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802874c:	23ff      	movgt	r3, #255	; 0xff
 802874e:	7048      	strb	r0, [r1, #1]
 8028750:	bfd8      	it	le
 8028752:	b2db      	uxtble	r3, r3
 8028754:	708b      	strb	r3, [r1, #2]
 8028756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028758:	3104      	adds	r1, #4
 802875a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802875c:	4413      	add	r3, r2
 802875e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8028760:	9321      	str	r3, [sp, #132]	; 0x84
 8028762:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028764:	441a      	add	r2, r3
 8028766:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028768:	3b01      	subs	r3, #1
 802876a:	9222      	str	r2, [sp, #136]	; 0x88
 802876c:	9313      	str	r3, [sp, #76]	; 0x4c
 802876e:	e5f8      	b.n	8028362 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8028770:	fb08 f505 	mul.w	r5, r8, r5
 8028774:	fb09 5303 	mla	r3, r9, r3, r5
 8028778:	e6be      	b.n	80284f8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 802877a:	46e1      	mov	r9, ip
 802877c:	e6e5      	b.n	802854a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802877e:	f1c2 0010 	rsb	r0, r2, #16
 8028782:	fb0c f202 	mul.w	r2, ip, r2
 8028786:	fb09 2900 	mla	r9, r9, r0, r2
 802878a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802878e:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 8028792:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028796:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802879a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802879e:	ea4c 0c09 	orr.w	ip, ip, r9
 80287a2:	e77a      	b.n	802869a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80287a4:	0200      	lsls	r0, r0, #8
 80287a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80287aa:	4302      	orrs	r2, r0
 80287ac:	600a      	str	r2, [r1, #0]
 80287ae:	e7d2      	b.n	8028756 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80287b0:	b017      	add	sp, #92	; 0x5c
 80287b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080287b6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 80287b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287ba:	b085      	sub	sp, #20
 80287bc:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	; 0x40
 80287c0:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 80287c4:	2800      	cmp	r0, #0
 80287c6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80287ca:	fb00 8504 	mla	r5, r0, r4, r8
 80287ce:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80287d2:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 80287d6:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 80287da:	9702      	str	r7, [sp, #8]
 80287dc:	eb03 0705 	add.w	r7, r3, r5
 80287e0:	9703      	str	r7, [sp, #12]
 80287e2:	f2c0 812e 	blt.w	8028a42 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80287e6:	4582      	cmp	sl, r0
 80287e8:	f340 812b 	ble.w	8028a42 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 80287ec:	f1b8 0f00 	cmp.w	r8, #0
 80287f0:	f2c0 8122 	blt.w	8028a38 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 80287f4:	4544      	cmp	r4, r8
 80287f6:	f340 811f 	ble.w	8028a38 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 80287fa:	f813 e005 	ldrb.w	lr, [r3, r5]
 80287fe:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8028802:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8028806:	f423 67fc 	bic.w	r7, r3, #2016	; 0x7e0
 802880a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802880e:	4357      	muls	r7, r2
 8028810:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8028814:	fb0e f503 	mul.w	r5, lr, r3
 8028818:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 802881c:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8028820:	441f      	add	r7, r3
 8028822:	f105 0320 	add.w	r3, r5, #32
 8028826:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 802882a:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 802882e:	0a1b      	lsrs	r3, r3, #8
 8028830:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028834:	4313      	orrs	r3, r2
 8028836:	9301      	str	r3, [sp, #4]
 8028838:	f118 0301 	adds.w	r3, r8, #1
 802883c:	f100 8106 	bmi.w	8028a4c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8028840:	429c      	cmp	r4, r3
 8028842:	f340 8103 	ble.w	8028a4c <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8028846:	2e00      	cmp	r6, #0
 8028848:	f000 8103 	beq.w	8028a52 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 802884c:	9b03      	ldr	r3, [sp, #12]
 802884e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8028852:	785a      	ldrb	r2, [r3, #1]
 8028854:	9b02      	ldr	r3, [sp, #8]
 8028856:	10d7      	asrs	r7, r2, #3
 8028858:	885b      	ldrh	r3, [r3, #2]
 802885a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802885e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028862:	436f      	muls	r7, r5
 8028864:	4353      	muls	r3, r2
 8028866:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 802886a:	f607 0701 	addw	r7, r7, #2049	; 0x801
 802886e:	444f      	add	r7, r9
 8028870:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8028874:	f103 0b20 	add.w	fp, r3, #32
 8028878:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 802887c:	0a1b      	lsrs	r3, r3, #8
 802887e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028882:	431d      	orrs	r5, r3
 8028884:	3001      	adds	r0, #1
 8028886:	f100 80ea 	bmi.w	8028a5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 802888a:	4582      	cmp	sl, r0
 802888c:	f340 80e7 	ble.w	8028a5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8028890:	f1bc 0f00 	cmp.w	ip, #0
 8028894:	f000 80e8 	beq.w	8028a68 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 8028898:	f1b8 0f00 	cmp.w	r8, #0
 802889c:	f2c0 80dc 	blt.w	8028a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80288a0:	4544      	cmp	r4, r8
 80288a2:	f340 80d9 	ble.w	8028a58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 80288a6:	9b03      	ldr	r3, [sp, #12]
 80288a8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80288ac:	5d1f      	ldrb	r7, [r3, r4]
 80288ae:	9b02      	ldr	r3, [sp, #8]
 80288b0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80288b4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80288b8:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 80288bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80288c0:	fb09 f900 	mul.w	r9, r9, r0
 80288c4:	437b      	muls	r3, r7
 80288c6:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 80288ca:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80288ce:	44d1      	add	r9, sl
 80288d0:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 80288d4:	f103 0b20 	add.w	fp, r3, #32
 80288d8:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 80288dc:	0a1b      	lsrs	r3, r3, #8
 80288de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80288e2:	4318      	orrs	r0, r3
 80288e4:	f118 0801 	adds.w	r8, r8, #1
 80288e8:	f100 80c3 	bmi.w	8028a72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 80288ec:	4544      	cmp	r4, r8
 80288ee:	f340 80c0 	ble.w	8028a72 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 80288f2:	2e00      	cmp	r6, #0
 80288f4:	f000 80c0 	beq.w	8028a78 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 80288f8:	f104 0801 	add.w	r8, r4, #1
 80288fc:	9b03      	ldr	r3, [sp, #12]
 80288fe:	9c02      	ldr	r4, [sp, #8]
 8028900:	f813 3008 	ldrb.w	r3, [r3, r8]
 8028904:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8028908:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 802890c:	f424 68fc 	bic.w	r8, r4, #2016	; 0x7e0
 8028910:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8028914:	fb0a fa08 	mul.w	sl, sl, r8
 8028918:	fb03 f904 	mul.w	r9, r3, r4
 802891c:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8028920:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8028924:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8028928:	44da      	add	sl, fp
 802892a:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 802892e:	f109 0420 	add.w	r4, r9, #32
 8028932:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8028936:	0a24      	lsrs	r4, r4, #8
 8028938:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802893c:	ea48 0404 	orr.w	r4, r8, r4
 8028940:	fa1f f886 	uxth.w	r8, r6
 8028944:	fa1f fa8c 	uxth.w	sl, ip
 8028948:	fb08 fb0a 	mul.w	fp, r8, sl
 802894c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8028950:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 8028954:	f5c8 7980 	rsb	r9, r8, #256	; 0x100
 8028958:	eba8 080b 	sub.w	r8, r8, fp
 802895c:	fa1f fa8a 	uxth.w	sl, sl
 8028960:	fa1f f888 	uxth.w	r8, r8
 8028964:	eba9 090a 	sub.w	r9, r9, sl
 8028968:	fb02 f808 	mul.w	r8, r2, r8
 802896c:	9a01      	ldr	r2, [sp, #4]
 802896e:	fa1f f989 	uxth.w	r9, r9
 8028972:	0412      	lsls	r2, r2, #16
 8028974:	fb0e 8809 	mla	r8, lr, r9, r8
 8028978:	f002 6efc 	and.w	lr, r2, #132120576	; 0x7e00000
 802897c:	9a01      	ldr	r2, [sp, #4]
 802897e:	fb0a 8707 	mla	r7, sl, r7, r8
 8028982:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8028986:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802898a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802898e:	fb0b 7303 	mla	r3, fp, r3, r7
 8028992:	fb16 f70c 	smulbb	r7, r6, ip
 8028996:	ea4e 0202 	orr.w	r2, lr, r2
 802899a:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 802899e:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 80289a2:	f1cc 0e10 	rsb	lr, ip, #16
 80289a6:	ea48 0505 	orr.w	r5, r8, r5
 80289aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289ae:	ebae 0e06 	sub.w	lr, lr, r6
 80289b2:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 80289b6:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 80289ba:	2bff      	cmp	r3, #255	; 0xff
 80289bc:	fb06 f605 	mul.w	r6, r6, r5
 80289c0:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 80289c4:	fb0e 6202 	mla	r2, lr, r2, r6
 80289c8:	ea4f 4604 	mov.w	r6, r4, lsl #16
 80289cc:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80289d0:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 80289d4:	ea44 0406 	orr.w	r4, r4, r6
 80289d8:	fb07 2604 	mla	r6, r7, r4, r2
 80289dc:	ea4f 4200 	mov.w	r2, r0, lsl #16
 80289e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80289e4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80289e8:	ea40 0002 	orr.w	r0, r0, r2
 80289ec:	fb0c 6c00 	mla	ip, ip, r0, r6
 80289f0:	ea4f 525c 	mov.w	r2, ip, lsr #21
 80289f4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80289f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80289fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028a00:	ea42 020c 	orr.w	r2, r2, ip
 8028a04:	b292      	uxth	r2, r2
 8028a06:	ea4f 2022 	mov.w	r0, r2, asr #8
 8028a0a:	ea4f 05e2 	mov.w	r5, r2, asr #3
 8028a0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8028a12:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028a16:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028a1a:	b2d2      	uxtb	r2, r2
 8028a1c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8028a20:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8028a24:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028a28:	d129      	bne.n	8028a7e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8028a2a:	700a      	strb	r2, [r1, #0]
 8028a2c:	704d      	strb	r5, [r1, #1]
 8028a2e:	7088      	strb	r0, [r1, #2]
 8028a30:	70cb      	strb	r3, [r1, #3]
 8028a32:	b005      	add	sp, #20
 8028a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a38:	f04f 0e00 	mov.w	lr, #0
 8028a3c:	f8cd e004 	str.w	lr, [sp, #4]
 8028a40:	e6fa      	b.n	8028838 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 8028a42:	2200      	movs	r2, #0
 8028a44:	4696      	mov	lr, r2
 8028a46:	4615      	mov	r5, r2
 8028a48:	9201      	str	r2, [sp, #4]
 8028a4a:	e71b      	b.n	8028884 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028a4c:	2200      	movs	r2, #0
 8028a4e:	4615      	mov	r5, r2
 8028a50:	e718      	b.n	8028884 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028a52:	4632      	mov	r2, r6
 8028a54:	4635      	mov	r5, r6
 8028a56:	e715      	b.n	8028884 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8028a58:	2700      	movs	r7, #0
 8028a5a:	4638      	mov	r0, r7
 8028a5c:	e742      	b.n	80288e4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 8028a5e:	2300      	movs	r3, #0
 8028a60:	461f      	mov	r7, r3
 8028a62:	461c      	mov	r4, r3
 8028a64:	4618      	mov	r0, r3
 8028a66:	e76b      	b.n	8028940 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028a68:	4663      	mov	r3, ip
 8028a6a:	4667      	mov	r7, ip
 8028a6c:	4664      	mov	r4, ip
 8028a6e:	4660      	mov	r0, ip
 8028a70:	e766      	b.n	8028940 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028a72:	2300      	movs	r3, #0
 8028a74:	461c      	mov	r4, r3
 8028a76:	e763      	b.n	8028940 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028a78:	4633      	mov	r3, r6
 8028a7a:	4634      	mov	r4, r6
 8028a7c:	e760      	b.n	8028940 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8028a7e:	2b00      	cmp	r3, #0
 8028a80:	d0d7      	beq.n	8028a32 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 8028a82:	78cf      	ldrb	r7, [r1, #3]
 8028a84:	fb03 f607 	mul.w	r6, r3, r7
 8028a88:	443b      	add	r3, r7
 8028a8a:	1c74      	adds	r4, r6, #1
 8028a8c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8028a90:	780e      	ldrb	r6, [r1, #0]
 8028a92:	1224      	asrs	r4, r4, #8
 8028a94:	1b3f      	subs	r7, r7, r4
 8028a96:	1b1b      	subs	r3, r3, r4
 8028a98:	24ff      	movs	r4, #255	; 0xff
 8028a9a:	437e      	muls	r6, r7
 8028a9c:	b2db      	uxtb	r3, r3
 8028a9e:	fb14 6202 	smlabb	r2, r4, r2, r6
 8028aa2:	fb92 f6f3 	sdiv	r6, r2, r3
 8028aa6:	42a6      	cmp	r6, r4
 8028aa8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8028aac:	bfc8      	it	gt
 8028aae:	4626      	movgt	r6, r4
 8028ab0:	784c      	ldrb	r4, [r1, #1]
 8028ab2:	bfd8      	it	le
 8028ab4:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8028ab8:	fb07 f404 	mul.w	r4, r7, r4
 8028abc:	bfd8      	it	le
 8028abe:	b2f6      	uxtble	r6, r6
 8028ac0:	fb12 4505 	smlabb	r5, r2, r5, r4
 8028ac4:	700e      	strb	r6, [r1, #0]
 8028ac6:	fb95 f4f3 	sdiv	r4, r5, r3
 8028aca:	4294      	cmp	r4, r2
 8028acc:	bfd4      	ite	le
 8028ace:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8028ad2:	4614      	movgt	r4, r2
 8028ad4:	788a      	ldrb	r2, [r1, #2]
 8028ad6:	bfd8      	it	le
 8028ad8:	b2e4      	uxtble	r4, r4
 8028ada:	437a      	muls	r2, r7
 8028adc:	704c      	strb	r4, [r1, #1]
 8028ade:	24ff      	movs	r4, #255	; 0xff
 8028ae0:	fb14 2000 	smlabb	r0, r4, r0, r2
 8028ae4:	fb90 f2f3 	sdiv	r2, r0, r3
 8028ae8:	42a2      	cmp	r2, r4
 8028aea:	bfd6      	itet	le
 8028aec:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028af0:	4622      	movgt	r2, r4
 8028af2:	b2d2      	uxtble	r2, r2
 8028af4:	708a      	strb	r2, [r1, #2]
 8028af6:	e79b      	b.n	8028a30 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08028af8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028afc:	b093      	sub	sp, #76	; 0x4c
 8028afe:	9210      	str	r2, [sp, #64]	; 0x40
 8028b00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028b02:	9011      	str	r0, [sp, #68]	; 0x44
 8028b04:	910e      	str	r1, [sp, #56]	; 0x38
 8028b06:	6850      	ldr	r0, [r2, #4]
 8028b08:	9306      	str	r3, [sp, #24]
 8028b0a:	6812      	ldr	r2, [r2, #0]
 8028b0c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028b10:	fb00 1303 	mla	r3, r0, r3, r1
 8028b14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028b18:	9307      	str	r3, [sp, #28]
 8028b1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b1c:	681b      	ldr	r3, [r3, #0]
 8028b1e:	9308      	str	r3, [sp, #32]
 8028b20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b22:	685b      	ldr	r3, [r3, #4]
 8028b24:	9309      	str	r3, [sp, #36]	; 0x24
 8028b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028b28:	2b00      	cmp	r3, #0
 8028b2a:	dc03      	bgt.n	8028b34 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028b2e:	2b00      	cmp	r3, #0
 8028b30:	f340 83f9 	ble.w	8029326 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8028b34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028b3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028b3e:	1e48      	subs	r0, r1, #1
 8028b40:	1e55      	subs	r5, r2, #1
 8028b42:	9b06      	ldr	r3, [sp, #24]
 8028b44:	2b00      	cmp	r3, #0
 8028b46:	f340 81b4 	ble.w	8028eb2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8028b4a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8028b4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028b4e:	1436      	asrs	r6, r6, #16
 8028b50:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028b54:	d406      	bmi.n	8028b64 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028b56:	4286      	cmp	r6, r0
 8028b58:	da04      	bge.n	8028b64 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028b5a:	2b00      	cmp	r3, #0
 8028b5c:	db02      	blt.n	8028b64 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028b5e:	42ab      	cmp	r3, r5
 8028b60:	f2c0 81a8 	blt.w	8028eb4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8028b64:	3601      	adds	r6, #1
 8028b66:	f100 8195 	bmi.w	8028e94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028b6a:	42b1      	cmp	r1, r6
 8028b6c:	f2c0 8192 	blt.w	8028e94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028b70:	3301      	adds	r3, #1
 8028b72:	f100 818f 	bmi.w	8028e94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028b76:	429a      	cmp	r2, r3
 8028b78:	f2c0 818c 	blt.w	8028e94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028b7c:	9b06      	ldr	r3, [sp, #24]
 8028b7e:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8028b82:	9d07      	ldr	r5, [sp, #28]
 8028b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8028b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028b88:	2b00      	cmp	r3, #0
 8028b8a:	f340 81b5 	ble.w	8028ef8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8028b8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028b90:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8028b92:	1418      	asrs	r0, r3, #16
 8028b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028b96:	1436      	asrs	r6, r6, #16
 8028b98:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8028b9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028b9e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8028ba2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028ba4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028ba8:	f100 820e 	bmi.w	8028fc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8028bac:	f102 3eff 	add.w	lr, r2, #4294967295
 8028bb0:	4576      	cmp	r6, lr
 8028bb2:	f280 8209 	bge.w	8028fc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8028bb6:	2800      	cmp	r0, #0
 8028bb8:	f2c0 8206 	blt.w	8028fc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8028bbc:	f103 3eff 	add.w	lr, r3, #4294967295
 8028bc0:	4570      	cmp	r0, lr
 8028bc2:	f280 8201 	bge.w	8028fc8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8028bc6:	b212      	sxth	r2, r2
 8028bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028bca:	fa1f fe81 	uxth.w	lr, r1
 8028bce:	fb00 6002 	mla	r0, r0, r2, r6
 8028bd2:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8028bd6:	eb03 0a00 	add.w	sl, r3, r0
 8028bda:	f813 9000 	ldrb.w	r9, [r3, r0]
 8028bde:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8028be2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028be6:	b29b      	uxth	r3, r3
 8028be8:	f1bc 0f00 	cmp.w	ip, #0
 8028bec:	f000 81ca 	beq.w	8028f84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028bf0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028bf4:	eb0a 0b02 	add.w	fp, sl, r2
 8028bf8:	fa1f fa8c 	uxth.w	sl, ip
 8028bfc:	940a      	str	r4, [sp, #40]	; 0x28
 8028bfe:	fb0a fe0e 	mul.w	lr, sl, lr
 8028c02:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028c06:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028c0a:	eba6 060e 	sub.w	r6, r6, lr
 8028c0e:	940b      	str	r4, [sp, #44]	; 0x2c
 8028c10:	fa1f fa8a 	uxth.w	sl, sl
 8028c14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028c16:	b2b6      	uxth	r6, r6
 8028c18:	eba3 030a 	sub.w	r3, r3, sl
 8028c1c:	fb08 f606 	mul.w	r6, r8, r6
 8028c20:	b29b      	uxth	r3, r3
 8028c22:	fb09 6303 	mla	r3, r9, r3, r6
 8028c26:	fb0a 3304 	mla	r3, sl, r4, r3
 8028c2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028c2c:	fb0e 3304 	mla	r3, lr, r4, r3
 8028c30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c34:	2b00      	cmp	r3, #0
 8028c36:	f000 8120 	beq.w	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028c3a:	9c08      	ldr	r4, [sp, #32]
 8028c3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028c40:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8028c44:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028c48:	f000 81a1 	beq.w	8028f8e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8028c4c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028c50:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028c54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028c58:	fb0a fe0e 	mul.w	lr, sl, lr
 8028c5c:	fb09 f000 	mul.w	r0, r9, r0
 8028c60:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8028c64:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028c68:	f100 0b20 	add.w	fp, r0, #32
 8028c6c:	44ce      	add	lr, r9
 8028c6e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8028c72:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028c76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028c7a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028c7e:	ea4e 0909 	orr.w	r9, lr, r9
 8028c82:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028c86:	8870      	ldrh	r0, [r6, #2]
 8028c88:	d019      	beq.n	8028cbe <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8028c8a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028c8e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028c92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028c96:	fb0a fe0e 	mul.w	lr, sl, lr
 8028c9a:	fb08 f800 	mul.w	r8, r8, r0
 8028c9e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8028ca2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028ca6:	f108 0b20 	add.w	fp, r8, #32
 8028caa:	4486      	add	lr, r0
 8028cac:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028cb0:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8028cb4:	0a00      	lsrs	r0, r0, #8
 8028cb6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028cba:	ea4e 0000 	orr.w	r0, lr, r0
 8028cbe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028cc2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028cc6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028cca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028cce:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028cd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028cd6:	ea4e 0909 	orr.w	r9, lr, r9
 8028cda:	ea4a 0000 	orr.w	r0, sl, r0
 8028cde:	f1bc 0f00 	cmp.w	ip, #0
 8028ce2:	f000 8156 	beq.w	8028f92 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028ce6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8028cea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028cec:	3a01      	subs	r2, #1
 8028cee:	2cff      	cmp	r4, #255	; 0xff
 8028cf0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028cf4:	f102 0202 	add.w	r2, r2, #2
 8028cf8:	eb06 0e02 	add.w	lr, r6, r2
 8028cfc:	5ab2      	ldrh	r2, [r6, r2]
 8028cfe:	d018      	beq.n	8028d32 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8028d00:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8028d04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028d08:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028d0c:	fb04 fa02 	mul.w	sl, r4, r2
 8028d10:	fb08 f806 	mul.w	r8, r8, r6
 8028d14:	f10a 0620 	add.w	r6, sl, #32
 8028d18:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8028d1c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028d20:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8028d24:	4442      	add	r2, r8
 8028d26:	0a36      	lsrs	r6, r6, #8
 8028d28:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8028d2c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028d30:	4332      	orrs	r2, r6
 8028d32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028d34:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8028d38:	2cff      	cmp	r4, #255	; 0xff
 8028d3a:	d01a      	beq.n	8028d72 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8028d3c:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8028d40:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8028d44:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028d48:	fb04 fa06 	mul.w	sl, r4, r6
 8028d4c:	fb08 f80e 	mul.w	r8, r8, lr
 8028d50:	f10a 0e20 	add.w	lr, sl, #32
 8028d54:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8028d58:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028d5c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028d60:	4446      	add	r6, r8
 8028d62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028d66:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8028d6a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8028d6e:	ea46 060e 	orr.w	r6, r6, lr
 8028d72:	fb1c fe01 	smulbb	lr, ip, r1
 8028d76:	f1cc 0810 	rsb	r8, ip, #16
 8028d7a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028d7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028d82:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028d86:	eba8 0801 	sub.w	r8, r8, r1
 8028d8a:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8028d8e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028d92:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8028d96:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8028d9a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028d9e:	ea4a 0202 	orr.w	r2, sl, r2
 8028da2:	4341      	muls	r1, r0
 8028da4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028da8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028dac:	fb09 1108 	mla	r1, r9, r8, r1
 8028db0:	ea4b 0606 	orr.w	r6, fp, r6
 8028db4:	fb0c 1102 	mla	r1, ip, r2, r1
 8028db8:	fb0e 1e06 	mla	lr, lr, r6, r1
 8028dbc:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8028dc0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028dc4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028dc8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028dcc:	ea41 0e0e 	orr.w	lr, r1, lr
 8028dd0:	fa1f f18e 	uxth.w	r1, lr
 8028dd4:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028dd8:	2bff      	cmp	r3, #255	; 0xff
 8028dda:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8028dde:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8028de2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028de6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028dea:	b2d2      	uxtb	r2, r2
 8028dec:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8028df0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8028df4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8028df8:	f000 80df 	beq.w	8028fba <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8028dfc:	f895 8003 	ldrb.w	r8, [r5, #3]
 8028e00:	24ff      	movs	r4, #255	; 0xff
 8028e02:	fb03 f608 	mul.w	r6, r3, r8
 8028e06:	4443      	add	r3, r8
 8028e08:	1c71      	adds	r1, r6, #1
 8028e0a:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8028e0e:	782e      	ldrb	r6, [r5, #0]
 8028e10:	1209      	asrs	r1, r1, #8
 8028e12:	1a5b      	subs	r3, r3, r1
 8028e14:	eba8 0101 	sub.w	r1, r8, r1
 8028e18:	f895 8002 	ldrb.w	r8, [r5, #2]
 8028e1c:	434e      	muls	r6, r1
 8028e1e:	b2db      	uxtb	r3, r3
 8028e20:	fb14 6202 	smlabb	r2, r4, r2, r6
 8028e24:	24ff      	movs	r4, #255	; 0xff
 8028e26:	70eb      	strb	r3, [r5, #3]
 8028e28:	fb92 f2f3 	sdiv	r2, r2, r3
 8028e2c:	2aff      	cmp	r2, #255	; 0xff
 8028e2e:	bfd6      	itet	le
 8028e30:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028e34:	22ff      	movgt	r2, #255	; 0xff
 8028e36:	b2d2      	uxtble	r2, r2
 8028e38:	702a      	strb	r2, [r5, #0]
 8028e3a:	786a      	ldrb	r2, [r5, #1]
 8028e3c:	434a      	muls	r2, r1
 8028e3e:	fb01 f108 	mul.w	r1, r1, r8
 8028e42:	fb14 2000 	smlabb	r0, r4, r0, r2
 8028e46:	22ff      	movs	r2, #255	; 0xff
 8028e48:	fb90 f0f3 	sdiv	r0, r0, r3
 8028e4c:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8028e50:	28ff      	cmp	r0, #255	; 0xff
 8028e52:	fb9c fcf3 	sdiv	ip, ip, r3
 8028e56:	bfd6      	itet	le
 8028e58:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028e5c:	20ff      	movgt	r0, #255	; 0xff
 8028e5e:	b2c0      	uxtble	r0, r0
 8028e60:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028e64:	bfd4      	ite	le
 8028e66:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8028e6a:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8028e6e:	7068      	strb	r0, [r5, #1]
 8028e70:	bfd8      	it	le
 8028e72:	fa5f fc8c 	uxtble.w	ip, ip
 8028e76:	f885 c002 	strb.w	ip, [r5, #2]
 8028e7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028e7c:	3504      	adds	r5, #4
 8028e7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028e80:	4413      	add	r3, r2
 8028e82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028e84:	931d      	str	r3, [sp, #116]	; 0x74
 8028e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028e88:	441a      	add	r2, r3
 8028e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028e8c:	3b01      	subs	r3, #1
 8028e8e:	921e      	str	r2, [sp, #120]	; 0x78
 8028e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8028e92:	e678      	b.n	8028b86 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028e94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028e96:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8028e98:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8028e9a:	4433      	add	r3, r6
 8028e9c:	931d      	str	r3, [sp, #116]	; 0x74
 8028e9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ea0:	441c      	add	r4, r3
 8028ea2:	9b06      	ldr	r3, [sp, #24]
 8028ea4:	3b01      	subs	r3, #1
 8028ea6:	941e      	str	r4, [sp, #120]	; 0x78
 8028ea8:	9306      	str	r3, [sp, #24]
 8028eaa:	9b07      	ldr	r3, [sp, #28]
 8028eac:	3304      	adds	r3, #4
 8028eae:	9307      	str	r3, [sp, #28]
 8028eb0:	e647      	b.n	8028b42 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028eb2:	d028      	beq.n	8028f06 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8028eb4:	9b06      	ldr	r3, [sp, #24]
 8028eb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028eb8:	3b01      	subs	r3, #1
 8028eba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8028ebc:	fb00 5003 	mla	r0, r0, r3, r5
 8028ec0:	1400      	asrs	r0, r0, #16
 8028ec2:	f53f ae5b 	bmi.w	8028b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028ec6:	3901      	subs	r1, #1
 8028ec8:	4288      	cmp	r0, r1
 8028eca:	f6bf ae57 	bge.w	8028b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028ece:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028ed0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8028ed2:	fb01 0303 	mla	r3, r1, r3, r0
 8028ed6:	141b      	asrs	r3, r3, #16
 8028ed8:	f53f ae50 	bmi.w	8028b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028edc:	3a01      	subs	r2, #1
 8028ede:	4293      	cmp	r3, r2
 8028ee0:	f6bf ae4c 	bge.w	8028b7c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028ee4:	9b07      	ldr	r3, [sp, #28]
 8028ee6:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8028eea:	1d19      	adds	r1, r3, #4
 8028eec:	9b06      	ldr	r3, [sp, #24]
 8028eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8028ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028ef2:	2b00      	cmp	r3, #0
 8028ef4:	f300 8085 	bgt.w	8029002 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8028ef8:	9b06      	ldr	r3, [sp, #24]
 8028efa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028efe:	9b07      	ldr	r3, [sp, #28]
 8028f00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028f04:	9307      	str	r3, [sp, #28]
 8028f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028f08:	2b00      	cmp	r3, #0
 8028f0a:	f340 820c 	ble.w	8029326 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8028f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028f12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028f18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f1c:	eef0 6a62 	vmov.f32	s13, s5
 8028f20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f2c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8028f30:	eef0 6a43 	vmov.f32	s13, s6
 8028f34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f38:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8028f3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028f54:	ee12 2a90 	vmov	r2, s5
 8028f58:	eef0 2a47 	vmov.f32	s5, s14
 8028f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f60:	ee13 2a10 	vmov	r2, s6
 8028f64:	931f      	str	r3, [sp, #124]	; 0x7c
 8028f66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f68:	eeb0 3a67 	vmov.f32	s6, s15
 8028f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f70:	9320      	str	r3, [sp, #128]	; 0x80
 8028f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028f76:	3b01      	subs	r3, #1
 8028f78:	930e      	str	r3, [sp, #56]	; 0x38
 8028f7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f7c:	bf08      	it	eq
 8028f7e:	4613      	moveq	r3, r2
 8028f80:	9306      	str	r3, [sp, #24]
 8028f82:	e5d0      	b.n	8028b26 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028f84:	fb08 f606 	mul.w	r6, r8, r6
 8028f88:	fb09 6303 	mla	r3, r9, r3, r6
 8028f8c:	e650      	b.n	8028c30 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028f8e:	4681      	mov	r9, r0
 8028f90:	e677      	b.n	8028c82 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028f92:	f1c1 0210 	rsb	r2, r1, #16
 8028f96:	4341      	muls	r1, r0
 8028f98:	fb09 1902 	mla	r9, r9, r2, r1
 8028f9c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028fa0:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8028fa4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028fa8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028fac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028fb0:	ea41 0909 	orr.w	r9, r1, r9
 8028fb4:	fa1f f189 	uxth.w	r1, r9
 8028fb8:	e70c      	b.n	8028dd4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8028fba:	0200      	lsls	r0, r0, #8
 8028fbc:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8028fc0:	ea4c 0202 	orr.w	r2, ip, r2
 8028fc4:	602a      	str	r2, [r5, #0]
 8028fc6:	e758      	b.n	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028fc8:	f116 0e01 	adds.w	lr, r6, #1
 8028fcc:	f53f af55 	bmi.w	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028fd0:	4572      	cmp	r2, lr
 8028fd2:	f6ff af52 	blt.w	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028fd6:	f110 0e01 	adds.w	lr, r0, #1
 8028fda:	f53f af4e 	bmi.w	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028fde:	4573      	cmp	r3, lr
 8028fe0:	f6ff af4b 	blt.w	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8028fe4:	b21b      	sxth	r3, r3
 8028fe6:	b212      	sxth	r2, r2
 8028fe8:	9301      	str	r3, [sp, #4]
 8028fea:	9200      	str	r2, [sp, #0]
 8028fec:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028ff0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8028ff4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8028ff8:	4629      	mov	r1, r5
 8028ffa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028ffc:	f7ff fbdb 	bl	80287b6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8029000:	e73b      	b.n	8028e7a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8029002:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029004:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8029008:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802900a:	f3c3 3603 	ubfx	r6, r3, #12, #4
 802900e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029010:	fa1f fe82 	uxth.w	lr, r2
 8029014:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029018:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802901a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802901e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8029022:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029024:	141b      	asrs	r3, r3, #16
 8029026:	fb00 3c0c 	mla	ip, r0, ip, r3
 802902a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802902c:	eb03 0a0c 	add.w	sl, r3, ip
 8029030:	f813 900c 	ldrb.w	r9, [r3, ip]
 8029034:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8029038:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802903c:	b29b      	uxth	r3, r3
 802903e:	2e00      	cmp	r6, #0
 8029040:	f000 8152 	beq.w	80292e8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 8029044:	f81a 4000 	ldrb.w	r4, [sl, r0]
 8029048:	eb0a 0b00 	add.w	fp, sl, r0
 802904c:	fa1f fa86 	uxth.w	sl, r6
 8029050:	940c      	str	r4, [sp, #48]	; 0x30
 8029052:	fb0a fe0e 	mul.w	lr, sl, lr
 8029056:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802905a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802905e:	eba5 050e 	sub.w	r5, r5, lr
 8029062:	940d      	str	r4, [sp, #52]	; 0x34
 8029064:	fa1f fa8a 	uxth.w	sl, sl
 8029068:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802906a:	b2ad      	uxth	r5, r5
 802906c:	eba3 030a 	sub.w	r3, r3, sl
 8029070:	fb08 f505 	mul.w	r5, r8, r5
 8029074:	b29b      	uxth	r3, r3
 8029076:	fb09 5303 	mla	r3, r9, r3, r5
 802907a:	fb0a 3304 	mla	r3, sl, r4, r3
 802907e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8029080:	fb0e 3304 	mla	r3, lr, r4, r3
 8029084:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029088:	2b00      	cmp	r3, #0
 802908a:	f000 8120 	beq.w	80292ce <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 802908e:	9c08      	ldr	r4, [sp, #32]
 8029090:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029094:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8029098:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 802909c:	f000 8129 	beq.w	80292f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 80290a0:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 80290a4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80290a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80290ac:	fb0a fc0c 	mul.w	ip, sl, ip
 80290b0:	fb09 f505 	mul.w	r5, r9, r5
 80290b4:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 80290b8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80290bc:	f105 0b20 	add.w	fp, r5, #32
 80290c0:	44cc      	add	ip, r9
 80290c2:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 80290c6:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 80290ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80290ce:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80290d2:	ea4c 0909 	orr.w	r9, ip, r9
 80290d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80290da:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80290de:	d019      	beq.n	8029114 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80290e0:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 80290e4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80290e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80290ec:	fb0a fc0c 	mul.w	ip, sl, ip
 80290f0:	fb08 f805 	mul.w	r8, r8, r5
 80290f4:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 80290f8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80290fc:	f108 0b20 	add.w	fp, r8, #32
 8029100:	44ac      	add	ip, r5
 8029102:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8029106:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 802910a:	0a2d      	lsrs	r5, r5, #8
 802910c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029110:	ea4c 0505 	orr.w	r5, ip, r5
 8029114:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8029118:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802911c:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8029120:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8029124:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8029128:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802912c:	ea4c 0909 	orr.w	r9, ip, r9
 8029130:	ea4a 0505 	orr.w	r5, sl, r5
 8029134:	2e00      	cmp	r6, #0
 8029136:	f000 80de 	beq.w	80292f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 802913a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 802913e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8029140:	3801      	subs	r0, #1
 8029142:	2cff      	cmp	r4, #255	; 0xff
 8029144:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8029148:	f100 0002 	add.w	r0, r0, #2
 802914c:	eb0e 0800 	add.w	r8, lr, r0
 8029150:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8029154:	d01a      	beq.n	802918c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8029156:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802915a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802915e:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8029162:	fb04 fa00 	mul.w	sl, r4, r0
 8029166:	fb0e fe0c 	mul.w	lr, lr, ip
 802916a:	f10a 0c20 	add.w	ip, sl, #32
 802916e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8029172:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029176:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802917a:	4470      	add	r0, lr
 802917c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029180:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8029184:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029188:	ea40 000c 	orr.w	r0, r0, ip
 802918c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802918e:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8029192:	2cff      	cmp	r4, #255	; 0xff
 8029194:	d01a      	beq.n	80291cc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8029196:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 802919a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802919e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80291a2:	fb04 fa0c 	mul.w	sl, r4, ip
 80291a6:	fb08 f80e 	mul.w	r8, r8, lr
 80291aa:	f10a 0e20 	add.w	lr, sl, #32
 80291ae:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 80291b2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80291b6:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80291ba:	44c4      	add	ip, r8
 80291bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80291c0:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 80291c4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80291c8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80291cc:	fb16 fe02 	smulbb	lr, r6, r2
 80291d0:	f1c6 0810 	rsb	r8, r6, #16
 80291d4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80291d8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80291dc:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80291e0:	eba8 0802 	sub.w	r8, r8, r2
 80291e4:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 80291e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80291ec:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 80291f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80291f4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80291f8:	ea4a 0000 	orr.w	r0, sl, r0
 80291fc:	436a      	muls	r2, r5
 80291fe:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8029202:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029206:	fb09 2208 	mla	r2, r9, r8, r2
 802920a:	ea4b 0c0c 	orr.w	ip, fp, ip
 802920e:	fb06 2200 	mla	r2, r6, r0, r2
 8029212:	fb0e 220c 	mla	r2, lr, ip, r2
 8029216:	0d55      	lsrs	r5, r2, #21
 8029218:	0952      	lsrs	r2, r2, #5
 802921a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802921e:	f422 6cfc 	bic.w	ip, r2, #2016	; 0x7e0
 8029222:	ea45 000c 	orr.w	r0, r5, ip
 8029226:	b280      	uxth	r0, r0
 8029228:	2bff      	cmp	r3, #255	; 0xff
 802922a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802922e:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8029232:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8029236:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802923a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802923e:	b2d2      	uxtb	r2, r2
 8029240:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8029244:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8029248:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802924c:	d064      	beq.n	8029318 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 802924e:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8029252:	24ff      	movs	r4, #255	; 0xff
 8029254:	fb03 f508 	mul.w	r5, r3, r8
 8029258:	4443      	add	r3, r8
 802925a:	1c68      	adds	r0, r5, #1
 802925c:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8029260:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8029264:	1200      	asrs	r0, r0, #8
 8029266:	1a1b      	subs	r3, r3, r0
 8029268:	eba8 0000 	sub.w	r0, r8, r0
 802926c:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8029270:	4345      	muls	r5, r0
 8029272:	b2db      	uxtb	r3, r3
 8029274:	fb14 5202 	smlabb	r2, r4, r2, r5
 8029278:	24ff      	movs	r4, #255	; 0xff
 802927a:	f801 3c01 	strb.w	r3, [r1, #-1]
 802927e:	fb92 f2f3 	sdiv	r2, r2, r3
 8029282:	2aff      	cmp	r2, #255	; 0xff
 8029284:	bfd6      	itet	le
 8029286:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802928a:	22ff      	movgt	r2, #255	; 0xff
 802928c:	b2d2      	uxtble	r2, r2
 802928e:	f801 2c04 	strb.w	r2, [r1, #-4]
 8029292:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8029296:	4342      	muls	r2, r0
 8029298:	fb00 f008 	mul.w	r0, r0, r8
 802929c:	fb14 2206 	smlabb	r2, r4, r6, r2
 80292a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80292a4:	2aff      	cmp	r2, #255	; 0xff
 80292a6:	bfd6      	itet	le
 80292a8:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80292ac:	22ff      	movgt	r2, #255	; 0xff
 80292ae:	b2d2      	uxtble	r2, r2
 80292b0:	f801 2c03 	strb.w	r2, [r1, #-3]
 80292b4:	22ff      	movs	r2, #255	; 0xff
 80292b6:	fb12 000c 	smlabb	r0, r2, ip, r0
 80292ba:	fb90 f0f3 	sdiv	r0, r0, r3
 80292be:	28ff      	cmp	r0, #255	; 0xff
 80292c0:	bfd6      	itet	le
 80292c2:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80292c6:	20ff      	movgt	r0, #255	; 0xff
 80292c8:	b2c0      	uxtble	r0, r0
 80292ca:	f801 0c02 	strb.w	r0, [r1, #-2]
 80292ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80292d0:	3104      	adds	r1, #4
 80292d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80292d4:	4413      	add	r3, r2
 80292d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80292d8:	931d      	str	r3, [sp, #116]	; 0x74
 80292da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80292dc:	441a      	add	r2, r3
 80292de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80292e0:	3b01      	subs	r3, #1
 80292e2:	921e      	str	r2, [sp, #120]	; 0x78
 80292e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80292e6:	e603      	b.n	8028ef0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80292e8:	fb08 f505 	mul.w	r5, r8, r5
 80292ec:	fb09 5303 	mla	r3, r9, r3, r5
 80292f0:	e6c8      	b.n	8029084 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80292f2:	46a9      	mov	r9, r5
 80292f4:	e6ef      	b.n	80290d6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 80292f6:	f1c2 0010 	rsb	r0, r2, #16
 80292fa:	436a      	muls	r2, r5
 80292fc:	fb09 2900 	mla	r9, r9, r0, r2
 8029300:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029304:	ea4f 5659 	mov.w	r6, r9, lsr #21
 8029308:	ea4f 1059 	mov.w	r0, r9, lsr #5
 802930c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8029310:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029314:	4330      	orrs	r0, r6
 8029316:	e786      	b.n	8029226 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8029318:	0236      	lsls	r6, r6, #8
 802931a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 802931e:	4332      	orrs	r2, r6
 8029320:	f841 2c04 	str.w	r2, [r1, #-4]
 8029324:	e7d3      	b.n	80292ce <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8029326:	b013      	add	sp, #76	; 0x4c
 8029328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802932c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 802932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029330:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	; 0x28
 8029334:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029338:	fb08 6703 	mla	r7, r8, r3, r6
 802933c:	f1b8 0f00 	cmp.w	r8, #0
 8029340:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8029344:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8029348:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 802934c:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8029350:	6808      	ldr	r0, [r1, #0]
 8029352:	f2c0 80d5 	blt.w	8029500 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8029356:	45c1      	cmp	r9, r8
 8029358:	f340 80d2 	ble.w	8029500 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 802935c:	2e00      	cmp	r6, #0
 802935e:	f2c0 80cd 	blt.w	80294fc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8029362:	42b3      	cmp	r3, r6
 8029364:	f340 80ca 	ble.w	80294fc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8029368:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802936c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8029370:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029374:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8029378:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802937c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029380:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8029384:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8029388:	fa5f fc8c 	uxtb.w	ip, ip
 802938c:	023f      	lsls	r7, r7, #8
 802938e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8029392:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8029396:	ea47 070c 	orr.w	r7, r7, ip
 802939a:	1c72      	adds	r2, r6, #1
 802939c:	f100 80b3 	bmi.w	8029506 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80293a0:	4293      	cmp	r3, r2
 80293a2:	f340 80b0 	ble.w	8029506 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80293a6:	2c00      	cmp	r4, #0
 80293a8:	f000 80ad 	beq.w	8029506 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 80293ac:	f8ba b002 	ldrh.w	fp, [sl, #2]
 80293b0:	ea4f 02eb 	mov.w	r2, fp, asr #3
 80293b4:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 80293b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80293bc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80293c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80293c4:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80293c8:	fa5f fb8b 	uxtb.w	fp, fp
 80293cc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80293d0:	0212      	lsls	r2, r2, #8
 80293d2:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 80293d6:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80293da:	ea4c 0c0b 	orr.w	ip, ip, fp
 80293de:	f118 0801 	adds.w	r8, r8, #1
 80293e2:	f100 8094 	bmi.w	802950e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80293e6:	45c1      	cmp	r9, r8
 80293e8:	f340 8091 	ble.w	802950e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80293ec:	f1be 0f00 	cmp.w	lr, #0
 80293f0:	f000 808d 	beq.w	802950e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80293f4:	2e00      	cmp	r6, #0
 80293f6:	f2c0 8088 	blt.w	802950a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 80293fa:	42b3      	cmp	r3, r6
 80293fc:	f340 8085 	ble.w	802950a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8029400:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8029404:	ea4f 2228 	mov.w	r2, r8, asr #8
 8029408:	ea4f 09e8 	mov.w	r9, r8, asr #3
 802940c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029410:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8029414:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8029418:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 802941c:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 8029420:	fa5f f888 	uxtb.w	r8, r8
 8029424:	0212      	lsls	r2, r2, #8
 8029426:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802942a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 802942e:	ea42 0208 	orr.w	r2, r2, r8
 8029432:	3601      	adds	r6, #1
 8029434:	d417      	bmi.n	8029466 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029436:	42b3      	cmp	r3, r6
 8029438:	dd15      	ble.n	8029466 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802943a:	b1a4      	cbz	r4, 8029466 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802943c:	3301      	adds	r3, #1
 802943e:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 8029442:	10f3      	asrs	r3, r6, #3
 8029444:	1230      	asrs	r0, r6, #8
 8029446:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802944a:	00f6      	lsls	r6, r6, #3
 802944c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029450:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029454:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 8029458:	b2f6      	uxtb	r6, r6
 802945a:	0218      	lsls	r0, r3, #8
 802945c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8029460:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8029464:	4330      	orrs	r0, r6
 8029466:	b2a4      	uxth	r4, r4
 8029468:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802946c:	fa1f fe8e 	uxth.w	lr, lr
 8029470:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8029474:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029478:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802947c:	fb04 f80e 	mul.w	r8, r4, lr
 8029480:	0124      	lsls	r4, r4, #4
 8029482:	2dff      	cmp	r5, #255	; 0xff
 8029484:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 8029488:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802948c:	eba4 0408 	sub.w	r4, r4, r8
 8029490:	fa1f fe8e 	uxth.w	lr, lr
 8029494:	b2a4      	uxth	r4, r4
 8029496:	eba9 090e 	sub.w	r9, r9, lr
 802949a:	fb04 f303 	mul.w	r3, r4, r3
 802949e:	fa1f f989 	uxth.w	r9, r9
 80294a2:	fb04 f40c 	mul.w	r4, r4, ip
 80294a6:	fb09 3606 	mla	r6, r9, r6, r3
 80294aa:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80294ae:	fb09 4407 	mla	r4, r9, r7, r4
 80294b2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80294b6:	fb08 6603 	mla	r6, r8, r3, r6
 80294ba:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80294be:	fb08 4000 	mla	r0, r8, r0, r4
 80294c2:	fb0e 6303 	mla	r3, lr, r3, r6
 80294c6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80294ca:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80294ce:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80294d2:	fb0e 0303 	mla	r3, lr, r3, r0
 80294d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80294da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80294de:	ea43 0306 	orr.w	r3, r3, r6
 80294e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80294e6:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80294ea:	b2d4      	uxtb	r4, r2
 80294ec:	b2c6      	uxtb	r6, r0
 80294ee:	d110      	bne.n	8029512 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 80294f0:	700b      	strb	r3, [r1, #0]
 80294f2:	7048      	strb	r0, [r1, #1]
 80294f4:	708a      	strb	r2, [r1, #2]
 80294f6:	70cd      	strb	r5, [r1, #3]
 80294f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294fc:	4607      	mov	r7, r0
 80294fe:	e74c      	b.n	802939a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 8029500:	4684      	mov	ip, r0
 8029502:	4607      	mov	r7, r0
 8029504:	e76b      	b.n	80293de <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8029506:	4684      	mov	ip, r0
 8029508:	e769      	b.n	80293de <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 802950a:	4602      	mov	r2, r0
 802950c:	e791      	b.n	8029432 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 802950e:	4602      	mov	r2, r0
 8029510:	e7a9      	b.n	8029466 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8029512:	2d00      	cmp	r5, #0
 8029514:	d0f0      	beq.n	80294f8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8029516:	78cf      	ldrb	r7, [r1, #3]
 8029518:	b2db      	uxtb	r3, r3
 802951a:	fb15 f606 	smulbb	r6, r5, r6
 802951e:	fb05 f207 	mul.w	r2, r5, r7
 8029522:	1c50      	adds	r0, r2, #1
 8029524:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029528:	19ea      	adds	r2, r5, r7
 802952a:	1200      	asrs	r0, r0, #8
 802952c:	1a12      	subs	r2, r2, r0
 802952e:	1a38      	subs	r0, r7, r0
 8029530:	780f      	ldrb	r7, [r1, #0]
 8029532:	b2d2      	uxtb	r2, r2
 8029534:	4347      	muls	r7, r0
 8029536:	70ca      	strb	r2, [r1, #3]
 8029538:	fb05 7303 	mla	r3, r5, r3, r7
 802953c:	fb15 f504 	smulbb	r5, r5, r4
 8029540:	fb93 f3f2 	sdiv	r3, r3, r2
 8029544:	700b      	strb	r3, [r1, #0]
 8029546:	784b      	ldrb	r3, [r1, #1]
 8029548:	fb00 6303 	mla	r3, r0, r3, r6
 802954c:	fb93 f3f2 	sdiv	r3, r3, r2
 8029550:	704b      	strb	r3, [r1, #1]
 8029552:	788b      	ldrb	r3, [r1, #2]
 8029554:	fb00 5503 	mla	r5, r0, r3, r5
 8029558:	fb95 f5f2 	sdiv	r5, r5, r2
 802955c:	708d      	strb	r5, [r1, #2]
 802955e:	e7cb      	b.n	80294f8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

08029560 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029564:	b08f      	sub	sp, #60	; 0x3c
 8029566:	461f      	mov	r7, r3
 8029568:	920c      	str	r2, [sp, #48]	; 0x30
 802956a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802956c:	900d      	str	r0, [sp, #52]	; 0x34
 802956e:	9107      	str	r1, [sp, #28]
 8029570:	6850      	ldr	r0, [r2, #4]
 8029572:	6812      	ldr	r2, [r2, #0]
 8029574:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 8029578:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802957c:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	; 0x64
 8029580:	fb00 1303 	mla	r3, r0, r3, r1
 8029584:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8029588:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802958a:	681b      	ldr	r3, [r3, #0]
 802958c:	9306      	str	r3, [sp, #24]
 802958e:	9b07      	ldr	r3, [sp, #28]
 8029590:	2b00      	cmp	r3, #0
 8029592:	dc03      	bgt.n	802959c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8029594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029596:	2b00      	cmp	r3, #0
 8029598:	f340 8230 	ble.w	80299fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802959c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802959e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80295a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80295a6:	1e48      	subs	r0, r1, #1
 80295a8:	1e56      	subs	r6, r2, #1
 80295aa:	2f00      	cmp	r7, #0
 80295ac:	f340 80bd 	ble.w	802972a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80295b0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80295b4:	ea4f 4328 	mov.w	r3, r8, asr #16
 80295b8:	d406      	bmi.n	80295c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295ba:	4584      	cmp	ip, r0
 80295bc:	da04      	bge.n	80295c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295be:	2b00      	cmp	r3, #0
 80295c0:	db02      	blt.n	80295c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80295c2:	42b3      	cmp	r3, r6
 80295c4:	f2c0 80b2 	blt.w	802972c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80295c8:	f11c 0c01 	adds.w	ip, ip, #1
 80295cc:	f100 80a5 	bmi.w	802971a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80295d0:	4561      	cmp	r1, ip
 80295d2:	f2c0 80a2 	blt.w	802971a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80295d6:	3301      	adds	r3, #1
 80295d8:	f100 809f 	bmi.w	802971a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80295dc:	429a      	cmp	r2, r3
 80295de:	f2c0 809c 	blt.w	802971a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80295e2:	46ba      	mov	sl, r7
 80295e4:	464e      	mov	r6, r9
 80295e6:	f1ba 0f00 	cmp.w	sl, #0
 80295ea:	f340 80bb 	ble.w	8029764 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80295ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80295f0:	1429      	asrs	r1, r5, #16
 80295f2:	ea4f 4028 	mov.w	r0, r8, asr #16
 80295f6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80295fa:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 80295fe:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029602:	f100 8122 	bmi.w	802984a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029606:	f10e 3bff 	add.w	fp, lr, #4294967295
 802960a:	4559      	cmp	r1, fp
 802960c:	f280 811d 	bge.w	802984a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029610:	2800      	cmp	r0, #0
 8029612:	f2c0 811a 	blt.w	802984a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029616:	f103 3bff 	add.w	fp, r3, #4294967295
 802961a:	4558      	cmp	r0, fp
 802961c:	f280 8115 	bge.w	802984a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8029620:	fa0f fe8e 	sxth.w	lr, lr
 8029624:	9b06      	ldr	r3, [sp, #24]
 8029626:	fb00 110e 	mla	r1, r0, lr, r1
 802962a:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 802962e:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 8029632:	8841      	ldrh	r1, [r0, #2]
 8029634:	f1bc 0f00 	cmp.w	ip, #0
 8029638:	d00b      	beq.n	8029652 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 802963a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802963e:	3b01      	subs	r3, #1
 8029640:	005b      	lsls	r3, r3, #1
 8029642:	3302      	adds	r3, #2
 8029644:	eb00 0e03 	add.w	lr, r0, r3
 8029648:	5ac3      	ldrh	r3, [r0, r3]
 802964a:	9308      	str	r3, [sp, #32]
 802964c:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029650:	9309      	str	r3, [sp, #36]	; 0x24
 8029652:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029656:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802965a:	fb12 f30c 	smulbb	r3, r2, ip
 802965e:	f1cc 0e10 	rsb	lr, ip, #16
 8029662:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029666:	2cff      	cmp	r4, #255	; 0xff
 8029668:	ea4f 03e3 	mov.w	r3, r3, asr #3
 802966c:	ebae 0e02 	sub.w	lr, lr, r2
 8029670:	ea40 000b 	orr.w	r0, r0, fp
 8029674:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029678:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802967c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029680:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029684:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029688:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 802968c:	ea4b 0101 	orr.w	r1, fp, r1
 8029690:	fb02 f101 	mul.w	r1, r2, r1
 8029694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029696:	fb0e 1e00 	mla	lr, lr, r0, r1
 802969a:	ea4f 4002 	mov.w	r0, r2, lsl #16
 802969e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80296a2:	9908      	ldr	r1, [sp, #32]
 80296a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80296a8:	ea40 0002 	orr.w	r0, r0, r2
 80296ac:	9a08      	ldr	r2, [sp, #32]
 80296ae:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80296b2:	fb03 e000 	mla	r0, r3, r0, lr
 80296b6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80296ba:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80296be:	ea42 020e 	orr.w	r2, r2, lr
 80296c2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80296c6:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80296ca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80296ce:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80296d2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80296d6:	ea43 0c0c 	orr.w	ip, r3, ip
 80296da:	fa1f f38c 	uxth.w	r3, ip
 80296de:	ea4f 2223 	mov.w	r2, r3, asr #8
 80296e2:	ea4f 01e3 	mov.w	r1, r3, asr #3
 80296e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80296ea:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80296ee:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80296f2:	b2db      	uxtb	r3, r3
 80296f4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80296f8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80296fc:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8029700:	d174      	bne.n	80297ec <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8029702:	7033      	strb	r3, [r6, #0]
 8029704:	7071      	strb	r1, [r6, #1]
 8029706:	70b2      	strb	r2, [r6, #2]
 8029708:	70f4      	strb	r4, [r6, #3]
 802970a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802970c:	3604      	adds	r6, #4
 802970e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029712:	441d      	add	r5, r3
 8029714:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029716:	4498      	add	r8, r3
 8029718:	e765      	b.n	80295e6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802971a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802971c:	3f01      	subs	r7, #1
 802971e:	f109 0904 	add.w	r9, r9, #4
 8029722:	441d      	add	r5, r3
 8029724:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029726:	4498      	add	r8, r3
 8029728:	e73f      	b.n	80295aa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802972a:	d01f      	beq.n	802976c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802972c:	1e7b      	subs	r3, r7, #1
 802972e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029730:	fb00 5003 	mla	r0, r0, r3, r5
 8029734:	1400      	asrs	r0, r0, #16
 8029736:	f53f af54 	bmi.w	80295e2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802973a:	3901      	subs	r1, #1
 802973c:	4288      	cmp	r0, r1
 802973e:	f6bf af50 	bge.w	80295e2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029742:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029744:	fb01 8303 	mla	r3, r1, r3, r8
 8029748:	141b      	asrs	r3, r3, #16
 802974a:	f53f af4a 	bmi.w	80295e2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802974e:	3a01      	subs	r2, #1
 8029750:	4293      	cmp	r3, r2
 8029752:	f6bf af46 	bge.w	80295e2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8029756:	f109 0304 	add.w	r3, r9, #4
 802975a:	46ba      	mov	sl, r7
 802975c:	f1ba 0f00 	cmp.w	sl, #0
 8029760:	f300 8090 	bgt.w	8029884 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8029764:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8029768:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 802976c:	9b07      	ldr	r3, [sp, #28]
 802976e:	2b00      	cmp	r3, #0
 8029770:	f340 8144 	ble.w	80299fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8029774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029778:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802977a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802977e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029782:	eef0 6a62 	vmov.f32	s13, s5
 8029786:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802978a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802978e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029792:	ee16 5a90 	vmov	r5, s13
 8029796:	eef0 6a43 	vmov.f32	s13, s6
 802979a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802979e:	ee16 8a90 	vmov	r8, s13
 80297a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80297a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80297aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80297ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80297b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80297b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80297ba:	ee12 2a90 	vmov	r2, s5
 80297be:	eef0 2a47 	vmov.f32	s5, s14
 80297c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80297c6:	ee13 2a10 	vmov	r2, s6
 80297ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80297cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80297ce:	eeb0 3a67 	vmov.f32	s6, s15
 80297d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80297d6:	931c      	str	r3, [sp, #112]	; 0x70
 80297d8:	9b07      	ldr	r3, [sp, #28]
 80297da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80297dc:	3b01      	subs	r3, #1
 80297de:	9307      	str	r3, [sp, #28]
 80297e0:	bf08      	it	eq
 80297e2:	4617      	moveq	r7, r2
 80297e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80297e6:	bf18      	it	ne
 80297e8:	461f      	movne	r7, r3
 80297ea:	e6d0      	b.n	802958e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80297ec:	2c00      	cmp	r4, #0
 80297ee:	d08c      	beq.n	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80297f0:	f896 e003 	ldrb.w	lr, [r6, #3]
 80297f4:	fb13 f304 	smulbb	r3, r3, r4
 80297f8:	fb14 f101 	smulbb	r1, r4, r1
 80297fc:	fb14 f202 	smulbb	r2, r4, r2
 8029800:	fb04 fc0e 	mul.w	ip, r4, lr
 8029804:	f10c 0001 	add.w	r0, ip, #1
 8029808:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802980c:	eb04 0c0e 	add.w	ip, r4, lr
 8029810:	1200      	asrs	r0, r0, #8
 8029812:	ebac 0c00 	sub.w	ip, ip, r0
 8029816:	ebae 0000 	sub.w	r0, lr, r0
 802981a:	f896 e000 	ldrb.w	lr, [r6]
 802981e:	fa5f fc8c 	uxtb.w	ip, ip
 8029822:	fb00 330e 	mla	r3, r0, lr, r3
 8029826:	f886 c003 	strb.w	ip, [r6, #3]
 802982a:	fb93 f3fc 	sdiv	r3, r3, ip
 802982e:	7033      	strb	r3, [r6, #0]
 8029830:	7873      	ldrb	r3, [r6, #1]
 8029832:	fb00 1103 	mla	r1, r0, r3, r1
 8029836:	78b3      	ldrb	r3, [r6, #2]
 8029838:	fb00 2003 	mla	r0, r0, r3, r2
 802983c:	fb91 f1fc 	sdiv	r1, r1, ip
 8029840:	fb90 f0fc 	sdiv	r0, r0, ip
 8029844:	7071      	strb	r1, [r6, #1]
 8029846:	70b0      	strb	r0, [r6, #2]
 8029848:	e75f      	b.n	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802984a:	f111 0b01 	adds.w	fp, r1, #1
 802984e:	f53f af5c 	bmi.w	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029852:	45de      	cmp	lr, fp
 8029854:	f6ff af59 	blt.w	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029858:	f110 0b01 	adds.w	fp, r0, #1
 802985c:	f53f af55 	bmi.w	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029860:	455b      	cmp	r3, fp
 8029862:	f6ff af52 	blt.w	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029866:	b21b      	sxth	r3, r3
 8029868:	9101      	str	r1, [sp, #4]
 802986a:	4631      	mov	r1, r6
 802986c:	9300      	str	r3, [sp, #0]
 802986e:	fa0f f38e 	sxth.w	r3, lr
 8029872:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8029876:	e9cd c404 	strd	ip, r4, [sp, #16]
 802987a:	9a06      	ldr	r2, [sp, #24]
 802987c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802987e:	f7ff fd55 	bl	802932c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 8029882:	e742      	b.n	802970a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8029884:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8029886:	142e      	asrs	r6, r5, #16
 8029888:	ea4f 4028 	mov.w	r0, r8, asr #16
 802988c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8029890:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 8029894:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8029898:	9a06      	ldr	r2, [sp, #24]
 802989a:	fb0b 6000 	mla	r0, fp, r0, r6
 802989e:	9e06      	ldr	r6, [sp, #24]
 80298a0:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80298a4:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 80298a8:	8870      	ldrh	r0, [r6, #2]
 80298aa:	f1be 0f00 	cmp.w	lr, #0
 80298ae:	d00b      	beq.n	80298c8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 80298b0:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 80298b4:	3a01      	subs	r2, #1
 80298b6:	0052      	lsls	r2, r2, #1
 80298b8:	3202      	adds	r2, #2
 80298ba:	eb06 0b02 	add.w	fp, r6, r2
 80298be:	5ab2      	ldrh	r2, [r6, r2]
 80298c0:	920a      	str	r2, [sp, #40]	; 0x28
 80298c2:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80298c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80298c8:	ea4f 460c 	mov.w	r6, ip, lsl #16
 80298cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80298d0:	fb11 f20e 	smulbb	r2, r1, lr
 80298d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80298d8:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 80298dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80298e0:	10d2      	asrs	r2, r2, #3
 80298e2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80298e6:	ea46 060c 	orr.w	r6, r6, ip
 80298ea:	f1ce 0c10 	rsb	ip, lr, #16
 80298ee:	ea4b 0000 	orr.w	r0, fp, r0
 80298f2:	2cff      	cmp	r4, #255	; 0xff
 80298f4:	ebac 0c01 	sub.w	ip, ip, r1
 80298f8:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 80298fc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8029900:	fb01 f000 	mul.w	r0, r1, r0
 8029904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029906:	fb0c 0c06 	mla	ip, ip, r6, r0
 802990a:	980a      	ldr	r0, [sp, #40]	; 0x28
 802990c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029910:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 8029914:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029916:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802991a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 802991e:	ea4b 0606 	orr.w	r6, fp, r6
 8029922:	f420 6bfc 	bic.w	fp, r0, #2016	; 0x7e0
 8029926:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802992a:	fb02 c606 	mla	r6, r2, r6, ip
 802992e:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8029932:	ea41 0b0b 	orr.w	fp, r1, fp
 8029936:	fb02 660b 	mla	r6, r2, fp, r6
 802993a:	ea4f 5256 	mov.w	r2, r6, lsr #21
 802993e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8029942:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029946:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802994a:	ea46 0602 	orr.w	r6, r6, r2
 802994e:	b2b2      	uxth	r2, r6
 8029950:	ea4f 2122 	mov.w	r1, r2, asr #8
 8029954:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8029958:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 802995c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029960:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029964:	b2d2      	uxtb	r2, r2
 8029966:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802996a:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802996e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029972:	d10f      	bne.n	8029994 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8029974:	f803 2c04 	strb.w	r2, [r3, #-4]
 8029978:	f803 0c03 	strb.w	r0, [r3, #-3]
 802997c:	f803 1c02 	strb.w	r1, [r3, #-2]
 8029980:	f803 4c01 	strb.w	r4, [r3, #-1]
 8029984:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8029986:	3304      	adds	r3, #4
 8029988:	f10a 3aff 	add.w	sl, sl, #4294967295
 802998c:	4415      	add	r5, r2
 802998e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8029990:	4490      	add	r8, r2
 8029992:	e6e3      	b.n	802975c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8029994:	2c00      	cmp	r4, #0
 8029996:	d0f5      	beq.n	8029984 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8029998:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 802999c:	fb12 f204 	smulbb	r2, r2, r4
 80299a0:	fb14 f000 	smulbb	r0, r4, r0
 80299a4:	fb14 f101 	smulbb	r1, r4, r1
 80299a8:	fb04 f60e 	mul.w	r6, r4, lr
 80299ac:	f106 0c01 	add.w	ip, r6, #1
 80299b0:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80299b4:	eb04 060e 	add.w	r6, r4, lr
 80299b8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80299bc:	eba6 060c 	sub.w	r6, r6, ip
 80299c0:	ebae 0c0c 	sub.w	ip, lr, ip
 80299c4:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 80299c8:	b2f6      	uxtb	r6, r6
 80299ca:	fb0c 220e 	mla	r2, ip, lr, r2
 80299ce:	f803 6c01 	strb.w	r6, [r3, #-1]
 80299d2:	fb92 f2f6 	sdiv	r2, r2, r6
 80299d6:	f803 2c04 	strb.w	r2, [r3, #-4]
 80299da:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80299de:	fb0c 0002 	mla	r0, ip, r2, r0
 80299e2:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80299e6:	fb0c 1c02 	mla	ip, ip, r2, r1
 80299ea:	fb90 f0f6 	sdiv	r0, r0, r6
 80299ee:	fb9c fcf6 	sdiv	ip, ip, r6
 80299f2:	f803 0c03 	strb.w	r0, [r3, #-3]
 80299f6:	f803 cc02 	strb.w	ip, [r3, #-2]
 80299fa:	e7c3      	b.n	8029984 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80299fc:	b00f      	add	sp, #60	; 0x3c
 80299fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029a02 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8029a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a06:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8029a0a:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8029a0e:	fb08 7403 	mla	r4, r8, r3, r7
 8029a12:	f1b8 0f00 	cmp.w	r8, #0
 8029a16:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8029a1a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8029a1e:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8029a22:	6808      	ldr	r0, [r1, #0]
 8029a24:	f2c0 80be 	blt.w	8029ba4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8029a28:	45c2      	cmp	sl, r8
 8029a2a:	f340 80bb 	ble.w	8029ba4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8029a2e:	2f00      	cmp	r7, #0
 8029a30:	f2c0 80b6 	blt.w	8029ba0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8029a34:	42bb      	cmp	r3, r7
 8029a36:	f340 80b3 	ble.w	8029ba0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8029a3a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8029a3e:	10d5      	asrs	r5, r2, #3
 8029a40:	1214      	asrs	r4, r2, #8
 8029a42:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8029a46:	00d2      	lsls	r2, r2, #3
 8029a48:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029a4c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8029a50:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 8029a54:	b2d2      	uxtb	r2, r2
 8029a56:	022c      	lsls	r4, r5, #8
 8029a58:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029a5c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8029a60:	4314      	orrs	r4, r2
 8029a62:	1c7a      	adds	r2, r7, #1
 8029a64:	f100 80a1 	bmi.w	8029baa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029a68:	4293      	cmp	r3, r2
 8029a6a:	f340 809e 	ble.w	8029baa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029a6e:	2e00      	cmp	r6, #0
 8029a70:	f000 809b 	beq.w	8029baa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8029a74:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8029a78:	ea4f 252e 	mov.w	r5, lr, asr #8
 8029a7c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8029a80:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029a84:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029a88:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029a8c:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 8029a90:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 8029a94:	fa5f fe8e 	uxtb.w	lr, lr
 8029a98:	022d      	lsls	r5, r5, #8
 8029a9a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8029a9e:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8029aa2:	ea45 050e 	orr.w	r5, r5, lr
 8029aa6:	f118 0801 	adds.w	r8, r8, #1
 8029aaa:	f100 8082 	bmi.w	8029bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8029aae:	45c2      	cmp	sl, r8
 8029ab0:	dd7f      	ble.n	8029bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8029ab2:	f1bc 0f00 	cmp.w	ip, #0
 8029ab6:	d07c      	beq.n	8029bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8029ab8:	2f00      	cmp	r7, #0
 8029aba:	db78      	blt.n	8029bae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8029abc:	42bb      	cmp	r3, r7
 8029abe:	dd76      	ble.n	8029bae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8029ac0:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8029ac4:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8029ac8:	ea4f 222e 	mov.w	r2, lr, asr #8
 8029acc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8029ad0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029ad4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029ad8:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 8029adc:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8029ae0:	fa5f fe8e 	uxtb.w	lr, lr
 8029ae4:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8029ae8:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8029aec:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8029af0:	ea42 020e 	orr.w	r2, r2, lr
 8029af4:	3701      	adds	r7, #1
 8029af6:	d417      	bmi.n	8029b28 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029af8:	42bb      	cmp	r3, r7
 8029afa:	dd15      	ble.n	8029b28 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029afc:	b1a6      	cbz	r6, 8029b28 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8029afe:	3301      	adds	r3, #1
 8029b00:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8029b04:	10df      	asrs	r7, r3, #3
 8029b06:	1218      	asrs	r0, r3, #8
 8029b08:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8029b0c:	00db      	lsls	r3, r3, #3
 8029b0e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029b12:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8029b16:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8029b1a:	b2db      	uxtb	r3, r3
 8029b1c:	0238      	lsls	r0, r7, #8
 8029b1e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8029b22:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8029b26:	4318      	orrs	r0, r3
 8029b28:	b2b6      	uxth	r6, r6
 8029b2a:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 8029b2e:	fa1f f78c 	uxth.w	r7, ip
 8029b32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029b36:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8029b3a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029b3e:	fb06 fc07 	mul.w	ip, r6, r7
 8029b42:	0136      	lsls	r6, r6, #4
 8029b44:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029b48:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8029b4c:	eba6 060c 	sub.w	r6, r6, ip
 8029b50:	b2bf      	uxth	r7, r7
 8029b52:	b2b6      	uxth	r6, r6
 8029b54:	ebae 0e07 	sub.w	lr, lr, r7
 8029b58:	4373      	muls	r3, r6
 8029b5a:	fa1f fe8e 	uxth.w	lr, lr
 8029b5e:	4375      	muls	r5, r6
 8029b60:	fb0e 3808 	mla	r8, lr, r8, r3
 8029b64:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8029b68:	fb0e 5404 	mla	r4, lr, r4, r5
 8029b6c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029b70:	fb0c 8803 	mla	r8, ip, r3, r8
 8029b74:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8029b78:	fb0c 4000 	mla	r0, ip, r0, r4
 8029b7c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029b80:	fb07 8303 	mla	r3, r7, r3, r8
 8029b84:	fb07 0002 	mla	r0, r7, r2, r0
 8029b88:	0a1b      	lsrs	r3, r3, #8
 8029b8a:	0a00      	lsrs	r0, r0, #8
 8029b8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029b90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029b94:	4318      	orrs	r0, r3
 8029b96:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8029b9a:	6008      	str	r0, [r1, #0]
 8029b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ba0:	4604      	mov	r4, r0
 8029ba2:	e75e      	b.n	8029a62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8029ba4:	4605      	mov	r5, r0
 8029ba6:	4604      	mov	r4, r0
 8029ba8:	e77d      	b.n	8029aa6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8029baa:	4605      	mov	r5, r0
 8029bac:	e77b      	b.n	8029aa6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8029bae:	4602      	mov	r2, r0
 8029bb0:	e7a0      	b.n	8029af4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8029bb2:	4602      	mov	r2, r0
 8029bb4:	e7b8      	b.n	8029b28 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08029bb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029bba:	b08f      	sub	sp, #60	; 0x3c
 8029bbc:	461d      	mov	r5, r3
 8029bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029bc0:	9107      	str	r1, [sp, #28]
 8029bc2:	920c      	str	r2, [sp, #48]	; 0x30
 8029bc4:	6859      	ldr	r1, [r3, #4]
 8029bc6:	681b      	ldr	r3, [r3, #0]
 8029bc8:	900d      	str	r0, [sp, #52]	; 0x34
 8029bca:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8029bce:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8029bd2:	fb01 2707 	mla	r7, r1, r7, r2
 8029bd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8029bda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029bdc:	f8d3 8000 	ldr.w	r8, [r3]
 8029be0:	9b07      	ldr	r3, [sp, #28]
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	dc03      	bgt.n	8029bee <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029be8:	2b00      	cmp	r3, #0
 8029bea:	f340 81aa 	ble.w	8029f42 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029bf0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029bf4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029bf8:	1e48      	subs	r0, r1, #1
 8029bfa:	f102 3cff 	add.w	ip, r2, #4294967295
 8029bfe:	2d00      	cmp	r5, #0
 8029c00:	f340 80b0 	ble.w	8029d64 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8029c04:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029c08:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029c0c:	d406      	bmi.n	8029c1c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029c0e:	4586      	cmp	lr, r0
 8029c10:	da04      	bge.n	8029c1c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029c12:	2b00      	cmp	r3, #0
 8029c14:	db02      	blt.n	8029c1c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029c16:	4563      	cmp	r3, ip
 8029c18:	f2c0 80a5 	blt.w	8029d66 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8029c1c:	f11e 0e01 	adds.w	lr, lr, #1
 8029c20:	f100 8099 	bmi.w	8029d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029c24:	4571      	cmp	r1, lr
 8029c26:	f2c0 8096 	blt.w	8029d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029c2a:	3301      	adds	r3, #1
 8029c2c:	f100 8093 	bmi.w	8029d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029c30:	429a      	cmp	r2, r3
 8029c32:	f2c0 8090 	blt.w	8029d56 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8029c36:	46aa      	mov	sl, r5
 8029c38:	46b9      	mov	r9, r7
 8029c3a:	f1ba 0f00 	cmp.w	sl, #0
 8029c3e:	f340 80ac 	ble.w	8029d9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029c42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029c44:	1421      	asrs	r1, r4, #16
 8029c46:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029c4a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029c4e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029c52:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029c56:	f100 80e4 	bmi.w	8029e22 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029c5a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029c5e:	4559      	cmp	r1, fp
 8029c60:	f280 80df 	bge.w	8029e22 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029c64:	2800      	cmp	r0, #0
 8029c66:	f2c0 80dc 	blt.w	8029e22 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029c6a:	f103 3bff 	add.w	fp, r3, #4294967295
 8029c6e:	4558      	cmp	r0, fp
 8029c70:	f280 80d7 	bge.w	8029e22 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8029c74:	fa0f fe8e 	sxth.w	lr, lr
 8029c78:	fb00 110e 	mla	r1, r0, lr, r1
 8029c7c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029c80:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8029c84:	8841      	ldrh	r1, [r0, #2]
 8029c86:	f1bc 0f00 	cmp.w	ip, #0
 8029c8a:	d00b      	beq.n	8029ca4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8029c8c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8029c90:	3b01      	subs	r3, #1
 8029c92:	005b      	lsls	r3, r3, #1
 8029c94:	3302      	adds	r3, #2
 8029c96:	eb00 0e03 	add.w	lr, r0, r3
 8029c9a:	5ac3      	ldrh	r3, [r0, r3]
 8029c9c:	9308      	str	r3, [sp, #32]
 8029c9e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8029ca4:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029ca8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029cac:	fb12 f30c 	smulbb	r3, r2, ip
 8029cb0:	f1cc 0e10 	rsb	lr, ip, #16
 8029cb4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029cb8:	10db      	asrs	r3, r3, #3
 8029cba:	ebae 0e02 	sub.w	lr, lr, r2
 8029cbe:	ea40 000b 	orr.w	r0, r0, fp
 8029cc2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029cc6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029cca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029cce:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029cd2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029cd6:	ea4b 0101 	orr.w	r1, fp, r1
 8029cda:	4351      	muls	r1, r2
 8029cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029cde:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029ce2:	0410      	lsls	r0, r2, #16
 8029ce4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029ce8:	9908      	ldr	r1, [sp, #32]
 8029cea:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029cee:	4310      	orrs	r0, r2
 8029cf0:	9a08      	ldr	r2, [sp, #32]
 8029cf2:	0412      	lsls	r2, r2, #16
 8029cf4:	fb03 e000 	mla	r0, r3, r0, lr
 8029cf8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029cfc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029d00:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029d04:	ea42 020e 	orr.w	r2, r2, lr
 8029d08:	fb03 0302 	mla	r3, r3, r2, r0
 8029d0c:	0d59      	lsrs	r1, r3, #21
 8029d0e:	095b      	lsrs	r3, r3, #5
 8029d10:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029d14:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029d18:	430b      	orrs	r3, r1
 8029d1a:	b299      	uxth	r1, r3
 8029d1c:	10ca      	asrs	r2, r1, #3
 8029d1e:	1208      	asrs	r0, r1, #8
 8029d20:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8029d24:	00c9      	lsls	r1, r1, #3
 8029d26:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029d2a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029d2e:	b2c9      	uxtb	r1, r1
 8029d30:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8029d34:	021b      	lsls	r3, r3, #8
 8029d36:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029d3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8029d3e:	430b      	orrs	r3, r1
 8029d40:	f8c9 3000 	str.w	r3, [r9]
 8029d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029d46:	f109 0904 	add.w	r9, r9, #4
 8029d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029d4e:	441c      	add	r4, r3
 8029d50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029d52:	441e      	add	r6, r3
 8029d54:	e771      	b.n	8029c3a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8029d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029d58:	3d01      	subs	r5, #1
 8029d5a:	3704      	adds	r7, #4
 8029d5c:	441c      	add	r4, r3
 8029d5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029d60:	441e      	add	r6, r3
 8029d62:	e74c      	b.n	8029bfe <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029d64:	d01d      	beq.n	8029da2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8029d66:	1e6b      	subs	r3, r5, #1
 8029d68:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029d6a:	fb00 4003 	mla	r0, r0, r3, r4
 8029d6e:	1400      	asrs	r0, r0, #16
 8029d70:	f53f af61 	bmi.w	8029c36 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029d74:	3901      	subs	r1, #1
 8029d76:	4288      	cmp	r0, r1
 8029d78:	f6bf af5d 	bge.w	8029c36 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029d7c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029d7e:	fb01 6303 	mla	r3, r1, r3, r6
 8029d82:	141b      	asrs	r3, r3, #16
 8029d84:	f53f af57 	bmi.w	8029c36 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029d88:	3a01      	subs	r2, #1
 8029d8a:	4293      	cmp	r3, r2
 8029d8c:	f6bf af53 	bge.w	8029c36 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029d90:	46a9      	mov	r9, r5
 8029d92:	46ba      	mov	sl, r7
 8029d94:	f1b9 0f00 	cmp.w	r9, #0
 8029d98:	dc5b      	bgt.n	8029e52 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8029d9a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029d9e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8029da2:	9b07      	ldr	r3, [sp, #28]
 8029da4:	2b00      	cmp	r3, #0
 8029da6:	f340 80cc 	ble.w	8029f42 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029dae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029db0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029db4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029db8:	eef0 6a62 	vmov.f32	s13, s5
 8029dbc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029dc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029dc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029dc8:	ee16 4a90 	vmov	r4, s13
 8029dcc:	eef0 6a43 	vmov.f32	s13, s6
 8029dd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029dd4:	ee16 6a90 	vmov	r6, s13
 8029dd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029ddc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029de0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029de4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029de8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029dec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029df0:	ee12 2a90 	vmov	r2, s5
 8029df4:	eef0 2a47 	vmov.f32	s5, s14
 8029df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8029dfc:	ee13 2a10 	vmov	r2, s6
 8029e00:	931b      	str	r3, [sp, #108]	; 0x6c
 8029e02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029e04:	eeb0 3a67 	vmov.f32	s6, s15
 8029e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8029e0c:	931c      	str	r3, [sp, #112]	; 0x70
 8029e0e:	9b07      	ldr	r3, [sp, #28]
 8029e10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029e12:	3b01      	subs	r3, #1
 8029e14:	9307      	str	r3, [sp, #28]
 8029e16:	bf08      	it	eq
 8029e18:	4615      	moveq	r5, r2
 8029e1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029e1c:	bf18      	it	ne
 8029e1e:	461d      	movne	r5, r3
 8029e20:	e6de      	b.n	8029be0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8029e22:	f111 0b01 	adds.w	fp, r1, #1
 8029e26:	d48d      	bmi.n	8029d44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029e28:	45de      	cmp	lr, fp
 8029e2a:	db8b      	blt.n	8029d44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029e2c:	f110 0b01 	adds.w	fp, r0, #1
 8029e30:	d488      	bmi.n	8029d44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029e32:	455b      	cmp	r3, fp
 8029e34:	db86      	blt.n	8029d44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029e36:	b21b      	sxth	r3, r3
 8029e38:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8029e3c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029e40:	9300      	str	r3, [sp, #0]
 8029e42:	4642      	mov	r2, r8
 8029e44:	fa0f f38e 	sxth.w	r3, lr
 8029e48:	4649      	mov	r1, r9
 8029e4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029e4c:	f7ff fdd9 	bl	8029a02 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8029e50:	e778      	b.n	8029d44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8029e52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029e54:	1420      	asrs	r0, r4, #16
 8029e56:	1431      	asrs	r1, r6, #16
 8029e58:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029e5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029e60:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029e64:	fb03 0101 	mla	r1, r3, r1, r0
 8029e68:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029e6c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8029e70:	8841      	ldrh	r1, [r0, #2]
 8029e72:	f1be 0f00 	cmp.w	lr, #0
 8029e76:	d00b      	beq.n	8029e90 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8029e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8029e7c:	3b01      	subs	r3, #1
 8029e7e:	005b      	lsls	r3, r3, #1
 8029e80:	3302      	adds	r3, #2
 8029e82:	eb00 0b03 	add.w	fp, r0, r3
 8029e86:	5ac3      	ldrh	r3, [r0, r3]
 8029e88:	930a      	str	r3, [sp, #40]	; 0x28
 8029e8a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8029e8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029e90:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029e94:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029e98:	fb12 f30e 	smulbb	r3, r2, lr
 8029e9c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029ea0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029ea4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029ea8:	10db      	asrs	r3, r3, #3
 8029eaa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029eae:	ea40 000c 	orr.w	r0, r0, ip
 8029eb2:	f1ce 0c10 	rsb	ip, lr, #16
 8029eb6:	ea4b 0101 	orr.w	r1, fp, r1
 8029eba:	f109 39ff 	add.w	r9, r9, #4294967295
 8029ebe:	ebac 0c02 	sub.w	ip, ip, r2
 8029ec2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029ec6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029eca:	4351      	muls	r1, r2
 8029ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029ece:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029ed2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029ed4:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029ed8:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8029edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029ede:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029ee2:	0412      	lsls	r2, r2, #16
 8029ee4:	ea4b 0000 	orr.w	r0, fp, r0
 8029ee8:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8029eec:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029ef0:	fb03 c000 	mla	r0, r3, r0, ip
 8029ef4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029ef8:	ea42 0b0b 	orr.w	fp, r2, fp
 8029efc:	fb03 000b 	mla	r0, r3, fp, r0
 8029f00:	0d42      	lsrs	r2, r0, #21
 8029f02:	0940      	lsrs	r0, r0, #5
 8029f04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029f08:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029f0c:	4310      	orrs	r0, r2
 8029f0e:	b282      	uxth	r2, r0
 8029f10:	10d3      	asrs	r3, r2, #3
 8029f12:	1211      	asrs	r1, r2, #8
 8029f14:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029f18:	00d2      	lsls	r2, r2, #3
 8029f1a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029f1e:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8029f22:	b2d2      	uxtb	r2, r2
 8029f24:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8029f28:	021b      	lsls	r3, r3, #8
 8029f2a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8029f2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8029f32:	431a      	orrs	r2, r3
 8029f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029f36:	441c      	add	r4, r3
 8029f38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029f3a:	f84a 2b04 	str.w	r2, [sl], #4
 8029f3e:	441e      	add	r6, r3
 8029f40:	e728      	b.n	8029d94 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8029f42:	b00f      	add	sp, #60	; 0x3c
 8029f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029f48 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 8029f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029f4c:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8029f50:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8029f54:	fb09 6c03 	mla	ip, r9, r3, r6
 8029f58:	f1b9 0f00 	cmp.w	r9, #0
 8029f5c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8029f60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8029f64:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8029f68:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8029f6c:	eb02 080c 	add.w	r8, r2, ip
 8029f70:	6808      	ldr	r0, [r1, #0]
 8029f72:	f2c0 80a0 	blt.w	802a0b6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029f76:	45ca      	cmp	sl, r9
 8029f78:	f340 809d 	ble.w	802a0b6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8029f7c:	2e00      	cmp	r6, #0
 8029f7e:	f2c0 8098 	blt.w	802a0b2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029f82:	42b3      	cmp	r3, r6
 8029f84:	f340 8095 	ble.w	802a0b2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8029f88:	f898 7002 	ldrb.w	r7, [r8, #2]
 8029f8c:	f898 b001 	ldrb.w	fp, [r8, #1]
 8029f90:	043f      	lsls	r7, r7, #16
 8029f92:	f812 200c 	ldrb.w	r2, [r2, ip]
 8029f96:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8029f9a:	4317      	orrs	r7, r2
 8029f9c:	1c72      	adds	r2, r6, #1
 8029f9e:	f100 808b 	bmi.w	802a0b8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029fa2:	4293      	cmp	r3, r2
 8029fa4:	f340 8088 	ble.w	802a0b8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029fa8:	2c00      	cmp	r4, #0
 8029faa:	f000 8085 	beq.w	802a0b8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8029fae:	f898 c005 	ldrb.w	ip, [r8, #5]
 8029fb2:	f898 2004 	ldrb.w	r2, [r8, #4]
 8029fb6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8029fba:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 8029fbe:	f898 2003 	ldrb.w	r2, [r8, #3]
 8029fc2:	ea4c 0c02 	orr.w	ip, ip, r2
 8029fc6:	f119 0901 	adds.w	r9, r9, #1
 8029fca:	d479      	bmi.n	802a0c0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029fcc:	45ca      	cmp	sl, r9
 8029fce:	dd77      	ble.n	802a0c0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029fd0:	f1be 0f00 	cmp.w	lr, #0
 8029fd4:	d074      	beq.n	802a0c0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8029fd6:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8029fda:	2e00      	cmp	r6, #0
 8029fdc:	eb08 090a 	add.w	r9, r8, sl
 8029fe0:	db6c      	blt.n	802a0bc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029fe2:	42b3      	cmp	r3, r6
 8029fe4:	dd6a      	ble.n	802a0bc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8029fe6:	f899 2002 	ldrb.w	r2, [r9, #2]
 8029fea:	f899 b001 	ldrb.w	fp, [r9, #1]
 8029fee:	0412      	lsls	r2, r2, #16
 8029ff0:	f818 800a 	ldrb.w	r8, [r8, sl]
 8029ff4:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8029ff8:	ea42 0208 	orr.w	r2, r2, r8
 8029ffc:	3601      	adds	r6, #1
 8029ffe:	d40c      	bmi.n	802a01a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 802a000:	42b3      	cmp	r3, r6
 802a002:	dd0a      	ble.n	802a01a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 802a004:	b14c      	cbz	r4, 802a01a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 802a006:	f899 0005 	ldrb.w	r0, [r9, #5]
 802a00a:	f899 3004 	ldrb.w	r3, [r9, #4]
 802a00e:	0400      	lsls	r0, r0, #16
 802a010:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802a014:	f899 3003 	ldrb.w	r3, [r9, #3]
 802a018:	4318      	orrs	r0, r3
 802a01a:	fa1f f38e 	uxth.w	r3, lr
 802a01e:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 802a022:	b2a4      	uxth	r4, r4
 802a024:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a028:	2dff      	cmp	r5, #255	; 0xff
 802a02a:	fb04 f803 	mul.w	r8, r4, r3
 802a02e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 802a032:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 802a036:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802a03a:	eba4 0408 	sub.w	r4, r4, r8
 802a03e:	fa1f fe83 	uxth.w	lr, r3
 802a042:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802a046:	b2a4      	uxth	r4, r4
 802a048:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a04c:	eba9 090e 	sub.w	r9, r9, lr
 802a050:	fb04 f303 	mul.w	r3, r4, r3
 802a054:	fa1f f989 	uxth.w	r9, r9
 802a058:	fb04 f40c 	mul.w	r4, r4, ip
 802a05c:	fb09 3606 	mla	r6, r9, r6, r3
 802a060:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802a064:	fb09 4407 	mla	r4, r9, r7, r4
 802a068:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802a06c:	fb08 6603 	mla	r6, r8, r3, r6
 802a070:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802a074:	fb08 4000 	mla	r0, r8, r0, r4
 802a078:	fb0e 6303 	mla	r3, lr, r3, r6
 802a07c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802a080:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802a084:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 802a088:	fb0e 0303 	mla	r3, lr, r3, r0
 802a08c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802a090:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a094:	ea43 0306 	orr.w	r3, r3, r6
 802a098:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802a09c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802a0a0:	b2d4      	uxtb	r4, r2
 802a0a2:	b2c6      	uxtb	r6, r0
 802a0a4:	d10e      	bne.n	802a0c4 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 802a0a6:	700b      	strb	r3, [r1, #0]
 802a0a8:	7048      	strb	r0, [r1, #1]
 802a0aa:	708a      	strb	r2, [r1, #2]
 802a0ac:	70cd      	strb	r5, [r1, #3]
 802a0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a0b2:	4607      	mov	r7, r0
 802a0b4:	e772      	b.n	8029f9c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 802a0b6:	4607      	mov	r7, r0
 802a0b8:	4684      	mov	ip, r0
 802a0ba:	e784      	b.n	8029fc6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 802a0bc:	4602      	mov	r2, r0
 802a0be:	e79d      	b.n	8029ffc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 802a0c0:	4602      	mov	r2, r0
 802a0c2:	e7aa      	b.n	802a01a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 802a0c4:	2d00      	cmp	r5, #0
 802a0c6:	d0f2      	beq.n	802a0ae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 802a0c8:	78cf      	ldrb	r7, [r1, #3]
 802a0ca:	b2db      	uxtb	r3, r3
 802a0cc:	fb15 f606 	smulbb	r6, r5, r6
 802a0d0:	fb05 f207 	mul.w	r2, r5, r7
 802a0d4:	1c50      	adds	r0, r2, #1
 802a0d6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802a0da:	19ea      	adds	r2, r5, r7
 802a0dc:	1200      	asrs	r0, r0, #8
 802a0de:	1a12      	subs	r2, r2, r0
 802a0e0:	1a38      	subs	r0, r7, r0
 802a0e2:	780f      	ldrb	r7, [r1, #0]
 802a0e4:	b2d2      	uxtb	r2, r2
 802a0e6:	4347      	muls	r7, r0
 802a0e8:	70ca      	strb	r2, [r1, #3]
 802a0ea:	fb05 7303 	mla	r3, r5, r3, r7
 802a0ee:	fb15 f504 	smulbb	r5, r5, r4
 802a0f2:	fb93 f3f2 	sdiv	r3, r3, r2
 802a0f6:	700b      	strb	r3, [r1, #0]
 802a0f8:	784b      	ldrb	r3, [r1, #1]
 802a0fa:	fb00 6303 	mla	r3, r0, r3, r6
 802a0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 802a102:	704b      	strb	r3, [r1, #1]
 802a104:	788b      	ldrb	r3, [r1, #2]
 802a106:	fb00 5503 	mla	r5, r0, r3, r5
 802a10a:	fb95 f5f2 	sdiv	r5, r5, r2
 802a10e:	708d      	strb	r5, [r1, #2]
 802a110:	e7cd      	b.n	802a0ae <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

0802a112 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a112:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a116:	b09b      	sub	sp, #108	; 0x6c
 802a118:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 802a11c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a11e:	9019      	str	r0, [sp, #100]	; 0x64
 802a120:	9307      	str	r3, [sp, #28]
 802a122:	6850      	ldr	r0, [r2, #4]
 802a124:	6812      	ldr	r2, [r2, #0]
 802a126:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
 802a12a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a12e:	fb00 1303 	mla	r3, r0, r3, r1
 802a132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a136:	9308      	str	r3, [sp, #32]
 802a138:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a13a:	681b      	ldr	r3, [r3, #0]
 802a13c:	9309      	str	r3, [sp, #36]	; 0x24
 802a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a140:	2b00      	cmp	r3, #0
 802a142:	dc03      	bgt.n	802a14c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a146:	2b00      	cmp	r3, #0
 802a148:	f340 8231 	ble.w	802a5ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802a14c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a14e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a152:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a156:	1e48      	subs	r0, r1, #1
 802a158:	1e55      	subs	r5, r2, #1
 802a15a:	9b07      	ldr	r3, [sp, #28]
 802a15c:	2b00      	cmp	r3, #0
 802a15e:	f340 80c3 	ble.w	802a2e8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802a162:	9e25      	ldr	r6, [sp, #148]	; 0x94
 802a164:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a166:	1436      	asrs	r6, r6, #16
 802a168:	ea4f 4323 	mov.w	r3, r3, asr #16
 802a16c:	d406      	bmi.n	802a17c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802a16e:	4286      	cmp	r6, r0
 802a170:	da04      	bge.n	802a17c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802a172:	2b00      	cmp	r3, #0
 802a174:	db02      	blt.n	802a17c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802a176:	42ab      	cmp	r3, r5
 802a178:	f2c0 80b7 	blt.w	802a2ea <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802a17c:	3601      	adds	r6, #1
 802a17e:	f100 80a4 	bmi.w	802a2ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802a182:	42b1      	cmp	r1, r6
 802a184:	f2c0 80a1 	blt.w	802a2ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802a188:	3301      	adds	r3, #1
 802a18a:	f100 809e 	bmi.w	802a2ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802a18e:	429a      	cmp	r2, r3
 802a190:	f2c0 809b 	blt.w	802a2ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802a194:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 802a198:	f1bb 0f00 	cmp.w	fp, #0
 802a19c:	f340 80c5 	ble.w	802a32a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802a1a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a1a2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802a1a4:	1418      	asrs	r0, r3, #16
 802a1a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a1a8:	68cf      	ldr	r7, [r1, #12]
 802a1aa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802a1ae:	9925      	ldr	r1, [sp, #148]	; 0x94
 802a1b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a1b2:	1409      	asrs	r1, r1, #16
 802a1b4:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802a1b8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a1ba:	689b      	ldr	r3, [r3, #8]
 802a1bc:	f100 8127 	bmi.w	802a40e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802a1c0:	f103 3cff 	add.w	ip, r3, #4294967295
 802a1c4:	4561      	cmp	r1, ip
 802a1c6:	f280 8122 	bge.w	802a40e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802a1ca:	2800      	cmp	r0, #0
 802a1cc:	f2c0 811f 	blt.w	802a40e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802a1d0:	f107 3cff 	add.w	ip, r7, #4294967295
 802a1d4:	4560      	cmp	r0, ip
 802a1d6:	f280 811a 	bge.w	802a40e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802a1da:	b21b      	sxth	r3, r3
 802a1dc:	fb00 1103 	mla	r1, r0, r3, r1
 802a1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a1e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a1e6:	1847      	adds	r7, r0, r1
 802a1e8:	5c40      	ldrb	r0, [r0, r1]
 802a1ea:	7879      	ldrb	r1, [r7, #1]
 802a1ec:	f897 e002 	ldrb.w	lr, [r7, #2]
 802a1f0:	910c      	str	r1, [sp, #48]	; 0x30
 802a1f2:	f897 9003 	ldrb.w	r9, [r7, #3]
 802a1f6:	f897 8004 	ldrb.w	r8, [r7, #4]
 802a1fa:	f897 a005 	ldrb.w	sl, [r7, #5]
 802a1fe:	b1cd      	cbz	r5, 802a234 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802a200:	f04f 0c03 	mov.w	ip, #3
 802a204:	f06f 0104 	mvn.w	r1, #4
 802a208:	3705      	adds	r7, #5
 802a20a:	fb13 130c 	smlabb	r3, r3, ip, r1
 802a20e:	eb07 0c03 	add.w	ip, r7, r3
 802a212:	5cfb      	ldrb	r3, [r7, r3]
 802a214:	930d      	str	r3, [sp, #52]	; 0x34
 802a216:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802a21a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a21c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802a220:	9311      	str	r3, [sp, #68]	; 0x44
 802a222:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802a226:	930e      	str	r3, [sp, #56]	; 0x38
 802a228:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802a22c:	9310      	str	r3, [sp, #64]	; 0x40
 802a22e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802a232:	9312      	str	r3, [sp, #72]	; 0x48
 802a234:	b292      	uxth	r2, r2
 802a236:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a238:	b2ad      	uxth	r5, r5
 802a23a:	2cff      	cmp	r4, #255	; 0xff
 802a23c:	fb02 f305 	mul.w	r3, r2, r5
 802a240:	ea4f 1202 	mov.w	r2, r2, lsl #4
 802a244:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 802a248:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a24c:	eba2 0203 	sub.w	r2, r2, r3
 802a250:	b2ad      	uxth	r5, r5
 802a252:	b292      	uxth	r2, r2
 802a254:	eba7 0705 	sub.w	r7, r7, r5
 802a258:	fb02 f909 	mul.w	r9, r2, r9
 802a25c:	b2bf      	uxth	r7, r7
 802a25e:	fb02 f808 	mul.w	r8, r2, r8
 802a262:	fb02 fa0a 	mul.w	sl, r2, sl
 802a266:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a268:	fb07 9900 	mla	r9, r7, r0, r9
 802a26c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a26e:	fb07 8801 	mla	r8, r7, r1, r8
 802a272:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a274:	fb07 aa0e 	mla	sl, r7, lr, sl
 802a278:	fb05 9900 	mla	r9, r5, r0, r9
 802a27c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802a27e:	fb05 8801 	mla	r8, r5, r1, r8
 802a282:	9910      	ldr	r1, [sp, #64]	; 0x40
 802a284:	fb05 a502 	mla	r5, r5, r2, sl
 802a288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a28a:	fb03 9900 	mla	r9, r3, r0, r9
 802a28e:	fb03 8801 	mla	r8, r3, r1, r8
 802a292:	fb03 5302 	mla	r3, r3, r2, r5
 802a296:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a29a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802a29e:	ea4f 2323 	mov.w	r3, r3, asr #8
 802a2a2:	f040 8088 	bne.w	802a3b6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802a2a6:	f886 9000 	strb.w	r9, [r6]
 802a2aa:	f886 8001 	strb.w	r8, [r6, #1]
 802a2ae:	70b3      	strb	r3, [r6, #2]
 802a2b0:	70f4      	strb	r4, [r6, #3]
 802a2b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a2b4:	3604      	adds	r6, #4
 802a2b6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802a2b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a2bc:	4413      	add	r3, r2
 802a2be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802a2c0:	9325      	str	r3, [sp, #148]	; 0x94
 802a2c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a2c4:	4413      	add	r3, r2
 802a2c6:	9326      	str	r3, [sp, #152]	; 0x98
 802a2c8:	e766      	b.n	802a198 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802a2ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a2cc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802a2ce:	4433      	add	r3, r6
 802a2d0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 802a2d2:	9325      	str	r3, [sp, #148]	; 0x94
 802a2d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a2d6:	4433      	add	r3, r6
 802a2d8:	9326      	str	r3, [sp, #152]	; 0x98
 802a2da:	9b07      	ldr	r3, [sp, #28]
 802a2dc:	3b01      	subs	r3, #1
 802a2de:	9307      	str	r3, [sp, #28]
 802a2e0:	9b08      	ldr	r3, [sp, #32]
 802a2e2:	3304      	adds	r3, #4
 802a2e4:	9308      	str	r3, [sp, #32]
 802a2e6:	e738      	b.n	802a15a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a2e8:	d026      	beq.n	802a338 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802a2ea:	9b07      	ldr	r3, [sp, #28]
 802a2ec:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802a2ee:	3b01      	subs	r3, #1
 802a2f0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802a2f2:	fb00 5003 	mla	r0, r0, r3, r5
 802a2f6:	1400      	asrs	r0, r0, #16
 802a2f8:	f53f af4c 	bmi.w	802a194 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a2fc:	3901      	subs	r1, #1
 802a2fe:	4288      	cmp	r0, r1
 802a300:	f6bf af48 	bge.w	802a194 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a304:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a306:	9826      	ldr	r0, [sp, #152]	; 0x98
 802a308:	fb01 0303 	mla	r3, r1, r3, r0
 802a30c:	141b      	asrs	r3, r3, #16
 802a30e:	f53f af41 	bmi.w	802a194 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a312:	3a01      	subs	r2, #1
 802a314:	4293      	cmp	r3, r2
 802a316:	f6bf af3d 	bge.w	802a194 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a31a:	9b08      	ldr	r3, [sp, #32]
 802a31c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802a320:	1d18      	adds	r0, r3, #4
 802a322:	f1be 0f00 	cmp.w	lr, #0
 802a326:	f300 808e 	bgt.w	802a446 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802a32a:	9b07      	ldr	r3, [sp, #28]
 802a32c:	9a08      	ldr	r2, [sp, #32]
 802a32e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802a332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a336:	9308      	str	r3, [sp, #32]
 802a338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a33a:	2b00      	cmp	r3, #0
 802a33c:	f340 8137 	ble.w	802a5ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802a340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a344:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a346:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a34a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a34e:	eef0 6a62 	vmov.f32	s13, s5
 802a352:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a356:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a35a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a35e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802a362:	eef0 6a43 	vmov.f32	s13, s6
 802a366:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a36a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802a36e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a372:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a376:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a37a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a37e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a382:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a386:	ee12 2a90 	vmov	r2, s5
 802a38a:	eef0 2a47 	vmov.f32	s5, s14
 802a38e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a392:	ee13 2a10 	vmov	r2, s6
 802a396:	9327      	str	r3, [sp, #156]	; 0x9c
 802a398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a39a:	eeb0 3a67 	vmov.f32	s6, s15
 802a39e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a3a2:	9328      	str	r3, [sp, #160]	; 0xa0
 802a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a3a8:	3b01      	subs	r3, #1
 802a3aa:	930a      	str	r3, [sp, #40]	; 0x28
 802a3ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a3ae:	bf08      	it	eq
 802a3b0:	4613      	moveq	r3, r2
 802a3b2:	9307      	str	r3, [sp, #28]
 802a3b4:	e6c3      	b.n	802a13e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a3b6:	2c00      	cmp	r4, #0
 802a3b8:	f43f af7b 	beq.w	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a3bc:	78f0      	ldrb	r0, [r6, #3]
 802a3be:	fa5f f989 	uxtb.w	r9, r9
 802a3c2:	fa5f f888 	uxtb.w	r8, r8
 802a3c6:	fb04 f100 	mul.w	r1, r4, r0
 802a3ca:	1822      	adds	r2, r4, r0
 802a3cc:	b2db      	uxtb	r3, r3
 802a3ce:	1c4d      	adds	r5, r1, #1
 802a3d0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802a3d4:	1229      	asrs	r1, r5, #8
 802a3d6:	1a45      	subs	r5, r0, r1
 802a3d8:	1a52      	subs	r2, r2, r1
 802a3da:	7831      	ldrb	r1, [r6, #0]
 802a3dc:	b2d2      	uxtb	r2, r2
 802a3de:	4369      	muls	r1, r5
 802a3e0:	70f2      	strb	r2, [r6, #3]
 802a3e2:	fb04 1909 	mla	r9, r4, r9, r1
 802a3e6:	7871      	ldrb	r1, [r6, #1]
 802a3e8:	4369      	muls	r1, r5
 802a3ea:	fb04 1808 	mla	r8, r4, r8, r1
 802a3ee:	78b1      	ldrb	r1, [r6, #2]
 802a3f0:	434d      	muls	r5, r1
 802a3f2:	fb04 5303 	mla	r3, r4, r3, r5
 802a3f6:	fb99 f9f2 	sdiv	r9, r9, r2
 802a3fa:	fb98 f8f2 	sdiv	r8, r8, r2
 802a3fe:	fb93 f3f2 	sdiv	r3, r3, r2
 802a402:	f886 9000 	strb.w	r9, [r6]
 802a406:	f886 8001 	strb.w	r8, [r6, #1]
 802a40a:	70b3      	strb	r3, [r6, #2]
 802a40c:	e751      	b.n	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a40e:	f111 0c01 	adds.w	ip, r1, #1
 802a412:	f53f af4e 	bmi.w	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a416:	4563      	cmp	r3, ip
 802a418:	f6ff af4b 	blt.w	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a41c:	f110 0c01 	adds.w	ip, r0, #1
 802a420:	f53f af47 	bmi.w	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a424:	4567      	cmp	r7, ip
 802a426:	f6ff af44 	blt.w	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a42a:	b23f      	sxth	r7, r7
 802a42c:	9101      	str	r1, [sp, #4]
 802a42e:	b21b      	sxth	r3, r3
 802a430:	4631      	mov	r1, r6
 802a432:	9700      	str	r7, [sp, #0]
 802a434:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802a438:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a43e:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a440:	f7ff fd82 	bl	8029f48 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 802a444:	e735      	b.n	802a2b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802a446:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a448:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802a44a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802a44e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a450:	1412      	asrs	r2, r2, #16
 802a452:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802a456:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a458:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802a45c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a45e:	141b      	asrs	r3, r3, #16
 802a460:	fb0c 2303 	mla	r3, ip, r3, r2
 802a464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802a46a:	18d6      	adds	r6, r2, r3
 802a46c:	5cd2      	ldrb	r2, [r2, r3]
 802a46e:	7873      	ldrb	r3, [r6, #1]
 802a470:	f896 8002 	ldrb.w	r8, [r6, #2]
 802a474:	930c      	str	r3, [sp, #48]	; 0x30
 802a476:	f896 a003 	ldrb.w	sl, [r6, #3]
 802a47a:	f896 9004 	ldrb.w	r9, [r6, #4]
 802a47e:	f896 b005 	ldrb.w	fp, [r6, #5]
 802a482:	b1a5      	cbz	r5, 802a4ae <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 802a484:	2703      	movs	r7, #3
 802a486:	f06f 0304 	mvn.w	r3, #4
 802a48a:	3605      	adds	r6, #5
 802a48c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 802a490:	eb06 070c 	add.w	r7, r6, ip
 802a494:	f816 600c 	ldrb.w	r6, [r6, ip]
 802a498:	9613      	str	r6, [sp, #76]	; 0x4c
 802a49a:	787e      	ldrb	r6, [r7, #1]
 802a49c:	9615      	str	r6, [sp, #84]	; 0x54
 802a49e:	78be      	ldrb	r6, [r7, #2]
 802a4a0:	9617      	str	r6, [sp, #92]	; 0x5c
 802a4a2:	78fe      	ldrb	r6, [r7, #3]
 802a4a4:	9614      	str	r6, [sp, #80]	; 0x50
 802a4a6:	793e      	ldrb	r6, [r7, #4]
 802a4a8:	9616      	str	r6, [sp, #88]	; 0x58
 802a4aa:	797e      	ldrb	r6, [r7, #5]
 802a4ac:	9618      	str	r6, [sp, #96]	; 0x60
 802a4ae:	b289      	uxth	r1, r1
 802a4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a4b2:	b2ad      	uxth	r5, r5
 802a4b4:	2cff      	cmp	r4, #255	; 0xff
 802a4b6:	fb01 f605 	mul.w	r6, r1, r5
 802a4ba:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802a4be:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 802a4c2:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 802a4c6:	eba1 0106 	sub.w	r1, r1, r6
 802a4ca:	b2ad      	uxth	r5, r5
 802a4cc:	b289      	uxth	r1, r1
 802a4ce:	eba7 0705 	sub.w	r7, r7, r5
 802a4d2:	fb01 f909 	mul.w	r9, r1, r9
 802a4d6:	b2bf      	uxth	r7, r7
 802a4d8:	fb01 fa0a 	mul.w	sl, r1, sl
 802a4dc:	fb01 fb0b 	mul.w	fp, r1, fp
 802a4e0:	fb07 9903 	mla	r9, r7, r3, r9
 802a4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802a4e6:	fb07 aa02 	mla	sl, r7, r2, sl
 802a4ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802a4ec:	fb05 9903 	mla	r9, r5, r3, r9
 802a4f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a4f2:	fb07 bb08 	mla	fp, r7, r8, fp
 802a4f6:	fb06 9903 	mla	r9, r6, r3, r9
 802a4fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a4fc:	fb05 aa02 	mla	sl, r5, r2, sl
 802a500:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a502:	fb05 bb03 	mla	fp, r5, r3, fp
 802a506:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a508:	fb06 aa02 	mla	sl, r6, r2, sl
 802a50c:	ea4f 2929 	mov.w	r9, r9, asr #8
 802a510:	fb06 b603 	mla	r6, r6, r3, fp
 802a514:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802a518:	ea4f 2626 	mov.w	r6, r6, asr #8
 802a51c:	d113      	bne.n	802a546 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802a51e:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a522:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a526:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a52a:	f800 4c01 	strb.w	r4, [r0, #-1]
 802a52e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802a530:	3004      	adds	r0, #4
 802a532:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802a534:	f10e 3eff 	add.w	lr, lr, #4294967295
 802a538:	4413      	add	r3, r2
 802a53a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802a53c:	9325      	str	r3, [sp, #148]	; 0x94
 802a53e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a540:	4413      	add	r3, r2
 802a542:	9326      	str	r3, [sp, #152]	; 0x98
 802a544:	e6ed      	b.n	802a322 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802a546:	2c00      	cmp	r4, #0
 802a548:	d0f1      	beq.n	802a52e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a54a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 802a54e:	fa5f fa8a 	uxtb.w	sl, sl
 802a552:	fa5f f989 	uxtb.w	r9, r9
 802a556:	fb04 f302 	mul.w	r3, r4, r2
 802a55a:	eb04 0c02 	add.w	ip, r4, r2
 802a55e:	b2f6      	uxtb	r6, r6
 802a560:	1c59      	adds	r1, r3, #1
 802a562:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802a566:	120b      	asrs	r3, r1, #8
 802a568:	1ad1      	subs	r1, r2, r3
 802a56a:	ebac 0c03 	sub.w	ip, ip, r3
 802a56e:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 802a572:	fa5f fc8c 	uxtb.w	ip, ip
 802a576:	434b      	muls	r3, r1
 802a578:	f800 cc01 	strb.w	ip, [r0, #-1]
 802a57c:	fb04 3a0a 	mla	sl, r4, sl, r3
 802a580:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 802a584:	434b      	muls	r3, r1
 802a586:	fb04 3909 	mla	r9, r4, r9, r3
 802a58a:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 802a58e:	4359      	muls	r1, r3
 802a590:	fb04 1606 	mla	r6, r4, r6, r1
 802a594:	fb9a fafc 	sdiv	sl, sl, ip
 802a598:	fb99 f9fc 	sdiv	r9, r9, ip
 802a59c:	fb96 f6fc 	sdiv	r6, r6, ip
 802a5a0:	f800 ac04 	strb.w	sl, [r0, #-4]
 802a5a4:	f800 9c03 	strb.w	r9, [r0, #-3]
 802a5a8:	f800 6c02 	strb.w	r6, [r0, #-2]
 802a5ac:	e7bf      	b.n	802a52e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802a5ae:	b01b      	add	sp, #108	; 0x6c
 802a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a5b4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 802a5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a5b8:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 802a5bc:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 802a5c0:	fb08 7603 	mla	r6, r8, r3, r7
 802a5c4:	f1b8 0f00 	cmp.w	r8, #0
 802a5c8:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802a5cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802a5d0:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 802a5d4:	6808      	ldr	r0, [r1, #0]
 802a5d6:	eb02 0e06 	add.w	lr, r2, r6
 802a5da:	f2c0 8089 	blt.w	802a6f0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a5de:	45c1      	cmp	r9, r8
 802a5e0:	f340 8086 	ble.w	802a6f0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802a5e4:	2f00      	cmp	r7, #0
 802a5e6:	f2c0 8081 	blt.w	802a6ec <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a5ea:	42bb      	cmp	r3, r7
 802a5ec:	dd7e      	ble.n	802a6ec <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802a5ee:	f89e 4002 	ldrb.w	r4, [lr, #2]
 802a5f2:	f89e a001 	ldrb.w	sl, [lr, #1]
 802a5f6:	0424      	lsls	r4, r4, #16
 802a5f8:	5d92      	ldrb	r2, [r2, r6]
 802a5fa:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802a5fe:	4314      	orrs	r4, r2
 802a600:	1c7a      	adds	r2, r7, #1
 802a602:	d478      	bmi.n	802a6f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a604:	4293      	cmp	r3, r2
 802a606:	dd76      	ble.n	802a6f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a608:	2d00      	cmp	r5, #0
 802a60a:	d074      	beq.n	802a6f6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802a60c:	f89e 6005 	ldrb.w	r6, [lr, #5]
 802a610:	f89e 2004 	ldrb.w	r2, [lr, #4]
 802a614:	0436      	lsls	r6, r6, #16
 802a616:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802a61a:	f89e 2003 	ldrb.w	r2, [lr, #3]
 802a61e:	4316      	orrs	r6, r2
 802a620:	f118 0801 	adds.w	r8, r8, #1
 802a624:	d46b      	bmi.n	802a6fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a626:	45c1      	cmp	r9, r8
 802a628:	dd69      	ble.n	802a6fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a62a:	f1bc 0f00 	cmp.w	ip, #0
 802a62e:	d066      	beq.n	802a6fe <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802a630:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 802a634:	2f00      	cmp	r7, #0
 802a636:	eb0e 0809 	add.w	r8, lr, r9
 802a63a:	db5e      	blt.n	802a6fa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a63c:	42bb      	cmp	r3, r7
 802a63e:	dd5c      	ble.n	802a6fa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802a640:	f898 2002 	ldrb.w	r2, [r8, #2]
 802a644:	f898 a001 	ldrb.w	sl, [r8, #1]
 802a648:	0412      	lsls	r2, r2, #16
 802a64a:	f81e e009 	ldrb.w	lr, [lr, r9]
 802a64e:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 802a652:	ea42 020e 	orr.w	r2, r2, lr
 802a656:	3701      	adds	r7, #1
 802a658:	d40c      	bmi.n	802a674 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a65a:	42bb      	cmp	r3, r7
 802a65c:	dd0a      	ble.n	802a674 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a65e:	b14d      	cbz	r5, 802a674 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802a660:	f898 0005 	ldrb.w	r0, [r8, #5]
 802a664:	f898 3004 	ldrb.w	r3, [r8, #4]
 802a668:	0400      	lsls	r0, r0, #16
 802a66a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802a66e:	f898 3003 	ldrb.w	r3, [r8, #3]
 802a672:	4318      	orrs	r0, r3
 802a674:	b2ad      	uxth	r5, r5
 802a676:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802a67a:	fa1f f78c 	uxth.w	r7, ip
 802a67e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802a682:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802a686:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a68a:	fb05 fc07 	mul.w	ip, r5, r7
 802a68e:	012d      	lsls	r5, r5, #4
 802a690:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a694:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 802a698:	eba5 050c 	sub.w	r5, r5, ip
 802a69c:	b2bf      	uxth	r7, r7
 802a69e:	b2ad      	uxth	r5, r5
 802a6a0:	ebae 0e07 	sub.w	lr, lr, r7
 802a6a4:	436b      	muls	r3, r5
 802a6a6:	fa1f fe8e 	uxth.w	lr, lr
 802a6aa:	436e      	muls	r6, r5
 802a6ac:	fb0e 3808 	mla	r8, lr, r8, r3
 802a6b0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802a6b4:	fb0e 6404 	mla	r4, lr, r4, r6
 802a6b8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802a6bc:	fb0c 8803 	mla	r8, ip, r3, r8
 802a6c0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802a6c4:	fb0c 4000 	mla	r0, ip, r0, r4
 802a6c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a6cc:	fb07 8303 	mla	r3, r7, r3, r8
 802a6d0:	fb07 0002 	mla	r0, r7, r2, r0
 802a6d4:	0a1b      	lsrs	r3, r3, #8
 802a6d6:	0a00      	lsrs	r0, r0, #8
 802a6d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a6dc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802a6e0:	4318      	orrs	r0, r3
 802a6e2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802a6e6:	6008      	str	r0, [r1, #0]
 802a6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a6ec:	4604      	mov	r4, r0
 802a6ee:	e787      	b.n	802a600 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 802a6f0:	4606      	mov	r6, r0
 802a6f2:	4604      	mov	r4, r0
 802a6f4:	e794      	b.n	802a620 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a6f6:	4606      	mov	r6, r0
 802a6f8:	e792      	b.n	802a620 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802a6fa:	4602      	mov	r2, r0
 802a6fc:	e7ab      	b.n	802a656 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802a6fe:	4602      	mov	r2, r0
 802a700:	e7b8      	b.n	802a674 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

0802a702 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a706:	b09b      	sub	sp, #108	; 0x6c
 802a708:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 802a70c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a70e:	9019      	str	r0, [sp, #100]	; 0x64
 802a710:	9306      	str	r3, [sp, #24]
 802a712:	6850      	ldr	r0, [r2, #4]
 802a714:	6812      	ldr	r2, [r2, #0]
 802a716:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a71a:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	; 0x94
 802a71e:	fb00 1303 	mla	r3, r0, r3, r1
 802a722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802a726:	9307      	str	r3, [sp, #28]
 802a728:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a72a:	681b      	ldr	r3, [r3, #0]
 802a72c:	9308      	str	r3, [sp, #32]
 802a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a730:	2b00      	cmp	r3, #0
 802a732:	dc03      	bgt.n	802a73c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a736:	2b00      	cmp	r3, #0
 802a738:	f340 81a6 	ble.w	802aa88 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a73c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a73e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a742:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a746:	1e48      	subs	r0, r1, #1
 802a748:	1e55      	subs	r5, r2, #1
 802a74a:	9b06      	ldr	r3, [sp, #24]
 802a74c:	2b00      	cmp	r3, #0
 802a74e:	f340 80b0 	ble.w	802a8b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802a752:	1426      	asrs	r6, r4, #16
 802a754:	ea4f 432a 	mov.w	r3, sl, asr #16
 802a758:	d406      	bmi.n	802a768 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a75a:	4286      	cmp	r6, r0
 802a75c:	da04      	bge.n	802a768 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a75e:	2b00      	cmp	r3, #0
 802a760:	db02      	blt.n	802a768 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a762:	42ab      	cmp	r3, r5
 802a764:	f2c0 80a6 	blt.w	802a8b4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802a768:	3601      	adds	r6, #1
 802a76a:	f100 8097 	bmi.w	802a89c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a76e:	42b1      	cmp	r1, r6
 802a770:	f2c0 8094 	blt.w	802a89c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a774:	3301      	adds	r3, #1
 802a776:	f100 8091 	bmi.w	802a89c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a77a:	429a      	cmp	r2, r3
 802a77c:	f2c0 808e 	blt.w	802a89c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802a780:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802a784:	f1bb 0f00 	cmp.w	fp, #0
 802a788:	f340 80af 	ble.w	802a8ea <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802a78c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802a78e:	ea4f 452a 	mov.w	r5, sl, asr #16
 802a792:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a794:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a798:	68c7      	ldr	r7, [r0, #12]
 802a79a:	1420      	asrs	r0, r4, #16
 802a79c:	f3ca 3103 	ubfx	r1, sl, #12, #4
 802a7a0:	689b      	ldr	r3, [r3, #8]
 802a7a2:	f100 80e8 	bmi.w	802a976 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a7a6:	f103 3cff 	add.w	ip, r3, #4294967295
 802a7aa:	4560      	cmp	r0, ip
 802a7ac:	f280 80e3 	bge.w	802a976 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a7b0:	2d00      	cmp	r5, #0
 802a7b2:	f2c0 80e0 	blt.w	802a976 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a7b6:	f107 3cff 	add.w	ip, r7, #4294967295
 802a7ba:	4565      	cmp	r5, ip
 802a7bc:	f280 80db 	bge.w	802a976 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802a7c0:	b21b      	sxth	r3, r3
 802a7c2:	fb05 0003 	mla	r0, r5, r3, r0
 802a7c6:	9d08      	ldr	r5, [sp, #32]
 802a7c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802a7cc:	182f      	adds	r7, r5, r0
 802a7ce:	5c28      	ldrb	r0, [r5, r0]
 802a7d0:	900b      	str	r0, [sp, #44]	; 0x2c
 802a7d2:	7978      	ldrb	r0, [r7, #5]
 802a7d4:	787d      	ldrb	r5, [r7, #1]
 802a7d6:	f897 e002 	ldrb.w	lr, [r7, #2]
 802a7da:	f897 9003 	ldrb.w	r9, [r7, #3]
 802a7de:	f897 8004 	ldrb.w	r8, [r7, #4]
 802a7e2:	900c      	str	r0, [sp, #48]	; 0x30
 802a7e4:	b1c1      	cbz	r1, 802a818 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802a7e6:	f06f 0c04 	mvn.w	ip, #4
 802a7ea:	2003      	movs	r0, #3
 802a7ec:	3705      	adds	r7, #5
 802a7ee:	fb13 c300 	smlabb	r3, r3, r0, ip
 802a7f2:	eb07 0c03 	add.w	ip, r7, r3
 802a7f6:	5cfb      	ldrb	r3, [r7, r3]
 802a7f8:	930d      	str	r3, [sp, #52]	; 0x34
 802a7fa:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 802a800:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802a804:	9311      	str	r3, [sp, #68]	; 0x44
 802a806:	f89c 3003 	ldrb.w	r3, [ip, #3]
 802a80a:	930e      	str	r3, [sp, #56]	; 0x38
 802a80c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802a810:	9310      	str	r3, [sp, #64]	; 0x40
 802a812:	f89c 3005 	ldrb.w	r3, [ip, #5]
 802a816:	9312      	str	r3, [sp, #72]	; 0x48
 802a818:	b292      	uxth	r2, r2
 802a81a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802a81c:	b289      	uxth	r1, r1
 802a81e:	fb02 f301 	mul.w	r3, r2, r1
 802a822:	0112      	lsls	r2, r2, #4
 802a824:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a828:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a82c:	1ad2      	subs	r2, r2, r3
 802a82e:	b289      	uxth	r1, r1
 802a830:	b292      	uxth	r2, r2
 802a832:	1a7f      	subs	r7, r7, r1
 802a834:	fb02 f909 	mul.w	r9, r2, r9
 802a838:	b2bf      	uxth	r7, r7
 802a83a:	fb02 f808 	mul.w	r8, r2, r8
 802a83e:	fb07 9900 	mla	r9, r7, r0, r9
 802a842:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a844:	fb07 8805 	mla	r8, r7, r5, r8
 802a848:	fb01 9900 	mla	r9, r1, r0, r9
 802a84c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802a84e:	fb03 9900 	mla	r9, r3, r0, r9
 802a852:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802a854:	fb01 8800 	mla	r8, r1, r0, r8
 802a858:	9810      	ldr	r0, [sp, #64]	; 0x40
 802a85a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802a85e:	fb03 8800 	mla	r8, r3, r0, r8
 802a862:	980c      	ldr	r0, [sp, #48]	; 0x30
 802a864:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a868:	4342      	muls	r2, r0
 802a86a:	ea49 0908 	orr.w	r9, r9, r8
 802a86e:	fb07 280e 	mla	r8, r7, lr, r2
 802a872:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a874:	fb01 8802 	mla	r8, r1, r2, r8
 802a878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802a87a:	fb03 8802 	mla	r8, r3, r2, r8
 802a87e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802a882:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 802a886:	ea49 0308 	orr.w	r3, r9, r8
 802a88a:	6033      	str	r3, [r6, #0]
 802a88c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a88e:	3604      	adds	r6, #4
 802a890:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a894:	441c      	add	r4, r3
 802a896:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a898:	449a      	add	sl, r3
 802a89a:	e773      	b.n	802a784 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a89c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a89e:	441c      	add	r4, r3
 802a8a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a8a2:	449a      	add	sl, r3
 802a8a4:	9b06      	ldr	r3, [sp, #24]
 802a8a6:	3b01      	subs	r3, #1
 802a8a8:	9306      	str	r3, [sp, #24]
 802a8aa:	9b07      	ldr	r3, [sp, #28]
 802a8ac:	3304      	adds	r3, #4
 802a8ae:	9307      	str	r3, [sp, #28]
 802a8b0:	e74b      	b.n	802a74a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a8b2:	d021      	beq.n	802a8f8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 802a8b4:	9b06      	ldr	r3, [sp, #24]
 802a8b6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802a8b8:	3b01      	subs	r3, #1
 802a8ba:	fb00 4003 	mla	r0, r0, r3, r4
 802a8be:	1400      	asrs	r0, r0, #16
 802a8c0:	f53f af5e 	bmi.w	802a780 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a8c4:	3901      	subs	r1, #1
 802a8c6:	4288      	cmp	r0, r1
 802a8c8:	f6bf af5a 	bge.w	802a780 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a8cc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a8ce:	fb01 a303 	mla	r3, r1, r3, sl
 802a8d2:	141b      	asrs	r3, r3, #16
 802a8d4:	f53f af54 	bmi.w	802a780 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a8d8:	3a01      	subs	r2, #1
 802a8da:	4293      	cmp	r3, r2
 802a8dc:	f6bf af50 	bge.w	802a780 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802a8e0:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 802a8e4:	f1bc 0f00 	cmp.w	ip, #0
 802a8e8:	dc5c      	bgt.n	802a9a4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802a8ea:	9b06      	ldr	r3, [sp, #24]
 802a8ec:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a8f0:	9b07      	ldr	r3, [sp, #28]
 802a8f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802a8f6:	9307      	str	r3, [sp, #28]
 802a8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a8fa:	2b00      	cmp	r3, #0
 802a8fc:	f340 80c4 	ble.w	802aa88 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802a900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a904:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a906:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a90a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a90e:	eef0 6a62 	vmov.f32	s13, s5
 802a912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a916:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a91a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a91e:	ee16 4a90 	vmov	r4, s13
 802a922:	eef0 6a43 	vmov.f32	s13, s6
 802a926:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a92a:	ee16 aa90 	vmov	sl, s13
 802a92e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a932:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a936:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a93e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a946:	ee12 2a90 	vmov	r2, s5
 802a94a:	eef0 2a47 	vmov.f32	s5, s14
 802a94e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a952:	ee13 2a10 	vmov	r2, s6
 802a956:	9327      	str	r3, [sp, #156]	; 0x9c
 802a958:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a95a:	eeb0 3a67 	vmov.f32	s6, s15
 802a95e:	fb92 f3f3 	sdiv	r3, r2, r3
 802a962:	9328      	str	r3, [sp, #160]	; 0xa0
 802a964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a968:	3b01      	subs	r3, #1
 802a96a:	9309      	str	r3, [sp, #36]	; 0x24
 802a96c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a96e:	bf08      	it	eq
 802a970:	4613      	moveq	r3, r2
 802a972:	9306      	str	r3, [sp, #24]
 802a974:	e6db      	b.n	802a72e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a976:	f110 0c01 	adds.w	ip, r0, #1
 802a97a:	d487      	bmi.n	802a88c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a97c:	4563      	cmp	r3, ip
 802a97e:	db85      	blt.n	802a88c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a980:	f115 0c01 	adds.w	ip, r5, #1
 802a984:	d482      	bmi.n	802a88c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a986:	4567      	cmp	r7, ip
 802a988:	db80      	blt.n	802a88c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a98a:	b23f      	sxth	r7, r7
 802a98c:	b21b      	sxth	r3, r3
 802a98e:	9700      	str	r7, [sp, #0]
 802a990:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802a994:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802a998:	9a08      	ldr	r2, [sp, #32]
 802a99a:	4631      	mov	r1, r6
 802a99c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a99e:	f7ff fe09 	bl	802a5b4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 802a9a2:	e773      	b.n	802a88c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a9a4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802a9a6:	1420      	asrs	r0, r4, #16
 802a9a8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a9ac:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802a9b0:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 802a9b4:	ea4f 412a 	mov.w	r1, sl, asr #16
 802a9b8:	930b      	str	r3, [sp, #44]	; 0x2c
 802a9ba:	fb07 0101 	mla	r1, r7, r1, r0
 802a9be:	9808      	ldr	r0, [sp, #32]
 802a9c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802a9c4:	1845      	adds	r5, r0, r1
 802a9c6:	5c41      	ldrb	r1, [r0, r1]
 802a9c8:	78ae      	ldrb	r6, [r5, #2]
 802a9ca:	7868      	ldrb	r0, [r5, #1]
 802a9cc:	960c      	str	r6, [sp, #48]	; 0x30
 802a9ce:	f895 9003 	ldrb.w	r9, [r5, #3]
 802a9d2:	f895 8004 	ldrb.w	r8, [r5, #4]
 802a9d6:	f895 b005 	ldrb.w	fp, [r5, #5]
 802a9da:	b192      	cbz	r2, 802aa02 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802a9dc:	2603      	movs	r6, #3
 802a9de:	f06f 0304 	mvn.w	r3, #4
 802a9e2:	3505      	adds	r5, #5
 802a9e4:	fb17 3706 	smlabb	r7, r7, r6, r3
 802a9e8:	19ee      	adds	r6, r5, r7
 802a9ea:	5ded      	ldrb	r5, [r5, r7]
 802a9ec:	9513      	str	r5, [sp, #76]	; 0x4c
 802a9ee:	7875      	ldrb	r5, [r6, #1]
 802a9f0:	9515      	str	r5, [sp, #84]	; 0x54
 802a9f2:	78b5      	ldrb	r5, [r6, #2]
 802a9f4:	9517      	str	r5, [sp, #92]	; 0x5c
 802a9f6:	78f5      	ldrb	r5, [r6, #3]
 802a9f8:	9514      	str	r5, [sp, #80]	; 0x50
 802a9fa:	7935      	ldrb	r5, [r6, #4]
 802a9fc:	9516      	str	r5, [sp, #88]	; 0x58
 802a9fe:	7975      	ldrb	r5, [r6, #5]
 802aa00:	9518      	str	r5, [sp, #96]	; 0x60
 802aa02:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 802aa06:	b292      	uxth	r2, r2
 802aa08:	f10c 3cff 	add.w	ip, ip, #4294967295
 802aa0c:	fb03 f502 	mul.w	r5, r3, r2
 802aa10:	011b      	lsls	r3, r3, #4
 802aa12:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 802aa16:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 802aa1a:	1b5b      	subs	r3, r3, r5
 802aa1c:	b292      	uxth	r2, r2
 802aa1e:	b29b      	uxth	r3, r3
 802aa20:	1ab6      	subs	r6, r6, r2
 802aa22:	fb03 f909 	mul.w	r9, r3, r9
 802aa26:	b2b6      	uxth	r6, r6
 802aa28:	fb03 f808 	mul.w	r8, r3, r8
 802aa2c:	fb03 fb0b 	mul.w	fp, r3, fp
 802aa30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aa32:	fb06 9901 	mla	r9, r6, r1, r9
 802aa36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802aa38:	fb06 8800 	mla	r8, r6, r0, r8
 802aa3c:	fb02 9901 	mla	r9, r2, r1, r9
 802aa40:	9914      	ldr	r1, [sp, #80]	; 0x50
 802aa42:	fb06 bb03 	mla	fp, r6, r3, fp
 802aa46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802aa48:	fb05 9901 	mla	r9, r5, r1, r9
 802aa4c:	9915      	ldr	r1, [sp, #84]	; 0x54
 802aa4e:	fb02 bb03 	mla	fp, r2, r3, fp
 802aa52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802aa54:	fb02 8801 	mla	r8, r2, r1, r8
 802aa58:	9916      	ldr	r1, [sp, #88]	; 0x58
 802aa5a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802aa5e:	fb05 8801 	mla	r8, r5, r1, r8
 802aa62:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802aa66:	ea49 0908 	orr.w	r9, r9, r8
 802aa6a:	fb05 b803 	mla	r8, r5, r3, fp
 802aa6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802aa70:	ea4f 2808 	mov.w	r8, r8, lsl #8
 802aa74:	441c      	add	r4, r3
 802aa76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802aa78:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 802aa7c:	449a      	add	sl, r3
 802aa7e:	ea49 0508 	orr.w	r5, r9, r8
 802aa82:	f84e 5b04 	str.w	r5, [lr], #4
 802aa86:	e72d      	b.n	802a8e4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802aa88:	b01b      	add	sp, #108	; 0x6c
 802aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aa8e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 802aa8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa92:	b085      	sub	sp, #20
 802aa94:	6808      	ldr	r0, [r1, #0]
 802aa96:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	; 0x3c
 802aa9a:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 802aa9e:	fb08 6403 	mla	r4, r8, r3, r6
 802aaa2:	f1b8 0f00 	cmp.w	r8, #0
 802aaa6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 802aaaa:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 802aaae:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 802aab2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 802aab6:	f2c0 80fc 	blt.w	802acb2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802aaba:	45c2      	cmp	sl, r8
 802aabc:	f340 80f9 	ble.w	802acb2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 802aac0:	2e00      	cmp	r6, #0
 802aac2:	f2c0 80f4 	blt.w	802acae <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802aac6:	42b3      	cmp	r3, r6
 802aac8:	f340 80f1 	ble.w	802acae <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 802aacc:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 802aad0:	1c72      	adds	r2, r6, #1
 802aad2:	f100 80ef 	bmi.w	802acb4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802aad6:	4293      	cmp	r3, r2
 802aad8:	f340 80ec 	ble.w	802acb4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802aadc:	f1bc 0f00 	cmp.w	ip, #0
 802aae0:	f000 80e8 	beq.w	802acb4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 802aae4:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802aae8:	f118 0801 	adds.w	r8, r8, #1
 802aaec:	f100 80e6 	bmi.w	802acbc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802aaf0:	45c2      	cmp	sl, r8
 802aaf2:	f340 80e3 	ble.w	802acbc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802aaf6:	f1be 0f00 	cmp.w	lr, #0
 802aafa:	f000 80df 	beq.w	802acbc <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 802aafe:	2e00      	cmp	r6, #0
 802ab00:	f2c0 80da 	blt.w	802acb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802ab04:	42b3      	cmp	r3, r6
 802ab06:	f340 80d7 	ble.w	802acb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 802ab0a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 802ab0e:	3601      	adds	r6, #1
 802ab10:	d407      	bmi.n	802ab22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802ab12:	42b3      	cmp	r3, r6
 802ab14:	dd05      	ble.n	802ab22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802ab16:	f1bc 0f00 	cmp.w	ip, #0
 802ab1a:	d002      	beq.n	802ab22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802ab1c:	3301      	adds	r3, #1
 802ab1e:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 802ab22:	fa1f fc8c 	uxth.w	ip, ip
 802ab26:	fa1f f38e 	uxth.w	r3, lr
 802ab2a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 802ab2e:	fb03 fe0c 	mul.w	lr, r3, ip
 802ab32:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802ab36:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802ab3a:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 802ab3e:	ebac 060e 	sub.w	r6, ip, lr
 802ab42:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 802ab46:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802ab4a:	b29b      	uxth	r3, r3
 802ab4c:	b2b6      	uxth	r6, r6
 802ab4e:	ebac 0c03 	sub.w	ip, ip, r3
 802ab52:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802ab56:	9601      	str	r6, [sp, #4]
 802ab58:	fa1f f68c 	uxth.w	r6, ip
 802ab5c:	9602      	str	r6, [sp, #8]
 802ab5e:	9e01      	ldr	r6, [sp, #4]
 802ab60:	fb06 fc0a 	mul.w	ip, r6, sl
 802ab64:	9e02      	ldr	r6, [sp, #8]
 802ab66:	fb06 cc0b 	mla	ip, r6, fp, ip
 802ab6a:	fb03 cc09 	mla	ip, r3, r9, ip
 802ab6e:	fb0e cc08 	mla	ip, lr, r8, ip
 802ab72:	f3cc 2607 	ubfx	r6, ip, #8, #8
 802ab76:	9603      	str	r6, [sp, #12]
 802ab78:	2e00      	cmp	r6, #0
 802ab7a:	f000 8095 	beq.w	802aca8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802ab7e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802ab82:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802ab86:	fb0b fc0c 	mul.w	ip, fp, ip
 802ab8a:	fb0b f505 	mul.w	r5, fp, r5
 802ab8e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802ab92:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802ab96:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802ab9a:	44dc      	add	ip, fp
 802ab9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aba0:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 802aba4:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802aba8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802abac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802abb0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802abb4:	fb0a fc0c 	mul.w	ip, sl, ip
 802abb8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802abbc:	fb0a fa04 	mul.w	sl, sl, r4
 802abc0:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802abc4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802abc8:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 802abcc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802abd0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802abd4:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 802abd8:	4465      	add	r5, ip
 802abda:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 802abde:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802abe2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802abe6:	fb09 fc0c 	mul.w	ip, r9, ip
 802abea:	0a2d      	lsrs	r5, r5, #8
 802abec:	fb09 f902 	mul.w	r9, r9, r2
 802abf0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802abf4:	ea4f 241c 	mov.w	r4, ip, lsr #8
 802abf8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802abfc:	f509 7280 	add.w	r2, r9, #256	; 0x100
 802ac00:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802ac04:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ac08:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 802ac0c:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 802ac10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802ac14:	4464      	add	r4, ip
 802ac16:	fb08 f202 	mul.w	r2, r8, r2
 802ac1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802ac1e:	fb08 f800 	mul.w	r8, r8, r0
 802ac22:	0a24      	lsrs	r4, r4, #8
 802ac24:	0a10      	lsrs	r0, r2, #8
 802ac26:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 802ac2a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ac2e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802ac32:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802ac36:	4402      	add	r2, r0
 802ac38:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802ac3c:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802ac40:	9801      	ldr	r0, [sp, #4]
 802ac42:	0a12      	lsrs	r2, r2, #8
 802ac44:	4345      	muls	r5, r0
 802ac46:	9802      	ldr	r0, [sp, #8]
 802ac48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802ac4c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802ac50:	fb06 5500 	mla	r5, r6, r0, r5
 802ac54:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802ac58:	fb02 520e 	mla	r2, r2, lr, r5
 802ac5c:	fb04 2403 	mla	r4, r4, r3, r2
 802ac60:	9a01      	ldr	r2, [sp, #4]
 802ac62:	fb02 f60a 	mul.w	r6, r2, sl
 802ac66:	0a24      	lsrs	r4, r4, #8
 802ac68:	9a03      	ldr	r2, [sp, #12]
 802ac6a:	fb00 660b 	mla	r6, r0, fp, r6
 802ac6e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ac72:	fb07 fc02 	mul.w	ip, r7, r2
 802ac76:	fb0e 6e08 	mla	lr, lr, r8, r6
 802ac7a:	fb03 e309 	mla	r3, r3, r9, lr
 802ac7e:	0a1b      	lsrs	r3, r3, #8
 802ac80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ac84:	4323      	orrs	r3, r4
 802ac86:	f10c 0401 	add.w	r4, ip, #1
 802ac8a:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 802ac8e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802ac92:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802ac96:	1224      	asrs	r4, r4, #8
 802ac98:	b2d5      	uxtb	r5, r2
 802ac9a:	2cff      	cmp	r4, #255	; 0xff
 802ac9c:	b2c6      	uxtb	r6, r0
 802ac9e:	d10f      	bne.n	802acc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 802aca0:	700b      	strb	r3, [r1, #0]
 802aca2:	7048      	strb	r0, [r1, #1]
 802aca4:	708a      	strb	r2, [r1, #2]
 802aca6:	70cc      	strb	r4, [r1, #3]
 802aca8:	b005      	add	sp, #20
 802acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acae:	4605      	mov	r5, r0
 802acb0:	e70e      	b.n	802aad0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 802acb2:	4605      	mov	r5, r0
 802acb4:	4604      	mov	r4, r0
 802acb6:	e717      	b.n	802aae8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 802acb8:	4602      	mov	r2, r0
 802acba:	e728      	b.n	802ab0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 802acbc:	4602      	mov	r2, r0
 802acbe:	e730      	b.n	802ab22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 802acc0:	b2e2      	uxtb	r2, r4
 802acc2:	2c00      	cmp	r4, #0
 802acc4:	d0f0      	beq.n	802aca8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 802acc6:	78cc      	ldrb	r4, [r1, #3]
 802acc8:	b2db      	uxtb	r3, r3
 802acca:	fb17 f606 	smulbb	r6, r7, r6
 802acce:	fb02 fc04 	mul.w	ip, r2, r4
 802acd2:	4422      	add	r2, r4
 802acd4:	f10c 0001 	add.w	r0, ip, #1
 802acd8:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802acdc:	1200      	asrs	r0, r0, #8
 802acde:	1a24      	subs	r4, r4, r0
 802ace0:	1a12      	subs	r2, r2, r0
 802ace2:	7808      	ldrb	r0, [r1, #0]
 802ace4:	b2d2      	uxtb	r2, r2
 802ace6:	4360      	muls	r0, r4
 802ace8:	70ca      	strb	r2, [r1, #3]
 802acea:	fb07 0303 	mla	r3, r7, r3, r0
 802acee:	7848      	ldrb	r0, [r1, #1]
 802acf0:	fb17 f705 	smulbb	r7, r7, r5
 802acf4:	fb04 6000 	mla	r0, r4, r0, r6
 802acf8:	fb93 f3f2 	sdiv	r3, r3, r2
 802acfc:	2bff      	cmp	r3, #255	; 0xff
 802acfe:	bfd6      	itet	le
 802ad00:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802ad04:	23ff      	movgt	r3, #255	; 0xff
 802ad06:	b2db      	uxtble	r3, r3
 802ad08:	fb90 f0f2 	sdiv	r0, r0, r2
 802ad0c:	700b      	strb	r3, [r1, #0]
 802ad0e:	28ff      	cmp	r0, #255	; 0xff
 802ad10:	788b      	ldrb	r3, [r1, #2]
 802ad12:	bfd4      	ite	le
 802ad14:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802ad18:	20ff      	movgt	r0, #255	; 0xff
 802ad1a:	fb04 7303 	mla	r3, r4, r3, r7
 802ad1e:	bfd8      	it	le
 802ad20:	b2c0      	uxtble	r0, r0
 802ad22:	fb93 f3f2 	sdiv	r3, r3, r2
 802ad26:	2bff      	cmp	r3, #255	; 0xff
 802ad28:	7048      	strb	r0, [r1, #1]
 802ad2a:	bfd6      	itet	le
 802ad2c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802ad30:	23ff      	movgt	r3, #255	; 0xff
 802ad32:	b2db      	uxtble	r3, r3
 802ad34:	708b      	strb	r3, [r1, #2]
 802ad36:	e7b7      	b.n	802aca8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

0802ad38 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad3c:	b09b      	sub	sp, #108	; 0x6c
 802ad3e:	9218      	str	r2, [sp, #96]	; 0x60
 802ad40:	9306      	str	r3, [sp, #24]
 802ad42:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802ad44:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 802ad48:	9019      	str	r0, [sp, #100]	; 0x64
 802ad4a:	9116      	str	r1, [sp, #88]	; 0x58
 802ad4c:	6850      	ldr	r0, [r2, #4]
 802ad4e:	9307      	str	r3, [sp, #28]
 802ad50:	6812      	ldr	r2, [r2, #0]
 802ad52:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802ad56:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802ad5a:	fb00 1303 	mla	r3, r0, r3, r1
 802ad5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802ad62:	930a      	str	r3, [sp, #40]	; 0x28
 802ad64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	930f      	str	r3, [sp, #60]	; 0x3c
 802ad6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	dc03      	bgt.n	802ad78 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802ad70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802ad72:	2b00      	cmp	r3, #0
 802ad74:	f340 83b3 	ble.w	802b4de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802ad78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ad7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802ad7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802ad82:	1e48      	subs	r0, r1, #1
 802ad84:	1e57      	subs	r7, r2, #1
 802ad86:	9b06      	ldr	r3, [sp, #24]
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	f340 8167 	ble.w	802b05c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802ad8e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802ad92:	ea4f 4326 	mov.w	r3, r6, asr #16
 802ad96:	d406      	bmi.n	802ada6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802ad98:	4584      	cmp	ip, r0
 802ad9a:	da04      	bge.n	802ada6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802ad9c:	2b00      	cmp	r3, #0
 802ad9e:	db02      	blt.n	802ada6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802ada0:	42bb      	cmp	r3, r7
 802ada2:	f2c0 815c 	blt.w	802b05e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802ada6:	f11c 0c01 	adds.w	ip, ip, #1
 802adaa:	f100 814c 	bmi.w	802b046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802adae:	4561      	cmp	r1, ip
 802adb0:	f2c0 8149 	blt.w	802b046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802adb4:	3301      	adds	r3, #1
 802adb6:	f100 8146 	bmi.w	802b046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802adba:	429a      	cmp	r2, r3
 802adbc:	f2c0 8143 	blt.w	802b046 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802adc0:	9b06      	ldr	r3, [sp, #24]
 802adc2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802adc4:	9317      	str	r3, [sp, #92]	; 0x5c
 802adc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802adc8:	2b00      	cmp	r3, #0
 802adca:	f340 8165 	ble.w	802b098 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802adce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802add0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802add4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802add6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802adda:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802adde:	1422      	asrs	r2, r4, #16
 802ade0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ade4:	689b      	ldr	r3, [r3, #8]
 802ade6:	f100 81e7 	bmi.w	802b1b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802adea:	f103 38ff 	add.w	r8, r3, #4294967295
 802adee:	4542      	cmp	r2, r8
 802adf0:	f280 81e2 	bge.w	802b1b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802adf4:	f1bc 0f00 	cmp.w	ip, #0
 802adf8:	f2c0 81de 	blt.w	802b1b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802adfc:	f10e 38ff 	add.w	r8, lr, #4294967295
 802ae00:	45c4      	cmp	ip, r8
 802ae02:	f280 81d9 	bge.w	802b1b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802ae06:	b21b      	sxth	r3, r3
 802ae08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802ae0a:	fb0c 2203 	mla	r2, ip, r3, r2
 802ae0e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802ae12:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802ae16:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802ae1a:	2800      	cmp	r0, #0
 802ae1c:	f000 8182 	beq.w	802b124 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 802ae20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802ae24:	950b      	str	r5, [sp, #44]	; 0x2c
 802ae26:	0e2d      	lsrs	r5, r5, #24
 802ae28:	9512      	str	r5, [sp, #72]	; 0x48
 802ae2a:	b181      	cbz	r1, 802ae4e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802ae2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802ae30:	3b01      	subs	r3, #1
 802ae32:	009b      	lsls	r3, r3, #2
 802ae34:	3304      	adds	r3, #4
 802ae36:	eb08 0c03 	add.w	ip, r8, r3
 802ae3a:	f858 3003 	ldr.w	r3, [r8, r3]
 802ae3e:	9308      	str	r3, [sp, #32]
 802ae40:	0e1b      	lsrs	r3, r3, #24
 802ae42:	9310      	str	r3, [sp, #64]	; 0x40
 802ae44:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802ae48:	930c      	str	r3, [sp, #48]	; 0x30
 802ae4a:	0e1b      	lsrs	r3, r3, #24
 802ae4c:	9313      	str	r3, [sp, #76]	; 0x4c
 802ae4e:	b280      	uxth	r0, r0
 802ae50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802ae52:	b289      	uxth	r1, r1
 802ae54:	fb00 f901 	mul.w	r9, r0, r1
 802ae58:	0100      	lsls	r0, r0, #4
 802ae5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802ae5e:	eba0 0809 	sub.w	r8, r0, r9
 802ae62:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802ae66:	9812      	ldr	r0, [sp, #72]	; 0x48
 802ae68:	b289      	uxth	r1, r1
 802ae6a:	fa1f f888 	uxth.w	r8, r8
 802ae6e:	1a5b      	subs	r3, r3, r1
 802ae70:	fb08 f000 	mul.w	r0, r8, r0
 802ae74:	b29b      	uxth	r3, r3
 802ae76:	fb03 000e 	mla	r0, r3, lr, r0
 802ae7a:	fb01 0005 	mla	r0, r1, r5, r0
 802ae7e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802ae80:	fb09 0005 	mla	r0, r9, r5, r0
 802ae84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802ae88:	2800      	cmp	r0, #0
 802ae8a:	f000 80d3 	beq.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802ae8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802ae92:	d01b      	beq.n	802aecc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 802ae94:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802ae98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802ae9c:	fb0e fa0a 	mul.w	sl, lr, sl
 802aea0:	fb0e fe02 	mul.w	lr, lr, r2
 802aea4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802aea8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802aeac:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802aeb0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802aeb4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802aeb8:	4452      	add	r2, sl
 802aeba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802aebe:	0a12      	lsrs	r2, r2, #8
 802aec0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802aec4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802aec8:	ea42 020c 	orr.w	r2, r2, ip
 802aecc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802aece:	2dff      	cmp	r5, #255	; 0xff
 802aed0:	d021      	beq.n	802af16 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802aed2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802aed4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802aed8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802aeda:	fb05 fb0b 	mul.w	fp, r5, fp
 802aede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802aee0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802aee4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802aee6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802aeea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802aeee:	fb05 fa0a 	mul.w	sl, r5, sl
 802aef2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802aef6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802aefa:	44de      	add	lr, fp
 802aefc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802af00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802af08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802af0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802af10:	ea4e 050a 	orr.w	r5, lr, sl
 802af14:	950b      	str	r5, [sp, #44]	; 0x2c
 802af16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802af18:	2dff      	cmp	r5, #255	; 0xff
 802af1a:	d021      	beq.n	802af60 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802af1c:	9d08      	ldr	r5, [sp, #32]
 802af1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802af22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802af24:	fb05 fb0b 	mul.w	fp, r5, fp
 802af28:	9d08      	ldr	r5, [sp, #32]
 802af2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802af2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802af30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802af34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802af38:	fb05 fa0a 	mul.w	sl, r5, sl
 802af3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802af40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802af44:	44de      	add	lr, fp
 802af46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802af4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802af52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802af56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802af5a:	ea4e 050a 	orr.w	r5, lr, sl
 802af5e:	9508      	str	r5, [sp, #32]
 802af60:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802af62:	2dff      	cmp	r5, #255	; 0xff
 802af64:	d021      	beq.n	802afaa <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802af66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802af68:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802af6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802af6e:	fb05 fb0b 	mul.w	fp, r5, fp
 802af72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802af74:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802af78:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802af7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802af7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802af82:	fb05 fa0a 	mul.w	sl, r5, sl
 802af86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802af8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802af8e:	44de      	add	lr, fp
 802af90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802af94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802af98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802af9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802afa0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802afa4:	ea4e 050a 	orr.w	r5, lr, sl
 802afa8:	950c      	str	r5, [sp, #48]	; 0x30
 802afaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802afac:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802afb0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802afb4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802afb8:	9d08      	ldr	r5, [sp, #32]
 802afba:	fb08 fc0c 	mul.w	ip, r8, ip
 802afbe:	fb03 cc0e 	mla	ip, r3, lr, ip
 802afc2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802afc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802afc8:	fb01 cc0e 	mla	ip, r1, lr, ip
 802afcc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802afd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802afd2:	fb09 cc0e 	mla	ip, r9, lr, ip
 802afd6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802afda:	fb08 f80e 	mul.w	r8, r8, lr
 802afde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802afe2:	fb03 8202 	mla	r2, r3, r2, r8
 802afe6:	9b08      	ldr	r3, [sp, #32]
 802afe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802afec:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802aff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802aff2:	fb01 220a 	mla	r2, r1, sl, r2
 802aff6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802affa:	9b07      	ldr	r3, [sp, #28]
 802affc:	fb09 2901 	mla	r9, r9, r1, r2
 802b000:	4358      	muls	r0, r3
 802b002:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b006:	1c43      	adds	r3, r0, #1
 802b008:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802b00c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b010:	ea4c 0c09 	orr.w	ip, ip, r9
 802b014:	1200      	asrs	r0, r0, #8
 802b016:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802b01a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802b01e:	28ff      	cmp	r0, #255	; 0xff
 802b020:	b2d9      	uxtb	r1, r3
 802b022:	fa5f fe82 	uxtb.w	lr, r2
 802b026:	f040 8086 	bne.w	802b136 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802b02a:	f887 c000 	strb.w	ip, [r7]
 802b02e:	707a      	strb	r2, [r7, #1]
 802b030:	70bb      	strb	r3, [r7, #2]
 802b032:	70f8      	strb	r0, [r7, #3]
 802b034:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b036:	3704      	adds	r7, #4
 802b038:	441c      	add	r4, r3
 802b03a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b03c:	441e      	add	r6, r3
 802b03e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802b040:	3b01      	subs	r3, #1
 802b042:	9317      	str	r3, [sp, #92]	; 0x5c
 802b044:	e6bf      	b.n	802adc6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b046:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b048:	441c      	add	r4, r3
 802b04a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b04c:	441e      	add	r6, r3
 802b04e:	9b06      	ldr	r3, [sp, #24]
 802b050:	3b01      	subs	r3, #1
 802b052:	9306      	str	r3, [sp, #24]
 802b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b056:	3304      	adds	r3, #4
 802b058:	930a      	str	r3, [sp, #40]	; 0x28
 802b05a:	e694      	b.n	802ad86 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802b05c:	d023      	beq.n	802b0a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802b05e:	9b06      	ldr	r3, [sp, #24]
 802b060:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802b062:	3b01      	subs	r3, #1
 802b064:	fb00 4003 	mla	r0, r0, r3, r4
 802b068:	1400      	asrs	r0, r0, #16
 802b06a:	f53f aea9 	bmi.w	802adc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802b06e:	3901      	subs	r1, #1
 802b070:	4288      	cmp	r0, r1
 802b072:	f6bf aea5 	bge.w	802adc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802b076:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802b078:	fb01 6303 	mla	r3, r1, r3, r6
 802b07c:	141b      	asrs	r3, r3, #16
 802b07e:	f53f ae9f 	bmi.w	802adc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802b082:	3a01      	subs	r2, #1
 802b084:	4293      	cmp	r3, r2
 802b086:	f6bf ae9b 	bge.w	802adc0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802b08a:	f8dd b018 	ldr.w	fp, [sp, #24]
 802b08e:	990a      	ldr	r1, [sp, #40]	; 0x28
 802b090:	f1bb 0f00 	cmp.w	fp, #0
 802b094:	f300 80ae 	bgt.w	802b1f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 802b098:	9b06      	ldr	r3, [sp, #24]
 802b09a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802b09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b0a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 802b0a4:	930a      	str	r3, [sp, #40]	; 0x28
 802b0a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802b0a8:	2b00      	cmp	r3, #0
 802b0aa:	f340 8218 	ble.w	802b4de <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802b0ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b0b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b0b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b0b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b0bc:	eef0 6a62 	vmov.f32	s13, s5
 802b0c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b0c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b0c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b0cc:	ee16 4a90 	vmov	r4, s13
 802b0d0:	eef0 6a43 	vmov.f32	s13, s6
 802b0d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b0d8:	ee16 6a90 	vmov	r6, s13
 802b0dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b0e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b0e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b0e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b0ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b0f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b0f4:	ee12 2a90 	vmov	r2, s5
 802b0f8:	eef0 2a47 	vmov.f32	s5, s14
 802b0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 802b100:	ee13 2a10 	vmov	r2, s6
 802b104:	9327      	str	r3, [sp, #156]	; 0x9c
 802b106:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b108:	eeb0 3a67 	vmov.f32	s6, s15
 802b10c:	fb92 f3f3 	sdiv	r3, r2, r3
 802b110:	9328      	str	r3, [sp, #160]	; 0xa0
 802b112:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802b114:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802b116:	3b01      	subs	r3, #1
 802b118:	9316      	str	r3, [sp, #88]	; 0x58
 802b11a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b11c:	bf08      	it	eq
 802b11e:	4613      	moveq	r3, r2
 802b120:	9306      	str	r3, [sp, #24]
 802b122:	e622      	b.n	802ad6a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802b124:	2900      	cmp	r1, #0
 802b126:	f43f ae92 	beq.w	802ae4e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802b12a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802b12e:	9308      	str	r3, [sp, #32]
 802b130:	0e1b      	lsrs	r3, r3, #24
 802b132:	9310      	str	r3, [sp, #64]	; 0x40
 802b134:	e68b      	b.n	802ae4e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802b136:	b2c3      	uxtb	r3, r0
 802b138:	2800      	cmp	r0, #0
 802b13a:	f43f af7b 	beq.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b13e:	78f8      	ldrb	r0, [r7, #3]
 802b140:	fa5f fc8c 	uxtb.w	ip, ip
 802b144:	9d07      	ldr	r5, [sp, #28]
 802b146:	fb03 f800 	mul.w	r8, r3, r0
 802b14a:	4403      	add	r3, r0
 802b14c:	f108 0201 	add.w	r2, r8, #1
 802b150:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802b154:	1212      	asrs	r2, r2, #8
 802b156:	1a80      	subs	r0, r0, r2
 802b158:	1a9b      	subs	r3, r3, r2
 802b15a:	783a      	ldrb	r2, [r7, #0]
 802b15c:	b2db      	uxtb	r3, r3
 802b15e:	4342      	muls	r2, r0
 802b160:	70fb      	strb	r3, [r7, #3]
 802b162:	fb05 220c 	mla	r2, r5, ip, r2
 802b166:	9d07      	ldr	r5, [sp, #28]
 802b168:	fb92 f2f3 	sdiv	r2, r2, r3
 802b16c:	fb15 fe0e 	smulbb	lr, r5, lr
 802b170:	2aff      	cmp	r2, #255	; 0xff
 802b172:	9d07      	ldr	r5, [sp, #28]
 802b174:	bfd4      	ite	le
 802b176:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b17a:	22ff      	movgt	r2, #255	; 0xff
 802b17c:	fb15 f101 	smulbb	r1, r5, r1
 802b180:	bfd8      	it	le
 802b182:	b2d2      	uxtble	r2, r2
 802b184:	703a      	strb	r2, [r7, #0]
 802b186:	787a      	ldrb	r2, [r7, #1]
 802b188:	fb00 e202 	mla	r2, r0, r2, lr
 802b18c:	fb92 f2f3 	sdiv	r2, r2, r3
 802b190:	2aff      	cmp	r2, #255	; 0xff
 802b192:	bfd6      	itet	le
 802b194:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b198:	22ff      	movgt	r2, #255	; 0xff
 802b19a:	b2d2      	uxtble	r2, r2
 802b19c:	707a      	strb	r2, [r7, #1]
 802b19e:	78ba      	ldrb	r2, [r7, #2]
 802b1a0:	fb00 1202 	mla	r2, r0, r2, r1
 802b1a4:	fb92 f2f3 	sdiv	r2, r2, r3
 802b1a8:	2aff      	cmp	r2, #255	; 0xff
 802b1aa:	bfd6      	itet	le
 802b1ac:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b1b0:	22ff      	movgt	r2, #255	; 0xff
 802b1b2:	b2d2      	uxtble	r2, r2
 802b1b4:	70ba      	strb	r2, [r7, #2]
 802b1b6:	e73d      	b.n	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1b8:	f112 0801 	adds.w	r8, r2, #1
 802b1bc:	f53f af3a 	bmi.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1c0:	4543      	cmp	r3, r8
 802b1c2:	f6ff af37 	blt.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1c6:	f11c 0801 	adds.w	r8, ip, #1
 802b1ca:	f53f af33 	bmi.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1ce:	45c6      	cmp	lr, r8
 802b1d0:	f6ff af30 	blt.w	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1d4:	9d07      	ldr	r5, [sp, #28]
 802b1d6:	b21b      	sxth	r3, r3
 802b1d8:	9201      	str	r2, [sp, #4]
 802b1da:	fa0f f28e 	sxth.w	r2, lr
 802b1de:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802b1e2:	e9cd c002 	strd	ip, r0, [sp, #8]
 802b1e6:	9200      	str	r2, [sp, #0]
 802b1e8:	4639      	mov	r1, r7
 802b1ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b1ec:	9819      	ldr	r0, [sp, #100]	; 0x64
 802b1ee:	f7ff fc4e 	bl	802aa8e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 802b1f2:	e71f      	b.n	802b034 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802b1f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802b1f6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802b1fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b1fc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802b200:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802b204:	1433      	asrs	r3, r6, #16
 802b206:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802b20a:	fb00 c303 	mla	r3, r0, r3, ip
 802b20e:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 802b212:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802b216:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802b21a:	2a00      	cmp	r2, #0
 802b21c:	f000 8111 	beq.w	802b442 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802b220:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802b224:	950d      	str	r5, [sp, #52]	; 0x34
 802b226:	0e2d      	lsrs	r5, r5, #24
 802b228:	9514      	str	r5, [sp, #80]	; 0x50
 802b22a:	b187      	cbz	r7, 802b24e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b22c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 802b230:	3801      	subs	r0, #1
 802b232:	0080      	lsls	r0, r0, #2
 802b234:	3004      	adds	r0, #4
 802b236:	eb0c 0800 	add.w	r8, ip, r0
 802b23a:	f85c 0000 	ldr.w	r0, [ip, r0]
 802b23e:	9009      	str	r0, [sp, #36]	; 0x24
 802b240:	0e00      	lsrs	r0, r0, #24
 802b242:	9011      	str	r0, [sp, #68]	; 0x44
 802b244:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802b248:	900e      	str	r0, [sp, #56]	; 0x38
 802b24a:	0e00      	lsrs	r0, r0, #24
 802b24c:	9015      	str	r0, [sp, #84]	; 0x54
 802b24e:	b292      	uxth	r2, r2
 802b250:	9814      	ldr	r0, [sp, #80]	; 0x50
 802b252:	b2bf      	uxth	r7, r7
 802b254:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b256:	fb02 f907 	mul.w	r9, r2, r7
 802b25a:	0112      	lsls	r2, r2, #4
 802b25c:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 802b260:	eba2 0809 	sub.w	r8, r2, r9
 802b264:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802b268:	b2bf      	uxth	r7, r7
 802b26a:	fa1f f888 	uxth.w	r8, r8
 802b26e:	1bd2      	subs	r2, r2, r7
 802b270:	fb08 f000 	mul.w	r0, r8, r0
 802b274:	b292      	uxth	r2, r2
 802b276:	fb02 000e 	mla	r0, r2, lr, r0
 802b27a:	fb07 0005 	mla	r0, r7, r5, r0
 802b27e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b280:	fb09 0005 	mla	r0, r9, r5, r0
 802b284:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b288:	2800      	cmp	r0, #0
 802b28a:	f000 80d2 	beq.w	802b432 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b28e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802b292:	d01b      	beq.n	802b2cc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 802b294:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802b298:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b29c:	fb0e fa0a 	mul.w	sl, lr, sl
 802b2a0:	fb0e fe03 	mul.w	lr, lr, r3
 802b2a4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802b2a8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802b2ac:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802b2b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b2b4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802b2b8:	4453      	add	r3, sl
 802b2ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b2be:	0a1b      	lsrs	r3, r3, #8
 802b2c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b2c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b2c8:	ea43 030c 	orr.w	r3, r3, ip
 802b2cc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b2ce:	2dff      	cmp	r5, #255	; 0xff
 802b2d0:	d021      	beq.n	802b316 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 802b2d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b2d4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b2d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b2da:	fb05 fc0c 	mul.w	ip, r5, ip
 802b2de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b2e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b2e4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b2e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b2ea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b2ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b2f2:	fb05 fa0a 	mul.w	sl, r5, sl
 802b2f6:	44e6      	add	lr, ip
 802b2f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b2fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b300:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b304:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b30c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b310:	ea4e 050a 	orr.w	r5, lr, sl
 802b314:	950d      	str	r5, [sp, #52]	; 0x34
 802b316:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b318:	2dff      	cmp	r5, #255	; 0xff
 802b31a:	d021      	beq.n	802b360 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802b31c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b31e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b322:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b324:	fb05 fc0c 	mul.w	ip, r5, ip
 802b328:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b32a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b32e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b332:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b334:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b338:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b33c:	fb05 fa0a 	mul.w	sl, r5, sl
 802b340:	44e6      	add	lr, ip
 802b342:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b346:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b34a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b34e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b352:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b356:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b35a:	ea4e 050a 	orr.w	r5, lr, sl
 802b35e:	9509      	str	r5, [sp, #36]	; 0x24
 802b360:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b362:	2dff      	cmp	r5, #255	; 0xff
 802b364:	d021      	beq.n	802b3aa <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 802b366:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b368:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b36c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b36e:	fb05 fc0c 	mul.w	ip, r5, ip
 802b372:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b374:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802b378:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b37c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b37e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b382:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b386:	fb05 fa0a 	mul.w	sl, r5, sl
 802b38a:	44e6      	add	lr, ip
 802b38c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b390:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b394:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b398:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b39c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b3a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b3a4:	ea4e 050a 	orr.w	r5, lr, sl
 802b3a8:	950e      	str	r5, [sp, #56]	; 0x38
 802b3aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b3ac:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802b3b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b3b4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b3b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b3ba:	fb08 fc0c 	mul.w	ip, r8, ip
 802b3be:	fb02 cc0e 	mla	ip, r2, lr, ip
 802b3c2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802b3c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b3c8:	fb07 cc0e 	mla	ip, r7, lr, ip
 802b3cc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802b3d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b3d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 802b3d6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802b3da:	fb08 f80e 	mul.w	r8, r8, lr
 802b3de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b3e2:	fb02 8303 	mla	r3, r2, r3, r8
 802b3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b3e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b3ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802b3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b3f2:	fb07 330a 	mla	r3, r7, sl, r3
 802b3f6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802b3fa:	fb09 3e0e 	mla	lr, r9, lr, r3
 802b3fe:	9b07      	ldr	r3, [sp, #28]
 802b400:	4358      	muls	r0, r3
 802b402:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b406:	1c43      	adds	r3, r0, #1
 802b408:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802b40c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b410:	ea4c 0c0e 	orr.w	ip, ip, lr
 802b414:	1200      	asrs	r0, r0, #8
 802b416:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802b41a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802b41e:	28ff      	cmp	r0, #255	; 0xff
 802b420:	b2df      	uxtb	r7, r3
 802b422:	fa5f fe82 	uxtb.w	lr, r2
 802b426:	d115      	bne.n	802b454 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 802b428:	f881 c000 	strb.w	ip, [r1]
 802b42c:	704a      	strb	r2, [r1, #1]
 802b42e:	708b      	strb	r3, [r1, #2]
 802b430:	70c8      	strb	r0, [r1, #3]
 802b432:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802b434:	3104      	adds	r1, #4
 802b436:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b43a:	441c      	add	r4, r3
 802b43c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b43e:	441e      	add	r6, r3
 802b440:	e626      	b.n	802b090 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b442:	2f00      	cmp	r7, #0
 802b444:	f43f af03 	beq.w	802b24e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b448:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 802b44c:	9009      	str	r0, [sp, #36]	; 0x24
 802b44e:	0e00      	lsrs	r0, r0, #24
 802b450:	9011      	str	r0, [sp, #68]	; 0x44
 802b452:	e6fc      	b.n	802b24e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802b454:	b2c3      	uxtb	r3, r0
 802b456:	2800      	cmp	r0, #0
 802b458:	d0eb      	beq.n	802b432 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b45a:	78c8      	ldrb	r0, [r1, #3]
 802b45c:	fa5f fc8c 	uxtb.w	ip, ip
 802b460:	9d07      	ldr	r5, [sp, #28]
 802b462:	fb03 f800 	mul.w	r8, r3, r0
 802b466:	4403      	add	r3, r0
 802b468:	f108 0201 	add.w	r2, r8, #1
 802b46c:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 802b470:	1212      	asrs	r2, r2, #8
 802b472:	1a9b      	subs	r3, r3, r2
 802b474:	1a82      	subs	r2, r0, r2
 802b476:	7808      	ldrb	r0, [r1, #0]
 802b478:	b2db      	uxtb	r3, r3
 802b47a:	4350      	muls	r0, r2
 802b47c:	70cb      	strb	r3, [r1, #3]
 802b47e:	fb05 0c0c 	mla	ip, r5, ip, r0
 802b482:	9d07      	ldr	r5, [sp, #28]
 802b484:	7848      	ldrb	r0, [r1, #1]
 802b486:	fb15 fe0e 	smulbb	lr, r5, lr
 802b48a:	9d07      	ldr	r5, [sp, #28]
 802b48c:	fb9c fcf3 	sdiv	ip, ip, r3
 802b490:	fb02 e000 	mla	r0, r2, r0, lr
 802b494:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b498:	fb15 f707 	smulbb	r7, r5, r7
 802b49c:	bfd4      	ite	le
 802b49e:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 802b4a2:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 802b4a6:	fb90 f0f3 	sdiv	r0, r0, r3
 802b4aa:	bfd8      	it	le
 802b4ac:	fa5f fc8c 	uxtble.w	ip, ip
 802b4b0:	28ff      	cmp	r0, #255	; 0xff
 802b4b2:	bfd4      	ite	le
 802b4b4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802b4b8:	20ff      	movgt	r0, #255	; 0xff
 802b4ba:	f881 c000 	strb.w	ip, [r1]
 802b4be:	bfd8      	it	le
 802b4c0:	b2c0      	uxtble	r0, r0
 802b4c2:	7048      	strb	r0, [r1, #1]
 802b4c4:	7888      	ldrb	r0, [r1, #2]
 802b4c6:	fb02 7200 	mla	r2, r2, r0, r7
 802b4ca:	fb92 f2f3 	sdiv	r2, r2, r3
 802b4ce:	2aff      	cmp	r2, #255	; 0xff
 802b4d0:	bfd6      	itet	le
 802b4d2:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802b4d6:	22ff      	movgt	r2, #255	; 0xff
 802b4d8:	b2d2      	uxtble	r2, r2
 802b4da:	708a      	strb	r2, [r1, #2]
 802b4dc:	e7a9      	b.n	802b432 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802b4de:	b01b      	add	sp, #108	; 0x6c
 802b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b4e4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 802b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4e8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802b4ec:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802b4f0:	2c00      	cmp	r4, #0
 802b4f2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802b4f6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802b4fa:	fb00 4e03 	mla	lr, r0, r3, r4
 802b4fe:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802b502:	f2c0 808f 	blt.w	802b624 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b506:	45a1      	cmp	r9, r4
 802b508:	f340 808c 	ble.w	802b624 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b50c:	2800      	cmp	r0, #0
 802b50e:	f2c0 8089 	blt.w	802b624 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b512:	4580      	cmp	r8, r0
 802b514:	f340 8086 	ble.w	802b624 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802b518:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802b51c:	f01e 0f01 	tst.w	lr, #1
 802b520:	5d56      	ldrb	r6, [r2, r5]
 802b522:	bf0c      	ite	eq
 802b524:	f006 060f 	andeq.w	r6, r6, #15
 802b528:	1136      	asrne	r6, r6, #4
 802b52a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b52e:	b2f6      	uxtb	r6, r6
 802b530:	f114 0a01 	adds.w	sl, r4, #1
 802b534:	d478      	bmi.n	802b628 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b536:	45d1      	cmp	r9, sl
 802b538:	dd76      	ble.n	802b628 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b53a:	2800      	cmp	r0, #0
 802b53c:	db74      	blt.n	802b628 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b53e:	4580      	cmp	r8, r0
 802b540:	dd72      	ble.n	802b628 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802b542:	2f00      	cmp	r7, #0
 802b544:	d072      	beq.n	802b62c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 802b546:	f10e 0b01 	add.w	fp, lr, #1
 802b54a:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802b54e:	f01b 0f01 	tst.w	fp, #1
 802b552:	5d55      	ldrb	r5, [r2, r5]
 802b554:	bf0c      	ite	eq
 802b556:	f005 050f 	andeq.w	r5, r5, #15
 802b55a:	112d      	asrne	r5, r5, #4
 802b55c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b560:	b2ed      	uxtb	r5, r5
 802b562:	f1bc 0f00 	cmp.w	ip, #0
 802b566:	d065      	beq.n	802b634 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 802b568:	2c00      	cmp	r4, #0
 802b56a:	f100 0001 	add.w	r0, r0, #1
 802b56e:	db5f      	blt.n	802b630 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b570:	45a1      	cmp	r9, r4
 802b572:	dd5d      	ble.n	802b630 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b574:	2800      	cmp	r0, #0
 802b576:	db5b      	blt.n	802b630 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b578:	4580      	cmp	r8, r0
 802b57a:	dd59      	ble.n	802b630 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802b57c:	eb03 0b0e 	add.w	fp, r3, lr
 802b580:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802b584:	f01b 0f01 	tst.w	fp, #1
 802b588:	5d14      	ldrb	r4, [r2, r4]
 802b58a:	bf0c      	ite	eq
 802b58c:	f004 040f 	andeq.w	r4, r4, #15
 802b590:	1124      	asrne	r4, r4, #4
 802b592:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b596:	b2e4      	uxtb	r4, r4
 802b598:	f1ba 0f00 	cmp.w	sl, #0
 802b59c:	db4d      	blt.n	802b63a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b59e:	45d1      	cmp	r9, sl
 802b5a0:	dd4b      	ble.n	802b63a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b5a2:	2800      	cmp	r0, #0
 802b5a4:	db49      	blt.n	802b63a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b5a6:	4580      	cmp	r8, r0
 802b5a8:	dd47      	ble.n	802b63a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802b5aa:	2f00      	cmp	r7, #0
 802b5ac:	d047      	beq.n	802b63e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802b5ae:	3301      	adds	r3, #1
 802b5b0:	449e      	add	lr, r3
 802b5b2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b5b6:	f01e 0f01 	tst.w	lr, #1
 802b5ba:	5cd0      	ldrb	r0, [r2, r3]
 802b5bc:	bf0c      	ite	eq
 802b5be:	f000 000f 	andeq.w	r0, r0, #15
 802b5c2:	1100      	asrne	r0, r0, #4
 802b5c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b5c8:	b2c3      	uxtb	r3, r0
 802b5ca:	b2ba      	uxth	r2, r7
 802b5cc:	fa1f fc8c 	uxth.w	ip, ip
 802b5d0:	fb02 f00c 	mul.w	r0, r2, ip
 802b5d4:	0112      	lsls	r2, r2, #4
 802b5d6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b5da:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802b5de:	1a12      	subs	r2, r2, r0
 802b5e0:	fa1f fc8c 	uxth.w	ip, ip
 802b5e4:	b292      	uxth	r2, r2
 802b5e6:	eba7 070c 	sub.w	r7, r7, ip
 802b5ea:	436a      	muls	r2, r5
 802b5ec:	b2bf      	uxth	r7, r7
 802b5ee:	fb06 2207 	mla	r2, r6, r7, r2
 802b5f2:	fb0c 2404 	mla	r4, ip, r4, r2
 802b5f6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802b5fa:	fb00 4303 	mla	r3, r0, r3, r4
 802b5fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b602:	4353      	muls	r3, r2
 802b604:	1c5a      	adds	r2, r3, #1
 802b606:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b60a:	4a21      	ldr	r2, [pc, #132]	; (802b690 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 802b60c:	121b      	asrs	r3, r3, #8
 802b60e:	7895      	ldrb	r5, [r2, #2]
 802b610:	7857      	ldrb	r7, [r2, #1]
 802b612:	2bff      	cmp	r3, #255	; 0xff
 802b614:	7814      	ldrb	r4, [r2, #0]
 802b616:	d114      	bne.n	802b642 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 802b618:	700c      	strb	r4, [r1, #0]
 802b61a:	704f      	strb	r7, [r1, #1]
 802b61c:	708d      	strb	r5, [r1, #2]
 802b61e:	70cb      	strb	r3, [r1, #3]
 802b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b624:	2600      	movs	r6, #0
 802b626:	e783      	b.n	802b530 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 802b628:	2500      	movs	r5, #0
 802b62a:	e79a      	b.n	802b562 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b62c:	463d      	mov	r5, r7
 802b62e:	e798      	b.n	802b562 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802b630:	2400      	movs	r4, #0
 802b632:	e7b1      	b.n	802b598 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 802b634:	4663      	mov	r3, ip
 802b636:	4664      	mov	r4, ip
 802b638:	e7c7      	b.n	802b5ca <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b63a:	2300      	movs	r3, #0
 802b63c:	e7c5      	b.n	802b5ca <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b63e:	463b      	mov	r3, r7
 802b640:	e7c3      	b.n	802b5ca <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802b642:	b2da      	uxtb	r2, r3
 802b644:	2b00      	cmp	r3, #0
 802b646:	d0eb      	beq.n	802b620 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b648:	78ce      	ldrb	r6, [r1, #3]
 802b64a:	435c      	muls	r4, r3
 802b64c:	435f      	muls	r7, r3
 802b64e:	fb02 fc06 	mul.w	ip, r2, r6
 802b652:	4432      	add	r2, r6
 802b654:	436b      	muls	r3, r5
 802b656:	f10c 0001 	add.w	r0, ip, #1
 802b65a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802b65e:	1200      	asrs	r0, r0, #8
 802b660:	1a12      	subs	r2, r2, r0
 802b662:	1a30      	subs	r0, r6, r0
 802b664:	780e      	ldrb	r6, [r1, #0]
 802b666:	b2d2      	uxtb	r2, r2
 802b668:	fb00 4606 	mla	r6, r0, r6, r4
 802b66c:	784c      	ldrb	r4, [r1, #1]
 802b66e:	70ca      	strb	r2, [r1, #3]
 802b670:	fb00 7404 	mla	r4, r0, r4, r7
 802b674:	fb94 f4f2 	sdiv	r4, r4, r2
 802b678:	704c      	strb	r4, [r1, #1]
 802b67a:	788c      	ldrb	r4, [r1, #2]
 802b67c:	fb00 3304 	mla	r3, r0, r4, r3
 802b680:	fb96 f6f2 	sdiv	r6, r6, r2
 802b684:	fb93 f3f2 	sdiv	r3, r3, r2
 802b688:	700e      	strb	r6, [r1, #0]
 802b68a:	708b      	strb	r3, [r1, #2]
 802b68c:	e7c8      	b.n	802b620 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802b68e:	bf00      	nop
 802b690:	2400d83c 	.word	0x2400d83c

0802b694 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b698:	b097      	sub	sp, #92	; 0x5c
 802b69a:	9214      	str	r2, [sp, #80]	; 0x50
 802b69c:	9309      	str	r3, [sp, #36]	; 0x24
 802b69e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b6a0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802b6a4:	9015      	str	r0, [sp, #84]	; 0x54
 802b6a6:	910d      	str	r1, [sp, #52]	; 0x34
 802b6a8:	6850      	ldr	r0, [r2, #4]
 802b6aa:	930e      	str	r3, [sp, #56]	; 0x38
 802b6ac:	6812      	ldr	r2, [r2, #0]
 802b6ae:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802b6b2:	e9dd a521 	ldrd	sl, r5, [sp, #132]	; 0x84
 802b6b6:	fb00 1303 	mla	r3, r0, r3, r1
 802b6ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802b6be:	930a      	str	r3, [sp, #40]	; 0x28
 802b6c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b6c2:	689b      	ldr	r3, [r3, #8]
 802b6c4:	3301      	adds	r3, #1
 802b6c6:	f023 0301 	bic.w	r3, r3, #1
 802b6ca:	930f      	str	r3, [sp, #60]	; 0x3c
 802b6cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b6ce:	681e      	ldr	r6, [r3, #0]
 802b6d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b6d2:	2b00      	cmp	r3, #0
 802b6d4:	dc03      	bgt.n	802b6de <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802b6d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b6d8:	2b00      	cmp	r3, #0
 802b6da:	f340 8255 	ble.w	802bb88 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b6de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b6e0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b6e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b6e8:	1e48      	subs	r0, r1, #1
 802b6ea:	1e57      	subs	r7, r2, #1
 802b6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b6ee:	2b00      	cmp	r3, #0
 802b6f0:	f340 80bb 	ble.w	802b86a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b6f4:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802b6f8:	ea4f 4325 	mov.w	r3, r5, asr #16
 802b6fc:	d406      	bmi.n	802b70c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b6fe:	4584      	cmp	ip, r0
 802b700:	da04      	bge.n	802b70c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b702:	2b00      	cmp	r3, #0
 802b704:	db02      	blt.n	802b70c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b706:	42bb      	cmp	r3, r7
 802b708:	f2c0 80b0 	blt.w	802b86c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802b70c:	f11c 0c01 	adds.w	ip, ip, #1
 802b710:	f100 80a0 	bmi.w	802b854 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b714:	4561      	cmp	r1, ip
 802b716:	f2c0 809d 	blt.w	802b854 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b71a:	3301      	adds	r3, #1
 802b71c:	f100 809a 	bmi.w	802b854 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b720:	429a      	cmp	r2, r3
 802b722:	f2c0 8097 	blt.w	802b854 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802b726:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 802b72a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802b72e:	f1bb 0f00 	cmp.w	fp, #0
 802b732:	f340 80bb 	ble.w	802b8ac <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 802b736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b738:	1428      	asrs	r0, r5, #16
 802b73a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802b73e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802b742:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b746:	ea5f 432a 	movs.w	r3, sl, asr #16
 802b74a:	f100 8134 	bmi.w	802b9b6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b74e:	f10c 39ff 	add.w	r9, ip, #4294967295
 802b752:	454b      	cmp	r3, r9
 802b754:	f280 812f 	bge.w	802b9b6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b758:	2800      	cmp	r0, #0
 802b75a:	f2c0 812c 	blt.w	802b9b6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b75e:	f10e 39ff 	add.w	r9, lr, #4294967295
 802b762:	4548      	cmp	r0, r9
 802b764:	f280 8127 	bge.w	802b9b6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802b768:	fb00 3308 	mla	r3, r0, r8, r3
 802b76c:	0858      	lsrs	r0, r3, #1
 802b76e:	07dc      	lsls	r4, r3, #31
 802b770:	f816 c000 	ldrb.w	ip, [r6, r0]
 802b774:	bf54      	ite	pl
 802b776:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b77a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b77e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b782:	fa5f fc8c 	uxtb.w	ip, ip
 802b786:	2a00      	cmp	r2, #0
 802b788:	f000 80d6 	beq.w	802b938 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802b78c:	1c58      	adds	r0, r3, #1
 802b78e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b792:	07c0      	lsls	r0, r0, #31
 802b794:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802b798:	bf54      	ite	pl
 802b79a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b79e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b7a2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b7a6:	fa5f f08e 	uxtb.w	r0, lr
 802b7aa:	9010      	str	r0, [sp, #64]	; 0x40
 802b7ac:	b1d9      	cbz	r1, 802b7e6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b7ae:	4443      	add	r3, r8
 802b7b0:	0858      	lsrs	r0, r3, #1
 802b7b2:	07dc      	lsls	r4, r3, #31
 802b7b4:	f103 0301 	add.w	r3, r3, #1
 802b7b8:	5c30      	ldrb	r0, [r6, r0]
 802b7ba:	bf54      	ite	pl
 802b7bc:	f000 000f 	andpl.w	r0, r0, #15
 802b7c0:	1100      	asrmi	r0, r0, #4
 802b7c2:	07dc      	lsls	r4, r3, #31
 802b7c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b7c8:	b2c0      	uxtb	r0, r0
 802b7ca:	900b      	str	r0, [sp, #44]	; 0x2c
 802b7cc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802b7d0:	f816 e000 	ldrb.w	lr, [r6, r0]
 802b7d4:	bf54      	ite	pl
 802b7d6:	f00e 030f 	andpl.w	r3, lr, #15
 802b7da:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802b7de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b7e2:	b2db      	uxtb	r3, r3
 802b7e4:	9311      	str	r3, [sp, #68]	; 0x44
 802b7e6:	b292      	uxth	r2, r2
 802b7e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802b7ea:	b289      	uxth	r1, r1
 802b7ec:	fb02 f301 	mul.w	r3, r2, r1
 802b7f0:	0112      	lsls	r2, r2, #4
 802b7f2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b7f6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b7fa:	1ad2      	subs	r2, r2, r3
 802b7fc:	b289      	uxth	r1, r1
 802b7fe:	b292      	uxth	r2, r2
 802b800:	1a40      	subs	r0, r0, r1
 802b802:	4362      	muls	r2, r4
 802b804:	b280      	uxth	r0, r0
 802b806:	fb0c 2c00 	mla	ip, ip, r0, r2
 802b80a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b80c:	fb01 c102 	mla	r1, r1, r2, ip
 802b810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b812:	fb03 1302 	mla	r3, r3, r2, r1
 802b816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b818:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b81c:	4353      	muls	r3, r2
 802b81e:	1c5a      	adds	r2, r3, #1
 802b820:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b824:	4abf      	ldr	r2, [pc, #764]	; (802bb24 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802b826:	121b      	asrs	r3, r3, #8
 802b828:	f892 9002 	ldrb.w	r9, [r2, #2]
 802b82c:	7850      	ldrb	r0, [r2, #1]
 802b82e:	2bff      	cmp	r3, #255	; 0xff
 802b830:	f892 c000 	ldrb.w	ip, [r2]
 802b834:	f040 8091 	bne.w	802b95a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 802b838:	f887 c000 	strb.w	ip, [r7]
 802b83c:	7078      	strb	r0, [r7, #1]
 802b83e:	f887 9002 	strb.w	r9, [r7, #2]
 802b842:	70fb      	strb	r3, [r7, #3]
 802b844:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802b846:	3704      	adds	r7, #4
 802b848:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b84c:	449a      	add	sl, r3
 802b84e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b850:	441d      	add	r5, r3
 802b852:	e76c      	b.n	802b72e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802b854:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802b856:	449a      	add	sl, r3
 802b858:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b85a:	441d      	add	r5, r3
 802b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b85e:	3b01      	subs	r3, #1
 802b860:	9309      	str	r3, [sp, #36]	; 0x24
 802b862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b864:	3304      	adds	r3, #4
 802b866:	930a      	str	r3, [sp, #40]	; 0x28
 802b868:	e740      	b.n	802b6ec <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b86a:	d026      	beq.n	802b8ba <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802b86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b86e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802b870:	3b01      	subs	r3, #1
 802b872:	fb00 a003 	mla	r0, r0, r3, sl
 802b876:	1400      	asrs	r0, r0, #16
 802b878:	f53f af55 	bmi.w	802b726 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b87c:	3901      	subs	r1, #1
 802b87e:	4288      	cmp	r0, r1
 802b880:	f6bf af51 	bge.w	802b726 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b884:	9924      	ldr	r1, [sp, #144]	; 0x90
 802b886:	fb01 5303 	mla	r3, r1, r3, r5
 802b88a:	141b      	asrs	r3, r3, #16
 802b88c:	f53f af4b 	bmi.w	802b726 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b890:	3a01      	subs	r2, #1
 802b892:	4293      	cmp	r3, r2
 802b894:	f6bf af47 	bge.w	802b726 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b89a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802b89e:	3304      	adds	r3, #4
 802b8a0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802b8a4:	f1be 0f00 	cmp.w	lr, #0
 802b8a8:	f300 80a6 	bgt.w	802b9f8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 802b8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b8ae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802b8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b8b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802b8b8:	930a      	str	r3, [sp, #40]	; 0x28
 802b8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b8bc:	2b00      	cmp	r3, #0
 802b8be:	f340 8163 	ble.w	802bb88 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802b8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b8c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b8c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b8cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b8d0:	eef0 6a62 	vmov.f32	s13, s5
 802b8d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b8d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b8dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b8e0:	ee16 aa90 	vmov	sl, s13
 802b8e4:	eef0 6a43 	vmov.f32	s13, s6
 802b8e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b8ec:	ee16 5a90 	vmov	r5, s13
 802b8f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b8f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b8f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b8fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b900:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b904:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b908:	ee12 2a90 	vmov	r2, s5
 802b90c:	eef0 2a47 	vmov.f32	s5, s14
 802b910:	fb92 f3f3 	sdiv	r3, r2, r3
 802b914:	ee13 2a10 	vmov	r2, s6
 802b918:	9323      	str	r3, [sp, #140]	; 0x8c
 802b91a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b91c:	eeb0 3a67 	vmov.f32	s6, s15
 802b920:	fb92 f3f3 	sdiv	r3, r2, r3
 802b924:	9324      	str	r3, [sp, #144]	; 0x90
 802b926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802b92a:	3b01      	subs	r3, #1
 802b92c:	930d      	str	r3, [sp, #52]	; 0x34
 802b92e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b930:	bf08      	it	eq
 802b932:	4613      	moveq	r3, r2
 802b934:	9309      	str	r3, [sp, #36]	; 0x24
 802b936:	e6cb      	b.n	802b6d0 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802b938:	2900      	cmp	r1, #0
 802b93a:	f43f af54 	beq.w	802b7e6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b93e:	eb08 0003 	add.w	r0, r8, r3
 802b942:	0843      	lsrs	r3, r0, #1
 802b944:	07c0      	lsls	r0, r0, #31
 802b946:	5cf3      	ldrb	r3, [r6, r3]
 802b948:	bf54      	ite	pl
 802b94a:	f003 030f 	andpl.w	r3, r3, #15
 802b94e:	111b      	asrmi	r3, r3, #4
 802b950:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b954:	b2db      	uxtb	r3, r3
 802b956:	930b      	str	r3, [sp, #44]	; 0x2c
 802b958:	e745      	b.n	802b7e6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802b95a:	b2da      	uxtb	r2, r3
 802b95c:	2b00      	cmp	r3, #0
 802b95e:	f43f af71 	beq.w	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b962:	f897 e003 	ldrb.w	lr, [r7, #3]
 802b966:	fb03 fc0c 	mul.w	ip, r3, ip
 802b96a:	4358      	muls	r0, r3
 802b96c:	fb02 f10e 	mul.w	r1, r2, lr
 802b970:	4472      	add	r2, lr
 802b972:	fb03 f309 	mul.w	r3, r3, r9
 802b976:	1c4c      	adds	r4, r1, #1
 802b978:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 802b97c:	1209      	asrs	r1, r1, #8
 802b97e:	1a52      	subs	r2, r2, r1
 802b980:	ebae 0101 	sub.w	r1, lr, r1
 802b984:	f897 e000 	ldrb.w	lr, [r7]
 802b988:	b2d2      	uxtb	r2, r2
 802b98a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802b98e:	f897 e002 	ldrb.w	lr, [r7, #2]
 802b992:	70fa      	strb	r2, [r7, #3]
 802b994:	fb9c fcf2 	sdiv	ip, ip, r2
 802b998:	f887 c000 	strb.w	ip, [r7]
 802b99c:	f897 c001 	ldrb.w	ip, [r7, #1]
 802b9a0:	fb01 000c 	mla	r0, r1, ip, r0
 802b9a4:	fb01 310e 	mla	r1, r1, lr, r3
 802b9a8:	fb90 f0f2 	sdiv	r0, r0, r2
 802b9ac:	fb91 f1f2 	sdiv	r1, r1, r2
 802b9b0:	7078      	strb	r0, [r7, #1]
 802b9b2:	70b9      	strb	r1, [r7, #2]
 802b9b4:	e746      	b.n	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9b6:	f113 0901 	adds.w	r9, r3, #1
 802b9ba:	f53f af43 	bmi.w	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9be:	45cc      	cmp	ip, r9
 802b9c0:	f6ff af40 	blt.w	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9c4:	f110 0901 	adds.w	r9, r0, #1
 802b9c8:	f53f af3c 	bmi.w	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9cc:	45ce      	cmp	lr, r9
 802b9ce:	f6ff af39 	blt.w	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9d2:	9302      	str	r3, [sp, #8]
 802b9d4:	fa0f f38e 	sxth.w	r3, lr
 802b9d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802b9da:	9301      	str	r3, [sp, #4]
 802b9dc:	fa0f f38c 	sxth.w	r3, ip
 802b9e0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b9e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802b9e8:	9300      	str	r3, [sp, #0]
 802b9ea:	4632      	mov	r2, r6
 802b9ec:	4643      	mov	r3, r8
 802b9ee:	4639      	mov	r1, r7
 802b9f0:	9815      	ldr	r0, [sp, #84]	; 0x54
 802b9f2:	f7ff fd77 	bl	802b4e4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 802b9f6:	e725      	b.n	802b844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802b9f8:	ea4f 412a 	mov.w	r1, sl, asr #16
 802b9fc:	f3ca 3003 	ubfx	r0, sl, #12, #4
 802ba00:	142a      	asrs	r2, r5, #16
 802ba02:	f3c5 3703 	ubfx	r7, r5, #12, #4
 802ba06:	fb08 1202 	mla	r2, r8, r2, r1
 802ba0a:	0851      	lsrs	r1, r2, #1
 802ba0c:	07d4      	lsls	r4, r2, #31
 802ba0e:	5c71      	ldrb	r1, [r6, r1]
 802ba10:	bf54      	ite	pl
 802ba12:	f001 010f 	andpl.w	r1, r1, #15
 802ba16:	1109      	asrmi	r1, r1, #4
 802ba18:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ba1c:	b2c9      	uxtb	r1, r1
 802ba1e:	2800      	cmp	r0, #0
 802ba20:	d06d      	beq.n	802bafe <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802ba22:	f102 0901 	add.w	r9, r2, #1
 802ba26:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 802ba2a:	f019 0f01 	tst.w	r9, #1
 802ba2e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802ba32:	bf0c      	ite	eq
 802ba34:	f00c 0c0f 	andeq.w	ip, ip, #15
 802ba38:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802ba3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ba40:	fa5f f48c 	uxtb.w	r4, ip
 802ba44:	9412      	str	r4, [sp, #72]	; 0x48
 802ba46:	b307      	cbz	r7, 802ba8a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802ba48:	4442      	add	r2, r8
 802ba4a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802ba4e:	07d4      	lsls	r4, r2, #31
 802ba50:	f102 0201 	add.w	r2, r2, #1
 802ba54:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802ba58:	bf54      	ite	pl
 802ba5a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ba5e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ba62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ba66:	fa5f f48c 	uxtb.w	r4, ip
 802ba6a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802ba6e:	940c      	str	r4, [sp, #48]	; 0x30
 802ba70:	07d4      	lsls	r4, r2, #31
 802ba72:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802ba76:	bf54      	ite	pl
 802ba78:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ba7c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ba80:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ba84:	fa5f f28c 	uxtb.w	r2, ip
 802ba88:	9213      	str	r2, [sp, #76]	; 0x4c
 802ba8a:	b280      	uxth	r0, r0
 802ba8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802ba8e:	b2bf      	uxth	r7, r7
 802ba90:	fb00 f207 	mul.w	r2, r0, r7
 802ba94:	0100      	lsls	r0, r0, #4
 802ba96:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 802ba9a:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 802ba9e:	1a80      	subs	r0, r0, r2
 802baa0:	b2bf      	uxth	r7, r7
 802baa2:	b280      	uxth	r0, r0
 802baa4:	ebac 0c07 	sub.w	ip, ip, r7
 802baa8:	4360      	muls	r0, r4
 802baaa:	fa1f fc8c 	uxth.w	ip, ip
 802baae:	fb01 010c 	mla	r1, r1, ip, r0
 802bab2:	980c      	ldr	r0, [sp, #48]	; 0x30
 802bab4:	fb07 1700 	mla	r7, r7, r0, r1
 802bab8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802baba:	fb02 7201 	mla	r2, r2, r1, r7
 802babe:	990e      	ldr	r1, [sp, #56]	; 0x38
 802bac0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802bac4:	434a      	muls	r2, r1
 802bac6:	1c51      	adds	r1, r2, #1
 802bac8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802bacc:	4915      	ldr	r1, [pc, #84]	; (802bb24 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802bace:	1212      	asrs	r2, r2, #8
 802bad0:	7888      	ldrb	r0, [r1, #2]
 802bad2:	784f      	ldrb	r7, [r1, #1]
 802bad4:	2aff      	cmp	r2, #255	; 0xff
 802bad6:	4604      	mov	r4, r0
 802bad8:	f891 c000 	ldrb.w	ip, [r1]
 802badc:	d124      	bne.n	802bb28 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802bade:	f803 cc04 	strb.w	ip, [r3, #-4]
 802bae2:	f803 7c03 	strb.w	r7, [r3, #-3]
 802bae6:	f803 0c02 	strb.w	r0, [r3, #-2]
 802baea:	f803 2c01 	strb.w	r2, [r3, #-1]
 802baee:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802baf0:	3304      	adds	r3, #4
 802baf2:	f10e 3eff 	add.w	lr, lr, #4294967295
 802baf6:	4492      	add	sl, r2
 802baf8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802bafa:	4415      	add	r5, r2
 802bafc:	e6d2      	b.n	802b8a4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802bafe:	2f00      	cmp	r7, #0
 802bb00:	d0c3      	beq.n	802ba8a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802bb02:	4442      	add	r2, r8
 802bb04:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 802bb08:	07d2      	lsls	r2, r2, #31
 802bb0a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 802bb0e:	bf54      	ite	pl
 802bb10:	f00c 0c0f 	andpl.w	ip, ip, #15
 802bb14:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802bb18:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802bb1c:	fa5f f28c 	uxtb.w	r2, ip
 802bb20:	920c      	str	r2, [sp, #48]	; 0x30
 802bb22:	e7b2      	b.n	802ba8a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 802bb24:	2400d83c 	.word	0x2400d83c
 802bb28:	b2d1      	uxtb	r1, r2
 802bb2a:	2a00      	cmp	r2, #0
 802bb2c:	d0df      	beq.n	802baee <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802bb2e:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 802bb32:	fb02 fc0c 	mul.w	ip, r2, ip
 802bb36:	4357      	muls	r7, r2
 802bb38:	fb01 fb09 	mul.w	fp, r1, r9
 802bb3c:	4449      	add	r1, r9
 802bb3e:	4362      	muls	r2, r4
 802bb40:	f10b 0001 	add.w	r0, fp, #1
 802bb44:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802bb48:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 802bb4c:	1200      	asrs	r0, r0, #8
 802bb4e:	1a09      	subs	r1, r1, r0
 802bb50:	eba9 0000 	sub.w	r0, r9, r0
 802bb54:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 802bb58:	b2c9      	uxtb	r1, r1
 802bb5a:	fb00 cc0b 	mla	ip, r0, fp, ip
 802bb5e:	fb9c fcf1 	sdiv	ip, ip, r1
 802bb62:	f803 cc04 	strb.w	ip, [r3, #-4]
 802bb66:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 802bb6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802bb6e:	fb00 770c 	mla	r7, r0, ip, r7
 802bb72:	fb00 2009 	mla	r0, r0, r9, r2
 802bb76:	fb97 f7f1 	sdiv	r7, r7, r1
 802bb7a:	fb90 f0f1 	sdiv	r0, r0, r1
 802bb7e:	f803 7c03 	strb.w	r7, [r3, #-3]
 802bb82:	f803 0c02 	strb.w	r0, [r3, #-2]
 802bb86:	e7b2      	b.n	802baee <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 802bb88:	b017      	add	sp, #92	; 0x5c
 802bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb8e:	bf00      	nop

0802bb90 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 802bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb94:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	; 0x2c
 802bb98:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802bb9c:	2800      	cmp	r0, #0
 802bb9e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802bba2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802bba6:	fb0c 0e03 	mla	lr, ip, r3, r0
 802bbaa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802bbae:	f2c0 8088 	blt.w	802bcc2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802bbb2:	4581      	cmp	r9, r0
 802bbb4:	f340 8085 	ble.w	802bcc2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802bbb8:	f1bc 0f00 	cmp.w	ip, #0
 802bbbc:	f2c0 8081 	blt.w	802bcc2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802bbc0:	45e0      	cmp	r8, ip
 802bbc2:	dd7e      	ble.n	802bcc2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 802bbc4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802bbc8:	f01e 0f01 	tst.w	lr, #1
 802bbcc:	5d15      	ldrb	r5, [r2, r4]
 802bbce:	bf0c      	ite	eq
 802bbd0:	f005 050f 	andeq.w	r5, r5, #15
 802bbd4:	112d      	asrne	r5, r5, #4
 802bbd6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802bbda:	b2ed      	uxtb	r5, r5
 802bbdc:	f110 0a01 	adds.w	sl, r0, #1
 802bbe0:	d471      	bmi.n	802bcc6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802bbe2:	45d1      	cmp	r9, sl
 802bbe4:	dd6f      	ble.n	802bcc6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802bbe6:	f1bc 0f00 	cmp.w	ip, #0
 802bbea:	db6c      	blt.n	802bcc6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802bbec:	45e0      	cmp	r8, ip
 802bbee:	dd6a      	ble.n	802bcc6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 802bbf0:	2e00      	cmp	r6, #0
 802bbf2:	d06a      	beq.n	802bcca <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 802bbf4:	f10e 0b01 	add.w	fp, lr, #1
 802bbf8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802bbfc:	f01b 0f01 	tst.w	fp, #1
 802bc00:	5d14      	ldrb	r4, [r2, r4]
 802bc02:	bf0c      	ite	eq
 802bc04:	f004 040f 	andeq.w	r4, r4, #15
 802bc08:	1124      	asrne	r4, r4, #4
 802bc0a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802bc0e:	b2e4      	uxtb	r4, r4
 802bc10:	2f00      	cmp	r7, #0
 802bc12:	d05e      	beq.n	802bcd2 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 802bc14:	2800      	cmp	r0, #0
 802bc16:	f10c 0c01 	add.w	ip, ip, #1
 802bc1a:	db58      	blt.n	802bcce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802bc1c:	4581      	cmp	r9, r0
 802bc1e:	dd56      	ble.n	802bcce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802bc20:	f1bc 0f00 	cmp.w	ip, #0
 802bc24:	db53      	blt.n	802bcce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802bc26:	45e0      	cmp	r8, ip
 802bc28:	dd51      	ble.n	802bcce <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 802bc2a:	eb03 0b0e 	add.w	fp, r3, lr
 802bc2e:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802bc32:	f01b 0f01 	tst.w	fp, #1
 802bc36:	5c10      	ldrb	r0, [r2, r0]
 802bc38:	bf0c      	ite	eq
 802bc3a:	f000 000f 	andeq.w	r0, r0, #15
 802bc3e:	1100      	asrne	r0, r0, #4
 802bc40:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802bc44:	b2c0      	uxtb	r0, r0
 802bc46:	f1ba 0f00 	cmp.w	sl, #0
 802bc4a:	db45      	blt.n	802bcd8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802bc4c:	45d1      	cmp	r9, sl
 802bc4e:	dd43      	ble.n	802bcd8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802bc50:	f1bc 0f00 	cmp.w	ip, #0
 802bc54:	db40      	blt.n	802bcd8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802bc56:	45e0      	cmp	r8, ip
 802bc58:	dd3e      	ble.n	802bcd8 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 802bc5a:	2e00      	cmp	r6, #0
 802bc5c:	d03e      	beq.n	802bcdc <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 802bc5e:	3301      	adds	r3, #1
 802bc60:	449e      	add	lr, r3
 802bc62:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802bc66:	f01e 0f01 	tst.w	lr, #1
 802bc6a:	5cd3      	ldrb	r3, [r2, r3]
 802bc6c:	bf0c      	ite	eq
 802bc6e:	f003 030f 	andeq.w	r3, r3, #15
 802bc72:	111b      	asrne	r3, r3, #4
 802bc74:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802bc78:	b2db      	uxtb	r3, r3
 802bc7a:	b2b2      	uxth	r2, r6
 802bc7c:	b2bf      	uxth	r7, r7
 802bc7e:	fb02 f607 	mul.w	r6, r2, r7
 802bc82:	0112      	lsls	r2, r2, #4
 802bc84:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 802bc88:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 802bc8c:	1b92      	subs	r2, r2, r6
 802bc8e:	b2bf      	uxth	r7, r7
 802bc90:	b292      	uxth	r2, r2
 802bc92:	ebac 0c07 	sub.w	ip, ip, r7
 802bc96:	4362      	muls	r2, r4
 802bc98:	fa1f fc8c 	uxth.w	ip, ip
 802bc9c:	fb05 220c 	mla	r2, r5, ip, r2
 802bca0:	fb07 2000 	mla	r0, r7, r0, r2
 802bca4:	4a22      	ldr	r2, [pc, #136]	; (802bd30 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 802bca6:	fb06 0303 	mla	r3, r6, r3, r0
 802bcaa:	7817      	ldrb	r7, [r2, #0]
 802bcac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bcb0:	2bff      	cmp	r3, #255	; 0xff
 802bcb2:	d115      	bne.n	802bce0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 802bcb4:	700f      	strb	r7, [r1, #0]
 802bcb6:	7853      	ldrb	r3, [r2, #1]
 802bcb8:	704b      	strb	r3, [r1, #1]
 802bcba:	7893      	ldrb	r3, [r2, #2]
 802bcbc:	708b      	strb	r3, [r1, #2]
 802bcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bcc2:	2500      	movs	r5, #0
 802bcc4:	e78a      	b.n	802bbdc <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 802bcc6:	2400      	movs	r4, #0
 802bcc8:	e7a2      	b.n	802bc10 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802bcca:	4634      	mov	r4, r6
 802bccc:	e7a0      	b.n	802bc10 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 802bcce:	2000      	movs	r0, #0
 802bcd0:	e7b9      	b.n	802bc46 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 802bcd2:	463b      	mov	r3, r7
 802bcd4:	4638      	mov	r0, r7
 802bcd6:	e7d0      	b.n	802bc7a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802bcd8:	2300      	movs	r3, #0
 802bcda:	e7ce      	b.n	802bc7a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802bcdc:	4633      	mov	r3, r6
 802bcde:	e7cc      	b.n	802bc7a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 802bce0:	2b00      	cmp	r3, #0
 802bce2:	d0ec      	beq.n	802bcbe <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802bce4:	78cc      	ldrb	r4, [r1, #3]
 802bce6:	435f      	muls	r7, r3
 802bce8:	7896      	ldrb	r6, [r2, #2]
 802bcea:	f892 c001 	ldrb.w	ip, [r2, #1]
 802bcee:	fb03 f204 	mul.w	r2, r3, r4
 802bcf2:	780d      	ldrb	r5, [r1, #0]
 802bcf4:	1c50      	adds	r0, r2, #1
 802bcf6:	fb03 fc0c 	mul.w	ip, r3, ip
 802bcfa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802bcfe:	191a      	adds	r2, r3, r4
 802bd00:	4373      	muls	r3, r6
 802bd02:	1200      	asrs	r0, r0, #8
 802bd04:	1a12      	subs	r2, r2, r0
 802bd06:	1a20      	subs	r0, r4, r0
 802bd08:	784c      	ldrb	r4, [r1, #1]
 802bd0a:	b2d2      	uxtb	r2, r2
 802bd0c:	fb00 7505 	mla	r5, r0, r5, r7
 802bd10:	fb00 c404 	mla	r4, r0, r4, ip
 802bd14:	70ca      	strb	r2, [r1, #3]
 802bd16:	fb94 f4f2 	sdiv	r4, r4, r2
 802bd1a:	704c      	strb	r4, [r1, #1]
 802bd1c:	788c      	ldrb	r4, [r1, #2]
 802bd1e:	fb00 3304 	mla	r3, r0, r4, r3
 802bd22:	fb95 f5f2 	sdiv	r5, r5, r2
 802bd26:	fb93 f3f2 	sdiv	r3, r3, r2
 802bd2a:	700d      	strb	r5, [r1, #0]
 802bd2c:	708b      	strb	r3, [r1, #2]
 802bd2e:	e7c6      	b.n	802bcbe <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 802bd30:	2400d83c 	.word	0x2400d83c

0802bd34 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd38:	b095      	sub	sp, #84	; 0x54
 802bd3a:	461c      	mov	r4, r3
 802bd3c:	4fc4      	ldr	r7, [pc, #784]	; (802c050 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 802bd3e:	920d      	str	r2, [sp, #52]	; 0x34
 802bd40:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802bd42:	9013      	str	r0, [sp, #76]	; 0x4c
 802bd44:	9108      	str	r1, [sp, #32]
 802bd46:	6850      	ldr	r0, [r2, #4]
 802bd48:	6812      	ldr	r2, [r2, #0]
 802bd4a:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 802bd4e:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	; 0x7c
 802bd52:	fb00 1303 	mla	r3, r0, r3, r1
 802bd56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802bd5a:	9307      	str	r3, [sp, #28]
 802bd5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802bd5e:	689b      	ldr	r3, [r3, #8]
 802bd60:	3301      	adds	r3, #1
 802bd62:	f023 0301 	bic.w	r3, r3, #1
 802bd66:	930a      	str	r3, [sp, #40]	; 0x28
 802bd68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802bd6a:	681e      	ldr	r6, [r3, #0]
 802bd6c:	9b08      	ldr	r3, [sp, #32]
 802bd6e:	2b00      	cmp	r3, #0
 802bd70:	dc03      	bgt.n	802bd7a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802bd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802bd74:	2b00      	cmp	r3, #0
 802bd76:	f340 824e 	ble.w	802c216 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802bd7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802bd7c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802bd80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802bd84:	1e48      	subs	r0, r1, #1
 802bd86:	f102 3cff 	add.w	ip, r2, #4294967295
 802bd8a:	2c00      	cmp	r4, #0
 802bd8c:	f340 80b3 	ble.w	802bef6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802bd90:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 802bd94:	ea4f 4325 	mov.w	r3, r5, asr #16
 802bd98:	d406      	bmi.n	802bda8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802bd9a:	4586      	cmp	lr, r0
 802bd9c:	da04      	bge.n	802bda8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802bd9e:	2b00      	cmp	r3, #0
 802bda0:	db02      	blt.n	802bda8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802bda2:	4563      	cmp	r3, ip
 802bda4:	f2c0 80a8 	blt.w	802bef8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 802bda8:	f11e 0e01 	adds.w	lr, lr, #1
 802bdac:	f100 809a 	bmi.w	802bee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bdb0:	4571      	cmp	r1, lr
 802bdb2:	f2c0 8097 	blt.w	802bee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bdb6:	3301      	adds	r3, #1
 802bdb8:	f100 8094 	bmi.w	802bee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bdbc:	429a      	cmp	r2, r3
 802bdbe:	f2c0 8091 	blt.w	802bee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802bdc2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802bdc6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 802bdca:	9409      	str	r4, [sp, #36]	; 0x24
 802bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bdce:	2b00      	cmp	r3, #0
 802bdd0:	f340 80b0 	ble.w	802bf34 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802bdd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802bdd6:	1428      	asrs	r0, r5, #16
 802bdd8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802bddc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802bde0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802bde4:	ea5f 432b 	movs.w	r3, fp, asr #16
 802bde8:	f100 8134 	bmi.w	802c054 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bdec:	f10c 3aff 	add.w	sl, ip, #4294967295
 802bdf0:	4553      	cmp	r3, sl
 802bdf2:	f280 812f 	bge.w	802c054 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bdf6:	2800      	cmp	r0, #0
 802bdf8:	f2c0 812c 	blt.w	802c054 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802bdfc:	f10e 3aff 	add.w	sl, lr, #4294967295
 802be00:	4550      	cmp	r0, sl
 802be02:	f280 8127 	bge.w	802c054 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802be06:	fb00 3309 	mla	r3, r0, r9, r3
 802be0a:	0858      	lsrs	r0, r3, #1
 802be0c:	f816 c000 	ldrb.w	ip, [r6, r0]
 802be10:	07d8      	lsls	r0, r3, #31
 802be12:	bf54      	ite	pl
 802be14:	f00c 0c0f 	andpl.w	ip, ip, #15
 802be18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802be1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802be20:	fa5f fc8c 	uxtb.w	ip, ip
 802be24:	2a00      	cmp	r2, #0
 802be26:	f000 80cb 	beq.w	802bfc0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802be2a:	1c58      	adds	r0, r3, #1
 802be2c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802be30:	07c0      	lsls	r0, r0, #31
 802be32:	f816 e00e 	ldrb.w	lr, [r6, lr]
 802be36:	bf54      	ite	pl
 802be38:	f00e 0e0f 	andpl.w	lr, lr, #15
 802be3c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802be40:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802be44:	fa5f fe8e 	uxtb.w	lr, lr
 802be48:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 802be4c:	b1c1      	cbz	r1, 802be80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802be4e:	444b      	add	r3, r9
 802be50:	0858      	lsrs	r0, r3, #1
 802be52:	f013 0f01 	tst.w	r3, #1
 802be56:	5c30      	ldrb	r0, [r6, r0]
 802be58:	bf0c      	ite	eq
 802be5a:	f000 000f 	andeq.w	r0, r0, #15
 802be5e:	1100      	asrne	r0, r0, #4
 802be60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802be64:	b2c0      	uxtb	r0, r0
 802be66:	900b      	str	r0, [sp, #44]	; 0x2c
 802be68:	1c58      	adds	r0, r3, #1
 802be6a:	0843      	lsrs	r3, r0, #1
 802be6c:	07c0      	lsls	r0, r0, #31
 802be6e:	5cf3      	ldrb	r3, [r6, r3]
 802be70:	bf54      	ite	pl
 802be72:	f003 030f 	andpl.w	r3, r3, #15
 802be76:	111b      	asrmi	r3, r3, #4
 802be78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802be7c:	b2db      	uxtb	r3, r3
 802be7e:	930f      	str	r3, [sp, #60]	; 0x3c
 802be80:	b292      	uxth	r2, r2
 802be82:	b289      	uxth	r1, r1
 802be84:	fb02 f301 	mul.w	r3, r2, r1
 802be88:	0112      	lsls	r2, r2, #4
 802be8a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802be8e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802be92:	1ad2      	subs	r2, r2, r3
 802be94:	b289      	uxth	r1, r1
 802be96:	b292      	uxth	r2, r2
 802be98:	1a40      	subs	r0, r0, r1
 802be9a:	fa1f fe80 	uxth.w	lr, r0
 802be9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 802bea0:	4342      	muls	r2, r0
 802bea2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802bea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802bea8:	fb01 c102 	mla	r1, r1, r2, ip
 802beac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802beae:	f897 c000 	ldrb.w	ip, [r7]
 802beb2:	fb03 1302 	mla	r3, r3, r2, r1
 802beb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802beba:	2bff      	cmp	r3, #255	; 0xff
 802bebc:	f040 8091 	bne.w	802bfe2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802bec0:	f888 c000 	strb.w	ip, [r8]
 802bec4:	787b      	ldrb	r3, [r7, #1]
 802bec6:	f888 3001 	strb.w	r3, [r8, #1]
 802beca:	78bb      	ldrb	r3, [r7, #2]
 802becc:	f888 3002 	strb.w	r3, [r8, #2]
 802bed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bed2:	f108 0804 	add.w	r8, r8, #4
 802bed6:	449b      	add	fp, r3
 802bed8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802beda:	441d      	add	r5, r3
 802bedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bede:	3b01      	subs	r3, #1
 802bee0:	9309      	str	r3, [sp, #36]	; 0x24
 802bee2:	e773      	b.n	802bdcc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802bee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bee6:	3c01      	subs	r4, #1
 802bee8:	449b      	add	fp, r3
 802beea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802beec:	441d      	add	r5, r3
 802beee:	9b07      	ldr	r3, [sp, #28]
 802bef0:	3304      	adds	r3, #4
 802bef2:	9307      	str	r3, [sp, #28]
 802bef4:	e749      	b.n	802bd8a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802bef6:	d023      	beq.n	802bf40 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802bef8:	1e63      	subs	r3, r4, #1
 802befa:	9821      	ldr	r0, [sp, #132]	; 0x84
 802befc:	fb00 b003 	mla	r0, r0, r3, fp
 802bf00:	1400      	asrs	r0, r0, #16
 802bf02:	f53f af5e 	bmi.w	802bdc2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bf06:	3901      	subs	r1, #1
 802bf08:	4288      	cmp	r0, r1
 802bf0a:	f6bf af5a 	bge.w	802bdc2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bf0e:	9922      	ldr	r1, [sp, #136]	; 0x88
 802bf10:	fb01 5303 	mla	r3, r1, r3, r5
 802bf14:	141b      	asrs	r3, r3, #16
 802bf16:	f53f af54 	bmi.w	802bdc2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bf1a:	3a01      	subs	r2, #1
 802bf1c:	4293      	cmp	r3, r2
 802bf1e:	f6bf af50 	bge.w	802bdc2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802bf22:	9b07      	ldr	r3, [sp, #28]
 802bf24:	46a0      	mov	r8, r4
 802bf26:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 802bf2a:	1d1a      	adds	r2, r3, #4
 802bf2c:	f1b8 0f00 	cmp.w	r8, #0
 802bf30:	f300 80af 	bgt.w	802c092 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802bf34:	9b07      	ldr	r3, [sp, #28]
 802bf36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802bf3a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802bf3e:	9307      	str	r3, [sp, #28]
 802bf40:	9b08      	ldr	r3, [sp, #32]
 802bf42:	2b00      	cmp	r3, #0
 802bf44:	f340 8167 	ble.w	802c216 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802bf48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802bf4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802bf4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802bf52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802bf56:	eef0 6a62 	vmov.f32	s13, s5
 802bf5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802bf5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802bf62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bf66:	ee16 ba90 	vmov	fp, s13
 802bf6a:	eef0 6a43 	vmov.f32	s13, s6
 802bf6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bf72:	ee16 5a90 	vmov	r5, s13
 802bf76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802bf7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802bf7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 802bf82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802bf86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802bf8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802bf8e:	ee12 2a90 	vmov	r2, s5
 802bf92:	eef0 2a47 	vmov.f32	s5, s14
 802bf96:	fb92 f3f3 	sdiv	r3, r2, r3
 802bf9a:	ee13 2a10 	vmov	r2, s6
 802bf9e:	9321      	str	r3, [sp, #132]	; 0x84
 802bfa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802bfa2:	eeb0 3a67 	vmov.f32	s6, s15
 802bfa6:	fb92 f3f3 	sdiv	r3, r2, r3
 802bfaa:	9322      	str	r3, [sp, #136]	; 0x88
 802bfac:	9b08      	ldr	r3, [sp, #32]
 802bfae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802bfb0:	3b01      	subs	r3, #1
 802bfb2:	9308      	str	r3, [sp, #32]
 802bfb4:	bf08      	it	eq
 802bfb6:	4614      	moveq	r4, r2
 802bfb8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802bfba:	bf18      	it	ne
 802bfbc:	461c      	movne	r4, r3
 802bfbe:	e6d5      	b.n	802bd6c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802bfc0:	2900      	cmp	r1, #0
 802bfc2:	f43f af5d 	beq.w	802be80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bfc6:	eb09 0003 	add.w	r0, r9, r3
 802bfca:	0843      	lsrs	r3, r0, #1
 802bfcc:	07c0      	lsls	r0, r0, #31
 802bfce:	5cf3      	ldrb	r3, [r6, r3]
 802bfd0:	bf54      	ite	pl
 802bfd2:	f003 030f 	andpl.w	r3, r3, #15
 802bfd6:	111b      	asrmi	r3, r3, #4
 802bfd8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802bfdc:	b2db      	uxtb	r3, r3
 802bfde:	930b      	str	r3, [sp, #44]	; 0x2c
 802bfe0:	e74e      	b.n	802be80 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 802bfe2:	2b00      	cmp	r3, #0
 802bfe4:	f43f af74 	beq.w	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802bfe8:	f898 a003 	ldrb.w	sl, [r8, #3]
 802bfec:	fb03 fc0c 	mul.w	ip, r3, ip
 802bff0:	78ba      	ldrb	r2, [r7, #2]
 802bff2:	fb03 f00a 	mul.w	r0, r3, sl
 802bff6:	f897 e001 	ldrb.w	lr, [r7, #1]
 802bffa:	9210      	str	r2, [sp, #64]	; 0x40
 802bffc:	eb03 020a 	add.w	r2, r3, sl
 802c000:	1c41      	adds	r1, r0, #1
 802c002:	fb03 fe0e 	mul.w	lr, r3, lr
 802c006:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c00a:	1208      	asrs	r0, r1, #8
 802c00c:	ebaa 0100 	sub.w	r1, sl, r0
 802c010:	1a12      	subs	r2, r2, r0
 802c012:	f898 0000 	ldrb.w	r0, [r8]
 802c016:	b2d2      	uxtb	r2, r2
 802c018:	fb01 cc00 	mla	ip, r1, r0, ip
 802c01c:	f898 0001 	ldrb.w	r0, [r8, #1]
 802c020:	f888 2003 	strb.w	r2, [r8, #3]
 802c024:	fb01 ee00 	mla	lr, r1, r0, lr
 802c028:	9810      	ldr	r0, [sp, #64]	; 0x40
 802c02a:	fb9c fcf2 	sdiv	ip, ip, r2
 802c02e:	4343      	muls	r3, r0
 802c030:	f888 c000 	strb.w	ip, [r8]
 802c034:	f898 c002 	ldrb.w	ip, [r8, #2]
 802c038:	fb01 330c 	mla	r3, r1, ip, r3
 802c03c:	fb9e fef2 	sdiv	lr, lr, r2
 802c040:	fb93 f3f2 	sdiv	r3, r3, r2
 802c044:	f888 e001 	strb.w	lr, [r8, #1]
 802c048:	f888 3002 	strb.w	r3, [r8, #2]
 802c04c:	e740      	b.n	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c04e:	bf00      	nop
 802c050:	2400d83c 	.word	0x2400d83c
 802c054:	f113 0a01 	adds.w	sl, r3, #1
 802c058:	f53f af3a 	bmi.w	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c05c:	45d4      	cmp	ip, sl
 802c05e:	f6ff af37 	blt.w	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c062:	f110 0a01 	adds.w	sl, r0, #1
 802c066:	f53f af33 	bmi.w	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c06a:	45d6      	cmp	lr, sl
 802c06c:	f6ff af30 	blt.w	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c070:	e9cd 3002 	strd	r3, r0, [sp, #8]
 802c074:	fa0f f38e 	sxth.w	r3, lr
 802c078:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802c07a:	9301      	str	r3, [sp, #4]
 802c07c:	fa0f f38c 	sxth.w	r3, ip
 802c080:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802c084:	9300      	str	r3, [sp, #0]
 802c086:	4632      	mov	r2, r6
 802c088:	464b      	mov	r3, r9
 802c08a:	4641      	mov	r1, r8
 802c08c:	f7ff fd80 	bl	802bb90 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 802c090:	e71e      	b.n	802bed0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802c092:	ea4f 412b 	mov.w	r1, fp, asr #16
 802c096:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 802c09a:	142b      	asrs	r3, r5, #16
 802c09c:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 802c0a0:	fb09 1303 	mla	r3, r9, r3, r1
 802c0a4:	0859      	lsrs	r1, r3, #1
 802c0a6:	07d8      	lsls	r0, r3, #31
 802c0a8:	5c71      	ldrb	r1, [r6, r1]
 802c0aa:	bf54      	ite	pl
 802c0ac:	f001 010f 	andpl.w	r1, r1, #15
 802c0b0:	1109      	asrmi	r1, r1, #4
 802c0b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802c0b6:	b2c9      	uxtb	r1, r1
 802c0b8:	f1bc 0f00 	cmp.w	ip, #0
 802c0bc:	d062      	beq.n	802c184 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802c0be:	f103 0a01 	add.w	sl, r3, #1
 802c0c2:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802c0c6:	f01a 0f01 	tst.w	sl, #1
 802c0ca:	5c30      	ldrb	r0, [r6, r0]
 802c0cc:	bf0c      	ite	eq
 802c0ce:	f000 000f 	andeq.w	r0, r0, #15
 802c0d2:	1100      	asrne	r0, r0, #4
 802c0d4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c0d8:	b2c0      	uxtb	r0, r0
 802c0da:	9011      	str	r0, [sp, #68]	; 0x44
 802c0dc:	f1be 0f00 	cmp.w	lr, #0
 802c0e0:	d019      	beq.n	802c116 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802c0e2:	444b      	add	r3, r9
 802c0e4:	0858      	lsrs	r0, r3, #1
 802c0e6:	f013 0f01 	tst.w	r3, #1
 802c0ea:	f103 0301 	add.w	r3, r3, #1
 802c0ee:	5c30      	ldrb	r0, [r6, r0]
 802c0f0:	bf0c      	ite	eq
 802c0f2:	f000 000f 	andeq.w	r0, r0, #15
 802c0f6:	1100      	asrne	r0, r0, #4
 802c0f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c0fc:	b2c0      	uxtb	r0, r0
 802c0fe:	900c      	str	r0, [sp, #48]	; 0x30
 802c100:	0858      	lsrs	r0, r3, #1
 802c102:	07db      	lsls	r3, r3, #31
 802c104:	5c30      	ldrb	r0, [r6, r0]
 802c106:	bf54      	ite	pl
 802c108:	f000 000f 	andpl.w	r0, r0, #15
 802c10c:	1100      	asrmi	r0, r0, #4
 802c10e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c112:	b2c0      	uxtb	r0, r0
 802c114:	9012      	str	r0, [sp, #72]	; 0x48
 802c116:	fa1f fc8c 	uxth.w	ip, ip
 802c11a:	fa1f fe8e 	uxth.w	lr, lr
 802c11e:	fb0c f30e 	mul.w	r3, ip, lr
 802c122:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802c126:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 802c12a:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 802c12e:	ebac 0c03 	sub.w	ip, ip, r3
 802c132:	fa1f fe8e 	uxth.w	lr, lr
 802c136:	fa1f fc8c 	uxth.w	ip, ip
 802c13a:	eba0 000e 	sub.w	r0, r0, lr
 802c13e:	fa1f fa80 	uxth.w	sl, r0
 802c142:	9811      	ldr	r0, [sp, #68]	; 0x44
 802c144:	fb00 fc0c 	mul.w	ip, r0, ip
 802c148:	980c      	ldr	r0, [sp, #48]	; 0x30
 802c14a:	fb01 c10a 	mla	r1, r1, sl, ip
 802c14e:	fb0e 1e00 	mla	lr, lr, r0, r1
 802c152:	9912      	ldr	r1, [sp, #72]	; 0x48
 802c154:	fb03 e301 	mla	r3, r3, r1, lr
 802c158:	f897 e000 	ldrb.w	lr, [r7]
 802c15c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c160:	2bff      	cmp	r3, #255	; 0xff
 802c162:	d11f      	bne.n	802c1a4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802c164:	f802 ec04 	strb.w	lr, [r2, #-4]
 802c168:	787b      	ldrb	r3, [r7, #1]
 802c16a:	f802 3c03 	strb.w	r3, [r2, #-3]
 802c16e:	78bb      	ldrb	r3, [r7, #2]
 802c170:	f802 3c02 	strb.w	r3, [r2, #-2]
 802c174:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802c176:	3204      	adds	r2, #4
 802c178:	f108 38ff 	add.w	r8, r8, #4294967295
 802c17c:	449b      	add	fp, r3
 802c17e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802c180:	441d      	add	r5, r3
 802c182:	e6d3      	b.n	802bf2c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 802c184:	f1be 0f00 	cmp.w	lr, #0
 802c188:	d0c5      	beq.n	802c116 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802c18a:	444b      	add	r3, r9
 802c18c:	0858      	lsrs	r0, r3, #1
 802c18e:	07db      	lsls	r3, r3, #31
 802c190:	5c30      	ldrb	r0, [r6, r0]
 802c192:	bf54      	ite	pl
 802c194:	f000 000f 	andpl.w	r0, r0, #15
 802c198:	1100      	asrmi	r0, r0, #4
 802c19a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c19e:	b2c0      	uxtb	r0, r0
 802c1a0:	900c      	str	r0, [sp, #48]	; 0x30
 802c1a2:	e7b8      	b.n	802c116 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802c1a4:	2b00      	cmp	r3, #0
 802c1a6:	d0e5      	beq.n	802c174 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802c1a8:	78b9      	ldrb	r1, [r7, #2]
 802c1aa:	fb03 fe0e 	mul.w	lr, r3, lr
 802c1ae:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 802c1b2:	9110      	str	r1, [sp, #64]	; 0x40
 802c1b4:	fb03 f100 	mul.w	r1, r3, r0
 802c1b8:	f897 a001 	ldrb.w	sl, [r7, #1]
 802c1bc:	f101 0c01 	add.w	ip, r1, #1
 802c1c0:	fb03 fa0a 	mul.w	sl, r3, sl
 802c1c4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802c1c8:	1819      	adds	r1, r3, r0
 802c1ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802c1ce:	eba0 000c 	sub.w	r0, r0, ip
 802c1d2:	eba1 010c 	sub.w	r1, r1, ip
 802c1d6:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 802c1da:	9009      	str	r0, [sp, #36]	; 0x24
 802c1dc:	b2c9      	uxtb	r1, r1
 802c1de:	fb00 ee0c 	mla	lr, r0, ip, lr
 802c1e2:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 802c1e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c1ea:	fb00 aa0c 	mla	sl, r0, ip, sl
 802c1ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 802c1f0:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 802c1f4:	4343      	muls	r3, r0
 802c1f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c1f8:	fb00 330c 	mla	r3, r0, ip, r3
 802c1fc:	fb9e fef1 	sdiv	lr, lr, r1
 802c200:	fb9a faf1 	sdiv	sl, sl, r1
 802c204:	fb93 f3f1 	sdiv	r3, r3, r1
 802c208:	f802 ec04 	strb.w	lr, [r2, #-4]
 802c20c:	f802 ac03 	strb.w	sl, [r2, #-3]
 802c210:	f802 3c02 	strb.w	r3, [r2, #-2]
 802c214:	e7ae      	b.n	802c174 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802c216:	b015      	add	sp, #84	; 0x54
 802c218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c21c <CRC_Lock>:
 802c21c:	4a20      	ldr	r2, [pc, #128]	; (802c2a0 <CRC_Lock+0x84>)
 802c21e:	b530      	push	{r4, r5, lr}
 802c220:	6813      	ldr	r3, [r2, #0]
 802c222:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802c226:	f24c 2540 	movw	r5, #49728	; 0xc240
 802c22a:	f023 0301 	bic.w	r3, r3, #1
 802c22e:	6013      	str	r3, [r2, #0]
 802c230:	4b1c      	ldr	r3, [pc, #112]	; (802c2a4 <CRC_Lock+0x88>)
 802c232:	681a      	ldr	r2, [r3, #0]
 802c234:	4022      	ands	r2, r4
 802c236:	42aa      	cmp	r2, r5
 802c238:	d005      	beq.n	802c246 <CRC_Lock+0x2a>
 802c23a:	681b      	ldr	r3, [r3, #0]
 802c23c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802c240:	4023      	ands	r3, r4
 802c242:	4293      	cmp	r3, r2
 802c244:	d124      	bne.n	802c290 <CRC_Lock+0x74>
 802c246:	4b18      	ldr	r3, [pc, #96]	; (802c2a8 <CRC_Lock+0x8c>)
 802c248:	681b      	ldr	r3, [r3, #0]
 802c24a:	bb0b      	cbnz	r3, 802c290 <CRC_Lock+0x74>
 802c24c:	4b17      	ldr	r3, [pc, #92]	; (802c2ac <CRC_Lock+0x90>)
 802c24e:	681a      	ldr	r2, [r3, #0]
 802c250:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c254:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802c258:	d00d      	beq.n	802c276 <CRC_Lock+0x5a>
 802c25a:	681a      	ldr	r2, [r3, #0]
 802c25c:	f240 4483 	movw	r4, #1155	; 0x483
 802c260:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c264:	42a2      	cmp	r2, r4
 802c266:	d006      	beq.n	802c276 <CRC_Lock+0x5a>
 802c268:	681b      	ldr	r3, [r3, #0]
 802c26a:	f240 4285 	movw	r2, #1157	; 0x485
 802c26e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c272:	4293      	cmp	r3, r2
 802c274:	d10c      	bne.n	802c290 <CRC_Lock+0x74>
 802c276:	4b0e      	ldr	r3, [pc, #56]	; (802c2b0 <CRC_Lock+0x94>)
 802c278:	2201      	movs	r2, #1
 802c27a:	601a      	str	r2, [r3, #0]
 802c27c:	681a      	ldr	r2, [r3, #0]
 802c27e:	2a00      	cmp	r2, #0
 802c280:	d1fc      	bne.n	802c27c <CRC_Lock+0x60>
 802c282:	4b0c      	ldr	r3, [pc, #48]	; (802c2b4 <CRC_Lock+0x98>)
 802c284:	6018      	str	r0, [r3, #0]
 802c286:	6818      	ldr	r0, [r3, #0]
 802c288:	1a43      	subs	r3, r0, r1
 802c28a:	4258      	negs	r0, r3
 802c28c:	4158      	adcs	r0, r3
 802c28e:	bd30      	pop	{r4, r5, pc}
 802c290:	4b09      	ldr	r3, [pc, #36]	; (802c2b8 <CRC_Lock+0x9c>)
 802c292:	2201      	movs	r2, #1
 802c294:	601a      	str	r2, [r3, #0]
 802c296:	681a      	ldr	r2, [r3, #0]
 802c298:	2a00      	cmp	r2, #0
 802c29a:	d1fc      	bne.n	802c296 <CRC_Lock+0x7a>
 802c29c:	4b07      	ldr	r3, [pc, #28]	; (802c2bc <CRC_Lock+0xa0>)
 802c29e:	e7f1      	b.n	802c284 <CRC_Lock+0x68>
 802c2a0:	e0002000 	.word	0xe0002000
 802c2a4:	e000ed00 	.word	0xe000ed00
 802c2a8:	e0042000 	.word	0xe0042000
 802c2ac:	5c001000 	.word	0x5c001000
 802c2b0:	58024c08 	.word	0x58024c08
 802c2b4:	58024c00 	.word	0x58024c00
 802c2b8:	40023008 	.word	0x40023008
 802c2bc:	40023000 	.word	0x40023000

0802c2c0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802c2c0:	6101      	str	r1, [r0, #16]
 802c2c2:	4770      	bx	lr

0802c2c4 <_ZN8touchgfx8Gestures4tickEv>:
 802c2c4:	7b83      	ldrb	r3, [r0, #14]
 802c2c6:	b14b      	cbz	r3, 802c2dc <_ZN8touchgfx8Gestures4tickEv+0x18>
 802c2c8:	8903      	ldrh	r3, [r0, #8]
 802c2ca:	3301      	adds	r3, #1
 802c2cc:	b29b      	uxth	r3, r3
 802c2ce:	2b07      	cmp	r3, #7
 802c2d0:	8103      	strh	r3, [r0, #8]
 802c2d2:	bf81      	itttt	hi
 802c2d4:	2300      	movhi	r3, #0
 802c2d6:	8143      	strhhi	r3, [r0, #10]
 802c2d8:	8183      	strhhi	r3, [r0, #12]
 802c2da:	7383      	strbhi	r3, [r0, #14]
 802c2dc:	4770      	bx	lr
	...

0802c2e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802c2e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c2e4:	4698      	mov	r8, r3
 802c2e6:	8883      	ldrh	r3, [r0, #4]
 802c2e8:	4604      	mov	r4, r0
 802c2ea:	4617      	mov	r7, r2
 802c2ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c2f0:	eba8 0303 	sub.w	r3, r8, r3
 802c2f4:	4a19      	ldr	r2, [pc, #100]	; (802c35c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802c2f6:	460e      	mov	r6, r1
 802c2f8:	b21b      	sxth	r3, r3
 802c2fa:	88c1      	ldrh	r1, [r0, #6]
 802c2fc:	9200      	str	r2, [sp, #0]
 802c2fe:	2000      	movs	r0, #0
 802c300:	2b00      	cmp	r3, #0
 802c302:	8aa2      	ldrh	r2, [r4, #20]
 802c304:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802c308:	bfb8      	it	lt
 802c30a:	425b      	neglt	r3, r3
 802c30c:	f88d 0004 	strb.w	r0, [sp, #4]
 802c310:	f8ad 1008 	strh.w	r1, [sp, #8]
 802c314:	b21b      	sxth	r3, r3
 802c316:	f8ad 800a 	strh.w	r8, [sp, #10]
 802c31a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802c31e:	4293      	cmp	r3, r2
 802c320:	dc07      	bgt.n	802c332 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802c322:	1a69      	subs	r1, r5, r1
 802c324:	b209      	sxth	r1, r1
 802c326:	2900      	cmp	r1, #0
 802c328:	bfb8      	it	lt
 802c32a:	4249      	neglt	r1, r1
 802c32c:	b209      	sxth	r1, r1
 802c32e:	428a      	cmp	r2, r1
 802c330:	da10      	bge.n	802c354 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802c332:	6920      	ldr	r0, [r4, #16]
 802c334:	4669      	mov	r1, sp
 802c336:	eba8 0606 	sub.w	r6, r8, r6
 802c33a:	1bef      	subs	r7, r5, r7
 802c33c:	6803      	ldr	r3, [r0, #0]
 802c33e:	685b      	ldr	r3, [r3, #4]
 802c340:	4798      	blx	r3
 802c342:	2300      	movs	r3, #0
 802c344:	2001      	movs	r0, #1
 802c346:	8166      	strh	r6, [r4, #10]
 802c348:	8123      	strh	r3, [r4, #8]
 802c34a:	81a7      	strh	r7, [r4, #12]
 802c34c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802c350:	80e5      	strh	r5, [r4, #6]
 802c352:	73a0      	strb	r0, [r4, #14]
 802c354:	b004      	add	sp, #16
 802c356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c35a:	bf00      	nop
 802c35c:	08030014 	.word	0x08030014

0802c360 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802c360:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c362:	461e      	mov	r6, r3
 802c364:	1e4b      	subs	r3, r1, #1
 802c366:	b085      	sub	sp, #20
 802c368:	4604      	mov	r4, r0
 802c36a:	2b01      	cmp	r3, #1
 802c36c:	460d      	mov	r5, r1
 802c36e:	4617      	mov	r7, r2
 802c370:	d84b      	bhi.n	802c40a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802c372:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802c376:	1cd3      	adds	r3, r2, #3
 802c378:	b29b      	uxth	r3, r3
 802c37a:	2b06      	cmp	r3, #6
 802c37c:	d916      	bls.n	802c3ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802c37e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802c420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c382:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c386:	f8cd c004 	str.w	ip, [sp, #4]
 802c38a:	f04f 0c00 	mov.w	ip, #0
 802c38e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c392:	6900      	ldr	r0, [r0, #16]
 802c394:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c398:	a901      	add	r1, sp, #4
 802c39a:	f88d c008 	strb.w	ip, [sp, #8]
 802c39e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c3a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c3a6:	6803      	ldr	r3, [r0, #0]
 802c3a8:	689b      	ldr	r3, [r3, #8]
 802c3aa:	4798      	blx	r3
 802c3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c3b0:	1cd3      	adds	r3, r2, #3
 802c3b2:	b29b      	uxth	r3, r3
 802c3b4:	2b06      	cmp	r3, #6
 802c3b6:	d916      	bls.n	802c3e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c3b8:	f8df c064 	ldr.w	ip, [pc, #100]	; 802c420 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c3bc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c3c0:	f8cd c004 	str.w	ip, [sp, #4]
 802c3c4:	f04f 0c01 	mov.w	ip, #1
 802c3c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c3cc:	6920      	ldr	r0, [r4, #16]
 802c3ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c3d2:	a901      	add	r1, sp, #4
 802c3d4:	f88d c008 	strb.w	ip, [sp, #8]
 802c3d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c3dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c3e0:	6803      	ldr	r3, [r0, #0]
 802c3e2:	689b      	ldr	r3, [r3, #8]
 802c3e4:	4798      	blx	r3
 802c3e6:	4b0d      	ldr	r3, [pc, #52]	; (802c41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c3e8:	a901      	add	r1, sp, #4
 802c3ea:	6920      	ldr	r0, [r4, #16]
 802c3ec:	9301      	str	r3, [sp, #4]
 802c3ee:	2300      	movs	r3, #0
 802c3f0:	f88d 5008 	strb.w	r5, [sp, #8]
 802c3f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c3f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c3fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c400:	6803      	ldr	r3, [r0, #0]
 802c402:	681b      	ldr	r3, [r3, #0]
 802c404:	4798      	blx	r3
 802c406:	b005      	add	sp, #20
 802c408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c40a:	2900      	cmp	r1, #0
 802c40c:	d1eb      	bne.n	802c3e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c40e:	80a2      	strh	r2, [r4, #4]
 802c410:	80c6      	strh	r6, [r0, #6]
 802c412:	60a1      	str	r1, [r4, #8]
 802c414:	81a1      	strh	r1, [r4, #12]
 802c416:	73a1      	strb	r1, [r4, #14]
 802c418:	e7e5      	b.n	802c3e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c41a:	bf00      	nop
 802c41c:	08030000 	.word	0x08030000
 802c420:	080308a0 	.word	0x080308a0

0802c424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802c424:	10c9      	asrs	r1, r1, #3
 802c426:	2900      	cmp	r1, #0
 802c428:	bfb8      	it	lt
 802c42a:	4249      	neglt	r1, r1
 802c42c:	2801      	cmp	r0, #1
 802c42e:	d108      	bne.n	802c442 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802c430:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802c434:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802c438:	4601      	mov	r1, r0
 802c43a:	dd02      	ble.n	802c442 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802c43c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802c440:	4770      	bx	lr
 802c442:	29ff      	cmp	r1, #255	; 0xff
 802c444:	bfa8      	it	ge
 802c446:	21ff      	movge	r1, #255	; 0xff
 802c448:	4608      	mov	r0, r1
 802c44a:	4770      	bx	lr

0802c44c <_ZN8touchgfx10Rasterizer6lineToEii>:
 802c44c:	b410      	push	{r4}
 802c44e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802c452:	429c      	cmp	r4, r3
 802c454:	d803      	bhi.n	802c45e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802c456:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c45a:	f7f0 b95b 	b.w	801c714 <_ZN8touchgfx7Outline6lineToEii>
 802c45e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c462:	4770      	bx	lr

0802c464 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802c464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c468:	b08b      	sub	sp, #44	; 0x2c
 802c46a:	4606      	mov	r6, r0
 802c46c:	468a      	mov	sl, r1
 802c46e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c472:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802c476:	9308      	str	r3, [sp, #32]
 802c478:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802c47c:	9309      	str	r3, [sp, #36]	; 0x24
 802c47e:	f7f0 fab4 	bl	801c9ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802c482:	68b5      	ldr	r5, [r6, #8]
 802c484:	4604      	mov	r4, r0
 802c486:	2d00      	cmp	r5, #0
 802c488:	d044      	beq.n	802c514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c48a:	6873      	ldr	r3, [r6, #4]
 802c48c:	42ab      	cmp	r3, r5
 802c48e:	d33d      	bcc.n	802c50c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802c490:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802c494:	f04f 0800 	mov.w	r8, #0
 802c498:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802c49c:	eb02 0b03 	add.w	fp, r2, r3
 802c4a0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802c4a4:	fb02 1203 	mla	r2, r2, r3, r1
 802c4a8:	9205      	str	r2, [sp, #20]
 802c4aa:	1e6a      	subs	r2, r5, #1
 802c4ac:	9204      	str	r2, [sp, #16]
 802c4ae:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802c4b2:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c4b6:	454b      	cmp	r3, r9
 802c4b8:	463a      	mov	r2, r7
 802c4ba:	d008      	beq.n	802c4ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802c4bc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802c4c0:	eb03 0b09 	add.w	fp, r3, r9
 802c4c4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802c4c8:	fb03 1309 	mla	r3, r3, r9, r1
 802c4cc:	9305      	str	r3, [sp, #20]
 802c4ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802c4d2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802c4d6:	4498      	add	r8, r3
 802c4d8:	9b04      	ldr	r3, [sp, #16]
 802c4da:	3b01      	subs	r3, #1
 802c4dc:	9304      	str	r3, [sp, #16]
 802c4de:	9b04      	ldr	r3, [sp, #16]
 802c4e0:	3301      	adds	r3, #1
 802c4e2:	d015      	beq.n	802c510 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802c4e4:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802c4e8:	42bb      	cmp	r3, r7
 802c4ea:	d117      	bne.n	802c51c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802c4ec:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802c4f0:	9b04      	ldr	r3, [sp, #16]
 802c4f2:	4548      	cmp	r0, r9
 802c4f4:	f103 33ff 	add.w	r3, r3, #4294967295
 802c4f8:	d17d      	bne.n	802c5f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802c4fa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802c4fe:	4401      	add	r1, r0
 802c500:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802c504:	4480      	add	r8, r0
 802c506:	e7e9      	b.n	802c4dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802c508:	461f      	mov	r7, r3
 802c50a:	e042      	b.n	802c592 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802c50c:	2000      	movs	r0, #0
 802c50e:	e002      	b.n	802c516 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802c510:	2900      	cmp	r1, #0
 802c512:	d16d      	bne.n	802c5f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802c514:	2001      	movs	r0, #1
 802c516:	b00b      	add	sp, #44	; 0x2c
 802c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c51c:	b379      	cbz	r1, 802c57e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802c51e:	2f00      	cmp	r7, #0
 802c520:	db29      	blt.n	802c576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c522:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802c526:	42bb      	cmp	r3, r7
 802c528:	dd25      	ble.n	802c576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c52a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802c52e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802c532:	f7ff ff77 	bl	802c424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802c536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c538:	fb10 f003 	smulbb	r0, r0, r3
 802c53c:	b280      	uxth	r0, r0
 802c53e:	1c41      	adds	r1, r0, #1
 802c540:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c544:	1209      	asrs	r1, r1, #8
 802c546:	f011 0fff 	tst.w	r1, #255	; 0xff
 802c54a:	d014      	beq.n	802c576 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c54c:	b2c9      	uxtb	r1, r1
 802c54e:	9808      	ldr	r0, [sp, #32]
 802c550:	b2ba      	uxth	r2, r7
 802c552:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802c554:	9102      	str	r1, [sp, #8]
 802c556:	2101      	movs	r1, #1
 802c558:	4413      	add	r3, r2
 802c55a:	4402      	add	r2, r0
 802c55c:	9101      	str	r1, [sp, #4]
 802c55e:	fa0f f18b 	sxth.w	r1, fp
 802c562:	f8da 0000 	ldr.w	r0, [sl]
 802c566:	b21b      	sxth	r3, r3
 802c568:	9100      	str	r1, [sp, #0]
 802c56a:	b212      	sxth	r2, r2
 802c56c:	6941      	ldr	r1, [r0, #20]
 802c56e:	4650      	mov	r0, sl
 802c570:	460d      	mov	r5, r1
 802c572:	9905      	ldr	r1, [sp, #20]
 802c574:	47a8      	blx	r5
 802c576:	9b04      	ldr	r3, [sp, #16]
 802c578:	1c7a      	adds	r2, r7, #1
 802c57a:	3301      	adds	r3, #1
 802c57c:	d0ca      	beq.n	802c514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c57e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c582:	1abb      	subs	r3, r7, r2
 802c584:	2b00      	cmp	r3, #0
 802c586:	dd31      	ble.n	802c5ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c588:	2a00      	cmp	r2, #0
 802c58a:	dabd      	bge.n	802c508 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802c58c:	2f00      	cmp	r7, #0
 802c58e:	dd2d      	ble.n	802c5ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c590:	2200      	movs	r2, #0
 802c592:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802c596:	19d1      	adds	r1, r2, r7
 802c598:	4299      	cmp	r1, r3
 802c59a:	db02      	blt.n	802c5a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802c59c:	1a9f      	subs	r7, r3, r2
 802c59e:	2f00      	cmp	r7, #0
 802c5a0:	dd24      	ble.n	802c5ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c5a2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802c5a6:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802c5aa:	f7ff ff3b 	bl	802c424 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c5b0:	fb10 f003 	smulbb	r0, r0, r3
 802c5b4:	b280      	uxth	r0, r0
 802c5b6:	1c41      	adds	r1, r0, #1
 802c5b8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c5bc:	1209      	asrs	r1, r1, #8
 802c5be:	f011 0fff 	tst.w	r1, #255	; 0xff
 802c5c2:	d013      	beq.n	802c5ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c5c4:	b292      	uxth	r2, r2
 802c5c6:	9808      	ldr	r0, [sp, #32]
 802c5c8:	b2c9      	uxtb	r1, r1
 802c5ca:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802c5cc:	b23f      	sxth	r7, r7
 802c5ce:	4413      	add	r3, r2
 802c5d0:	9102      	str	r1, [sp, #8]
 802c5d2:	4402      	add	r2, r0
 802c5d4:	fa0f f18b 	sxth.w	r1, fp
 802c5d8:	f8da 0000 	ldr.w	r0, [sl]
 802c5dc:	b21b      	sxth	r3, r3
 802c5de:	9100      	str	r1, [sp, #0]
 802c5e0:	b212      	sxth	r2, r2
 802c5e2:	9701      	str	r7, [sp, #4]
 802c5e4:	9905      	ldr	r1, [sp, #20]
 802c5e6:	6947      	ldr	r7, [r0, #20]
 802c5e8:	4650      	mov	r0, sl
 802c5ea:	47b8      	blx	r7
 802c5ec:	464b      	mov	r3, r9
 802c5ee:	e75e      	b.n	802c4ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802c5f0:	2f00      	cmp	r7, #0
 802c5f2:	da96      	bge.n	802c522 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802c5f4:	e78e      	b.n	802c514 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c5f6:	2900      	cmp	r1, #0
 802c5f8:	d0f8      	beq.n	802c5ec <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c5fa:	e790      	b.n	802c51e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802c5fc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802c5fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802c600:	4b4b      	ldr	r3, [pc, #300]	; (802c730 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 802c602:	2500      	movs	r5, #0
 802c604:	f100 0620 	add.w	r6, r0, #32
 802c608:	4604      	mov	r4, r0
 802c60a:	f100 0718 	add.w	r7, r0, #24
 802c60e:	4690      	mov	r8, r2
 802c610:	e9c0 3100 	strd	r3, r1, [r0]
 802c614:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802c618:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802c61c:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802c620:	4630      	mov	r0, r6
 802c622:	f7ef fbbd 	bl	801bda0 <_ZN8touchgfx7OutlineC1Ev>
 802c626:	2301      	movs	r3, #1
 802c628:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802c62c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802c630:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802c634:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802c638:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802c63c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802c640:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802c644:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802c648:	9500      	str	r5, [sp, #0]
 802c64a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 802c64e:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802c652:	f9b8 2000 	ldrsh.w	r2, [r8]
 802c656:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802c65a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802c65e:	4410      	add	r0, r2
 802c660:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802c664:	b280      	uxth	r0, r0
 802c666:	fa0f fa80 	sxth.w	sl, r0
 802c66a:	45aa      	cmp	sl, r5
 802c66c:	dd5c      	ble.n	802c728 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802c66e:	4591      	cmp	r9, r2
 802c670:	dd5a      	ble.n	802c728 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802c672:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802c676:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802c67a:	440b      	add	r3, r1
 802c67c:	b29b      	uxth	r3, r3
 802c67e:	b21d      	sxth	r5, r3
 802c680:	2d00      	cmp	r5, #0
 802c682:	dd51      	ble.n	802c728 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802c684:	458e      	cmp	lr, r1
 802c686:	dd4f      	ble.n	802c728 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802c688:	45d1      	cmp	r9, sl
 802c68a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802c68e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802c692:	bfb8      	it	lt
 802c694:	fa1f f089 	uxthlt.w	r0, r9
 802c698:	45ae      	cmp	lr, r5
 802c69a:	f8ad 2000 	strh.w	r2, [sp]
 802c69e:	bfb8      	it	lt
 802c6a0:	fa1f f38e 	uxthlt.w	r3, lr
 802c6a4:	1a80      	subs	r0, r0, r2
 802c6a6:	f8ad 1002 	strh.w	r1, [sp, #2]
 802c6aa:	1a5b      	subs	r3, r3, r1
 802c6ac:	f8ad 0004 	strh.w	r0, [sp, #4]
 802c6b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c6b4:	466d      	mov	r5, sp
 802c6b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 802c6ba:	e887 0003 	stmia.w	r7, {r0, r1}
 802c6be:	f8dc 3000 	ldr.w	r3, [ip]
 802c6c2:	4660      	mov	r0, ip
 802c6c4:	4639      	mov	r1, r7
 802c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c6c8:	4798      	blx	r3
 802c6ca:	6861      	ldr	r1, [r4, #4]
 802c6cc:	4628      	mov	r0, r5
 802c6ce:	3104      	adds	r1, #4
 802c6d0:	f7f1 fcea 	bl	801e0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c6d4:	4638      	mov	r0, r7
 802c6d6:	f7f1 fcbf 	bl	801e058 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c6da:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c6de:	f8bd 2000 	ldrh.w	r2, [sp]
 802c6e2:	4630      	mov	r0, r6
 802c6e4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802c6e8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802c6ec:	f7ef fb3c 	bl	801bd68 <_ZN8touchgfx7Outline5resetEv>
 802c6f0:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c6f4:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802c6f8:	4620      	mov	r0, r4
 802c6fa:	015b      	lsls	r3, r3, #5
 802c6fc:	60a3      	str	r3, [r4, #8]
 802c6fe:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c702:	015b      	lsls	r3, r3, #5
 802c704:	60e3      	str	r3, [r4, #12]
 802c706:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802c70a:	015b      	lsls	r3, r3, #5
 802c70c:	6123      	str	r3, [r4, #16]
 802c70e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802c712:	015b      	lsls	r3, r3, #5
 802c714:	6163      	str	r3, [r4, #20]
 802c716:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802c71a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802c71e:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802c722:	b002      	add	sp, #8
 802c724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c728:	2300      	movs	r3, #0
 802c72a:	9301      	str	r3, [sp, #4]
 802c72c:	e7c2      	b.n	802c6b4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802c72e:	bf00      	nop
 802c730:	080302cc 	.word	0x080302cc

0802c734 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802c734:	4b07      	ldr	r3, [pc, #28]	; (802c754 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802c736:	b510      	push	{r4, lr}
 802c738:	781b      	ldrb	r3, [r3, #0]
 802c73a:	2b01      	cmp	r3, #1
 802c73c:	d108      	bne.n	802c750 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802c73e:	6843      	ldr	r3, [r0, #4]
 802c740:	6814      	ldr	r4, [r2, #0]
 802c742:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802c746:	680b      	ldr	r3, [r1, #0]
 802c748:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802c74c:	6013      	str	r3, [r2, #0]
 802c74e:	600c      	str	r4, [r1, #0]
 802c750:	bd10      	pop	{r4, pc}
 802c752:	bf00      	nop
 802c754:	2400d824 	.word	0x2400d824

0802c758 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802c758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c75a:	ab02      	add	r3, sp, #8
 802c75c:	4604      	mov	r4, r0
 802c75e:	9101      	str	r1, [sp, #4]
 802c760:	a901      	add	r1, sp, #4
 802c762:	f843 2d08 	str.w	r2, [r3, #-8]!
 802c766:	461a      	mov	r2, r3
 802c768:	f7ff ffe4 	bl	802c734 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c76c:	68a3      	ldr	r3, [r4, #8]
 802c76e:	9901      	ldr	r1, [sp, #4]
 802c770:	9a00      	ldr	r2, [sp, #0]
 802c772:	1ac9      	subs	r1, r1, r3
 802c774:	68e3      	ldr	r3, [r4, #12]
 802c776:	1ad2      	subs	r2, r2, r3
 802c778:	9101      	str	r1, [sp, #4]
 802c77a:	2a00      	cmp	r2, #0
 802c77c:	9200      	str	r2, [sp, #0]
 802c77e:	db1c      	blt.n	802c7ba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802c780:	6963      	ldr	r3, [r4, #20]
 802c782:	429a      	cmp	r2, r3
 802c784:	bfac      	ite	ge
 802c786:	2002      	movge	r0, #2
 802c788:	2000      	movlt	r0, #0
 802c78a:	2900      	cmp	r1, #0
 802c78c:	db17      	blt.n	802c7be <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802c78e:	6923      	ldr	r3, [r4, #16]
 802c790:	4299      	cmp	r1, r3
 802c792:	bfac      	ite	ge
 802c794:	2308      	movge	r3, #8
 802c796:	2300      	movlt	r3, #0
 802c798:	4303      	orrs	r3, r0
 802c79a:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802c79e:	b2dd      	uxtb	r5, r3
 802c7a0:	b978      	cbnz	r0, 802c7c2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802c7a2:	f104 0020 	add.w	r0, r4, #32
 802c7a6:	f7ff fe51 	bl	802c44c <_ZN8touchgfx10Rasterizer6lineToEii>
 802c7aa:	9b01      	ldr	r3, [sp, #4]
 802c7ac:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802c7b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 802c7b2:	9b00      	ldr	r3, [sp, #0]
 802c7b4:	6623      	str	r3, [r4, #96]	; 0x60
 802c7b6:	b002      	add	sp, #8
 802c7b8:	bd70      	pop	{r4, r5, r6, pc}
 802c7ba:	2001      	movs	r0, #1
 802c7bc:	e7e5      	b.n	802c78a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802c7be:	2304      	movs	r3, #4
 802c7c0:	e7ea      	b.n	802c798 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802c7c2:	b113      	cbz	r3, 802c7ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802c7c4:	ea10 0305 	ands.w	r3, r0, r5
 802c7c8:	d11d      	bne.n	802c806 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802c7ca:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802c7ce:	f104 0620 	add.w	r6, r4, #32
 802c7d2:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802c7d6:	b193      	cbz	r3, 802c7fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802c7d8:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802c7dc:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802c7e0:	4298      	cmp	r0, r3
 802c7e2:	d802      	bhi.n	802c7ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802c7e4:	4630      	mov	r0, r6
 802c7e6:	f7ef ffaf 	bl	801c748 <_ZN8touchgfx7Outline6moveToEii>
 802c7ea:	2300      	movs	r3, #0
 802c7ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802c7f0:	2301      	movs	r3, #1
 802c7f2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802c7f6:	4630      	mov	r0, r6
 802c7f8:	e9dd 2100 	ldrd	r2, r1, [sp]
 802c7fc:	e7d3      	b.n	802c7a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802c7fe:	4630      	mov	r0, r6
 802c800:	f7ff fe24 	bl	802c44c <_ZN8touchgfx10Rasterizer6lineToEii>
 802c804:	e7f7      	b.n	802c7f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802c806:	461d      	mov	r5, r3
 802c808:	e7cf      	b.n	802c7aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

0802c80a <_ZN8touchgfx6Canvas5closeEv>:
 802c80a:	b538      	push	{r3, r4, r5, lr}
 802c80c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802c810:	4604      	mov	r4, r0
 802c812:	b993      	cbnz	r3, 802c83a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c814:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802c818:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802c81c:	4213      	tst	r3, r2
 802c81e:	d10c      	bne.n	802c83a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c820:	f100 0520 	add.w	r5, r0, #32
 802c824:	b123      	cbz	r3, 802c830 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802c826:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802c82a:	4628      	mov	r0, r5
 802c82c:	f7ff fe0e 	bl	802c44c <_ZN8touchgfx10Rasterizer6lineToEii>
 802c830:	4628      	mov	r0, r5
 802c832:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802c836:	f7ff fe09 	bl	802c44c <_ZN8touchgfx10Rasterizer6lineToEii>
 802c83a:	2300      	movs	r3, #0
 802c83c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802c840:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802c844:	4298      	cmp	r0, r3
 802c846:	bf34      	ite	cc
 802c848:	2000      	movcc	r0, #0
 802c84a:	2001      	movcs	r0, #1
 802c84c:	bd38      	pop	{r3, r4, r5, pc}
	...

0802c850 <_ZN8touchgfx6Canvas6renderEh>:
 802c850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c854:	4604      	mov	r4, r0
 802c856:	6840      	ldr	r0, [r0, #4]
 802c858:	460d      	mov	r5, r1
 802c85a:	6803      	ldr	r3, [r0, #0]
 802c85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c85e:	4798      	blx	r3
 802c860:	fb10 f105 	smulbb	r1, r0, r5
 802c864:	b289      	uxth	r1, r1
 802c866:	1c4d      	adds	r5, r1, #1
 802c868:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802c86c:	122d      	asrs	r5, r5, #8
 802c86e:	f000 8097 	beq.w	802c9a0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802c872:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802c876:	2b00      	cmp	r3, #0
 802c878:	f000 8092 	beq.w	802c9a0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802c87c:	4620      	mov	r0, r4
 802c87e:	f7ff ffc4 	bl	802c80a <_ZN8touchgfx6Canvas5closeEv>
 802c882:	4607      	mov	r7, r0
 802c884:	2800      	cmp	r0, #0
 802c886:	d043      	beq.n	802c910 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802c888:	6863      	ldr	r3, [r4, #4]
 802c88a:	4e46      	ldr	r6, [pc, #280]	; (802c9a4 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802c88c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802c88e:	6837      	ldr	r7, [r6, #0]
 802c890:	6803      	ldr	r3, [r0, #0]
 802c892:	689b      	ldr	r3, [r3, #8]
 802c894:	4798      	blx	r3
 802c896:	4601      	mov	r1, r0
 802c898:	4638      	mov	r0, r7
 802c89a:	f7ed fe55 	bl	801a548 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802c89e:	4607      	mov	r7, r0
 802c8a0:	f7e4 fc8e 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 802c8a4:	6803      	ldr	r3, [r0, #0]
 802c8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c8a8:	4798      	blx	r3
 802c8aa:	4680      	mov	r8, r0
 802c8ac:	f7e4 fc88 	bl	80111c0 <_ZN8touchgfx3HAL3lcdEv>
 802c8b0:	6803      	ldr	r3, [r0, #0]
 802c8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c8b4:	4798      	blx	r3
 802c8b6:	280b      	cmp	r0, #11
 802c8b8:	d857      	bhi.n	802c96a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802c8ba:	e8df f000 	tbb	[pc, r0]
 802c8be:	584d      	.short	0x584d
 802c8c0:	2d560668 	.word	0x2d560668
 802c8c4:	6161613d 	.word	0x6161613d
 802c8c8:	6161      	.short	0x6161
 802c8ca:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802c8ce:	2208      	movs	r2, #8
 802c8d0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c8d4:	fb91 f2f2 	sdiv	r2, r1, r2
 802c8d8:	fb08 2303 	mla	r3, r8, r3, r2
 802c8dc:	441f      	add	r7, r3
 802c8de:	424b      	negs	r3, r1
 802c8e0:	f001 0107 	and.w	r1, r1, #7
 802c8e4:	f003 0307 	and.w	r3, r3, #7
 802c8e8:	bf58      	it	pl
 802c8ea:	4259      	negpl	r1, r3
 802c8ec:	b2c9      	uxtb	r1, r1
 802c8ee:	6860      	ldr	r0, [r4, #4]
 802c8f0:	b2ed      	uxtb	r5, r5
 802c8f2:	fa0f f388 	sxth.w	r3, r8
 802c8f6:	463a      	mov	r2, r7
 802c8f8:	e9cd 1500 	strd	r1, r5, [sp]
 802c8fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802c8fe:	f104 0020 	add.w	r0, r4, #32
 802c902:	f7ff fdaf 	bl	802c464 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802c906:	4607      	mov	r7, r0
 802c908:	6830      	ldr	r0, [r6, #0]
 802c90a:	6803      	ldr	r3, [r0, #0]
 802c90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c90e:	4798      	blx	r3
 802c910:	4638      	mov	r0, r7
 802c912:	b002      	add	sp, #8
 802c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c918:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802c91c:	2204      	movs	r2, #4
 802c91e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c922:	fb91 f2f2 	sdiv	r2, r1, r2
 802c926:	fb08 2303 	mla	r3, r8, r3, r2
 802c92a:	441f      	add	r7, r3
 802c92c:	424b      	negs	r3, r1
 802c92e:	f001 0103 	and.w	r1, r1, #3
 802c932:	f003 0303 	and.w	r3, r3, #3
 802c936:	e7d7      	b.n	802c8e8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 802c938:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802c93c:	2202      	movs	r2, #2
 802c93e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c942:	2900      	cmp	r1, #0
 802c944:	fb91 f2f2 	sdiv	r2, r1, r2
 802c948:	f001 0101 	and.w	r1, r1, #1
 802c94c:	fb08 2303 	mla	r3, r8, r3, r2
 802c950:	bfb8      	it	lt
 802c952:	4249      	neglt	r1, r1
 802c954:	441f      	add	r7, r3
 802c956:	e7c9      	b.n	802c8ec <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802c958:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c95c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802c960:	fb08 f303 	mul.w	r3, r8, r3
 802c964:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802c968:	441f      	add	r7, r3
 802c96a:	2100      	movs	r1, #0
 802c96c:	e7bf      	b.n	802c8ee <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802c96e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c972:	2103      	movs	r1, #3
 802c974:	fb08 f203 	mul.w	r2, r8, r3
 802c978:	8b23      	ldrh	r3, [r4, #24]
 802c97a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802c97e:	e7f3      	b.n	802c968 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802c980:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c984:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802c988:	fb08 2303 	mla	r3, r8, r3, r2
 802c98c:	e7ec      	b.n	802c968 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802c98e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802c992:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802c996:	fb08 f303 	mul.w	r3, r8, r3
 802c99a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c99e:	e7e3      	b.n	802c968 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802c9a0:	2701      	movs	r7, #1
 802c9a2:	e7b5      	b.n	802c910 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802c9a4:	2400d82c 	.word	0x2400d82c

0802c9a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802c9a8:	b513      	push	{r0, r1, r4, lr}
 802c9aa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802c9ae:	4604      	mov	r4, r0
 802c9b0:	e9cd 2100 	strd	r2, r1, [sp]
 802c9b4:	b1a3      	cbz	r3, 802c9e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802c9b6:	466a      	mov	r2, sp
 802c9b8:	a901      	add	r1, sp, #4
 802c9ba:	4620      	mov	r0, r4
 802c9bc:	f7ff feba 	bl	802c734 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c9c0:	68a3      	ldr	r3, [r4, #8]
 802c9c2:	9901      	ldr	r1, [sp, #4]
 802c9c4:	9a00      	ldr	r2, [sp, #0]
 802c9c6:	1ac9      	subs	r1, r1, r3
 802c9c8:	68e3      	ldr	r3, [r4, #12]
 802c9ca:	1ad2      	subs	r2, r2, r3
 802c9cc:	9101      	str	r1, [sp, #4]
 802c9ce:	2a00      	cmp	r2, #0
 802c9d0:	9200      	str	r2, [sp, #0]
 802c9d2:	da0b      	bge.n	802c9ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802c9d4:	2301      	movs	r3, #1
 802c9d6:	2900      	cmp	r1, #0
 802c9d8:	da0e      	bge.n	802c9f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802c9da:	f043 0304 	orr.w	r3, r3, #4
 802c9de:	e013      	b.n	802ca08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802c9e0:	f7ff ff13 	bl	802c80a <_ZN8touchgfx6Canvas5closeEv>
 802c9e4:	2800      	cmp	r0, #0
 802c9e6:	d1e6      	bne.n	802c9b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802c9e8:	b002      	add	sp, #8
 802c9ea:	bd10      	pop	{r4, pc}
 802c9ec:	6963      	ldr	r3, [r4, #20]
 802c9ee:	429a      	cmp	r2, r3
 802c9f0:	bfac      	ite	ge
 802c9f2:	2302      	movge	r3, #2
 802c9f4:	2300      	movlt	r3, #0
 802c9f6:	e7ee      	b.n	802c9d6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802c9f8:	6920      	ldr	r0, [r4, #16]
 802c9fa:	4281      	cmp	r1, r0
 802c9fc:	bfac      	ite	ge
 802c9fe:	2008      	movge	r0, #8
 802ca00:	2000      	movlt	r0, #0
 802ca02:	4318      	orrs	r0, r3
 802ca04:	b2c3      	uxtb	r3, r0
 802ca06:	b158      	cbz	r0, 802ca20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802ca08:	2201      	movs	r2, #1
 802ca0a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802ca0e:	9901      	ldr	r1, [sp, #4]
 802ca10:	9a00      	ldr	r2, [sp, #0]
 802ca12:	66a1      	str	r1, [r4, #104]	; 0x68
 802ca14:	66e2      	str	r2, [r4, #108]	; 0x6c
 802ca16:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802ca1a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802ca1e:	e7e3      	b.n	802c9e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802ca20:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802ca24:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802ca28:	4298      	cmp	r0, r3
 802ca2a:	d803      	bhi.n	802ca34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802ca2c:	f104 0020 	add.w	r0, r4, #32
 802ca30:	f7ef fe8a 	bl	801c748 <_ZN8touchgfx7Outline6moveToEii>
 802ca34:	2300      	movs	r3, #0
 802ca36:	2201      	movs	r2, #1
 802ca38:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802ca3c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 802ca40:	e7e5      	b.n	802ca0e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802ca42 <__aeabi_atexit>:
 802ca42:	460b      	mov	r3, r1
 802ca44:	4601      	mov	r1, r0
 802ca46:	4618      	mov	r0, r3
 802ca48:	f000 b852 	b.w	802caf0 <__cxa_atexit>

0802ca4c <_ZdlPvj>:
 802ca4c:	f000 b812 	b.w	802ca74 <_ZdlPv>

0802ca50 <__cxa_guard_acquire>:
 802ca50:	6803      	ldr	r3, [r0, #0]
 802ca52:	07db      	lsls	r3, r3, #31
 802ca54:	d406      	bmi.n	802ca64 <__cxa_guard_acquire+0x14>
 802ca56:	7843      	ldrb	r3, [r0, #1]
 802ca58:	b103      	cbz	r3, 802ca5c <__cxa_guard_acquire+0xc>
 802ca5a:	deff      	udf	#255	; 0xff
 802ca5c:	2301      	movs	r3, #1
 802ca5e:	7043      	strb	r3, [r0, #1]
 802ca60:	4618      	mov	r0, r3
 802ca62:	4770      	bx	lr
 802ca64:	2000      	movs	r0, #0
 802ca66:	4770      	bx	lr

0802ca68 <__cxa_guard_release>:
 802ca68:	2301      	movs	r3, #1
 802ca6a:	6003      	str	r3, [r0, #0]
 802ca6c:	4770      	bx	lr

0802ca6e <__cxa_pure_virtual>:
 802ca6e:	b508      	push	{r3, lr}
 802ca70:	f000 f80e 	bl	802ca90 <_ZSt9terminatev>

0802ca74 <_ZdlPv>:
 802ca74:	f000 b88e 	b.w	802cb94 <free>

0802ca78 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802ca78:	b508      	push	{r3, lr}
 802ca7a:	4780      	blx	r0
 802ca7c:	f000 f80d 	bl	802ca9a <abort>

0802ca80 <_ZSt13get_terminatev>:
 802ca80:	4b02      	ldr	r3, [pc, #8]	; (802ca8c <_ZSt13get_terminatev+0xc>)
 802ca82:	6818      	ldr	r0, [r3, #0]
 802ca84:	f3bf 8f5b 	dmb	ish
 802ca88:	4770      	bx	lr
 802ca8a:	bf00      	nop
 802ca8c:	240005f8 	.word	0x240005f8

0802ca90 <_ZSt9terminatev>:
 802ca90:	b508      	push	{r3, lr}
 802ca92:	f7ff fff5 	bl	802ca80 <_ZSt13get_terminatev>
 802ca96:	f7ff ffef 	bl	802ca78 <_ZN10__cxxabiv111__terminateEPFvvE>

0802ca9a <abort>:
 802ca9a:	b508      	push	{r3, lr}
 802ca9c:	2006      	movs	r0, #6
 802ca9e:	f000 fc9d 	bl	802d3dc <raise>
 802caa2:	2001      	movs	r0, #1
 802caa4:	f7d5 fa62 	bl	8001f6c <_exit>

0802caa8 <__assert_func>:
 802caa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802caaa:	4614      	mov	r4, r2
 802caac:	461a      	mov	r2, r3
 802caae:	4b09      	ldr	r3, [pc, #36]	; (802cad4 <__assert_func+0x2c>)
 802cab0:	681b      	ldr	r3, [r3, #0]
 802cab2:	4605      	mov	r5, r0
 802cab4:	68d8      	ldr	r0, [r3, #12]
 802cab6:	b14c      	cbz	r4, 802cacc <__assert_func+0x24>
 802cab8:	4b07      	ldr	r3, [pc, #28]	; (802cad8 <__assert_func+0x30>)
 802caba:	9100      	str	r1, [sp, #0]
 802cabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802cac0:	4906      	ldr	r1, [pc, #24]	; (802cadc <__assert_func+0x34>)
 802cac2:	462b      	mov	r3, r5
 802cac4:	f000 f828 	bl	802cb18 <fiprintf>
 802cac8:	f7ff ffe7 	bl	802ca9a <abort>
 802cacc:	4b04      	ldr	r3, [pc, #16]	; (802cae0 <__assert_func+0x38>)
 802cace:	461c      	mov	r4, r3
 802cad0:	e7f3      	b.n	802caba <__assert_func+0x12>
 802cad2:	bf00      	nop
 802cad4:	240005fc 	.word	0x240005fc
 802cad8:	08030b68 	.word	0x08030b68
 802cadc:	08030b75 	.word	0x08030b75
 802cae0:	08030ba3 	.word	0x08030ba3

0802cae4 <atexit>:
 802cae4:	2300      	movs	r3, #0
 802cae6:	4601      	mov	r1, r0
 802cae8:	461a      	mov	r2, r3
 802caea:	4618      	mov	r0, r3
 802caec:	f000 bd52 	b.w	802d594 <__register_exitproc>

0802caf0 <__cxa_atexit>:
 802caf0:	b510      	push	{r4, lr}
 802caf2:	4c05      	ldr	r4, [pc, #20]	; (802cb08 <__cxa_atexit+0x18>)
 802caf4:	4613      	mov	r3, r2
 802caf6:	b12c      	cbz	r4, 802cb04 <__cxa_atexit+0x14>
 802caf8:	460a      	mov	r2, r1
 802cafa:	4601      	mov	r1, r0
 802cafc:	2002      	movs	r0, #2
 802cafe:	f000 fd49 	bl	802d594 <__register_exitproc>
 802cb02:	bd10      	pop	{r4, pc}
 802cb04:	4620      	mov	r0, r4
 802cb06:	e7fc      	b.n	802cb02 <__cxa_atexit+0x12>
 802cb08:	0802d595 	.word	0x0802d595

0802cb0c <__errno>:
 802cb0c:	4b01      	ldr	r3, [pc, #4]	; (802cb14 <__errno+0x8>)
 802cb0e:	6818      	ldr	r0, [r3, #0]
 802cb10:	4770      	bx	lr
 802cb12:	bf00      	nop
 802cb14:	240005fc 	.word	0x240005fc

0802cb18 <fiprintf>:
 802cb18:	b40e      	push	{r1, r2, r3}
 802cb1a:	b503      	push	{r0, r1, lr}
 802cb1c:	4601      	mov	r1, r0
 802cb1e:	ab03      	add	r3, sp, #12
 802cb20:	4805      	ldr	r0, [pc, #20]	; (802cb38 <fiprintf+0x20>)
 802cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 802cb26:	6800      	ldr	r0, [r0, #0]
 802cb28:	9301      	str	r3, [sp, #4]
 802cb2a:	f000 f95b 	bl	802cde4 <_vfiprintf_r>
 802cb2e:	b002      	add	sp, #8
 802cb30:	f85d eb04 	ldr.w	lr, [sp], #4
 802cb34:	b003      	add	sp, #12
 802cb36:	4770      	bx	lr
 802cb38:	240005fc 	.word	0x240005fc

0802cb3c <__libc_init_array>:
 802cb3c:	b570      	push	{r4, r5, r6, lr}
 802cb3e:	4d0d      	ldr	r5, [pc, #52]	; (802cb74 <__libc_init_array+0x38>)
 802cb40:	4c0d      	ldr	r4, [pc, #52]	; (802cb78 <__libc_init_array+0x3c>)
 802cb42:	1b64      	subs	r4, r4, r5
 802cb44:	10a4      	asrs	r4, r4, #2
 802cb46:	2600      	movs	r6, #0
 802cb48:	42a6      	cmp	r6, r4
 802cb4a:	d109      	bne.n	802cb60 <__libc_init_array+0x24>
 802cb4c:	4d0b      	ldr	r5, [pc, #44]	; (802cb7c <__libc_init_array+0x40>)
 802cb4e:	4c0c      	ldr	r4, [pc, #48]	; (802cb80 <__libc_init_array+0x44>)
 802cb50:	f001 f85a 	bl	802dc08 <_init>
 802cb54:	1b64      	subs	r4, r4, r5
 802cb56:	10a4      	asrs	r4, r4, #2
 802cb58:	2600      	movs	r6, #0
 802cb5a:	42a6      	cmp	r6, r4
 802cb5c:	d105      	bne.n	802cb6a <__libc_init_array+0x2e>
 802cb5e:	bd70      	pop	{r4, r5, r6, pc}
 802cb60:	f855 3b04 	ldr.w	r3, [r5], #4
 802cb64:	4798      	blx	r3
 802cb66:	3601      	adds	r6, #1
 802cb68:	e7ee      	b.n	802cb48 <__libc_init_array+0xc>
 802cb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 802cb6e:	4798      	blx	r3
 802cb70:	3601      	adds	r6, #1
 802cb72:	e7f2      	b.n	802cb5a <__libc_init_array+0x1e>
 802cb74:	08030d54 	.word	0x08030d54
 802cb78:	08030d54 	.word	0x08030d54
 802cb7c:	08030d54 	.word	0x08030d54
 802cb80:	08030d68 	.word	0x08030d68

0802cb84 <malloc>:
 802cb84:	4b02      	ldr	r3, [pc, #8]	; (802cb90 <malloc+0xc>)
 802cb86:	4601      	mov	r1, r0
 802cb88:	6818      	ldr	r0, [r3, #0]
 802cb8a:	f000 b88d 	b.w	802cca8 <_malloc_r>
 802cb8e:	bf00      	nop
 802cb90:	240005fc 	.word	0x240005fc

0802cb94 <free>:
 802cb94:	4b02      	ldr	r3, [pc, #8]	; (802cba0 <free+0xc>)
 802cb96:	4601      	mov	r1, r0
 802cb98:	6818      	ldr	r0, [r3, #0]
 802cb9a:	f000 b819 	b.w	802cbd0 <_free_r>
 802cb9e:	bf00      	nop
 802cba0:	240005fc 	.word	0x240005fc

0802cba4 <memcpy>:
 802cba4:	440a      	add	r2, r1
 802cba6:	4291      	cmp	r1, r2
 802cba8:	f100 33ff 	add.w	r3, r0, #4294967295
 802cbac:	d100      	bne.n	802cbb0 <memcpy+0xc>
 802cbae:	4770      	bx	lr
 802cbb0:	b510      	push	{r4, lr}
 802cbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802cbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802cbba:	4291      	cmp	r1, r2
 802cbbc:	d1f9      	bne.n	802cbb2 <memcpy+0xe>
 802cbbe:	bd10      	pop	{r4, pc}

0802cbc0 <memset>:
 802cbc0:	4402      	add	r2, r0
 802cbc2:	4603      	mov	r3, r0
 802cbc4:	4293      	cmp	r3, r2
 802cbc6:	d100      	bne.n	802cbca <memset+0xa>
 802cbc8:	4770      	bx	lr
 802cbca:	f803 1b01 	strb.w	r1, [r3], #1
 802cbce:	e7f9      	b.n	802cbc4 <memset+0x4>

0802cbd0 <_free_r>:
 802cbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802cbd2:	2900      	cmp	r1, #0
 802cbd4:	d044      	beq.n	802cc60 <_free_r+0x90>
 802cbd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cbda:	9001      	str	r0, [sp, #4]
 802cbdc:	2b00      	cmp	r3, #0
 802cbde:	f1a1 0404 	sub.w	r4, r1, #4
 802cbe2:	bfb8      	it	lt
 802cbe4:	18e4      	addlt	r4, r4, r3
 802cbe6:	f000 ff57 	bl	802da98 <__malloc_lock>
 802cbea:	4a1e      	ldr	r2, [pc, #120]	; (802cc64 <_free_r+0x94>)
 802cbec:	9801      	ldr	r0, [sp, #4]
 802cbee:	6813      	ldr	r3, [r2, #0]
 802cbf0:	b933      	cbnz	r3, 802cc00 <_free_r+0x30>
 802cbf2:	6063      	str	r3, [r4, #4]
 802cbf4:	6014      	str	r4, [r2, #0]
 802cbf6:	b003      	add	sp, #12
 802cbf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802cbfc:	f000 bf52 	b.w	802daa4 <__malloc_unlock>
 802cc00:	42a3      	cmp	r3, r4
 802cc02:	d908      	bls.n	802cc16 <_free_r+0x46>
 802cc04:	6825      	ldr	r5, [r4, #0]
 802cc06:	1961      	adds	r1, r4, r5
 802cc08:	428b      	cmp	r3, r1
 802cc0a:	bf01      	itttt	eq
 802cc0c:	6819      	ldreq	r1, [r3, #0]
 802cc0e:	685b      	ldreq	r3, [r3, #4]
 802cc10:	1949      	addeq	r1, r1, r5
 802cc12:	6021      	streq	r1, [r4, #0]
 802cc14:	e7ed      	b.n	802cbf2 <_free_r+0x22>
 802cc16:	461a      	mov	r2, r3
 802cc18:	685b      	ldr	r3, [r3, #4]
 802cc1a:	b10b      	cbz	r3, 802cc20 <_free_r+0x50>
 802cc1c:	42a3      	cmp	r3, r4
 802cc1e:	d9fa      	bls.n	802cc16 <_free_r+0x46>
 802cc20:	6811      	ldr	r1, [r2, #0]
 802cc22:	1855      	adds	r5, r2, r1
 802cc24:	42a5      	cmp	r5, r4
 802cc26:	d10b      	bne.n	802cc40 <_free_r+0x70>
 802cc28:	6824      	ldr	r4, [r4, #0]
 802cc2a:	4421      	add	r1, r4
 802cc2c:	1854      	adds	r4, r2, r1
 802cc2e:	42a3      	cmp	r3, r4
 802cc30:	6011      	str	r1, [r2, #0]
 802cc32:	d1e0      	bne.n	802cbf6 <_free_r+0x26>
 802cc34:	681c      	ldr	r4, [r3, #0]
 802cc36:	685b      	ldr	r3, [r3, #4]
 802cc38:	6053      	str	r3, [r2, #4]
 802cc3a:	4421      	add	r1, r4
 802cc3c:	6011      	str	r1, [r2, #0]
 802cc3e:	e7da      	b.n	802cbf6 <_free_r+0x26>
 802cc40:	d902      	bls.n	802cc48 <_free_r+0x78>
 802cc42:	230c      	movs	r3, #12
 802cc44:	6003      	str	r3, [r0, #0]
 802cc46:	e7d6      	b.n	802cbf6 <_free_r+0x26>
 802cc48:	6825      	ldr	r5, [r4, #0]
 802cc4a:	1961      	adds	r1, r4, r5
 802cc4c:	428b      	cmp	r3, r1
 802cc4e:	bf04      	itt	eq
 802cc50:	6819      	ldreq	r1, [r3, #0]
 802cc52:	685b      	ldreq	r3, [r3, #4]
 802cc54:	6063      	str	r3, [r4, #4]
 802cc56:	bf04      	itt	eq
 802cc58:	1949      	addeq	r1, r1, r5
 802cc5a:	6021      	streq	r1, [r4, #0]
 802cc5c:	6054      	str	r4, [r2, #4]
 802cc5e:	e7ca      	b.n	802cbf6 <_free_r+0x26>
 802cc60:	b003      	add	sp, #12
 802cc62:	bd30      	pop	{r4, r5, pc}
 802cc64:	2400d930 	.word	0x2400d930

0802cc68 <sbrk_aligned>:
 802cc68:	b570      	push	{r4, r5, r6, lr}
 802cc6a:	4e0e      	ldr	r6, [pc, #56]	; (802cca4 <sbrk_aligned+0x3c>)
 802cc6c:	460c      	mov	r4, r1
 802cc6e:	6831      	ldr	r1, [r6, #0]
 802cc70:	4605      	mov	r5, r0
 802cc72:	b911      	cbnz	r1, 802cc7a <sbrk_aligned+0x12>
 802cc74:	f000 fb7a 	bl	802d36c <_sbrk_r>
 802cc78:	6030      	str	r0, [r6, #0]
 802cc7a:	4621      	mov	r1, r4
 802cc7c:	4628      	mov	r0, r5
 802cc7e:	f000 fb75 	bl	802d36c <_sbrk_r>
 802cc82:	1c43      	adds	r3, r0, #1
 802cc84:	d00a      	beq.n	802cc9c <sbrk_aligned+0x34>
 802cc86:	1cc4      	adds	r4, r0, #3
 802cc88:	f024 0403 	bic.w	r4, r4, #3
 802cc8c:	42a0      	cmp	r0, r4
 802cc8e:	d007      	beq.n	802cca0 <sbrk_aligned+0x38>
 802cc90:	1a21      	subs	r1, r4, r0
 802cc92:	4628      	mov	r0, r5
 802cc94:	f000 fb6a 	bl	802d36c <_sbrk_r>
 802cc98:	3001      	adds	r0, #1
 802cc9a:	d101      	bne.n	802cca0 <sbrk_aligned+0x38>
 802cc9c:	f04f 34ff 	mov.w	r4, #4294967295
 802cca0:	4620      	mov	r0, r4
 802cca2:	bd70      	pop	{r4, r5, r6, pc}
 802cca4:	2400d934 	.word	0x2400d934

0802cca8 <_malloc_r>:
 802cca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ccac:	1ccd      	adds	r5, r1, #3
 802ccae:	f025 0503 	bic.w	r5, r5, #3
 802ccb2:	3508      	adds	r5, #8
 802ccb4:	2d0c      	cmp	r5, #12
 802ccb6:	bf38      	it	cc
 802ccb8:	250c      	movcc	r5, #12
 802ccba:	2d00      	cmp	r5, #0
 802ccbc:	4607      	mov	r7, r0
 802ccbe:	db01      	blt.n	802ccc4 <_malloc_r+0x1c>
 802ccc0:	42a9      	cmp	r1, r5
 802ccc2:	d905      	bls.n	802ccd0 <_malloc_r+0x28>
 802ccc4:	230c      	movs	r3, #12
 802ccc6:	603b      	str	r3, [r7, #0]
 802ccc8:	2600      	movs	r6, #0
 802ccca:	4630      	mov	r0, r6
 802cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ccd0:	4e2e      	ldr	r6, [pc, #184]	; (802cd8c <_malloc_r+0xe4>)
 802ccd2:	f000 fee1 	bl	802da98 <__malloc_lock>
 802ccd6:	6833      	ldr	r3, [r6, #0]
 802ccd8:	461c      	mov	r4, r3
 802ccda:	bb34      	cbnz	r4, 802cd2a <_malloc_r+0x82>
 802ccdc:	4629      	mov	r1, r5
 802ccde:	4638      	mov	r0, r7
 802cce0:	f7ff ffc2 	bl	802cc68 <sbrk_aligned>
 802cce4:	1c43      	adds	r3, r0, #1
 802cce6:	4604      	mov	r4, r0
 802cce8:	d14d      	bne.n	802cd86 <_malloc_r+0xde>
 802ccea:	6834      	ldr	r4, [r6, #0]
 802ccec:	4626      	mov	r6, r4
 802ccee:	2e00      	cmp	r6, #0
 802ccf0:	d140      	bne.n	802cd74 <_malloc_r+0xcc>
 802ccf2:	6823      	ldr	r3, [r4, #0]
 802ccf4:	4631      	mov	r1, r6
 802ccf6:	4638      	mov	r0, r7
 802ccf8:	eb04 0803 	add.w	r8, r4, r3
 802ccfc:	f000 fb36 	bl	802d36c <_sbrk_r>
 802cd00:	4580      	cmp	r8, r0
 802cd02:	d13a      	bne.n	802cd7a <_malloc_r+0xd2>
 802cd04:	6821      	ldr	r1, [r4, #0]
 802cd06:	3503      	adds	r5, #3
 802cd08:	1a6d      	subs	r5, r5, r1
 802cd0a:	f025 0503 	bic.w	r5, r5, #3
 802cd0e:	3508      	adds	r5, #8
 802cd10:	2d0c      	cmp	r5, #12
 802cd12:	bf38      	it	cc
 802cd14:	250c      	movcc	r5, #12
 802cd16:	4629      	mov	r1, r5
 802cd18:	4638      	mov	r0, r7
 802cd1a:	f7ff ffa5 	bl	802cc68 <sbrk_aligned>
 802cd1e:	3001      	adds	r0, #1
 802cd20:	d02b      	beq.n	802cd7a <_malloc_r+0xd2>
 802cd22:	6823      	ldr	r3, [r4, #0]
 802cd24:	442b      	add	r3, r5
 802cd26:	6023      	str	r3, [r4, #0]
 802cd28:	e00e      	b.n	802cd48 <_malloc_r+0xa0>
 802cd2a:	6822      	ldr	r2, [r4, #0]
 802cd2c:	1b52      	subs	r2, r2, r5
 802cd2e:	d41e      	bmi.n	802cd6e <_malloc_r+0xc6>
 802cd30:	2a0b      	cmp	r2, #11
 802cd32:	d916      	bls.n	802cd62 <_malloc_r+0xba>
 802cd34:	1961      	adds	r1, r4, r5
 802cd36:	42a3      	cmp	r3, r4
 802cd38:	6025      	str	r5, [r4, #0]
 802cd3a:	bf18      	it	ne
 802cd3c:	6059      	strne	r1, [r3, #4]
 802cd3e:	6863      	ldr	r3, [r4, #4]
 802cd40:	bf08      	it	eq
 802cd42:	6031      	streq	r1, [r6, #0]
 802cd44:	5162      	str	r2, [r4, r5]
 802cd46:	604b      	str	r3, [r1, #4]
 802cd48:	4638      	mov	r0, r7
 802cd4a:	f104 060b 	add.w	r6, r4, #11
 802cd4e:	f000 fea9 	bl	802daa4 <__malloc_unlock>
 802cd52:	f026 0607 	bic.w	r6, r6, #7
 802cd56:	1d23      	adds	r3, r4, #4
 802cd58:	1af2      	subs	r2, r6, r3
 802cd5a:	d0b6      	beq.n	802ccca <_malloc_r+0x22>
 802cd5c:	1b9b      	subs	r3, r3, r6
 802cd5e:	50a3      	str	r3, [r4, r2]
 802cd60:	e7b3      	b.n	802ccca <_malloc_r+0x22>
 802cd62:	6862      	ldr	r2, [r4, #4]
 802cd64:	42a3      	cmp	r3, r4
 802cd66:	bf0c      	ite	eq
 802cd68:	6032      	streq	r2, [r6, #0]
 802cd6a:	605a      	strne	r2, [r3, #4]
 802cd6c:	e7ec      	b.n	802cd48 <_malloc_r+0xa0>
 802cd6e:	4623      	mov	r3, r4
 802cd70:	6864      	ldr	r4, [r4, #4]
 802cd72:	e7b2      	b.n	802ccda <_malloc_r+0x32>
 802cd74:	4634      	mov	r4, r6
 802cd76:	6876      	ldr	r6, [r6, #4]
 802cd78:	e7b9      	b.n	802ccee <_malloc_r+0x46>
 802cd7a:	230c      	movs	r3, #12
 802cd7c:	603b      	str	r3, [r7, #0]
 802cd7e:	4638      	mov	r0, r7
 802cd80:	f000 fe90 	bl	802daa4 <__malloc_unlock>
 802cd84:	e7a1      	b.n	802ccca <_malloc_r+0x22>
 802cd86:	6025      	str	r5, [r4, #0]
 802cd88:	e7de      	b.n	802cd48 <_malloc_r+0xa0>
 802cd8a:	bf00      	nop
 802cd8c:	2400d930 	.word	0x2400d930

0802cd90 <__sfputc_r>:
 802cd90:	6893      	ldr	r3, [r2, #8]
 802cd92:	3b01      	subs	r3, #1
 802cd94:	2b00      	cmp	r3, #0
 802cd96:	b410      	push	{r4}
 802cd98:	6093      	str	r3, [r2, #8]
 802cd9a:	da08      	bge.n	802cdae <__sfputc_r+0x1e>
 802cd9c:	6994      	ldr	r4, [r2, #24]
 802cd9e:	42a3      	cmp	r3, r4
 802cda0:	db01      	blt.n	802cda6 <__sfputc_r+0x16>
 802cda2:	290a      	cmp	r1, #10
 802cda4:	d103      	bne.n	802cdae <__sfputc_r+0x1e>
 802cda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cdaa:	f000 bb33 	b.w	802d414 <__swbuf_r>
 802cdae:	6813      	ldr	r3, [r2, #0]
 802cdb0:	1c58      	adds	r0, r3, #1
 802cdb2:	6010      	str	r0, [r2, #0]
 802cdb4:	7019      	strb	r1, [r3, #0]
 802cdb6:	4608      	mov	r0, r1
 802cdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cdbc:	4770      	bx	lr

0802cdbe <__sfputs_r>:
 802cdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdc0:	4606      	mov	r6, r0
 802cdc2:	460f      	mov	r7, r1
 802cdc4:	4614      	mov	r4, r2
 802cdc6:	18d5      	adds	r5, r2, r3
 802cdc8:	42ac      	cmp	r4, r5
 802cdca:	d101      	bne.n	802cdd0 <__sfputs_r+0x12>
 802cdcc:	2000      	movs	r0, #0
 802cdce:	e007      	b.n	802cde0 <__sfputs_r+0x22>
 802cdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cdd4:	463a      	mov	r2, r7
 802cdd6:	4630      	mov	r0, r6
 802cdd8:	f7ff ffda 	bl	802cd90 <__sfputc_r>
 802cddc:	1c43      	adds	r3, r0, #1
 802cdde:	d1f3      	bne.n	802cdc8 <__sfputs_r+0xa>
 802cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cde4 <_vfiprintf_r>:
 802cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cde8:	460d      	mov	r5, r1
 802cdea:	b09d      	sub	sp, #116	; 0x74
 802cdec:	4614      	mov	r4, r2
 802cdee:	4698      	mov	r8, r3
 802cdf0:	4606      	mov	r6, r0
 802cdf2:	b118      	cbz	r0, 802cdfc <_vfiprintf_r+0x18>
 802cdf4:	6983      	ldr	r3, [r0, #24]
 802cdf6:	b90b      	cbnz	r3, 802cdfc <_vfiprintf_r+0x18>
 802cdf8:	f000 fd48 	bl	802d88c <__sinit>
 802cdfc:	4b89      	ldr	r3, [pc, #548]	; (802d024 <_vfiprintf_r+0x240>)
 802cdfe:	429d      	cmp	r5, r3
 802ce00:	d11b      	bne.n	802ce3a <_vfiprintf_r+0x56>
 802ce02:	6875      	ldr	r5, [r6, #4]
 802ce04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ce06:	07d9      	lsls	r1, r3, #31
 802ce08:	d405      	bmi.n	802ce16 <_vfiprintf_r+0x32>
 802ce0a:	89ab      	ldrh	r3, [r5, #12]
 802ce0c:	059a      	lsls	r2, r3, #22
 802ce0e:	d402      	bmi.n	802ce16 <_vfiprintf_r+0x32>
 802ce10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ce12:	f000 fdd9 	bl	802d9c8 <__retarget_lock_acquire_recursive>
 802ce16:	89ab      	ldrh	r3, [r5, #12]
 802ce18:	071b      	lsls	r3, r3, #28
 802ce1a:	d501      	bpl.n	802ce20 <_vfiprintf_r+0x3c>
 802ce1c:	692b      	ldr	r3, [r5, #16]
 802ce1e:	b9eb      	cbnz	r3, 802ce5c <_vfiprintf_r+0x78>
 802ce20:	4629      	mov	r1, r5
 802ce22:	4630      	mov	r0, r6
 802ce24:	f000 fb48 	bl	802d4b8 <__swsetup_r>
 802ce28:	b1c0      	cbz	r0, 802ce5c <_vfiprintf_r+0x78>
 802ce2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ce2c:	07dc      	lsls	r4, r3, #31
 802ce2e:	d50e      	bpl.n	802ce4e <_vfiprintf_r+0x6a>
 802ce30:	f04f 30ff 	mov.w	r0, #4294967295
 802ce34:	b01d      	add	sp, #116	; 0x74
 802ce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce3a:	4b7b      	ldr	r3, [pc, #492]	; (802d028 <_vfiprintf_r+0x244>)
 802ce3c:	429d      	cmp	r5, r3
 802ce3e:	d101      	bne.n	802ce44 <_vfiprintf_r+0x60>
 802ce40:	68b5      	ldr	r5, [r6, #8]
 802ce42:	e7df      	b.n	802ce04 <_vfiprintf_r+0x20>
 802ce44:	4b79      	ldr	r3, [pc, #484]	; (802d02c <_vfiprintf_r+0x248>)
 802ce46:	429d      	cmp	r5, r3
 802ce48:	bf08      	it	eq
 802ce4a:	68f5      	ldreq	r5, [r6, #12]
 802ce4c:	e7da      	b.n	802ce04 <_vfiprintf_r+0x20>
 802ce4e:	89ab      	ldrh	r3, [r5, #12]
 802ce50:	0598      	lsls	r0, r3, #22
 802ce52:	d4ed      	bmi.n	802ce30 <_vfiprintf_r+0x4c>
 802ce54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ce56:	f000 fdb9 	bl	802d9cc <__retarget_lock_release_recursive>
 802ce5a:	e7e9      	b.n	802ce30 <_vfiprintf_r+0x4c>
 802ce5c:	2300      	movs	r3, #0
 802ce5e:	9309      	str	r3, [sp, #36]	; 0x24
 802ce60:	2320      	movs	r3, #32
 802ce62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ce66:	f8cd 800c 	str.w	r8, [sp, #12]
 802ce6a:	2330      	movs	r3, #48	; 0x30
 802ce6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802d030 <_vfiprintf_r+0x24c>
 802ce70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ce74:	f04f 0901 	mov.w	r9, #1
 802ce78:	4623      	mov	r3, r4
 802ce7a:	469a      	mov	sl, r3
 802ce7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ce80:	b10a      	cbz	r2, 802ce86 <_vfiprintf_r+0xa2>
 802ce82:	2a25      	cmp	r2, #37	; 0x25
 802ce84:	d1f9      	bne.n	802ce7a <_vfiprintf_r+0x96>
 802ce86:	ebba 0b04 	subs.w	fp, sl, r4
 802ce8a:	d00b      	beq.n	802cea4 <_vfiprintf_r+0xc0>
 802ce8c:	465b      	mov	r3, fp
 802ce8e:	4622      	mov	r2, r4
 802ce90:	4629      	mov	r1, r5
 802ce92:	4630      	mov	r0, r6
 802ce94:	f7ff ff93 	bl	802cdbe <__sfputs_r>
 802ce98:	3001      	adds	r0, #1
 802ce9a:	f000 80aa 	beq.w	802cff2 <_vfiprintf_r+0x20e>
 802ce9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cea0:	445a      	add	r2, fp
 802cea2:	9209      	str	r2, [sp, #36]	; 0x24
 802cea4:	f89a 3000 	ldrb.w	r3, [sl]
 802cea8:	2b00      	cmp	r3, #0
 802ceaa:	f000 80a2 	beq.w	802cff2 <_vfiprintf_r+0x20e>
 802ceae:	2300      	movs	r3, #0
 802ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 802ceb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ceb8:	f10a 0a01 	add.w	sl, sl, #1
 802cebc:	9304      	str	r3, [sp, #16]
 802cebe:	9307      	str	r3, [sp, #28]
 802cec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cec4:	931a      	str	r3, [sp, #104]	; 0x68
 802cec6:	4654      	mov	r4, sl
 802cec8:	2205      	movs	r2, #5
 802ceca:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cece:	4858      	ldr	r0, [pc, #352]	; (802d030 <_vfiprintf_r+0x24c>)
 802ced0:	f7d3 fa1e 	bl	8000310 <memchr>
 802ced4:	9a04      	ldr	r2, [sp, #16]
 802ced6:	b9d8      	cbnz	r0, 802cf10 <_vfiprintf_r+0x12c>
 802ced8:	06d1      	lsls	r1, r2, #27
 802ceda:	bf44      	itt	mi
 802cedc:	2320      	movmi	r3, #32
 802cede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cee2:	0713      	lsls	r3, r2, #28
 802cee4:	bf44      	itt	mi
 802cee6:	232b      	movmi	r3, #43	; 0x2b
 802cee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ceec:	f89a 3000 	ldrb.w	r3, [sl]
 802cef0:	2b2a      	cmp	r3, #42	; 0x2a
 802cef2:	d015      	beq.n	802cf20 <_vfiprintf_r+0x13c>
 802cef4:	9a07      	ldr	r2, [sp, #28]
 802cef6:	4654      	mov	r4, sl
 802cef8:	2000      	movs	r0, #0
 802cefa:	f04f 0c0a 	mov.w	ip, #10
 802cefe:	4621      	mov	r1, r4
 802cf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cf04:	3b30      	subs	r3, #48	; 0x30
 802cf06:	2b09      	cmp	r3, #9
 802cf08:	d94e      	bls.n	802cfa8 <_vfiprintf_r+0x1c4>
 802cf0a:	b1b0      	cbz	r0, 802cf3a <_vfiprintf_r+0x156>
 802cf0c:	9207      	str	r2, [sp, #28]
 802cf0e:	e014      	b.n	802cf3a <_vfiprintf_r+0x156>
 802cf10:	eba0 0308 	sub.w	r3, r0, r8
 802cf14:	fa09 f303 	lsl.w	r3, r9, r3
 802cf18:	4313      	orrs	r3, r2
 802cf1a:	9304      	str	r3, [sp, #16]
 802cf1c:	46a2      	mov	sl, r4
 802cf1e:	e7d2      	b.n	802cec6 <_vfiprintf_r+0xe2>
 802cf20:	9b03      	ldr	r3, [sp, #12]
 802cf22:	1d19      	adds	r1, r3, #4
 802cf24:	681b      	ldr	r3, [r3, #0]
 802cf26:	9103      	str	r1, [sp, #12]
 802cf28:	2b00      	cmp	r3, #0
 802cf2a:	bfbb      	ittet	lt
 802cf2c:	425b      	neglt	r3, r3
 802cf2e:	f042 0202 	orrlt.w	r2, r2, #2
 802cf32:	9307      	strge	r3, [sp, #28]
 802cf34:	9307      	strlt	r3, [sp, #28]
 802cf36:	bfb8      	it	lt
 802cf38:	9204      	strlt	r2, [sp, #16]
 802cf3a:	7823      	ldrb	r3, [r4, #0]
 802cf3c:	2b2e      	cmp	r3, #46	; 0x2e
 802cf3e:	d10c      	bne.n	802cf5a <_vfiprintf_r+0x176>
 802cf40:	7863      	ldrb	r3, [r4, #1]
 802cf42:	2b2a      	cmp	r3, #42	; 0x2a
 802cf44:	d135      	bne.n	802cfb2 <_vfiprintf_r+0x1ce>
 802cf46:	9b03      	ldr	r3, [sp, #12]
 802cf48:	1d1a      	adds	r2, r3, #4
 802cf4a:	681b      	ldr	r3, [r3, #0]
 802cf4c:	9203      	str	r2, [sp, #12]
 802cf4e:	2b00      	cmp	r3, #0
 802cf50:	bfb8      	it	lt
 802cf52:	f04f 33ff 	movlt.w	r3, #4294967295
 802cf56:	3402      	adds	r4, #2
 802cf58:	9305      	str	r3, [sp, #20]
 802cf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802d040 <_vfiprintf_r+0x25c>
 802cf5e:	7821      	ldrb	r1, [r4, #0]
 802cf60:	2203      	movs	r2, #3
 802cf62:	4650      	mov	r0, sl
 802cf64:	f7d3 f9d4 	bl	8000310 <memchr>
 802cf68:	b140      	cbz	r0, 802cf7c <_vfiprintf_r+0x198>
 802cf6a:	2340      	movs	r3, #64	; 0x40
 802cf6c:	eba0 000a 	sub.w	r0, r0, sl
 802cf70:	fa03 f000 	lsl.w	r0, r3, r0
 802cf74:	9b04      	ldr	r3, [sp, #16]
 802cf76:	4303      	orrs	r3, r0
 802cf78:	3401      	adds	r4, #1
 802cf7a:	9304      	str	r3, [sp, #16]
 802cf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cf80:	482c      	ldr	r0, [pc, #176]	; (802d034 <_vfiprintf_r+0x250>)
 802cf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cf86:	2206      	movs	r2, #6
 802cf88:	f7d3 f9c2 	bl	8000310 <memchr>
 802cf8c:	2800      	cmp	r0, #0
 802cf8e:	d03f      	beq.n	802d010 <_vfiprintf_r+0x22c>
 802cf90:	4b29      	ldr	r3, [pc, #164]	; (802d038 <_vfiprintf_r+0x254>)
 802cf92:	bb1b      	cbnz	r3, 802cfdc <_vfiprintf_r+0x1f8>
 802cf94:	9b03      	ldr	r3, [sp, #12]
 802cf96:	3307      	adds	r3, #7
 802cf98:	f023 0307 	bic.w	r3, r3, #7
 802cf9c:	3308      	adds	r3, #8
 802cf9e:	9303      	str	r3, [sp, #12]
 802cfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cfa2:	443b      	add	r3, r7
 802cfa4:	9309      	str	r3, [sp, #36]	; 0x24
 802cfa6:	e767      	b.n	802ce78 <_vfiprintf_r+0x94>
 802cfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 802cfac:	460c      	mov	r4, r1
 802cfae:	2001      	movs	r0, #1
 802cfb0:	e7a5      	b.n	802cefe <_vfiprintf_r+0x11a>
 802cfb2:	2300      	movs	r3, #0
 802cfb4:	3401      	adds	r4, #1
 802cfb6:	9305      	str	r3, [sp, #20]
 802cfb8:	4619      	mov	r1, r3
 802cfba:	f04f 0c0a 	mov.w	ip, #10
 802cfbe:	4620      	mov	r0, r4
 802cfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cfc4:	3a30      	subs	r2, #48	; 0x30
 802cfc6:	2a09      	cmp	r2, #9
 802cfc8:	d903      	bls.n	802cfd2 <_vfiprintf_r+0x1ee>
 802cfca:	2b00      	cmp	r3, #0
 802cfcc:	d0c5      	beq.n	802cf5a <_vfiprintf_r+0x176>
 802cfce:	9105      	str	r1, [sp, #20]
 802cfd0:	e7c3      	b.n	802cf5a <_vfiprintf_r+0x176>
 802cfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 802cfd6:	4604      	mov	r4, r0
 802cfd8:	2301      	movs	r3, #1
 802cfda:	e7f0      	b.n	802cfbe <_vfiprintf_r+0x1da>
 802cfdc:	ab03      	add	r3, sp, #12
 802cfde:	9300      	str	r3, [sp, #0]
 802cfe0:	462a      	mov	r2, r5
 802cfe2:	4b16      	ldr	r3, [pc, #88]	; (802d03c <_vfiprintf_r+0x258>)
 802cfe4:	a904      	add	r1, sp, #16
 802cfe6:	4630      	mov	r0, r6
 802cfe8:	f3af 8000 	nop.w
 802cfec:	4607      	mov	r7, r0
 802cfee:	1c78      	adds	r0, r7, #1
 802cff0:	d1d6      	bne.n	802cfa0 <_vfiprintf_r+0x1bc>
 802cff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cff4:	07d9      	lsls	r1, r3, #31
 802cff6:	d405      	bmi.n	802d004 <_vfiprintf_r+0x220>
 802cff8:	89ab      	ldrh	r3, [r5, #12]
 802cffa:	059a      	lsls	r2, r3, #22
 802cffc:	d402      	bmi.n	802d004 <_vfiprintf_r+0x220>
 802cffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d000:	f000 fce4 	bl	802d9cc <__retarget_lock_release_recursive>
 802d004:	89ab      	ldrh	r3, [r5, #12]
 802d006:	065b      	lsls	r3, r3, #25
 802d008:	f53f af12 	bmi.w	802ce30 <_vfiprintf_r+0x4c>
 802d00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d00e:	e711      	b.n	802ce34 <_vfiprintf_r+0x50>
 802d010:	ab03      	add	r3, sp, #12
 802d012:	9300      	str	r3, [sp, #0]
 802d014:	462a      	mov	r2, r5
 802d016:	4b09      	ldr	r3, [pc, #36]	; (802d03c <_vfiprintf_r+0x258>)
 802d018:	a904      	add	r1, sp, #16
 802d01a:	4630      	mov	r0, r6
 802d01c:	f000 f880 	bl	802d120 <_printf_i>
 802d020:	e7e4      	b.n	802cfec <_vfiprintf_r+0x208>
 802d022:	bf00      	nop
 802d024:	08030c00 	.word	0x08030c00
 802d028:	08030c20 	.word	0x08030c20
 802d02c:	08030be0 	.word	0x08030be0
 802d030:	08030ba8 	.word	0x08030ba8
 802d034:	08030bb2 	.word	0x08030bb2
 802d038:	00000000 	.word	0x00000000
 802d03c:	0802cdbf 	.word	0x0802cdbf
 802d040:	08030bae 	.word	0x08030bae

0802d044 <_printf_common>:
 802d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d048:	4616      	mov	r6, r2
 802d04a:	4699      	mov	r9, r3
 802d04c:	688a      	ldr	r2, [r1, #8]
 802d04e:	690b      	ldr	r3, [r1, #16]
 802d050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d054:	4293      	cmp	r3, r2
 802d056:	bfb8      	it	lt
 802d058:	4613      	movlt	r3, r2
 802d05a:	6033      	str	r3, [r6, #0]
 802d05c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d060:	4607      	mov	r7, r0
 802d062:	460c      	mov	r4, r1
 802d064:	b10a      	cbz	r2, 802d06a <_printf_common+0x26>
 802d066:	3301      	adds	r3, #1
 802d068:	6033      	str	r3, [r6, #0]
 802d06a:	6823      	ldr	r3, [r4, #0]
 802d06c:	0699      	lsls	r1, r3, #26
 802d06e:	bf42      	ittt	mi
 802d070:	6833      	ldrmi	r3, [r6, #0]
 802d072:	3302      	addmi	r3, #2
 802d074:	6033      	strmi	r3, [r6, #0]
 802d076:	6825      	ldr	r5, [r4, #0]
 802d078:	f015 0506 	ands.w	r5, r5, #6
 802d07c:	d106      	bne.n	802d08c <_printf_common+0x48>
 802d07e:	f104 0a19 	add.w	sl, r4, #25
 802d082:	68e3      	ldr	r3, [r4, #12]
 802d084:	6832      	ldr	r2, [r6, #0]
 802d086:	1a9b      	subs	r3, r3, r2
 802d088:	42ab      	cmp	r3, r5
 802d08a:	dc26      	bgt.n	802d0da <_printf_common+0x96>
 802d08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d090:	1e13      	subs	r3, r2, #0
 802d092:	6822      	ldr	r2, [r4, #0]
 802d094:	bf18      	it	ne
 802d096:	2301      	movne	r3, #1
 802d098:	0692      	lsls	r2, r2, #26
 802d09a:	d42b      	bmi.n	802d0f4 <_printf_common+0xb0>
 802d09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d0a0:	4649      	mov	r1, r9
 802d0a2:	4638      	mov	r0, r7
 802d0a4:	47c0      	blx	r8
 802d0a6:	3001      	adds	r0, #1
 802d0a8:	d01e      	beq.n	802d0e8 <_printf_common+0xa4>
 802d0aa:	6823      	ldr	r3, [r4, #0]
 802d0ac:	68e5      	ldr	r5, [r4, #12]
 802d0ae:	6832      	ldr	r2, [r6, #0]
 802d0b0:	f003 0306 	and.w	r3, r3, #6
 802d0b4:	2b04      	cmp	r3, #4
 802d0b6:	bf08      	it	eq
 802d0b8:	1aad      	subeq	r5, r5, r2
 802d0ba:	68a3      	ldr	r3, [r4, #8]
 802d0bc:	6922      	ldr	r2, [r4, #16]
 802d0be:	bf0c      	ite	eq
 802d0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d0c4:	2500      	movne	r5, #0
 802d0c6:	4293      	cmp	r3, r2
 802d0c8:	bfc4      	itt	gt
 802d0ca:	1a9b      	subgt	r3, r3, r2
 802d0cc:	18ed      	addgt	r5, r5, r3
 802d0ce:	2600      	movs	r6, #0
 802d0d0:	341a      	adds	r4, #26
 802d0d2:	42b5      	cmp	r5, r6
 802d0d4:	d11a      	bne.n	802d10c <_printf_common+0xc8>
 802d0d6:	2000      	movs	r0, #0
 802d0d8:	e008      	b.n	802d0ec <_printf_common+0xa8>
 802d0da:	2301      	movs	r3, #1
 802d0dc:	4652      	mov	r2, sl
 802d0de:	4649      	mov	r1, r9
 802d0e0:	4638      	mov	r0, r7
 802d0e2:	47c0      	blx	r8
 802d0e4:	3001      	adds	r0, #1
 802d0e6:	d103      	bne.n	802d0f0 <_printf_common+0xac>
 802d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 802d0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d0f0:	3501      	adds	r5, #1
 802d0f2:	e7c6      	b.n	802d082 <_printf_common+0x3e>
 802d0f4:	18e1      	adds	r1, r4, r3
 802d0f6:	1c5a      	adds	r2, r3, #1
 802d0f8:	2030      	movs	r0, #48	; 0x30
 802d0fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d0fe:	4422      	add	r2, r4
 802d100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d108:	3302      	adds	r3, #2
 802d10a:	e7c7      	b.n	802d09c <_printf_common+0x58>
 802d10c:	2301      	movs	r3, #1
 802d10e:	4622      	mov	r2, r4
 802d110:	4649      	mov	r1, r9
 802d112:	4638      	mov	r0, r7
 802d114:	47c0      	blx	r8
 802d116:	3001      	adds	r0, #1
 802d118:	d0e6      	beq.n	802d0e8 <_printf_common+0xa4>
 802d11a:	3601      	adds	r6, #1
 802d11c:	e7d9      	b.n	802d0d2 <_printf_common+0x8e>
	...

0802d120 <_printf_i>:
 802d120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d124:	7e0f      	ldrb	r7, [r1, #24]
 802d126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802d128:	2f78      	cmp	r7, #120	; 0x78
 802d12a:	4691      	mov	r9, r2
 802d12c:	4680      	mov	r8, r0
 802d12e:	460c      	mov	r4, r1
 802d130:	469a      	mov	sl, r3
 802d132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802d136:	d807      	bhi.n	802d148 <_printf_i+0x28>
 802d138:	2f62      	cmp	r7, #98	; 0x62
 802d13a:	d80a      	bhi.n	802d152 <_printf_i+0x32>
 802d13c:	2f00      	cmp	r7, #0
 802d13e:	f000 80d8 	beq.w	802d2f2 <_printf_i+0x1d2>
 802d142:	2f58      	cmp	r7, #88	; 0x58
 802d144:	f000 80a3 	beq.w	802d28e <_printf_i+0x16e>
 802d148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d14c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802d150:	e03a      	b.n	802d1c8 <_printf_i+0xa8>
 802d152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802d156:	2b15      	cmp	r3, #21
 802d158:	d8f6      	bhi.n	802d148 <_printf_i+0x28>
 802d15a:	a101      	add	r1, pc, #4	; (adr r1, 802d160 <_printf_i+0x40>)
 802d15c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d160:	0802d1b9 	.word	0x0802d1b9
 802d164:	0802d1cd 	.word	0x0802d1cd
 802d168:	0802d149 	.word	0x0802d149
 802d16c:	0802d149 	.word	0x0802d149
 802d170:	0802d149 	.word	0x0802d149
 802d174:	0802d149 	.word	0x0802d149
 802d178:	0802d1cd 	.word	0x0802d1cd
 802d17c:	0802d149 	.word	0x0802d149
 802d180:	0802d149 	.word	0x0802d149
 802d184:	0802d149 	.word	0x0802d149
 802d188:	0802d149 	.word	0x0802d149
 802d18c:	0802d2d9 	.word	0x0802d2d9
 802d190:	0802d1fd 	.word	0x0802d1fd
 802d194:	0802d2bb 	.word	0x0802d2bb
 802d198:	0802d149 	.word	0x0802d149
 802d19c:	0802d149 	.word	0x0802d149
 802d1a0:	0802d2fb 	.word	0x0802d2fb
 802d1a4:	0802d149 	.word	0x0802d149
 802d1a8:	0802d1fd 	.word	0x0802d1fd
 802d1ac:	0802d149 	.word	0x0802d149
 802d1b0:	0802d149 	.word	0x0802d149
 802d1b4:	0802d2c3 	.word	0x0802d2c3
 802d1b8:	682b      	ldr	r3, [r5, #0]
 802d1ba:	1d1a      	adds	r2, r3, #4
 802d1bc:	681b      	ldr	r3, [r3, #0]
 802d1be:	602a      	str	r2, [r5, #0]
 802d1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d1c8:	2301      	movs	r3, #1
 802d1ca:	e0a3      	b.n	802d314 <_printf_i+0x1f4>
 802d1cc:	6820      	ldr	r0, [r4, #0]
 802d1ce:	6829      	ldr	r1, [r5, #0]
 802d1d0:	0606      	lsls	r6, r0, #24
 802d1d2:	f101 0304 	add.w	r3, r1, #4
 802d1d6:	d50a      	bpl.n	802d1ee <_printf_i+0xce>
 802d1d8:	680e      	ldr	r6, [r1, #0]
 802d1da:	602b      	str	r3, [r5, #0]
 802d1dc:	2e00      	cmp	r6, #0
 802d1de:	da03      	bge.n	802d1e8 <_printf_i+0xc8>
 802d1e0:	232d      	movs	r3, #45	; 0x2d
 802d1e2:	4276      	negs	r6, r6
 802d1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d1e8:	485e      	ldr	r0, [pc, #376]	; (802d364 <_printf_i+0x244>)
 802d1ea:	230a      	movs	r3, #10
 802d1ec:	e019      	b.n	802d222 <_printf_i+0x102>
 802d1ee:	680e      	ldr	r6, [r1, #0]
 802d1f0:	602b      	str	r3, [r5, #0]
 802d1f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 802d1f6:	bf18      	it	ne
 802d1f8:	b236      	sxthne	r6, r6
 802d1fa:	e7ef      	b.n	802d1dc <_printf_i+0xbc>
 802d1fc:	682b      	ldr	r3, [r5, #0]
 802d1fe:	6820      	ldr	r0, [r4, #0]
 802d200:	1d19      	adds	r1, r3, #4
 802d202:	6029      	str	r1, [r5, #0]
 802d204:	0601      	lsls	r1, r0, #24
 802d206:	d501      	bpl.n	802d20c <_printf_i+0xec>
 802d208:	681e      	ldr	r6, [r3, #0]
 802d20a:	e002      	b.n	802d212 <_printf_i+0xf2>
 802d20c:	0646      	lsls	r6, r0, #25
 802d20e:	d5fb      	bpl.n	802d208 <_printf_i+0xe8>
 802d210:	881e      	ldrh	r6, [r3, #0]
 802d212:	4854      	ldr	r0, [pc, #336]	; (802d364 <_printf_i+0x244>)
 802d214:	2f6f      	cmp	r7, #111	; 0x6f
 802d216:	bf0c      	ite	eq
 802d218:	2308      	moveq	r3, #8
 802d21a:	230a      	movne	r3, #10
 802d21c:	2100      	movs	r1, #0
 802d21e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d222:	6865      	ldr	r5, [r4, #4]
 802d224:	60a5      	str	r5, [r4, #8]
 802d226:	2d00      	cmp	r5, #0
 802d228:	bfa2      	ittt	ge
 802d22a:	6821      	ldrge	r1, [r4, #0]
 802d22c:	f021 0104 	bicge.w	r1, r1, #4
 802d230:	6021      	strge	r1, [r4, #0]
 802d232:	b90e      	cbnz	r6, 802d238 <_printf_i+0x118>
 802d234:	2d00      	cmp	r5, #0
 802d236:	d04d      	beq.n	802d2d4 <_printf_i+0x1b4>
 802d238:	4615      	mov	r5, r2
 802d23a:	fbb6 f1f3 	udiv	r1, r6, r3
 802d23e:	fb03 6711 	mls	r7, r3, r1, r6
 802d242:	5dc7      	ldrb	r7, [r0, r7]
 802d244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d248:	4637      	mov	r7, r6
 802d24a:	42bb      	cmp	r3, r7
 802d24c:	460e      	mov	r6, r1
 802d24e:	d9f4      	bls.n	802d23a <_printf_i+0x11a>
 802d250:	2b08      	cmp	r3, #8
 802d252:	d10b      	bne.n	802d26c <_printf_i+0x14c>
 802d254:	6823      	ldr	r3, [r4, #0]
 802d256:	07de      	lsls	r6, r3, #31
 802d258:	d508      	bpl.n	802d26c <_printf_i+0x14c>
 802d25a:	6923      	ldr	r3, [r4, #16]
 802d25c:	6861      	ldr	r1, [r4, #4]
 802d25e:	4299      	cmp	r1, r3
 802d260:	bfde      	ittt	le
 802d262:	2330      	movle	r3, #48	; 0x30
 802d264:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d268:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d26c:	1b52      	subs	r2, r2, r5
 802d26e:	6122      	str	r2, [r4, #16]
 802d270:	f8cd a000 	str.w	sl, [sp]
 802d274:	464b      	mov	r3, r9
 802d276:	aa03      	add	r2, sp, #12
 802d278:	4621      	mov	r1, r4
 802d27a:	4640      	mov	r0, r8
 802d27c:	f7ff fee2 	bl	802d044 <_printf_common>
 802d280:	3001      	adds	r0, #1
 802d282:	d14c      	bne.n	802d31e <_printf_i+0x1fe>
 802d284:	f04f 30ff 	mov.w	r0, #4294967295
 802d288:	b004      	add	sp, #16
 802d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d28e:	4835      	ldr	r0, [pc, #212]	; (802d364 <_printf_i+0x244>)
 802d290:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802d294:	6829      	ldr	r1, [r5, #0]
 802d296:	6823      	ldr	r3, [r4, #0]
 802d298:	f851 6b04 	ldr.w	r6, [r1], #4
 802d29c:	6029      	str	r1, [r5, #0]
 802d29e:	061d      	lsls	r5, r3, #24
 802d2a0:	d514      	bpl.n	802d2cc <_printf_i+0x1ac>
 802d2a2:	07df      	lsls	r7, r3, #31
 802d2a4:	bf44      	itt	mi
 802d2a6:	f043 0320 	orrmi.w	r3, r3, #32
 802d2aa:	6023      	strmi	r3, [r4, #0]
 802d2ac:	b91e      	cbnz	r6, 802d2b6 <_printf_i+0x196>
 802d2ae:	6823      	ldr	r3, [r4, #0]
 802d2b0:	f023 0320 	bic.w	r3, r3, #32
 802d2b4:	6023      	str	r3, [r4, #0]
 802d2b6:	2310      	movs	r3, #16
 802d2b8:	e7b0      	b.n	802d21c <_printf_i+0xfc>
 802d2ba:	6823      	ldr	r3, [r4, #0]
 802d2bc:	f043 0320 	orr.w	r3, r3, #32
 802d2c0:	6023      	str	r3, [r4, #0]
 802d2c2:	2378      	movs	r3, #120	; 0x78
 802d2c4:	4828      	ldr	r0, [pc, #160]	; (802d368 <_printf_i+0x248>)
 802d2c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802d2ca:	e7e3      	b.n	802d294 <_printf_i+0x174>
 802d2cc:	0659      	lsls	r1, r3, #25
 802d2ce:	bf48      	it	mi
 802d2d0:	b2b6      	uxthmi	r6, r6
 802d2d2:	e7e6      	b.n	802d2a2 <_printf_i+0x182>
 802d2d4:	4615      	mov	r5, r2
 802d2d6:	e7bb      	b.n	802d250 <_printf_i+0x130>
 802d2d8:	682b      	ldr	r3, [r5, #0]
 802d2da:	6826      	ldr	r6, [r4, #0]
 802d2dc:	6961      	ldr	r1, [r4, #20]
 802d2de:	1d18      	adds	r0, r3, #4
 802d2e0:	6028      	str	r0, [r5, #0]
 802d2e2:	0635      	lsls	r5, r6, #24
 802d2e4:	681b      	ldr	r3, [r3, #0]
 802d2e6:	d501      	bpl.n	802d2ec <_printf_i+0x1cc>
 802d2e8:	6019      	str	r1, [r3, #0]
 802d2ea:	e002      	b.n	802d2f2 <_printf_i+0x1d2>
 802d2ec:	0670      	lsls	r0, r6, #25
 802d2ee:	d5fb      	bpl.n	802d2e8 <_printf_i+0x1c8>
 802d2f0:	8019      	strh	r1, [r3, #0]
 802d2f2:	2300      	movs	r3, #0
 802d2f4:	6123      	str	r3, [r4, #16]
 802d2f6:	4615      	mov	r5, r2
 802d2f8:	e7ba      	b.n	802d270 <_printf_i+0x150>
 802d2fa:	682b      	ldr	r3, [r5, #0]
 802d2fc:	1d1a      	adds	r2, r3, #4
 802d2fe:	602a      	str	r2, [r5, #0]
 802d300:	681d      	ldr	r5, [r3, #0]
 802d302:	6862      	ldr	r2, [r4, #4]
 802d304:	2100      	movs	r1, #0
 802d306:	4628      	mov	r0, r5
 802d308:	f7d3 f802 	bl	8000310 <memchr>
 802d30c:	b108      	cbz	r0, 802d312 <_printf_i+0x1f2>
 802d30e:	1b40      	subs	r0, r0, r5
 802d310:	6060      	str	r0, [r4, #4]
 802d312:	6863      	ldr	r3, [r4, #4]
 802d314:	6123      	str	r3, [r4, #16]
 802d316:	2300      	movs	r3, #0
 802d318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d31c:	e7a8      	b.n	802d270 <_printf_i+0x150>
 802d31e:	6923      	ldr	r3, [r4, #16]
 802d320:	462a      	mov	r2, r5
 802d322:	4649      	mov	r1, r9
 802d324:	4640      	mov	r0, r8
 802d326:	47d0      	blx	sl
 802d328:	3001      	adds	r0, #1
 802d32a:	d0ab      	beq.n	802d284 <_printf_i+0x164>
 802d32c:	6823      	ldr	r3, [r4, #0]
 802d32e:	079b      	lsls	r3, r3, #30
 802d330:	d413      	bmi.n	802d35a <_printf_i+0x23a>
 802d332:	68e0      	ldr	r0, [r4, #12]
 802d334:	9b03      	ldr	r3, [sp, #12]
 802d336:	4298      	cmp	r0, r3
 802d338:	bfb8      	it	lt
 802d33a:	4618      	movlt	r0, r3
 802d33c:	e7a4      	b.n	802d288 <_printf_i+0x168>
 802d33e:	2301      	movs	r3, #1
 802d340:	4632      	mov	r2, r6
 802d342:	4649      	mov	r1, r9
 802d344:	4640      	mov	r0, r8
 802d346:	47d0      	blx	sl
 802d348:	3001      	adds	r0, #1
 802d34a:	d09b      	beq.n	802d284 <_printf_i+0x164>
 802d34c:	3501      	adds	r5, #1
 802d34e:	68e3      	ldr	r3, [r4, #12]
 802d350:	9903      	ldr	r1, [sp, #12]
 802d352:	1a5b      	subs	r3, r3, r1
 802d354:	42ab      	cmp	r3, r5
 802d356:	dcf2      	bgt.n	802d33e <_printf_i+0x21e>
 802d358:	e7eb      	b.n	802d332 <_printf_i+0x212>
 802d35a:	2500      	movs	r5, #0
 802d35c:	f104 0619 	add.w	r6, r4, #25
 802d360:	e7f5      	b.n	802d34e <_printf_i+0x22e>
 802d362:	bf00      	nop
 802d364:	08030bb9 	.word	0x08030bb9
 802d368:	08030bca 	.word	0x08030bca

0802d36c <_sbrk_r>:
 802d36c:	b538      	push	{r3, r4, r5, lr}
 802d36e:	4d06      	ldr	r5, [pc, #24]	; (802d388 <_sbrk_r+0x1c>)
 802d370:	2300      	movs	r3, #0
 802d372:	4604      	mov	r4, r0
 802d374:	4608      	mov	r0, r1
 802d376:	602b      	str	r3, [r5, #0]
 802d378:	f7d4 fe70 	bl	800205c <_sbrk>
 802d37c:	1c43      	adds	r3, r0, #1
 802d37e:	d102      	bne.n	802d386 <_sbrk_r+0x1a>
 802d380:	682b      	ldr	r3, [r5, #0]
 802d382:	b103      	cbz	r3, 802d386 <_sbrk_r+0x1a>
 802d384:	6023      	str	r3, [r4, #0]
 802d386:	bd38      	pop	{r3, r4, r5, pc}
 802d388:	2400dad4 	.word	0x2400dad4

0802d38c <_raise_r>:
 802d38c:	291f      	cmp	r1, #31
 802d38e:	b538      	push	{r3, r4, r5, lr}
 802d390:	4604      	mov	r4, r0
 802d392:	460d      	mov	r5, r1
 802d394:	d904      	bls.n	802d3a0 <_raise_r+0x14>
 802d396:	2316      	movs	r3, #22
 802d398:	6003      	str	r3, [r0, #0]
 802d39a:	f04f 30ff 	mov.w	r0, #4294967295
 802d39e:	bd38      	pop	{r3, r4, r5, pc}
 802d3a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802d3a2:	b112      	cbz	r2, 802d3aa <_raise_r+0x1e>
 802d3a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802d3a8:	b94b      	cbnz	r3, 802d3be <_raise_r+0x32>
 802d3aa:	4620      	mov	r0, r4
 802d3ac:	f000 f830 	bl	802d410 <_getpid_r>
 802d3b0:	462a      	mov	r2, r5
 802d3b2:	4601      	mov	r1, r0
 802d3b4:	4620      	mov	r0, r4
 802d3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d3ba:	f000 b817 	b.w	802d3ec <_kill_r>
 802d3be:	2b01      	cmp	r3, #1
 802d3c0:	d00a      	beq.n	802d3d8 <_raise_r+0x4c>
 802d3c2:	1c59      	adds	r1, r3, #1
 802d3c4:	d103      	bne.n	802d3ce <_raise_r+0x42>
 802d3c6:	2316      	movs	r3, #22
 802d3c8:	6003      	str	r3, [r0, #0]
 802d3ca:	2001      	movs	r0, #1
 802d3cc:	e7e7      	b.n	802d39e <_raise_r+0x12>
 802d3ce:	2400      	movs	r4, #0
 802d3d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802d3d4:	4628      	mov	r0, r5
 802d3d6:	4798      	blx	r3
 802d3d8:	2000      	movs	r0, #0
 802d3da:	e7e0      	b.n	802d39e <_raise_r+0x12>

0802d3dc <raise>:
 802d3dc:	4b02      	ldr	r3, [pc, #8]	; (802d3e8 <raise+0xc>)
 802d3de:	4601      	mov	r1, r0
 802d3e0:	6818      	ldr	r0, [r3, #0]
 802d3e2:	f7ff bfd3 	b.w	802d38c <_raise_r>
 802d3e6:	bf00      	nop
 802d3e8:	240005fc 	.word	0x240005fc

0802d3ec <_kill_r>:
 802d3ec:	b538      	push	{r3, r4, r5, lr}
 802d3ee:	4d07      	ldr	r5, [pc, #28]	; (802d40c <_kill_r+0x20>)
 802d3f0:	2300      	movs	r3, #0
 802d3f2:	4604      	mov	r4, r0
 802d3f4:	4608      	mov	r0, r1
 802d3f6:	4611      	mov	r1, r2
 802d3f8:	602b      	str	r3, [r5, #0]
 802d3fa:	f7d4 fda7 	bl	8001f4c <_kill>
 802d3fe:	1c43      	adds	r3, r0, #1
 802d400:	d102      	bne.n	802d408 <_kill_r+0x1c>
 802d402:	682b      	ldr	r3, [r5, #0]
 802d404:	b103      	cbz	r3, 802d408 <_kill_r+0x1c>
 802d406:	6023      	str	r3, [r4, #0]
 802d408:	bd38      	pop	{r3, r4, r5, pc}
 802d40a:	bf00      	nop
 802d40c:	2400dad4 	.word	0x2400dad4

0802d410 <_getpid_r>:
 802d410:	f7d4 bd94 	b.w	8001f3c <_getpid>

0802d414 <__swbuf_r>:
 802d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d416:	460e      	mov	r6, r1
 802d418:	4614      	mov	r4, r2
 802d41a:	4605      	mov	r5, r0
 802d41c:	b118      	cbz	r0, 802d426 <__swbuf_r+0x12>
 802d41e:	6983      	ldr	r3, [r0, #24]
 802d420:	b90b      	cbnz	r3, 802d426 <__swbuf_r+0x12>
 802d422:	f000 fa33 	bl	802d88c <__sinit>
 802d426:	4b21      	ldr	r3, [pc, #132]	; (802d4ac <__swbuf_r+0x98>)
 802d428:	429c      	cmp	r4, r3
 802d42a:	d12b      	bne.n	802d484 <__swbuf_r+0x70>
 802d42c:	686c      	ldr	r4, [r5, #4]
 802d42e:	69a3      	ldr	r3, [r4, #24]
 802d430:	60a3      	str	r3, [r4, #8]
 802d432:	89a3      	ldrh	r3, [r4, #12]
 802d434:	071a      	lsls	r2, r3, #28
 802d436:	d52f      	bpl.n	802d498 <__swbuf_r+0x84>
 802d438:	6923      	ldr	r3, [r4, #16]
 802d43a:	b36b      	cbz	r3, 802d498 <__swbuf_r+0x84>
 802d43c:	6923      	ldr	r3, [r4, #16]
 802d43e:	6820      	ldr	r0, [r4, #0]
 802d440:	1ac0      	subs	r0, r0, r3
 802d442:	6963      	ldr	r3, [r4, #20]
 802d444:	b2f6      	uxtb	r6, r6
 802d446:	4283      	cmp	r3, r0
 802d448:	4637      	mov	r7, r6
 802d44a:	dc04      	bgt.n	802d456 <__swbuf_r+0x42>
 802d44c:	4621      	mov	r1, r4
 802d44e:	4628      	mov	r0, r5
 802d450:	f000 f988 	bl	802d764 <_fflush_r>
 802d454:	bb30      	cbnz	r0, 802d4a4 <__swbuf_r+0x90>
 802d456:	68a3      	ldr	r3, [r4, #8]
 802d458:	3b01      	subs	r3, #1
 802d45a:	60a3      	str	r3, [r4, #8]
 802d45c:	6823      	ldr	r3, [r4, #0]
 802d45e:	1c5a      	adds	r2, r3, #1
 802d460:	6022      	str	r2, [r4, #0]
 802d462:	701e      	strb	r6, [r3, #0]
 802d464:	6963      	ldr	r3, [r4, #20]
 802d466:	3001      	adds	r0, #1
 802d468:	4283      	cmp	r3, r0
 802d46a:	d004      	beq.n	802d476 <__swbuf_r+0x62>
 802d46c:	89a3      	ldrh	r3, [r4, #12]
 802d46e:	07db      	lsls	r3, r3, #31
 802d470:	d506      	bpl.n	802d480 <__swbuf_r+0x6c>
 802d472:	2e0a      	cmp	r6, #10
 802d474:	d104      	bne.n	802d480 <__swbuf_r+0x6c>
 802d476:	4621      	mov	r1, r4
 802d478:	4628      	mov	r0, r5
 802d47a:	f000 f973 	bl	802d764 <_fflush_r>
 802d47e:	b988      	cbnz	r0, 802d4a4 <__swbuf_r+0x90>
 802d480:	4638      	mov	r0, r7
 802d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d484:	4b0a      	ldr	r3, [pc, #40]	; (802d4b0 <__swbuf_r+0x9c>)
 802d486:	429c      	cmp	r4, r3
 802d488:	d101      	bne.n	802d48e <__swbuf_r+0x7a>
 802d48a:	68ac      	ldr	r4, [r5, #8]
 802d48c:	e7cf      	b.n	802d42e <__swbuf_r+0x1a>
 802d48e:	4b09      	ldr	r3, [pc, #36]	; (802d4b4 <__swbuf_r+0xa0>)
 802d490:	429c      	cmp	r4, r3
 802d492:	bf08      	it	eq
 802d494:	68ec      	ldreq	r4, [r5, #12]
 802d496:	e7ca      	b.n	802d42e <__swbuf_r+0x1a>
 802d498:	4621      	mov	r1, r4
 802d49a:	4628      	mov	r0, r5
 802d49c:	f000 f80c 	bl	802d4b8 <__swsetup_r>
 802d4a0:	2800      	cmp	r0, #0
 802d4a2:	d0cb      	beq.n	802d43c <__swbuf_r+0x28>
 802d4a4:	f04f 37ff 	mov.w	r7, #4294967295
 802d4a8:	e7ea      	b.n	802d480 <__swbuf_r+0x6c>
 802d4aa:	bf00      	nop
 802d4ac:	08030c00 	.word	0x08030c00
 802d4b0:	08030c20 	.word	0x08030c20
 802d4b4:	08030be0 	.word	0x08030be0

0802d4b8 <__swsetup_r>:
 802d4b8:	4b32      	ldr	r3, [pc, #200]	; (802d584 <__swsetup_r+0xcc>)
 802d4ba:	b570      	push	{r4, r5, r6, lr}
 802d4bc:	681d      	ldr	r5, [r3, #0]
 802d4be:	4606      	mov	r6, r0
 802d4c0:	460c      	mov	r4, r1
 802d4c2:	b125      	cbz	r5, 802d4ce <__swsetup_r+0x16>
 802d4c4:	69ab      	ldr	r3, [r5, #24]
 802d4c6:	b913      	cbnz	r3, 802d4ce <__swsetup_r+0x16>
 802d4c8:	4628      	mov	r0, r5
 802d4ca:	f000 f9df 	bl	802d88c <__sinit>
 802d4ce:	4b2e      	ldr	r3, [pc, #184]	; (802d588 <__swsetup_r+0xd0>)
 802d4d0:	429c      	cmp	r4, r3
 802d4d2:	d10f      	bne.n	802d4f4 <__swsetup_r+0x3c>
 802d4d4:	686c      	ldr	r4, [r5, #4]
 802d4d6:	89a3      	ldrh	r3, [r4, #12]
 802d4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d4dc:	0719      	lsls	r1, r3, #28
 802d4de:	d42c      	bmi.n	802d53a <__swsetup_r+0x82>
 802d4e0:	06dd      	lsls	r5, r3, #27
 802d4e2:	d411      	bmi.n	802d508 <__swsetup_r+0x50>
 802d4e4:	2309      	movs	r3, #9
 802d4e6:	6033      	str	r3, [r6, #0]
 802d4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d4ec:	81a3      	strh	r3, [r4, #12]
 802d4ee:	f04f 30ff 	mov.w	r0, #4294967295
 802d4f2:	e03e      	b.n	802d572 <__swsetup_r+0xba>
 802d4f4:	4b25      	ldr	r3, [pc, #148]	; (802d58c <__swsetup_r+0xd4>)
 802d4f6:	429c      	cmp	r4, r3
 802d4f8:	d101      	bne.n	802d4fe <__swsetup_r+0x46>
 802d4fa:	68ac      	ldr	r4, [r5, #8]
 802d4fc:	e7eb      	b.n	802d4d6 <__swsetup_r+0x1e>
 802d4fe:	4b24      	ldr	r3, [pc, #144]	; (802d590 <__swsetup_r+0xd8>)
 802d500:	429c      	cmp	r4, r3
 802d502:	bf08      	it	eq
 802d504:	68ec      	ldreq	r4, [r5, #12]
 802d506:	e7e6      	b.n	802d4d6 <__swsetup_r+0x1e>
 802d508:	0758      	lsls	r0, r3, #29
 802d50a:	d512      	bpl.n	802d532 <__swsetup_r+0x7a>
 802d50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d50e:	b141      	cbz	r1, 802d522 <__swsetup_r+0x6a>
 802d510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d514:	4299      	cmp	r1, r3
 802d516:	d002      	beq.n	802d51e <__swsetup_r+0x66>
 802d518:	4630      	mov	r0, r6
 802d51a:	f7ff fb59 	bl	802cbd0 <_free_r>
 802d51e:	2300      	movs	r3, #0
 802d520:	6363      	str	r3, [r4, #52]	; 0x34
 802d522:	89a3      	ldrh	r3, [r4, #12]
 802d524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d528:	81a3      	strh	r3, [r4, #12]
 802d52a:	2300      	movs	r3, #0
 802d52c:	6063      	str	r3, [r4, #4]
 802d52e:	6923      	ldr	r3, [r4, #16]
 802d530:	6023      	str	r3, [r4, #0]
 802d532:	89a3      	ldrh	r3, [r4, #12]
 802d534:	f043 0308 	orr.w	r3, r3, #8
 802d538:	81a3      	strh	r3, [r4, #12]
 802d53a:	6923      	ldr	r3, [r4, #16]
 802d53c:	b94b      	cbnz	r3, 802d552 <__swsetup_r+0x9a>
 802d53e:	89a3      	ldrh	r3, [r4, #12]
 802d540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d548:	d003      	beq.n	802d552 <__swsetup_r+0x9a>
 802d54a:	4621      	mov	r1, r4
 802d54c:	4630      	mov	r0, r6
 802d54e:	f000 fa63 	bl	802da18 <__smakebuf_r>
 802d552:	89a0      	ldrh	r0, [r4, #12]
 802d554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d558:	f010 0301 	ands.w	r3, r0, #1
 802d55c:	d00a      	beq.n	802d574 <__swsetup_r+0xbc>
 802d55e:	2300      	movs	r3, #0
 802d560:	60a3      	str	r3, [r4, #8]
 802d562:	6963      	ldr	r3, [r4, #20]
 802d564:	425b      	negs	r3, r3
 802d566:	61a3      	str	r3, [r4, #24]
 802d568:	6923      	ldr	r3, [r4, #16]
 802d56a:	b943      	cbnz	r3, 802d57e <__swsetup_r+0xc6>
 802d56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d570:	d1ba      	bne.n	802d4e8 <__swsetup_r+0x30>
 802d572:	bd70      	pop	{r4, r5, r6, pc}
 802d574:	0781      	lsls	r1, r0, #30
 802d576:	bf58      	it	pl
 802d578:	6963      	ldrpl	r3, [r4, #20]
 802d57a:	60a3      	str	r3, [r4, #8]
 802d57c:	e7f4      	b.n	802d568 <__swsetup_r+0xb0>
 802d57e:	2000      	movs	r0, #0
 802d580:	e7f7      	b.n	802d572 <__swsetup_r+0xba>
 802d582:	bf00      	nop
 802d584:	240005fc 	.word	0x240005fc
 802d588:	08030c00 	.word	0x08030c00
 802d58c:	08030c20 	.word	0x08030c20
 802d590:	08030be0 	.word	0x08030be0

0802d594 <__register_exitproc>:
 802d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d598:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802d654 <__register_exitproc+0xc0>
 802d59c:	4606      	mov	r6, r0
 802d59e:	f8d8 0000 	ldr.w	r0, [r8]
 802d5a2:	461f      	mov	r7, r3
 802d5a4:	460d      	mov	r5, r1
 802d5a6:	4691      	mov	r9, r2
 802d5a8:	f000 fa0e 	bl	802d9c8 <__retarget_lock_acquire_recursive>
 802d5ac:	4b25      	ldr	r3, [pc, #148]	; (802d644 <__register_exitproc+0xb0>)
 802d5ae:	681c      	ldr	r4, [r3, #0]
 802d5b0:	b934      	cbnz	r4, 802d5c0 <__register_exitproc+0x2c>
 802d5b2:	4c25      	ldr	r4, [pc, #148]	; (802d648 <__register_exitproc+0xb4>)
 802d5b4:	601c      	str	r4, [r3, #0]
 802d5b6:	4b25      	ldr	r3, [pc, #148]	; (802d64c <__register_exitproc+0xb8>)
 802d5b8:	b113      	cbz	r3, 802d5c0 <__register_exitproc+0x2c>
 802d5ba:	681b      	ldr	r3, [r3, #0]
 802d5bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802d5c0:	6863      	ldr	r3, [r4, #4]
 802d5c2:	2b1f      	cmp	r3, #31
 802d5c4:	dd07      	ble.n	802d5d6 <__register_exitproc+0x42>
 802d5c6:	f8d8 0000 	ldr.w	r0, [r8]
 802d5ca:	f000 f9ff 	bl	802d9cc <__retarget_lock_release_recursive>
 802d5ce:	f04f 30ff 	mov.w	r0, #4294967295
 802d5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d5d6:	b34e      	cbz	r6, 802d62c <__register_exitproc+0x98>
 802d5d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802d5dc:	b988      	cbnz	r0, 802d602 <__register_exitproc+0x6e>
 802d5de:	4b1c      	ldr	r3, [pc, #112]	; (802d650 <__register_exitproc+0xbc>)
 802d5e0:	b923      	cbnz	r3, 802d5ec <__register_exitproc+0x58>
 802d5e2:	f8d8 0000 	ldr.w	r0, [r8]
 802d5e6:	f000 f9f0 	bl	802d9ca <__retarget_lock_release>
 802d5ea:	e7f0      	b.n	802d5ce <__register_exitproc+0x3a>
 802d5ec:	f44f 7084 	mov.w	r0, #264	; 0x108
 802d5f0:	f7ff fac8 	bl	802cb84 <malloc>
 802d5f4:	2800      	cmp	r0, #0
 802d5f6:	d0f4      	beq.n	802d5e2 <__register_exitproc+0x4e>
 802d5f8:	2300      	movs	r3, #0
 802d5fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802d5fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802d602:	6863      	ldr	r3, [r4, #4]
 802d604:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802d608:	2201      	movs	r2, #1
 802d60a:	409a      	lsls	r2, r3
 802d60c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802d610:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802d614:	4313      	orrs	r3, r2
 802d616:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802d61a:	2e02      	cmp	r6, #2
 802d61c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802d620:	bf02      	ittt	eq
 802d622:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802d626:	4313      	orreq	r3, r2
 802d628:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802d62c:	6863      	ldr	r3, [r4, #4]
 802d62e:	f8d8 0000 	ldr.w	r0, [r8]
 802d632:	1c5a      	adds	r2, r3, #1
 802d634:	3302      	adds	r3, #2
 802d636:	6062      	str	r2, [r4, #4]
 802d638:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802d63c:	f000 f9c6 	bl	802d9cc <__retarget_lock_release_recursive>
 802d640:	2000      	movs	r0, #0
 802d642:	e7c6      	b.n	802d5d2 <__register_exitproc+0x3e>
 802d644:	2400dacc 	.word	0x2400dacc
 802d648:	2400da40 	.word	0x2400da40
 802d64c:	08030bdc 	.word	0x08030bdc
 802d650:	0802cb85 	.word	0x0802cb85
 802d654:	24000660 	.word	0x24000660

0802d658 <__sflush_r>:
 802d658:	898a      	ldrh	r2, [r1, #12]
 802d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d65e:	4605      	mov	r5, r0
 802d660:	0710      	lsls	r0, r2, #28
 802d662:	460c      	mov	r4, r1
 802d664:	d458      	bmi.n	802d718 <__sflush_r+0xc0>
 802d666:	684b      	ldr	r3, [r1, #4]
 802d668:	2b00      	cmp	r3, #0
 802d66a:	dc05      	bgt.n	802d678 <__sflush_r+0x20>
 802d66c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d66e:	2b00      	cmp	r3, #0
 802d670:	dc02      	bgt.n	802d678 <__sflush_r+0x20>
 802d672:	2000      	movs	r0, #0
 802d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d67a:	2e00      	cmp	r6, #0
 802d67c:	d0f9      	beq.n	802d672 <__sflush_r+0x1a>
 802d67e:	2300      	movs	r3, #0
 802d680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d684:	682f      	ldr	r7, [r5, #0]
 802d686:	602b      	str	r3, [r5, #0]
 802d688:	d032      	beq.n	802d6f0 <__sflush_r+0x98>
 802d68a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d68c:	89a3      	ldrh	r3, [r4, #12]
 802d68e:	075a      	lsls	r2, r3, #29
 802d690:	d505      	bpl.n	802d69e <__sflush_r+0x46>
 802d692:	6863      	ldr	r3, [r4, #4]
 802d694:	1ac0      	subs	r0, r0, r3
 802d696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d698:	b10b      	cbz	r3, 802d69e <__sflush_r+0x46>
 802d69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d69c:	1ac0      	subs	r0, r0, r3
 802d69e:	2300      	movs	r3, #0
 802d6a0:	4602      	mov	r2, r0
 802d6a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d6a4:	6a21      	ldr	r1, [r4, #32]
 802d6a6:	4628      	mov	r0, r5
 802d6a8:	47b0      	blx	r6
 802d6aa:	1c43      	adds	r3, r0, #1
 802d6ac:	89a3      	ldrh	r3, [r4, #12]
 802d6ae:	d106      	bne.n	802d6be <__sflush_r+0x66>
 802d6b0:	6829      	ldr	r1, [r5, #0]
 802d6b2:	291d      	cmp	r1, #29
 802d6b4:	d82c      	bhi.n	802d710 <__sflush_r+0xb8>
 802d6b6:	4a2a      	ldr	r2, [pc, #168]	; (802d760 <__sflush_r+0x108>)
 802d6b8:	40ca      	lsrs	r2, r1
 802d6ba:	07d6      	lsls	r6, r2, #31
 802d6bc:	d528      	bpl.n	802d710 <__sflush_r+0xb8>
 802d6be:	2200      	movs	r2, #0
 802d6c0:	6062      	str	r2, [r4, #4]
 802d6c2:	04d9      	lsls	r1, r3, #19
 802d6c4:	6922      	ldr	r2, [r4, #16]
 802d6c6:	6022      	str	r2, [r4, #0]
 802d6c8:	d504      	bpl.n	802d6d4 <__sflush_r+0x7c>
 802d6ca:	1c42      	adds	r2, r0, #1
 802d6cc:	d101      	bne.n	802d6d2 <__sflush_r+0x7a>
 802d6ce:	682b      	ldr	r3, [r5, #0]
 802d6d0:	b903      	cbnz	r3, 802d6d4 <__sflush_r+0x7c>
 802d6d2:	6560      	str	r0, [r4, #84]	; 0x54
 802d6d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d6d6:	602f      	str	r7, [r5, #0]
 802d6d8:	2900      	cmp	r1, #0
 802d6da:	d0ca      	beq.n	802d672 <__sflush_r+0x1a>
 802d6dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d6e0:	4299      	cmp	r1, r3
 802d6e2:	d002      	beq.n	802d6ea <__sflush_r+0x92>
 802d6e4:	4628      	mov	r0, r5
 802d6e6:	f7ff fa73 	bl	802cbd0 <_free_r>
 802d6ea:	2000      	movs	r0, #0
 802d6ec:	6360      	str	r0, [r4, #52]	; 0x34
 802d6ee:	e7c1      	b.n	802d674 <__sflush_r+0x1c>
 802d6f0:	6a21      	ldr	r1, [r4, #32]
 802d6f2:	2301      	movs	r3, #1
 802d6f4:	4628      	mov	r0, r5
 802d6f6:	47b0      	blx	r6
 802d6f8:	1c41      	adds	r1, r0, #1
 802d6fa:	d1c7      	bne.n	802d68c <__sflush_r+0x34>
 802d6fc:	682b      	ldr	r3, [r5, #0]
 802d6fe:	2b00      	cmp	r3, #0
 802d700:	d0c4      	beq.n	802d68c <__sflush_r+0x34>
 802d702:	2b1d      	cmp	r3, #29
 802d704:	d001      	beq.n	802d70a <__sflush_r+0xb2>
 802d706:	2b16      	cmp	r3, #22
 802d708:	d101      	bne.n	802d70e <__sflush_r+0xb6>
 802d70a:	602f      	str	r7, [r5, #0]
 802d70c:	e7b1      	b.n	802d672 <__sflush_r+0x1a>
 802d70e:	89a3      	ldrh	r3, [r4, #12]
 802d710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d714:	81a3      	strh	r3, [r4, #12]
 802d716:	e7ad      	b.n	802d674 <__sflush_r+0x1c>
 802d718:	690f      	ldr	r7, [r1, #16]
 802d71a:	2f00      	cmp	r7, #0
 802d71c:	d0a9      	beq.n	802d672 <__sflush_r+0x1a>
 802d71e:	0793      	lsls	r3, r2, #30
 802d720:	680e      	ldr	r6, [r1, #0]
 802d722:	bf08      	it	eq
 802d724:	694b      	ldreq	r3, [r1, #20]
 802d726:	600f      	str	r7, [r1, #0]
 802d728:	bf18      	it	ne
 802d72a:	2300      	movne	r3, #0
 802d72c:	eba6 0807 	sub.w	r8, r6, r7
 802d730:	608b      	str	r3, [r1, #8]
 802d732:	f1b8 0f00 	cmp.w	r8, #0
 802d736:	dd9c      	ble.n	802d672 <__sflush_r+0x1a>
 802d738:	6a21      	ldr	r1, [r4, #32]
 802d73a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d73c:	4643      	mov	r3, r8
 802d73e:	463a      	mov	r2, r7
 802d740:	4628      	mov	r0, r5
 802d742:	47b0      	blx	r6
 802d744:	2800      	cmp	r0, #0
 802d746:	dc06      	bgt.n	802d756 <__sflush_r+0xfe>
 802d748:	89a3      	ldrh	r3, [r4, #12]
 802d74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d74e:	81a3      	strh	r3, [r4, #12]
 802d750:	f04f 30ff 	mov.w	r0, #4294967295
 802d754:	e78e      	b.n	802d674 <__sflush_r+0x1c>
 802d756:	4407      	add	r7, r0
 802d758:	eba8 0800 	sub.w	r8, r8, r0
 802d75c:	e7e9      	b.n	802d732 <__sflush_r+0xda>
 802d75e:	bf00      	nop
 802d760:	20400001 	.word	0x20400001

0802d764 <_fflush_r>:
 802d764:	b538      	push	{r3, r4, r5, lr}
 802d766:	690b      	ldr	r3, [r1, #16]
 802d768:	4605      	mov	r5, r0
 802d76a:	460c      	mov	r4, r1
 802d76c:	b913      	cbnz	r3, 802d774 <_fflush_r+0x10>
 802d76e:	2500      	movs	r5, #0
 802d770:	4628      	mov	r0, r5
 802d772:	bd38      	pop	{r3, r4, r5, pc}
 802d774:	b118      	cbz	r0, 802d77e <_fflush_r+0x1a>
 802d776:	6983      	ldr	r3, [r0, #24]
 802d778:	b90b      	cbnz	r3, 802d77e <_fflush_r+0x1a>
 802d77a:	f000 f887 	bl	802d88c <__sinit>
 802d77e:	4b14      	ldr	r3, [pc, #80]	; (802d7d0 <_fflush_r+0x6c>)
 802d780:	429c      	cmp	r4, r3
 802d782:	d11b      	bne.n	802d7bc <_fflush_r+0x58>
 802d784:	686c      	ldr	r4, [r5, #4]
 802d786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d78a:	2b00      	cmp	r3, #0
 802d78c:	d0ef      	beq.n	802d76e <_fflush_r+0xa>
 802d78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d790:	07d0      	lsls	r0, r2, #31
 802d792:	d404      	bmi.n	802d79e <_fflush_r+0x3a>
 802d794:	0599      	lsls	r1, r3, #22
 802d796:	d402      	bmi.n	802d79e <_fflush_r+0x3a>
 802d798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d79a:	f000 f915 	bl	802d9c8 <__retarget_lock_acquire_recursive>
 802d79e:	4628      	mov	r0, r5
 802d7a0:	4621      	mov	r1, r4
 802d7a2:	f7ff ff59 	bl	802d658 <__sflush_r>
 802d7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d7a8:	07da      	lsls	r2, r3, #31
 802d7aa:	4605      	mov	r5, r0
 802d7ac:	d4e0      	bmi.n	802d770 <_fflush_r+0xc>
 802d7ae:	89a3      	ldrh	r3, [r4, #12]
 802d7b0:	059b      	lsls	r3, r3, #22
 802d7b2:	d4dd      	bmi.n	802d770 <_fflush_r+0xc>
 802d7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d7b6:	f000 f909 	bl	802d9cc <__retarget_lock_release_recursive>
 802d7ba:	e7d9      	b.n	802d770 <_fflush_r+0xc>
 802d7bc:	4b05      	ldr	r3, [pc, #20]	; (802d7d4 <_fflush_r+0x70>)
 802d7be:	429c      	cmp	r4, r3
 802d7c0:	d101      	bne.n	802d7c6 <_fflush_r+0x62>
 802d7c2:	68ac      	ldr	r4, [r5, #8]
 802d7c4:	e7df      	b.n	802d786 <_fflush_r+0x22>
 802d7c6:	4b04      	ldr	r3, [pc, #16]	; (802d7d8 <_fflush_r+0x74>)
 802d7c8:	429c      	cmp	r4, r3
 802d7ca:	bf08      	it	eq
 802d7cc:	68ec      	ldreq	r4, [r5, #12]
 802d7ce:	e7da      	b.n	802d786 <_fflush_r+0x22>
 802d7d0:	08030c00 	.word	0x08030c00
 802d7d4:	08030c20 	.word	0x08030c20
 802d7d8:	08030be0 	.word	0x08030be0

0802d7dc <std>:
 802d7dc:	2300      	movs	r3, #0
 802d7de:	b510      	push	{r4, lr}
 802d7e0:	4604      	mov	r4, r0
 802d7e2:	e9c0 3300 	strd	r3, r3, [r0]
 802d7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d7ea:	6083      	str	r3, [r0, #8]
 802d7ec:	8181      	strh	r1, [r0, #12]
 802d7ee:	6643      	str	r3, [r0, #100]	; 0x64
 802d7f0:	81c2      	strh	r2, [r0, #14]
 802d7f2:	6183      	str	r3, [r0, #24]
 802d7f4:	4619      	mov	r1, r3
 802d7f6:	2208      	movs	r2, #8
 802d7f8:	305c      	adds	r0, #92	; 0x5c
 802d7fa:	f7ff f9e1 	bl	802cbc0 <memset>
 802d7fe:	4b05      	ldr	r3, [pc, #20]	; (802d814 <std+0x38>)
 802d800:	6263      	str	r3, [r4, #36]	; 0x24
 802d802:	4b05      	ldr	r3, [pc, #20]	; (802d818 <std+0x3c>)
 802d804:	62a3      	str	r3, [r4, #40]	; 0x28
 802d806:	4b05      	ldr	r3, [pc, #20]	; (802d81c <std+0x40>)
 802d808:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d80a:	4b05      	ldr	r3, [pc, #20]	; (802d820 <std+0x44>)
 802d80c:	6224      	str	r4, [r4, #32]
 802d80e:	6323      	str	r3, [r4, #48]	; 0x30
 802d810:	bd10      	pop	{r4, pc}
 802d812:	bf00      	nop
 802d814:	0802dab1 	.word	0x0802dab1
 802d818:	0802dad3 	.word	0x0802dad3
 802d81c:	0802db0b 	.word	0x0802db0b
 802d820:	0802db2f 	.word	0x0802db2f

0802d824 <_cleanup_r>:
 802d824:	4901      	ldr	r1, [pc, #4]	; (802d82c <_cleanup_r+0x8>)
 802d826:	f000 b8af 	b.w	802d988 <_fwalk_reent>
 802d82a:	bf00      	nop
 802d82c:	0802d765 	.word	0x0802d765

0802d830 <__sfmoreglue>:
 802d830:	b570      	push	{r4, r5, r6, lr}
 802d832:	2268      	movs	r2, #104	; 0x68
 802d834:	1e4d      	subs	r5, r1, #1
 802d836:	4355      	muls	r5, r2
 802d838:	460e      	mov	r6, r1
 802d83a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d83e:	f7ff fa33 	bl	802cca8 <_malloc_r>
 802d842:	4604      	mov	r4, r0
 802d844:	b140      	cbz	r0, 802d858 <__sfmoreglue+0x28>
 802d846:	2100      	movs	r1, #0
 802d848:	e9c0 1600 	strd	r1, r6, [r0]
 802d84c:	300c      	adds	r0, #12
 802d84e:	60a0      	str	r0, [r4, #8]
 802d850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d854:	f7ff f9b4 	bl	802cbc0 <memset>
 802d858:	4620      	mov	r0, r4
 802d85a:	bd70      	pop	{r4, r5, r6, pc}

0802d85c <__sfp_lock_acquire>:
 802d85c:	4801      	ldr	r0, [pc, #4]	; (802d864 <__sfp_lock_acquire+0x8>)
 802d85e:	f000 b8b3 	b.w	802d9c8 <__retarget_lock_acquire_recursive>
 802d862:	bf00      	nop
 802d864:	2400dad2 	.word	0x2400dad2

0802d868 <__sfp_lock_release>:
 802d868:	4801      	ldr	r0, [pc, #4]	; (802d870 <__sfp_lock_release+0x8>)
 802d86a:	f000 b8af 	b.w	802d9cc <__retarget_lock_release_recursive>
 802d86e:	bf00      	nop
 802d870:	2400dad2 	.word	0x2400dad2

0802d874 <__sinit_lock_acquire>:
 802d874:	4801      	ldr	r0, [pc, #4]	; (802d87c <__sinit_lock_acquire+0x8>)
 802d876:	f000 b8a7 	b.w	802d9c8 <__retarget_lock_acquire_recursive>
 802d87a:	bf00      	nop
 802d87c:	2400dad3 	.word	0x2400dad3

0802d880 <__sinit_lock_release>:
 802d880:	4801      	ldr	r0, [pc, #4]	; (802d888 <__sinit_lock_release+0x8>)
 802d882:	f000 b8a3 	b.w	802d9cc <__retarget_lock_release_recursive>
 802d886:	bf00      	nop
 802d888:	2400dad3 	.word	0x2400dad3

0802d88c <__sinit>:
 802d88c:	b510      	push	{r4, lr}
 802d88e:	4604      	mov	r4, r0
 802d890:	f7ff fff0 	bl	802d874 <__sinit_lock_acquire>
 802d894:	69a3      	ldr	r3, [r4, #24]
 802d896:	b11b      	cbz	r3, 802d8a0 <__sinit+0x14>
 802d898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d89c:	f7ff bff0 	b.w	802d880 <__sinit_lock_release>
 802d8a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802d8a4:	6523      	str	r3, [r4, #80]	; 0x50
 802d8a6:	4b13      	ldr	r3, [pc, #76]	; (802d8f4 <__sinit+0x68>)
 802d8a8:	4a13      	ldr	r2, [pc, #76]	; (802d8f8 <__sinit+0x6c>)
 802d8aa:	681b      	ldr	r3, [r3, #0]
 802d8ac:	62a2      	str	r2, [r4, #40]	; 0x28
 802d8ae:	42a3      	cmp	r3, r4
 802d8b0:	bf04      	itt	eq
 802d8b2:	2301      	moveq	r3, #1
 802d8b4:	61a3      	streq	r3, [r4, #24]
 802d8b6:	4620      	mov	r0, r4
 802d8b8:	f000 f820 	bl	802d8fc <__sfp>
 802d8bc:	6060      	str	r0, [r4, #4]
 802d8be:	4620      	mov	r0, r4
 802d8c0:	f000 f81c 	bl	802d8fc <__sfp>
 802d8c4:	60a0      	str	r0, [r4, #8]
 802d8c6:	4620      	mov	r0, r4
 802d8c8:	f000 f818 	bl	802d8fc <__sfp>
 802d8cc:	2200      	movs	r2, #0
 802d8ce:	60e0      	str	r0, [r4, #12]
 802d8d0:	2104      	movs	r1, #4
 802d8d2:	6860      	ldr	r0, [r4, #4]
 802d8d4:	f7ff ff82 	bl	802d7dc <std>
 802d8d8:	68a0      	ldr	r0, [r4, #8]
 802d8da:	2201      	movs	r2, #1
 802d8dc:	2109      	movs	r1, #9
 802d8de:	f7ff ff7d 	bl	802d7dc <std>
 802d8e2:	68e0      	ldr	r0, [r4, #12]
 802d8e4:	2202      	movs	r2, #2
 802d8e6:	2112      	movs	r1, #18
 802d8e8:	f7ff ff78 	bl	802d7dc <std>
 802d8ec:	2301      	movs	r3, #1
 802d8ee:	61a3      	str	r3, [r4, #24]
 802d8f0:	e7d2      	b.n	802d898 <__sinit+0xc>
 802d8f2:	bf00      	nop
 802d8f4:	08030ba4 	.word	0x08030ba4
 802d8f8:	0802d825 	.word	0x0802d825

0802d8fc <__sfp>:
 802d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d8fe:	4607      	mov	r7, r0
 802d900:	f7ff ffac 	bl	802d85c <__sfp_lock_acquire>
 802d904:	4b1e      	ldr	r3, [pc, #120]	; (802d980 <__sfp+0x84>)
 802d906:	681e      	ldr	r6, [r3, #0]
 802d908:	69b3      	ldr	r3, [r6, #24]
 802d90a:	b913      	cbnz	r3, 802d912 <__sfp+0x16>
 802d90c:	4630      	mov	r0, r6
 802d90e:	f7ff ffbd 	bl	802d88c <__sinit>
 802d912:	3648      	adds	r6, #72	; 0x48
 802d914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802d918:	3b01      	subs	r3, #1
 802d91a:	d503      	bpl.n	802d924 <__sfp+0x28>
 802d91c:	6833      	ldr	r3, [r6, #0]
 802d91e:	b30b      	cbz	r3, 802d964 <__sfp+0x68>
 802d920:	6836      	ldr	r6, [r6, #0]
 802d922:	e7f7      	b.n	802d914 <__sfp+0x18>
 802d924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802d928:	b9d5      	cbnz	r5, 802d960 <__sfp+0x64>
 802d92a:	4b16      	ldr	r3, [pc, #88]	; (802d984 <__sfp+0x88>)
 802d92c:	60e3      	str	r3, [r4, #12]
 802d92e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d932:	6665      	str	r5, [r4, #100]	; 0x64
 802d934:	f000 f847 	bl	802d9c6 <__retarget_lock_init_recursive>
 802d938:	f7ff ff96 	bl	802d868 <__sfp_lock_release>
 802d93c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802d940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802d944:	6025      	str	r5, [r4, #0]
 802d946:	61a5      	str	r5, [r4, #24]
 802d948:	2208      	movs	r2, #8
 802d94a:	4629      	mov	r1, r5
 802d94c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802d950:	f7ff f936 	bl	802cbc0 <memset>
 802d954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802d958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802d95c:	4620      	mov	r0, r4
 802d95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d960:	3468      	adds	r4, #104	; 0x68
 802d962:	e7d9      	b.n	802d918 <__sfp+0x1c>
 802d964:	2104      	movs	r1, #4
 802d966:	4638      	mov	r0, r7
 802d968:	f7ff ff62 	bl	802d830 <__sfmoreglue>
 802d96c:	4604      	mov	r4, r0
 802d96e:	6030      	str	r0, [r6, #0]
 802d970:	2800      	cmp	r0, #0
 802d972:	d1d5      	bne.n	802d920 <__sfp+0x24>
 802d974:	f7ff ff78 	bl	802d868 <__sfp_lock_release>
 802d978:	230c      	movs	r3, #12
 802d97a:	603b      	str	r3, [r7, #0]
 802d97c:	e7ee      	b.n	802d95c <__sfp+0x60>
 802d97e:	bf00      	nop
 802d980:	08030ba4 	.word	0x08030ba4
 802d984:	ffff0001 	.word	0xffff0001

0802d988 <_fwalk_reent>:
 802d988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d98c:	4606      	mov	r6, r0
 802d98e:	4688      	mov	r8, r1
 802d990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802d994:	2700      	movs	r7, #0
 802d996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d99a:	f1b9 0901 	subs.w	r9, r9, #1
 802d99e:	d505      	bpl.n	802d9ac <_fwalk_reent+0x24>
 802d9a0:	6824      	ldr	r4, [r4, #0]
 802d9a2:	2c00      	cmp	r4, #0
 802d9a4:	d1f7      	bne.n	802d996 <_fwalk_reent+0xe>
 802d9a6:	4638      	mov	r0, r7
 802d9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d9ac:	89ab      	ldrh	r3, [r5, #12]
 802d9ae:	2b01      	cmp	r3, #1
 802d9b0:	d907      	bls.n	802d9c2 <_fwalk_reent+0x3a>
 802d9b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d9b6:	3301      	adds	r3, #1
 802d9b8:	d003      	beq.n	802d9c2 <_fwalk_reent+0x3a>
 802d9ba:	4629      	mov	r1, r5
 802d9bc:	4630      	mov	r0, r6
 802d9be:	47c0      	blx	r8
 802d9c0:	4307      	orrs	r7, r0
 802d9c2:	3568      	adds	r5, #104	; 0x68
 802d9c4:	e7e9      	b.n	802d99a <_fwalk_reent+0x12>

0802d9c6 <__retarget_lock_init_recursive>:
 802d9c6:	4770      	bx	lr

0802d9c8 <__retarget_lock_acquire_recursive>:
 802d9c8:	4770      	bx	lr

0802d9ca <__retarget_lock_release>:
 802d9ca:	4770      	bx	lr

0802d9cc <__retarget_lock_release_recursive>:
 802d9cc:	4770      	bx	lr

0802d9ce <__swhatbuf_r>:
 802d9ce:	b570      	push	{r4, r5, r6, lr}
 802d9d0:	460e      	mov	r6, r1
 802d9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9d6:	2900      	cmp	r1, #0
 802d9d8:	b096      	sub	sp, #88	; 0x58
 802d9da:	4614      	mov	r4, r2
 802d9dc:	461d      	mov	r5, r3
 802d9de:	da08      	bge.n	802d9f2 <__swhatbuf_r+0x24>
 802d9e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802d9e4:	2200      	movs	r2, #0
 802d9e6:	602a      	str	r2, [r5, #0]
 802d9e8:	061a      	lsls	r2, r3, #24
 802d9ea:	d410      	bmi.n	802da0e <__swhatbuf_r+0x40>
 802d9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d9f0:	e00e      	b.n	802da10 <__swhatbuf_r+0x42>
 802d9f2:	466a      	mov	r2, sp
 802d9f4:	f000 f8c2 	bl	802db7c <_fstat_r>
 802d9f8:	2800      	cmp	r0, #0
 802d9fa:	dbf1      	blt.n	802d9e0 <__swhatbuf_r+0x12>
 802d9fc:	9a01      	ldr	r2, [sp, #4]
 802d9fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802da02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802da06:	425a      	negs	r2, r3
 802da08:	415a      	adcs	r2, r3
 802da0a:	602a      	str	r2, [r5, #0]
 802da0c:	e7ee      	b.n	802d9ec <__swhatbuf_r+0x1e>
 802da0e:	2340      	movs	r3, #64	; 0x40
 802da10:	2000      	movs	r0, #0
 802da12:	6023      	str	r3, [r4, #0]
 802da14:	b016      	add	sp, #88	; 0x58
 802da16:	bd70      	pop	{r4, r5, r6, pc}

0802da18 <__smakebuf_r>:
 802da18:	898b      	ldrh	r3, [r1, #12]
 802da1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802da1c:	079d      	lsls	r5, r3, #30
 802da1e:	4606      	mov	r6, r0
 802da20:	460c      	mov	r4, r1
 802da22:	d507      	bpl.n	802da34 <__smakebuf_r+0x1c>
 802da24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802da28:	6023      	str	r3, [r4, #0]
 802da2a:	6123      	str	r3, [r4, #16]
 802da2c:	2301      	movs	r3, #1
 802da2e:	6163      	str	r3, [r4, #20]
 802da30:	b002      	add	sp, #8
 802da32:	bd70      	pop	{r4, r5, r6, pc}
 802da34:	ab01      	add	r3, sp, #4
 802da36:	466a      	mov	r2, sp
 802da38:	f7ff ffc9 	bl	802d9ce <__swhatbuf_r>
 802da3c:	9900      	ldr	r1, [sp, #0]
 802da3e:	4605      	mov	r5, r0
 802da40:	4630      	mov	r0, r6
 802da42:	f7ff f931 	bl	802cca8 <_malloc_r>
 802da46:	b948      	cbnz	r0, 802da5c <__smakebuf_r+0x44>
 802da48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802da4c:	059a      	lsls	r2, r3, #22
 802da4e:	d4ef      	bmi.n	802da30 <__smakebuf_r+0x18>
 802da50:	f023 0303 	bic.w	r3, r3, #3
 802da54:	f043 0302 	orr.w	r3, r3, #2
 802da58:	81a3      	strh	r3, [r4, #12]
 802da5a:	e7e3      	b.n	802da24 <__smakebuf_r+0xc>
 802da5c:	4b0d      	ldr	r3, [pc, #52]	; (802da94 <__smakebuf_r+0x7c>)
 802da5e:	62b3      	str	r3, [r6, #40]	; 0x28
 802da60:	89a3      	ldrh	r3, [r4, #12]
 802da62:	6020      	str	r0, [r4, #0]
 802da64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802da68:	81a3      	strh	r3, [r4, #12]
 802da6a:	9b00      	ldr	r3, [sp, #0]
 802da6c:	6163      	str	r3, [r4, #20]
 802da6e:	9b01      	ldr	r3, [sp, #4]
 802da70:	6120      	str	r0, [r4, #16]
 802da72:	b15b      	cbz	r3, 802da8c <__smakebuf_r+0x74>
 802da74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802da78:	4630      	mov	r0, r6
 802da7a:	f000 f891 	bl	802dba0 <_isatty_r>
 802da7e:	b128      	cbz	r0, 802da8c <__smakebuf_r+0x74>
 802da80:	89a3      	ldrh	r3, [r4, #12]
 802da82:	f023 0303 	bic.w	r3, r3, #3
 802da86:	f043 0301 	orr.w	r3, r3, #1
 802da8a:	81a3      	strh	r3, [r4, #12]
 802da8c:	89a0      	ldrh	r0, [r4, #12]
 802da8e:	4305      	orrs	r5, r0
 802da90:	81a5      	strh	r5, [r4, #12]
 802da92:	e7cd      	b.n	802da30 <__smakebuf_r+0x18>
 802da94:	0802d825 	.word	0x0802d825

0802da98 <__malloc_lock>:
 802da98:	4801      	ldr	r0, [pc, #4]	; (802daa0 <__malloc_lock+0x8>)
 802da9a:	f7ff bf95 	b.w	802d9c8 <__retarget_lock_acquire_recursive>
 802da9e:	bf00      	nop
 802daa0:	2400dad1 	.word	0x2400dad1

0802daa4 <__malloc_unlock>:
 802daa4:	4801      	ldr	r0, [pc, #4]	; (802daac <__malloc_unlock+0x8>)
 802daa6:	f7ff bf91 	b.w	802d9cc <__retarget_lock_release_recursive>
 802daaa:	bf00      	nop
 802daac:	2400dad1 	.word	0x2400dad1

0802dab0 <__sread>:
 802dab0:	b510      	push	{r4, lr}
 802dab2:	460c      	mov	r4, r1
 802dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dab8:	f000 f894 	bl	802dbe4 <_read_r>
 802dabc:	2800      	cmp	r0, #0
 802dabe:	bfab      	itete	ge
 802dac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802dac2:	89a3      	ldrhlt	r3, [r4, #12]
 802dac4:	181b      	addge	r3, r3, r0
 802dac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802daca:	bfac      	ite	ge
 802dacc:	6563      	strge	r3, [r4, #84]	; 0x54
 802dace:	81a3      	strhlt	r3, [r4, #12]
 802dad0:	bd10      	pop	{r4, pc}

0802dad2 <__swrite>:
 802dad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dad6:	461f      	mov	r7, r3
 802dad8:	898b      	ldrh	r3, [r1, #12]
 802dada:	05db      	lsls	r3, r3, #23
 802dadc:	4605      	mov	r5, r0
 802dade:	460c      	mov	r4, r1
 802dae0:	4616      	mov	r6, r2
 802dae2:	d505      	bpl.n	802daf0 <__swrite+0x1e>
 802dae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dae8:	2302      	movs	r3, #2
 802daea:	2200      	movs	r2, #0
 802daec:	f000 f868 	bl	802dbc0 <_lseek_r>
 802daf0:	89a3      	ldrh	r3, [r4, #12]
 802daf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802daf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802dafa:	81a3      	strh	r3, [r4, #12]
 802dafc:	4632      	mov	r2, r6
 802dafe:	463b      	mov	r3, r7
 802db00:	4628      	mov	r0, r5
 802db02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802db06:	f000 b817 	b.w	802db38 <_write_r>

0802db0a <__sseek>:
 802db0a:	b510      	push	{r4, lr}
 802db0c:	460c      	mov	r4, r1
 802db0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802db12:	f000 f855 	bl	802dbc0 <_lseek_r>
 802db16:	1c43      	adds	r3, r0, #1
 802db18:	89a3      	ldrh	r3, [r4, #12]
 802db1a:	bf15      	itete	ne
 802db1c:	6560      	strne	r0, [r4, #84]	; 0x54
 802db1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802db22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802db26:	81a3      	strheq	r3, [r4, #12]
 802db28:	bf18      	it	ne
 802db2a:	81a3      	strhne	r3, [r4, #12]
 802db2c:	bd10      	pop	{r4, pc}

0802db2e <__sclose>:
 802db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802db32:	f000 b813 	b.w	802db5c <_close_r>
	...

0802db38 <_write_r>:
 802db38:	b538      	push	{r3, r4, r5, lr}
 802db3a:	4d07      	ldr	r5, [pc, #28]	; (802db58 <_write_r+0x20>)
 802db3c:	4604      	mov	r4, r0
 802db3e:	4608      	mov	r0, r1
 802db40:	4611      	mov	r1, r2
 802db42:	2200      	movs	r2, #0
 802db44:	602a      	str	r2, [r5, #0]
 802db46:	461a      	mov	r2, r3
 802db48:	f7d4 fa37 	bl	8001fba <_write>
 802db4c:	1c43      	adds	r3, r0, #1
 802db4e:	d102      	bne.n	802db56 <_write_r+0x1e>
 802db50:	682b      	ldr	r3, [r5, #0]
 802db52:	b103      	cbz	r3, 802db56 <_write_r+0x1e>
 802db54:	6023      	str	r3, [r4, #0]
 802db56:	bd38      	pop	{r3, r4, r5, pc}
 802db58:	2400dad4 	.word	0x2400dad4

0802db5c <_close_r>:
 802db5c:	b538      	push	{r3, r4, r5, lr}
 802db5e:	4d06      	ldr	r5, [pc, #24]	; (802db78 <_close_r+0x1c>)
 802db60:	2300      	movs	r3, #0
 802db62:	4604      	mov	r4, r0
 802db64:	4608      	mov	r0, r1
 802db66:	602b      	str	r3, [r5, #0]
 802db68:	f7d4 fa43 	bl	8001ff2 <_close>
 802db6c:	1c43      	adds	r3, r0, #1
 802db6e:	d102      	bne.n	802db76 <_close_r+0x1a>
 802db70:	682b      	ldr	r3, [r5, #0]
 802db72:	b103      	cbz	r3, 802db76 <_close_r+0x1a>
 802db74:	6023      	str	r3, [r4, #0]
 802db76:	bd38      	pop	{r3, r4, r5, pc}
 802db78:	2400dad4 	.word	0x2400dad4

0802db7c <_fstat_r>:
 802db7c:	b538      	push	{r3, r4, r5, lr}
 802db7e:	4d07      	ldr	r5, [pc, #28]	; (802db9c <_fstat_r+0x20>)
 802db80:	2300      	movs	r3, #0
 802db82:	4604      	mov	r4, r0
 802db84:	4608      	mov	r0, r1
 802db86:	4611      	mov	r1, r2
 802db88:	602b      	str	r3, [r5, #0]
 802db8a:	f7d4 fa3e 	bl	800200a <_fstat>
 802db8e:	1c43      	adds	r3, r0, #1
 802db90:	d102      	bne.n	802db98 <_fstat_r+0x1c>
 802db92:	682b      	ldr	r3, [r5, #0]
 802db94:	b103      	cbz	r3, 802db98 <_fstat_r+0x1c>
 802db96:	6023      	str	r3, [r4, #0]
 802db98:	bd38      	pop	{r3, r4, r5, pc}
 802db9a:	bf00      	nop
 802db9c:	2400dad4 	.word	0x2400dad4

0802dba0 <_isatty_r>:
 802dba0:	b538      	push	{r3, r4, r5, lr}
 802dba2:	4d06      	ldr	r5, [pc, #24]	; (802dbbc <_isatty_r+0x1c>)
 802dba4:	2300      	movs	r3, #0
 802dba6:	4604      	mov	r4, r0
 802dba8:	4608      	mov	r0, r1
 802dbaa:	602b      	str	r3, [r5, #0]
 802dbac:	f7d4 fa3d 	bl	800202a <_isatty>
 802dbb0:	1c43      	adds	r3, r0, #1
 802dbb2:	d102      	bne.n	802dbba <_isatty_r+0x1a>
 802dbb4:	682b      	ldr	r3, [r5, #0]
 802dbb6:	b103      	cbz	r3, 802dbba <_isatty_r+0x1a>
 802dbb8:	6023      	str	r3, [r4, #0]
 802dbba:	bd38      	pop	{r3, r4, r5, pc}
 802dbbc:	2400dad4 	.word	0x2400dad4

0802dbc0 <_lseek_r>:
 802dbc0:	b538      	push	{r3, r4, r5, lr}
 802dbc2:	4d07      	ldr	r5, [pc, #28]	; (802dbe0 <_lseek_r+0x20>)
 802dbc4:	4604      	mov	r4, r0
 802dbc6:	4608      	mov	r0, r1
 802dbc8:	4611      	mov	r1, r2
 802dbca:	2200      	movs	r2, #0
 802dbcc:	602a      	str	r2, [r5, #0]
 802dbce:	461a      	mov	r2, r3
 802dbd0:	f7d4 fa36 	bl	8002040 <_lseek>
 802dbd4:	1c43      	adds	r3, r0, #1
 802dbd6:	d102      	bne.n	802dbde <_lseek_r+0x1e>
 802dbd8:	682b      	ldr	r3, [r5, #0]
 802dbda:	b103      	cbz	r3, 802dbde <_lseek_r+0x1e>
 802dbdc:	6023      	str	r3, [r4, #0]
 802dbde:	bd38      	pop	{r3, r4, r5, pc}
 802dbe0:	2400dad4 	.word	0x2400dad4

0802dbe4 <_read_r>:
 802dbe4:	b538      	push	{r3, r4, r5, lr}
 802dbe6:	4d07      	ldr	r5, [pc, #28]	; (802dc04 <_read_r+0x20>)
 802dbe8:	4604      	mov	r4, r0
 802dbea:	4608      	mov	r0, r1
 802dbec:	4611      	mov	r1, r2
 802dbee:	2200      	movs	r2, #0
 802dbf0:	602a      	str	r2, [r5, #0]
 802dbf2:	461a      	mov	r2, r3
 802dbf4:	f7d4 f9c4 	bl	8001f80 <_read>
 802dbf8:	1c43      	adds	r3, r0, #1
 802dbfa:	d102      	bne.n	802dc02 <_read_r+0x1e>
 802dbfc:	682b      	ldr	r3, [r5, #0]
 802dbfe:	b103      	cbz	r3, 802dc02 <_read_r+0x1e>
 802dc00:	6023      	str	r3, [r4, #0]
 802dc02:	bd38      	pop	{r3, r4, r5, pc}
 802dc04:	2400dad4 	.word	0x2400dad4

0802dc08 <_init>:
 802dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc0a:	bf00      	nop
 802dc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dc0e:	bc08      	pop	{r3}
 802dc10:	469e      	mov	lr, r3
 802dc12:	4770      	bx	lr

0802dc14 <_fini>:
 802dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc16:	bf00      	nop
 802dc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802dc1a:	bc08      	pop	{r3}
 802dc1c:	469e      	mov	lr, r3
 802dc1e:	4770      	bx	lr
