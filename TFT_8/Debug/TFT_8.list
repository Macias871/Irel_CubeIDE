
TFT_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d5d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002180  0802d780  0802d780  0003d780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000143e  0802f900  0802f900  0003f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000094  08030d40  08030d40  00040d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0002b430  08030dd4  08030dd4  00040dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000270  0805c204  0805c204  0006c204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM          00000008  0805c474  0805c474  0006c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .init_array   00000014  0805c47c  0805c47c  0006c47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0805c490  0805c490  0006c490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000003f0  20000000  0805c498  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  000703f0  2**0
                  CONTENTS
 12 .bss          0000b378  200003f0  200003f0  000703f0  2**2
                  ALLOC
 13 ._user_heap_stack 00002800  2000b768  2000b768  000703f0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000703f0  2**0
                  CONTENTS, READONLY
 15 .debug_info   00092307  00000000  00000000  00070420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000117f1  00000000  00000000  00102727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003ed0  00000000  00000000  00113f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00003938  00000000  00000000  00117de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00035cfa  00000000  00000000  0011b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000520dd  00000000  00000000  0015141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001128b5  00000000  00000000  001a34f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000cf  00000000  00000000  002b5dac  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000112fc  00000000  00000000  002b5e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003f0 	.word	0x200003f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802d768 	.word	0x0802d768

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003f4 	.word	0x200003f4
 80001ec:	0802d768 	.word	0x0802d768

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <crc_add_value>:
    const int8_t min_possition,
    int8_t * const output_hc,
    int8_t * const output_hc_full
);

uint16_t crc_add_value(uint16_t crc, uint8_t data) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	4613      	mov	r3, r2
 80005b2:	717b      	strb	r3, [r7, #5]
    data ^= (uint8_t) (crc & 0xFF);
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	4053      	eors	r3, r2
 80005bc:	717b      	strb	r3, [r7, #5]
    data ^= data << 4;
 80005be:	797b      	ldrb	r3, [r7, #5]
 80005c0:	011b      	lsls	r3, r3, #4
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80005c8:	4053      	eors	r3, r2
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	717b      	strb	r3, [r7, #5]
    return ((((uint16_t) data << 8) | (crc >> 8)) ^ (uint8_t) (data >> 4) ^ ((uint16_t) data << 3));
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b21b      	sxth	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21a      	sxth	r2, r3
 80005e0:	797b      	ldrb	r3, [r7, #5]
 80005e2:	091b      	lsrs	r3, r3, #4
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4053      	eors	r3, r2
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	797b      	ldrb	r3, [r7, #5]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	b21b      	sxth	r3, r3
 80005f2:	4053      	eors	r3, r2
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	b29b      	uxth	r3, r3
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <task_bus>:
    xQueueSendFromISR(uart_rx_data_queue, (void*)&uart_byte, pdFALSE);
    IFS0bits.U1RXIF = 0;

}
*/
void task_bus (void) {
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b0a1      	sub	sp, #132	; 0x84
 8000608:	af04      	add	r7, sp, #16
    static char masterPWMFrame[] = {'t','A','A','0','1','1','1','2','2','C','C','C','C','z'};
    static char slavePWMFrame[] = {'r','A','A','1','0','1','1','2','2','t','t','t','t','i','i','C','C','C','C','z'};
#endif
    uint16_t slaveCnt, crc, i, j;
    uint8_t uart_rx_queue_byte;
    int8_t tmp_room_correction = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t tmp_room_temperature = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    uint8_t m_frame_data[M_FRAME_DATA_LEN];
    uint8_t frame_counter = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



SPWM[0].PWM1z = 40;
 800061c:	4b9e      	ldr	r3, [pc, #632]	; (8000898 <task_bus+0x294>)
 800061e:	2228      	movs	r2, #40	; 0x28
 8000620:	705a      	strb	r2, [r3, #1]
SPWM[0].PWM2z = 60;
 8000622:	4b9d      	ldr	r3, [pc, #628]	; (8000898 <task_bus+0x294>)
 8000624:	223c      	movs	r2, #60	; 0x3c
 8000626:	70da      	strb	r2, [r3, #3]
            } fields;
            uint8_t tab[S_FRAME_DATA_LEN];
        } data;
        uint8_t raw[S_FRAME_LEN];
    } s_frame;
    uint8_t m_frame_len = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    uint8_t status = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    uint16_t s_frame_out_temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

    while (1) {

    	vTaskDelay(40 / portTICK_RATE_MS);
 800063a:	2028      	movs	r0, #40	; 0x28
 800063c:	f00d fc22 	bl	800de84 <vTaskDelay>
			if (xSemaphoreTake(refresh_data_mutex, 10) == pdTRUE) {
 8000640:	4b96      	ldr	r3, [pc, #600]	; (800089c <task_bus+0x298>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	210a      	movs	r1, #10
 8000646:	4618      	mov	r0, r3
 8000648:	f00c ffca 	bl	800d5e0 <xQueueSemaphoreTake>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d1f3      	bne.n	800063a <task_bus+0x36>


        // <editor-fold defaultstate="collapsed" desc="SLAVES comunication">
        for (slaveCnt = 0; slaveCnt < sys_enabled_slaves; slaveCnt++) {
 8000652:	2300      	movs	r3, #0
 8000654:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000658:	e0e5      	b.n	8000826 <task_bus+0x222>
            /* CRC ---------------------------------------------------------- */
            crc = 0xFFFF;
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (i = 0; i < 2; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000668:	e044      	b.n	80006f4 <task_bus+0xf0>
                sprintf(masterFrame, "m%2X%2X%4Xz", slaveCnt, S[slaveCnt].DigitalOutputs, crc);
 800066a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800066e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000672:	498b      	ldr	r1, [pc, #556]	; (80008a0 <task_bus+0x29c>)
 8000674:	01db      	lsls	r3, r3, #7
 8000676:	440b      	add	r3, r1
 8000678:	3362      	adds	r3, #98	; 0x62
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	4986      	ldr	r1, [pc, #536]	; (80008a4 <task_bus+0x2a0>)
 800068a:	4887      	ldr	r0, [pc, #540]	; (80008a8 <task_bus+0x2a4>)
 800068c:	f02b fde8 	bl	802c260 <siprintf>
                for (j = 0; j < sizeof (masterFrame); j++) {
 8000690:	2300      	movs	r3, #0
 8000692:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000696:	e024      	b.n	80006e2 <task_bus+0xde>
                    if (masterFrame[j] == ' ') masterFrame[j] = '0';
 8000698:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800069c:	4a82      	ldr	r2, [pc, #520]	; (80008a8 <task_bus+0x2a4>)
 800069e:	5cd3      	ldrb	r3, [r2, r3]
 80006a0:	2b20      	cmp	r3, #32
 80006a2:	d104      	bne.n	80006ae <task_bus+0xaa>
 80006a4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006a8:	4a7f      	ldr	r2, [pc, #508]	; (80008a8 <task_bus+0x2a4>)
 80006aa:	2130      	movs	r1, #48	; 0x30
 80006ac:	54d1      	strb	r1, [r2, r3]
                    if ((j > 0) && (j < (sizeof (masterFrame) - 5))) crc = crc_add_value(crc, masterFrame[j]);
 80006ae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d010      	beq.n	80006d8 <task_bus+0xd4>
 80006b6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	d80c      	bhi.n	80006d8 <task_bus+0xd4>
 80006be:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006c2:	4a79      	ldr	r2, [pc, #484]	; (80008a8 <task_bus+0x2a4>)
 80006c4:	5cd2      	ldrb	r2, [r2, r3]
 80006c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff69 	bl	80005a4 <crc_add_value>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                for (j = 0; j < sizeof (masterFrame); j++) {
 80006d8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80006e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80006e6:	2b09      	cmp	r3, #9
 80006e8:	d9d6      	bls.n	8000698 <task_bus+0x94>
            for (i = 0; i < 2; i++) {
 80006ea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80006ee:	3301      	adds	r3, #1
 80006f0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80006f4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d9b6      	bls.n	800066a <task_bus+0x66>
                }
            }
            swap(masterFrame[5], masterFrame[8]);
 80006fc:	4b6a      	ldr	r3, [pc, #424]	; (80008a8 <task_bus+0x2a4>)
 80006fe:	795a      	ldrb	r2, [r3, #5]
 8000700:	4b69      	ldr	r3, [pc, #420]	; (80008a8 <task_bus+0x2a4>)
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	4053      	eors	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b67      	ldr	r3, [pc, #412]	; (80008a8 <task_bus+0x2a4>)
 800070a:	715a      	strb	r2, [r3, #5]
 800070c:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <task_bus+0x2a4>)
 800070e:	7a1a      	ldrb	r2, [r3, #8]
 8000710:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <task_bus+0x2a4>)
 8000712:	795b      	ldrb	r3, [r3, #5]
 8000714:	4053      	eors	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <task_bus+0x2a4>)
 800071a:	721a      	strb	r2, [r3, #8]
 800071c:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <task_bus+0x2a4>)
 800071e:	795a      	ldrb	r2, [r3, #5]
 8000720:	4b61      	ldr	r3, [pc, #388]	; (80008a8 <task_bus+0x2a4>)
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	4053      	eors	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b5f      	ldr	r3, [pc, #380]	; (80008a8 <task_bus+0x2a4>)
 800072a:	715a      	strb	r2, [r3, #5]
            swap(masterFrame[6], masterFrame[7]);
 800072c:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <task_bus+0x2a4>)
 800072e:	799a      	ldrb	r2, [r3, #6]
 8000730:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <task_bus+0x2a4>)
 8000732:	79db      	ldrb	r3, [r3, #7]
 8000734:	4053      	eors	r3, r2
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b5b      	ldr	r3, [pc, #364]	; (80008a8 <task_bus+0x2a4>)
 800073a:	719a      	strb	r2, [r3, #6]
 800073c:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <task_bus+0x2a4>)
 800073e:	79da      	ldrb	r2, [r3, #7]
 8000740:	4b59      	ldr	r3, [pc, #356]	; (80008a8 <task_bus+0x2a4>)
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	4053      	eors	r3, r2
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <task_bus+0x2a4>)
 800074a:	71da      	strb	r2, [r3, #7]
 800074c:	4b56      	ldr	r3, [pc, #344]	; (80008a8 <task_bus+0x2a4>)
 800074e:	799a      	ldrb	r2, [r3, #6]
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <task_bus+0x2a4>)
 8000752:	79db      	ldrb	r3, [r3, #7]
 8000754:	4053      	eors	r3, r2
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b53      	ldr	r3, [pc, #332]	; (80008a8 <task_bus+0x2a4>)
 800075a:	719a      	strb	r2, [r3, #6]
            /* TRANSMITT ---------------------------------------------------- */


            UARTSendDataByte(&huart5, masterFrame,10);
 800075c:	220a      	movs	r2, #10
 800075e:	4952      	ldr	r1, [pc, #328]	; (80008a8 <task_bus+0x2a4>)
 8000760:	4852      	ldr	r0, [pc, #328]	; (80008ac <task_bus+0x2a8>)
 8000762:	f001 f8b9 	bl	80018d8 <UARTSendDataByte>
            send_uart_nr = 1;
 8000766:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <task_bus+0x2ac>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]



            /* DELAY -------------------------------------------------------- */

            vTaskDelay(20 / portTICK_RATE_MS);
 800076c:	2014      	movs	r0, #20
 800076e:	f00d fb89 	bl	800de84 <vTaskDelay>
            /* RECEIVE ------------------------------------------------------ */




            crc = 0xFFFF;
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (i = 0; i < sizeof (slaveFrame); i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000780:	e027      	b.n	80007d2 <task_bus+0x1ce>
                    slaveFrame[i] = received_bytes[i];
 8000782:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000786:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800078a:	494a      	ldr	r1, [pc, #296]	; (80008b4 <task_bus+0x2b0>)
 800078c:	5c89      	ldrb	r1, [r1, r2]
 800078e:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <task_bus+0x2b4>)
 8000790:	54d1      	strb	r1, [r2, r3]
                    if ((i > 0) && (i < (sizeof (slaveFrame) - 5))) crc = crc_add_value(crc, slaveFrame[i]);
 8000792:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000796:	2b00      	cmp	r3, #0
 8000798:	d010      	beq.n	80007bc <task_bus+0x1b8>
 800079a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800079e:	2b24      	cmp	r3, #36	; 0x24
 80007a0:	d80c      	bhi.n	80007bc <task_bus+0x1b8>
 80007a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80007a6:	4a44      	ldr	r2, [pc, #272]	; (80008b8 <task_bus+0x2b4>)
 80007a8:	5cd2      	ldrb	r2, [r2, r3]
 80007aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fef7 	bl	80005a4 <crc_add_value>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    if (slaveFrame[i] == 'z') break;
 80007bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80007c0:	4a3d      	ldr	r2, [pc, #244]	; (80008b8 <task_bus+0x2b4>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	2b7a      	cmp	r3, #122	; 0x7a
 80007c6:	d009      	beq.n	80007dc <task_bus+0x1d8>
            for (i = 0; i < sizeof (slaveFrame); i++) {
 80007c8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80007cc:	3301      	adds	r3, #1
 80007ce:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80007d2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80007d6:	2b29      	cmp	r3, #41	; 0x29
 80007d8:	d9d3      	bls.n	8000782 <task_bus+0x17e>
 80007da:	e000      	b.n	80007de <task_bus+0x1da>
                    if (slaveFrame[i] == 'z') break;
 80007dc:	bf00      	nop

            }

            frame_convert(slaveFrame, sizeof (slaveFrame), &slaveFrameRaw);
 80007de:	4a37      	ldr	r2, [pc, #220]	; (80008bc <task_bus+0x2b8>)
 80007e0:	212a      	movs	r1, #42	; 0x2a
 80007e2:	4835      	ldr	r0, [pc, #212]	; (80008b8 <task_bus+0x2b4>)
 80007e4:	f000 f9bc 	bl	8000b60 <frame_convert>
            if (slaveFrameRaw.Crc == crc) {
 80007e8:	4b34      	ldr	r3, [pc, #208]	; (80008bc <task_bus+0x2b8>)
 80007ea:	8a9b      	ldrh	r3, [r3, #20]
 80007ec:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d108      	bne.n	8000806 <task_bus+0x202>
                if (frame_get_data(&slaveFrameRaw, slaveCnt, 0, 0) == 1) {
 80007f4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80007f8:	b2d9      	uxtb	r1, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	2200      	movs	r2, #0
 80007fe:	482f      	ldr	r0, [pc, #188]	; (80008bc <task_bus+0x2b8>)
 8000800:	f000 fad6 	bl	8000db0 <frame_get_data>
 8000804:	e007      	b.n	8000816 <task_bus+0x212>
//                    gui_refresh_bits_0 |= (1 << (10 - slaveCnt));
                }
            } else {
                if (frame_get_data(&slaveFrameRaw, slaveCnt, 0, 1) == 1) {
 8000806:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800080a:	b2d9      	uxtb	r1, r3
 800080c:	2301      	movs	r3, #1
 800080e:	2200      	movs	r2, #0
 8000810:	482a      	ldr	r0, [pc, #168]	; (80008bc <task_bus+0x2b8>)
 8000812:	f000 facd 	bl	8000db0 <frame_get_data>
//                    gui_refresh_bits_0 |= (1 << (10 - slaveCnt));
                }
            }
            vTaskDelay(10 / portTICK_RATE_MS);
 8000816:	200a      	movs	r0, #10
 8000818:	f00d fb34 	bl	800de84 <vTaskDelay>
        for (slaveCnt = 0; slaveCnt < sys_enabled_slaves; slaveCnt++) {
 800081c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000820:	3301      	adds	r3, #1
 8000822:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000826:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800082a:	2b00      	cmp	r3, #0
 800082c:	f43f af15 	beq.w	800065a <task_bus+0x56>
        }// </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="SLAVES PWM comunication">
#ifdef PWMSlave
      if (PWM_enable) { // tu flaga uzywania modulu PWM
        for (slaveCnt = 0; slaveCnt < sys_enabled_slaves; slaveCnt++) {
 8000830:	2300      	movs	r3, #0
 8000832:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000836:	e13a      	b.n	8000aae <task_bus+0x4aa>
            /* CRC ---------------------------------------------------------- */
            crc = 0xFFFF;
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (i = 0; i < 2; i++) {
 8000840:	2300      	movs	r3, #0
 8000842:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000846:	e06d      	b.n	8000924 <task_bus+0x320>
                sprintf(masterPWMFrame, "t%2X%2X%2X%2X%4Xz", slaveCnt + 0x30, 0x01, SPWM[slaveCnt].PWM1z,SPWM[slaveCnt].PWM2z, crc);
 8000848:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800084c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000850:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000854:	4910      	ldr	r1, [pc, #64]	; (8000898 <task_bus+0x294>)
 8000856:	2016      	movs	r0, #22
 8000858:	fb00 f303 	mul.w	r3, r0, r3
 800085c:	440b      	add	r3, r1
 800085e:	3301      	adds	r3, #1
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461c      	mov	r4, r3
 8000866:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800086a:	490b      	ldr	r1, [pc, #44]	; (8000898 <task_bus+0x294>)
 800086c:	2016      	movs	r0, #22
 800086e:	fb00 f303 	mul.w	r3, r0, r3
 8000872:	440b      	add	r3, r1
 8000874:	3303      	adds	r3, #3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4619      	mov	r1, r3
 800087c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000880:	9302      	str	r3, [sp, #8]
 8000882:	9101      	str	r1, [sp, #4]
 8000884:	9400      	str	r4, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	490d      	ldr	r1, [pc, #52]	; (80008c0 <task_bus+0x2bc>)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <task_bus+0x2c0>)
 800088c:	f02b fce8 	bl	802c260 <siprintf>
                for (j = 0; j < sizeof (masterPWMFrame); j++) {
 8000890:	2300      	movs	r3, #0
 8000892:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000896:	e03c      	b.n	8000912 <task_bus+0x30e>
 8000898:	20000824 	.word	0x20000824
 800089c:	20000490 	.word	0x20000490
 80008a0:	200004a4 	.word	0x200004a4
 80008a4:	0802d780 	.word	0x0802d780
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000d64 	.word	0x20000d64
 80008b0:	20000476 	.word	0x20000476
 80008b4:	2000040c 	.word	0x2000040c
 80008b8:	20000010 	.word	0x20000010
 80008bc:	20000454 	.word	0x20000454
 80008c0:	0802d78c 	.word	0x0802d78c
 80008c4:	2000003c 	.word	0x2000003c
                    if (masterPWMFrame[j] == ' ') masterPWMFrame[j] = '0';
 80008c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80008cc:	4a7e      	ldr	r2, [pc, #504]	; (8000ac8 <task_bus+0x4c4>)
 80008ce:	5cd3      	ldrb	r3, [r2, r3]
 80008d0:	2b20      	cmp	r3, #32
 80008d2:	d104      	bne.n	80008de <task_bus+0x2da>
 80008d4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80008d8:	4a7b      	ldr	r2, [pc, #492]	; (8000ac8 <task_bus+0x4c4>)
 80008da:	2130      	movs	r1, #48	; 0x30
 80008dc:	54d1      	strb	r1, [r2, r3]
                    if ((j > 0) && (j < (sizeof (masterPWMFrame) - 5))) crc = crc_add_value(crc, masterPWMFrame[j]);
 80008de:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d010      	beq.n	8000908 <task_bus+0x304>
 80008e6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d80c      	bhi.n	8000908 <task_bus+0x304>
 80008ee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80008f2:	4a75      	ldr	r2, [pc, #468]	; (8000ac8 <task_bus+0x4c4>)
 80008f4:	5cd2      	ldrb	r2, [r2, r3]
 80008f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe51 	bl	80005a4 <crc_add_value>
 8000902:	4603      	mov	r3, r0
 8000904:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                for (j = 0; j < sizeof (masterPWMFrame); j++) {
 8000908:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800090c:	3301      	adds	r3, #1
 800090e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000912:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000916:	2b0d      	cmp	r3, #13
 8000918:	d9d6      	bls.n	80008c8 <task_bus+0x2c4>
            for (i = 0; i < 2; i++) {
 800091a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800091e:	3301      	adds	r3, #1
 8000920:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000924:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000928:	2b01      	cmp	r3, #1
 800092a:	d98d      	bls.n	8000848 <task_bus+0x244>
                }
            }
            swap(masterPWMFrame[9], masterPWMFrame[12]);
 800092c:	4b66      	ldr	r3, [pc, #408]	; (8000ac8 <task_bus+0x4c4>)
 800092e:	7a5a      	ldrb	r2, [r3, #9]
 8000930:	4b65      	ldr	r3, [pc, #404]	; (8000ac8 <task_bus+0x4c4>)
 8000932:	7b1b      	ldrb	r3, [r3, #12]
 8000934:	4053      	eors	r3, r2
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b63      	ldr	r3, [pc, #396]	; (8000ac8 <task_bus+0x4c4>)
 800093a:	725a      	strb	r2, [r3, #9]
 800093c:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <task_bus+0x4c4>)
 800093e:	7b1a      	ldrb	r2, [r3, #12]
 8000940:	4b61      	ldr	r3, [pc, #388]	; (8000ac8 <task_bus+0x4c4>)
 8000942:	7a5b      	ldrb	r3, [r3, #9]
 8000944:	4053      	eors	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <task_bus+0x4c4>)
 800094a:	731a      	strb	r2, [r3, #12]
 800094c:	4b5e      	ldr	r3, [pc, #376]	; (8000ac8 <task_bus+0x4c4>)
 800094e:	7a5a      	ldrb	r2, [r3, #9]
 8000950:	4b5d      	ldr	r3, [pc, #372]	; (8000ac8 <task_bus+0x4c4>)
 8000952:	7b1b      	ldrb	r3, [r3, #12]
 8000954:	4053      	eors	r3, r2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <task_bus+0x4c4>)
 800095a:	725a      	strb	r2, [r3, #9]
            swap(masterPWMFrame[10], masterPWMFrame[11]);
 800095c:	4b5a      	ldr	r3, [pc, #360]	; (8000ac8 <task_bus+0x4c4>)
 800095e:	7a9a      	ldrb	r2, [r3, #10]
 8000960:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <task_bus+0x4c4>)
 8000962:	7adb      	ldrb	r3, [r3, #11]
 8000964:	4053      	eors	r3, r2
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b57      	ldr	r3, [pc, #348]	; (8000ac8 <task_bus+0x4c4>)
 800096a:	729a      	strb	r2, [r3, #10]
 800096c:	4b56      	ldr	r3, [pc, #344]	; (8000ac8 <task_bus+0x4c4>)
 800096e:	7ada      	ldrb	r2, [r3, #11]
 8000970:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <task_bus+0x4c4>)
 8000972:	7a9b      	ldrb	r3, [r3, #10]
 8000974:	4053      	eors	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <task_bus+0x4c4>)
 800097a:	72da      	strb	r2, [r3, #11]
 800097c:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <task_bus+0x4c4>)
 800097e:	7a9a      	ldrb	r2, [r3, #10]
 8000980:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <task_bus+0x4c4>)
 8000982:	7adb      	ldrb	r3, [r3, #11]
 8000984:	4053      	eors	r3, r2
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <task_bus+0x4c4>)
 800098a:	729a      	strb	r2, [r3, #10]
            /* TRANSMITT ---------------------------------------------------- */

            UARTSendDataByte(&huart5, masterPWMFrame,14);
 800098c:	220e      	movs	r2, #14
 800098e:	494e      	ldr	r1, [pc, #312]	; (8000ac8 <task_bus+0x4c4>)
 8000990:	484e      	ldr	r0, [pc, #312]	; (8000acc <task_bus+0x4c8>)
 8000992:	f000 ffa1 	bl	80018d8 <UARTSendDataByte>
            send_uart_nr = 2;
 8000996:	4b4e      	ldr	r3, [pc, #312]	; (8000ad0 <task_bus+0x4cc>)
 8000998:	2202      	movs	r2, #2
 800099a:	701a      	strb	r2, [r3, #0]



            /* DELAY -------------------------------------------------------- */

            vTaskDelay(20 / portTICK_RATE_MS);
 800099c:	2014      	movs	r0, #20
 800099e:	f00d fa71 	bl	800de84 <vTaskDelay>

            //swap(slavePWMFrame[15], slavePWMFrame[18]);
            //swap(slavePWMFrame[16], slavePWMFrame[17]);


            crc = 0xFFFF;
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (i = 0; i < sizeof (slavePWMFrame); i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80009b0:	e027      	b.n	8000a02 <task_bus+0x3fe>
                    slavePWMFrame[i] = received_bytes_PWM[i];
 80009b2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80009b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009ba:	4946      	ldr	r1, [pc, #280]	; (8000ad4 <task_bus+0x4d0>)
 80009bc:	5c89      	ldrb	r1, [r1, r2]
 80009be:	4a46      	ldr	r2, [pc, #280]	; (8000ad8 <task_bus+0x4d4>)
 80009c0:	54d1      	strb	r1, [r2, r3]
                    if ((i > 0) && (i < (sizeof (slavePWMFrame) - 5)))
 80009c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d010      	beq.n	80009ec <task_bus+0x3e8>
 80009ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009ce:	2b0e      	cmp	r3, #14
 80009d0:	d80c      	bhi.n	80009ec <task_bus+0x3e8>
                    	{
                    	crc = crc_add_value(crc, slavePWMFrame[i]);
 80009d2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009d6:	4a40      	ldr	r2, [pc, #256]	; (8000ad8 <task_bus+0x4d4>)
 80009d8:	5cd2      	ldrb	r2, [r2, r3]
 80009da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fddf 	bl	80005a4 <crc_add_value>
 80009e6:	4603      	mov	r3, r0
 80009e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    	}
                    if (slavePWMFrame[i] == 'z')
 80009ec:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <task_bus+0x4d4>)
 80009f2:	5cd3      	ldrb	r3, [r2, r3]
 80009f4:	2b7a      	cmp	r3, #122	; 0x7a
 80009f6:	d009      	beq.n	8000a0c <task_bus+0x408>
            for (i = 0; i < sizeof (slavePWMFrame); i++) {
 80009f8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8000a02:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000a06:	2b13      	cmp	r3, #19
 8000a08:	d9d3      	bls.n	80009b2 <task_bus+0x3ae>
 8000a0a:	e000      	b.n	8000a0e <task_bus+0x40a>
                    {
                    	break;
 8000a0c:	bf00      	nop
                    }


            }

            swaping_crc[3] = slavePWMFrame[15];
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <task_bus+0x4d4>)
 8000a10:	7bdb      	ldrb	r3, [r3, #15]
 8000a12:	70fb      	strb	r3, [r7, #3]
            swaping_crc[2] = slavePWMFrame[16];
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <task_bus+0x4d4>)
 8000a16:	7c1b      	ldrb	r3, [r3, #16]
 8000a18:	70bb      	strb	r3, [r7, #2]
            swaping_crc[1] = slavePWMFrame[17];
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <task_bus+0x4d4>)
 8000a1c:	7c5b      	ldrb	r3, [r3, #17]
 8000a1e:	707b      	strb	r3, [r7, #1]
            swaping_crc[0] = slavePWMFrame[18];
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <task_bus+0x4d4>)
 8000a22:	7c9b      	ldrb	r3, [r3, #18]
 8000a24:	703b      	strb	r3, [r7, #0]

            slavePWMFrame[15] = swaping_crc[0];
 8000a26:	783a      	ldrb	r2, [r7, #0]
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <task_bus+0x4d4>)
 8000a2a:	73da      	strb	r2, [r3, #15]
            slavePWMFrame[16] = swaping_crc[1];
 8000a2c:	787a      	ldrb	r2, [r7, #1]
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <task_bus+0x4d4>)
 8000a30:	741a      	strb	r2, [r3, #16]
            slavePWMFrame[17] = swaping_crc[2];
 8000a32:	78ba      	ldrb	r2, [r7, #2]
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <task_bus+0x4d4>)
 8000a36:	745a      	strb	r2, [r3, #17]
            slavePWMFrame[18] = swaping_crc[3];
 8000a38:	78fa      	ldrb	r2, [r7, #3]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <task_bus+0x4d4>)
 8000a3c:	749a      	strb	r2, [r3, #18]

            PWMframe_convert(slavePWMFrame, sizeof (slavePWMFrame), &slavePWMFrameRaw);
 8000a3e:	4a27      	ldr	r2, [pc, #156]	; (8000adc <task_bus+0x4d8>)
 8000a40:	2114      	movs	r1, #20
 8000a42:	4825      	ldr	r0, [pc, #148]	; (8000ad8 <task_bus+0x4d4>)
 8000a44:	f000 f918 	bl	8000c78 <PWMframe_convert>
            if (slavePWMFrameRaw.Crc == crc) {
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <task_bus+0x4d8>)
 8000a4a:	891b      	ldrh	r3, [r3, #8]
 8000a4c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d11c      	bne.n	8000a8e <task_bus+0x48a>
            	//snprintf(&PWMS.PWM1[0],"%3u",slavePWMFrameRaw[0].PWM1);
            	//snprintf(&PWMS.PWM2[0],"%3u",slavePWMFrameRaw[0].PWM2);

                sprintf(PWM1,"%u",SPWM[0].PWM1o/4);
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <task_bus+0x4dc>)
 8000a56:	789b      	ldrb	r3, [r3, #2]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4920      	ldr	r1, [pc, #128]	; (8000ae4 <task_bus+0x4e0>)
 8000a62:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <task_bus+0x4e4>)
 8000a64:	f02b fbfc 	bl	802c260 <siprintf>
                sprintf(PWM2,"%u",SPWM[0].PWM2o/4);
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <task_bus+0x4dc>)
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	491b      	ldr	r1, [pc, #108]	; (8000ae4 <task_bus+0x4e0>)
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <task_bus+0x4e8>)
 8000a78:	f02b fbf2 	bl	802c260 <siprintf>

                if (PWMframe_get_data(&slavePWMFrameRaw, slaveCnt, 0, 0) == 1)  {
 8000a7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a80:	b2d9      	uxtb	r1, r3
 8000a82:	2300      	movs	r3, #0
 8000a84:	2200      	movs	r2, #0
 8000a86:	4815      	ldr	r0, [pc, #84]	; (8000adc <task_bus+0x4d8>)
 8000a88:	f000 fe70 	bl	800176c <PWMframe_get_data>
 8000a8c:	e007      	b.n	8000a9e <task_bus+0x49a>


                					//                    gui_refresh_bits_0 |= (1 << (10 - slaveCnt));
                }
            } else {
                if (PWMframe_get_data(&slavePWMFrameRaw, slaveCnt, 0, 1) == 1)  {
 8000a8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a92:	b2d9      	uxtb	r1, r3
 8000a94:	2301      	movs	r3, #1
 8000a96:	2200      	movs	r2, #0
 8000a98:	4810      	ldr	r0, [pc, #64]	; (8000adc <task_bus+0x4d8>)
 8000a9a:	f000 fe67 	bl	800176c <PWMframe_get_data>
 //                   gui_refresh_bits_0 |= (1 << (10 - slaveCnt));

                }
            }
            vTaskDelay(10 / portTICK_RATE_MS);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f00d f9f0 	bl	800de84 <vTaskDelay>
        for (slaveCnt = 0; slaveCnt < sys_enabled_slaves; slaveCnt++) {
 8000aa4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000aae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f43f aec0 	beq.w	8000838 <task_bus+0x234>
        }
      }
#endif
        // </editor-fold>
        // <editor-fold defaultstate="collapsed" desc="ROOM_SENS comunication">
      xSemaphoreGive(refresh_data_mutex);
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <task_bus+0x4ec>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	2300      	movs	r3, #0
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f00c fa87 	bl	800cfd4 <xQueueGenericSend>
    	vTaskDelay(40 / portTICK_RATE_MS);
 8000ac6:	e5b8      	b.n	800063a <task_bus+0x36>
 8000ac8:	2000003c 	.word	0x2000003c
 8000acc:	20000d64 	.word	0x20000d64
 8000ad0:	20000476 	.word	0x20000476
 8000ad4:	20000440 	.word	0x20000440
 8000ad8:	2000004c 	.word	0x2000004c
 8000adc:	2000046c 	.word	0x2000046c
 8000ae0:	20000824 	.word	0x20000824
 8000ae4:	0802d7a0 	.word	0x0802d7a0
 8000ae8:	20000494 	.word	0x20000494
 8000aec:	2000049c 	.word	0x2000049c
 8000af0:	20000490 	.word	0x20000490

08000af4 <temperature_convert_to_normal>:
    return;
}



float temperature_convert_to_normal(float prec, float cmpns, int16_t minValue, int16_t maxValue, int16_t conditionToZero){
 8000af4:	b480      	push	{r7}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	ed87 0a03 	vstr	s0, [r7, #12]
 8000afe:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	460b      	mov	r3, r1
 8000b08:	80bb      	strh	r3, [r7, #4]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	807b      	strh	r3, [r7, #2]
    float normal = (prec + cmpns); // / 10;
 8000b0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b12:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (conditionToZero) return 0;
 8000b1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <temperature_convert_to_normal+0x38>
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	e00b      	b.n	8000b44 <temperature_convert_to_normal+0x50>
    if (prec == T_NULL) return T_NULL;
 8000b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b30:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000b58 <temperature_convert_to_normal+0x64>
 8000b34:	eef4 7a47 	vcmp.f32	s15, s14
 8000b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3c:	d101      	bne.n	8000b42 <temperature_convert_to_normal+0x4e>
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <temperature_convert_to_normal+0x68>)
 8000b40:	e000      	b.n	8000b44 <temperature_convert_to_normal+0x50>
    return normal;
 8000b42:	697b      	ldr	r3, [r7, #20]
}
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	459c4000 	.word	0x459c4000
 8000b5c:	459c4000 	.word	0x459c4000

08000b60 <frame_convert>:

int8_t frame_convert(char* frame, uint8_t size, _slaveFrame *slave) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	72fb      	strb	r3, [r7, #11]
    static char clipped2[3];
    static char clipped4[5];
    if ((frame[0] != 's') || (frame[size - 1] != 'z')) return -1;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b73      	cmp	r3, #115	; 0x73
 8000b74:	d106      	bne.n	8000b84 <frame_convert+0x24>
 8000b76:	7afb      	ldrb	r3, [r7, #11]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b7a      	cmp	r3, #122	; 0x7a
 8000b82:	d002      	beq.n	8000b8a <frame_convert+0x2a>
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	e06e      	b.n	8000c68 <frame_convert+0x108>
    slave->Address = frame_get_item(frame, 1, clipped2, 2);
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	4a38      	ldr	r2, [pc, #224]	; (8000c70 <frame_convert+0x110>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f8d5 	bl	8000d40 <frame_get_item>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	701a      	strb	r2, [r3, #0]
    slave->Analog0 = frame_get_item(frame, 3, clipped4, 4);
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <frame_convert+0x114>)
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f8cb 	bl	8000d40 <frame_get_item>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	805a      	strh	r2, [r3, #2]
    slave->Analog1 = frame_get_item(frame, 7, clipped4, 4);
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <frame_convert+0x114>)
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f8c1 	bl	8000d40 <frame_get_item>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	809a      	strh	r2, [r3, #4]
    slave->Analog2 = frame_get_item(frame, 11, clipped4, 4);
 8000bc6:	2304      	movs	r3, #4
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <frame_convert+0x114>)
 8000bca:	210b      	movs	r1, #11
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f000 f8b7 	bl	8000d40 <frame_get_item>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	80da      	strh	r2, [r3, #6]
    slave->Analog3 = frame_get_item(frame, 15, clipped4, 4);
 8000bda:	2304      	movs	r3, #4
 8000bdc:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <frame_convert+0x114>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 f8ad 	bl	8000d40 <frame_get_item>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	811a      	strh	r2, [r3, #8]
    slave->Analog4 = frame_get_item(frame, 19, clipped4, 4);
 8000bee:	2304      	movs	r3, #4
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <frame_convert+0x114>)
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f8a3 	bl	8000d40 <frame_get_item>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	815a      	strh	r2, [r3, #10]
    slave->Analog5 = frame_get_item(frame, 23, clipped4, 4);
 8000c02:	2304      	movs	r3, #4
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <frame_convert+0x114>)
 8000c06:	2117      	movs	r1, #23
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f000 f899 	bl	8000d40 <frame_get_item>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	819a      	strh	r2, [r3, #12]
    slave->Analog6 = frame_get_item(frame, 27, clipped4, 4);
 8000c16:	2304      	movs	r3, #4
 8000c18:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <frame_convert+0x114>)
 8000c1a:	211b      	movs	r1, #27
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f88f 	bl	8000d40 <frame_get_item>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	81da      	strh	r2, [r3, #14]
    slave->Analog7 = frame_get_item(frame, 31, clipped4, 4);
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <frame_convert+0x114>)
 8000c2e:	211f      	movs	r1, #31
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f885 	bl	8000d40 <frame_get_item>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	821a      	strh	r2, [r3, #16]
    slave->Inputs = frame_get_item(frame, 35, clipped2, 2);
 8000c3e:	2302      	movs	r3, #2
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <frame_convert+0x110>)
 8000c42:	2123      	movs	r1, #35	; 0x23
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f87b 	bl	8000d40 <frame_get_item>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	749a      	strb	r2, [r3, #18]
    slave->Crc = frame_get_item(frame, 37, clipped4, 4);
 8000c52:	2304      	movs	r3, #4
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <frame_convert+0x114>)
 8000c56:	2125      	movs	r1, #37	; 0x25
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f871 	bl	8000d40 <frame_get_item>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	829a      	strh	r2, [r3, #20]
    return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000047c 	.word	0x2000047c
 8000c74:	20000480 	.word	0x20000480

08000c78 <PWMframe_convert>:
#ifdef PWMSlave
int8_t PWMframe_convert(char* frame, uint8_t size,  _slavePWMFrame *slave) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	460b      	mov	r3, r1
 8000c82:	607a      	str	r2, [r7, #4]
 8000c84:	72fb      	strb	r3, [r7, #11]
    static char clipped2[4];
    static char clipped4[1];
    if ((frame[0] != 'r') || (frame[size - 1] != 'z')) return -1;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b72      	cmp	r3, #114	; 0x72
 8000c8c:	d106      	bne.n	8000c9c <PWMframe_convert+0x24>
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b7a      	cmp	r3, #122	; 0x7a
 8000c9a:	d002      	beq.n	8000ca2 <PWMframe_convert+0x2a>
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	e046      	b.n	8000d30 <PWMframe_convert+0xb8>
    slave->Address = frame_get_item(frame, 1, clipped2, 2);
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <PWMframe_convert+0xc0>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 f849 	bl	8000d40 <frame_get_item>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	701a      	strb	r2, [r3, #0]
    slave->St = frame_get_item(frame, 3, clipped2, 2);
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <PWMframe_convert+0xc0>)
 8000cba:	2103      	movs	r1, #3
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f000 f83f 	bl	8000d40 <frame_get_item>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	705a      	strb	r2, [r3, #1]
    slave->PWM1 = frame_get_item(frame, 5, clipped2, 2);
 8000cca:	2302      	movs	r3, #2
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <PWMframe_convert+0xc0>)
 8000cce:	2105      	movs	r1, #5
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f000 f835 	bl	8000d40 <frame_get_item>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	709a      	strb	r2, [r3, #2]
    slave->PWM2 = frame_get_item(frame, 7, clipped2, 2);
 8000cde:	2302      	movs	r3, #2
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <PWMframe_convert+0xc0>)
 8000ce2:	2107      	movs	r1, #7
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f000 f82b 	bl	8000d40 <frame_get_item>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	70da      	strb	r2, [r3, #3]
    slave->temp = frame_get_item(frame, 9, clipped4, 4);
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <PWMframe_convert+0xc4>)
 8000cf6:	2109      	movs	r1, #9
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f000 f821 	bl	8000d40 <frame_get_item>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	809a      	strh	r2, [r3, #4]
    slave->inp = frame_get_item(frame, 13, clipped2, 2);
 8000d06:	2302      	movs	r3, #2
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <PWMframe_convert+0xc0>)
 8000d0a:	210d      	movs	r1, #13
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f817 	bl	8000d40 <frame_get_item>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	719a      	strb	r2, [r3, #6]
    slave->Crc = frame_get_item(frame, 15, clipped4, 4);
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <PWMframe_convert+0xc4>)
 8000d1e:	210f      	movs	r1, #15
 8000d20:	68f8      	ldr	r0, [r7, #12]
 8000d22:	f000 f80d 	bl	8000d40 <frame_get_item>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	811a      	strh	r2, [r3, #8]
    return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000488 	.word	0x20000488
 8000d3c:	2000048c 	.word	0x2000048c

08000d40 <frame_get_item>:
#endif
uint16_t frame_get_item(char* frame, uint8_t start, char* clipped, uint8_t size){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	72fb      	strb	r3, [r7, #11]
 8000d50:	4613      	mov	r3, r2
 8000d52:	72bb      	strb	r3, [r7, #10]
    int32_t result = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
    uint8_t i = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	75fb      	strb	r3, [r7, #23]
    for (i = 0; i < size; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	75fb      	strb	r3, [r7, #23]
 8000d60:	e00d      	b.n	8000d7e <frame_get_item+0x3e>
        clipped[i] = frame[start + i];
 8000d62:	7afa      	ldrb	r2, [r7, #11]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	4413      	add	r3, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	441a      	add	r2, r3
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	440b      	add	r3, r1
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
 8000d7e:	7dfa      	ldrb	r2, [r7, #23]
 8000d80:	7abb      	ldrb	r3, [r7, #10]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3ed      	bcc.n	8000d62 <frame_get_item+0x22>
    if (sscanf(clipped, "%x", &result) < 1) return 0;
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <frame_get_item+0x6c>)
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f02b fa86 	bl	802c2a0 <siscanf>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	dc01      	bgt.n	8000d9e <frame_get_item+0x5e>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e001      	b.n	8000da2 <frame_get_item+0x62>
    return (uint16_t)result;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	b29b      	uxth	r3, r3
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0802d7a4 	.word	0x0802d7a4

08000db0 <frame_get_data>:

uint8_t frame_get_data(_slaveFrame * raw, uint8_t slaveIndex, uint8_t cmpnsStart, uint8_t clrFlag) {
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	70fb      	strb	r3, [r7, #3]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70bb      	strb	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	707b      	strb	r3, [r7, #1]
    uint8_t tmpInputs;
    uint8_t eventLog = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
    if (clrFlag == 1) {
 8000dce:	787b      	ldrb	r3, [r7, #1]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d16b      	bne.n	8000eac <frame_get_data+0xfc>
        if (S[slaveIndex].AbsenceCnt < MAX_ABSENCE) {
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	4aaf      	ldr	r2, [pc, #700]	; (8001094 <frame_get_data+0x2e4>)
 8000dd8:	01db      	lsls	r3, r3, #7
 8000dda:	4413      	add	r3, r2
 8000ddc:	3368      	adds	r3, #104	; 0x68
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b31      	cmp	r3, #49	; 0x31
 8000de4:	d81a      	bhi.n	8000e1c <frame_get_data+0x6c>
            if (S[slaveIndex].AbsenceCnt == MAX_ABSENCE - 1) eventLog = 1;
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	4aaa      	ldr	r2, [pc, #680]	; (8001094 <frame_get_data+0x2e4>)
 8000dea:	01db      	lsls	r3, r3, #7
 8000dec:	4413      	add	r3, r2
 8000dee:	3368      	adds	r3, #104	; 0x68
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b31      	cmp	r3, #49	; 0x31
 8000df6:	d101      	bne.n	8000dfc <frame_get_data+0x4c>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
            S[slaveIndex].AbsenceCnt++;
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	49a5      	ldr	r1, [pc, #660]	; (8001094 <frame_get_data+0x2e4>)
 8000e00:	01da      	lsls	r2, r3, #7
 8000e02:	440a      	add	r2, r1
 8000e04:	3268      	adds	r2, #104	; 0x68
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	3201      	adds	r2, #1
 8000e0c:	b2d1      	uxtb	r1, r2
 8000e0e:	4aa1      	ldr	r2, [pc, #644]	; (8001094 <frame_get_data+0x2e4>)
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	4413      	add	r3, r2
 8000e14:	3368      	adds	r3, #104	; 0x68
 8000e16:	460a      	mov	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e19e      	b.n	800115a <frame_get_data+0x3aa>
        }
        else {
            S[slaveIndex].PT[1] = T_NULL;
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	4a9d      	ldr	r2, [pc, #628]	; (8001094 <frame_get_data+0x2e4>)
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	4413      	add	r3, r2
 8000e24:	3322      	adds	r3, #34	; 0x22
 8000e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[2] = T_NULL;
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	4a99      	ldr	r2, [pc, #612]	; (8001094 <frame_get_data+0x2e4>)
 8000e30:	01db      	lsls	r3, r3, #7
 8000e32:	4413      	add	r3, r2
 8000e34:	3324      	adds	r3, #36	; 0x24
 8000e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[3] = T_NULL;
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	4a95      	ldr	r2, [pc, #596]	; (8001094 <frame_get_data+0x2e4>)
 8000e40:	01db      	lsls	r3, r3, #7
 8000e42:	4413      	add	r3, r2
 8000e44:	3326      	adds	r3, #38	; 0x26
 8000e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[4] = T_NULL;
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	4a91      	ldr	r2, [pc, #580]	; (8001094 <frame_get_data+0x2e4>)
 8000e50:	01db      	lsls	r3, r3, #7
 8000e52:	4413      	add	r3, r2
 8000e54:	3328      	adds	r3, #40	; 0x28
 8000e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[5] = T_NULL;
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	4a8d      	ldr	r2, [pc, #564]	; (8001094 <frame_get_data+0x2e4>)
 8000e60:	01db      	lsls	r3, r3, #7
 8000e62:	4413      	add	r3, r2
 8000e64:	332a      	adds	r3, #42	; 0x2a
 8000e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[6] = T_NULL;
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	4a89      	ldr	r2, [pc, #548]	; (8001094 <frame_get_data+0x2e4>)
 8000e70:	01db      	lsls	r3, r3, #7
 8000e72:	4413      	add	r3, r2
 8000e74:	332c      	adds	r3, #44	; 0x2c
 8000e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e7a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[7] = T_NULL;
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	4a85      	ldr	r2, [pc, #532]	; (8001094 <frame_get_data+0x2e4>)
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	4413      	add	r3, r2
 8000e84:	332e      	adds	r3, #46	; 0x2e
 8000e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].PT[0] = T_NULL;
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	4a81      	ldr	r2, [pc, #516]	; (8001094 <frame_get_data+0x2e4>)
 8000e90:	01db      	lsls	r3, r3, #7
 8000e92:	4413      	add	r3, r2
 8000e94:	3320      	adds	r3, #32
 8000e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9a:	801a      	strh	r2, [r3, #0]
            S[slaveIndex].DigitalInputs = 0x00;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	4a7d      	ldr	r2, [pc, #500]	; (8001094 <frame_get_data+0x2e4>)
 8000ea0:	01db      	lsls	r3, r3, #7
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3348      	adds	r3, #72	; 0x48
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e156      	b.n	800115a <frame_get_data+0x3aa>
        }
    }
    else {
        if (S[slaveIndex].AbsenceCnt == MAX_ABSENCE) eventLog = 1;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	4a79      	ldr	r2, [pc, #484]	; (8001094 <frame_get_data+0x2e4>)
 8000eb0:	01db      	lsls	r3, r3, #7
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3368      	adds	r3, #104	; 0x68
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b32      	cmp	r3, #50	; 0x32
 8000ebc:	d101      	bne.n	8000ec2 <frame_get_data+0x112>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
        S[slaveIndex].AbsenceCnt = 0;
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4a73      	ldr	r2, [pc, #460]	; (8001094 <frame_get_data+0x2e4>)
 8000ec6:	01db      	lsls	r3, r3, #7
 8000ec8:	4413      	add	r3, r2
 8000eca:	3368      	adds	r3, #104	; 0x68
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
        if ((raw->Analog7 < PT1000_MAX) && (raw->Analog7 > PT1000_MIN)) S[slaveIndex].PT[0] = ADCPT1000_to_temp(clip_max_value(raw->Analog7, 4095));
        else S[slaveIndex].PT[0] = T_NULL;
#endif
#ifdef TEMP_PT_NTC
// Pt1000 + TZ NTC
        if ((raw->Analog0 < PT1000_MAX) && (raw->Analog0 > PT1000_MIN)) S[slaveIndex].PT[1] = ADCPT1000_to_temp(clip_max_value(raw->Analog0, 4095));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	885b      	ldrh	r3, [r3, #2]
 8000ed4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d818      	bhi.n	8000f0e <frame_get_data+0x15e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	885b      	ldrh	r3, [r3, #2]
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	d914      	bls.n	8000f0e <frame_get_data+0x15e>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	885b      	ldrh	r3, [r3, #2]
 8000ee8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fc27 	bl	8001740 <clip_max_value>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	78fc      	ldrb	r4, [r7, #3]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fd58 	bl	80019ac <ADCPT1000_to_temp>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4619      	mov	r1, r3
 8000f00:	4a64      	ldr	r2, [pc, #400]	; (8001094 <frame_get_data+0x2e4>)
 8000f02:	01e3      	lsls	r3, r4, #7
 8000f04:	4413      	add	r3, r2
 8000f06:	3322      	adds	r3, #34	; 0x22
 8000f08:	460a      	mov	r2, r1
 8000f0a:	801a      	strh	r2, [r3, #0]
 8000f0c:	e007      	b.n	8000f1e <frame_get_data+0x16e>
        else S[slaveIndex].PT[1] = T_NULL;
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	4a60      	ldr	r2, [pc, #384]	; (8001094 <frame_get_data+0x2e4>)
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	4413      	add	r3, r2
 8000f16:	3322      	adds	r3, #34	; 0x22
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog1 < PT1000_MAX) && (raw->Analog1 > PT1000_MIN)) S[slaveIndex].PT[2] = ADCPT1000_to_temp(clip_max_value(raw->Analog1, 4095));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d818      	bhi.n	8000f5c <frame_get_data+0x1ac>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	889b      	ldrh	r3, [r3, #4]
 8000f2e:	2b0a      	cmp	r3, #10
 8000f30:	d914      	bls.n	8000f5c <frame_get_data+0x1ac>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fc00 	bl	8001740 <clip_max_value>
 8000f40:	4603      	mov	r3, r0
 8000f42:	78fc      	ldrb	r4, [r7, #3]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fd31 	bl	80019ac <ADCPT1000_to_temp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4a51      	ldr	r2, [pc, #324]	; (8001094 <frame_get_data+0x2e4>)
 8000f50:	01e3      	lsls	r3, r4, #7
 8000f52:	4413      	add	r3, r2
 8000f54:	3324      	adds	r3, #36	; 0x24
 8000f56:	460a      	mov	r2, r1
 8000f58:	801a      	strh	r2, [r3, #0]
 8000f5a:	e007      	b.n	8000f6c <frame_get_data+0x1bc>
        else S[slaveIndex].PT[2] = T_NULL;
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <frame_get_data+0x2e4>)
 8000f60:	01db      	lsls	r3, r3, #7
 8000f62:	4413      	add	r3, r2
 8000f64:	3324      	adds	r3, #36	; 0x24
 8000f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6a:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog2 < PT1000_MAX) && (raw->Analog2 > PT1000_MIN)) S[slaveIndex].PT[3] = ADCPT1000_to_temp(clip_max_value(raw->Analog2, 4095));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	88db      	ldrh	r3, [r3, #6]
 8000f70:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d818      	bhi.n	8000faa <frame_get_data+0x1fa>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	88db      	ldrh	r3, [r3, #6]
 8000f7c:	2b0a      	cmp	r3, #10
 8000f7e:	d914      	bls.n	8000faa <frame_get_data+0x1fa>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	88db      	ldrh	r3, [r3, #6]
 8000f84:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 fbd9 	bl	8001740 <clip_max_value>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	78fc      	ldrb	r4, [r7, #3]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd0a 	bl	80019ac <ADCPT1000_to_temp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <frame_get_data+0x2e4>)
 8000f9e:	01e3      	lsls	r3, r4, #7
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3326      	adds	r3, #38	; 0x26
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	e007      	b.n	8000fba <frame_get_data+0x20a>
        else S[slaveIndex].PT[3] = T_NULL;
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	4a39      	ldr	r2, [pc, #228]	; (8001094 <frame_get_data+0x2e4>)
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3326      	adds	r3, #38	; 0x26
 8000fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb8:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog3 < PT1000_MAX) && (raw->Analog3 > PT1000_MIN)) S[slaveIndex].PT[4] = ADCPT1000_to_temp(clip_max_value(raw->Analog3, 4095));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	891b      	ldrh	r3, [r3, #8]
 8000fbe:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d818      	bhi.n	8000ff8 <frame_get_data+0x248>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	891b      	ldrh	r3, [r3, #8]
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d914      	bls.n	8000ff8 <frame_get_data+0x248>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	891b      	ldrh	r3, [r3, #8]
 8000fd2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fbb2 	bl	8001740 <clip_max_value>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	78fc      	ldrb	r4, [r7, #3]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fce3 	bl	80019ac <ADCPT1000_to_temp>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <frame_get_data+0x2e4>)
 8000fec:	01e3      	lsls	r3, r4, #7
 8000fee:	4413      	add	r3, r2
 8000ff0:	3328      	adds	r3, #40	; 0x28
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	801a      	strh	r2, [r3, #0]
 8000ff6:	e007      	b.n	8001008 <frame_get_data+0x258>
        else S[slaveIndex].PT[4] = T_NULL;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <frame_get_data+0x2e4>)
 8000ffc:	01db      	lsls	r3, r3, #7
 8000ffe:	4413      	add	r3, r2
 8001000:	3328      	adds	r3, #40	; 0x28
 8001002:	f241 3288 	movw	r2, #5000	; 0x1388
 8001006:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog4 < PT1000_MAX) && (raw->Analog4 > PT1000_MIN)) S[slaveIndex].PT[5] = ADCPT1000_to_temp(clip_max_value(raw->Analog4, 4095));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	895b      	ldrh	r3, [r3, #10]
 800100c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001010:	4293      	cmp	r3, r2
 8001012:	d818      	bhi.n	8001046 <frame_get_data+0x296>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	895b      	ldrh	r3, [r3, #10]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d914      	bls.n	8001046 <frame_get_data+0x296>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	895b      	ldrh	r3, [r3, #10]
 8001020:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001024:	4618      	mov	r0, r3
 8001026:	f000 fb8b 	bl	8001740 <clip_max_value>
 800102a:	4603      	mov	r3, r0
 800102c:	78fc      	ldrb	r4, [r7, #3]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fcbc 	bl	80019ac <ADCPT1000_to_temp>
 8001034:	4603      	mov	r3, r0
 8001036:	4619      	mov	r1, r3
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <frame_get_data+0x2e4>)
 800103a:	01e3      	lsls	r3, r4, #7
 800103c:	4413      	add	r3, r2
 800103e:	332a      	adds	r3, #42	; 0x2a
 8001040:	460a      	mov	r2, r1
 8001042:	801a      	strh	r2, [r3, #0]
 8001044:	e007      	b.n	8001056 <frame_get_data+0x2a6>
        else S[slaveIndex].PT[5] = T_NULL;
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <frame_get_data+0x2e4>)
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	4413      	add	r3, r2
 800104e:	332a      	adds	r3, #42	; 0x2a
 8001050:	f241 3288 	movw	r2, #5000	; 0x1388
 8001054:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog5 < PT1000_MAX) && (raw->Analog5 > PT1000_MIN)) S[slaveIndex].PT[6] = ADCPT1000_to_temp(clip_max_value(raw->Analog5, 4095));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	899b      	ldrh	r3, [r3, #12]
 800105a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800105e:	4293      	cmp	r3, r2
 8001060:	d81a      	bhi.n	8001098 <frame_get_data+0x2e8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	899b      	ldrh	r3, [r3, #12]
 8001066:	2b0a      	cmp	r3, #10
 8001068:	d916      	bls.n	8001098 <frame_get_data+0x2e8>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	899b      	ldrh	r3, [r3, #12]
 800106e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb64 	bl	8001740 <clip_max_value>
 8001078:	4603      	mov	r3, r0
 800107a:	78fc      	ldrb	r4, [r7, #3]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fc95 	bl	80019ac <ADCPT1000_to_temp>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	4a03      	ldr	r2, [pc, #12]	; (8001094 <frame_get_data+0x2e4>)
 8001088:	01e3      	lsls	r3, r4, #7
 800108a:	4413      	add	r3, r2
 800108c:	332c      	adds	r3, #44	; 0x2c
 800108e:	460a      	mov	r2, r1
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	e009      	b.n	80010a8 <frame_get_data+0x2f8>
 8001094:	200004a4 	.word	0x200004a4
        else S[slaveIndex].PT[6] = T_NULL;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	4a26      	ldr	r2, [pc, #152]	; (8001134 <frame_get_data+0x384>)
 800109c:	01db      	lsls	r3, r3, #7
 800109e:	4413      	add	r3, r2
 80010a0:	332c      	adds	r3, #44	; 0x2c
 80010a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a6:	801a      	strh	r2, [r3, #0]
        if ((raw->Analog6 < PT1000_MAX) && (raw->Analog6 > PT1000_MIN)) S[slaveIndex].PT[7] = ADCPT1000_to_temp(clip_max_value(raw->Analog6, 4095));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	89db      	ldrh	r3, [r3, #14]
 80010ac:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d818      	bhi.n	80010e6 <frame_get_data+0x336>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	89db      	ldrh	r3, [r3, #14]
 80010b8:	2b0a      	cmp	r3, #10
 80010ba:	d914      	bls.n	80010e6 <frame_get_data+0x336>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	89db      	ldrh	r3, [r3, #14]
 80010c0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fb3b 	bl	8001740 <clip_max_value>
 80010ca:	4603      	mov	r3, r0
 80010cc:	78fc      	ldrb	r4, [r7, #3]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fc6c 	bl	80019ac <ADCPT1000_to_temp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <frame_get_data+0x384>)
 80010da:	01e3      	lsls	r3, r4, #7
 80010dc:	4413      	add	r3, r2
 80010de:	332e      	adds	r3, #46	; 0x2e
 80010e0:	460a      	mov	r2, r1
 80010e2:	801a      	strh	r2, [r3, #0]
 80010e4:	e007      	b.n	80010f6 <frame_get_data+0x346>
        else S[slaveIndex].PT[7] = T_NULL;
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <frame_get_data+0x384>)
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	4413      	add	r3, r2
 80010ee:	332e      	adds	r3, #46	; 0x2e
 80010f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f4:	801a      	strh	r2, [r3, #0]
//        if ((raw->Analog7 < NTC60_MAX) && (raw->Analog7 > NTC60_MIN)) S[slaveIndex].PT[0] = TempTabm4060[clip_max_value(raw->Analog7, 4095)];
        if ((raw->Analog7 < NTC60_MAX) && (raw->Analog7 > NTC60_MIN)) S[slaveIndex].PT[0] = ADCNTCZ_to_temp(clip_max_value(raw->Analog7, 4095));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	8a1b      	ldrh	r3, [r3, #16]
 80010fa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80010fe:	d21b      	bcs.n	8001138 <frame_get_data+0x388>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	8a1b      	ldrh	r3, [r3, #16]
 8001104:	2b8c      	cmp	r3, #140	; 0x8c
 8001106:	d917      	bls.n	8001138 <frame_get_data+0x388>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8a1b      	ldrh	r3, [r3, #16]
 800110c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fb15 	bl	8001740 <clip_max_value>
 8001116:	4603      	mov	r3, r0
 8001118:	78fc      	ldrb	r4, [r7, #3]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fca4 	bl	8001a68 <ADCNTCZ_to_temp>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4a03      	ldr	r2, [pc, #12]	; (8001134 <frame_get_data+0x384>)
 8001126:	01e3      	lsls	r3, r4, #7
 8001128:	4413      	add	r3, r2
 800112a:	3320      	adds	r3, #32
 800112c:	460a      	mov	r2, r1
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	e00a      	b.n	8001148 <frame_get_data+0x398>
 8001132:	bf00      	nop
 8001134:	200004a4 	.word	0x200004a4
        else S[slaveIndex].PT[0] = T_NULL;
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	4ac2      	ldr	r2, [pc, #776]	; (8001444 <frame_get_data+0x694>)
 800113c:	01db      	lsls	r3, r3, #7
 800113e:	4413      	add	r3, r2
 8001140:	3320      	adds	r3, #32
 8001142:	f241 3288 	movw	r2, #5000	; 0x1388
 8001146:	801a      	strh	r2, [r3, #0]
#endif
        S[slaveIndex].DigitalInputs = raw->Inputs;
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	7c91      	ldrb	r1, [r2, #18]
 800114e:	4abd      	ldr	r2, [pc, #756]	; (8001444 <frame_get_data+0x694>)
 8001150:	01db      	lsls	r3, r3, #7
 8001152:	4413      	add	r3, r2
 8001154:	3348      	adds	r3, #72	; 0x48
 8001156:	460a      	mov	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
    }
    S[slaveIndex].PPT[1] = check_to_update(S[slaveIndex].PPT[1], S[slaveIndex].PT[1], 13);
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	4ab9      	ldr	r2, [pc, #740]	; (8001444 <frame_get_data+0x694>)
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	4413      	add	r3, r2
 8001162:	3332      	adds	r3, #50	; 0x32
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b218      	sxth	r0, r3
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	4ab6      	ldr	r2, [pc, #728]	; (8001444 <frame_get_data+0x694>)
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	4413      	add	r3, r2
 8001170:	3322      	adds	r3, #34	; 0x22
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	b21b      	sxth	r3, r3
 8001176:	78fc      	ldrb	r4, [r7, #3]
 8001178:	220d      	movs	r2, #13
 800117a:	4619      	mov	r1, r3
 800117c:	f000 fac8 	bl	8001710 <check_to_update>
 8001180:	4603      	mov	r3, r0
 8001182:	4619      	mov	r1, r3
 8001184:	4aaf      	ldr	r2, [pc, #700]	; (8001444 <frame_get_data+0x694>)
 8001186:	01e3      	lsls	r3, r4, #7
 8001188:	4413      	add	r3, r2
 800118a:	3332      	adds	r3, #50	; 0x32
 800118c:	460a      	mov	r2, r1
 800118e:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[1] = temperature_convert_to_normal(S[slaveIndex].PT[1], S[slaveIndex].Cmpns[1], -99, 99, 0);
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	4aac      	ldr	r2, [pc, #688]	; (8001444 <frame_get_data+0x694>)
 8001194:	01db      	lsls	r3, r3, #7
 8001196:	4413      	add	r3, r2
 8001198:	3322      	adds	r3, #34	; 0x22
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b21b      	sxth	r3, r3
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	4aa6      	ldr	r2, [pc, #664]	; (8001444 <frame_get_data+0x694>)
 80011aa:	01db      	lsls	r3, r3, #7
 80011ac:	4413      	add	r3, r2
 80011ae:	3341      	adds	r3, #65	; 0x41
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	ee07 3a10 	vmov	s14, r3
 80011b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011bc:	78fc      	ldrb	r4, [r7, #3]
 80011be:	2200      	movs	r2, #0
 80011c0:	2163      	movs	r1, #99	; 0x63
 80011c2:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80011c6:	eef0 0a47 	vmov.f32	s1, s14
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	f7ff fc91 	bl	8000af4 <temperature_convert_to_normal>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4a9b      	ldr	r2, [pc, #620]	; (8001444 <frame_get_data+0x694>)
 80011d8:	01e3      	lsls	r3, r4, #7
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[2] = check_to_update(S[slaveIndex].PPT[2], S[slaveIndex].PT[2], 14);
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	4a97      	ldr	r2, [pc, #604]	; (8001444 <frame_get_data+0x694>)
 80011e6:	01db      	lsls	r3, r3, #7
 80011e8:	4413      	add	r3, r2
 80011ea:	3334      	adds	r3, #52	; 0x34
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	b218      	sxth	r0, r3
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	4a94      	ldr	r2, [pc, #592]	; (8001444 <frame_get_data+0x694>)
 80011f4:	01db      	lsls	r3, r3, #7
 80011f6:	4413      	add	r3, r2
 80011f8:	3324      	adds	r3, #36	; 0x24
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	78fc      	ldrb	r4, [r7, #3]
 8001200:	220e      	movs	r2, #14
 8001202:	4619      	mov	r1, r3
 8001204:	f000 fa84 	bl	8001710 <check_to_update>
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	4a8d      	ldr	r2, [pc, #564]	; (8001444 <frame_get_data+0x694>)
 800120e:	01e3      	lsls	r3, r4, #7
 8001210:	4413      	add	r3, r2
 8001212:	3334      	adds	r3, #52	; 0x34
 8001214:	460a      	mov	r2, r1
 8001216:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[2] = temperature_convert_to_normal(S[slaveIndex].PT[2], S[slaveIndex].Cmpns[2], -99, 99, 0);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <frame_get_data+0x694>)
 800121c:	01db      	lsls	r3, r3, #7
 800121e:	4413      	add	r3, r2
 8001220:	3324      	adds	r3, #36	; 0x24
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b21b      	sxth	r3, r3
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4a84      	ldr	r2, [pc, #528]	; (8001444 <frame_get_data+0x694>)
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	4413      	add	r3, r2
 8001236:	3342      	adds	r3, #66	; 0x42
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	ee07 3a10 	vmov	s14, r3
 8001240:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001244:	78fc      	ldrb	r4, [r7, #3]
 8001246:	2200      	movs	r2, #0
 8001248:	2163      	movs	r1, #99	; 0x63
 800124a:	f06f 0062 	mvn.w	r0, #98	; 0x62
 800124e:	eef0 0a47 	vmov.f32	s1, s14
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f7ff fc4d 	bl	8000af4 <temperature_convert_to_normal>
 800125a:	eef0 7a40 	vmov.f32	s15, s0
 800125e:	4a79      	ldr	r2, [pc, #484]	; (8001444 <frame_get_data+0x694>)
 8001260:	01e3      	lsls	r3, r4, #7
 8001262:	4413      	add	r3, r2
 8001264:	3308      	adds	r3, #8
 8001266:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[3] = check_to_update(S[slaveIndex].PPT[3], S[slaveIndex].PT[3], 15);
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	4a75      	ldr	r2, [pc, #468]	; (8001444 <frame_get_data+0x694>)
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	4413      	add	r3, r2
 8001272:	3336      	adds	r3, #54	; 0x36
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	b218      	sxth	r0, r3
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <frame_get_data+0x694>)
 800127c:	01db      	lsls	r3, r3, #7
 800127e:	4413      	add	r3, r2
 8001280:	3326      	adds	r3, #38	; 0x26
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b21b      	sxth	r3, r3
 8001286:	78fc      	ldrb	r4, [r7, #3]
 8001288:	220f      	movs	r2, #15
 800128a:	4619      	mov	r1, r3
 800128c:	f000 fa40 	bl	8001710 <check_to_update>
 8001290:	4603      	mov	r3, r0
 8001292:	4619      	mov	r1, r3
 8001294:	4a6b      	ldr	r2, [pc, #428]	; (8001444 <frame_get_data+0x694>)
 8001296:	01e3      	lsls	r3, r4, #7
 8001298:	4413      	add	r3, r2
 800129a:	3336      	adds	r3, #54	; 0x36
 800129c:	460a      	mov	r2, r1
 800129e:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[3] = temperature_convert_to_normal(S[slaveIndex].PT[3], S[slaveIndex].Cmpns[3], -99, 99, 0);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	4a68      	ldr	r2, [pc, #416]	; (8001444 <frame_get_data+0x694>)
 80012a4:	01db      	lsls	r3, r3, #7
 80012a6:	4413      	add	r3, r2
 80012a8:	3326      	adds	r3, #38	; 0x26
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	4a62      	ldr	r2, [pc, #392]	; (8001444 <frame_get_data+0x694>)
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	4413      	add	r3, r2
 80012be:	3343      	adds	r3, #67	; 0x43
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	ee07 3a10 	vmov	s14, r3
 80012c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012cc:	78fc      	ldrb	r4, [r7, #3]
 80012ce:	2200      	movs	r2, #0
 80012d0:	2163      	movs	r1, #99	; 0x63
 80012d2:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80012d6:	eef0 0a47 	vmov.f32	s1, s14
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	f7ff fc09 	bl	8000af4 <temperature_convert_to_normal>
 80012e2:	eef0 7a40 	vmov.f32	s15, s0
 80012e6:	4a57      	ldr	r2, [pc, #348]	; (8001444 <frame_get_data+0x694>)
 80012e8:	01e3      	lsls	r3, r4, #7
 80012ea:	4413      	add	r3, r2
 80012ec:	330c      	adds	r3, #12
 80012ee:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[4] = check_to_update(S[slaveIndex].PPT[4], S[slaveIndex].PT[4], 16);
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	4a53      	ldr	r2, [pc, #332]	; (8001444 <frame_get_data+0x694>)
 80012f6:	01db      	lsls	r3, r3, #7
 80012f8:	4413      	add	r3, r2
 80012fa:	3338      	adds	r3, #56	; 0x38
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b218      	sxth	r0, r3
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4a50      	ldr	r2, [pc, #320]	; (8001444 <frame_get_data+0x694>)
 8001304:	01db      	lsls	r3, r3, #7
 8001306:	4413      	add	r3, r2
 8001308:	3328      	adds	r3, #40	; 0x28
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b21b      	sxth	r3, r3
 800130e:	78fc      	ldrb	r4, [r7, #3]
 8001310:	2210      	movs	r2, #16
 8001312:	4619      	mov	r1, r3
 8001314:	f000 f9fc 	bl	8001710 <check_to_update>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	4a49      	ldr	r2, [pc, #292]	; (8001444 <frame_get_data+0x694>)
 800131e:	01e3      	lsls	r3, r4, #7
 8001320:	4413      	add	r3, r2
 8001322:	3338      	adds	r3, #56	; 0x38
 8001324:	460a      	mov	r2, r1
 8001326:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[4] = temperature_convert_to_normal(S[slaveIndex].PT[4], S[slaveIndex].Cmpns[4], -99, 99, 0);
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	4a46      	ldr	r2, [pc, #280]	; (8001444 <frame_get_data+0x694>)
 800132c:	01db      	lsls	r3, r3, #7
 800132e:	4413      	add	r3, r2
 8001330:	3328      	adds	r3, #40	; 0x28
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b21b      	sxth	r3, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	4a40      	ldr	r2, [pc, #256]	; (8001444 <frame_get_data+0x694>)
 8001342:	01db      	lsls	r3, r3, #7
 8001344:	4413      	add	r3, r2
 8001346:	3344      	adds	r3, #68	; 0x44
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	ee07 3a10 	vmov	s14, r3
 8001350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001354:	78fc      	ldrb	r4, [r7, #3]
 8001356:	2200      	movs	r2, #0
 8001358:	2163      	movs	r1, #99	; 0x63
 800135a:	f06f 0062 	mvn.w	r0, #98	; 0x62
 800135e:	eef0 0a47 	vmov.f32	s1, s14
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	f7ff fbc5 	bl	8000af4 <temperature_convert_to_normal>
 800136a:	eef0 7a40 	vmov.f32	s15, s0
 800136e:	4a35      	ldr	r2, [pc, #212]	; (8001444 <frame_get_data+0x694>)
 8001370:	01e3      	lsls	r3, r4, #7
 8001372:	4413      	add	r3, r2
 8001374:	3310      	adds	r3, #16
 8001376:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[5] = check_to_update(S[slaveIndex].PPT[5], S[slaveIndex].PT[5], 17);
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	4a31      	ldr	r2, [pc, #196]	; (8001444 <frame_get_data+0x694>)
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4413      	add	r3, r2
 8001382:	333a      	adds	r3, #58	; 0x3a
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b218      	sxth	r0, r3
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4a2e      	ldr	r2, [pc, #184]	; (8001444 <frame_get_data+0x694>)
 800138c:	01db      	lsls	r3, r3, #7
 800138e:	4413      	add	r3, r2
 8001390:	332a      	adds	r3, #42	; 0x2a
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b21b      	sxth	r3, r3
 8001396:	78fc      	ldrb	r4, [r7, #3]
 8001398:	2211      	movs	r2, #17
 800139a:	4619      	mov	r1, r3
 800139c:	f000 f9b8 	bl	8001710 <check_to_update>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <frame_get_data+0x694>)
 80013a6:	01e3      	lsls	r3, r4, #7
 80013a8:	4413      	add	r3, r2
 80013aa:	333a      	adds	r3, #58	; 0x3a
 80013ac:	460a      	mov	r2, r1
 80013ae:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[5] = temperature_convert_to_normal(S[slaveIndex].PT[5], S[slaveIndex].Cmpns[5], -99, 99, 0);
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <frame_get_data+0x694>)
 80013b4:	01db      	lsls	r3, r3, #7
 80013b6:	4413      	add	r3, r2
 80013b8:	332a      	adds	r3, #42	; 0x2a
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	4a1e      	ldr	r2, [pc, #120]	; (8001444 <frame_get_data+0x694>)
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	4413      	add	r3, r2
 80013ce:	3345      	adds	r3, #69	; 0x45
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	ee07 3a10 	vmov	s14, r3
 80013d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013dc:	78fc      	ldrb	r4, [r7, #3]
 80013de:	2200      	movs	r2, #0
 80013e0:	2163      	movs	r1, #99	; 0x63
 80013e2:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80013e6:	eef0 0a47 	vmov.f32	s1, s14
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	f7ff fb81 	bl	8000af4 <temperature_convert_to_normal>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <frame_get_data+0x694>)
 80013f8:	01e3      	lsls	r3, r4, #7
 80013fa:	4413      	add	r3, r2
 80013fc:	3314      	adds	r3, #20
 80013fe:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[6] = check_to_update(S[slaveIndex].PPT[6], S[slaveIndex].PT[6], 18);
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <frame_get_data+0x694>)
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	4413      	add	r3, r2
 800140a:	333c      	adds	r3, #60	; 0x3c
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b218      	sxth	r0, r3
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <frame_get_data+0x694>)
 8001414:	01db      	lsls	r3, r3, #7
 8001416:	4413      	add	r3, r2
 8001418:	332c      	adds	r3, #44	; 0x2c
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b21b      	sxth	r3, r3
 800141e:	78fc      	ldrb	r4, [r7, #3]
 8001420:	2212      	movs	r2, #18
 8001422:	4619      	mov	r1, r3
 8001424:	f000 f974 	bl	8001710 <check_to_update>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <frame_get_data+0x694>)
 800142e:	01e3      	lsls	r3, r4, #7
 8001430:	4413      	add	r3, r2
 8001432:	333c      	adds	r3, #60	; 0x3c
 8001434:	460a      	mov	r2, r1
 8001436:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[6] = temperature_convert_to_normal(S[slaveIndex].PT[6], S[slaveIndex].Cmpns[6], -99, 99, 0);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	4a02      	ldr	r2, [pc, #8]	; (8001444 <frame_get_data+0x694>)
 800143c:	01db      	lsls	r3, r3, #7
 800143e:	4413      	add	r3, r2
 8001440:	332c      	adds	r3, #44	; 0x2c
 8001442:	e001      	b.n	8001448 <frame_get_data+0x698>
 8001444:	200004a4 	.word	0x200004a4
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b21b      	sxth	r3, r3
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	4aa4      	ldr	r2, [pc, #656]	; (80016e8 <frame_get_data+0x938>)
 8001458:	01db      	lsls	r3, r3, #7
 800145a:	4413      	add	r3, r2
 800145c:	3346      	adds	r3, #70	; 0x46
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	ee07 3a10 	vmov	s14, r3
 8001466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800146a:	78fc      	ldrb	r4, [r7, #3]
 800146c:	2200      	movs	r2, #0
 800146e:	2163      	movs	r1, #99	; 0x63
 8001470:	f06f 0062 	mvn.w	r0, #98	; 0x62
 8001474:	eef0 0a47 	vmov.f32	s1, s14
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	f7ff fb3a 	bl	8000af4 <temperature_convert_to_normal>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
 8001484:	4a98      	ldr	r2, [pc, #608]	; (80016e8 <frame_get_data+0x938>)
 8001486:	01e3      	lsls	r3, r4, #7
 8001488:	4413      	add	r3, r2
 800148a:	3318      	adds	r3, #24
 800148c:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[7] = check_to_update(S[slaveIndex].PPT[7], S[slaveIndex].PT[7], 19);
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	4a95      	ldr	r2, [pc, #596]	; (80016e8 <frame_get_data+0x938>)
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	4413      	add	r3, r2
 8001498:	333e      	adds	r3, #62	; 0x3e
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b218      	sxth	r0, r3
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	4a91      	ldr	r2, [pc, #580]	; (80016e8 <frame_get_data+0x938>)
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4413      	add	r3, r2
 80014a6:	332e      	adds	r3, #46	; 0x2e
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	78fc      	ldrb	r4, [r7, #3]
 80014ae:	2213      	movs	r2, #19
 80014b0:	4619      	mov	r1, r3
 80014b2:	f000 f92d 	bl	8001710 <check_to_update>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4a8b      	ldr	r2, [pc, #556]	; (80016e8 <frame_get_data+0x938>)
 80014bc:	01e3      	lsls	r3, r4, #7
 80014be:	4413      	add	r3, r2
 80014c0:	333e      	adds	r3, #62	; 0x3e
 80014c2:	460a      	mov	r2, r1
 80014c4:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[7] = temperature_convert_to_normal(S[slaveIndex].PT[7], S[slaveIndex].Cmpns[7], -99, 99, 0);
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <frame_get_data+0x938>)
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	4413      	add	r3, r2
 80014ce:	332e      	adds	r3, #46	; 0x2e
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	4a82      	ldr	r2, [pc, #520]	; (80016e8 <frame_get_data+0x938>)
 80014e0:	01db      	lsls	r3, r3, #7
 80014e2:	4413      	add	r3, r2
 80014e4:	3347      	adds	r3, #71	; 0x47
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	ee07 3a10 	vmov	s14, r3
 80014ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014f2:	78fc      	ldrb	r4, [r7, #3]
 80014f4:	2200      	movs	r2, #0
 80014f6:	2163      	movs	r1, #99	; 0x63
 80014f8:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80014fc:	eef0 0a47 	vmov.f32	s1, s14
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	f7ff faf6 	bl	8000af4 <temperature_convert_to_normal>
 8001508:	eef0 7a40 	vmov.f32	s15, s0
 800150c:	4a76      	ldr	r2, [pc, #472]	; (80016e8 <frame_get_data+0x938>)
 800150e:	01e3      	lsls	r3, r4, #7
 8001510:	4413      	add	r3, r2
 8001512:	331c      	adds	r3, #28
 8001514:	edc3 7a00 	vstr	s15, [r3]

    S[slaveIndex].PPT[0] = check_to_update(S[slaveIndex].PPT[0], S[slaveIndex].PT[0], 20);
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <frame_get_data+0x938>)
 800151c:	01db      	lsls	r3, r3, #7
 800151e:	4413      	add	r3, r2
 8001520:	3330      	adds	r3, #48	; 0x30
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b218      	sxth	r0, r3
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	4a6f      	ldr	r2, [pc, #444]	; (80016e8 <frame_get_data+0x938>)
 800152a:	01db      	lsls	r3, r3, #7
 800152c:	4413      	add	r3, r2
 800152e:	3320      	adds	r3, #32
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	78fc      	ldrb	r4, [r7, #3]
 8001536:	2214      	movs	r2, #20
 8001538:	4619      	mov	r1, r3
 800153a:	f000 f8e9 	bl	8001710 <check_to_update>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4a69      	ldr	r2, [pc, #420]	; (80016e8 <frame_get_data+0x938>)
 8001544:	01e3      	lsls	r3, r4, #7
 8001546:	4413      	add	r3, r2
 8001548:	3330      	adds	r3, #48	; 0x30
 800154a:	460a      	mov	r2, r1
 800154c:	801a      	strh	r2, [r3, #0]
    S[slaveIndex].T[0] = temperature_convert_to_normal(S[slaveIndex].PT[0]/10, S[slaveIndex].Cmpns[0], -99, 99, (S[slaveIndex].PT[0] == T_NULL));
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <frame_get_data+0x938>)
 8001552:	01db      	lsls	r3, r3, #7
 8001554:	4413      	add	r3, r2
 8001556:	3320      	adds	r3, #32
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4a63      	ldr	r2, [pc, #396]	; (80016ec <frame_get_data+0x93c>)
 800155e:	fb82 1203 	smull	r1, r2, r2, r3
 8001562:	1092      	asrs	r2, r2, #2
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b21b      	sxth	r3, r3
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <frame_get_data+0x938>)
 8001576:	01db      	lsls	r3, r3, #7
 8001578:	4413      	add	r3, r2
 800157a:	3340      	adds	r3, #64	; 0x40
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b25b      	sxtb	r3, r3
 8001580:	ee07 3a10 	vmov	s14, r3
 8001584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <frame_get_data+0x938>)
 800158c:	01db      	lsls	r3, r3, #7
 800158e:	4413      	add	r3, r2
 8001590:	3320      	adds	r3, #32
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b21b      	sxth	r3, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	78fc      	ldrb	r4, [r7, #3]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2163      	movs	r1, #99	; 0x63
 80015ac:	f06f 0062 	mvn.w	r0, #98	; 0x62
 80015b0:	eef0 0a47 	vmov.f32	s1, s14
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f7ff fa9c 	bl	8000af4 <temperature_convert_to_normal>
 80015bc:	eef0 7a40 	vmov.f32	s15, s0
 80015c0:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <frame_get_data+0x938>)
 80015c2:	01e3      	lsls	r3, r4, #7
 80015c4:	4413      	add	r3, r2
 80015c6:	edc3 7a00 	vstr	s15, [r3]

    tmpInputs = S[slaveIndex].PrvDI^S[slaveIndex].DigitalInputs;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <frame_get_data+0x938>)
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	3349      	adds	r3, #73	; 0x49
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	4943      	ldr	r1, [pc, #268]	; (80016e8 <frame_get_data+0x938>)
 80015dc:	01db      	lsls	r3, r3, #7
 80015de:	440b      	add	r3, r1
 80015e0:	3348      	adds	r3, #72	; 0x48
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4053      	eors	r3, r2
 80015e8:	73bb      	strb	r3, [r7, #14]
    S[slaveIndex].PrvDI = S[slaveIndex].DigitalInputs;
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	493e      	ldr	r1, [pc, #248]	; (80016e8 <frame_get_data+0x938>)
 80015f0:	01d2      	lsls	r2, r2, #7
 80015f2:	440a      	add	r2, r1
 80015f4:	3248      	adds	r2, #72	; 0x48
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	b2d1      	uxtb	r1, r2
 80015fa:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <frame_get_data+0x938>)
 80015fc:	01db      	lsls	r3, r3, #7
 80015fe:	4413      	add	r3, r2
 8001600:	3349      	adds	r3, #73	; 0x49
 8001602:	460a      	mov	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]


    temp_to_xchar_3(S[0].T[1], Temperatures.T1, 0);
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <frame_get_data+0x938>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	b21b      	sxth	r3, r3
 8001616:	2200      	movs	r2, #0
 8001618:	4935      	ldr	r1, [pc, #212]	; (80016f0 <frame_get_data+0x940>)
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fb2c 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[2], Temperatures.T2, 0);
 8001620:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <frame_get_data+0x938>)
 8001622:	edd3 7a02 	vldr	s15, [r3, #8]
 8001626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162a:	ee17 3a90 	vmov	r3, s15
 800162e:	b21b      	sxth	r3, r3
 8001630:	2200      	movs	r2, #0
 8001632:	4930      	ldr	r1, [pc, #192]	; (80016f4 <frame_get_data+0x944>)
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fb1f 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[3], Temperatures.T3, 0);
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <frame_get_data+0x938>)
 800163c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001644:	ee17 3a90 	vmov	r3, s15
 8001648:	b21b      	sxth	r3, r3
 800164a:	2200      	movs	r2, #0
 800164c:	492a      	ldr	r1, [pc, #168]	; (80016f8 <frame_get_data+0x948>)
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fb12 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[4], Temperatures.T4, 0);
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <frame_get_data+0x938>)
 8001656:	edd3 7a04 	vldr	s15, [r3, #16]
 800165a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165e:	ee17 3a90 	vmov	r3, s15
 8001662:	b21b      	sxth	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	4925      	ldr	r1, [pc, #148]	; (80016fc <frame_get_data+0x94c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fb05 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[5], Temperatures.T5, 0);
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <frame_get_data+0x938>)
 8001670:	edd3 7a05 	vldr	s15, [r3, #20]
 8001674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001678:	ee17 3a90 	vmov	r3, s15
 800167c:	b21b      	sxth	r3, r3
 800167e:	2200      	movs	r2, #0
 8001680:	491f      	ldr	r1, [pc, #124]	; (8001700 <frame_get_data+0x950>)
 8001682:	4618      	mov	r0, r3
 8001684:	f000 faf8 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[6], Temperatures.T6, 0);
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <frame_get_data+0x938>)
 800168a:	edd3 7a06 	vldr	s15, [r3, #24]
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	b21b      	sxth	r3, r3
 8001698:	2200      	movs	r2, #0
 800169a:	491a      	ldr	r1, [pc, #104]	; (8001704 <frame_get_data+0x954>)
 800169c:	4618      	mov	r0, r3
 800169e:	f000 faeb 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[7], Temperatures.T7, 0);
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <frame_get_data+0x938>)
 80016a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	ee17 3a90 	vmov	r3, s15
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	4914      	ldr	r1, [pc, #80]	; (8001708 <frame_get_data+0x958>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fade 	bl	8001c78 <temp_to_xchar_3>
    temp_to_xchar_3(S[0].T[0] * 10, Temperatures.TZ, 0);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <frame_get_data+0x938>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <frame_get_data+0x95c>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 facd 	bl	8001c78 <temp_to_xchar_3>


    return eventLog;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	200004a4 	.word	0x200004a4
 80016ec:	66666667 	.word	0x66666667
 80016f0:	200008c0 	.word	0x200008c0
 80016f4:	200008c5 	.word	0x200008c5
 80016f8:	200008ca 	.word	0x200008ca
 80016fc:	200008cf 	.word	0x200008cf
 8001700:	200008d4 	.word	0x200008d4
 8001704:	200008d9 	.word	0x200008d9
 8001708:	200008de 	.word	0x200008de
 800170c:	200008e3 	.word	0x200008e3

08001710 <check_to_update>:

int16_t check_to_update(int16_t prvVal, int16_t actVal, uint8_t _bit) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	70fb      	strb	r3, [r7, #3]
    if (prvVal != actVal)
 8001722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001726:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d002      	beq.n	8001734 <check_to_update+0x24>
//        gui_refresh_bits_0 |= (1 << _bit);
    return actVal;
 800172e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001732:	e7ff      	b.n	8001734 <check_to_update+0x24>
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <clip_max_value>:

uint16_t clip_max_value(uint16_t value, uint16_t max) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	4613      	mov	r3, r2
 800174e:	80bb      	strh	r3, [r7, #4]
    if (value > max) return max;
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	d901      	bls.n	800175c <clip_max_value+0x1c>
 8001758:	88bb      	ldrh	r3, [r7, #4]
 800175a:	e000      	b.n	800175e <clip_max_value+0x1e>
    return value;
 800175c:	88fb      	ldrh	r3, [r7, #6]
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <PWMframe_get_data>:
        clipped[i] = frame[start + i];
    if (sscanf(clipped, "%x", &result) < 1) return 0;
    return (uint16_t)result;
}

uint8_t PWMframe_get_data(_slavePWMFrame * raw, uint8_t slaveIndex, uint8_t cmpnsStart, uint8_t clrFlag) {
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
    uint8_t eventLog = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]
    if (clrFlag == 1) {
 800178a:	787b      	ldrb	r3, [r7, #1]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d13e      	bne.n	800180e <PWMframe_get_data+0xa2>
        if (SPWM[slaveIndex].AbsenceCnt < MAX_ABSENCE) {
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <PWMframe_get_data+0x168>)
 8001794:	2116      	movs	r1, #22
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	3314      	adds	r3, #20
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b31      	cmp	r3, #49	; 0x31
 80017a4:	d820      	bhi.n	80017e8 <PWMframe_get_data+0x7c>
            if (SPWM[slaveIndex].AbsenceCnt == MAX_ABSENCE - 1) eventLog = 1;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <PWMframe_get_data+0x168>)
 80017aa:	2116      	movs	r1, #22
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	3314      	adds	r3, #20
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b31      	cmp	r3, #49	; 0x31
 80017ba:	d101      	bne.n	80017c0 <PWMframe_get_data+0x54>
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
            SPWM[slaveIndex].AbsenceCnt++;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	4944      	ldr	r1, [pc, #272]	; (80018d4 <PWMframe_get_data+0x168>)
 80017c4:	2216      	movs	r2, #22
 80017c6:	fb03 f202 	mul.w	r2, r3, r2
 80017ca:	440a      	add	r2, r1
 80017cc:	3214      	adds	r2, #20
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	3201      	adds	r2, #1
 80017d4:	b2d0      	uxtb	r0, r2
 80017d6:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <PWMframe_get_data+0x168>)
 80017d8:	2116      	movs	r1, #22
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3314      	adds	r3, #20
 80017e2:	4602      	mov	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e06d      	b.n	80018c4 <PWMframe_get_data+0x158>
        }
        else {
            SPWM[slaveIndex].PWM1o = 0;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	4a3a      	ldr	r2, [pc, #232]	; (80018d4 <PWMframe_get_data+0x168>)
 80017ec:	2116      	movs	r1, #22
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3302      	adds	r3, #2
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
            SPWM[slaveIndex].PWM2o = 0;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	4a35      	ldr	r2, [pc, #212]	; (80018d4 <PWMframe_get_data+0x168>)
 80017fe:	2116      	movs	r1, #22
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3304      	adds	r3, #4
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e05a      	b.n	80018c4 <PWMframe_get_data+0x158>
        }
    }
    else {
        if (SPWM[slaveIndex].AbsenceCnt == MAX_ABSENCE) eventLog = 1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <PWMframe_get_data+0x168>)
 8001812:	2116      	movs	r1, #22
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3314      	adds	r3, #20
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b32      	cmp	r3, #50	; 0x32
 8001822:	d101      	bne.n	8001828 <PWMframe_get_data+0xbc>
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
        SPWM[slaveIndex].AbsenceCnt = 0;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <PWMframe_get_data+0x168>)
 800182c:	2116      	movs	r1, #22
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3314      	adds	r3, #20
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
        if ((raw->PWM1 < 201) && (raw->PWM1 > 0)) SPWM[slaveIndex].PWM1o = raw->PWM1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	789b      	ldrb	r3, [r3, #2]
 800183e:	2bc8      	cmp	r3, #200	; 0xc8
 8001840:	d80f      	bhi.n	8001862 <PWMframe_get_data+0xf6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	789b      	ldrb	r3, [r3, #2]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <PWMframe_get_data+0xf6>
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	7890      	ldrb	r0, [r2, #2]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <PWMframe_get_data+0x168>)
 8001852:	2116      	movs	r1, #22
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	3302      	adds	r3, #2
 800185c:	4602      	mov	r2, r0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	e008      	b.n	8001874 <PWMframe_get_data+0x108>
        else SPWM[slaveIndex].PWM1o = 0;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <PWMframe_get_data+0x168>)
 8001866:	2116      	movs	r1, #22
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3302      	adds	r3, #2
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
        if ((raw->PWM2 < 201) && (raw->PWM2 > 0)) SPWM[slaveIndex].PWM2o = raw->PWM2;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	2bc8      	cmp	r3, #200	; 0xc8
 800187a:	d80f      	bhi.n	800189c <PWMframe_get_data+0x130>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	78db      	ldrb	r3, [r3, #3]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <PWMframe_get_data+0x130>
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	78d0      	ldrb	r0, [r2, #3]
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <PWMframe_get_data+0x168>)
 800188c:	2116      	movs	r1, #22
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3304      	adds	r3, #4
 8001896:	4602      	mov	r2, r0
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e008      	b.n	80018ae <PWMframe_get_data+0x142>
        else SPWM[slaveIndex].PWM2o = 0;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <PWMframe_get_data+0x168>)
 80018a0:	2116      	movs	r1, #22
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
        SPWM[slaveIndex].Temp = raw->St;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	7850      	ldrb	r0, [r2, #1]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <PWMframe_get_data+0x168>)
 80018b6:	2116      	movs	r1, #22
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3309      	adds	r3, #9
 80018c0:	4602      	mov	r2, r0
 80018c2:	701a      	strb	r2, [r3, #0]





    return eventLog;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000824 	.word	0x20000824

080018d8 <UARTSendDataByte>:
	//HAL_GPIO_WritePin(UA5_EN_GPIO_Port, UA5_EN_Pin, RESET);
}


 void UARTSendDataByte(UART_HandleTypeDef * UART, char * datas, uint8_t len)
 {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	71fb      	strb	r3, [r7, #7]

	 HAL_GPIO_WritePin(UA5_EN_GPIO_Port, UA5_EN_Pin, SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	2110      	movs	r1, #16
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <UARTSendDataByte+0x34>)
 80018ec:	f003 fa90 	bl	8004e10 <HAL_GPIO_WritePin>
	 osDelay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f00a faf5 	bl	800bee0 <osDelay>
	 HAL_UART_Transmit_DMA(UART, &datas[0], len);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f007 ff6e 	bl	80097e0 <HAL_UART_Transmit_DMA>

	// HAL_UART_Transmit(&huart1, &datas[0], len, 100);

 }
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40020c00 	.word	0x40020c00

08001910 <HAL_UART_RxCpltCallback>:
	 //HAL_UART_Transmit(&huart1, &datas[0], len, 100);

 }
volatile uint32_t cccc= 0;
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	 cccc++;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_UART_RxCpltCallback+0x20>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_UART_RxCpltCallback+0x20>)
 8001920:	6013      	str	r3, [r2, #0]
 }
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000478 	.word	0x20000478

08001934 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(UA5_EN_GPIO_Port, UA5_EN_Pin, RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2110      	movs	r1, #16
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <HAL_UART_TxCpltCallback+0x64>)
 8001942:	f003 fa65 	bl	8004e10 <HAL_GPIO_WritePin>

	 if(send_uart_nr == 1)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_TxCpltCallback+0x68>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10c      	bne.n	800196a <HAL_UART_TxCpltCallback+0x36>
	 {
         memset(received_bytes,' ',42);
 8001950:	222a      	movs	r2, #42	; 0x2a
 8001952:	2120      	movs	r1, #32
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <HAL_UART_TxCpltCallback+0x6c>)
 8001956:	f02a f859 	bl	802ba0c <memset>
         HAL_UART_Receive_DMA(&huart5, &received_bytes[0], 42);
 800195a:	222a      	movs	r2, #42	; 0x2a
 800195c:	4910      	ldr	r1, [pc, #64]	; (80019a0 <HAL_UART_TxCpltCallback+0x6c>)
 800195e:	4811      	ldr	r0, [pc, #68]	; (80019a4 <HAL_UART_TxCpltCallback+0x70>)
 8001960:	f007 ffbc 	bl	80098dc <HAL_UART_Receive_DMA>

         send_uart_nr = 11;
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_UART_TxCpltCallback+0x68>)
 8001966:	220b      	movs	r2, #11
 8001968:	701a      	strb	r2, [r3, #0]
	 }

	 if(send_uart_nr == 2)
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_UART_TxCpltCallback+0x68>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d10c      	bne.n	800198e <HAL_UART_TxCpltCallback+0x5a>
	 {
         memset(received_bytes_PWM,' ',20);
 8001974:	2214      	movs	r2, #20
 8001976:	2120      	movs	r1, #32
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_UART_TxCpltCallback+0x74>)
 800197a:	f02a f847 	bl	802ba0c <memset>
         HAL_UART_Receive_DMA(&huart5, &received_bytes_PWM[0], 20);
 800197e:	2214      	movs	r2, #20
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <HAL_UART_TxCpltCallback+0x74>)
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <HAL_UART_TxCpltCallback+0x70>)
 8001984:	f007 ffaa 	bl	80098dc <HAL_UART_Receive_DMA>
         send_uart_nr = 12;
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_UART_TxCpltCallback+0x68>)
 800198a:	220c      	movs	r2, #12
 800198c:	701a      	strb	r2, [r3, #0]
	 }

 }
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020c00 	.word	0x40020c00
 800199c:	20000476 	.word	0x20000476
 80019a0:	2000040c 	.word	0x2000040c
 80019a4:	20000d64 	.word	0x20000d64
 80019a8:	20000440 	.word	0x20000440

080019ac <ADCPT1000_to_temp>:





int16_t ADCPT1000_to_temp(uint16_t adc) {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
    int32_t temp;
    if ( adc < 1293) {
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	f240 520c 	movw	r2, #1292	; 0x50c
 80019bc:	4293      	cmp	r3, r2
 80019be:	d80d      	bhi.n	80019dc <ADCPT1000_to_temp+0x30>
      temp = ((int32_t)(adc - 1162) * 100) / 131;
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	f2a3 438a 	subw	r3, r3, #1162	; 0x48a
 80019c6:	2264      	movs	r2, #100	; 0x64
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <ADCPT1000_to_temp+0xb0>)
 80019ce:	fb82 1203 	smull	r1, r2, r2, r3
 80019d2:	1152      	asrs	r2, r2, #5
 80019d4:	17db      	asrs	r3, r3, #31
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e037      	b.n	8001a4c <ADCPT1000_to_temp+0xa0>
    }
    else {
        if (adc < 1662) {
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	f240 627d 	movw	r2, #1661	; 0x67d
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d80e      	bhi.n	8001a04 <ADCPT1000_to_temp+0x58>
          temp = (((int32_t)(adc - 1293) * 100) / 123) + 100;
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f2a3 530d 	subw	r3, r3, #1293	; 0x50d
 80019ec:	2264      	movs	r2, #100	; 0x64
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <ADCPT1000_to_temp+0xb4>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	1112      	asrs	r2, r2, #4
 80019fa:	17db      	asrs	r3, r3, #31
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	3364      	adds	r3, #100	; 0x64
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e023      	b.n	8001a4c <ADCPT1000_to_temp+0xa0>
        }
        else {
            if (adc < 2018) {
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	f240 72e1 	movw	r2, #2017	; 0x7e1
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d80f      	bhi.n	8001a2e <ADCPT1000_to_temp+0x82>
              temp = (((int32_t)(adc - 1662) * 100) / 119) + 401;
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	f2a3 637e 	subw	r3, r3, #1662	; 0x67e
 8001a14:	2264      	movs	r2, #100	; 0x64
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <ADCPT1000_to_temp+0xb8>)
 8001a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a20:	1152      	asrs	r2, r2, #5
 8001a22:	17db      	asrs	r3, r3, #31
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f203 1391 	addw	r3, r3, #401	; 0x191
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e00e      	b.n	8001a4c <ADCPT1000_to_temp+0xa0>
            }
            else {
               temp = (((int32_t)(adc - 2018) * 100) / 119) + 700;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	f2a3 73e2 	subw	r3, r3, #2018	; 0x7e2
 8001a34:	2264      	movs	r2, #100	; 0x64
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <ADCPT1000_to_temp+0xb8>)
 8001a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a40:	1152      	asrs	r2, r2, #5
 8001a42:	17db      	asrs	r3, r3, #31
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8001a4a:	60fb      	str	r3, [r7, #12]
            }
        }
    }
    return (int16_t)temp;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b21b      	sxth	r3, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	3e88cb3d 	.word	0x3e88cb3d
 8001a60:	214d0215 	.word	0x214d0215
 8001a64:	44d72045 	.word	0x44d72045

08001a68 <ADCNTCZ_to_temp>:
            }
        }
    }
    return (int16_t)temp;
}
int16_t ADCNTCZ_to_temp(uint16_t adc) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
    int32_t temp;
    if ( adc < 298) {    // 25  st.
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001a78:	d210      	bcs.n	8001a9c <ADCNTCZ_to_temp+0x34>
      temp = (((int32_t)(165 - adc) * 150) / 133) + 400;
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	f1c3 03a5 	rsb	r3, r3, #165	; 0xa5
 8001a80:	2296      	movs	r2, #150	; 0x96
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a72      	ldr	r2, [pc, #456]	; (8001c50 <ADCNTCZ_to_temp+0x1e8>)
 8001a88:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8c:	441a      	add	r2, r3
 8001a8e:	11d2      	asrs	r2, r2, #7
 8001a90:	17db      	asrs	r3, r3, #31
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	e0d0      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
    }
    else {
        if (adc < 377) {  // 15 st.
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8001aa2:	d80e      	bhi.n	8001ac2 <ADCNTCZ_to_temp+0x5a>
          temp = (((int32_t)(298 - adc) * 100) / 79) + 250;
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	f5c3 7395 	rsb	r3, r3, #298	; 0x12a
 8001aaa:	2264      	movs	r2, #100	; 0x64
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	4a68      	ldr	r2, [pc, #416]	; (8001c54 <ADCNTCZ_to_temp+0x1ec>)
 8001ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab6:	1152      	asrs	r2, r2, #5
 8001ab8:	17db      	asrs	r3, r3, #31
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	33fa      	adds	r3, #250	; 0xfa
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e0bd      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
        }
        else {
            if (adc < 502) { // 10 st.
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8001ac8:	d20f      	bcs.n	8001aea <ADCNTCZ_to_temp+0x82>
              temp = (((int32_t)(377 - adc) * 50) / 125) + 150;
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	f5c3 73bc 	rsb	r3, r3, #376	; 0x178
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	2232      	movs	r2, #50	; 0x32
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4a5f      	ldr	r2, [pc, #380]	; (8001c58 <ADCNTCZ_to_temp+0x1f0>)
 8001ada:	fb82 1203 	smull	r1, r2, r2, r3
 8001ade:	10d2      	asrs	r2, r2, #3
 8001ae0:	17db      	asrs	r3, r3, #31
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	3396      	adds	r3, #150	; 0x96
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e0a9      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
            }
            else {
              if (adc < 605) { // 5 st.
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 8001af0:	d80e      	bhi.n	8001b10 <ADCNTCZ_to_temp+0xa8>
                temp = (((int32_t)(502 - adc) * 50) / 103) + 100;
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5c3 73fb 	rsb	r3, r3, #502	; 0x1f6
 8001af8:	2232      	movs	r2, #50	; 0x32
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a57      	ldr	r2, [pc, #348]	; (8001c5c <ADCNTCZ_to_temp+0x1f4>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	10d2      	asrs	r2, r2, #3
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	3364      	adds	r3, #100	; 0x64
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e096      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
              }
              else {
                if (adc < 737) { // 0 st.
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f5b3 7f38 	cmp.w	r3, #736	; 0x2e0
 8001b16:	d80f      	bhi.n	8001b38 <ADCNTCZ_to_temp+0xd0>
                  temp = (((int32_t)(605 - adc) * 50) / 132) + 50;
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f5c3 7317 	rsb	r3, r3, #604	; 0x25c
 8001b1e:	3301      	adds	r3, #1
 8001b20:	2232      	movs	r2, #50	; 0x32
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	4a4e      	ldr	r2, [pc, #312]	; (8001c60 <ADCNTCZ_to_temp+0x1f8>)
 8001b28:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2c:	1152      	asrs	r2, r2, #5
 8001b2e:	17db      	asrs	r3, r3, #31
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	3332      	adds	r3, #50	; 0x32
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	e082      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                }
                else {
                  if (adc < 888) { // -5 st.
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f5b3 7f5e 	cmp.w	r3, #888	; 0x378
 8001b3e:	d20e      	bcs.n	8001b5e <ADCNTCZ_to_temp+0xf6>
                    temp = (((int32_t)(737 - adc) * 50) / 151);
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f5c3 7338 	rsb	r3, r3, #736	; 0x2e0
 8001b46:	3301      	adds	r3, #1
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <ADCNTCZ_to_temp+0x1fc>)
 8001b50:	fb82 1203 	smull	r1, r2, r2, r3
 8001b54:	1152      	asrs	r2, r2, #5
 8001b56:	17db      	asrs	r3, r3, #31
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e06f      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                  }
                  else {
                    if (adc < 1090) { // -10 st.
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	f240 4241 	movw	r2, #1089	; 0x441
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d80e      	bhi.n	8001b86 <ADCNTCZ_to_temp+0x11e>
                      temp = (((int32_t)(888 - adc) * 50) / 202) - 50;
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	f5c3 735e 	rsb	r3, r3, #888	; 0x378
 8001b6e:	2232      	movs	r2, #50	; 0x32
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	4a3c      	ldr	r2, [pc, #240]	; (8001c68 <ADCNTCZ_to_temp+0x200>)
 8001b76:	fb82 1203 	smull	r1, r2, r2, r3
 8001b7a:	1152      	asrs	r2, r2, #5
 8001b7c:	17db      	asrs	r3, r3, #31
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	3b32      	subs	r3, #50	; 0x32
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e05b      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                    }
                    else {
                      if (adc < 1278) { // -15 st.
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f240 42fd 	movw	r2, #1277	; 0x4fd
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d810      	bhi.n	8001bb2 <ADCNTCZ_to_temp+0x14a>
                        temp = (((int32_t)(1090 - adc) * 50) / 188) - 100;
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	f5c3 6388 	rsb	r3, r3, #1088	; 0x440
 8001b96:	3302      	adds	r3, #2
 8001b98:	2232      	movs	r2, #50	; 0x32
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <ADCNTCZ_to_temp+0x204>)
 8001ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba4:	441a      	add	r2, r3
 8001ba6:	11d2      	asrs	r2, r2, #7
 8001ba8:	17db      	asrs	r3, r3, #31
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	3b64      	subs	r3, #100	; 0x64
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e045      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                      }
                      else {
                        if (adc < 1520) { // -20 st.
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 8001bb8:	d20f      	bcs.n	8001bda <ADCNTCZ_to_temp+0x172>
                          temp = (((int32_t)(1278 - adc) * 50) / 242) - 150;
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	f5c3 639f 	rsb	r3, r3, #1272	; 0x4f8
 8001bc0:	3306      	adds	r3, #6
 8001bc2:	2232      	movs	r2, #50	; 0x32
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <ADCNTCZ_to_temp+0x208>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1092      	asrs	r2, r2, #2
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	3b96      	subs	r3, #150	; 0x96
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e031      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                        }
                        else {
                          if (adc < 1792) { // -25 st.
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001be0:	d209      	bcs.n	8001bf6 <ADCNTCZ_to_temp+0x18e>
                            temp = (((int32_t)(1520 - adc) * 50) / 200) - 200;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <ADCNTCZ_to_temp+0x186>
 8001bec:	3303      	adds	r3, #3
 8001bee:	109b      	asrs	r3, r3, #2
 8001bf0:	3bc8      	subs	r3, #200	; 0xc8
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e023      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                          }
                          else {
                            if (adc < 2091) { // -30 st.
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	f640 022a 	movw	r2, #2090	; 0x82a
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d80e      	bhi.n	8001c1e <ADCNTCZ_to_temp+0x1b6>
                              temp = (((int32_t)(1792 - adc) * 50) / 299) - 250;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	f5c3 63e0 	rsb	r3, r3, #1792	; 0x700
 8001c06:	2232      	movs	r2, #50	; 0x32
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <ADCNTCZ_to_temp+0x20c>)
 8001c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c12:	11d2      	asrs	r2, r2, #7
 8001c14:	17db      	asrs	r3, r3, #31
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	3bfa      	subs	r3, #250	; 0xfa
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e00f      	b.n	8001c3e <ADCNTCZ_to_temp+0x1d6>
                            }
                            else {
                              temp = (((int32_t)(2091 - adc) * 50) / 299) - 300;
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	f5c3 6302 	rsb	r3, r3, #2080	; 0x820
 8001c24:	330b      	adds	r3, #11
 8001c26:	2232      	movs	r2, #50	; 0x32
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <ADCNTCZ_to_temp+0x20c>)
 8001c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c32:	11d2      	asrs	r2, r2, #7
 8001c34:	17db      	asrs	r3, r3, #31
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c3c:	60fb      	str	r3, [r7, #12]
                }
              }
            }
        }
    }
    return (int16_t)temp;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	b21b      	sxth	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	f6603d99 	.word	0xf6603d99
 8001c54:	67b23a55 	.word	0x67b23a55
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	13e22cbd 	.word	0x13e22cbd
 8001c60:	3e0f83e1 	.word	0x3e0f83e1
 8001c64:	36406c81 	.word	0x36406c81
 8001c68:	288df0cb 	.word	0x288df0cb
 8001c6c:	ae4c415d 	.word	0xae4c415d
 8001c70:	043b3d5b 	.word	0x043b3d5b
 8001c74:	6d978b8f 	.word	0x6d978b8f

08001c78 <temp_to_xchar_3>:
        SET_TO_UPDATE_OZ3D();
    }
}


void temp_to_xchar_3(int16_t integer, XCHAR *result, uint8_t startIndex){
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	4613      	mov	r3, r2
 8001c86:	717b      	strb	r3, [r7, #5]
    //uint8_t pos=0;
    if(integer < -999) integer = -999;
 8001c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001c90:	dc02      	bgt.n	8001c98 <temp_to_xchar_3+0x20>
 8001c92:	f64f 4319 	movw	r3, #64537	; 0xfc19
 8001c96:	80fb      	strh	r3, [r7, #6]
    if(integer > 999) integer = 999;
 8001c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca0:	db02      	blt.n	8001ca8 <temp_to_xchar_3+0x30>
 8001ca2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001ca6:	80fb      	strh	r3, [r7, #6]
    if(integer < 0){
 8001ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da09      	bge.n	8001cc4 <temp_to_xchar_3+0x4c>
            result[startIndex]='-';
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	222d      	movs	r2, #45	; 0x2d
 8001cb8:	701a      	strb	r2, [r3, #0]
            integer*=-1;
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	80fb      	strh	r3, [r7, #6]
 8001cc2:	e004      	b.n	8001cce <temp_to_xchar_3+0x56>
    }
    else result[startIndex]=' ';
 8001cc4:	797b      	ldrb	r3, [r7, #5]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	2220      	movs	r2, #32
 8001ccc:	701a      	strb	r2, [r3, #0]
    startIndex++;
 8001cce:	797b      	ldrb	r3, [r7, #5]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	717b      	strb	r3, [r7, #5]
    int8_t num1 = integer/100;
 8001cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <temp_to_xchar_3+0x100>)
 8001cda:	fb82 1203 	smull	r1, r2, r2, r3
 8001cde:	1152      	asrs	r2, r2, #5
 8001ce0:	17db      	asrs	r3, r3, #31
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	73fb      	strb	r3, [r7, #15]
    int8_t num2 = (integer%100)/10;
 8001ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <temp_to_xchar_3+0x100>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	1151      	asrs	r1, r2, #5
 8001cf4:	17da      	asrs	r2, r3, #31
 8001cf6:	1a8a      	subs	r2, r1, r2
 8001cf8:	2164      	movs	r1, #100	; 0x64
 8001cfa:	fb01 f202 	mul.w	r2, r1, r2
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <temp_to_xchar_3+0x104>)
 8001d04:	fb82 1203 	smull	r1, r2, r2, r3
 8001d08:	1092      	asrs	r2, r2, #2
 8001d0a:	17db      	asrs	r3, r3, #31
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	73bb      	strb	r3, [r7, #14]
    int8_t num3 = integer%10;
 8001d12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <temp_to_xchar_3+0x104>)
 8001d18:	fb83 1302 	smull	r1, r3, r3, r2
 8001d1c:	1099      	asrs	r1, r3, #2
 8001d1e:	17d3      	asrs	r3, r2, #31
 8001d20:	1ac9      	subs	r1, r1, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	737b      	strb	r3, [r7, #13]
    result[startIndex+0]=(XCHAR)(num1+0x30);
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	440b      	add	r3, r1
 8001d38:	3230      	adds	r2, #48	; 0x30
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
    result[startIndex+1]=(XCHAR)(num2+0x30);
 8001d3e:	7bba      	ldrb	r2, [r7, #14]
 8001d40:	797b      	ldrb	r3, [r7, #5]
 8001d42:	3301      	adds	r3, #1
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	440b      	add	r3, r1
 8001d48:	3230      	adds	r2, #48	; 0x30
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
    result[startIndex+2]='.';
 8001d4e:	797b      	ldrb	r3, [r7, #5]
 8001d50:	3302      	adds	r3, #2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	222e      	movs	r2, #46	; 0x2e
 8001d58:	701a      	strb	r2, [r3, #0]
    result[startIndex+3]=(XCHAR)(num3+0x30);
 8001d5a:	7b7a      	ldrb	r2, [r7, #13]
 8001d5c:	797b      	ldrb	r3, [r7, #5]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	440b      	add	r3, r1
 8001d64:	3230      	adds	r2, #48	; 0x30
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    return;
 8001d6a:	bf00      	nop
}
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	51eb851f 	.word	0x51eb851f
 8001d7c:	66666667 	.word	0x66666667

08001d80 <CTP_I2C_Read>:
  * @arg buf[0~1]: Read the start address of the data register
  * @arg buf[2~len-1]: store buffer buffer for reading out data
  * @arg len: CTP_ADDR_LENGTH + read bytes count (register address length + number of data bytes read)
  * @retval i2c_msgs the number of transport structures, 2 is successful, others are failed
  */
static int32_t CTP_I2C_Read(uint8_t *buf, int32_t len){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    struct i2c_msg msgs[2];
    int32_t ret=-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	61fb      	str	r3, [r7, #28]
    int32_t retries = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
    msgs[0].flags = !CTP_I2C_M_RD;					
 8001d94:	2300      	movs	r3, #0
 8001d96:	813b      	strh	r3, [r7, #8]
    msgs[0].len   = CTP_ADDR_LENGTH;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	817b      	strh	r3, [r7, #10]
    msgs[0].buf   = &buf[0];
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]
    
    msgs[1].flags = CTP_I2C_M_RD;
 8001da0:	2301      	movs	r3, #1
 8001da2:	823b      	strh	r3, [r7, #16]
    msgs[1].len   = len - CTP_ADDR_LENGTH;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b02      	subs	r3, #2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	827b      	strh	r3, [r7, #18]
    msgs[1].buf   = &buf[CTP_ADDR_LENGTH];
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3302      	adds	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]

    while(retries < 5){
 8001db4:	e00c      	b.n	8001dd0 <CTP_I2C_Read+0x50>
        ret = I2C_Transfer( msgs, 2);					
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fbc5 	bl	800254c <I2C_Transfer>
 8001dc2:	61f8      	str	r0, [r7, #28]
        if(ret == 2)break;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d006      	beq.n	8001dd8 <CTP_I2C_Read+0x58>
        retries++;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
    while(retries < 5){
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	ddef      	ble.n	8001db6 <CTP_I2C_Read+0x36>
 8001dd6:	e000      	b.n	8001dda <CTP_I2C_Read+0x5a>
        if(ret == 2)break;
 8001dd8:	bf00      	nop
    }
    if((retries >= 5)){
        CTP_ERROR("I2C Read: 0x%04X, %d bytes failed, errcode: %d! Process reset.", (((uint16_t)(buf[0] << 8)) | buf[1]), len-2, ret);
    }
    return ret;
 8001dda:	69fb      	ldr	r3, [r7, #28]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <CTP_I2C_Write>:
  * @arg buf[0~1]: start address of the data register to be written
  * @arg buf[2~len-1]: data to be written
  * @arg len: CTP_ADDR_LENGTH + write bytes count (register address length + number of data bytes written)
  * @retval i2c_msgs the number of transport structures, 1 is successful, others are failed
  */
static int32_t CTP_I2C_Write(uint8_t *buf,int32_t len){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
    struct i2c_msg msg;
    int32_t ret = -1;
 8001dee:	f04f 33ff 	mov.w	r3, #4294967295
 8001df2:	617b      	str	r3, [r7, #20]
    int32_t retries = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
    msg.flags = !CTP_I2C_M_RD;					
 8001df8:	2300      	movs	r3, #0
 8001dfa:	813b      	strh	r3, [r7, #8]
    msg.len   = len;					
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	817b      	strh	r3, [r7, #10]
    msg.buf   = buf;					
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
    while(retries < 5){
 8001e06:	e00c      	b.n	8001e22 <CTP_I2C_Write+0x3e>
        ret = I2C_Transfer(&msg, 1);
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fb9c 	bl	800254c <I2C_Transfer>
 8001e14:	6178      	str	r0, [r7, #20]
        if (ret == 1)break;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d006      	beq.n	8001e2a <CTP_I2C_Write+0x46>
        retries++;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	613b      	str	r3, [r7, #16]
    while(retries < 5){
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	ddef      	ble.n	8001e08 <CTP_I2C_Write+0x24>
 8001e28:	e000      	b.n	8001e2c <CTP_I2C_Write+0x48>
        if (ret == 1)break;
 8001e2a:	bf00      	nop
    }
    if((retries >= 5)){
      CTP_ERROR("I2C Write: 0x%04X, %d bytes failed, errcode: %d! Process reset.", (((uint16_t)(buf[0] << 8)) | buf[1]), len-2, ret);
    }
    return ret;
 8001e2c:	697b      	ldr	r3, [r7, #20]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <CTP_I2C_Test>:
    }
    CTP_ERROR("send command fail!");
    return ret;
}

static int8_t CTP_I2C_Test( void){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
    uint8_t test[3] = {CTP_REG_CONFIG_DATA >> 8, CTP_REG_CONFIG_DATA & 0xff};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2100      	movs	r1, #0
 8001e42:	460a      	mov	r2, r1
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	460a      	mov	r2, r1
 8001e48:	709a      	strb	r2, [r3, #2]
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <CTP_I2C_Test+0x88>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <CTP_I2C_Test+0x8c>)
 8001e52:	460b      	mov	r3, r1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	440b      	add	r3, r1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	703b      	strb	r3, [r7, #0]
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <CTP_I2C_Test+0x88>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <CTP_I2C_Test+0x8c>)
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	707b      	strb	r3, [r7, #1]
    uint8_t retry = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	71fb      	strb	r3, [r7, #7]
    int8_t ret = -1;
 8001e86:	23ff      	movs	r3, #255	; 0xff
 8001e88:	71bb      	strb	r3, [r7, #6]
    while(retry++ < 5){
 8001e8a:	e00d      	b.n	8001ea8 <CTP_I2C_Test+0x70>
        ret = CTP_I2C_Read(test, 3);
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff75 	bl	8001d80 <CTP_I2C_Read>
 8001e96:	4603      	mov	r3, r0
 8001e98:	71bb      	strb	r3, [r7, #6]
        if (ret > 0){
 8001e9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	dd02      	ble.n	8001ea8 <CTP_I2C_Test+0x70>
            return ret;
 8001ea2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ea6:	e006      	b.n	8001eb6 <CTP_I2C_Test+0x7e>
    while(retry++ < 5){
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	71fa      	strb	r2, [r7, #7]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d9ec      	bls.n	8001e8c <CTP_I2C_Test+0x54>
        }
        CTP_ERROR("GTP i2c test failed time %d.",retry);
    }
    return ret;
 8001eb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000060 	.word	0x20000060
 8001ec4:	0802e378 	.word	0x0802e378

08001ec8 <CTP_Touch_Down>:
  * @arg x: the x coordinate of the touch
  * @arg y: the y coordinate of the touch
  * @arg w: the size of the touch
  * @retval none
  */
static void CTP_Touch_Down(int32_t x,int32_t y,int32_t w){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
    /* Take x, y initial value is greater than the screen pixel value */
    CTP_INFO("Touch down ! X:%d, Y:%d, W:%d",  x, y, w);
    pre_x = x; pre_y=y;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <CTP_Touch_Down+0x50>)
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <CTP_Touch_Down+0x54>)
 8001ee2:	801a      	strh	r2, [r3, #0]
    pos_x = pre_x;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <CTP_Touch_Down+0x50>)
 8001ee6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <CTP_Touch_Down+0x58>)
 8001eec:	801a      	strh	r2, [r3, #0]
    pos_y = pre_y;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <CTP_Touch_Down+0x54>)
 8001ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <CTP_Touch_Down+0x5c>)
 8001ef6:	801a      	strh	r2, [r3, #0]
    ctMessagePut(pre_x,pre_y,1);
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <CTP_Touch_Down+0x50>)
 8001efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <CTP_Touch_Down+0x54>)
 8001f02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f06:	b291      	uxth	r1, r2
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fa7a 	bl	8002404 <ctMessagePut>
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200002cc 	.word	0x200002cc
 8001f1c:	200002ce 	.word	0x200002ce
 8001f20:	200008e8 	.word	0x200008e8
 8001f24:	200008ea 	.word	0x200008ea

08001f28 <CTP_Touch_Up>:
/**
  * @brief process or report touch screen release
  * @param release point id number
  * @retval none
  */
static void CTP_Touch_Up(void){   // touch screen output without carton
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    /* stylus release, reset pre xy to negative */
	static int bef_x = -1, bef_y = -1;
	if(pre_x == bef_x && pre_y == bef_y) return;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <CTP_Touch_Up+0x80>)
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <CTP_Touch_Up+0x84>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <CTP_Touch_Up+0x24>
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <CTP_Touch_Up+0x88>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <CTP_Touch_Up+0x8c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d02a      	beq.n	8001fa2 <CTP_Touch_Up+0x7a>
    ctMessagePut(pre_x,pre_y,0);
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <CTP_Touch_Up+0x80>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <CTP_Touch_Up+0x88>)
 8001f56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f5a:	b291      	uxth	r1, r2
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fa50 	bl	8002404 <ctMessagePut>
	bef_x = pre_x;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <CTP_Touch_Up+0x80>)
 8001f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <CTP_Touch_Up+0x84>)
 8001f6e:	601a      	str	r2, [r3, #0]
	bef_y = pre_y;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <CTP_Touch_Up+0x88>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <CTP_Touch_Up+0x8c>)
 8001f7a:	601a      	str	r2, [r3, #0]
	pre_x = -1;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <CTP_Touch_Up+0x80>)
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	801a      	strh	r2, [r3, #0]
	pre_y = -1;  
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <CTP_Touch_Up+0x88>)
 8001f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f8a:	801a      	strh	r2, [r3, #0]
    pos_x = pre_x;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <CTP_Touch_Up+0x80>)
 8001f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <CTP_Touch_Up+0x90>)
 8001f94:	801a      	strh	r2, [r3, #0]
    pos_y = pre_y;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <CTP_Touch_Up+0x88>)
 8001f98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <CTP_Touch_Up+0x94>)
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e000      	b.n	8001fa4 <CTP_Touch_Up+0x7c>
	if(pre_x == bef_x && pre_y == bef_y) return;
 8001fa2:	bf00      	nop
    CTP_INFO("Touch release!");
}
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200002cc 	.word	0x200002cc
 8001fac:	200002d0 	.word	0x200002d0
 8001fb0:	200002ce 	.word	0x200002ce
 8001fb4:	200002d4 	.word	0x200002d4
 8001fb8:	200008e8 	.word	0x200008e8
 8001fbc:	200008ea 	.word	0x200008ea

08001fc0 <CTP_TS_Work_Func>:
/**
  * @brief touch screen processing function, polling or calling in touch interrupt
  * @param none
  * @retval none
  */
void CTP_TS_Work_Func(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af02      	add	r7, sp, #8
	static uint8_t IsTouch=0;
	uint8_t  end_cmd[3] = {CTP_READ_COOR_ADDR >> 8, CTP_READ_COOR_ADDR & 0xFF, 0};
 8001fc6:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <CTP_TS_Work_Func+0x130>)
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	8019      	strh	r1, [r3, #0]
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	0c12      	lsrs	r2, r2, #16
 8001fd6:	701a      	strb	r2, [r3, #0]
	uint8_t  point_data[2 + 1 + 8 * CTP_MAX_TOUCH + 1]={CTP_READ_COOR_ADDR >> 8, CTP_READ_COOR_ADDR & 0xFF};
 8001fd8:	f644 6381 	movw	r3, #20097	; 0x4e81
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
	uint8_t  finger = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int32_t input_x = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
	int32_t input_y = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
	int32_t input_w = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
	int32_t ret = -1;
 8001ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffe:	617b      	str	r3, [r7, #20]
	ret = CTP_I2C_Read(point_data, 12);//10 byte register plus 2 byte address
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	210c      	movs	r1, #12
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff febb 	bl	8001d80 <CTP_I2C_Read>
 800200a:	6178      	str	r0, [r7, #20]
	if (ret < 0){
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	da0b      	bge.n	800202a <CTP_TS_Work_Func+0x6a>
        CTP_ERROR("I2C transfer error. errno:%d\n ", ret);
        sprintf(comment,"I2C transfer error. errno:%d\n ", ret);
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4937      	ldr	r1, [pc, #220]	; (80020f4 <CTP_TS_Work_Func+0x134>)
 8002016:	4838      	ldr	r0, [pc, #224]	; (80020f8 <CTP_TS_Work_Func+0x138>)
 8002018:	f02a f922 	bl	802c260 <siprintf>
        debug_uart(comment);
 800201c:	4836      	ldr	r0, [pc, #216]	; (80020f8 <CTP_TS_Work_Func+0x138>)
 800201e:	f000 f9b7 	bl	8002390 <debug_uart>
       debug_uart("\n");
 8002022:	4836      	ldr	r0, [pc, #216]	; (80020fc <CTP_TS_Work_Func+0x13c>)
 8002024:	f000 f9b4 	bl	8002390 <debug_uart>
        return;
 8002028:	e05f      	b.n	80020ea <CTP_TS_Work_Func+0x12a>
    //sprintf(comment,"Config success ! i = %d ",i);
    //debug_uart(comment);
   //debug_uart("\n");


    finger = point_data[CTP_ADDR_LENGTH]; // Status register data
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //sprintf(comment,"I2C finger:%X",finger);
   // debug_uart(comment);
  // debug_uart("\n");


    if((finger&0x80)&&((finger&0x0f)<=CTP_MAX_TOUCH)){
 8002030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002034:	2b00      	cmp	r3, #0
 8002036:	da12      	bge.n	800205e <CTP_TS_Work_Func+0x9e>
 8002038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800203c:	f003 030e 	and.w	r3, r3, #14
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10c      	bne.n	800205e <CTP_TS_Work_Func+0x9e>
      ret = CTP_I2C_Write(end_cmd, 3);
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	2103      	movs	r1, #3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff feca 	bl	8001de4 <CTP_I2C_Write>
 8002050:	6178      	str	r0, [r7, #20]
      if (ret < 0){
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	da02      	bge.n	800205e <CTP_TS_Work_Func+0x9e>
          CTP_INFO("I2C write end_cmd error!");
          debug_uart("I2C write end_cmd error!");
 8002058:	4829      	ldr	r0, [pc, #164]	; (8002100 <CTP_TS_Work_Func+0x140>)
 800205a:	f000 f999 	bl	8002390 <debug_uart>
      }
    }
	if((finger&0x8F) == 0x80){		// No data, exit
 800205e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002062:	f003 038f 	and.w	r3, r3, #143	; 0x8f
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d109      	bne.n	800207e <CTP_TS_Work_Func+0xbe>
		if(IsTouch){
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <CTP_TS_Work_Func+0x144>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03a      	beq.n	80020e8 <CTP_TS_Work_Func+0x128>
			CTP_Touch_Up();
 8002072:	f7ff ff59 	bl	8001f28 <CTP_Touch_Up>
			IsTouch=0;
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <CTP_TS_Work_Func+0x144>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
		}
        return;
 800207c:	e034      	b.n	80020e8 <CTP_TS_Work_Func+0x128>
	}
    if((finger & 0x0F) && ((finger & 0x0F)<=CTP_MAX_TOUCH)){ //Bit7==1 - coordinate (or key) is ready for host to read
 800207e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02f      	beq.n	80020ea <CTP_TS_Work_Func+0x12a>
 800208a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800208e:	f003 030e 	and.w	r3, r3, #14
 8002092:	2b00      	cmp	r3, #0
 8002094:	d129      	bne.n	80020ea <CTP_TS_Work_Func+0x12a>
        IsTouch=1;
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <CTP_TS_Work_Func+0x144>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
        input_x  = point_data[4] | (point_data[5] << 8);	//x coordinates
 800209c:	7a3b      	ldrb	r3, [r7, #8]
 800209e:	461a      	mov	r2, r3
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	4313      	orrs	r3, r2
 80020a6:	623b      	str	r3, [r7, #32]
        input_y  = point_data[6] | (point_data[7] << 8);	//y coordinates
 80020a8:	7abb      	ldrb	r3, [r7, #10]
 80020aa:	461a      	mov	r2, r3
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]
        input_w  = point_data[8] | (point_data[9] << 8);	//size
 80020b4:	7b3b      	ldrb	r3, [r7, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        CTP_Touch_Down(input_x, input_y, input_w);        //data processing
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69f9      	ldr	r1, [r7, #28]
 80020c4:	6a38      	ldr	r0, [r7, #32]
 80020c6:	f7ff feff 	bl	8001ec8 <CTP_Touch_Down>

        sprintf(comment,"XYW: %4u_%4u_%4u",input_x,input_y,input_w);
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <CTP_TS_Work_Func+0x148>)
 80020d4:	4808      	ldr	r0, [pc, #32]	; (80020f8 <CTP_TS_Work_Func+0x138>)
 80020d6:	f02a f8c3 	bl	802c260 <siprintf>

        debug_uart(comment);
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <CTP_TS_Work_Func+0x138>)
 80020dc:	f000 f958 	bl	8002390 <debug_uart>
       debug_uart("\n");
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <CTP_TS_Work_Func+0x13c>)
 80020e2:	f000 f955 	bl	8002390 <debug_uart>
 80020e6:	e000      	b.n	80020ea <CTP_TS_Work_Func+0x12a>
        return;
 80020e8:	bf00      	nop
	} 

    

}
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0802d800 	.word	0x0802d800
 80020f4:	0802d7ac 	.word	0x0802d7ac
 80020f8:	200008ec 	.word	0x200008ec
 80020fc:	0802d7cc 	.word	0x0802d7cc
 8002100:	0802d7d0 	.word	0x0802d7d0
 8002104:	2000091e 	.word	0x2000091e
 8002108:	0802d7ec 	.word	0x0802d7ec

0800210c <CTP_Get_Info>:

    CTP_ERROR("GTP wakeup sleep failed.");
    return ret;
}

static int32_t CTP_Get_Info(void){
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
    uint8_t int_trigger_type = opr_buf[2] & 0x03;
    
    CTP_INFO("X_MAX = %d, Y_MAX = %d, TRIGGER = 0x%02x",
            abs_x_max,abs_y_max,int_trigger_type);
#endif
    return SUCCESS;    
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <CTP_Init_Panel>:


int32_t CTP_Init_Panel(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
    ctQueueCreate();
 8002122:	f000 f98b 	bl	800243c <ctQueueCreate>
    int32_t ret = -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	617b      	str	r3, [r7, #20]

    pos_x = -1;
 800212c:	4b57      	ldr	r3, [pc, #348]	; (800228c <CTP_Init_Panel+0x170>)
 800212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002132:	801a      	strh	r2, [r3, #0]
    pos_y = -1;
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <CTP_Init_Panel+0x174>)
 8002136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213a:	801a      	strh	r2, [r3, #0]
    int32_t i = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
    uint16_t check_sum = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	81fb      	strh	r3, [r7, #14]
    int32_t retry = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]

    const uint8_t* cfg_info;
    uint8_t cfg_info_len  ;
		uint8_t* config;

    uint8_t cfg_num =0 ;// The number of registers that need to be configured
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
    I2C_Touch_Init();
 800214c:	f000 f9ed 	bl	800252a <I2C_Touch_Init>

    ret = CTP_I2C_Test();
 8002150:	f7ff fe72 	bl	8001e38 <CTP_I2C_Test>
 8002154:	4603      	mov	r3, r0
 8002156:	617b      	str	r3, [r7, #20]
    if (ret < 0){
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da01      	bge.n	8002162 <CTP_Init_Panel+0x46>
        CTP_ERROR("I2C communication ERROR!");
		return ret;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	e090      	b.n	8002284 <CTP_Init_Panel+0x168>
    } 
    ctDelay(1000);
 8002162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002166:	f000 f937 	bl	80023d8 <ctDelay>
    CTP_Read_Version(); // Get the model of the touch IC
 800216a:	f000 f89d 	bl	80022a8 <CTP_Read_Version>

    config = (uint8_t *)malloc (CTP_CONFIG_MAX_LENGTH + CTP_ADDR_LENGTH);
 800216e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002172:	f029 fc2d 	bl	802b9d0 <malloc>
 8002176:	4603      	mov	r3, r0
 8002178:	603b      	str	r3, [r7, #0]

    config[0] = CTP_REG_CONFIG_DATA >> 8;
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <CTP_Init_Panel+0x178>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4a45      	ldr	r2, [pc, #276]	; (8002298 <CTP_Init_Panel+0x17c>)
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	701a      	strb	r2, [r3, #0]
    config[1] =  CTP_REG_CONFIG_DATA & 0xff;
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <CTP_Init_Panel+0x178>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <CTP_Init_Panel+0x17c>)
 80021a2:	460b      	mov	r3, r1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	440b      	add	r3, r1
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
    
    // According to the model of the IC points to a different configuration
    switch(touchIC){
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <CTP_Init_Panel+0x178>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d010      	beq.n	80021e2 <CTP_Init_Panel+0xc6>
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	dc13      	bgt.n	80021ec <CTP_Init_Panel+0xd0>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <CTP_Init_Panel+0xb2>
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d005      	beq.n	80021d8 <CTP_Init_Panel+0xbc>
 80021cc:	e00e      	b.n	80021ec <CTP_Init_Panel+0xd0>
    case GT9157:
        cfg_info =  CTP_CFG_GT9157; // Point to register configuration
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <CTP_Init_Panel+0x180>)
 80021d0:	61fb      	str	r3, [r7, #28]
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT9157);// Calculate the size of the configuration table
 80021d2:	23ba      	movs	r3, #186	; 0xba
 80021d4:	76fb      	strb	r3, [r7, #27]
        break;
 80021d6:	e009      	b.n	80021ec <CTP_Init_Panel+0xd0>
    case GT911:
        cfg_info =  CTP_CFG_GT911;
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <CTP_Init_Panel+0x184>)
 80021da:	61fb      	str	r3, [r7, #28]
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT911) ;
 80021dc:	23ba      	movs	r3, #186	; 0xba
 80021de:	76fb      	strb	r3, [r7, #27]
        break;
 80021e0:	e004      	b.n	80021ec <CTP_Init_Panel+0xd0>
    case GT5688:			
        cfg_info =  CTP_CFG_GT5688; 
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <CTP_Init_Panel+0x188>)
 80021e4:	61fb      	str	r3, [r7, #28]
        cfg_info_len = CFG_GROUP_LEN(CTP_CFG_GT5688);
 80021e6:	23ef      	movs	r3, #239	; 0xef
 80021e8:	76fb      	strb	r3, [r7, #27]
        break;
 80021ea:	bf00      	nop
    }
	
    memset(&config[CTP_ADDR_LENGTH], 0, CTP_CONFIG_MAX_LENGTH);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	3302      	adds	r3, #2
 80021f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f029 fc08 	bl	802ba0c <memset>
    memcpy(&config[CTP_ADDR_LENGTH], cfg_info, cfg_info_len);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	3302      	adds	r3, #2
 8002200:	7efa      	ldrb	r2, [r7, #27]
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	4618      	mov	r0, r3
 8002206:	f029 fbf3 	bl	802b9f0 <memcpy>
		
    cfg_num = cfg_info_len;
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	71fb      	strb	r3, [r7, #7]
    
    CTP_DEBUG("cfg_info_len = %d ",cfg_info_len);
    CTP_DEBUG("cfg_num = %d ",cfg_num);
    /*Set the resolution according to the scanning direction of the LCD*/
    config[CTP_ADDR_LENGTH+1] = LCD_PIXEL_WIDTH & 0xFF;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3303      	adds	r3, #3
 8002212:	2220      	movs	r2, #32
 8002214:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+2] = LCD_PIXEL_WIDTH >> 8;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3304      	adds	r3, #4
 800221a:	2203      	movs	r2, #3
 800221c:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+3] = LCD_PIXEL_HEIGHT & 0xFF;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3305      	adds	r3, #5
 8002222:	22e0      	movs	r2, #224	; 0xe0
 8002224:	701a      	strb	r2, [r3, #0]
    config[CTP_ADDR_LENGTH+4] = LCD_PIXEL_HEIGHT >> 8;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3306      	adds	r3, #6
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
  
    config[CTP_ADDR_LENGTH+((0x8055)-(0x8050))-1]=CTP_MAX_TOUCH; //Fingers supported: 1 to 10
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3306      	adds	r3, #6
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
    
    /*Set X2Y exchange according to mode*/  
    config[CTP_ADDR_LENGTH+((0x8056)-(0x8050))-1] |= (X2Y_LOC);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3307      	adds	r3, #7
 800223a:	781a      	ldrb	r2, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	3307      	adds	r3, #7
 8002240:	f042 0208 	orr.w	r2, r2, #8
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]
    
    //Bit7-4: Refresh_Rate: Report rate (period: 5+N ms)
    //Bit3-0: Low_Power_Control: no-touch duration for entering low power mode (0s to 15s)
    config[CTP_ADDR_LENGTH+((0x805E)-(0x8050))-1] =0xAA; //15ms / 10s
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	330f      	adds	r3, #15
 800224c:	22aa      	movs	r2, #170	; 0xaa
 800224e:	701a      	strb	r2, [r3, #0]
    
    /*X-position delta threshold for coordinate to be reported: 0-255 (coefficient is 1, based on the
      reported resolution. If this field is set to 0, GT5688 will keep reporting coordinates continuously
      when touch is present)*/
    config[CTP_ADDR_LENGTH+((0x8060)-(0x8050))-1] |= LCD_PIXEL_WIDTH/10;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	3311      	adds	r3, #17
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	3311      	adds	r3, #17
 800225a:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
    /*Y-position delta threshold*/
    config[CTP_ADDR_LENGTH+((0x8061)-(0x8050))-1] |= LCD_PIXEL_HEIGHT/10;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	3312      	adds	r3, #18
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	3312      	adds	r3, #18
 800226c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
        debug_uart("\n");}


#endif
	
    CTP_Get_Info();	
 8002274:	f7ff ff4a 	bl	800210c <CTP_Get_Info>
	free(config);
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f029 fbb1 	bl	802b9e0 <free>
    
    EXTI_IRQ_enable();
 800227e:	f000 f939 	bl	80024f4 <EXTI_IRQ_enable>


    return 0;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200008e8 	.word	0x200008e8
 8002290:	200008ea 	.word	0x200008ea
 8002294:	20000060 	.word	0x20000060
 8002298:	0802e378 	.word	0x0802e378
 800229c:	20000064 	.word	0x20000064
 80022a0:	20000120 	.word	0x20000120
 80022a4:	200001dc 	.word	0x200001dc

080022a8 <CTP_Read_Version>:


static int32_t CTP_Read_Version(void){
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af04      	add	r7, sp, #16
    int32_t ret = -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	60fb      	str	r3, [r7, #12]
    uint8_t buf[8] = {CTP_REG_VERSION >> 8, CTP_REG_VERSION & 0xff};    
 80022b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
    ret = CTP_I2C_Read(buf, sizeof(buf));
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2108      	movs	r1, #8
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd5c 	bl	8001d80 <CTP_I2C_Read>
 80022c8:	60f8      	str	r0, [r7, #12]
    if (ret < 0){
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da04      	bge.n	80022da <CTP_Read_Version+0x32>
    	debug_uart("GTP read version failed\n");
 80022d0:	482a      	ldr	r0, [pc, #168]	; (800237c <CTP_Read_Version+0xd4>)
 80022d2:	f000 f85d 	bl	8002390 <debug_uart>
        CTP_ERROR("GTP read version failed");
        return ret;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	e04c      	b.n	8002374 <CTP_Read_Version+0xcc>
    }

    if (buf[2] == '9'){				
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	2b39      	cmp	r3, #57	; 0x39
 80022de:	d134      	bne.n	800234a <CTP_Read_Version+0xa2>
      //GT911
      if(buf[2] == '9' && buf[3] == '1' && buf[4] == '1'){
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	2b39      	cmp	r3, #57	; 0x39
 80022e4:	d120      	bne.n	8002328 <CTP_Read_Version+0x80>
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b31      	cmp	r3, #49	; 0x31
 80022ea:	d11d      	bne.n	8002328 <CTP_Read_Version+0x80>
 80022ec:	7a3b      	ldrb	r3, [r7, #8]
 80022ee:	2b31      	cmp	r3, #49	; 0x31
 80022f0:	d11a      	bne.n	8002328 <CTP_Read_Version+0x80>
        CTP_INFO("IC1 Version: %c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[7], buf[6]);
        sprintf(comment,"IC1 Version: %c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[7], buf[6]);
 80022f2:	79bb      	ldrb	r3, [r7, #6]
 80022f4:	4618      	mov	r0, r3
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	461c      	mov	r4, r3
 80022fa:	7a3b      	ldrb	r3, [r7, #8]
 80022fc:	7afa      	ldrb	r2, [r7, #11]
 80022fe:	7ab9      	ldrb	r1, [r7, #10]
 8002300:	9102      	str	r1, [sp, #8]
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4623      	mov	r3, r4
 8002308:	4602      	mov	r2, r0
 800230a:	491d      	ldr	r1, [pc, #116]	; (8002380 <CTP_Read_Version+0xd8>)
 800230c:	481d      	ldr	r0, [pc, #116]	; (8002384 <CTP_Read_Version+0xdc>)
 800230e:	f029 ffa7 	bl	802c260 <siprintf>
        debug_uart(comment);
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <CTP_Read_Version+0xdc>)
 8002314:	f000 f83c 	bl	8002390 <debug_uart>
        debug_uart("\n");
 8002318:	481b      	ldr	r0, [pc, #108]	; (8002388 <CTP_Read_Version+0xe0>)
 800231a:	f000 f839 	bl	8002390 <debug_uart>
        touchIC = GT911;
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <CTP_Read_Version+0xe4>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
        return 0;
 8002324:	2300      	movs	r3, #0
 8002326:	e025      	b.n	8002374 <CTP_Read_Version+0xcc>
      }
      //GT9157
      if( buf[2] == '9' && buf[3] == '1' && buf[4] == '5' && buf[5] == '7'){
 8002328:	79bb      	ldrb	r3, [r7, #6]
 800232a:	2b39      	cmp	r3, #57	; 0x39
 800232c:	d10d      	bne.n	800234a <CTP_Read_Version+0xa2>
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	2b31      	cmp	r3, #49	; 0x31
 8002332:	d10a      	bne.n	800234a <CTP_Read_Version+0xa2>
 8002334:	7a3b      	ldrb	r3, [r7, #8]
 8002336:	2b35      	cmp	r3, #53	; 0x35
 8002338:	d107      	bne.n	800234a <CTP_Read_Version+0xa2>
 800233a:	7a7b      	ldrb	r3, [r7, #9]
 800233c:	2b37      	cmp	r3, #55	; 0x37
 800233e:	d104      	bne.n	800234a <CTP_Read_Version+0xa2>
        CTP_INFO("IC2 Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
        touchIC = GT9157;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <CTP_Read_Version+0xe4>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
        return 0;
 8002346:	2300      	movs	r3, #0
 8002348:	e014      	b.n	8002374 <CTP_Read_Version+0xcc>
      }
    }    
    if (buf[2] == '5'){	
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	2b35      	cmp	r3, #53	; 0x35
 800234e:	d110      	bne.n	8002372 <CTP_Read_Version+0xca>
      //GT5688
      if(buf[2] == '5' && buf[3] == '6' && buf[4] == '8' && buf[5] == '8'){
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b35      	cmp	r3, #53	; 0x35
 8002354:	d10d      	bne.n	8002372 <CTP_Read_Version+0xca>
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b36      	cmp	r3, #54	; 0x36
 800235a:	d10a      	bne.n	8002372 <CTP_Read_Version+0xca>
 800235c:	7a3b      	ldrb	r3, [r7, #8]
 800235e:	2b38      	cmp	r3, #56	; 0x38
 8002360:	d107      	bne.n	8002372 <CTP_Read_Version+0xca>
 8002362:	7a7b      	ldrb	r3, [r7, #9]
 8002364:	2b38      	cmp	r3, #56	; 0x38
 8002366:	d104      	bne.n	8002372 <CTP_Read_Version+0xca>
        CTP_INFO("IC3 Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
        touchIC = GT5688;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <CTP_Read_Version+0xe4>)
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
        return 0;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <CTP_Read_Version+0xcc>
      }

    } 
    CTP_INFO("Unknown IC Version: %c%c%c%c_%02x%02x", buf[2], buf[3], buf[4], buf[5], buf[7], buf[6]);
    return ret;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	0802d804 	.word	0x0802d804
 8002380:	0802d820 	.word	0x0802d820
 8002384:	200008ec 	.word	0x200008ec
 8002388:	0802d7cc 	.word	0x0802d7cc
 800238c:	20000060 	.word	0x20000060

08002390 <debug_uart>:
}
#endif

extern UART_HandleTypeDef huart1;
void debug_uart(char *string)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

    uint8_t i = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
    for (i = 0; ; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]

        if ((string[i] == '\0')) break;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <debug_uart+0x24>
    for (i = 0; ; i++) {
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3301      	adds	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
        if ((string[i] == '\0')) break;
 80023b2:	e7f5      	b.n	80023a0 <debug_uart+0x10>
 80023b4:	bf00      	nop
        if(i > 255)break;
    }


	uint16_t size =0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	81bb      	strh	r3, [r7, #12]
	size = i; //sizeof(string);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, string, size, 100);
 80023be:	89ba      	ldrh	r2, [r7, #12]
 80023c0:	2364      	movs	r3, #100	; 0x64
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <debug_uart+0x44>)
 80023c6:	f007 f978 	bl	80096ba <HAL_UART_Transmit>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000da8 	.word	0x20000da8

080023d8 <ctDelay>:
    osMessageQId CTPQueueHandle;
    uint8_t CTPQueueBuffer[ 4 * sizeof(point_t) ];
    osStaticMessageQDef_t CTPQueueControlBlock;
  #endif

  void ctDelay(uint32_t ms){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    osThreadId id = osThreadGetId ();
 80023e0:	f009 fd77 	bl	800bed2 <osThreadGetId>
 80023e4:	60f8      	str	r0, [r7, #12]
    if (id == NULL) { // Failed to get the id; not in a thread
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <ctDelay+0x1c>
      HAL_Delay(ms); //HAL delay
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 fc21 	bl	8003c34 <HAL_Delay>
    }else{
      osDelay(ms);  //Task delay
    }
  }
 80023f2:	e002      	b.n	80023fa <ctDelay+0x22>
      osDelay(ms);  //Task delay
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f009 fd73 	bl	800bee0 <osDelay>
  }
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <ctMessagePut>:
  #if QUEUE_USED==0
    point_t p;
  #endif
  void ctMessagePut(uint16_t x,uint16_t y,uint8_t press){
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
 800240e:	460b      	mov	r3, r1
 8002410:	80bb      	strh	r3, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	70fb      	strb	r3, [r7, #3]
      point_t p;
      BaseType_t xHigherPriorityTaskWoken = pdFALSE;
      xQueueSendFromISR(CTPQueueHandle, &p, &xHigherPriorityTaskWoken );
      portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
    #else
      p.x=x; p.y=y; p.press=press;
 8002416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <ctMessagePut+0x34>)
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <ctMessagePut+0x34>)
 8002424:	805a      	strh	r2, [r3, #2]
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <ctMessagePut+0x34>)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	7113      	strb	r3, [r2, #4]
    #endif
  }
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	20000920 	.word	0x20000920

0800243c <ctQueueCreate>:
      HAL_NVIC_EnableIRQ(CTP_INT_IRQn);
    #endif
    return 1;
  }

  void ctQueueCreate(){
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
    #if QUEUE_USED>0
      osMessageQStaticDef(CTPQueue, 4, point_t, CTPQueueBuffer, &CTPQueueControlBlock);
      CTPQueueHandle = osMessageCreate(osMessageQ(CTPQueue), NULL);*/
    #else
      p.press=0;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <ctQueueCreate+0x14>)
 8002442:	2200      	movs	r2, #0
 8002444:	711a      	strb	r2, [r3, #4]
    #endif
  }
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	20000920 	.word	0x20000920

08002454 <I2C_ResetChip>:
//MCU dependet functions


uint8_t Exti_EN=1;

void I2C_ResetChip(void){
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
    if(Exti_EN){
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <I2C_ResetChip+0x94>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <I2C_ResetChip+0x14>
      HAL_NVIC_DisableIRQ(CTP_INT_IRQn);
 8002462:	2028      	movs	r0, #40	; 0x28
 8002464:	f001 fd10 	bl	8003e88 <HAL_NVIC_DisableIRQ>
    }
    GPIO_InitTypeDef GPIO_Initure;
    //1. Reset out low
    CTP_RST_PORT->BSRR=CTP_RST_PIN<<16; //RST = 0
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <I2C_ResetChip+0x98>)
 800246a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800246e:	619a      	str	r2, [r3, #24]
	ctDelay(5);
 8002470:	2005      	movs	r0, #5
 8002472:	f7ff ffb1 	bl	80023d8 <ctDelay>
    //2. Int out low / high
    GPIO_Initure.Pin=CTP_INT_PIN;            
 8002476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247a:	607b      	str	r3, [r7, #4]
	GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;             
 800247c:	2301      	movs	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CTP_INT_PORT,&GPIO_Initure);
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	4619      	mov	r1, r3
 8002484:	481a      	ldr	r0, [pc, #104]	; (80024f0 <I2C_ResetChip+0x9c>)
 8002486:	f002 fb17 	bl	8004ab8 <HAL_GPIO_Init>
    #if CTP_ADDRESS >= 0xBA
      CTP_INT_PORT->BSRR=CTP_INT_PIN<<16; //INT = 0
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <I2C_ResetChip+0x9c>)
 800248c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002490:	619a      	str	r2, [r3, #24]
    #else
      CTP_INT_PORT->BSRR=CTP_INT_PIN<<0;  //INT = 1
    #endif
    ctDelay(2); //>100us
 8002492:	2002      	movs	r0, #2
 8002494:	f7ff ffa0 	bl	80023d8 <ctDelay>
    //3. Reset out high
	CTP_RST_PORT->BSRR=CTP_RST_PIN<<0;  //RST = 1
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <I2C_ResetChip+0x98>)
 800249a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800249e:	619a      	str	r2, [r3, #24]
	ctDelay(7); //5-10 ms
 80024a0:	2007      	movs	r0, #7
 80024a2:	f7ff ff99 	bl	80023d8 <ctDelay>
    //4. INT out low
    CTP_INT_PORT->BSRR=CTP_INT_PIN<<16; //INT = 0
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <I2C_ResetChip+0x9c>)
 80024a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024ac:	619a      	str	r2, [r3, #24]
    ctDelay(55); //>50 ms
 80024ae:	2037      	movs	r0, #55	; 0x37
 80024b0:	f7ff ff92 	bl	80023d8 <ctDelay>
    //5. INT input floating
	GPIO_Initure.Pin=CTP_INT_PIN;
 80024b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b8:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode = GPIO_MODE_IT_FALLING;
 80024ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024be:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode=GPIO_MODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Pull = GPIO_PULLUP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(CTP_INT_PORT,&GPIO_Initure);
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	4808      	ldr	r0, [pc, #32]	; (80024f0 <I2C_ResetChip+0x9c>)
 80024ce:	f002 faf3 	bl	8004ab8 <HAL_GPIO_Init>
    if(Exti_EN){
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <I2C_ResetChip+0x94>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <I2C_ResetChip+0x8c>
      HAL_NVIC_EnableIRQ(CTP_INT_IRQn);
 80024da:	2028      	movs	r0, #40	; 0x28
 80024dc:	f001 fcc6 	bl	8003e6c <HAL_NVIC_EnableIRQ>
    }
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200002d8 	.word	0x200002d8
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020000 	.word	0x40020000

080024f4 <EXTI_IRQ_enable>:

void EXTI_IRQ_enable(){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
    Exti_EN=1;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <EXTI_IRQ_enable+0x14>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
    HAL_NVIC_EnableIRQ(CTP_INT_IRQn);
 80024fe:	2028      	movs	r0, #40	; 0x28
 8002500:	f001 fcb4 	bl	8003e6c <HAL_NVIC_EnableIRQ>
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200002d8 	.word	0x200002d8

0800250c <HAL_GPIO_EXTI_Callback>:
  }
}
#endif

//In CubeMX exti must be swihed on
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == CTP_INT_PIN){
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_EXTI_Callback+0x16>
  CTP_TS_Work_Func();
 800251e:	f7ff fd4f 	bl	8001fc0 <CTP_TS_Work_Func>
  }  
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <I2C_Touch_Init>:

void I2C_Touch_Init(void){
 800252a:	b580      	push	{r7, lr}
 800252c:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(CTP_INT_IRQn);
 800252e:	2028      	movs	r0, #40	; 0x28
 8002530:	f001 fcaa 	bl	8003e88 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_SetPriority(CTP_INT_IRQn, 3, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2103      	movs	r1, #3
 8002538:	2028      	movs	r0, #40	; 0x28
 800253a:	f001 fc7b 	bl	8003e34 <HAL_NVIC_SetPriority>
    GPIO_Initure.Pull=GPIO_NOPULL;
	HAL_GPIO_Init(CTP_RST_PORT,&GPIO_Initure);
    CTP_RST_PORT->BSRR=CTP_RST_PIN<<16; //RST = 0
    ctDelay(10);
*/
    I2C_ResetChip();
 800253e:	f7ff ff89 	bl	8002454 <I2C_ResetChip>
    ctDelay(50);
 8002542:	2032      	movs	r0, #50	; 0x32
 8002544:	f7ff ff48 	bl	80023d8 <ctDelay>
    //MX_I2C1_Init();
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_Transfer>:

int I2C_Transfer( struct i2c_msg *msgs,int num){
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	int im = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
	int ret = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
	for (im = 0; ret == 0 && im != num; im++){
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e048      	b.n	80025f6 <I2C_Transfer+0xaa>
		if ((msgs[im].flags&CTP_I2C_M_RD)){
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d01e      	beq.n	80025b4 <I2C_Transfer+0x68>
			HAL_I2C_Master_Receive(&hi2c3,CTP_ADDRESS+CTP_I2C_M_RD /*msgs[im].addr*/, msgs[im].buf, msgs[im].len,15+msgs[im].len/10);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	8858      	ldrh	r0, [r3, #2]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	885b      	ldrh	r3, [r3, #2]
 8002594:	4a20      	ldr	r2, [pc, #128]	; (8002618 <I2C_Transfer+0xcc>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	b29b      	uxth	r3, r3
 800259e:	330f      	adds	r3, #15
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	21bb      	movs	r1, #187	; 0xbb
 80025a8:	481c      	ldr	r0, [pc, #112]	; (800261c <I2C_Transfer+0xd0>)
 80025aa:	f004 faaf 	bl	8006b0c <HAL_I2C_Master_Receive>
            ret=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	e01d      	b.n	80025f0 <I2C_Transfer+0xa4>
		}else{
			HAL_I2C_Master_Transmit(&hi2c3,CTP_ADDRESS /*msgs[im].addr*/,  msgs[im].buf, msgs[im].len,15+msgs[im].len/10);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	8858      	ldrh	r0, [r3, #2]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <I2C_Transfer+0xcc>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	330f      	adds	r3, #15
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	460a      	mov	r2, r1
 80025e4:	21ba      	movs	r1, #186	; 0xba
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <I2C_Transfer+0xd0>)
 80025e8:	f004 f992 	bl	8006910 <HAL_I2C_Master_Transmit>
            ret=0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
	for (im = 0; ret == 0 && im != num; im++){
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <I2C_Transfer+0xb8>
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d1af      	bne.n	8002564 <I2C_Transfer+0x18>
		}
	}

	if(ret)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <I2C_Transfer+0xc2>
		return ret;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	e000      	b.n	8002610 <I2C_Transfer+0xc4>

	return im;   													
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	20000bc8 	.word	0x20000bc8

08002620 <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
   to block in any way (for example, call xQueueReceive() with a block time
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
   timer or semaphore is created. It is also called by various parts of the
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <vApplicationGetIdleTaskMemory>:

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
{
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a07      	ldr	r2, [pc, #28]	; (8002680 <vApplicationGetIdleTaskMemory+0x2c>)
 8002664:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4a06      	ldr	r2, [pc, #24]	; (8002684 <vApplicationGetIdleTaskMemory+0x30>)
 800266a:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000928 	.word	0x20000928
 8002684:	20000980 	.word	0x20000980

08002688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b08e      	sub	sp, #56	; 0x38
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268e:	f001 fa8f 	bl	8003bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002692:	f000 f84f 	bl	8002734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002696:	f000 fb4b 	bl	8002d30 <MX_GPIO_Init>
  MX_DMA_Init();
 800269a:	f000 fa97 	bl	8002bcc <MX_DMA_Init>
  MX_CRC_Init();
 800269e:	f000 f8b3 	bl	8002808 <MX_CRC_Init>
  MX_DMA2D_Init();
 80026a2:	f000 f8c5 	bl	8002830 <MX_DMA2D_Init>
  MX_FMC_Init();
 80026a6:	f000 fab9 	bl	8002c1c <MX_FMC_Init>
  MX_I2C3_Init();
 80026aa:	f000 f8f3 	bl	8002894 <MX_I2C3_Init>
  MX_LTDC_Init();
 80026ae:	f000 f931 	bl	8002914 <MX_LTDC_Init>
  MX_SPI5_Init();
 80026b2:	f000 f9b1 	bl	8002a18 <MX_SPI5_Init>
  MX_TIM1_Init();
 80026b6:	f000 f9e5 	bl	8002a84 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80026ba:	f000 fa5d 	bl	8002b78 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80026be:	f000 fa31 	bl	8002b24 <MX_UART5_Init>
  MX_TouchGFX_Init();
 80026c2:	f00e fcb3 	bl	801102c <MX_TouchGFX_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  refresh_data_mutex = xSemaphoreCreateMutex();
 80026c6:	2001      	movs	r0, #1
 80026c8:	f00a fc01 	bl	800cece <xQueueCreateMutex>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <main+0x98>)
 80026d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <main+0x9c>)
 80026d4:	f107 041c 	add.w	r4, r7, #28
 80026d8:	461d      	mov	r5, r3
 80026da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f009 fba4 	bl	800be3a <osThreadCreate>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <main+0xa0>)
 80026f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of RS485_Task */
  osThreadDef(RS485_Task, RS485, osPriorityNormal, 0, 1024);
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <main+0xa4>)
 80026fa:	463c      	mov	r4, r7
 80026fc:	461d      	mov	r5, r3
 80026fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RS485_TaskHandle = osThreadCreate(osThread(RS485_Task), NULL);
 800270a:	463b      	mov	r3, r7
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f009 fb93 	bl	800be3a <osThreadCreate>
 8002714:	4603      	mov	r3, r0
 8002716:	4a06      	ldr	r2, [pc, #24]	; (8002730 <main+0xa8>)
 8002718:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800271a:	f009 fb87 	bl	800be2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800271e:	e7fe      	b.n	800271e <main+0x96>
 8002720:	20000490 	.word	0x20000490
 8002724:	0802d858 	.word	0x0802d858
 8002728:	20000ee0 	.word	0x20000ee0
 800272c:	0802d874 	.word	0x0802d874
 8002730:	20000ee4 	.word	0x20000ee4

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	; 0x50
 8002738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	2230      	movs	r2, #48	; 0x30
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f029 f962 	bl	802ba0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <SystemClock_Config+0xcc>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	4a27      	ldr	r2, [pc, #156]	; (8002800 <SystemClock_Config+0xcc>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	; 0x40
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <SystemClock_Config+0xcc>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <SystemClock_Config+0xd0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a21      	ldr	r2, [pc, #132]	; (8002804 <SystemClock_Config+0xd0>)
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <SystemClock_Config+0xd0>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002790:	2301      	movs	r3, #1
 8002792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	2302      	movs	r3, #2
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027a8:	23a8      	movs	r3, #168	; 0xa8
 80027aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ac:	2302      	movs	r3, #2
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027b0:	2307      	movs	r3, #7
 80027b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b4:	f107 0320 	add.w	r3, r7, #32
 80027b8:	4618      	mov	r0, r3
 80027ba:	f005 fb0b 	bl	8007dd4 <HAL_RCC_OscConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027c4:	f000 fc0c 	bl	8002fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c8:	230f      	movs	r3, #15
 80027ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027cc:	2302      	movs	r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027e0:	f107 030c 	add.w	r3, r7, #12
 80027e4:	2105      	movs	r1, #5
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 fd6c 	bl	80082c4 <HAL_RCC_ClockConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027f2:	f000 fbf5 	bl	8002fe0 <Error_Handler>
  }
}
 80027f6:	bf00      	nop
 80027f8:	3750      	adds	r7, #80	; 0x50
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_CRC_Init+0x20>)
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <MX_CRC_Init+0x24>)
 8002810:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_CRC_Init+0x20>)
 8002814:	f001 fb46 	bl	8003ea4 <HAL_CRC_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800281e:	f000 fbdf 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000b80 	.word	0x20000b80
 800282c:	40023000 	.word	0x40023000

08002830 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <MX_DMA2D_Init+0x60>)
 8002838:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <MX_DMA2D_Init+0x5c>)
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002842:	2202      	movs	r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <MX_DMA2D_Init+0x5c>)
 800284e:	2200      	movs	r2, #0
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002854:	2202      	movs	r2, #2
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <MX_DMA2D_Init+0x5c>)
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002860:	2200      	movs	r2, #0
 8002862:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002864:	4809      	ldr	r0, [pc, #36]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002866:	f001 ff3b 	bl	80046e0 <HAL_DMA2D_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002870:	f000 fbb6 	bl	8002fe0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002874:	2101      	movs	r1, #1
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <MX_DMA2D_Init+0x5c>)
 8002878:	f002 f88c 	bl	8004994 <HAL_DMA2D_ConfigLayer>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002882:	f000 fbad 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000b88 	.word	0x20000b88
 8002890:	4002b000 	.word	0x4002b000

08002894 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_I2C3_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <MX_I2C3_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <MX_I2C3_Init+0x7c>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_I2C3_Init+0x74>)
 80028b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_I2C3_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <MX_I2C3_Init+0x74>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_I2C3_Init+0x74>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <MX_I2C3_Init+0x74>)
 80028d2:	f003 fed9 	bl	8006688 <HAL_I2C_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80028dc:	f000 fb80 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028e0:	2100      	movs	r1, #0
 80028e2:	4809      	ldr	r0, [pc, #36]	; (8002908 <MX_I2C3_Init+0x74>)
 80028e4:	f004 fe65 	bl	80075b2 <HAL_I2CEx_ConfigAnalogFilter>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80028ee:	f000 fb77 	bl	8002fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028f2:	2100      	movs	r1, #0
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <MX_I2C3_Init+0x74>)
 80028f6:	f004 fe98 	bl	800762a <HAL_I2CEx_ConfigDigitalFilter>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002900:	f000 fb6e 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000bc8 	.word	0x20000bc8
 800290c:	40005c00 	.word	0x40005c00
 8002910:	000186a0 	.word	0x000186a0

08002914 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	2234      	movs	r2, #52	; 0x34
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f029 f873 	bl	802ba0c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002926:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002928:	4a3a      	ldr	r2, [pc, #232]	; (8002a14 <MX_LTDC_Init+0x100>)
 800292a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002946:	2209      	movs	r2, #9
 8002948:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800294c:	2201      	movs	r2, #1
 800294e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002952:	221d      	movs	r2, #29
 8002954:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002958:	2203      	movs	r2, #3
 800295a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 829;
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800295e:	f240 323d 	movw	r2, #829	; 0x33d
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 483;
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002966:	f240 12e3 	movw	r2, #483	; 0x1e3
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 839;
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800296e:	f240 3247 	movw	r2, #839	; 0x347
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002976:	f240 12e7 	movw	r2, #487	; 0x1e7
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <MX_LTDC_Init+0xfc>)
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002994:	481e      	ldr	r0, [pc, #120]	; (8002a10 <MX_LTDC_Init+0xfc>)
 8002996:	f004 fe87 	bl	80076a8 <HAL_LTDC_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80029a0:	f000 fb1e 	bl	8002fe0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80029a8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80029ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80029b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80029b8:	2302      	movs	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80029bc:	23ff      	movs	r3, #255	; 0xff
 80029be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80029c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80029ca:	2307      	movs	r3, #7
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80029ce:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80029d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 80029da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	4619      	mov	r1, r3
 80029f8:	4805      	ldr	r0, [pc, #20]	; (8002a10 <MX_LTDC_Init+0xfc>)
 80029fa:	f004 ffdd 	bl	80079b8 <HAL_LTDC_ConfigLayer>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002a04:	f000 faec 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002a08:	bf00      	nop
 8002a0a:	3738      	adds	r7, #56	; 0x38
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000c1c 	.word	0x20000c1c
 8002a14:	40016800 	.word	0x40016800

08002a18 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <MX_SPI5_Init+0x68>)
 8002a20:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a28:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a4c:	2218      	movs	r2, #24
 8002a4e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a64:	220a      	movs	r2, #10
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002a68:	4804      	ldr	r0, [pc, #16]	; (8002a7c <MX_SPI5_Init+0x64>)
 8002a6a:	f006 f8ce 	bl	8008c0a <HAL_SPI_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002a74:	f000 fab4 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000cc4 	.word	0x20000cc4
 8002a80:	40015000 	.word	0x40015000

08002a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a98:	463b      	mov	r3, r7
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002aa0:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <MX_TIM1_Init+0x9c>)
 8002aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002ace:	f006 f925 	bl	8008d1c <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002ad8:	f000 fa82 	bl	8002fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002aea:	f006 fadf 	bl	80090ac <HAL_TIM_ConfigClockSource>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002af4:	f000 fa74 	bl	8002fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_TIM1_Init+0x98>)
 8002b06:	f006 fcfb 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002b10:	f000 fa66 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000d1c 	.word	0x20000d1c
 8002b20:	40010000 	.word	0x40010000

08002b24 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <MX_UART5_Init+0x50>)
 8002b2c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002b34:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <MX_UART5_Init+0x4c>)
 8002b5c:	f006 fd60 	bl	8009620 <HAL_UART_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002b66:	f000 fa3b 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000d64 	.word	0x20000d64
 8002b74:	40005000 	.word	0x40005000

08002b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f006 fd36 	bl	8009620 <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f000 fa11 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000da8 	.word	0x20000da8
 8002bc8:	40011000 	.word	0x40011000

08002bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <MX_DMA_Init+0x4c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <MX_DMA_Init+0x4c>)
 8002bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <MX_DMA_Init+0x4c>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2105      	movs	r1, #5
 8002bf2:	200b      	movs	r0, #11
 8002bf4:	f001 f91e 	bl	8003e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002bf8:	200b      	movs	r0, #11
 8002bfa:	f001 f937 	bl	8003e6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2105      	movs	r1, #5
 8002c02:	202f      	movs	r0, #47	; 0x2f
 8002c04:	f001 f916 	bl	8003e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002c08:	202f      	movs	r0, #47	; 0x2f
 8002c0a:	f001 f92f 	bl	8003e6c <HAL_NVIC_EnableIRQ>

}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	611a      	str	r2, [r3, #16]
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002c36:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c38:	4a3c      	ldr	r2, [pc, #240]	; (8002d2c <MX_FMC_Init+0x110>)
 8002c3a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c50:	2210      	movs	r2, #16
 8002c52:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c60:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002c82:	2307      	movs	r3, #7
 8002c84:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8002c86:	2304      	movs	r3, #4
 8002c88:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8002c92:	2302      	movs	r3, #2
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8002c96:	2302      	movs	r3, #2
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4821      	ldr	r0, [pc, #132]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002ca2:	f005 ff21 	bl	8008ae8 <HAL_SDRAM_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8002cac:	f000 f998 	bl	8002fe0 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  // Step 1 and Step 2 already done in HAL_SDRAM_Init() //
  // Step 3: Configure a clock configuration enable command //
   Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; // Set MODE bits to "001" //
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
   Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; // configure the Target Bank bits //
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	60bb      	str	r3, [r7, #8]
   Command.AutoRefreshNumber      = 1;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
   Command.ModeRegisterDefinition = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4817      	ldr	r0, [pc, #92]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002cca:	f005 ff41 	bl	8008b50 <HAL_SDRAM_SendCommand>
   HAL_Delay(1); // Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms //
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f000 ffb0 	bl	8003c34 <HAL_Delay>
   // Step 5: Configure a PALL (precharge all) command //
   Command.CommandMode            = FMC_SDRAM_CMD_PALL; // Set MODE bits to "010" //
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	607b      	str	r3, [r7, #4]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4811      	ldr	r0, [pc, #68]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002ce2:	f005 ff35 	bl	8008b50 <HAL_SDRAM_SendCommand>
   // Step 6: Configure an Auto Refresh command //
   Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; // Set MODE bits to "011" //
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	607b      	str	r3, [r7, #4]
   Command.AutoRefreshNumber      = 2;
 8002cea:	2302      	movs	r3, #2
 8002cec:	60fb      	str	r3, [r7, #12]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002cf8:	f005 ff2a 	bl	8008b50 <HAL_SDRAM_SendCommand>
   // Step 7: Program the external memory mode register //
   Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;//set the MODE bits to "100" //
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	607b      	str	r3, [r7, #4]
   Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8002d00:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002d04:	613b      	str	r3, [r7, #16]
   HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002d10:	f005 ff1e 	bl	8008b50 <HAL_SDRAM_SendCommand>
   // Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455
   // Set the device refresh rate
    // COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
    //        = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542
   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1293);
 8002d14:	f240 510d 	movw	r1, #1293	; 0x50d
 8002d18:	4803      	ldr	r0, [pc, #12]	; (8002d28 <MX_FMC_Init+0x10c>)
 8002d1a:	f005 ff4e 	bl	8008bba <HAL_SDRAM_ProgramRefreshRate>

  /* USER CODE END FMC_Init 2 */
}
 8002d1e:	bf00      	nop
 8002d20:	3730      	adds	r7, #48	; 0x30
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000eac 	.word	0x20000eac
 8002d2c:	a0000140 	.word	0xa0000140

08002d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	; 0x38
 8002d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	4b86      	ldr	r3, [pc, #536]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b83      	ldr	r3, [pc, #524]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d6c:	f043 0320 	orr.w	r3, r3, #32
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	4b78      	ldr	r3, [pc, #480]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b75      	ldr	r3, [pc, #468]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	4b71      	ldr	r3, [pc, #452]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a70      	ldr	r2, [pc, #448]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b6e      	ldr	r3, [pc, #440]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a69      	ldr	r2, [pc, #420]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b67      	ldr	r3, [pc, #412]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b63      	ldr	r3, [pc, #396]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a62      	ldr	r2, [pc, #392]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <MX_GPIO_Init+0x234>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|TP_RST_Pin, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
 8002e28:	f640 0116 	movw	r1, #2070	; 0x816
 8002e2c:	484e      	ldr	r0, [pc, #312]	; (8002f68 <MX_GPIO_Init+0x238>)
 8002e2e:	f001 ffef 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	484d      	ldr	r0, [pc, #308]	; (8002f6c <MX_GPIO_Init+0x23c>)
 8002e38:	f001 ffea 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|UA5_EN_Pin, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f243 0110 	movw	r1, #12304	; 0x3010
 8002e42:	484b      	ldr	r0, [pc, #300]	; (8002f70 <MX_GPIO_Init+0x240>)
 8002e44:	f001 ffe4 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002e4e:	4849      	ldr	r0, [pc, #292]	; (8002f74 <MX_GPIO_Init+0x244>)
 8002e50:	f001 ffde 	bl	8004e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin|TP_RST_Pin;
 8002e54:	f640 0316 	movw	r3, #2070	; 0x816
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	483e      	ldr	r0, [pc, #248]	; (8002f68 <MX_GPIO_Init+0x238>)
 8002e6e:	f001 fe23 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8002e72:	2307      	movs	r3, #7
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e84:	4619      	mov	r1, r3
 8002e86:	4839      	ldr	r0, [pc, #228]	; (8002f6c <MX_GPIO_Init+0x23c>)
 8002e88:	f001 fe16 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4832      	ldr	r0, [pc, #200]	; (8002f6c <MX_GPIO_Init+0x23c>)
 8002ea4:	f001 fe08 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002eac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	4619      	mov	r1, r3
 8002ebc:	482a      	ldr	r0, [pc, #168]	; (8002f68 <MX_GPIO_Init+0x238>)
 8002ebe:	f001 fdfb 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4828      	ldr	r0, [pc, #160]	; (8002f78 <MX_GPIO_Init+0x248>)
 8002ed6:	f001 fdef 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eec:	4619      	mov	r1, r3
 8002eee:	4820      	ldr	r0, [pc, #128]	; (8002f70 <MX_GPIO_Init+0x240>)
 8002ef0:	f001 fde2 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin UA5_EN_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|UA5_EN_Pin;
 8002ef4:	f243 0310 	movw	r3, #12304	; 0x3010
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4818      	ldr	r0, [pc, #96]	; (8002f70 <MX_GPIO_Init+0x240>)
 8002f0e:	f001 fdd3 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT1_Pin */
  GPIO_InitStruct.Pin = TP_INT1_Pin;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT1_GPIO_Port, &GPIO_InitStruct);
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	4810      	ldr	r0, [pc, #64]	; (8002f6c <MX_GPIO_Init+0x23c>)
 8002f2a:	f001 fdc5 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002f2e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f44:	4619      	mov	r1, r3
 8002f46:	480b      	ldr	r0, [pc, #44]	; (8002f74 <MX_GPIO_Init+0x244>)
 8002f48:	f001 fdb6 	bl	8004ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2105      	movs	r1, #5
 8002f50:	2028      	movs	r0, #40	; 0x28
 8002f52:	f000 ff6f 	bl	8003e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f56:	2028      	movs	r0, #40	; 0x28
 8002f58:	f000 ff88 	bl	8003e6c <HAL_NVIC_EnableIRQ>

}
 8002f5c:	bf00      	nop
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021800 	.word	0x40021800
 8002f78:	40020400 	.word	0x40020400

08002f7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002f84:	f016 fa00 	bl	8019388 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */




  CTP_Init_Panel();
 8002f88:	f7ff f8c8 	bl	800211c <CTP_Init_Panel>
  MX_TouchGFX_Init();
 8002f8c:	f00e f84e 	bl	801102c <MX_TouchGFX_Init>
  HAL_GPIO_WritePin(RDX_GPIO_Port,  RDX_Pin, SET);
 8002f90:	2201      	movs	r2, #1
 8002f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f96:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <StartDefaultTask+0x2c>)
 8002f98:	f001 ff3a 	bl	8004e10 <HAL_GPIO_WritePin>
   MX_TouchGFX_Process();
 8002f9c:	f00e f84c 	bl	8011038 <MX_TouchGFX_Process>

  /* Infinite loop */
  for(;;)
  {
	  //send_uart(huart5, buffer);
    osDelay(100);
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	f008 ff9d 	bl	800bee0 <osDelay>
 8002fa6:	e7fb      	b.n	8002fa0 <StartDefaultTask+0x24>
 8002fa8:	40020c00 	.word	0x40020c00

08002fac <RS485>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RS485 */
void RS485(void const * argument)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RS485 */
  /* Infinite loop */
  for(;;)
  {
	  task_bus();
 8002fb4:	f7fd fb26 	bl	8000604 <task_bus>
 8002fb8:	e7fc      	b.n	8002fb4 <RS485+0x8>
	...

08002fbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fce:	f000 fe11 	bl	8003bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40001000 	.word	0x40001000

08002fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i
}
 8002fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <Error_Handler+0x8>
	...

08002fec <HAL_MspInit>:

/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_MspInit+0x54>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_MspInit+0x54>)
 8002ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_MspInit+0x54>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_MspInit+0x54>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_MspInit+0x54>)
 8003018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301c:	6413      	str	r3, [r2, #64]	; 0x40
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <HAL_MspInit+0x54>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
 800302a:	2200      	movs	r2, #0
 800302c:	210f      	movs	r1, #15
 800302e:	f06f 0001 	mvn.w	r0, #1
 8003032:	f000 feff 	bl	8003e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800

08003044 <HAL_CRC_MspInit>:
* @brief CRC MSP Initialization
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
{
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <HAL_CRC_MspInit+0x3c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10d      	bne.n	8003072 <HAL_CRC_MspInit+0x2e>
  if(hcrc->Instance==CRC)
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_CRC_MspInit+0x40>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_CRC_MspInit+0x40>)
 8003060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_CRC_MspInit+0x40>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_CRC_CLK_ENABLE();
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023000 	.word	0x40023000
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_DMA2D_MspInit>:
* @brief DMA2D MSP Initialization
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
{
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <HAL_DMA2D_MspInit+0x48>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d115      	bne.n	80030c6 <HAL_DMA2D_MspInit+0x3e>
  if(hdma2d->Instance==DMA2D)
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_DMA2D_MspInit+0x4c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <HAL_DMA2D_MspInit+0x4c>)
 80030a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_DMA2D_MspInit+0x4c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_CLK_ENABLE();
    /* DMA2D interrupt Init */
 80030b6:	2200      	movs	r2, #0
 80030b8:	2105      	movs	r1, #5
 80030ba:	205a      	movs	r0, #90	; 0x5a
 80030bc:	f000 feba 	bl	8003e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80030c0:	205a      	movs	r0, #90	; 0x5a
 80030c2:	f000 fed3 	bl	8003e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	4002b000 	.word	0x4002b000
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_I2C_MspInit>:
* @brief I2C MSP Initialization
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
{
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a29      	ldr	r2, [pc, #164]	; (800319c <HAL_I2C_MspInit+0xc4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d14b      	bne.n	8003192 <HAL_I2C_MspInit+0xba>
  if(hi2c->Instance==I2C3)
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a20      	ldr	r2, [pc, #128]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
 8003132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003138:	2312      	movs	r3, #18
 800313a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313c:	2301      	movs	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2304      	movs	r3, #4
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4815      	ldr	r0, [pc, #84]	; (80031a4 <HAL_I2C_MspInit+0xcc>)
 8003150:	f001 fcb2 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);

 8003154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800315a:	2312      	movs	r3, #18
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800315e:	2301      	movs	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003162:	2300      	movs	r3, #0
 8003164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2304      	movs	r3, #4
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	480d      	ldr	r0, [pc, #52]	; (80031a8 <HAL_I2C_MspInit+0xd0>)
 8003172:	f001 fca1 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);

    /* Peripheral clock enable */
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_I2C_MspInit+0xc8>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

 8003192:	bf00      	nop
 8003194:	3728      	adds	r7, #40	; 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40005c00 	.word	0x40005c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020800 	.word	0x40020800
 80031a8:	40020000 	.word	0x40020000

080031ac <HAL_LTDC_MspInit>:
* @brief LTDC MSP Initialization
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b09a      	sub	sp, #104	; 0x68
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
{
 80031b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c8:	2230      	movs	r2, #48	; 0x30
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f028 fc1d 	bl	802ba0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a85      	ldr	r2, [pc, #532]	; (80033ec <HAL_LTDC_MspInit+0x240>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	f040 8102 	bne.w	80033e2 <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
 80031de:	2308      	movs	r3, #8
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 64;
 80031e6:	2302      	movs	r3, #2
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80031ea:	2300      	movs	r3, #0
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fab8 	bl	8008768 <HAL_RCCEx_PeriphCLKConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_LTDC_MspInit+0x56>
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
    {
 80031fe:	f7ff feef 	bl	8002fe0 <Error_Handler>
      Error_Handler();
    }

    /* Peripheral clock enable */
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a79      	ldr	r2, [pc, #484]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 800320c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800321a:	623b      	str	r3, [r7, #32]
 800321c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_LTDC_CLK_ENABLE();

 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	4b73      	ldr	r3, [pc, #460]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a72      	ldr	r2, [pc, #456]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003228:	f043 0320 	orr.w	r3, r3, #32
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a6b      	ldr	r2, [pc, #428]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b69      	ldr	r3, [pc, #420]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003260:	f043 0302 	orr.w	r3, r3, #2
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b5e      	ldr	r3, [pc, #376]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a4f      	ldr	r2, [pc, #316]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_LTDC_MspInit+0x244>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    PG10     ------> LTDC_G3
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
 80032c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80032cc:	2302      	movs	r3, #2
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2300      	movs	r3, #0
 80032d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	230e      	movs	r3, #14
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032e0:	4619      	mov	r1, r3
 80032e2:	4844      	ldr	r0, [pc, #272]	; (80033f4 <HAL_LTDC_MspInit+0x248>)
 80032e4:	f001 fbe8 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);

 80032e8:	f641 0358 	movw	r3, #6232	; 0x1858
 80032ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
                          |R5_Pin;
 80032ee:	2302      	movs	r3, #2
 80032f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2300      	movs	r3, #0
 80032f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	230e      	movs	r3, #14
 80032fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80032fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003302:	4619      	mov	r1, r3
 8003304:	483c      	ldr	r0, [pc, #240]	; (80033f8 <HAL_LTDC_MspInit+0x24c>)
 8003306:	f001 fbd7 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 800330a:	2303      	movs	r3, #3
 800330c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800330e:	2302      	movs	r3, #2
 8003310:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2300      	movs	r3, #0
 8003314:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2309      	movs	r3, #9
 800331c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800331e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003322:	4619      	mov	r1, r3
 8003324:	4835      	ldr	r0, [pc, #212]	; (80033fc <HAL_LTDC_MspInit+0x250>)
 8003326:	f001 fbc7 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 800332a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800332e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003330:	2302      	movs	r3, #2
 8003332:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2300      	movs	r3, #0
 8003336:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	230e      	movs	r3, #14
 800333e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003344:	4619      	mov	r1, r3
 8003346:	482d      	ldr	r0, [pc, #180]	; (80033fc <HAL_LTDC_MspInit+0x250>)
 8003348:	f001 fbb6 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

 800334c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003350:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003352:	2302      	movs	r3, #2
 8003354:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2300      	movs	r3, #0
 8003358:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	230e      	movs	r3, #14
 8003360:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003362:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003366:	4619      	mov	r1, r3
 8003368:	4825      	ldr	r0, [pc, #148]	; (8003400 <HAL_LTDC_MspInit+0x254>)
 800336a:	f001 fba5 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

 800336e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003372:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003374:	2302      	movs	r3, #2
 8003376:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2300      	movs	r3, #0
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003380:	230e      	movs	r3, #14
 8003382:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003384:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003388:	4619      	mov	r1, r3
 800338a:	481e      	ldr	r0, [pc, #120]	; (8003404 <HAL_LTDC_MspInit+0x258>)
 800338c:	f001 fb94 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

 8003390:	2348      	movs	r3, #72	; 0x48
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003394:	2302      	movs	r3, #2
 8003396:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2300      	movs	r3, #0
 800339a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	230e      	movs	r3, #14
 80033a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80033a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033a8:	4619      	mov	r1, r3
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <HAL_LTDC_MspInit+0x25c>)
 80033ac:	f001 fb84 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

 80033b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80033b6:	2302      	movs	r3, #2
 80033b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2300      	movs	r3, #0
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2309      	movs	r3, #9
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80033c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033ca:	4619      	mov	r1, r3
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <HAL_LTDC_MspInit+0x254>)
 80033ce:	f001 fb73 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    /* LTDC interrupt Init */
 80033d2:	2200      	movs	r2, #0
 80033d4:	2105      	movs	r1, #5
 80033d6:	2058      	movs	r0, #88	; 0x58
 80033d8:	f000 fd2c 	bl	8003e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80033dc:	2058      	movs	r0, #88	; 0x58
 80033de:	f000 fd45 	bl	8003e6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

 80033e2:	bf00      	nop
 80033e4:	3768      	adds	r7, #104	; 0x68
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40016800 	.word	0x40016800
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40021800 	.word	0x40021800
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00

0800340c <HAL_SPI_MspInit>:
* @brief SPI MSP Initialization
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
{
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_SPI_MspInit+0x84>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12c      	bne.n	8003488 <HAL_SPI_MspInit+0x7c>
  if(hspi->Instance==SPI5)
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_SPI_MspInit+0x88>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_SPI_MspInit+0x88>)
 8003438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_SPI_MspInit+0x88>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_SPI5_CLK_ENABLE();

 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_SPI_MspInit+0x88>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a10      	ldr	r2, [pc, #64]	; (8003494 <HAL_SPI_MspInit+0x88>)
 8003454:	f043 0320 	orr.w	r3, r3, #32
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_SPI_MspInit+0x88>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
 8003466:	f44f 7360 	mov.w	r3, #896	; 0x380
 800346a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800346c:	2302      	movs	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003478:	2305      	movs	r3, #5
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4619      	mov	r1, r3
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <HAL_SPI_MspInit+0x8c>)
 8003484:	f001 fb18 	bl	8004ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40015000 	.word	0x40015000
 8003494:	40023800 	.word	0x40023800
 8003498:	40021400 	.word	0x40021400

0800349c <HAL_TIM_Base_MspInit>:
* @brief TIM_Base MSP Initialization
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
{
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <HAL_TIM_Base_MspInit+0x3c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <HAL_TIM_Base_MspInit+0x2e>
  if(htim_base->Instance==TIM1)
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_TIM_Base_MspInit+0x40>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_TIM_Base_MspInit+0x40>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_TIM_Base_MspInit+0x40>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_UART_MspInit>:
* @brief UART MSP Initialization
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08c      	sub	sp, #48	; 0x30
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
{
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a74      	ldr	r2, [pc, #464]	; (80036d0 <HAL_UART_MspInit+0x1f0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f040 80b0 	bne.w	8003664 <HAL_UART_MspInit+0x184>
  if(huart->Instance==UART5)
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	6413      	str	r3, [r2, #64]	; 0x40
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_UART5_CLK_ENABLE();

 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	4b6b      	ldr	r3, [pc, #428]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4a6a      	ldr	r2, [pc, #424]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6313      	str	r3, [r2, #48]	; 0x30
 8003530:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	4b64      	ldr	r3, [pc, #400]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003546:	f043 0308 	orr.w	r3, r3, #8
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
 8003558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800355e:	2302      	movs	r3, #2
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2303      	movs	r3, #3
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2308      	movs	r3, #8
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800356e:	f107 031c 	add.w	r3, r7, #28
 8003572:	4619      	mov	r1, r3
 8003574:	4858      	ldr	r0, [pc, #352]	; (80036d8 <HAL_UART_MspInit+0x1f8>)
 8003576:	f001 fa9f 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

 800357a:	2304      	movs	r3, #4
 800357c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800357e:	2302      	movs	r3, #2
 8003580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2303      	movs	r3, #3
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2308      	movs	r3, #8
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	4619      	mov	r1, r3
 8003594:	4851      	ldr	r0, [pc, #324]	; (80036dc <HAL_UART_MspInit+0x1fc>)
 8003596:	f001 fa8f 	bl	8004ab8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* UART5 DMA Init */
    /* UART5_RX Init */
 800359a:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_UART_MspInit+0x200>)
 800359c:	4a51      	ldr	r2, [pc, #324]	; (80036e4 <HAL_UART_MspInit+0x204>)
 800359e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a6:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80035a8:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ae:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b4:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ba:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035be:	2200      	movs	r2, #0
 80035c0:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c2:	4b47      	ldr	r3, [pc, #284]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c8:	4b45      	ldr	r3, [pc, #276]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80035ce:	4b44      	ldr	r3, [pc, #272]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035da:	4841      	ldr	r0, [pc, #260]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035dc:	f000 fc7e 	bl	8003edc <HAL_DMA_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_UART_MspInit+0x10a>
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
    {
 80035e6:	f7ff fcfb 	bl	8002fe0 <Error_Handler>
      Error_Handler();
    }

 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
 80035f0:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_UART_MspInit+0x200>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);

    /* UART5_TX Init */
 80035f6:	4b3c      	ldr	r3, [pc, #240]	; (80036e8 <HAL_UART_MspInit+0x208>)
 80035f8:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <HAL_UART_MspInit+0x20c>)
 80035fa:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_UART_MspInit+0x208>)
 80035fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003602:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8003604:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_UART_MspInit+0x208>)
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003616:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_UART_MspInit+0x208>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003624:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_UART_MspInit+0x208>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003632:	2200      	movs	r2, #0
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003636:	482c      	ldr	r0, [pc, #176]	; (80036e8 <HAL_UART_MspInit+0x208>)
 8003638:	f000 fc50 	bl	8003edc <HAL_DMA_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_UART_MspInit+0x166>
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
    {
 8003642:	f7ff fccd 	bl	8002fe0 <Error_Handler>
      Error_Handler();
    }

 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_UART_MspInit+0x208>)
 800364a:	635a      	str	r2, [r3, #52]	; 0x34
 800364c:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_UART_MspInit+0x208>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);

    /* UART5 interrupt Init */
 8003652:	2200      	movs	r2, #0
 8003654:	2105      	movs	r1, #5
 8003656:	2035      	movs	r0, #53	; 0x35
 8003658:	f000 fbec 	bl	8003e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800365c:	2035      	movs	r0, #53	; 0x35
 800365e:	f000 fc05 	bl	8003e6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

 8003662:	e031      	b.n	80036c8 <HAL_UART_MspInit+0x1e8>
  }
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a21      	ldr	r2, [pc, #132]	; (80036f0 <HAL_UART_MspInit+0x210>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d12c      	bne.n	80036c8 <HAL_UART_MspInit+0x1e8>
    /* Peripheral clock enable */
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003678:	f043 0310 	orr.w	r3, r3, #16
 800367c:	6453      	str	r3, [r2, #68]	; 0x44
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_UART_MspInit+0x1f4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
    */
 80036a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80036ac:	2302      	movs	r3, #2
 80036ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2303      	movs	r3, #3
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2307      	movs	r3, #7
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4619      	mov	r1, r3
 80036c2:	480c      	ldr	r0, [pc, #48]	; (80036f4 <HAL_UART_MspInit+0x214>)
 80036c4:	f001 f9f8 	bl	8004ab8 <HAL_GPIO_Init>

 80036c8:	bf00      	nop
 80036ca:	3730      	adds	r7, #48	; 0x30
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40005000 	.word	0x40005000
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	20000dec 	.word	0x20000dec
 80036e4:	40026010 	.word	0x40026010
 80036e8:	20000e4c 	.word	0x20000e4c
 80036ec:	400260b8 	.word	0x400260b8
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40020000 	.word	0x40020000

080036f8 <HAL_FMC_MspInit>:
  }

}

static uint32_t FMC_Initialized = 0;

 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_FMC_MspInit+0x104>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d16f      	bne.n	80037f4 <HAL_FMC_MspInit+0xfc>
  if (FMC_Initialized) {
    return;
  }
 8003714:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_FMC_MspInit+0x104>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
  FMC_Initialized = 1;

  /* Peripheral clock enable */
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_FMC_MspInit+0x108>)
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4a37      	ldr	r2, [pc, #220]	; (8003800 <HAL_FMC_MspInit+0x108>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6393      	str	r3, [r2, #56]	; 0x38
 800372a:	4b35      	ldr	r3, [pc, #212]	; (8003800 <HAL_FMC_MspInit+0x108>)
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
 8003736:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800373a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
 800373c:	2302      	movs	r3, #2
 800373e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2303      	movs	r3, #3
 8003746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	230c      	movs	r3, #12
 800374a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	4619      	mov	r1, r3
 8003750:	482c      	ldr	r0, [pc, #176]	; (8003804 <HAL_FMC_MspInit+0x10c>)
 8003752:	f001 f9b1 	bl	8004ab8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

 8003756:	2301      	movs	r3, #1
 8003758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800375a:	2302      	movs	r3, #2
 800375c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2303      	movs	r3, #3
 8003764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003766:	230c      	movs	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4826      	ldr	r0, [pc, #152]	; (8003808 <HAL_FMC_MspInit+0x110>)
 8003770:	f001 f9a2 	bl	8004ab8 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);

 8003774:	f248 1333 	movw	r3, #33075	; 0x8133
 8003778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
                          |SDCLK_Pin|SDNCAS_Pin;
 800377a:	2302      	movs	r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2303      	movs	r3, #3
 8003784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	230c      	movs	r3, #12
 8003788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	4619      	mov	r1, r3
 800378e:	481f      	ldr	r0, [pc, #124]	; (800380c <HAL_FMC_MspInit+0x114>)
 8003790:	f001 f992 	bl	8004ab8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

 8003794:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
 800379a:	2302      	movs	r3, #2
 800379c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2303      	movs	r3, #3
 80037a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a6:	230c      	movs	r3, #12
 80037a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4818      	ldr	r0, [pc, #96]	; (8003810 <HAL_FMC_MspInit+0x118>)
 80037b0:	f001 f982 	bl	8004ab8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

 80037b4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
                          |D1_Pin|D2_Pin|D3_Pin;
 80037ba:	2302      	movs	r3, #2
 80037bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2303      	movs	r3, #3
 80037c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c6:	230c      	movs	r3, #12
 80037c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4811      	ldr	r0, [pc, #68]	; (8003814 <HAL_FMC_MspInit+0x11c>)
 80037d0:	f001 f972 	bl	8004ab8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

 80037d4:	2360      	movs	r3, #96	; 0x60
 80037d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80037d8:	2302      	movs	r3, #2
 80037da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2303      	movs	r3, #3
 80037e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e4:	230c      	movs	r3, #12
 80037e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	4619      	mov	r1, r3
 80037ec:	480a      	ldr	r0, [pc, #40]	; (8003818 <HAL_FMC_MspInit+0x120>)
 80037ee:	f001 f963 	bl	8004ab8 <HAL_GPIO_Init>
 80037f2:	e000      	b.n	80037f6 <HAL_FMC_MspInit+0xfe>
  if (FMC_Initialized) {
 80037f4:	bf00      	nop
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000ee8 	.word	0x20000ee8
 8003800:	40023800 	.word	0x40023800
 8003804:	40021400 	.word	0x40021400
 8003808:	40020800 	.word	0x40020800
 800380c:	40021800 	.word	0x40021800
 8003810:	40021000 	.word	0x40021000
 8003814:	40020c00 	.word	0x40020c00
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_SDRAM_MspInit>:
}

 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
 8003824:	f7ff ff68 	bl	80036f8 <HAL_FMC_MspInit>
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_InitTick>:
  * @note   This function is called  automatically at the beginning of program after
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
{
  RCC_ClkInitTypeDef    clkconfig;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwTimclock = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2036      	movs	r0, #54	; 0x36
 8003846:	f000 faf5 	bl	8003e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);

  /* Enable the TIM6 global Interrupt */
 800384a:	2036      	movs	r0, #54	; 0x36
 800384c:	f000 fb0e 	bl	8003e6c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);

  /* Enable TIM6 clock */
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <HAL_InitTick+0xa4>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <HAL_InitTick+0xa4>)
 800385a:	f043 0310 	orr.w	r3, r3, #16
 800385e:	6413      	str	r3, [r2, #64]	; 0x40
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_InitTick+0xa4>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_TIM6_CLK_ENABLE();

  /* Get clock configuration */
 800386c:	f107 0210 	add.w	r2, r7, #16
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f004 ff44 	bl	8008704 <HAL_RCC_GetClockConfig>
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);

  /* Compute TIM6 clock */
 800387c:	f004 ff1a 	bl	80086b4 <HAL_RCC_GetPCLK1Freq>
 8003880:	4603      	mov	r3, r0
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <HAL_InitTick+0xa8>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	3b01      	subs	r3, #1
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_InitTick+0xac>)
 8003896:	4a12      	ldr	r2, [pc, #72]	; (80038e0 <HAL_InitTick+0xb0>)
 8003898:	601a      	str	r2, [r3, #0]
  /* Initialize TIMx peripheral as follow:
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_InitTick+0xac>)
 800389c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038a2:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <HAL_InitTick+0xac>)
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	6053      	str	r3, [r2, #4]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_InitTick+0xac>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
  htim6.Init.ClockDivision = 0;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_InitTick+0xac>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

 80038b4:	4809      	ldr	r0, [pc, #36]	; (80038dc <HAL_InitTick+0xac>)
 80038b6:	f005 fa31 	bl	8008d1c <HAL_TIM_Base_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_InitTick+0x9a>
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
  {
    /* Start the TIM time Base generation in interrupt mode */
 80038c0:	4806      	ldr	r0, [pc, #24]	; (80038dc <HAL_InitTick+0xac>)
 80038c2:	f005 fa7b 	bl	8008dbc <HAL_TIM_Base_Start_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	e000      	b.n	80038cc <HAL_InitTick+0x9c>
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
 80038ca:	2301      	movs	r3, #1
  return HAL_ERROR;
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	; 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	431bde83 	.word	0x431bde83
 80038dc:	20000eec 	.word	0x20000eec
 80038e0:	40001000 	.word	0x40001000

080038e4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 80038e8:	e7fe      	b.n	80038e8 <NMI_Handler+0x4>

080038ea <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
 80038ee:	e7fe      	b.n	80038ee <HardFault_Handler+0x4>

080038f0 <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
 80038f4:	e7fe      	b.n	80038f4 <MemManage_Handler+0x4>

080038f6 <BusFault_Handler>:
}

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
 80038fa:	e7fe      	b.n	80038fa <BusFault_Handler+0x4>

080038fc <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
 8003900:	e7fe      	b.n	8003900 <UsageFault_Handler+0x4>

08003902 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <DMA1_Stream0_IRQHandler+0x10>)
 8003916:	f000 fc79 	bl	800420c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000dec 	.word	0x20000dec

08003924 <EXTI15_10_IRQHandler>:
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
 8003928:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800392c:	f001 fa8a 	bl	8004e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TP_INT1_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}

08003934 <DMA1_Stream7_IRQHandler>:
}

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <DMA1_Stream7_IRQHandler+0x10>)
 800393a:	f000 fc67 	bl	800420c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000e4c 	.word	0x20000e4c

08003948 <UART5_IRQHandler>:
}

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <UART5_IRQHandler+0x10>)
 800394e:	f005 fff5 	bl	800993c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000d64 	.word	0x20000d64

0800395c <TIM6_DAC_IRQHandler>:
}

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <TIM6_DAC_IRQHandler+0x10>)
 8003962:	f005 fa9b 	bl	8008e9c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000eec 	.word	0x20000eec

08003970 <OTG_HS_IRQHandler>:
}

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <OTG_HS_IRQHandler+0x10>)
 8003976:	f001 fce7 	bl	8005348 <HAL_HCD_IRQHandler>
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000b1b4 	.word	0x2000b1b4

08003984 <LTDC_IRQHandler>:
}

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
 8003988:	4802      	ldr	r0, [pc, #8]	; (8003994 <LTDC_IRQHandler+0x10>)
 800398a:	f003 ff5d 	bl	8007848 <HAL_LTDC_IRQHandler>
  HAL_LTDC_IRQHandler(&hltdc);
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000c1c 	.word	0x20000c1c

08003998 <DMA2D_IRQHandler>:
}

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <DMA2D_IRQHandler+0x10>)
 800399e:	f000 fee8 	bl	8004772 <HAL_DMA2D_IRQHandler>
  HAL_DMA2D_IRQHandler(&hdma2d);
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000b88 	.word	0x20000b88

080039ac <_getpid>:
/* Functions */
void initialise_monitor_handles()
{
}

int _getpid(void)
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
{
 80039b0:	2301      	movs	r3, #1
	return 1;
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_kill>:
}

int _kill(int pid, int sig)
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
{
 80039c6:	f027 ffc7 	bl	802b958 <__errno>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2216      	movs	r2, #22
 80039ce:	601a      	str	r2, [r3, #0]
	errno = EINVAL;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <_exit>:
}

void _exit (int status)
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
{
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffe7 	bl	80039bc <_kill>
	_kill(status, -1);
 80039ee:	e7fe      	b.n	80039ee <_exit+0x12>

080039f0 <_read>:
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
{
	int DataIdx;

 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e00a      	b.n	8003a18 <_read+0x28>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
 8003a02:	f3af 8000 	nop.w
 8003a06:	4601      	mov	r1, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	b2ca      	uxtb	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]

 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3301      	adds	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbf0      	blt.n	8003a02 <_read+0x12>
		*ptr++ = __io_getchar();
	}

 8003a20:	687b      	ldr	r3, [r7, #4]
return len;
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_write>:
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
{
	int DataIdx;

 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e009      	b.n	8003a50 <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	60ba      	str	r2, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f3af 8000 	nop.w

 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dbf1      	blt.n	8003a3c <_write+0x12>
		__io_putchar(*ptr++);
	}
 8003a58:	687b      	ldr	r3, [r7, #4]
	return len;
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_close>:
}

int _close(int file)
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
{
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_fstat>:
}


int _fstat(int file, struct stat *st)
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
{
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a8a:	605a      	str	r2, [r3, #4]
	st->st_mode = S_IFCHR;
 8003a8c:	2300      	movs	r3, #0
	return 0;
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_isatty>:
}

int _isatty(int file)
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
{
 8003aa2:	2301      	movs	r3, #1
	return 1;
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_lseek>:
}

int _lseek(int file, int ptr, int dir)
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
{
 8003abc:	2300      	movs	r3, #0
	return 0;
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <_sbrk+0x5c>)
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <_sbrk+0x60>)
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	613b      	str	r3, [r7, #16]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <_sbrk+0x22>
  if (NULL == __sbrk_heap_end)
  {
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <_sbrk+0x64>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <_sbrk+0x68>)
 8003aec:	601a      	str	r2, [r3, #0]
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d207      	bcs.n	8003b0c <_sbrk+0x40>
  if (__sbrk_heap_end + incr > max_heap)
  {
 8003afc:	f027 ff2c 	bl	802b958 <__errno>
 8003b00:	4603      	mov	r3, r0
 8003b02:	220c      	movs	r2, #12
 8003b04:	601a      	str	r2, [r3, #0]
    errno = ENOMEM;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e009      	b.n	8003b20 <_sbrk+0x54>
    return (void *)-1;
  }

 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  prev_heap_end = __sbrk_heap_end;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <_sbrk+0x64>)
 8003b1c:	6013      	str	r3, [r2, #0]
  __sbrk_heap_end += incr;

 8003b1e:	68fb      	ldr	r3, [r7, #12]
  return (void *)prev_heap_end;
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20030000 	.word	0x20030000
 8003b2c:	00001a00 	.word	0x00001a00
 8003b30:	20000f34 	.word	0x20000f34
 8003b34:	2000b768 	.word	0x2000b768

08003b38 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <SystemInit+0x20>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <SystemInit+0x20>)
 8003b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b94 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b60:	480d      	ldr	r0, [pc, #52]	; (8003b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b62:	490e      	ldr	r1, [pc, #56]	; (8003b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b64:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b68:	e002      	b.n	8003b70 <LoopCopyDataInit>

08003b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6e:	3304      	adds	r3, #4

08003b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b74:	d3f9      	bcc.n	8003b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b76:	4a0b      	ldr	r2, [pc, #44]	; (8003ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b78:	4c0b      	ldr	r4, [pc, #44]	; (8003ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b7c:	e001      	b.n	8003b82 <LoopFillZerobss>

08003b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b80:	3204      	adds	r2, #4

08003b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b84:	d3fb      	bcc.n	8003b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b86:	f7ff ffd7 	bl	8003b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8a:	f027 fefd 	bl	802b988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b8e:	f7fe fd7b 	bl	8002688 <main>
  bx  lr    
 8003b92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b9c:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 8003ba0:	0805c498 	.word	0x0805c498
  ldr r2, =_sbss
 8003ba4:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 8003ba8:	2000b768 	.word	0x2000b768

08003bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bac:	e7fe      	b.n	8003bac <ADC_IRQHandler>
	...

08003bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_Init+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_Init+0x40>)
 8003bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_Init+0x40>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_Init+0x40>)
 8003bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_Init+0x40>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_Init+0x40>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f000 f920 	bl	8003e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bde:	200f      	movs	r0, #15
 8003be0:	f7ff fe26 	bl	8003830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003be4:	f7ff fa02 	bl	8002fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00

08003bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_IncTick+0x20>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_IncTick+0x24>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_IncTick+0x24>)
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	200002e4 	.word	0x200002e4
 8003c18:	20000f38 	.word	0x20000f38

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_GetTick+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000f38 	.word	0x20000f38

08003c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c3c:	f7ff ffee 	bl	8003c1c <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d005      	beq.n	8003c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_Delay+0x44>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c5a:	bf00      	nop
 8003c5c:	f7ff ffde 	bl	8003c1c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d8f7      	bhi.n	8003c5c <HAL_Delay+0x28>
  {
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200002e4 	.word	0x200002e4

08003c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cae:	4a04      	ldr	r2, [pc, #16]	; (8003cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	60d3      	str	r3, [r2, #12]
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <__NVIC_GetPriorityGrouping+0x18>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 0307 	and.w	r3, r3, #7
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	db0b      	blt.n	8003d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4907      	ldr	r1, [pc, #28]	; (8003d18 <__NVIC_EnableIRQ+0x38>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2001      	movs	r0, #1
 8003d02:	fa00 f202 	lsl.w	r2, r0, r2
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000e100 	.word	0xe000e100

08003d1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	db12      	blt.n	8003d54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	f003 021f 	and.w	r2, r3, #31
 8003d34:	490a      	ldr	r1, [pc, #40]	; (8003d60 <__NVIC_DisableIRQ+0x44>)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d42:	3320      	adds	r3, #32
 8003d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d48:	f3bf 8f4f 	dsb	sy
}
 8003d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d4e:	f3bf 8f6f 	isb	sy
}
 8003d52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db0a      	blt.n	8003d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	490c      	ldr	r1, [pc, #48]	; (8003db0 <__NVIC_SetPriority+0x4c>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	0112      	lsls	r2, r2, #4
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d8c:	e00a      	b.n	8003da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4908      	ldr	r1, [pc, #32]	; (8003db4 <__NVIC_SetPriority+0x50>)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	0112      	lsls	r2, r2, #4
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	440b      	add	r3, r1
 8003da2:	761a      	strb	r2, [r3, #24]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000e100 	.word	0xe000e100
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f1c3 0307 	rsb	r3, r3, #7
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	bf28      	it	cs
 8003dd6:	2304      	movcs	r3, #4
 8003dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d902      	bls.n	8003de8 <NVIC_EncodePriority+0x30>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3b03      	subs	r3, #3
 8003de6:	e000      	b.n	8003dea <NVIC_EncodePriority+0x32>
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43d9      	mvns	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	4313      	orrs	r3, r2
         );
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff28 	bl	8003c7c <__NVIC_SetPriorityGrouping>
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e46:	f7ff ff3d 	bl	8003cc4 <__NVIC_GetPriorityGrouping>
 8003e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f7ff ffb1 	bl	8003db8 <NVIC_EncodePriority>
 8003e56:	4602      	mov	r2, r0
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff ff80 	bl	8003d64 <__NVIC_SetPriority>
}
 8003e64:	bf00      	nop
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff30 	bl	8003ce0 <__NVIC_EnableIRQ>
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff40 	bl	8003d1c <__NVIC_DisableIRQ>
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00e      	b.n	8003ed4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	795b      	ldrb	r3, [r3, #5]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff f8bc 	bl	8003044 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff fe98 	bl	8003c1c <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e099      	b.n	800402c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f18:	e00f      	b.n	8003f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f1a:	f7ff fe7f 	bl	8003c1c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	d908      	bls.n	8003f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2203      	movs	r2, #3
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e078      	b.n	800402c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1e8      	bne.n	8003f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_DMA_Init+0x158>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d107      	bne.n	8003fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0307 	bic.w	r3, r3, #7
 8003fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d117      	bne.n	8003ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00e      	beq.n	8003ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fb01 	bl	80045e8 <DMA_CheckFifoParam>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e016      	b.n	800402c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fab8 	bl	800457c <DMA_CalcBaseAndBitshift>
 800400c:	4603      	mov	r3, r0
 800400e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	223f      	movs	r2, #63	; 0x3f
 8004016:	409a      	lsls	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	f010803f 	.word	0xf010803f

08004038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_DMA_Start_IT+0x26>
 800405a:	2302      	movs	r3, #2
 800405c:	e040      	b.n	80040e0 <HAL_DMA_Start_IT+0xa8>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d12f      	bne.n	80040d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fa4a 	bl	8004520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	223f      	movs	r2, #63	; 0x3f
 8004092:	409a      	lsls	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0216 	orr.w	r2, r2, #22
 80040a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0208 	orr.w	r2, r2, #8
 80040be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e005      	b.n	80040de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040da:	2302      	movs	r3, #2
 80040dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040f6:	f7ff fd91 	bl	8003c1c <HAL_GetTick>
 80040fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d008      	beq.n	800411a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e052      	b.n	80041c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0216 	bic.w	r2, r2, #22
 8004128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_DMA_Abort+0x62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0208 	bic.w	r2, r2, #8
 8004158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416a:	e013      	b.n	8004194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416c:	f7ff fd56 	bl	8003c1c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b05      	cmp	r3, #5
 8004178:	d90c      	bls.n	8004194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2203      	movs	r2, #3
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e015      	b.n	80041c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e4      	bne.n	800416c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	223f      	movs	r2, #63	; 0x3f
 80041a8:	409a      	lsls	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d004      	beq.n	80041e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e00c      	b.n	8004200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2205      	movs	r2, #5
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004218:	4b8e      	ldr	r3, [pc, #568]	; (8004454 <HAL_DMA_IRQHandler+0x248>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a8e      	ldr	r2, [pc, #568]	; (8004458 <HAL_DMA_IRQHandler+0x24c>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	0a9b      	lsrs	r3, r3, #10
 8004224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2208      	movs	r2, #8
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01a      	beq.n	8004278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2208      	movs	r2, #8
 8004266:	409a      	lsls	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	2201      	movs	r2, #1
 800427e:	409a      	lsls	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2201      	movs	r2, #1
 800429c:	409a      	lsls	r2, r3
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	2204      	movs	r2, #4
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d012      	beq.n	80042e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	2204      	movs	r2, #4
 80042d2:	409a      	lsls	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	2210      	movs	r2, #16
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d043      	beq.n	800437c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03c      	beq.n	800437c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	2210      	movs	r2, #16
 8004308:	409a      	lsls	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d024      	beq.n	800437c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
 800433a:	e01f      	b.n	800437c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e016      	b.n	800437c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0208 	bic.w	r2, r2, #8
 800436a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004380:	2220      	movs	r2, #32
 8004382:	409a      	lsls	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 808f 	beq.w	80044ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8087 	beq.w	80044ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2220      	movs	r2, #32
 80043a4:	409a      	lsls	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d136      	bne.n	8004424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0216 	bic.w	r2, r2, #22
 80043c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_DMA_IRQHandler+0x1da>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0208 	bic.w	r2, r2, #8
 80043f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	223f      	movs	r2, #63	; 0x3f
 80043fc:	409a      	lsls	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d07e      	beq.n	8004518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
        }
        return;
 8004422:	e079      	b.n	8004518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01d      	beq.n	800446e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10d      	bne.n	800445c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	2b00      	cmp	r3, #0
 8004446:	d031      	beq.n	80044ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
 8004450:	e02c      	b.n	80044ac <HAL_DMA_IRQHandler+0x2a0>
 8004452:	bf00      	nop
 8004454:	200002dc 	.word	0x200002dc
 8004458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d023      	beq.n	80044ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
 800446c:	e01e      	b.n	80044ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d032      	beq.n	800451a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d022      	beq.n	8004506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2205      	movs	r2, #5
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	3301      	adds	r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d307      	bcc.n	80044f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f2      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x2cc>
 80044f2:	e000      	b.n	80044f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
 8004516:	e000      	b.n	800451a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004518:	bf00      	nop
    }
  }
}
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800453c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d108      	bne.n	8004560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800455e:	e007      	b.n	8004570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3b10      	subs	r3, #16
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <DMA_CalcBaseAndBitshift+0x64>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004596:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d909      	bls.n	80045be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	659a      	str	r2, [r3, #88]	; 0x58
 80045bc:	e007      	b.n	80045ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	aaaaaaab 	.word	0xaaaaaaab
 80045e4:	0802e3a4 	.word	0x0802e3a4

080045e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11f      	bne.n	8004642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d856      	bhi.n	80046b6 <DMA_CheckFifoParam+0xce>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <DMA_CheckFifoParam+0x28>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004621 	.word	0x08004621
 800461c:	080046b7 	.word	0x080046b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d046      	beq.n	80046ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e043      	b.n	80046ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463a:	d140      	bne.n	80046be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004640:	e03d      	b.n	80046be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	d121      	bne.n	8004690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d837      	bhi.n	80046c2 <DMA_CheckFifoParam+0xda>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <DMA_CheckFifoParam+0x70>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	0800466f 	.word	0x0800466f
 8004660:	08004669 	.word	0x08004669
 8004664:	08004681 	.word	0x08004681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e030      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d025      	beq.n	80046c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467e:	e022      	b.n	80046c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468e:	e01c      	b.n	80046ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d903      	bls.n	800469e <DMA_CheckFifoParam+0xb6>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d003      	beq.n	80046a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800469c:	e018      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      break;
 80046a2:	e015      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e00b      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046b6:	bf00      	nop
 80046b8:	e00a      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e008      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ce:	bf00      	nop
    }
  } 
  
  return status; 
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e03b      	b.n	800476a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fe fcbe 	bl	8003088 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	f023 0107 	bic.w	r1, r3, #7
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800474a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68d1      	ldr	r1, [r2, #12]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	430b      	orrs	r3, r1
 8004758:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d026      	beq.n	80047e2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d021      	beq.n	80047e2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2204      	movs	r2, #4
 80047c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d026      	beq.n	800483a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d021      	beq.n	800483a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004804:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2220      	movs	r2, #32
 800480c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d026      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484a:	2b00      	cmp	r3, #0
 800484c:	d021      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2208      	movs	r2, #8
 8004864:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2204      	movs	r2, #4
 8004876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00e      	beq.n	80048c4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2204      	movs	r2, #4
 80048bc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f853 	bl	800496a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d024      	beq.n	8004918 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01f      	beq.n	8004918 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01f      	beq.n	8004962 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01a      	beq.n	8004962 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2210      	movs	r2, #16
 8004942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f80e 	bl	800497e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_DMA2D_ConfigLayer+0x20>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e079      	b.n	8004aa8 <HAL_DMA2D_ConfigLayer+0x114>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3318      	adds	r3, #24
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80049de:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <HAL_DMA2D_ConfigLayer+0x120>)
 80049e0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b0a      	cmp	r3, #10
 80049e8:	d003      	beq.n	80049f2 <HAL_DMA2D_ConfigLayer+0x5e>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b09      	cmp	r3, #9
 80049f0:	d107      	bne.n	8004a02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e005      	b.n	8004a0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	061b      	lsls	r3, r3, #24
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d120      	bne.n	8004a56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	ea02 0103 	and.w	r1, r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b0a      	cmp	r3, #10
 8004a3c:	d003      	beq.n	8004a46 <HAL_DMA2D_ConfigLayer+0xb2>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b09      	cmp	r3, #9
 8004a44:	d127      	bne.n	8004a96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
 8004a54:	e01f      	b.n	8004a96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	ea02 0103 	and.w	r1, r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b0a      	cmp	r3, #10
 8004a7e:	d003      	beq.n	8004a88 <HAL_DMA2D_ConfigLayer+0xf4>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d106      	bne.n	8004a96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004a94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	ff03000f 	.word	0xff03000f

08004ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e177      	b.n	8004dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	f040 8166 	bne.w	8004dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d005      	beq.n	8004b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d130      	bne.n	8004b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b40:	2201      	movs	r2, #1
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 0201 	and.w	r2, r3, #1
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d017      	beq.n	8004ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	2203      	movs	r2, #3
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d123      	bne.n	8004bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	08da      	lsrs	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3208      	adds	r2, #8
 8004bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	08da      	lsrs	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3208      	adds	r2, #8
 8004bf6:	69b9      	ldr	r1, [r7, #24]
 8004bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	2203      	movs	r2, #3
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80c0 	beq.w	8004dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b66      	ldr	r3, [pc, #408]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	4a65      	ldr	r2, [pc, #404]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4e:	4b63      	ldr	r3, [pc, #396]	; (8004ddc <HAL_GPIO_Init+0x324>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c5a:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <HAL_GPIO_Init+0x328>)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	3302      	adds	r3, #2
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	220f      	movs	r2, #15
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a58      	ldr	r2, [pc, #352]	; (8004de4 <HAL_GPIO_Init+0x32c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d037      	beq.n	8004cf6 <HAL_GPIO_Init+0x23e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a57      	ldr	r2, [pc, #348]	; (8004de8 <HAL_GPIO_Init+0x330>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d031      	beq.n	8004cf2 <HAL_GPIO_Init+0x23a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a56      	ldr	r2, [pc, #344]	; (8004dec <HAL_GPIO_Init+0x334>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02b      	beq.n	8004cee <HAL_GPIO_Init+0x236>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a55      	ldr	r2, [pc, #340]	; (8004df0 <HAL_GPIO_Init+0x338>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d025      	beq.n	8004cea <HAL_GPIO_Init+0x232>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a54      	ldr	r2, [pc, #336]	; (8004df4 <HAL_GPIO_Init+0x33c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_GPIO_Init+0x22e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a53      	ldr	r2, [pc, #332]	; (8004df8 <HAL_GPIO_Init+0x340>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_GPIO_Init+0x22a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	; (8004dfc <HAL_GPIO_Init+0x344>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_GPIO_Init+0x226>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a51      	ldr	r2, [pc, #324]	; (8004e00 <HAL_GPIO_Init+0x348>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00d      	beq.n	8004cda <HAL_GPIO_Init+0x222>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a50      	ldr	r2, [pc, #320]	; (8004e04 <HAL_GPIO_Init+0x34c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <HAL_GPIO_Init+0x21e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4f      	ldr	r2, [pc, #316]	; (8004e08 <HAL_GPIO_Init+0x350>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_GPIO_Init+0x21a>
 8004cce:	2309      	movs	r3, #9
 8004cd0:	e012      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cd2:	230a      	movs	r3, #10
 8004cd4:	e010      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	e00e      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cda:	2307      	movs	r3, #7
 8004cdc:	e00c      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cde:	2306      	movs	r3, #6
 8004ce0:	e00a      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	e008      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e006      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cea:	2303      	movs	r3, #3
 8004cec:	e004      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e002      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_GPIO_Init+0x240>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f002 0203 	and.w	r2, r2, #3
 8004cfe:	0092      	lsls	r2, r2, #2
 8004d00:	4093      	lsls	r3, r2
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d08:	4935      	ldr	r1, [pc, #212]	; (8004de0 <HAL_GPIO_Init+0x328>)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	089b      	lsrs	r3, r3, #2
 8004d0e:	3302      	adds	r3, #2
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d16:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d3a:	4a34      	ldr	r2, [pc, #208]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d40:	4b32      	ldr	r3, [pc, #200]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_GPIO_Init+0x354>)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	f67f ae84 	bls.w	8004ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40013800 	.word	0x40013800
 8004de4:	40020000 	.word	0x40020000
 8004de8:	40020400 	.word	0x40020400
 8004dec:	40020800 	.word	0x40020800
 8004df0:	40020c00 	.word	0x40020c00
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40021400 	.word	0x40021400
 8004dfc:	40021800 	.word	0x40021800
 8004e00:	40021c00 	.word	0x40021c00
 8004e04:	40022000 	.word	0x40022000
 8004e08:	40022400 	.word	0x40022400
 8004e0c:	40013c00 	.word	0x40013c00

08004e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e20:	787b      	ldrb	r3, [r7, #1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e2c:	e003      	b.n	8004e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	041a      	lsls	r2, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	619a      	str	r2, [r3, #24]
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e4e:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fb52 	bl	800250c <HAL_GPIO_EXTI_Callback>
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40013c00 	.word	0x40013c00

08004e74 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e76:	b08f      	sub	sp, #60	; 0x3c
 8004e78:	af0a      	add	r7, sp, #40	; 0x28
 8004e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e054      	b.n	8004f30 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f014 fac5 	bl	8019430 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f006 f813 	bl	800aef0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	687e      	ldr	r6, [r7, #4]
 8004ed2:	466d      	mov	r5, sp
 8004ed4:	f106 0410 	add.w	r4, r6, #16
 8004ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ee8:	1d33      	adds	r3, r6, #4
 8004eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f005 ff8d 	bl	800ae0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f006 f80a 	bl	800af12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	687e      	ldr	r6, [r7, #4]
 8004f06:	466d      	mov	r5, sp
 8004f08:	f106 0410 	add.w	r4, r6, #16
 8004f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f1c:	1d33      	adds	r3, r6, #4
 8004f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f20:	6838      	ldr	r0, [r7, #0]
 8004f22:	f006 f993 	bl	800b24c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f38 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b089      	sub	sp, #36	; 0x24
 8004f3c:	af04      	add	r7, sp, #16
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	70fb      	strb	r3, [r7, #3]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	70bb      	strb	r3, [r7, #2]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_HCD_HC_Init+0x28>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e076      	b.n	800504e <HAL_HCD_HC_Init+0x116>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	333d      	adds	r3, #61	; 0x3d
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	787a      	ldrb	r2, [r7, #1]
 8004f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	212c      	movs	r1, #44	; 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3340      	adds	r3, #64	; 0x40
 8004f9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f9c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	3339      	adds	r3, #57	; 0x39
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	333f      	adds	r3, #63	; 0x3f
 8004fbe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	78ba      	ldrb	r2, [r7, #2]
 8004fc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fcc:	b2d0      	uxtb	r0, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	333a      	adds	r3, #58	; 0x3a
 8004fda:	4602      	mov	r2, r0
 8004fdc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004fde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da09      	bge.n	8004ffa <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	333b      	adds	r3, #59	; 0x3b
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e008      	b.n	800500c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	333b      	adds	r3, #59	; 0x3b
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	212c      	movs	r1, #44	; 0x2c
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	333c      	adds	r3, #60	; 0x3c
 800501a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800501e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	787c      	ldrb	r4, [r7, #1]
 8005026:	78ba      	ldrb	r2, [r7, #2]
 8005028:	78f9      	ldrb	r1, [r7, #3]
 800502a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800502c:	9302      	str	r3, [sp, #8]
 800502e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4623      	mov	r3, r4
 800503c:	f006 fa8c 	bl	800b558 <USB_HC_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	bd90      	pop	{r4, r7, pc}

08005056 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_HCD_HC_Halt+0x1e>
 8005070:	2302      	movs	r3, #2
 8005072:	e00f      	b.n	8005094 <HAL_HCD_HC_Halt+0x3e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f006 fcdc 	bl	800ba42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	70fb      	strb	r3, [r7, #3]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70bb      	strb	r3, [r7, #2]
 80050b2:	4613      	mov	r3, r2
 80050b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	333b      	adds	r3, #59	; 0x3b
 80050c4:	78ba      	ldrb	r2, [r7, #2]
 80050c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	333f      	adds	r3, #63	; 0x3f
 80050d6:	787a      	ldrb	r2, [r7, #1]
 80050d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80050da:	7c3b      	ldrb	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d112      	bne.n	8005106 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	212c      	movs	r1, #44	; 0x2c
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	3342      	adds	r3, #66	; 0x42
 80050ee:	2203      	movs	r2, #3
 80050f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	333d      	adds	r3, #61	; 0x3d
 8005100:	7f3a      	ldrb	r2, [r7, #28]
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e008      	b.n	8005118 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	212c      	movs	r1, #44	; 0x2c
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	4413      	add	r3, r2
 8005112:	3342      	adds	r3, #66	; 0x42
 8005114:	2202      	movs	r2, #2
 8005116:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b03      	cmp	r3, #3
 800511c:	f200 80c6 	bhi.w	80052ac <HAL_HCD_HC_SubmitRequest+0x210>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005139 	.word	0x08005139
 800512c:	08005299 	.word	0x08005299
 8005130:	0800519d 	.word	0x0800519d
 8005134:	0800521b 	.word	0x0800521b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005138:	7c3b      	ldrb	r3, [r7, #16]
 800513a:	2b01      	cmp	r3, #1
 800513c:	f040 80b8 	bne.w	80052b0 <HAL_HCD_HC_SubmitRequest+0x214>
 8005140:	78bb      	ldrb	r3, [r7, #2]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80b4 	bne.w	80052b0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005148:	8b3b      	ldrh	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	212c      	movs	r1, #44	; 0x2c
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	4413      	add	r3, r2
 800515a:	3355      	adds	r3, #85	; 0x55
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3355      	adds	r3, #85	; 0x55
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d109      	bne.n	8005188 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3342      	adds	r3, #66	; 0x42
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005186:	e093      	b.n	80052b0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3342      	adds	r3, #66	; 0x42
 8005196:	2202      	movs	r2, #2
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e089      	b.n	80052b0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800519c:	78bb      	ldrb	r3, [r7, #2]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11d      	bne.n	80051de <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	3355      	adds	r3, #85	; 0x55
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	212c      	movs	r1, #44	; 0x2c
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	3342      	adds	r3, #66	; 0x42
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80051c8:	e073      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3342      	adds	r3, #66	; 0x42
 80051d8:	2202      	movs	r2, #2
 80051da:	701a      	strb	r2, [r3, #0]
      break;
 80051dc:	e069      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	212c      	movs	r1, #44	; 0x2c
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	3354      	adds	r3, #84	; 0x54
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	212c      	movs	r1, #44	; 0x2c
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	3342      	adds	r3, #66	; 0x42
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
      break;
 8005204:	e055      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	212c      	movs	r1, #44	; 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3342      	adds	r3, #66	; 0x42
 8005214:	2202      	movs	r2, #2
 8005216:	701a      	strb	r2, [r3, #0]
      break;
 8005218:	e04b      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800521a:	78bb      	ldrb	r3, [r7, #2]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11d      	bne.n	800525c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3355      	adds	r3, #85	; 0x55
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	212c      	movs	r1, #44	; 0x2c
 800523a:	fb01 f303 	mul.w	r3, r1, r3
 800523e:	4413      	add	r3, r2
 8005240:	3342      	adds	r3, #66	; 0x42
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005246:	e034      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	212c      	movs	r1, #44	; 0x2c
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	4413      	add	r3, r2
 8005254:	3342      	adds	r3, #66	; 0x42
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]
      break;
 800525a:	e02a      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3354      	adds	r3, #84	; 0x54
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	212c      	movs	r1, #44	; 0x2c
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	4413      	add	r3, r2
 800527c:	3342      	adds	r3, #66	; 0x42
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
      break;
 8005282:	e016      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3342      	adds	r3, #66	; 0x42
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
      break;
 8005296:	e00c      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	212c      	movs	r1, #44	; 0x2c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	3342      	adds	r3, #66	; 0x42
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80052b0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	3344      	adds	r3, #68	; 0x44
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	8b3a      	ldrh	r2, [r7, #24]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	202c      	movs	r0, #44	; 0x2c
 80052cc:	fb00 f303 	mul.w	r3, r0, r3
 80052d0:	440b      	add	r3, r1
 80052d2:	334c      	adds	r3, #76	; 0x4c
 80052d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	3360      	adds	r3, #96	; 0x60
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3350      	adds	r3, #80	; 0x50
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	212c      	movs	r1, #44	; 0x2c
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	4413      	add	r3, r2
 8005306:	3339      	adds	r3, #57	; 0x39
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	3361      	adds	r3, #97	; 0x61
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	222c      	movs	r2, #44	; 0x2c
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	3338      	adds	r3, #56	; 0x38
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	18d1      	adds	r1, r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	f006 fa30 	bl	800b79c <USB_HC_StartXfer>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop

08005348 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f005 ff31 	bl	800b1c6 <USB_GetMode>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	f040 80f6 	bne.w	8005558 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f005 ff15 	bl	800b1a0 <USB_ReadInterrupts>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80ec 	beq.w	8005556 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f005 ff0c 	bl	800b1a0 <USB_ReadInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800538e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005392:	d104      	bne.n	800539e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800539c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f005 fefc 	bl	800b1a0 <USB_ReadInterrupts>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b2:	d104      	bne.n	80053be <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f005 feec 	bl	800b1a0 <USB_ReadInterrupts>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d2:	d104      	bne.n	80053de <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80053dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f005 fedc 	bl	800b1a0 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d103      	bne.n	80053fa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2202      	movs	r2, #2
 80053f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f005 fece 	bl	800b1a0 <USB_ReadInterrupts>
 8005404:	4603      	mov	r3, r0
 8005406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540e:	d11c      	bne.n	800544a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005418:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10f      	bne.n	800544a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800542a:	2110      	movs	r1, #16
 800542c:	6938      	ldr	r0, [r7, #16]
 800542e:	f005 fdbd 	bl	800afac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005432:	6938      	ldr	r0, [r7, #16]
 8005434:	f005 fdee 	bl	800b014 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f005 ffc4 	bl	800b3cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f014 f86d 	bl	8019524 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f005 fea6 	bl	800b1a0 <USB_ReadInterrupts>
 8005454:	4603      	mov	r3, r0
 8005456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800545a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800545e:	d102      	bne.n	8005466 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f001 f89e 	bl	80065a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f005 fe98 	bl	800b1a0 <USB_ReadInterrupts>
 8005470:	4603      	mov	r3, r0
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b08      	cmp	r3, #8
 8005478:	d106      	bne.n	8005488 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f014 f836 	bl	80194ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f005 fe87 	bl	800b1a0 <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d101      	bne.n	80054a0 <HAL_HCD_IRQHandler+0x158>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_HCD_IRQHandler+0x15a>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d012      	beq.n	80054cc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0210 	bic.w	r2, r2, #16
 80054b4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 ffa1 	bl	80063fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0210 	orr.w	r2, r2, #16
 80054ca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f005 fe65 	bl	800b1a0 <USB_ReadInterrupts>
 80054d6:	4603      	mov	r3, r0
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e0:	d13a      	bne.n	8005558 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f006 fa9a 	bl	800ba20 <USB_HC_ReadInterrupt>
 80054ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e025      	b.n	8005540 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d018      	beq.n	800553a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d106      	bne.n	800552e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8ab 	bl	8005682 <HCD_HC_IN_IRQHandler>
 800552c:	e005      	b.n	800553a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fbf9 	bl	8005d2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3301      	adds	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	429a      	cmp	r2, r3
 8005548:	d3d4      	bcc.n	80054f4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005552:	615a      	str	r2, [r3, #20]
 8005554:	e000      	b.n	8005558 <HAL_HCD_IRQHandler+0x210>
      return;
 8005556:	bf00      	nop
    }
  }
}
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_HCD_Start+0x16>
 8005570:	2302      	movs	r3, #2
 8005572:	e013      	b.n	800559c <HAL_HCD_Start+0x3e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2101      	movs	r1, #1
 8005582:	4618      	mov	r0, r3
 8005584:	f005 ff86 	bl	800b494 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f005 fc9e 	bl	800aece <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_HCD_Stop+0x16>
 80055b6:	2302      	movs	r3, #2
 80055b8:	e00d      	b.n	80055d6 <HAL_HCD_Stop+0x32>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f006 fb74 	bl	800bcb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f005 ff28 	bl	800b440 <USB_ResetPort>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	212c      	movs	r1, #44	; 0x2c
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	4413      	add	r3, r2
 8005612:	3360      	adds	r3, #96	; 0x60
 8005614:	781b      	ldrb	r3, [r3, #0]
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	212c      	movs	r1, #44	; 0x2c
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	3350      	adds	r3, #80	; 0x50
 800563c:	681b      	ldr	r3, [r3, #0]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f005 ff6c 	bl	800b534 <USB_GetCurrentFrame>
 800565c:	4603      	mov	r3, r0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f005 ff47 	bl	800b506 <USB_GetHostSpeed>
 8005678:	4603      	mov	r3, r0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d11a      	bne.n	80056e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	461a      	mov	r2, r3
 80056c0:	2304      	movs	r3, #4
 80056c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	212c      	movs	r1, #44	; 0x2c
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	3361      	adds	r3, #97	; 0x61
 80056d2:	2206      	movs	r2, #6
 80056d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f006 f9ae 	bl	800ba42 <USB_HC_Halt>
 80056e6:	e0af      	b.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d11b      	bne.n	8005738 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4413      	add	r3, r2
 8005708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570c:	461a      	mov	r2, r3
 800570e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005712:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3361      	adds	r3, #97	; 0x61
 8005722:	2207      	movs	r2, #7
 8005724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f006 f986 	bl	800ba42 <USB_HC_Halt>
 8005736:	e087      	b.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d109      	bne.n	8005762 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	461a      	mov	r2, r3
 800575c:	2320      	movs	r3, #32
 800575e:	6093      	str	r3, [r2, #8]
 8005760:	e072      	b.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b08      	cmp	r3, #8
 8005776:	d11a      	bne.n	80057ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005784:	461a      	mov	r2, r3
 8005786:	2308      	movs	r3, #8
 8005788:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	212c      	movs	r1, #44	; 0x2c
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	3361      	adds	r3, #97	; 0x61
 8005798:	2205      	movs	r2, #5
 800579a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f006 f94b 	bl	800ba42 <USB_HC_Halt>
 80057ac:	e04c      	b.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c4:	d11b      	bne.n	80057fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	461a      	mov	r2, r3
 80057d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	212c      	movs	r1, #44	; 0x2c
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	4413      	add	r3, r2
 80057e6:	3361      	adds	r3, #97	; 0x61
 80057e8:	2208      	movs	r2, #8
 80057ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f006 f923 	bl	800ba42 <USB_HC_Halt>
 80057fc:	e024      	b.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d119      	bne.n	8005848 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3361      	adds	r3, #97	; 0x61
 8005834:	2206      	movs	r2, #6
 8005836:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f006 f8fd 	bl	800ba42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800585a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800585e:	d112      	bne.n	8005886 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f006 f8e9 	bl	800ba42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	461a      	mov	r2, r3
 800587e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005882:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005884:	e24e      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 80df 	bne.w	8005a5c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d019      	beq.n	80058da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	212c      	movs	r1, #44	; 0x2c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	3348      	adds	r3, #72	; 0x48
 80058b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	0159      	lsls	r1, r3, #5
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	440b      	add	r3, r1
 80058be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	202c      	movs	r0, #44	; 0x2c
 80058d0:	fb00 f303 	mul.w	r3, r0, r3
 80058d4:	440b      	add	r3, r1
 80058d6:	3350      	adds	r3, #80	; 0x50
 80058d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	212c      	movs	r1, #44	; 0x2c
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	3361      	adds	r3, #97	; 0x61
 80058e8:	2201      	movs	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	212c      	movs	r1, #44	; 0x2c
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	335c      	adds	r3, #92	; 0x5c
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590a:	461a      	mov	r2, r3
 800590c:	2301      	movs	r3, #1
 800590e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	212c      	movs	r1, #44	; 0x2c
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	333f      	adds	r3, #63	; 0x3f
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	212c      	movs	r1, #44	; 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	333f      	adds	r3, #63	; 0x3f
 8005932:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005934:	2b02      	cmp	r3, #2
 8005936:	d111      	bne.n	800595c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f006 f87d 	bl	800ba42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4413      	add	r3, r2
 8005950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005954:	461a      	mov	r2, r3
 8005956:	2310      	movs	r3, #16
 8005958:	6093      	str	r3, [r2, #8]
 800595a:	e03a      	b.n	80059d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	212c      	movs	r1, #44	; 0x2c
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	4413      	add	r3, r2
 8005968:	333f      	adds	r3, #63	; 0x3f
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d009      	beq.n	8005984 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	212c      	movs	r1, #44	; 0x2c
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	333f      	adds	r3, #63	; 0x3f
 800597e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005980:	2b01      	cmp	r3, #1
 8005982:	d126      	bne.n	80059d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	440a      	add	r2, r1
 800599a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800599e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	212c      	movs	r1, #44	; 0x2c
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	3360      	adds	r3, #96	; 0x60
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	b2d9      	uxtb	r1, r3
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	202c      	movs	r0, #44	; 0x2c
 80059c0:	fb00 f303 	mul.w	r3, r0, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	3360      	adds	r3, #96	; 0x60
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f013 fdb7 	bl	8019540 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d12b      	bne.n	8005a32 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	212c      	movs	r1, #44	; 0x2c
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	3348      	adds	r3, #72	; 0x48
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	202c      	movs	r0, #44	; 0x2c
 80059f0:	fb00 f202 	mul.w	r2, r0, r2
 80059f4:	440a      	add	r2, r1
 80059f6:	3240      	adds	r2, #64	; 0x40
 80059f8:	8812      	ldrh	r2, [r2, #0]
 80059fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 818e 	beq.w	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	212c      	movs	r1, #44	; 0x2c
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	3354      	adds	r3, #84	; 0x54
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f083 0301 	eor.w	r3, r3, #1
 8005a1c:	b2d8      	uxtb	r0, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	212c      	movs	r1, #44	; 0x2c
 8005a24:	fb01 f303 	mul.w	r3, r1, r3
 8005a28:	4413      	add	r3, r2
 8005a2a:	3354      	adds	r3, #84	; 0x54
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	701a      	strb	r2, [r3, #0]
}
 8005a30:	e178      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	212c      	movs	r1, #44	; 0x2c
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3354      	adds	r3, #84	; 0x54
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	b2d8      	uxtb	r0, r3
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	212c      	movs	r1, #44	; 0x2c
 8005a4e:	fb01 f303 	mul.w	r3, r1, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	3354      	adds	r3, #84	; 0x54
 8005a56:	4602      	mov	r2, r0
 8005a58:	701a      	strb	r2, [r3, #0]
}
 8005a5a:	e163      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	f040 80f6 	bne.w	8005c60 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	212c      	movs	r1, #44	; 0x2c
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	4413      	add	r3, r2
 8005a80:	3361      	adds	r3, #97	; 0x61
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d109      	bne.n	8005a9c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	3360      	adds	r3, #96	; 0x60
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e0c9      	b.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	212c      	movs	r1, #44	; 0x2c
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3361      	adds	r3, #97	; 0x61
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	d109      	bne.n	8005ac4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	3360      	adds	r3, #96	; 0x60
 8005abe:	2205      	movs	r2, #5
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e0b5      	b.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	212c      	movs	r1, #44	; 0x2c
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	3361      	adds	r3, #97	; 0x61
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d009      	beq.n	8005aec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	212c      	movs	r1, #44	; 0x2c
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3361      	adds	r3, #97	; 0x61
 8005ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d150      	bne.n	8005b8e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	212c      	movs	r1, #44	; 0x2c
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	335c      	adds	r3, #92	; 0x5c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	202c      	movs	r0, #44	; 0x2c
 8005b04:	fb00 f303 	mul.w	r3, r0, r3
 8005b08:	440b      	add	r3, r1
 8005b0a:	335c      	adds	r3, #92	; 0x5c
 8005b0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	212c      	movs	r1, #44	; 0x2c
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	335c      	adds	r3, #92	; 0x5c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d912      	bls.n	8005b48 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	212c      	movs	r1, #44	; 0x2c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	335c      	adds	r3, #92	; 0x5c
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	212c      	movs	r1, #44	; 0x2c
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	3360      	adds	r3, #96	; 0x60
 8005b42:	2204      	movs	r2, #4
 8005b44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b46:	e073      	b.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	3360      	adds	r3, #96	; 0x60
 8005b56:	2202      	movs	r2, #2
 8005b58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	461a      	mov	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b8c:	e050      	b.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	3361      	adds	r3, #97	; 0x61
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d122      	bne.n	8005be8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	212c      	movs	r1, #44	; 0x2c
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	3360      	adds	r3, #96	; 0x60
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	461a      	mov	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e023      	b.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	212c      	movs	r1, #44	; 0x2c
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3361      	adds	r3, #97	; 0x61
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b07      	cmp	r3, #7
 8005bfa:	d119      	bne.n	8005c30 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	212c      	movs	r1, #44	; 0x2c
 8005c02:	fb01 f303 	mul.w	r3, r1, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	335c      	adds	r3, #92	; 0x5c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	202c      	movs	r0, #44	; 0x2c
 8005c14:	fb00 f303 	mul.w	r3, r0, r3
 8005c18:	440b      	add	r3, r1
 8005c1a:	335c      	adds	r3, #92	; 0x5c
 8005c1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	212c      	movs	r1, #44	; 0x2c
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	4413      	add	r3, r2
 8005c2a:	3360      	adds	r3, #96	; 0x60
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2302      	movs	r3, #2
 8005c40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	b2d9      	uxtb	r1, r3
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	202c      	movs	r0, #44	; 0x2c
 8005c4c:	fb00 f303 	mul.w	r3, r0, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	3360      	adds	r3, #96	; 0x60
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f013 fc71 	bl	8019540 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c5e:	e061      	b.n	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d156      	bne.n	8005d24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	333f      	adds	r3, #63	; 0x3f
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d111      	bne.n	8005cae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	212c      	movs	r1, #44	; 0x2c
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	335c      	adds	r3, #92	; 0x5c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f005 fecb 	bl	800ba42 <USB_HC_Halt>
 8005cac:	e031      	b.n	8005d12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	212c      	movs	r1, #44	; 0x2c
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	333f      	adds	r3, #63	; 0x3f
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	212c      	movs	r1, #44	; 0x2c
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	333f      	adds	r3, #63	; 0x3f
 8005cd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d11d      	bne.n	8005d12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	212c      	movs	r1, #44	; 0x2c
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	335c      	adds	r3, #92	; 0x5c
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	212c      	movs	r1, #44	; 0x2c
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3361      	adds	r3, #97	; 0x61
 8005cfe:	2203      	movs	r2, #3
 8005d00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f005 fe98 	bl	800ba42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2310      	movs	r3, #16
 8005d22:	6093      	str	r3, [r2, #8]
}
 8005d24:	bf00      	nop
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d11a      	bne.n	8005d92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	212c      	movs	r1, #44	; 0x2c
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3361      	adds	r3, #97	; 0x61
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f005 fe59 	bl	800ba42 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005d90:	e331      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d12e      	bne.n	8005e06 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db4:	461a      	mov	r2, r3
 8005db6:	2320      	movs	r3, #32
 8005db8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	212c      	movs	r1, #44	; 0x2c
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	333d      	adds	r3, #61	; 0x3d
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	f040 8313 	bne.w	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	212c      	movs	r1, #44	; 0x2c
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	333d      	adds	r3, #61	; 0x3d
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	212c      	movs	r1, #44	; 0x2c
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	3360      	adds	r3, #96	; 0x60
 8005df0:	2202      	movs	r2, #2
 8005df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 fe1f 	bl	800ba42 <USB_HC_Halt>
}
 8005e04:	e2f7      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1c:	d112      	bne.n	8005e44 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f005 fe00 	bl	800ba42 <USB_HC_Halt>
}
 8005e42:	e2d8      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d140      	bne.n	8005edc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	212c      	movs	r1, #44	; 0x2c
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	4413      	add	r3, r2
 8005e66:	335c      	adds	r3, #92	; 0x5c
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d111      	bne.n	8005ea6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	212c      	movs	r1, #44	; 0x2c
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	333d      	adds	r3, #61	; 0x3d
 8005e90:	2201      	movs	r2, #1
 8005e92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2340      	movs	r3, #64	; 0x40
 8005ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	212c      	movs	r1, #44	; 0x2c
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3361      	adds	r3, #97	; 0x61
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f005 fdb4 	bl	800ba42 <USB_HC_Halt>
}
 8005eda:	e28c      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d12c      	bne.n	8005f4c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	212c      	movs	r1, #44	; 0x2c
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	4413      	add	r3, r2
 8005efe:	3361      	adds	r3, #97	; 0x61
 8005f00:	2204      	movs	r2, #4
 8005f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	212c      	movs	r1, #44	; 0x2c
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	333d      	adds	r3, #61	; 0x3d
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	212c      	movs	r1, #44	; 0x2c
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	335c      	adds	r3, #92	; 0x5c
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f005 fd85 	bl	800ba42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	6093      	str	r3, [r2, #8]
}
 8005f4a:	e254      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d11a      	bne.n	8005f98 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	461a      	mov	r2, r3
 8005f70:	2308      	movs	r3, #8
 8005f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	3361      	adds	r3, #97	; 0x61
 8005f82:	2205      	movs	r2, #5
 8005f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f005 fd56 	bl	800ba42 <USB_HC_Halt>
}
 8005f96:	e22e      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d140      	bne.n	8006030 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	335c      	adds	r3, #92	; 0x5c
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	212c      	movs	r1, #44	; 0x2c
 8005fc6:	fb01 f303 	mul.w	r3, r1, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	3361      	adds	r3, #97	; 0x61
 8005fce:	2203      	movs	r2, #3
 8005fd0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	333d      	adds	r3, #61	; 0x3d
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d112      	bne.n	800600c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	212c      	movs	r1, #44	; 0x2c
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	333c      	adds	r3, #60	; 0x3c
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d108      	bne.n	800600c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	212c      	movs	r1, #44	; 0x2c
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	333d      	adds	r3, #61	; 0x3d
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f005 fd13 	bl	800ba42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006028:	461a      	mov	r2, r3
 800602a:	2310      	movs	r3, #16
 800602c:	6093      	str	r3, [r2, #8]
}
 800602e:	e1e2      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d164      	bne.n	8006110 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d111      	bne.n	8006072 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	212c      	movs	r1, #44	; 0x2c
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	3361      	adds	r3, #97	; 0x61
 800605c:	2206      	movs	r2, #6
 800605e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f005 fce9 	bl	800ba42 <USB_HC_Halt>
 8006070:	e044      	b.n	80060fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	212c      	movs	r1, #44	; 0x2c
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	335c      	adds	r3, #92	; 0x5c
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	202c      	movs	r0, #44	; 0x2c
 800608a:	fb00 f303 	mul.w	r3, r0, r3
 800608e:	440b      	add	r3, r1
 8006090:	335c      	adds	r3, #92	; 0x5c
 8006092:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	212c      	movs	r1, #44	; 0x2c
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	335c      	adds	r3, #92	; 0x5c
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d920      	bls.n	80060ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	212c      	movs	r1, #44	; 0x2c
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	335c      	adds	r3, #92	; 0x5c
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	212c      	movs	r1, #44	; 0x2c
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	3360      	adds	r3, #96	; 0x60
 80060c8:	2204      	movs	r2, #4
 80060ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	b2d9      	uxtb	r1, r3
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	202c      	movs	r0, #44	; 0x2c
 80060d6:	fb00 f303 	mul.w	r3, r0, r3
 80060da:	4413      	add	r3, r2
 80060dc:	3360      	adds	r3, #96	; 0x60
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f013 fa2c 	bl	8019540 <HAL_HCD_HC_NotifyURBChange_Callback>
 80060e8:	e008      	b.n	80060fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	212c      	movs	r1, #44	; 0x2c
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	4413      	add	r3, r2
 80060f6:	3360      	adds	r3, #96	; 0x60
 80060f8:	2202      	movs	r2, #2
 80060fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	461a      	mov	r2, r3
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	6093      	str	r3, [r2, #8]
}
 800610e:	e172      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006126:	d11b      	bne.n	8006160 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	212c      	movs	r1, #44	; 0x2c
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3361      	adds	r3, #97	; 0x61
 8006136:	2208      	movs	r2, #8
 8006138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f005 fc7c 	bl	800ba42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	461a      	mov	r2, r3
 8006158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615c:	6093      	str	r3, [r2, #8]
}
 800615e:	e14a      	b.n	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b02      	cmp	r3, #2
 8006174:	f040 813f 	bne.w	80063f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	212c      	movs	r1, #44	; 0x2c
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3361      	adds	r3, #97	; 0x61
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d17d      	bne.n	8006288 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	212c      	movs	r1, #44	; 0x2c
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	3360      	adds	r3, #96	; 0x60
 800619a:	2201      	movs	r2, #1
 800619c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	212c      	movs	r1, #44	; 0x2c
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	333f      	adds	r3, #63	; 0x3f
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d00a      	beq.n	80061c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	212c      	movs	r1, #44	; 0x2c
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	4413      	add	r3, r2
 80061be:	333f      	adds	r3, #63	; 0x3f
 80061c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	f040 8100 	bne.w	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d113      	bne.n	80061f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	212c      	movs	r1, #44	; 0x2c
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3355      	adds	r3, #85	; 0x55
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f083 0301 	eor.w	r3, r3, #1
 80061e4:	b2d8      	uxtb	r0, r3
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	212c      	movs	r1, #44	; 0x2c
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	3355      	adds	r3, #85	; 0x55
 80061f4:	4602      	mov	r2, r0
 80061f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 80e3 	bne.w	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	212c      	movs	r1, #44	; 0x2c
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	4413      	add	r3, r2
 800620e:	334c      	adds	r3, #76	; 0x4c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80d8 	beq.w	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	212c      	movs	r1, #44	; 0x2c
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	334c      	adds	r3, #76	; 0x4c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	202c      	movs	r0, #44	; 0x2c
 800622e:	fb00 f202 	mul.w	r2, r0, r2
 8006232:	440a      	add	r2, r1
 8006234:	3240      	adds	r2, #64	; 0x40
 8006236:	8812      	ldrh	r2, [r2, #0]
 8006238:	4413      	add	r3, r2
 800623a:	3b01      	subs	r3, #1
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	202c      	movs	r0, #44	; 0x2c
 8006242:	fb00 f202 	mul.w	r2, r0, r2
 8006246:	440a      	add	r2, r1
 8006248:	3240      	adds	r2, #64	; 0x40
 800624a:	8812      	ldrh	r2, [r2, #0]
 800624c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80b5 	beq.w	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	212c      	movs	r1, #44	; 0x2c
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	4413      	add	r3, r2
 800626a:	3355      	adds	r3, #85	; 0x55
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f083 0301 	eor.w	r3, r3, #1
 8006272:	b2d8      	uxtb	r0, r3
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	212c      	movs	r1, #44	; 0x2c
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	3355      	adds	r3, #85	; 0x55
 8006282:	4602      	mov	r2, r0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e09f      	b.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	212c      	movs	r1, #44	; 0x2c
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	4413      	add	r3, r2
 8006294:	3361      	adds	r3, #97	; 0x61
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b03      	cmp	r3, #3
 800629a:	d109      	bne.n	80062b0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	3360      	adds	r3, #96	; 0x60
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e08b      	b.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	212c      	movs	r1, #44	; 0x2c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	3361      	adds	r3, #97	; 0x61
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d109      	bne.n	80062d8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	212c      	movs	r1, #44	; 0x2c
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	3360      	adds	r3, #96	; 0x60
 80062d2:	2202      	movs	r2, #2
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e077      	b.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	212c      	movs	r1, #44	; 0x2c
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	3361      	adds	r3, #97	; 0x61
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d109      	bne.n	8006300 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	212c      	movs	r1, #44	; 0x2c
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	3360      	adds	r3, #96	; 0x60
 80062fa:	2205      	movs	r2, #5
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e063      	b.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	212c      	movs	r1, #44	; 0x2c
 8006306:	fb01 f303 	mul.w	r3, r1, r3
 800630a:	4413      	add	r3, r2
 800630c:	3361      	adds	r3, #97	; 0x61
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b06      	cmp	r3, #6
 8006312:	d009      	beq.n	8006328 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	212c      	movs	r1, #44	; 0x2c
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	4413      	add	r3, r2
 8006320:	3361      	adds	r3, #97	; 0x61
 8006322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006324:	2b08      	cmp	r3, #8
 8006326:	d14f      	bne.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	212c      	movs	r1, #44	; 0x2c
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	335c      	adds	r3, #92	; 0x5c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	202c      	movs	r0, #44	; 0x2c
 8006340:	fb00 f303 	mul.w	r3, r0, r3
 8006344:	440b      	add	r3, r1
 8006346:	335c      	adds	r3, #92	; 0x5c
 8006348:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	212c      	movs	r1, #44	; 0x2c
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	335c      	adds	r3, #92	; 0x5c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d912      	bls.n	8006384 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	212c      	movs	r1, #44	; 0x2c
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	335c      	adds	r3, #92	; 0x5c
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	212c      	movs	r1, #44	; 0x2c
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	4413      	add	r3, r2
 800637c:	3360      	adds	r3, #96	; 0x60
 800637e:	2204      	movs	r2, #4
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e021      	b.n	80063c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	212c      	movs	r1, #44	; 0x2c
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	3360      	adds	r3, #96	; 0x60
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	461a      	mov	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d4:	461a      	mov	r2, r3
 80063d6:	2302      	movs	r3, #2
 80063d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	b2d9      	uxtb	r1, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	202c      	movs	r0, #44	; 0x2c
 80063e4:	fb00 f303 	mul.w	r3, r0, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	3360      	adds	r3, #96	; 0x60
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f013 f8a5 	bl	8019540 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80063f6:	bf00      	nop
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b08a      	sub	sp, #40	; 0x28
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	0c5b      	lsrs	r3, r3, #17
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006432:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d004      	beq.n	8006444 <HCD_RXQLVL_IRQHandler+0x46>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b05      	cmp	r3, #5
 800643e:	f000 80a9 	beq.w	8006594 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006442:	e0aa      	b.n	800659a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80a6 	beq.w	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	212c      	movs	r1, #44	; 0x2c
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	4413      	add	r3, r2
 8006458:	3344      	adds	r3, #68	; 0x44
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 809b 	beq.w	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	212c      	movs	r1, #44	; 0x2c
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4413      	add	r3, r2
 800646e:	3350      	adds	r3, #80	; 0x50
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	441a      	add	r2, r3
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	202c      	movs	r0, #44	; 0x2c
 800647c:	fb00 f303 	mul.w	r3, r0, r3
 8006480:	440b      	add	r3, r1
 8006482:	334c      	adds	r3, #76	; 0x4c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d87a      	bhi.n	8006580 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	212c      	movs	r1, #44	; 0x2c
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	3344      	adds	r3, #68	; 0x44
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	b292      	uxth	r2, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	f004 fe24 	bl	800b0f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	212c      	movs	r1, #44	; 0x2c
 80064ae:	fb01 f303 	mul.w	r3, r1, r3
 80064b2:	4413      	add	r3, r2
 80064b4:	3344      	adds	r3, #68	; 0x44
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	441a      	add	r2, r3
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	202c      	movs	r0, #44	; 0x2c
 80064c2:	fb00 f303 	mul.w	r3, r0, r3
 80064c6:	440b      	add	r3, r1
 80064c8:	3344      	adds	r3, #68	; 0x44
 80064ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	212c      	movs	r1, #44	; 0x2c
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	3350      	adds	r3, #80	; 0x50
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	441a      	add	r2, r3
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	202c      	movs	r0, #44	; 0x2c
 80064e6:	fb00 f303 	mul.w	r3, r0, r3
 80064ea:	440b      	add	r3, r1
 80064ec:	3350      	adds	r3, #80	; 0x50
 80064ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	0cdb      	lsrs	r3, r3, #19
 8006500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006504:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	212c      	movs	r1, #44	; 0x2c
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	3340      	adds	r3, #64	; 0x40
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4293      	cmp	r3, r2
 800651c:	d13c      	bne.n	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d039      	beq.n	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	4413      	add	r3, r2
 800652c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800653a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006542:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	212c      	movs	r1, #44	; 0x2c
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	4413      	add	r3, r2
 8006562:	3354      	adds	r3, #84	; 0x54
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f083 0301 	eor.w	r3, r3, #1
 800656a:	b2d8      	uxtb	r0, r3
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	212c      	movs	r1, #44	; 0x2c
 8006572:	fb01 f303 	mul.w	r3, r1, r3
 8006576:	4413      	add	r3, r2
 8006578:	3354      	adds	r3, #84	; 0x54
 800657a:	4602      	mov	r2, r0
 800657c:	701a      	strb	r2, [r3, #0]
      break;
 800657e:	e00b      	b.n	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	212c      	movs	r1, #44	; 0x2c
 8006586:	fb01 f303 	mul.w	r3, r1, r3
 800658a:	4413      	add	r3, r2
 800658c:	3360      	adds	r3, #96	; 0x60
 800658e:	2204      	movs	r2, #4
 8006590:	701a      	strb	r2, [r3, #0]
      break;
 8006592:	e001      	b.n	8006598 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006598:	bf00      	nop
  }
}
 800659a:	bf00      	nop
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d10b      	bne.n	80065f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d102      	bne.n	80065ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f012 ff8f 	bl	8019508 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f043 0302 	orr.w	r3, r3, #2
 80065f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d132      	bne.n	8006662 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f043 0308 	orr.w	r3, r3, #8
 8006602:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b04      	cmp	r3, #4
 800660c:	d126      	bne.n	800665c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d113      	bne.n	800663e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800661c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006620:	d106      	bne.n	8006630 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2102      	movs	r1, #2
 8006628:	4618      	mov	r0, r3
 800662a:	f004 fecf 	bl	800b3cc <USB_InitFSLSPClkSel>
 800662e:	e011      	b.n	8006654 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2101      	movs	r1, #1
 8006636:	4618      	mov	r0, r3
 8006638:	f004 fec8 	bl	800b3cc <USB_InitFSLSPClkSel>
 800663c:	e00a      	b.n	8006654 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664c:	461a      	mov	r2, r3
 800664e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006652:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f012 ff85 	bl	8019564 <HAL_HCD_PortEnabled_Callback>
 800665a:	e002      	b.n	8006662 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f012 ff8f 	bl	8019580 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b20      	cmp	r3, #32
 800666a:	d103      	bne.n	8006674 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f043 0320 	orr.w	r3, r3, #32
 8006672:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800667a:	461a      	mov	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6013      	str	r3, [r2, #0]
}
 8006680:	bf00      	nop
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e12b      	b.n	80068f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fc fd12 	bl	80030d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2224      	movs	r2, #36	; 0x24
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066ec:	f001 ffe2 	bl	80086b4 <HAL_RCC_GetPCLK1Freq>
 80066f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4a81      	ldr	r2, [pc, #516]	; (80068fc <HAL_I2C_Init+0x274>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d807      	bhi.n	800670c <HAL_I2C_Init+0x84>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4a80      	ldr	r2, [pc, #512]	; (8006900 <HAL_I2C_Init+0x278>)
 8006700:	4293      	cmp	r3, r2
 8006702:	bf94      	ite	ls
 8006704:	2301      	movls	r3, #1
 8006706:	2300      	movhi	r3, #0
 8006708:	b2db      	uxtb	r3, r3
 800670a:	e006      	b.n	800671a <HAL_I2C_Init+0x92>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a7d      	ldr	r2, [pc, #500]	; (8006904 <HAL_I2C_Init+0x27c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	bf94      	ite	ls
 8006714:	2301      	movls	r3, #1
 8006716:	2300      	movhi	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0e7      	b.n	80068f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4a78      	ldr	r2, [pc, #480]	; (8006908 <HAL_I2C_Init+0x280>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	0c9b      	lsrs	r3, r3, #18
 800672c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a6a      	ldr	r2, [pc, #424]	; (80068fc <HAL_I2C_Init+0x274>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d802      	bhi.n	800675c <HAL_I2C_Init+0xd4>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	3301      	adds	r3, #1
 800675a:	e009      	b.n	8006770 <HAL_I2C_Init+0xe8>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	4a69      	ldr	r2, [pc, #420]	; (800690c <HAL_I2C_Init+0x284>)
 8006768:	fba2 2303 	umull	r2, r3, r2, r3
 800676c:	099b      	lsrs	r3, r3, #6
 800676e:	3301      	adds	r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	430b      	orrs	r3, r1
 8006776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	495c      	ldr	r1, [pc, #368]	; (80068fc <HAL_I2C_Init+0x274>)
 800678c:	428b      	cmp	r3, r1
 800678e:	d819      	bhi.n	80067c4 <HAL_I2C_Init+0x13c>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1e59      	subs	r1, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	fbb1 f3f3 	udiv	r3, r1, r3
 800679e:	1c59      	adds	r1, r3, #1
 80067a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067a4:	400b      	ands	r3, r1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_I2C_Init+0x138>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1e59      	subs	r1, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b8:	3301      	adds	r3, #1
 80067ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067be:	e051      	b.n	8006864 <HAL_I2C_Init+0x1dc>
 80067c0:	2304      	movs	r3, #4
 80067c2:	e04f      	b.n	8006864 <HAL_I2C_Init+0x1dc>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d111      	bne.n	80067f0 <HAL_I2C_Init+0x168>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1e58      	subs	r0, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6859      	ldr	r1, [r3, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	440b      	add	r3, r1
 80067da:	fbb0 f3f3 	udiv	r3, r0, r3
 80067de:	3301      	adds	r3, #1
 80067e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e012      	b.n	8006816 <HAL_I2C_Init+0x18e>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	1e58      	subs	r0, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	0099      	lsls	r1, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	fbb0 f3f3 	udiv	r3, r0, r3
 8006806:	3301      	adds	r3, #1
 8006808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_Init+0x196>
 800681a:	2301      	movs	r3, #1
 800681c:	e022      	b.n	8006864 <HAL_I2C_Init+0x1dc>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10e      	bne.n	8006844 <HAL_I2C_Init+0x1bc>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1e58      	subs	r0, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	440b      	add	r3, r1
 8006834:	fbb0 f3f3 	udiv	r3, r0, r3
 8006838:	3301      	adds	r3, #1
 800683a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800683e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006842:	e00f      	b.n	8006864 <HAL_I2C_Init+0x1dc>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	1e58      	subs	r0, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6859      	ldr	r1, [r3, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	0099      	lsls	r1, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	fbb0 f3f3 	udiv	r3, r0, r3
 800685a:	3301      	adds	r3, #1
 800685c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	6809      	ldr	r1, [r1, #0]
 8006868:	4313      	orrs	r3, r2
 800686a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6911      	ldr	r1, [r2, #16]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	68d2      	ldr	r2, [r2, #12]
 800689e:	4311      	orrs	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695a      	ldr	r2, [r3, #20]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	000186a0 	.word	0x000186a0
 8006900:	001e847f 	.word	0x001e847f
 8006904:	003d08ff 	.word	0x003d08ff
 8006908:	431bde83 	.word	0x431bde83
 800690c:	10624dd3 	.word	0x10624dd3

08006910 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	461a      	mov	r2, r3
 800691c:	460b      	mov	r3, r1
 800691e:	817b      	strh	r3, [r7, #10]
 8006920:	4613      	mov	r3, r2
 8006922:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006924:	f7fd f97a 	bl	8003c1c <HAL_GetTick>
 8006928:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b20      	cmp	r3, #32
 8006934:	f040 80e0 	bne.w	8006af8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2319      	movs	r3, #25
 800693e:	2201      	movs	r2, #1
 8006940:	4970      	ldr	r1, [pc, #448]	; (8006b04 <HAL_I2C_Master_Transmit+0x1f4>)
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fc58 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
 8006950:	e0d3      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_I2C_Master_Transmit+0x50>
 800695c:	2302      	movs	r3, #2
 800695e:	e0cc      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d007      	beq.n	8006986 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2221      	movs	r2, #33	; 0x21
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2210      	movs	r2, #16
 80069a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	893a      	ldrh	r2, [r7, #8]
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a50      	ldr	r2, [pc, #320]	; (8006b08 <HAL_I2C_Master_Transmit+0x1f8>)
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069c8:	8979      	ldrh	r1, [r7, #10]
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fac2 	bl	8006f58 <I2C_MasterRequestWrite>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e08d      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80069f4:	e066      	b.n	8006ac4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	6a39      	ldr	r1, [r7, #32]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fcd2 	bl	80073a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00d      	beq.n	8006a22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d107      	bne.n	8006a1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e06b      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d11b      	bne.n	8006a98 <HAL_I2C_Master_Transmit+0x188>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d017      	beq.n	8006a98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	6a39      	ldr	r1, [r7, #32]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fcc2 	bl	8007426 <I2C_WaitOnBTFFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00d      	beq.n	8006ac4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d107      	bne.n	8006ac0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006abe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e01a      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d194      	bne.n	80069f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e000      	b.n	8006afa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006af8:	2302      	movs	r3, #2
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	00100002 	.word	0x00100002
 8006b08:	ffff0000 	.word	0xffff0000

08006b0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08c      	sub	sp, #48	; 0x30
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	461a      	mov	r2, r3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	817b      	strh	r3, [r7, #10]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b20:	f7fd f87c 	bl	8003c1c <HAL_GetTick>
 8006b24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	f040 820b 	bne.w	8006f4a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	2319      	movs	r3, #25
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	497c      	ldr	r1, [pc, #496]	; (8006d30 <HAL_I2C_Master_Receive+0x224>)
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fb5a 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e1fe      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_I2C_Master_Receive+0x50>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e1f7      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d007      	beq.n	8006b82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2222      	movs	r2, #34	; 0x22
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	893a      	ldrh	r2, [r7, #8]
 8006bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a5c      	ldr	r2, [pc, #368]	; (8006d34 <HAL_I2C_Master_Receive+0x228>)
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bc4:	8979      	ldrh	r1, [r7, #10]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa46 	bl	800705c <I2C_MasterRequestRead>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e1b8      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d113      	bne.n	8006c0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be2:	2300      	movs	r3, #0
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e18c      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d11b      	bne.n	8006c4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	e16c      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d11b      	bne.n	8006c8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c72:	2300      	movs	r3, #0
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	e14c      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cb0:	e138      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	f200 80f1 	bhi.w	8006e9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d123      	bne.n	8006d0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fbed 	bl	80074a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e139      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d0a:	e10b      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d14e      	bne.n	8006db2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4906      	ldr	r1, [pc, #24]	; (8006d38 <HAL_I2C_Master_Receive+0x22c>)
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 fa6a 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e10e      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
 8006d2e:	bf00      	nop
 8006d30:	00100002 	.word	0x00100002
 8006d34:	ffff0000 	.word	0xffff0000
 8006d38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006db0:	e0b8      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	2200      	movs	r2, #0
 8006dba:	4966      	ldr	r1, [pc, #408]	; (8006f54 <HAL_I2C_Master_Receive+0x448>)
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fa1b 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e0bf      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	2200      	movs	r2, #0
 8006e16:	494f      	ldr	r1, [pc, #316]	; (8006f54 <HAL_I2C_Master_Receive+0x448>)
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f9ed 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e091      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e9c:	e042      	b.n	8006f24 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fb00 	bl	80074a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e04c      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d118      	bne.n	8006f24 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f aec2 	bne.w	8006cb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e000      	b.n	8006f4c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f4a:	2302      	movs	r3, #2
  }
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3728      	adds	r7, #40	; 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	00010004 	.word	0x00010004

08006f58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	460b      	mov	r3, r1
 8006f66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d006      	beq.n	8006f82 <I2C_MasterRequestWrite+0x2a>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d003      	beq.n	8006f82 <I2C_MasterRequestWrite+0x2a>
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f80:	d108      	bne.n	8006f94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e00b      	b.n	8006fac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	2b12      	cmp	r3, #18
 8006f9a:	d107      	bne.n	8006fac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006faa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f91d 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd2:	d103      	bne.n	8006fdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e035      	b.n	800704c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe8:	d108      	bne.n	8006ffc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fea:	897b      	ldrh	r3, [r7, #10]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ff8:	611a      	str	r2, [r3, #16]
 8006ffa:	e01b      	b.n	8007034 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ffc:	897b      	ldrh	r3, [r7, #10]
 8006ffe:	11db      	asrs	r3, r3, #7
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f003 0306 	and.w	r3, r3, #6
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f063 030f 	orn	r3, r3, #15
 800700c:	b2da      	uxtb	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	490e      	ldr	r1, [pc, #56]	; (8007054 <I2C_MasterRequestWrite+0xfc>)
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f943 	bl	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e010      	b.n	800704c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800702a:	897b      	ldrh	r3, [r7, #10]
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4907      	ldr	r1, [pc, #28]	; (8007058 <I2C_MasterRequestWrite+0x100>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f933 	bl	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	00010008 	.word	0x00010008
 8007058:	00010002 	.word	0x00010002

0800705c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	460b      	mov	r3, r1
 800706a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007080:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d006      	beq.n	8007096 <I2C_MasterRequestRead+0x3a>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d003      	beq.n	8007096 <I2C_MasterRequestRead+0x3a>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007094:	d108      	bne.n	80070a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e00b      	b.n	80070c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	2b11      	cmp	r3, #17
 80070ae:	d107      	bne.n	80070c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f893 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d103      	bne.n	80070f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e079      	b.n	80071e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fc:	d108      	bne.n	8007110 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f043 0301 	orr.w	r3, r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	611a      	str	r2, [r3, #16]
 800710e:	e05f      	b.n	80071d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007110:	897b      	ldrh	r3, [r7, #10]
 8007112:	11db      	asrs	r3, r3, #7
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f063 030f 	orn	r3, r3, #15
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	4930      	ldr	r1, [pc, #192]	; (80071f0 <I2C_MasterRequestRead+0x194>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f8b9 	bl	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e054      	b.n	80071e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800713e:	897b      	ldrh	r3, [r7, #10]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4929      	ldr	r1, [pc, #164]	; (80071f4 <I2C_MasterRequestRead+0x198>)
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f8a9 	bl	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e044      	b.n	80071e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007182:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f831 	bl	80071f8 <I2C_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071aa:	d103      	bne.n	80071b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e017      	b.n	80071e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80071b8:	897b      	ldrh	r3, [r7, #10]
 80071ba:	11db      	asrs	r3, r3, #7
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0306 	and.w	r3, r3, #6
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f063 030e 	orn	r3, r3, #14
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4907      	ldr	r1, [pc, #28]	; (80071f4 <I2C_MasterRequestRead+0x198>)
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f865 	bl	80072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	00010008 	.word	0x00010008
 80071f4:	00010002 	.word	0x00010002

080071f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007208:	e025      	b.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d021      	beq.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007212:	f7fc fd03 	bl	8003c1c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d116      	bne.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f043 0220 	orr.w	r2, r3, #32
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e023      	b.n	800729e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	d10d      	bne.n	800727c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	43da      	mvns	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	e00c      	b.n	8007296 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	43da      	mvns	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4013      	ands	r3, r2
 8007288:	b29b      	uxth	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	bf0c      	ite	eq
 800728e:	2301      	moveq	r3, #1
 8007290:	2300      	movne	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	461a      	mov	r2, r3
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	429a      	cmp	r2, r3
 800729a:	d0b6      	beq.n	800720a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072b4:	e051      	b.n	800735a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d123      	bne.n	800730e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e046      	b.n	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007314:	d021      	beq.n	800735a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007316:	f7fc fc81 	bl	8003c1c <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d302      	bcc.n	800732c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d116      	bne.n	800735a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e020      	b.n	800739c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d10c      	bne.n	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	43da      	mvns	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	e00b      	b.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	43da      	mvns	r2, r3
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	4013      	ands	r3, r2
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d18d      	bne.n	80072b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073b0:	e02d      	b.n	800740e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f8ce 	bl	8007554 <I2C_IsAcknowledgeFailed>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e02d      	b.n	800741e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d021      	beq.n	800740e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ca:	f7fc fc27 	bl	8003c1c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d302      	bcc.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d116      	bne.n	800740e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0220 	orr.w	r2, r3, #32
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e007      	b.n	800741e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d1ca      	bne.n	80073b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007432:	e02d      	b.n	8007490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f88d 	bl	8007554 <I2C_IsAcknowledgeFailed>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e02d      	b.n	80074a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d021      	beq.n	8007490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744c:	f7fc fbe6 	bl	8003c1c <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	d302      	bcc.n	8007462 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d116      	bne.n	8007490 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2220      	movs	r2, #32
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	f043 0220 	orr.w	r2, r3, #32
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e007      	b.n	80074a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d1ca      	bne.n	8007434 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074b4:	e042      	b.n	800753c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d119      	bne.n	80074f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0210 	mvn.w	r2, #16
 80074cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e029      	b.n	800754c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f8:	f7fc fb90 	bl	8003c1c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d116      	bne.n	800753c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	f043 0220 	orr.w	r2, r3, #32
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e007      	b.n	800754c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d1b5      	bne.n	80074b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d11b      	bne.n	80075a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007574:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	f043 0204 	orr.w	r2, r3, #4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d129      	bne.n	800761c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0210 	bic.w	r2, r2, #16
 80075ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b20      	cmp	r3, #32
 8007642:	d12a      	bne.n	800769a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2224      	movs	r2, #36	; 0x24
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007664:	89fb      	ldrh	r3, [r7, #14]
 8007666:	f023 030f 	bic.w	r3, r3, #15
 800766a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	4313      	orrs	r3, r2
 8007674:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	89fa      	ldrh	r2, [r7, #14]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f042 0201 	orr.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e000      	b.n	800769c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e0bf      	b.n	800783a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fb fd6c 	bl	80031ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80076ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6999      	ldr	r1, [r3, #24]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007700:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6899      	ldr	r1, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b4a      	ldr	r3, [pc, #296]	; (8007844 <HAL_LTDC_Init+0x19c>)
 800771c:	400b      	ands	r3, r1
 800771e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6899      	ldr	r1, [r3, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68d9      	ldr	r1, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	4b3e      	ldr	r3, [pc, #248]	; (8007844 <HAL_LTDC_Init+0x19c>)
 800774a:	400b      	ands	r3, r1
 800774c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68d9      	ldr	r1, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1a      	ldr	r2, [r3, #32]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6919      	ldr	r1, [r3, #16]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b33      	ldr	r3, [pc, #204]	; (8007844 <HAL_LTDC_Init+0x19c>)
 8007778:	400b      	ands	r3, r1
 800777a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6919      	ldr	r1, [r3, #16]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6959      	ldr	r1, [r3, #20]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <HAL_LTDC_Init+0x19c>)
 80077a6:	400b      	ands	r3, r1
 80077a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6959      	ldr	r1, [r3, #20]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80077ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0206 	orr.w	r2, r2, #6
 8007816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	f000f800 	.word	0xf000f800

08007848 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d023      	beq.n	80078b2 <HAL_LTDC_IRQHandler+0x6a>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01e      	beq.n	80078b2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0204 	bic.w	r2, r2, #4
 8007882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2204      	movs	r2, #4
 800788a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007892:	f043 0201 	orr.w	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f86f 	bl	8007990 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d023      	beq.n	8007904 <HAL_LTDC_IRQHandler+0xbc>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d01e      	beq.n	8007904 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0202 	bic.w	r2, r2, #2
 80078d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2202      	movs	r2, #2
 80078dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078e4:	f043 0202 	orr.w	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2204      	movs	r2, #4
 80078f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f846 	bl	8007990 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01b      	beq.n	8007946 <HAL_LTDC_IRQHandler+0xfe>
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d016      	beq.n	8007946 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f011 fcd5 	bl	80192f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <HAL_LTDC_IRQHandler+0x140>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0208 	bic.w	r2, r2, #8
 8007968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2208      	movs	r2, #8
 8007970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f80e 	bl	80079a4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80079b8:	b5b0      	push	{r4, r5, r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_LTDC_ConfigLayer+0x1a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e02c      	b.n	8007a2c <HAL_LTDC_ConfigLayer+0x74>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2134      	movs	r1, #52	; 0x34
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	4413      	add	r3, r2
 80079ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f849 	bl	8007aa4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2201      	movs	r2, #1
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bdb0      	pop	{r4, r5, r7, pc}

08007a34 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_LTDC_ProgramLineEvent+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e023      	b.n	8007a94 <HAL_LTDC_ProgramLineEvent+0x60>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0201 	bic.w	r2, r2, #1
 8007a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007a6c:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40016800 	.word	0x40016800

08007aa4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	0c1b      	lsrs	r3, r3, #16
 8007abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac0:	4413      	add	r3, r2
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	01db      	lsls	r3, r3, #7
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3384      	adds	r3, #132	; 0x84
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	4611      	mov	r1, r2
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	01d2      	lsls	r2, r2, #7
 8007ae0:	440a      	add	r2, r1
 8007ae2:	3284      	adds	r2, #132	; 0x84
 8007ae4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ae8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	0c1b      	lsrs	r3, r3, #16
 8007af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007afa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007afc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4619      	mov	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	01db      	lsls	r3, r3, #7
 8007b08:	440b      	add	r3, r1
 8007b0a:	3384      	adds	r3, #132	; 0x84
 8007b0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007b12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b22:	4413      	add	r3, r2
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	01db      	lsls	r3, r3, #7
 8007b32:	4413      	add	r3, r2
 8007b34:	3384      	adds	r3, #132	; 0x84
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	01d2      	lsls	r2, r2, #7
 8007b42:	440a      	add	r2, r1
 8007b44:	3284      	adds	r2, #132	; 0x84
 8007b46:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b5a:	4413      	add	r3, r2
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	01db      	lsls	r3, r3, #7
 8007b68:	440b      	add	r3, r1
 8007b6a:	3384      	adds	r3, #132	; 0x84
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	01db      	lsls	r3, r3, #7
 8007b7e:	4413      	add	r3, r2
 8007b80:	3384      	adds	r3, #132	; 0x84
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	6812      	ldr	r2, [r2, #0]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	01d2      	lsls	r2, r2, #7
 8007b8e:	440a      	add	r2, r1
 8007b90:	3284      	adds	r2, #132	; 0x84
 8007b92:	f023 0307 	bic.w	r3, r3, #7
 8007b96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	01db      	lsls	r3, r3, #7
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3384      	adds	r3, #132	; 0x84
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	061b      	lsls	r3, r3, #24
 8007bc8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3384      	adds	r3, #132	; 0x84
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	01db      	lsls	r3, r3, #7
 8007be4:	4413      	add	r3, r2
 8007be6:	3384      	adds	r3, #132	; 0x84
 8007be8:	461a      	mov	r2, r3
 8007bea:	2300      	movs	r3, #0
 8007bec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	01db      	lsls	r3, r3, #7
 8007c08:	440b      	add	r3, r1
 8007c0a:	3384      	adds	r3, #132	; 0x84
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	01db      	lsls	r3, r3, #7
 8007c1e:	4413      	add	r3, r2
 8007c20:	3384      	adds	r3, #132	; 0x84
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	01d2      	lsls	r2, r2, #7
 8007c2e:	440a      	add	r2, r1
 8007c30:	3284      	adds	r2, #132	; 0x84
 8007c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	01db      	lsls	r3, r3, #7
 8007c42:	4413      	add	r3, r2
 8007c44:	3384      	adds	r3, #132	; 0x84
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	01db      	lsls	r3, r3, #7
 8007c58:	4413      	add	r3, r2
 8007c5a:	3384      	adds	r3, #132	; 0x84
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	4611      	mov	r1, r2
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	01d2      	lsls	r2, r2, #7
 8007c68:	440a      	add	r2, r1
 8007c6a:	3284      	adds	r2, #132	; 0x84
 8007c6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007c70:	f023 0307 	bic.w	r3, r3, #7
 8007c74:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	69da      	ldr	r2, [r3, #28]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	68f9      	ldr	r1, [r7, #12]
 8007c80:	6809      	ldr	r1, [r1, #0]
 8007c82:	4608      	mov	r0, r1
 8007c84:	6879      	ldr	r1, [r7, #4]
 8007c86:	01c9      	lsls	r1, r1, #7
 8007c88:	4401      	add	r1, r0
 8007c8a:	3184      	adds	r1, #132	; 0x84
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	01db      	lsls	r3, r3, #7
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3384      	adds	r3, #132	; 0x84
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	01db      	lsls	r3, r3, #7
 8007caa:	4413      	add	r3, r2
 8007cac:	3384      	adds	r3, #132	; 0x84
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	01db      	lsls	r3, r3, #7
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3384      	adds	r3, #132	; 0x84
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007cd2:	2304      	movs	r3, #4
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	e01b      	b.n	8007d10 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d102      	bne.n	8007ce6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e014      	b.n	8007d10 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d00b      	beq.n	8007d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d007      	beq.n	8007d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d003      	beq.n	8007d06 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007d02:	2b07      	cmp	r3, #7
 8007d04:	d102      	bne.n	8007d0c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007d06:	2302      	movs	r3, #2
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	e001      	b.n	8007d10 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	01db      	lsls	r3, r3, #7
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3384      	adds	r3, #132	; 0x84
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	6812      	ldr	r2, [r2, #0]
 8007d24:	4611      	mov	r1, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	01d2      	lsls	r2, r2, #7
 8007d2a:	440a      	add	r2, r1
 8007d2c:	3284      	adds	r2, #132	; 0x84
 8007d2e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007d32:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	1acb      	subs	r3, r1, r3
 8007d4a:	69f9      	ldr	r1, [r7, #28]
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6809      	ldr	r1, [r1, #0]
 8007d56:	4608      	mov	r0, r1
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	01c9      	lsls	r1, r1, #7
 8007d5c:	4401      	add	r1, r0
 8007d5e:	3184      	adds	r1, #132	; 0x84
 8007d60:	4313      	orrs	r3, r2
 8007d62:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	01db      	lsls	r3, r3, #7
 8007d6e:	4413      	add	r3, r2
 8007d70:	3384      	adds	r3, #132	; 0x84
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	6812      	ldr	r2, [r2, #0]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	01d2      	lsls	r2, r2, #7
 8007d7e:	440a      	add	r2, r1
 8007d80:	3284      	adds	r2, #132	; 0x84
 8007d82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	01db      	lsls	r3, r3, #7
 8007d96:	4413      	add	r3, r2
 8007d98:	3384      	adds	r3, #132	; 0x84
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	01db      	lsls	r3, r3, #7
 8007dac:	4413      	add	r3, r2
 8007dae:	3384      	adds	r3, #132	; 0x84
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	4611      	mov	r1, r2
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	01d2      	lsls	r2, r2, #7
 8007dbc:	440a      	add	r2, r1
 8007dbe:	3284      	adds	r2, #132	; 0x84
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	6013      	str	r3, [r2, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3724      	adds	r7, #36	; 0x24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
	...

08007dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e267      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d075      	beq.n	8007ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007df2:	4b88      	ldr	r3, [pc, #544]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 030c 	and.w	r3, r3, #12
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d00c      	beq.n	8007e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dfe:	4b85      	ldr	r3, [pc, #532]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d112      	bne.n	8007e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e0a:	4b82      	ldr	r3, [pc, #520]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e16:	d10b      	bne.n	8007e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e18:	4b7e      	ldr	r3, [pc, #504]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d05b      	beq.n	8007edc <HAL_RCC_OscConfig+0x108>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d157      	bne.n	8007edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e242      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e38:	d106      	bne.n	8007e48 <HAL_RCC_OscConfig+0x74>
 8007e3a:	4b76      	ldr	r3, [pc, #472]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a75      	ldr	r2, [pc, #468]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e01d      	b.n	8007e84 <HAL_RCC_OscConfig+0xb0>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e50:	d10c      	bne.n	8007e6c <HAL_RCC_OscConfig+0x98>
 8007e52:	4b70      	ldr	r3, [pc, #448]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a6f      	ldr	r2, [pc, #444]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	4b6d      	ldr	r3, [pc, #436]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a6c      	ldr	r2, [pc, #432]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	e00b      	b.n	8007e84 <HAL_RCC_OscConfig+0xb0>
 8007e6c:	4b69      	ldr	r3, [pc, #420]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a68      	ldr	r2, [pc, #416]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	4b66      	ldr	r3, [pc, #408]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a65      	ldr	r2, [pc, #404]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d013      	beq.n	8007eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e8c:	f7fb fec6 	bl	8003c1c <HAL_GetTick>
 8007e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e94:	f7fb fec2 	bl	8003c1c <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b64      	cmp	r3, #100	; 0x64
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e207      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ea6:	4b5b      	ldr	r3, [pc, #364]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0xc0>
 8007eb2:	e014      	b.n	8007ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb4:	f7fb feb2 	bl	8003c1c <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ebc:	f7fb feae 	bl	8003c1c <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b64      	cmp	r3, #100	; 0x64
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e1f3      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ece:	4b51      	ldr	r3, [pc, #324]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0xe8>
 8007eda:	e000      	b.n	8007ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d063      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eea:	4b4a      	ldr	r3, [pc, #296]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 030c 	and.w	r3, r3, #12
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ef6:	4b47      	ldr	r3, [pc, #284]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d11c      	bne.n	8007f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f02:	4b44      	ldr	r3, [pc, #272]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d116      	bne.n	8007f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f0e:	4b41      	ldr	r3, [pc, #260]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_RCC_OscConfig+0x152>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d001      	beq.n	8007f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e1c7      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f26:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	4937      	ldr	r1, [pc, #220]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f3a:	e03a      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f44:	4b34      	ldr	r3, [pc, #208]	; (8008018 <HAL_RCC_OscConfig+0x244>)
 8007f46:	2201      	movs	r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4a:	f7fb fe67 	bl	8003c1c <HAL_GetTick>
 8007f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f50:	e008      	b.n	8007f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f52:	f7fb fe63 	bl	8003c1c <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e1a8      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f64:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0f0      	beq.n	8007f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f70:	4b28      	ldr	r3, [pc, #160]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4925      	ldr	r1, [pc, #148]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]
 8007f84:	e015      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f86:	4b24      	ldr	r3, [pc, #144]	; (8008018 <HAL_RCC_OscConfig+0x244>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fb fe46 	bl	8003c1c <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f94:	f7fb fe42 	bl	8003c1c <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e187      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fa6:	4b1b      	ldr	r3, [pc, #108]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f0      	bne.n	8007f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d036      	beq.n	800802c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fc6:	4b15      	ldr	r3, [pc, #84]	; (800801c <HAL_RCC_OscConfig+0x248>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fcc:	f7fb fe26 	bl	8003c1c <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fd4:	f7fb fe22 	bl	8003c1c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e167      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <HAL_RCC_OscConfig+0x240>)
 8007fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x200>
 8007ff2:	e01b      	b.n	800802c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ff4:	4b09      	ldr	r3, [pc, #36]	; (800801c <HAL_RCC_OscConfig+0x248>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ffa:	f7fb fe0f 	bl	8003c1c <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008000:	e00e      	b.n	8008020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008002:	f7fb fe0b 	bl	8003c1c <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d907      	bls.n	8008020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e150      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
 8008014:	40023800 	.word	0x40023800
 8008018:	42470000 	.word	0x42470000
 800801c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008020:	4b88      	ldr	r3, [pc, #544]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1ea      	bne.n	8008002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8097 	beq.w	8008168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800803e:	4b81      	ldr	r3, [pc, #516]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10f      	bne.n	800806a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804a:	2300      	movs	r3, #0
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	4b7d      	ldr	r3, [pc, #500]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	4a7c      	ldr	r2, [pc, #496]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008058:	6413      	str	r3, [r2, #64]	; 0x40
 800805a:	4b7a      	ldr	r3, [pc, #488]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008062:	60bb      	str	r3, [r7, #8]
 8008064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800806a:	4b77      	ldr	r3, [pc, #476]	; (8008248 <HAL_RCC_OscConfig+0x474>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008072:	2b00      	cmp	r3, #0
 8008074:	d118      	bne.n	80080a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008076:	4b74      	ldr	r3, [pc, #464]	; (8008248 <HAL_RCC_OscConfig+0x474>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a73      	ldr	r2, [pc, #460]	; (8008248 <HAL_RCC_OscConfig+0x474>)
 800807c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008082:	f7fb fdcb 	bl	8003c1c <HAL_GetTick>
 8008086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008088:	e008      	b.n	800809c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800808a:	f7fb fdc7 	bl	8003c1c <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e10c      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800809c:	4b6a      	ldr	r3, [pc, #424]	; (8008248 <HAL_RCC_OscConfig+0x474>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d0f0      	beq.n	800808a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d106      	bne.n	80080be <HAL_RCC_OscConfig+0x2ea>
 80080b0:	4b64      	ldr	r3, [pc, #400]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	4a63      	ldr	r2, [pc, #396]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	6713      	str	r3, [r2, #112]	; 0x70
 80080bc:	e01c      	b.n	80080f8 <HAL_RCC_OscConfig+0x324>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d10c      	bne.n	80080e0 <HAL_RCC_OscConfig+0x30c>
 80080c6:	4b5f      	ldr	r3, [pc, #380]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	4a5e      	ldr	r2, [pc, #376]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080cc:	f043 0304 	orr.w	r3, r3, #4
 80080d0:	6713      	str	r3, [r2, #112]	; 0x70
 80080d2:	4b5c      	ldr	r3, [pc, #368]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	4a5b      	ldr	r2, [pc, #364]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080d8:	f043 0301 	orr.w	r3, r3, #1
 80080dc:	6713      	str	r3, [r2, #112]	; 0x70
 80080de:	e00b      	b.n	80080f8 <HAL_RCC_OscConfig+0x324>
 80080e0:	4b58      	ldr	r3, [pc, #352]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e4:	4a57      	ldr	r2, [pc, #348]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080e6:	f023 0301 	bic.w	r3, r3, #1
 80080ea:	6713      	str	r3, [r2, #112]	; 0x70
 80080ec:	4b55      	ldr	r3, [pc, #340]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f0:	4a54      	ldr	r2, [pc, #336]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80080f2:	f023 0304 	bic.w	r3, r3, #4
 80080f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d015      	beq.n	800812c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008100:	f7fb fd8c 	bl	8003c1c <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008106:	e00a      	b.n	800811e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008108:	f7fb fd88 	bl	8003c1c <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	f241 3288 	movw	r2, #5000	; 0x1388
 8008116:	4293      	cmp	r3, r2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e0cb      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800811e:	4b49      	ldr	r3, [pc, #292]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0ee      	beq.n	8008108 <HAL_RCC_OscConfig+0x334>
 800812a:	e014      	b.n	8008156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800812c:	f7fb fd76 	bl	8003c1c <HAL_GetTick>
 8008130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008132:	e00a      	b.n	800814a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008134:	f7fb fd72 	bl	8003c1c <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008142:	4293      	cmp	r3, r2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e0b5      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800814a:	4b3e      	ldr	r3, [pc, #248]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 800814c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1ee      	bne.n	8008134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d105      	bne.n	8008168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800815c:	4b39      	ldr	r3, [pc, #228]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	4a38      	ldr	r2, [pc, #224]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 80a1 	beq.w	80082b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008172:	4b34      	ldr	r3, [pc, #208]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 030c 	and.w	r3, r3, #12
 800817a:	2b08      	cmp	r3, #8
 800817c:	d05c      	beq.n	8008238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d141      	bne.n	800820a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008186:	4b31      	ldr	r3, [pc, #196]	; (800824c <HAL_RCC_OscConfig+0x478>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800818c:	f7fb fd46 	bl	8003c1c <HAL_GetTick>
 8008190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008194:	f7fb fd42 	bl	8003c1c <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e087      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081a6:	4b27      	ldr	r3, [pc, #156]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1f0      	bne.n	8008194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	019b      	lsls	r3, r3, #6
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	3b01      	subs	r3, #1
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	061b      	lsls	r3, r3, #24
 80081d6:	491b      	ldr	r1, [pc, #108]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <HAL_RCC_OscConfig+0x478>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081e2:	f7fb fd1b 	bl	8003c1c <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081ea:	f7fb fd17 	bl	8003c1c <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e05c      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0f0      	beq.n	80081ea <HAL_RCC_OscConfig+0x416>
 8008208:	e054      	b.n	80082b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <HAL_RCC_OscConfig+0x478>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008210:	f7fb fd04 	bl	8003c1c <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008218:	f7fb fd00 	bl	8003c1c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e045      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <HAL_RCC_OscConfig+0x470>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x444>
 8008236:	e03d      	b.n	80082b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d107      	bne.n	8008250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e038      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
 8008244:	40023800 	.word	0x40023800
 8008248:	40007000 	.word	0x40007000
 800824c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <HAL_RCC_OscConfig+0x4ec>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d028      	beq.n	80082b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008268:	429a      	cmp	r2, r3
 800826a:	d121      	bne.n	80082b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d11a      	bne.n	80082b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008280:	4013      	ands	r3, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008288:	4293      	cmp	r3, r2
 800828a:	d111      	bne.n	80082b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	3b01      	subs	r3, #1
 800829a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800829c:	429a      	cmp	r2, r3
 800829e:	d107      	bne.n	80082b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d001      	beq.n	80082b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40023800 	.word	0x40023800

080082c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0cc      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082d8:	4b68      	ldr	r3, [pc, #416]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d90c      	bls.n	8008300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e6:	4b65      	ldr	r3, [pc, #404]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ee:	4b63      	ldr	r3, [pc, #396]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d001      	beq.n	8008300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e0b8      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d020      	beq.n	800834e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008318:	4b59      	ldr	r3, [pc, #356]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	4a58      	ldr	r2, [pc, #352]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 800831e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d005      	beq.n	800833c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008330:	4b53      	ldr	r3, [pc, #332]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	4a52      	ldr	r2, [pc, #328]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800833a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800833c:	4b50      	ldr	r3, [pc, #320]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	494d      	ldr	r1, [pc, #308]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 800834a:	4313      	orrs	r3, r2
 800834c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d044      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d107      	bne.n	8008372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008362:	4b47      	ldr	r3, [pc, #284]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d119      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e07f      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d003      	beq.n	8008382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800837e:	2b03      	cmp	r3, #3
 8008380:	d107      	bne.n	8008392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008382:	4b3f      	ldr	r3, [pc, #252]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e06f      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008392:	4b3b      	ldr	r3, [pc, #236]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e067      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083a2:	4b37      	ldr	r3, [pc, #220]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f023 0203 	bic.w	r2, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4934      	ldr	r1, [pc, #208]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083b4:	f7fb fc32 	bl	8003c1c <HAL_GetTick>
 80083b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083bc:	f7fb fc2e 	bl	8003c1c <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e04f      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083d2:	4b2b      	ldr	r3, [pc, #172]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 020c 	and.w	r2, r3, #12
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d1eb      	bne.n	80083bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083e4:	4b25      	ldr	r3, [pc, #148]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d20c      	bcs.n	800840c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f2:	4b22      	ldr	r3, [pc, #136]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fa:	4b20      	ldr	r3, [pc, #128]	; (800847c <HAL_RCC_ClockConfig+0x1b8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 030f 	and.w	r3, r3, #15
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d001      	beq.n	800840c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e032      	b.n	8008472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	4916      	ldr	r1, [pc, #88]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	4313      	orrs	r3, r2
 8008428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008436:	4b12      	ldr	r3, [pc, #72]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	490e      	ldr	r1, [pc, #56]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	4313      	orrs	r3, r2
 8008448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800844a:	f000 f821 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 800844e:	4602      	mov	r2, r0
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <HAL_RCC_ClockConfig+0x1bc>)
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	490a      	ldr	r1, [pc, #40]	; (8008484 <HAL_RCC_ClockConfig+0x1c0>)
 800845c:	5ccb      	ldrb	r3, [r1, r3]
 800845e:	fa22 f303 	lsr.w	r3, r2, r3
 8008462:	4a09      	ldr	r2, [pc, #36]	; (8008488 <HAL_RCC_ClockConfig+0x1c4>)
 8008464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_RCC_ClockConfig+0x1c8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f7fb f9e0 	bl	8003830 <HAL_InitTick>

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40023c00 	.word	0x40023c00
 8008480:	40023800 	.word	0x40023800
 8008484:	0802e38c 	.word	0x0802e38c
 8008488:	200002dc 	.word	0x200002dc
 800848c:	200002e0 	.word	0x200002e0

08008490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008494:	b094      	sub	sp, #80	; 0x50
 8008496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	647b      	str	r3, [r7, #68]	; 0x44
 800849c:	2300      	movs	r3, #0
 800849e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a0:	2300      	movs	r3, #0
 80084a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084a8:	4b79      	ldr	r3, [pc, #484]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 030c 	and.w	r3, r3, #12
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d00d      	beq.n	80084d0 <HAL_RCC_GetSysClockFreq+0x40>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	f200 80e1 	bhi.w	800867c <HAL_RCC_GetSysClockFreq+0x1ec>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_RCC_GetSysClockFreq+0x34>
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d003      	beq.n	80084ca <HAL_RCC_GetSysClockFreq+0x3a>
 80084c2:	e0db      	b.n	800867c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084c4:	4b73      	ldr	r3, [pc, #460]	; (8008694 <HAL_RCC_GetSysClockFreq+0x204>)
 80084c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80084c8:	e0db      	b.n	8008682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084ca:	4b73      	ldr	r3, [pc, #460]	; (8008698 <HAL_RCC_GetSysClockFreq+0x208>)
 80084cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084ce:	e0d8      	b.n	8008682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084d0:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084da:	4b6d      	ldr	r3, [pc, #436]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d063      	beq.n	80085ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084e6:	4b6a      	ldr	r3, [pc, #424]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	099b      	lsrs	r3, r3, #6
 80084ec:	2200      	movs	r2, #0
 80084ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80084f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f8:	633b      	str	r3, [r7, #48]	; 0x30
 80084fa:	2300      	movs	r3, #0
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
 80084fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008502:	4622      	mov	r2, r4
 8008504:	462b      	mov	r3, r5
 8008506:	f04f 0000 	mov.w	r0, #0
 800850a:	f04f 0100 	mov.w	r1, #0
 800850e:	0159      	lsls	r1, r3, #5
 8008510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008514:	0150      	lsls	r0, r2, #5
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4621      	mov	r1, r4
 800851c:	1a51      	subs	r1, r2, r1
 800851e:	6139      	str	r1, [r7, #16]
 8008520:	4629      	mov	r1, r5
 8008522:	eb63 0301 	sbc.w	r3, r3, r1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	f04f 0200 	mov.w	r2, #0
 800852c:	f04f 0300 	mov.w	r3, #0
 8008530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008534:	4659      	mov	r1, fp
 8008536:	018b      	lsls	r3, r1, #6
 8008538:	4651      	mov	r1, sl
 800853a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800853e:	4651      	mov	r1, sl
 8008540:	018a      	lsls	r2, r1, #6
 8008542:	4651      	mov	r1, sl
 8008544:	ebb2 0801 	subs.w	r8, r2, r1
 8008548:	4659      	mov	r1, fp
 800854a:	eb63 0901 	sbc.w	r9, r3, r1
 800854e:	f04f 0200 	mov.w	r2, #0
 8008552:	f04f 0300 	mov.w	r3, #0
 8008556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800855a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800855e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008562:	4690      	mov	r8, r2
 8008564:	4699      	mov	r9, r3
 8008566:	4623      	mov	r3, r4
 8008568:	eb18 0303 	adds.w	r3, r8, r3
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	462b      	mov	r3, r5
 8008570:	eb49 0303 	adc.w	r3, r9, r3
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008582:	4629      	mov	r1, r5
 8008584:	024b      	lsls	r3, r1, #9
 8008586:	4621      	mov	r1, r4
 8008588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800858c:	4621      	mov	r1, r4
 800858e:	024a      	lsls	r2, r1, #9
 8008590:	4610      	mov	r0, r2
 8008592:	4619      	mov	r1, r3
 8008594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008596:	2200      	movs	r2, #0
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
 800859a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800859c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085a0:	f7f7 fe7e 	bl	80002a0 <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4613      	mov	r3, r2
 80085aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ac:	e058      	b.n	8008660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ae:	4b38      	ldr	r3, [pc, #224]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	099b      	lsrs	r3, r3, #6
 80085b4:	2200      	movs	r2, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	4611      	mov	r1, r2
 80085ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085be:	623b      	str	r3, [r7, #32]
 80085c0:	2300      	movs	r3, #0
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
 80085c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	f04f 0000 	mov.w	r0, #0
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	0159      	lsls	r1, r3, #5
 80085d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085da:	0150      	lsls	r0, r2, #5
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4641      	mov	r1, r8
 80085e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80085e6:	4649      	mov	r1, r9
 80085e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80085f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80085fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008600:	ebb2 040a 	subs.w	r4, r2, sl
 8008604:	eb63 050b 	sbc.w	r5, r3, fp
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	00eb      	lsls	r3, r5, #3
 8008612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008616:	00e2      	lsls	r2, r4, #3
 8008618:	4614      	mov	r4, r2
 800861a:	461d      	mov	r5, r3
 800861c:	4643      	mov	r3, r8
 800861e:	18e3      	adds	r3, r4, r3
 8008620:	603b      	str	r3, [r7, #0]
 8008622:	464b      	mov	r3, r9
 8008624:	eb45 0303 	adc.w	r3, r5, r3
 8008628:	607b      	str	r3, [r7, #4]
 800862a:	f04f 0200 	mov.w	r2, #0
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008636:	4629      	mov	r1, r5
 8008638:	028b      	lsls	r3, r1, #10
 800863a:	4621      	mov	r1, r4
 800863c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008640:	4621      	mov	r1, r4
 8008642:	028a      	lsls	r2, r1, #10
 8008644:	4610      	mov	r0, r2
 8008646:	4619      	mov	r1, r3
 8008648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864a:	2200      	movs	r2, #0
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	61fa      	str	r2, [r7, #28]
 8008650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008654:	f7f7 fe24 	bl	80002a0 <__aeabi_uldivmod>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4613      	mov	r3, r2
 800865e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008660:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <HAL_RCC_GetSysClockFreq+0x200>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	3301      	adds	r3, #1
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008674:	fbb2 f3f3 	udiv	r3, r2, r3
 8008678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800867a:	e002      	b.n	8008682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_RCC_GetSysClockFreq+0x204>)
 800867e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008684:	4618      	mov	r0, r3
 8008686:	3750      	adds	r7, #80	; 0x50
 8008688:	46bd      	mov	sp, r7
 800868a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800
 8008694:	00f42400 	.word	0x00f42400
 8008698:	007a1200 	.word	0x007a1200

0800869c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086a0:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	200002dc 	.word	0x200002dc

080086b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086b8:	f7ff fff0 	bl	800869c <HAL_RCC_GetHCLKFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	0a9b      	lsrs	r3, r3, #10
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	4903      	ldr	r1, [pc, #12]	; (80086d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086ca:	5ccb      	ldrb	r3, [r1, r3]
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40023800 	.word	0x40023800
 80086d8:	0802e39c 	.word	0x0802e39c

080086dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086e0:	f7ff ffdc 	bl	800869c <HAL_RCC_GetHCLKFreq>
 80086e4:	4602      	mov	r2, r0
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	0b5b      	lsrs	r3, r3, #13
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	4903      	ldr	r1, [pc, #12]	; (8008700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f2:	5ccb      	ldrb	r3, [r1, r3]
 80086f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	40023800 	.word	0x40023800
 8008700:	0802e39c 	.word	0x0802e39c

08008704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	220f      	movs	r2, #15
 8008712:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008714:	4b12      	ldr	r3, [pc, #72]	; (8008760 <HAL_RCC_GetClockConfig+0x5c>)
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0203 	and.w	r2, r3, #3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <HAL_RCC_GetClockConfig+0x5c>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <HAL_RCC_GetClockConfig+0x5c>)
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008738:	4b09      	ldr	r3, [pc, #36]	; (8008760 <HAL_RCC_GetClockConfig+0x5c>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	08db      	lsrs	r3, r3, #3
 800873e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008746:	4b07      	ldr	r3, [pc, #28]	; (8008764 <HAL_RCC_GetClockConfig+0x60>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 020f 	and.w	r2, r3, #15
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40023800 	.word	0x40023800
 8008764:	40023c00 	.word	0x40023c00

08008768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10b      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008798:	2b00      	cmp	r3, #0
 800879a:	d075      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800879c:	4b91      	ldr	r3, [pc, #580]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087a2:	f7fb fa3b 	bl	8003c1c <HAL_GetTick>
 80087a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087a8:	e008      	b.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80087aa:	f7fb fa37 	bl	8003c1c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e189      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087bc:	4b8a      	ldr	r3, [pc, #552]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f0      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d009      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	019a      	lsls	r2, r3, #6
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	071b      	lsls	r3, r3, #28
 80087e0:	4981      	ldr	r1, [pc, #516]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01f      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087f4:	4b7c      	ldr	r3, [pc, #496]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fa:	0f1b      	lsrs	r3, r3, #28
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	019a      	lsls	r2, r3, #6
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	061b      	lsls	r3, r3, #24
 800880e:	431a      	orrs	r2, r3
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	071b      	lsls	r3, r3, #28
 8008814:	4974      	ldr	r1, [pc, #464]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800881c:	4b72      	ldr	r3, [pc, #456]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800881e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008822:	f023 021f 	bic.w	r2, r3, #31
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	3b01      	subs	r3, #1
 800882c:	496e      	ldr	r1, [pc, #440]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00d      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	019a      	lsls	r2, r3, #6
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	061b      	lsls	r3, r3, #24
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	071b      	lsls	r3, r3, #28
 8008854:	4964      	ldr	r1, [pc, #400]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800885c:	4b61      	ldr	r3, [pc, #388]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800885e:	2201      	movs	r2, #1
 8008860:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008862:	f7fb f9db 	bl	8003c1c <HAL_GetTick>
 8008866:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008868:	e008      	b.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800886a:	f7fb f9d7 	bl	8003c1c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e129      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800887c:	4b5a      	ldr	r3, [pc, #360]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f0      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800889c:	2b00      	cmp	r3, #0
 800889e:	d079      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088a0:	4b52      	ldr	r3, [pc, #328]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088a6:	f7fb f9b9 	bl	8003c1c <HAL_GetTick>
 80088aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088ac:	e008      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80088ae:	f7fb f9b5 	bl	8003c1c <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e107      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c0:	4b49      	ldr	r3, [pc, #292]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d0ef      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0304 	and.w	r3, r3, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d020      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088da:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e0:	0f1b      	lsrs	r3, r3, #28
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	019a      	lsls	r2, r3, #6
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	061b      	lsls	r3, r3, #24
 80088f4:	431a      	orrs	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	071b      	lsls	r3, r3, #28
 80088fa:	493b      	ldr	r1, [pc, #236]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008902:	4b39      	ldr	r3, [pc, #228]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008908:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	3b01      	subs	r3, #1
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	4934      	ldr	r1, [pc, #208]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008916:	4313      	orrs	r3, r2
 8008918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01e      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008928:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800892a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892e:	0e1b      	lsrs	r3, r3, #24
 8008930:	f003 030f 	and.w	r3, r3, #15
 8008934:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	019a      	lsls	r2, r3, #6
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	061b      	lsls	r3, r3, #24
 8008940:	431a      	orrs	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	071b      	lsls	r3, r3, #28
 8008948:	4927      	ldr	r1, [pc, #156]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008950:	4b25      	ldr	r3, [pc, #148]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008956:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	4922      	ldr	r1, [pc, #136]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008966:	4b21      	ldr	r3, [pc, #132]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800896c:	f7fb f956 	bl	8003c1c <HAL_GetTick>
 8008970:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008974:	f7fb f952 	bl	8003c1c <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e0a4      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008986:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800898e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008992:	d1ef      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 808b 	beq.w	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089aa:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b0:	6413      	str	r3, [r2, #64]	; 0x40
 80089b2:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a0b      	ldr	r2, [pc, #44]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80089c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089ca:	f7fb f927 	bl	8003c1c <HAL_GetTick>
 80089ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089d0:	e010      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80089d2:	f7fb f923 	bl	8003c1c <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d909      	bls.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e075      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80089e4:	42470068 	.word	0x42470068
 80089e8:	40023800 	.word	0x40023800
 80089ec:	42470070 	.word	0x42470070
 80089f0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80089f4:	4b38      	ldr	r3, [pc, #224]	; (8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0e8      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008a00:	4b36      	ldr	r3, [pc, #216]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d02f      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d028      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a1e:	4b2f      	ldr	r3, [pc, #188]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008a28:	4b2d      	ldr	r3, [pc, #180]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008a2e:	4b2c      	ldr	r3, [pc, #176]	; (8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008a34:	4a29      	ldr	r2, [pc, #164]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008a3a:	4b28      	ldr	r3, [pc, #160]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d114      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008a46:	f7fb f8e9 	bl	8003c1c <HAL_GetTick>
 8008a4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4c:	e00a      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a4e:	f7fb f8e5 	bl	8003c1c <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e035      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a64:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0ee      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a7c:	d10d      	bne.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008a7e:	4b17      	ldr	r3, [pc, #92]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a92:	4912      	ldr	r1, [pc, #72]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	608b      	str	r3, [r1, #8]
 8008a98:	e005      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008aa0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008aa4:	6093      	str	r3, [r2, #8]
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ab2:	490a      	ldr	r1, [pc, #40]	; (8008adc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008aca:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008acc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	40007000 	.word	0x40007000
 8008adc:	40023800 	.word	0x40023800
 8008ae0:	42470e40 	.word	0x42470e40
 8008ae4:	424711e0 	.word	0x424711e0

08008ae8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e025      	b.n	8008b48 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7fa fe83 	bl	800381c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f002 f855 	bl	800abd8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	461a      	mov	r2, r3
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	f002 f8aa 	bl	800ac92 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b62:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d101      	bne.n	8008b6e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e021      	b.n	8008bb2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d002      	beq.n	8008b7a <HAL_SDRAM_SendCommand+0x2a>
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d118      	bne.n	8008bac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	68b9      	ldr	r1, [r7, #8]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 f8ea 	bl	800ad64 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d104      	bne.n	8008ba2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2205      	movs	r2, #5
 8008b9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ba0:	e006      	b.n	8008bb0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008baa:	e001      	b.n	8008bb0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e000      	b.n	8008bb2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d101      	bne.n	8008bd4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e016      	b.n	8008c02 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d10f      	bne.n	8008c00 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 f8f5 	bl	800adde <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e000      	b.n	8008c02 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e07b      	b.n	8008d14 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d108      	bne.n	8008c36 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c2c:	d009      	beq.n	8008c42 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	61da      	str	r2, [r3, #28]
 8008c34:	e005      	b.n	8008c42 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d106      	bne.n	8008c62 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fa fbd5 	bl	800340c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc6:	ea42 0103 	orr.w	r1, r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	0c1b      	lsrs	r3, r3, #16
 8008ce0:	f003 0104 	and.w	r1, r3, #4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	f003 0210 	and.w	r2, r3, #16
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69da      	ldr	r2, [r3, #28]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e041      	b.n	8008db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fa fbaa 	bl	800349c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f000 fa96 	bl	800928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
	...

08008dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d001      	beq.n	8008dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e04e      	b.n	8008e72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a23      	ldr	r2, [pc, #140]	; (8008e80 <HAL_TIM_Base_Start_IT+0xc4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d022      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfe:	d01d      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d018      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d013      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00e      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d009      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a19      	ldr	r2, [pc, #100]	; (8008e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_TIM_Base_Start_IT+0x80>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a18      	ldr	r2, [pc, #96]	; (8008e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d111      	bne.n	8008e60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b06      	cmp	r3, #6
 8008e4c:	d010      	beq.n	8008e70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0201 	orr.w	r2, r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5e:	e007      	b.n	8008e70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40001800 	.word	0x40001800

08008e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d122      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d11b      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0202 	mvn.w	r2, #2
 8008ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9b5 	bl	800924e <HAL_TIM_IC_CaptureCallback>
 8008ee4:	e005      	b.n	8008ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9a7 	bl	800923a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9b8 	bl	8009262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d122      	bne.n	8008f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d11b      	bne.n	8008f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0204 	mvn.w	r2, #4
 8008f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f98b 	bl	800924e <HAL_TIM_IC_CaptureCallback>
 8008f38:	e005      	b.n	8008f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f97d 	bl	800923a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f98e 	bl	8009262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d122      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d11b      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0208 	mvn.w	r2, #8
 8008f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2204      	movs	r2, #4
 8008f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f961 	bl	800924e <HAL_TIM_IC_CaptureCallback>
 8008f8c:	e005      	b.n	8008f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f953 	bl	800923a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f964 	bl	8009262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0310 	and.w	r3, r3, #16
 8008faa:	2b10      	cmp	r3, #16
 8008fac:	d122      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b10      	cmp	r3, #16
 8008fba:	d11b      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0210 	mvn.w	r2, #16
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f937 	bl	800924e <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f929 	bl	800923a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f93a 	bl	8009262 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d10e      	bne.n	8009020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0301 	and.w	r3, r3, #1
 800900c:	2b01      	cmp	r3, #1
 800900e:	d107      	bne.n	8009020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0201 	mvn.w	r2, #1
 8009018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7f9 ffce 	bl	8002fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902a:	2b80      	cmp	r3, #128	; 0x80
 800902c:	d10e      	bne.n	800904c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b80      	cmp	r3, #128	; 0x80
 800903a:	d107      	bne.n	800904c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fae0 	bl	800960c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b40      	cmp	r3, #64	; 0x40
 8009058:	d10e      	bne.n	8009078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	d107      	bne.n	8009078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8ff 	bl	8009276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0320 	and.w	r3, r3, #32
 8009082:	2b20      	cmp	r3, #32
 8009084:	d10e      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b20      	cmp	r3, #32
 8009092:	d107      	bne.n	80090a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0220 	mvn.w	r2, #32
 800909c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 faaa 	bl	80095f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <HAL_TIM_ConfigClockSource+0x1c>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e0b4      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x186>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009100:	d03e      	beq.n	8009180 <HAL_TIM_ConfigClockSource+0xd4>
 8009102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009106:	f200 8087 	bhi.w	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910e:	f000 8086 	beq.w	800921e <HAL_TIM_ConfigClockSource+0x172>
 8009112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009116:	d87f      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009118:	2b70      	cmp	r3, #112	; 0x70
 800911a:	d01a      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0xa6>
 800911c:	2b70      	cmp	r3, #112	; 0x70
 800911e:	d87b      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009120:	2b60      	cmp	r3, #96	; 0x60
 8009122:	d050      	beq.n	80091c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009124:	2b60      	cmp	r3, #96	; 0x60
 8009126:	d877      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009128:	2b50      	cmp	r3, #80	; 0x50
 800912a:	d03c      	beq.n	80091a6 <HAL_TIM_ConfigClockSource+0xfa>
 800912c:	2b50      	cmp	r3, #80	; 0x50
 800912e:	d873      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b40      	cmp	r3, #64	; 0x40
 8009132:	d058      	beq.n	80091e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009134:	2b40      	cmp	r3, #64	; 0x40
 8009136:	d86f      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b30      	cmp	r3, #48	; 0x30
 800913a:	d064      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x15a>
 800913c:	2b30      	cmp	r3, #48	; 0x30
 800913e:	d86b      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009140:	2b20      	cmp	r3, #32
 8009142:	d060      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x15a>
 8009144:	2b20      	cmp	r3, #32
 8009146:	d867      	bhi.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
 8009148:	2b00      	cmp	r3, #0
 800914a:	d05c      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x15a>
 800914c:	2b10      	cmp	r3, #16
 800914e:	d05a      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x15a>
 8009150:	e062      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	6899      	ldr	r1, [r3, #8]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f000 f9ad 	bl	80094c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	609a      	str	r2, [r3, #8]
      break;
 800917e:	e04f      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6818      	ldr	r0, [r3, #0]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6899      	ldr	r1, [r3, #8]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f000 f996 	bl	80094c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091a2:	609a      	str	r2, [r3, #8]
      break;
 80091a4:	e03c      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	6859      	ldr	r1, [r3, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f000 f90a 	bl	80093cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2150      	movs	r1, #80	; 0x50
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f963 	bl	800948a <TIM_ITRx_SetConfig>
      break;
 80091c4:	e02c      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	6859      	ldr	r1, [r3, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f000 f929 	bl	800942a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2160      	movs	r1, #96	; 0x60
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f953 	bl	800948a <TIM_ITRx_SetConfig>
      break;
 80091e4:	e01c      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	6859      	ldr	r1, [r3, #4]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f000 f8ea 	bl	80093cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2140      	movs	r1, #64	; 0x40
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f943 	bl	800948a <TIM_ITRx_SetConfig>
      break;
 8009204:	e00c      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f000 f93a 	bl	800948a <TIM_ITRx_SetConfig>
      break;
 8009216:	e003      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	73fb      	strb	r3, [r7, #15]
      break;
 800921c:	e000      	b.n	8009220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800921e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a40      	ldr	r2, [pc, #256]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d013      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092aa:	d00f      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a3d      	ldr	r2, [pc, #244]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3c      	ldr	r2, [pc, #240]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d007      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a3b      	ldr	r2, [pc, #236]	; (80093ac <TIM_Base_SetConfig+0x120>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3a      	ldr	r2, [pc, #232]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d108      	bne.n	80092de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a2f      	ldr	r2, [pc, #188]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d02b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ec:	d027      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d023      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2b      	ldr	r2, [pc, #172]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01f      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <TIM_Base_SetConfig+0x120>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d01b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a29      	ldr	r2, [pc, #164]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d017      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <TIM_Base_SetConfig+0x128>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d013      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <TIM_Base_SetConfig+0x12c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00f      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a26      	ldr	r2, [pc, #152]	; (80093bc <TIM_Base_SetConfig+0x130>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d00b      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a25      	ldr	r2, [pc, #148]	; (80093c0 <TIM_Base_SetConfig+0x134>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d007      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a24      	ldr	r2, [pc, #144]	; (80093c4 <TIM_Base_SetConfig+0x138>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_Base_SetConfig+0xb2>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a23      	ldr	r2, [pc, #140]	; (80093c8 <TIM_Base_SetConfig+0x13c>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d108      	bne.n	8009350 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a0a      	ldr	r2, [pc, #40]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a0c      	ldr	r2, [pc, #48]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	615a      	str	r2, [r3, #20]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40010400 	.word	0x40010400
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40014400 	.word	0x40014400
 80093bc:	40014800 	.word	0x40014800
 80093c0:	40001800 	.word	0x40001800
 80093c4:	40001c00 	.word	0x40001c00
 80093c8:	40002000 	.word	0x40002000

080093cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	f023 0201 	bic.w	r2, r3, #1
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f023 030a 	bic.w	r3, r3, #10
 8009408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800942a:	b480      	push	{r7}
 800942c:	b087      	sub	sp, #28
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	f023 0210 	bic.w	r2, r3, #16
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	031b      	lsls	r3, r3, #12
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	621a      	str	r2, [r3, #32]
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800948a:	b480      	push	{r7}
 800948c:	b085      	sub	sp, #20
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f043 0307 	orr.w	r3, r3, #7
 80094ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	609a      	str	r2, [r3, #8]
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	021a      	lsls	r2, r3, #8
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	431a      	orrs	r2, r3
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	609a      	str	r2, [r3, #8]
}
 80094f4:	bf00      	nop
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009514:	2302      	movs	r3, #2
 8009516:	e05a      	b.n	80095ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a21      	ldr	r2, [pc, #132]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d022      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009564:	d01d      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1d      	ldr	r2, [pc, #116]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d018      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1b      	ldr	r2, [pc, #108]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d013      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1a      	ldr	r2, [pc, #104]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d00e      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a18      	ldr	r2, [pc, #96]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d009      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a17      	ldr	r2, [pc, #92]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d10c      	bne.n	80095bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00
 80095ec:	40010400 	.word	0x40010400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40001800 	.word	0x40001800

080095f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e03f      	b.n	80096b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7f9 ff4a 	bl	80034e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2224      	movs	r2, #36	; 0x24
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 f843 	bl	800a6f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	695a      	ldr	r2, [r3, #20]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b08a      	sub	sp, #40	; 0x28
 80096be:	af02      	add	r7, sp, #8
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	603b      	str	r3, [r7, #0]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b20      	cmp	r3, #32
 80096d8:	d17c      	bne.n	80097d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d002      	beq.n	80096e6 <HAL_UART_Transmit+0x2c>
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e075      	b.n	80097d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_UART_Transmit+0x3e>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e06e      	b.n	80097d6 <HAL_UART_Transmit+0x11c>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2221      	movs	r2, #33	; 0x21
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800970e:	f7fa fa85 	bl	8003c1c <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	88fa      	ldrh	r2, [r7, #6]
 8009718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	88fa      	ldrh	r2, [r7, #6]
 800971e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009728:	d108      	bne.n	800973c <HAL_UART_Transmit+0x82>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d104      	bne.n	800973c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	61bb      	str	r3, [r7, #24]
 800973a:	e003      	b.n	8009744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800974c:	e02a      	b.n	80097a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2200      	movs	r2, #0
 8009756:	2180      	movs	r1, #128	; 0x80
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fcfa 	bl	800a152 <UART_WaitOnFlagUntilTimeout>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e036      	b.n	80097d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10b      	bne.n	8009786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800977c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	3302      	adds	r3, #2
 8009782:	61bb      	str	r3, [r7, #24]
 8009784:	e007      	b.n	8009796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	781a      	ldrb	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	3301      	adds	r3, #1
 8009794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800979a:	b29b      	uxth	r3, r3
 800979c:	3b01      	subs	r3, #1
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1cf      	bne.n	800974e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2200      	movs	r2, #0
 80097b6:	2140      	movs	r1, #64	; 0x40
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 fcca 	bl	800a152 <UART_WaitOnFlagUntilTimeout>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e006      	b.n	80097d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	e000      	b.n	80097d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80097d4:	2302      	movs	r3, #2
  }
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3720      	adds	r7, #32
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08c      	sub	sp, #48	; 0x30
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d165      	bne.n	80098c6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <HAL_UART_Transmit_DMA+0x26>
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e05e      	b.n	80098c8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_UART_Transmit_DMA+0x38>
 8009814:	2302      	movs	r3, #2
 8009816:	e057      	b.n	80098c8 <HAL_UART_Transmit_DMA+0xe8>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2221      	movs	r2, #33	; 0x21
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	4a22      	ldr	r2, [pc, #136]	; (80098d0 <HAL_UART_Transmit_DMA+0xf0>)
 8009846:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984c:	4a21      	ldr	r2, [pc, #132]	; (80098d4 <HAL_UART_Transmit_DMA+0xf4>)
 800984e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	4a20      	ldr	r2, [pc, #128]	; (80098d8 <HAL_UART_Transmit_DMA+0xf8>)
 8009856:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985c:	2200      	movs	r2, #0
 800985e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009860:	f107 0308 	add.w	r3, r7, #8
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	6819      	ldr	r1, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3304      	adds	r3, #4
 8009874:	461a      	mov	r2, r3
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	f7fa fbde 	bl	8004038 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009884:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3314      	adds	r3, #20
 8009894:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	617b      	str	r3, [r7, #20]
   return(result);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3314      	adds	r3, #20
 80098ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ae:	627a      	str	r2, [r7, #36]	; 0x24
 80098b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b2:	6a39      	ldr	r1, [r7, #32]
 80098b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e5      	bne.n	800988e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	e000      	b.n	80098c8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
  }
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	08009ead 	.word	0x08009ead
 80098d4:	08009f47 	.word	0x08009f47
 80098d8:	0800a0bf 	.word	0x0800a0bf

080098dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	d11d      	bne.n	8009932 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_UART_Receive_DMA+0x26>
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e016      	b.n	8009934 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_UART_Receive_DMA+0x38>
 8009910:	2302      	movs	r3, #2
 8009912:	e00f      	b.n	8009934 <HAL_UART_Receive_DMA+0x58>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	461a      	mov	r2, r3
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fc81 	bl	800a230 <UART_Start_Receive_DMA>
 800992e:	4603      	mov	r3, r0
 8009930:	e000      	b.n	8009934 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b0ba      	sub	sp, #232	; 0xe8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009962:	2300      	movs	r3, #0
 8009964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800996e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800997a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10f      	bne.n	80099a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d009      	beq.n	80099a2 <HAL_UART_IRQHandler+0x66>
 800998e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fded 	bl	800a57a <UART_Receive_IT>
      return;
 80099a0:	e256      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 80de 	beq.w	8009b68 <HAL_UART_IRQHandler+0x22c>
 80099ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d106      	bne.n	80099c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f000 80d1 	beq.w	8009b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00b      	beq.n	80099ea <HAL_UART_IRQHandler+0xae>
 80099d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d005      	beq.n	80099ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f043 0201 	orr.w	r2, r3, #1
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <HAL_UART_IRQHandler+0xd2>
 80099f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <HAL_UART_IRQHandler+0xf6>
 8009a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f043 0204 	orr.w	r2, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a36:	f003 0308 	and.w	r3, r3, #8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d011      	beq.n	8009a62 <HAL_UART_IRQHandler+0x126>
 8009a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f043 0208 	orr.w	r2, r3, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 81ed 	beq.w	8009e46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d008      	beq.n	8009a8a <HAL_UART_IRQHandler+0x14e>
 8009a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fd78 	bl	800a57a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	bf0c      	ite	eq
 8009a98:	2301      	moveq	r3, #1
 8009a9a:	2300      	movne	r3, #0
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa6:	f003 0308 	and.w	r3, r3, #8
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x17a>
 8009aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d04f      	beq.n	8009b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fc80 	bl	800a3bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac6:	2b40      	cmp	r3, #64	; 0x40
 8009ac8:	d141      	bne.n	8009b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3314      	adds	r3, #20
 8009ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3314      	adds	r3, #20
 8009af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1d9      	bne.n	8009aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d013      	beq.n	8009b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	4a7d      	ldr	r2, [pc, #500]	; (8009d18 <HAL_UART_IRQHandler+0x3dc>)
 8009b24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fa fb4c 	bl	80041c8 <HAL_DMA_Abort_IT>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d016      	beq.n	8009b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b44:	e00e      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f99a 	bl	8009e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4c:	e00a      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f996 	bl	8009e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b54:	e006      	b.n	8009b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f992 	bl	8009e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b62:	e170      	b.n	8009e46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b64:	bf00      	nop
    return;
 8009b66:	e16e      	b.n	8009e46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	f040 814a 	bne.w	8009e06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b76:	f003 0310 	and.w	r3, r3, #16
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8143 	beq.w	8009e06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 813c 	beq.w	8009e06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bae:	2b40      	cmp	r3, #64	; 0x40
 8009bb0:	f040 80b4 	bne.w	8009d1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8140 	beq.w	8009e4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	f080 8139 	bcs.w	8009e4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bea:	f000 8088 	beq.w	8009cfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	330c      	adds	r3, #12
 8009bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	330c      	adds	r3, #12
 8009c16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1d9      	bne.n	8009bee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3314      	adds	r3, #20
 8009c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3314      	adds	r3, #20
 8009c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e1      	bne.n	8009c3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3314      	adds	r3, #20
 8009c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3314      	adds	r3, #20
 8009c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e3      	bne.n	8009c76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cce:	f023 0310 	bic.w	r3, r3, #16
 8009cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	330c      	adds	r3, #12
 8009cdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ce2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e3      	bne.n	8009cbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fa f9f5 	bl	80040e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f8c0 	bl	8009e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d14:	e099      	b.n	8009e4a <HAL_UART_IRQHandler+0x50e>
 8009d16:	bf00      	nop
 8009d18:	0800a483 	.word	0x0800a483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 808b 	beq.w	8009e4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 8086 	beq.w	8009e4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	330c      	adds	r3, #12
 8009d48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	330c      	adds	r3, #12
 8009d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d66:	647a      	str	r2, [r7, #68]	; 0x44
 8009d68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d6e:	e841 2300 	strex	r3, r2, [r1]
 8009d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e3      	bne.n	8009d42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3314      	adds	r3, #20
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	623b      	str	r3, [r7, #32]
   return(result);
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3314      	adds	r3, #20
 8009d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d9e:	633a      	str	r2, [r7, #48]	; 0x30
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da6:	e841 2300 	strex	r3, r2, [r1]
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1e3      	bne.n	8009d7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	e853 3f00 	ldrex	r3, [r3]
 8009dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0310 	bic.w	r3, r3, #16
 8009dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	330c      	adds	r3, #12
 8009de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009de4:	61fa      	str	r2, [r7, #28]
 8009de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	69b9      	ldr	r1, [r7, #24]
 8009dea:	69fa      	ldr	r2, [r7, #28]
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	617b      	str	r3, [r7, #20]
   return(result);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e3      	bne.n	8009dc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f848 	bl	8009e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e04:	e023      	b.n	8009e4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <HAL_UART_IRQHandler+0x4ea>
 8009e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fb43 	bl	800a4aa <UART_Transmit_IT>
    return;
 8009e24:	e014      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <HAL_UART_IRQHandler+0x514>
 8009e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fb83 	bl	800a54a <UART_EndTransmit_IT>
    return;
 8009e44:	e004      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
    return;
 8009e46:	bf00      	nop
 8009e48:	e002      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
      return;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <HAL_UART_IRQHandler+0x514>
      return;
 8009e4e:	bf00      	nop
  }
}
 8009e50:	37e8      	adds	r7, #232	; 0xe8
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop

08009e58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b090      	sub	sp, #64	; 0x40
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d137      	bne.n	8009f38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eca:	2200      	movs	r2, #0
 8009ecc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3314      	adds	r3, #20
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3314      	adds	r3, #20
 8009eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eee:	633a      	str	r2, [r7, #48]	; 0x30
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e5      	bne.n	8009ece <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	330c      	adds	r3, #12
 8009f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	e853 3f00 	ldrex	r3, [r3]
 8009f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	637b      	str	r3, [r7, #52]	; 0x34
 8009f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f22:	61fa      	str	r2, [r7, #28]
 8009f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	69b9      	ldr	r1, [r7, #24]
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e5      	bne.n	8009f02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f36:	e002      	b.n	8009f3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009f38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f3a:	f7f7 fcfb 	bl	8001934 <HAL_UART_TxCpltCallback>
}
 8009f3e:	bf00      	nop
 8009f40:	3740      	adds	r7, #64	; 0x40
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff ff7f 	bl	8009e58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b09c      	sub	sp, #112	; 0x70
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d172      	bne.n	800a064 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f80:	2200      	movs	r2, #0
 8009f82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	330c      	adds	r3, #12
 8009f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8e:	e853 3f00 	ldrex	r3, [r3]
 8009f92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	330c      	adds	r3, #12
 8009fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009fa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009faa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fac:	e841 2300 	strex	r3, r2, [r1]
 8009fb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e5      	bne.n	8009f84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	e853 3f00 	ldrex	r3, [r3]
 8009fc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fca:	f023 0301 	bic.w	r3, r3, #1
 8009fce:	667b      	str	r3, [r7, #100]	; 0x64
 8009fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fd8:	647a      	str	r2, [r7, #68]	; 0x44
 8009fda:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fe0:	e841 2300 	strex	r3, r2, [r1]
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1e5      	bne.n	8009fb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffc:	6a3b      	ldr	r3, [r7, #32]
 8009ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a002:	663b      	str	r3, [r7, #96]	; 0x60
 800a004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3314      	adds	r3, #20
 800a00a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a00c:	633a      	str	r2, [r7, #48]	; 0x30
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a014:	e841 2300 	strex	r3, r2, [r1]
 800a018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e5      	bne.n	8009fec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a022:	2220      	movs	r2, #32
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d119      	bne.n	800a064 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	330c      	adds	r3, #12
 800a036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f023 0310 	bic.w	r3, r3, #16
 800a046:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	330c      	adds	r3, #12
 800a04e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a050:	61fa      	str	r2, [r7, #28]
 800a052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	69b9      	ldr	r1, [r7, #24]
 800a056:	69fa      	ldr	r2, [r7, #28]
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	617b      	str	r3, [r7, #20]
   return(result);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e5      	bne.n	800a030 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a06e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a070:	4619      	mov	r1, r3
 800a072:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a074:	f7ff ff0e 	bl	8009e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a078:	e002      	b.n	800a080 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a07a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a07c:	f7f7 fc48 	bl	8001910 <HAL_UART_RxCpltCallback>
}
 800a080:	bf00      	nop
 800a082:	3770      	adds	r7, #112	; 0x70
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d108      	bne.n	800a0b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a0a2:	085b      	lsrs	r3, r3, #1
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff fef3 	bl	8009e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0ae:	e002      	b.n	800a0b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7ff fedb 	bl	8009e6c <HAL_UART_RxHalfCpltCallback>
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0da:	2b80      	cmp	r3, #128	; 0x80
 800a0dc:	bf0c      	ite	eq
 800a0de:	2301      	moveq	r3, #1
 800a0e0:	2300      	movne	r3, #0
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b21      	cmp	r3, #33	; 0x21
 800a0f0:	d108      	bne.n	800a104 <UART_DMAError+0x46>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d005      	beq.n	800a104 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f000 f934 	bl	800a36c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b40      	cmp	r3, #64	; 0x40
 800a110:	bf0c      	ite	eq
 800a112:	2301      	moveq	r3, #1
 800a114:	2300      	movne	r3, #0
 800a116:	b2db      	uxtb	r3, r3
 800a118:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b22      	cmp	r3, #34	; 0x22
 800a124:	d108      	bne.n	800a138 <UART_DMAError+0x7a>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d005      	beq.n	800a138 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a132:	68b8      	ldr	r0, [r7, #8]
 800a134:	f000 f942 	bl	800a3bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13c:	f043 0210 	orr.w	r2, r3, #16
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a144:	68b8      	ldr	r0, [r7, #8]
 800a146:	f7ff fe9b 	bl	8009e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a14a:	bf00      	nop
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b090      	sub	sp, #64	; 0x40
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	603b      	str	r3, [r7, #0]
 800a15e:	4613      	mov	r3, r2
 800a160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a162:	e050      	b.n	800a206 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a16a:	d04c      	beq.n	800a206 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <UART_WaitOnFlagUntilTimeout+0x30>
 800a172:	f7f9 fd53 	bl	8003c1c <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a17e:	429a      	cmp	r2, r3
 800a180:	d241      	bcs.n	800a206 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a2:	637a      	str	r2, [r7, #52]	; 0x34
 800a1a4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e5      	bne.n	800a182 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3314      	adds	r3, #20
 800a1bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d6:	623a      	str	r2, [r7, #32]
 800a1d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	69f9      	ldr	r1, [r7, #28]
 800a1dc:	6a3a      	ldr	r2, [r7, #32]
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e5      	bne.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e00f      	b.n	800a226 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	4013      	ands	r3, r2
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	bf0c      	ite	eq
 800a216:	2301      	moveq	r3, #1
 800a218:	2300      	movne	r3, #0
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	429a      	cmp	r2, r3
 800a222:	d09f      	beq.n	800a164 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3740      	adds	r7, #64	; 0x40
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
	...

0800a230 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b098      	sub	sp, #96	; 0x60
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2222      	movs	r2, #34	; 0x22
 800a254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25c:	4a40      	ldr	r2, [pc, #256]	; (800a360 <UART_Start_Receive_DMA+0x130>)
 800a25e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	4a3f      	ldr	r2, [pc, #252]	; (800a364 <UART_Start_Receive_DMA+0x134>)
 800a266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	4a3e      	ldr	r2, [pc, #248]	; (800a368 <UART_Start_Receive_DMA+0x138>)
 800a26e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a274:	2200      	movs	r2, #0
 800a276:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a278:	f107 0308 	add.w	r3, r7, #8
 800a27c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	88fb      	ldrh	r3, [r7, #6]
 800a290:	f7f9 fed2 	bl	8004038 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a294:	2300      	movs	r3, #0
 800a296:	613b      	str	r3, [r7, #16]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d019      	beq.n	800a2ee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	330c      	adds	r3, #12
 800a2c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c4:	e853 3f00 	ldrex	r3, [r3]
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2da:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a2dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a2e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e5      	bne.n	800a2ba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3314      	adds	r3, #20
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	f043 0301 	orr.w	r3, r3, #1
 800a304:	657b      	str	r3, [r7, #84]	; 0x54
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	3314      	adds	r3, #20
 800a30c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a30e:	63ba      	str	r2, [r7, #56]	; 0x38
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a312:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a316:	e841 2300 	strex	r3, r2, [r1]
 800a31a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1e5      	bne.n	800a2ee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3314      	adds	r3, #20
 800a328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	e853 3f00 	ldrex	r3, [r3]
 800a330:	617b      	str	r3, [r7, #20]
   return(result);
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	653b      	str	r3, [r7, #80]	; 0x50
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3314      	adds	r3, #20
 800a340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a342:	627a      	str	r2, [r7, #36]	; 0x24
 800a344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a346:	6a39      	ldr	r1, [r7, #32]
 800a348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34a:	e841 2300 	strex	r3, r2, [r1]
 800a34e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1e5      	bne.n	800a322 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3760      	adds	r7, #96	; 0x60
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	08009f63 	.word	0x08009f63
 800a364:	0800a089 	.word	0x0800a089
 800a368:	0800a0bf 	.word	0x0800a0bf

0800a36c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b089      	sub	sp, #36	; 0x24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	330c      	adds	r3, #12
 800a37a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	60bb      	str	r3, [r7, #8]
   return(result);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a38a:	61fb      	str	r3, [r7, #28]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	61ba      	str	r2, [r7, #24]
 800a396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6979      	ldr	r1, [r7, #20]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e5      	bne.n	800a374 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a3b0:	bf00      	nop
 800a3b2:	3724      	adds	r7, #36	; 0x24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b095      	sub	sp, #84	; 0x54
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	330c      	adds	r3, #12
 800a3e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3e4:	643a      	str	r2, [r7, #64]	; 0x40
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ec:	e841 2300 	strex	r3, r2, [r1]
 800a3f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1e5      	bne.n	800a3c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3314      	adds	r3, #20
 800a3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	61fb      	str	r3, [r7, #28]
   return(result);
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3314      	adds	r3, #20
 800a416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e5      	bne.n	800a3f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	2b01      	cmp	r3, #1
 800a432:	d119      	bne.n	800a468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	330c      	adds	r3, #12
 800a43a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	60bb      	str	r3, [r7, #8]
   return(result);
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f023 0310 	bic.w	r3, r3, #16
 800a44a:	647b      	str	r3, [r7, #68]	; 0x44
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a454:	61ba      	str	r2, [r7, #24]
 800a456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6979      	ldr	r1, [r7, #20]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	613b      	str	r3, [r7, #16]
   return(result);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e5      	bne.n	800a434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a476:	bf00      	nop
 800a478:	3754      	adds	r7, #84	; 0x54
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f7ff fcef 	bl	8009e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4a2:	bf00      	nop
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b21      	cmp	r3, #33	; 0x21
 800a4bc:	d13e      	bne.n	800a53c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c6:	d114      	bne.n	800a4f2 <UART_Transmit_IT+0x48>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d110      	bne.n	800a4f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	1c9a      	adds	r2, r3, #2
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	621a      	str	r2, [r3, #32]
 800a4f0:	e008      	b.n	800a504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	1c59      	adds	r1, r3, #1
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6211      	str	r1, [r2, #32]
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4619      	mov	r1, r3
 800a512:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10f      	bne.n	800a538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e000      	b.n	800a53e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a53c:	2302      	movs	r3, #2
  }
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3714      	adds	r7, #20
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2220      	movs	r2, #32
 800a566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7f7 f9e2 	bl	8001934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b08c      	sub	sp, #48	; 0x30
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b22      	cmp	r3, #34	; 0x22
 800a58c:	f040 80ab 	bne.w	800a6e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a598:	d117      	bne.n	800a5ca <UART_Receive_IT+0x50>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d113      	bne.n	800a5ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	1c9a      	adds	r2, r3, #2
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	629a      	str	r2, [r3, #40]	; 0x28
 800a5c8:	e026      	b.n	800a618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5dc:	d007      	beq.n	800a5ee <UART_Receive_IT+0x74>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <UART_Receive_IT+0x82>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	e008      	b.n	800a60e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	b29b      	uxth	r3, r3
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4619      	mov	r1, r3
 800a626:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d15a      	bne.n	800a6e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f022 0220 	bic.w	r2, r2, #32
 800a63a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68da      	ldr	r2, [r3, #12]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a64a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695a      	ldr	r2, [r3, #20]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0201 	bic.w	r2, r2, #1
 800a65a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d135      	bne.n	800a6d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	330c      	adds	r3, #12
 800a678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	613b      	str	r3, [r7, #16]
   return(result);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	f023 0310 	bic.w	r3, r3, #16
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	330c      	adds	r3, #12
 800a690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a692:	623a      	str	r2, [r7, #32]
 800a694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	69f9      	ldr	r1, [r7, #28]
 800a698:	6a3a      	ldr	r2, [r7, #32]
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0310 	and.w	r3, r3, #16
 800a6b0:	2b10      	cmp	r3, #16
 800a6b2:	d10a      	bne.n	800a6ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fbdf 	bl	8009e94 <HAL_UARTEx_RxEventCallback>
 800a6d6:	e002      	b.n	800a6de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7f7 f919 	bl	8001910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e002      	b.n	800a6e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e000      	b.n	800a6e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6e6:	2302      	movs	r3, #2
  }
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3730      	adds	r7, #48	; 0x30
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6f4:	b0c0      	sub	sp, #256	; 0x100
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a70c:	68d9      	ldr	r1, [r3, #12]
 800a70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	ea40 0301 	orr.w	r3, r0, r1
 800a718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a71a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	431a      	orrs	r2, r3
 800a728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	431a      	orrs	r2, r3
 800a730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	4313      	orrs	r3, r2
 800a738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a748:	f021 010c 	bic.w	r1, r1, #12
 800a74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a756:	430b      	orrs	r3, r1
 800a758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76a:	6999      	ldr	r1, [r3, #24]
 800a76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	ea40 0301 	orr.w	r3, r0, r1
 800a776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b8f      	ldr	r3, [pc, #572]	; (800a9bc <UART_SetConfig+0x2cc>)
 800a780:	429a      	cmp	r2, r3
 800a782:	d005      	beq.n	800a790 <UART_SetConfig+0xa0>
 800a784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	4b8d      	ldr	r3, [pc, #564]	; (800a9c0 <UART_SetConfig+0x2d0>)
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d104      	bne.n	800a79a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a790:	f7fd ffa4 	bl	80086dc <HAL_RCC_GetPCLK2Freq>
 800a794:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a798:	e003      	b.n	800a7a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a79a:	f7fd ff8b 	bl	80086b4 <HAL_RCC_GetPCLK1Freq>
 800a79e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ac:	f040 810c 	bne.w	800a9c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a7be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a7c2:	4622      	mov	r2, r4
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	1891      	adds	r1, r2, r2
 800a7c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a7ca:	415b      	adcs	r3, r3
 800a7cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	eb12 0801 	adds.w	r8, r2, r1
 800a7d8:	4629      	mov	r1, r5
 800a7da:	eb43 0901 	adc.w	r9, r3, r1
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	f04f 0300 	mov.w	r3, #0
 800a7e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7f2:	4690      	mov	r8, r2
 800a7f4:	4699      	mov	r9, r3
 800a7f6:	4623      	mov	r3, r4
 800a7f8:	eb18 0303 	adds.w	r3, r8, r3
 800a7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a800:	462b      	mov	r3, r5
 800a802:	eb49 0303 	adc.w	r3, r9, r3
 800a806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a80a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a816:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a81a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a81e:	460b      	mov	r3, r1
 800a820:	18db      	adds	r3, r3, r3
 800a822:	653b      	str	r3, [r7, #80]	; 0x50
 800a824:	4613      	mov	r3, r2
 800a826:	eb42 0303 	adc.w	r3, r2, r3
 800a82a:	657b      	str	r3, [r7, #84]	; 0x54
 800a82c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a834:	f7f5 fd34 	bl	80002a0 <__aeabi_uldivmod>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4b61      	ldr	r3, [pc, #388]	; (800a9c4 <UART_SetConfig+0x2d4>)
 800a83e:	fba3 2302 	umull	r2, r3, r3, r2
 800a842:	095b      	lsrs	r3, r3, #5
 800a844:	011c      	lsls	r4, r3, #4
 800a846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a850:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	1891      	adds	r1, r2, r2
 800a85e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a860:	415b      	adcs	r3, r3
 800a862:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a868:	4641      	mov	r1, r8
 800a86a:	eb12 0a01 	adds.w	sl, r2, r1
 800a86e:	4649      	mov	r1, r9
 800a870:	eb43 0b01 	adc.w	fp, r3, r1
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a888:	4692      	mov	sl, r2
 800a88a:	469b      	mov	fp, r3
 800a88c:	4643      	mov	r3, r8
 800a88e:	eb1a 0303 	adds.w	r3, sl, r3
 800a892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a896:	464b      	mov	r3, r9
 800a898:	eb4b 0303 	adc.w	r3, fp, r3
 800a89c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a8b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	18db      	adds	r3, r3, r3
 800a8b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	eb42 0303 	adc.w	r3, r2, r3
 800a8c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a8c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a8ca:	f7f5 fce9 	bl	80002a0 <__aeabi_uldivmod>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4b3b      	ldr	r3, [pc, #236]	; (800a9c4 <UART_SetConfig+0x2d4>)
 800a8d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	2264      	movs	r2, #100	; 0x64
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	1acb      	subs	r3, r1, r3
 800a8e4:	00db      	lsls	r3, r3, #3
 800a8e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a8ea:	4b36      	ldr	r3, [pc, #216]	; (800a9c4 <UART_SetConfig+0x2d4>)
 800a8ec:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f0:	095b      	lsrs	r3, r3, #5
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8f8:	441c      	add	r4, r3
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a904:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	1891      	adds	r1, r2, r2
 800a912:	63b9      	str	r1, [r7, #56]	; 0x38
 800a914:	415b      	adcs	r3, r3
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a91c:	4641      	mov	r1, r8
 800a91e:	1851      	adds	r1, r2, r1
 800a920:	6339      	str	r1, [r7, #48]	; 0x30
 800a922:	4649      	mov	r1, r9
 800a924:	414b      	adcs	r3, r1
 800a926:	637b      	str	r3, [r7, #52]	; 0x34
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a934:	4659      	mov	r1, fp
 800a936:	00cb      	lsls	r3, r1, #3
 800a938:	4651      	mov	r1, sl
 800a93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a93e:	4651      	mov	r1, sl
 800a940:	00ca      	lsls	r2, r1, #3
 800a942:	4610      	mov	r0, r2
 800a944:	4619      	mov	r1, r3
 800a946:	4603      	mov	r3, r0
 800a948:	4642      	mov	r2, r8
 800a94a:	189b      	adds	r3, r3, r2
 800a94c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a950:	464b      	mov	r3, r9
 800a952:	460a      	mov	r2, r1
 800a954:	eb42 0303 	adc.w	r3, r2, r3
 800a958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a968:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a96c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a970:	460b      	mov	r3, r1
 800a972:	18db      	adds	r3, r3, r3
 800a974:	62bb      	str	r3, [r7, #40]	; 0x28
 800a976:	4613      	mov	r3, r2
 800a978:	eb42 0303 	adc.w	r3, r2, r3
 800a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a97e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a986:	f7f5 fc8b 	bl	80002a0 <__aeabi_uldivmod>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <UART_SetConfig+0x2d4>)
 800a990:	fba3 1302 	umull	r1, r3, r3, r2
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	2164      	movs	r1, #100	; 0x64
 800a998:	fb01 f303 	mul.w	r3, r1, r3
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	00db      	lsls	r3, r3, #3
 800a9a0:	3332      	adds	r3, #50	; 0x32
 800a9a2:	4a08      	ldr	r2, [pc, #32]	; (800a9c4 <UART_SetConfig+0x2d4>)
 800a9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	f003 0207 	and.w	r2, r3, #7
 800a9ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4422      	add	r2, r4
 800a9b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a9b8:	e105      	b.n	800abc6 <UART_SetConfig+0x4d6>
 800a9ba:	bf00      	nop
 800a9bc:	40011000 	.word	0x40011000
 800a9c0:	40011400 	.word	0x40011400
 800a9c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a9d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a9da:	4642      	mov	r2, r8
 800a9dc:	464b      	mov	r3, r9
 800a9de:	1891      	adds	r1, r2, r2
 800a9e0:	6239      	str	r1, [r7, #32]
 800a9e2:	415b      	adcs	r3, r3
 800a9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a9e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	1854      	adds	r4, r2, r1
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	eb43 0501 	adc.w	r5, r3, r1
 800a9f4:	f04f 0200 	mov.w	r2, #0
 800a9f8:	f04f 0300 	mov.w	r3, #0
 800a9fc:	00eb      	lsls	r3, r5, #3
 800a9fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa02:	00e2      	lsls	r2, r4, #3
 800aa04:	4614      	mov	r4, r2
 800aa06:	461d      	mov	r5, r3
 800aa08:	4643      	mov	r3, r8
 800aa0a:	18e3      	adds	r3, r4, r3
 800aa0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa10:	464b      	mov	r3, r9
 800aa12:	eb45 0303 	adc.w	r3, r5, r3
 800aa16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa2a:	f04f 0200 	mov.w	r2, #0
 800aa2e:	f04f 0300 	mov.w	r3, #0
 800aa32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aa36:	4629      	mov	r1, r5
 800aa38:	008b      	lsls	r3, r1, #2
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa40:	4621      	mov	r1, r4
 800aa42:	008a      	lsls	r2, r1, #2
 800aa44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa48:	f7f5 fc2a 	bl	80002a0 <__aeabi_uldivmod>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4b60      	ldr	r3, [pc, #384]	; (800abd4 <UART_SetConfig+0x4e4>)
 800aa52:	fba3 2302 	umull	r2, r3, r3, r2
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	011c      	lsls	r4, r3, #4
 800aa5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aa6c:	4642      	mov	r2, r8
 800aa6e:	464b      	mov	r3, r9
 800aa70:	1891      	adds	r1, r2, r2
 800aa72:	61b9      	str	r1, [r7, #24]
 800aa74:	415b      	adcs	r3, r3
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	1851      	adds	r1, r2, r1
 800aa80:	6139      	str	r1, [r7, #16]
 800aa82:	4649      	mov	r1, r9
 800aa84:	414b      	adcs	r3, r1
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa94:	4659      	mov	r1, fp
 800aa96:	00cb      	lsls	r3, r1, #3
 800aa98:	4651      	mov	r1, sl
 800aa9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa9e:	4651      	mov	r1, sl
 800aaa0:	00ca      	lsls	r2, r1, #3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	189b      	adds	r3, r3, r2
 800aaac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aab0:	464b      	mov	r3, r9
 800aab2:	460a      	mov	r2, r1
 800aab4:	eb42 0303 	adc.w	r3, r2, r3
 800aab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	67bb      	str	r3, [r7, #120]	; 0x78
 800aac6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aad4:	4649      	mov	r1, r9
 800aad6:	008b      	lsls	r3, r1, #2
 800aad8:	4641      	mov	r1, r8
 800aada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aade:	4641      	mov	r1, r8
 800aae0:	008a      	lsls	r2, r1, #2
 800aae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aae6:	f7f5 fbdb 	bl	80002a0 <__aeabi_uldivmod>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4b39      	ldr	r3, [pc, #228]	; (800abd4 <UART_SetConfig+0x4e4>)
 800aaf0:	fba3 1302 	umull	r1, r3, r3, r2
 800aaf4:	095b      	lsrs	r3, r3, #5
 800aaf6:	2164      	movs	r1, #100	; 0x64
 800aaf8:	fb01 f303 	mul.w	r3, r1, r3
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	011b      	lsls	r3, r3, #4
 800ab00:	3332      	adds	r3, #50	; 0x32
 800ab02:	4a34      	ldr	r2, [pc, #208]	; (800abd4 <UART_SetConfig+0x4e4>)
 800ab04:	fba2 2303 	umull	r2, r3, r2, r3
 800ab08:	095b      	lsrs	r3, r3, #5
 800ab0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab0e:	441c      	add	r4, r3
 800ab10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab14:	2200      	movs	r2, #0
 800ab16:	673b      	str	r3, [r7, #112]	; 0x70
 800ab18:	677a      	str	r2, [r7, #116]	; 0x74
 800ab1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab1e:	4642      	mov	r2, r8
 800ab20:	464b      	mov	r3, r9
 800ab22:	1891      	adds	r1, r2, r2
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	415b      	adcs	r3, r3
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab2e:	4641      	mov	r1, r8
 800ab30:	1851      	adds	r1, r2, r1
 800ab32:	6039      	str	r1, [r7, #0]
 800ab34:	4649      	mov	r1, r9
 800ab36:	414b      	adcs	r3, r1
 800ab38:	607b      	str	r3, [r7, #4]
 800ab3a:	f04f 0200 	mov.w	r2, #0
 800ab3e:	f04f 0300 	mov.w	r3, #0
 800ab42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab46:	4659      	mov	r1, fp
 800ab48:	00cb      	lsls	r3, r1, #3
 800ab4a:	4651      	mov	r1, sl
 800ab4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab50:	4651      	mov	r1, sl
 800ab52:	00ca      	lsls	r2, r1, #3
 800ab54:	4610      	mov	r0, r2
 800ab56:	4619      	mov	r1, r3
 800ab58:	4603      	mov	r3, r0
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	189b      	adds	r3, r3, r2
 800ab5e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab60:	464b      	mov	r3, r9
 800ab62:	460a      	mov	r2, r1
 800ab64:	eb42 0303 	adc.w	r3, r2, r3
 800ab68:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	663b      	str	r3, [r7, #96]	; 0x60
 800ab74:	667a      	str	r2, [r7, #100]	; 0x64
 800ab76:	f04f 0200 	mov.w	r2, #0
 800ab7a:	f04f 0300 	mov.w	r3, #0
 800ab7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ab82:	4649      	mov	r1, r9
 800ab84:	008b      	lsls	r3, r1, #2
 800ab86:	4641      	mov	r1, r8
 800ab88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	008a      	lsls	r2, r1, #2
 800ab90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ab94:	f7f5 fb84 	bl	80002a0 <__aeabi_uldivmod>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <UART_SetConfig+0x4e4>)
 800ab9e:	fba3 1302 	umull	r1, r3, r3, r2
 800aba2:	095b      	lsrs	r3, r3, #5
 800aba4:	2164      	movs	r1, #100	; 0x64
 800aba6:	fb01 f303 	mul.w	r3, r1, r3
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	3332      	adds	r3, #50	; 0x32
 800abb0:	4a08      	ldr	r2, [pc, #32]	; (800abd4 <UART_SetConfig+0x4e4>)
 800abb2:	fba2 2303 	umull	r2, r3, r2, r3
 800abb6:	095b      	lsrs	r3, r3, #5
 800abb8:	f003 020f 	and.w	r2, r3, #15
 800abbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4422      	add	r2, r4
 800abc4:	609a      	str	r2, [r3, #8]
}
 800abc6:	bf00      	nop
 800abc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800abcc:	46bd      	mov	sp, r7
 800abce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abd2:	bf00      	nop
 800abd4:	51eb851f 	.word	0x51eb851f

0800abd8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d123      	bne.n	800ac32 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800abf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	6851      	ldr	r1, [r2, #4]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	6892      	ldr	r2, [r2, #8]
 800abfe:	4311      	orrs	r1, r2
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	68d2      	ldr	r2, [r2, #12]
 800ac04:	4311      	orrs	r1, r2
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	6912      	ldr	r2, [r2, #16]
 800ac0a:	4311      	orrs	r1, r2
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	6952      	ldr	r2, [r2, #20]
 800ac10:	4311      	orrs	r1, r2
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	6992      	ldr	r2, [r2, #24]
 800ac16:	4311      	orrs	r1, r2
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	69d2      	ldr	r2, [r2, #28]
 800ac1c:	4311      	orrs	r1, r2
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	6a12      	ldr	r2, [r2, #32]
 800ac22:	4311      	orrs	r1, r2
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	e028      	b.n	800ac84 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	69d9      	ldr	r1, [r3, #28]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	4319      	orrs	r1, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ac58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	6851      	ldr	r1, [r2, #4]
 800ac60:	683a      	ldr	r2, [r7, #0]
 800ac62:	6892      	ldr	r2, [r2, #8]
 800ac64:	4311      	orrs	r1, r2
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	68d2      	ldr	r2, [r2, #12]
 800ac6a:	4311      	orrs	r1, r2
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	6912      	ldr	r2, [r2, #16]
 800ac70:	4311      	orrs	r1, r2
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	6952      	ldr	r2, [r2, #20]
 800ac76:	4311      	orrs	r1, r2
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	6992      	ldr	r2, [r2, #24]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	431a      	orrs	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d128      	bne.n	800acf6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	1e59      	subs	r1, r3, #1
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	4319      	orrs	r1, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	4319      	orrs	r1, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	3b01      	subs	r3, #1
 800accc:	031b      	lsls	r3, r3, #12
 800acce:	4319      	orrs	r1, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	041b      	lsls	r3, r3, #16
 800acd8:	4319      	orrs	r1, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	3b01      	subs	r3, #1
 800ace0:	051b      	lsls	r3, r3, #20
 800ace2:	4319      	orrs	r1, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	3b01      	subs	r3, #1
 800acea:	061b      	lsls	r3, r3, #24
 800acec:	430b      	orrs	r3, r1
 800acee:	431a      	orrs	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	609a      	str	r2, [r3, #8]
 800acf4:	e02f      	b.n	800ad56 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	68d2      	ldr	r2, [r2, #12]
 800ad06:	3a01      	subs	r2, #1
 800ad08:	0311      	lsls	r1, r2, #12
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	6952      	ldr	r2, [r2, #20]
 800ad0e:	3a01      	subs	r2, #1
 800ad10:	0512      	lsls	r2, r2, #20
 800ad12:	430a      	orrs	r2, r1
 800ad14:	431a      	orrs	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	1e59      	subs	r1, r3, #1
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	011b      	lsls	r3, r3, #4
 800ad30:	4319      	orrs	r1, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	021b      	lsls	r3, r3, #8
 800ad3a:	4319      	orrs	r1, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	041b      	lsls	r3, r3, #16
 800ad44:	4319      	orrs	r1, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	431a      	orrs	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	0d9b      	lsrs	r3, r3, #22
 800ad7a:	059b      	lsls	r3, r3, #22
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	6811      	ldr	r1, [r2, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	6852      	ldr	r2, [r2, #4]
 800ad84:	4311      	orrs	r1, r2
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	6892      	ldr	r2, [r2, #8]
 800ad8a:	3a01      	subs	r2, #1
 800ad8c:	0152      	lsls	r2, r2, #5
 800ad8e:	4311      	orrs	r1, r2
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	68d2      	ldr	r2, [r2, #12]
 800ad94:	0252      	lsls	r2, r2, #9
 800ad96:	430a      	orrs	r2, r1
 800ad98:	431a      	orrs	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800ad9e:	f7f8 ff3d 	bl	8003c1c <HAL_GetTick>
 800ada2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800ada4:	e010      	b.n	800adc8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adac:	d00c      	beq.n	800adc8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <FMC_SDRAM_SendCommand+0x60>
 800adb4:	f7f8 ff32 	bl	8003c1c <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d201      	bcs.n	800adc8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e006      	b.n	800add6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f003 0320 	and.w	r3, r3, #32
 800add0:	2b20      	cmp	r3, #32
 800add2:	d0e8      	beq.n	800ada6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3718      	adds	r7, #24
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800adf0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	0052      	lsls	r2, r2, #1
 800adf8:	431a      	orrs	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	f107 001c 	add.w	r0, r7, #28
 800ae1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d122      	bne.n	800ae6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ae38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ae4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d105      	bne.n	800ae5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f9c0 	bl	800b1e4 <USB_CoreReset>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
 800ae68:	e01a      	b.n	800aea0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f9b4 	bl	800b1e4 <USB_CoreReset>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d106      	bne.n	800ae94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	639a      	str	r2, [r3, #56]	; 0x38
 800ae92:	e005      	b.n	800aea0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d10b      	bne.n	800aebe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f043 0206 	orr.w	r2, r3, #6
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f043 0220 	orr.w	r2, r3, #32
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aeca:	b004      	add	sp, #16
 800aecc:	4770      	bx	lr

0800aece <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f043 0201 	orr.w	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f023 0201 	bic.w	r2, r3, #1
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d115      	bne.n	800af60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af40:	2001      	movs	r0, #1
 800af42:	f7f8 fe77 	bl	8003c34 <HAL_Delay>
      ms++;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3301      	adds	r3, #1
 800af4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f93a 	bl	800b1c6 <USB_GetMode>
 800af52:	4603      	mov	r3, r0
 800af54:	2b01      	cmp	r3, #1
 800af56:	d01e      	beq.n	800af96 <USB_SetCurrentMode+0x84>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2b31      	cmp	r3, #49	; 0x31
 800af5c:	d9f0      	bls.n	800af40 <USB_SetCurrentMode+0x2e>
 800af5e:	e01a      	b.n	800af96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d115      	bne.n	800af92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af72:	2001      	movs	r0, #1
 800af74:	f7f8 fe5e 	bl	8003c34 <HAL_Delay>
      ms++;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f921 	bl	800b1c6 <USB_GetMode>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d005      	beq.n	800af96 <USB_SetCurrentMode+0x84>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b31      	cmp	r3, #49	; 0x31
 800af8e:	d9f0      	bls.n	800af72 <USB_SetCurrentMode+0x60>
 800af90:	e001      	b.n	800af96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e005      	b.n	800afa2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b32      	cmp	r3, #50	; 0x32
 800af9a:	d101      	bne.n	800afa0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e000      	b.n	800afa2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
	...

0800afac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4a13      	ldr	r2, [pc, #76]	; (800b010 <USB_FlushTxFifo+0x64>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d901      	bls.n	800afcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e01b      	b.n	800b004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	daf2      	bge.n	800afba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	019b      	lsls	r3, r3, #6
 800afdc:	f043 0220 	orr.w	r2, r3, #32
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4a08      	ldr	r2, [pc, #32]	; (800b010 <USB_FlushTxFifo+0x64>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d901      	bls.n	800aff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e006      	b.n	800b004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b20      	cmp	r3, #32
 800b000:	d0f0      	beq.n	800afe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	00030d40 	.word	0x00030d40

0800b014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4a11      	ldr	r2, [pc, #68]	; (800b070 <USB_FlushRxFifo+0x5c>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d901      	bls.n	800b032 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e018      	b.n	800b064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	daf2      	bge.n	800b020 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2210      	movs	r2, #16
 800b042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4a08      	ldr	r2, [pc, #32]	; (800b070 <USB_FlushRxFifo+0x5c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d901      	bls.n	800b056 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e006      	b.n	800b064 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 0310 	and.w	r3, r3, #16
 800b05e:	2b10      	cmp	r3, #16
 800b060:	d0f0      	beq.n	800b044 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr
 800b070:	00030d40 	.word	0x00030d40

0800b074 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b074:	b480      	push	{r7}
 800b076:	b089      	sub	sp, #36	; 0x24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4611      	mov	r1, r2
 800b080:	461a      	mov	r2, r3
 800b082:	460b      	mov	r3, r1
 800b084:	71fb      	strb	r3, [r7, #7]
 800b086:	4613      	mov	r3, r2
 800b088:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b096:	2b00      	cmp	r3, #0
 800b098:	d123      	bne.n	800b0e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b09a:	88bb      	ldrh	r3, [r7, #4]
 800b09c:	3303      	adds	r3, #3
 800b09e:	089b      	lsrs	r3, r3, #2
 800b0a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	61bb      	str	r3, [r7, #24]
 800b0a6:	e018      	b.n	800b0da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0a8:	79fb      	ldrb	r3, [r7, #7]
 800b0aa:	031a      	lsls	r2, r3, #12
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	61bb      	str	r3, [r7, #24]
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d3e2      	bcc.n	800b0a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3724      	adds	r7, #36	; 0x24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b08b      	sub	sp, #44	; 0x2c
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b106:	88fb      	ldrh	r3, [r7, #6]
 800b108:	089b      	lsrs	r3, r3, #2
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b116:	2300      	movs	r3, #0
 800b118:	623b      	str	r3, [r7, #32]
 800b11a:	e014      	b.n	800b146 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	601a      	str	r2, [r3, #0]
    pDest++;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	3301      	adds	r3, #1
 800b12c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	3301      	adds	r3, #1
 800b132:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	3301      	adds	r3, #1
 800b138:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	3301      	adds	r3, #1
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	3301      	adds	r3, #1
 800b144:	623b      	str	r3, [r7, #32]
 800b146:	6a3a      	ldr	r2, [r7, #32]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d3e6      	bcc.n	800b11c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b14e:	8bfb      	ldrh	r3, [r7, #30]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01e      	beq.n	800b192 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b15e:	461a      	mov	r2, r3
 800b160:	f107 0310 	add.w	r3, r7, #16
 800b164:	6812      	ldr	r2, [r2, #0]
 800b166:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	b2da      	uxtb	r2, r3
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	701a      	strb	r2, [r3, #0]
      i++;
 800b17a:	6a3b      	ldr	r3, [r7, #32]
 800b17c:	3301      	adds	r3, #1
 800b17e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	3301      	adds	r3, #1
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b186:	8bfb      	ldrh	r3, [r7, #30]
 800b188:	3b01      	subs	r3, #1
 800b18a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b18c:	8bfb      	ldrh	r3, [r7, #30]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1ea      	bne.n	800b168 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b194:	4618      	mov	r0, r3
 800b196:	372c      	adds	r7, #44	; 0x2c
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	f003 0301 	and.w	r3, r3, #1
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a13      	ldr	r2, [pc, #76]	; (800b248 <USB_CoreReset+0x64>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d901      	bls.n	800b202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e01b      	b.n	800b23a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	daf2      	bge.n	800b1f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f043 0201 	orr.w	r2, r3, #1
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a09      	ldr	r2, [pc, #36]	; (800b248 <USB_CoreReset+0x64>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d901      	bls.n	800b22c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e006      	b.n	800b23a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b01      	cmp	r3, #1
 800b236:	d0f0      	beq.n	800b21a <USB_CoreReset+0x36>

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3714      	adds	r7, #20
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	00030d40 	.word	0x00030d40

0800b24c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b24c:	b084      	sub	sp, #16
 800b24e:	b580      	push	{r7, lr}
 800b250:	b086      	sub	sp, #24
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b26c:	461a      	mov	r2, r3
 800b26e:	2300      	movs	r3, #0
 800b270:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b282:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d018      	beq.n	800b2d4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d10a      	bne.n	800b2be <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2b6:	f043 0304 	orr.w	r3, r3, #4
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	e014      	b.n	800b2e8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2cc:	f023 0304 	bic.w	r3, r3, #4
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	e009      	b.n	800b2e8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2e2:	f023 0304 	bic.w	r3, r3, #4
 800b2e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2e8:	2110      	movs	r1, #16
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7ff fe5e 	bl	800afac <USB_FlushTxFifo>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d001      	beq.n	800b2fa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fe8a 	bl	800b014 <USB_FlushRxFifo>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	613b      	str	r3, [r7, #16]
 800b30e:	e015      	b.n	800b33c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4413      	add	r3, r2
 800b318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b31c:	461a      	mov	r2, r3
 800b31e:	f04f 33ff 	mov.w	r3, #4294967295
 800b322:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b330:	461a      	mov	r2, r3
 800b332:	2300      	movs	r3, #0
 800b334:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3301      	adds	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	429a      	cmp	r2, r3
 800b342:	d3e5      	bcc.n	800b310 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f04f 32ff 	mov.w	r2, #4294967295
 800b350:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b364:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a13      	ldr	r2, [pc, #76]	; (800b3b8 <USB_HostInit+0x16c>)
 800b36a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a13      	ldr	r2, [pc, #76]	; (800b3bc <USB_HostInit+0x170>)
 800b370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b374:	e009      	b.n	800b38a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2280      	movs	r2, #128	; 0x80
 800b37a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a10      	ldr	r2, [pc, #64]	; (800b3c0 <USB_HostInit+0x174>)
 800b380:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a0f      	ldr	r2, [pc, #60]	; (800b3c4 <USB_HostInit+0x178>)
 800b386:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d105      	bne.n	800b39c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	f043 0210 	orr.w	r2, r3, #16
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <USB_HostInit+0x17c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3b4:	b004      	add	sp, #16
 800b3b6:	4770      	bx	lr
 800b3b8:	01000200 	.word	0x01000200
 800b3bc:	00e00300 	.word	0x00e00300
 800b3c0:	00600080 	.word	0x00600080
 800b3c4:	004000e0 	.word	0x004000e0
 800b3c8:	a3200008 	.word	0xa3200008

0800b3cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3ea:	f023 0303 	bic.w	r3, r3, #3
 800b3ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	f003 0303 	and.w	r3, r3, #3
 800b3fe:	68f9      	ldr	r1, [r7, #12]
 800b400:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b404:	4313      	orrs	r3, r2
 800b406:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d107      	bne.n	800b41e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b414:	461a      	mov	r2, r3
 800b416:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b41a:	6053      	str	r3, [r2, #4]
 800b41c:	e009      	b.n	800b432 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b41e:	78fb      	ldrb	r3, [r7, #3]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d106      	bne.n	800b432 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b42a:	461a      	mov	r2, r3
 800b42c:	f241 7370 	movw	r3, #6000	; 0x1770
 800b430:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b460:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b46a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b46e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b470:	2064      	movs	r0, #100	; 0x64
 800b472:	f7f8 fbdf 	bl	8003c34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b47e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b482:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b484:	200a      	movs	r0, #10
 800b486:	f7f8 fbd5 	bl	8003c34 <HAL_Delay>

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b4b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <USB_DriveVbus+0x44>
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d106      	bne.n	800b4d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e2:	d109      	bne.n	800b4f8 <USB_DriveVbus+0x64>
 800b4e4:	78fb      	ldrb	r3, [r7, #3]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	0c5b      	lsrs	r3, r3, #17
 800b524:	f003 0303 	and.w	r3, r3, #3
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3714      	adds	r7, #20
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	b29b      	uxth	r3, r3
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	4608      	mov	r0, r1
 800b562:	4611      	mov	r1, r2
 800b564:	461a      	mov	r2, r3
 800b566:	4603      	mov	r3, r0
 800b568:	70fb      	strb	r3, [r7, #3]
 800b56a:	460b      	mov	r3, r1
 800b56c:	70bb      	strb	r3, [r7, #2]
 800b56e:	4613      	mov	r3, r2
 800b570:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b57a:	78fb      	ldrb	r3, [r7, #3]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	4413      	add	r3, r2
 800b582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b586:	461a      	mov	r2, r3
 800b588:	f04f 33ff 	mov.w	r3, #4294967295
 800b58c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b58e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b592:	2b03      	cmp	r3, #3
 800b594:	d87e      	bhi.n	800b694 <USB_HC_Init+0x13c>
 800b596:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <USB_HC_Init+0x44>)
 800b598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59c:	0800b5ad 	.word	0x0800b5ad
 800b5a0:	0800b657 	.word	0x0800b657
 800b5a4:	0800b5ad 	.word	0x0800b5ad
 800b5a8:	0800b619 	.word	0x0800b619
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b5ac:	78fb      	ldrb	r3, [r7, #3]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f240 439d 	movw	r3, #1181	; 0x49d
 800b5be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b5c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	da10      	bge.n	800b5ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	78fa      	ldrb	r2, [r7, #3]
 800b5d8:	0151      	lsls	r1, r2, #5
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	440a      	add	r2, r1
 800b5de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b5e8:	e057      	b.n	800b69a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d051      	beq.n	800b69a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b610:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b614:	60d3      	str	r3, [r2, #12]
      break;
 800b616:	e040      	b.n	800b69a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	015a      	lsls	r2, r3, #5
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	4413      	add	r3, r2
 800b620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b624:	461a      	mov	r2, r3
 800b626:	f240 639d 	movw	r3, #1693	; 0x69d
 800b62a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b62c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b630:	2b00      	cmp	r3, #0
 800b632:	da34      	bge.n	800b69e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	78fa      	ldrb	r2, [r7, #3]
 800b644:	0151      	lsls	r1, r2, #5
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	440a      	add	r2, r1
 800b64a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b64e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b652:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b654:	e023      	b.n	800b69e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b662:	461a      	mov	r2, r3
 800b664:	f240 2325 	movw	r3, #549	; 0x225
 800b668:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b66a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da17      	bge.n	800b6a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b672:	78fb      	ldrb	r3, [r7, #3]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	0151      	lsls	r1, r2, #5
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	440a      	add	r2, r1
 800b688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b68c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b690:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b692:	e006      	b.n	800b6a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	77fb      	strb	r3, [r7, #31]
      break;
 800b698:	e004      	b.n	800b6a4 <USB_HC_Init+0x14c>
      break;
 800b69a:	bf00      	nop
 800b69c:	e002      	b.n	800b6a4 <USB_HC_Init+0x14c>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e000      	b.n	800b6a4 <USB_HC_Init+0x14c>
      break;
 800b6a2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b6a4:	78fb      	ldrb	r3, [r7, #3]
 800b6a6:	015a      	lsls	r2, r3, #5
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	78fa      	ldrb	r2, [r7, #3]
 800b6b4:	0151      	lsls	r1, r2, #5
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	440a      	add	r2, r1
 800b6ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6be:	f043 0302 	orr.w	r3, r3, #2
 800b6c2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6ca:	699a      	ldr	r2, [r3, #24]
 800b6cc:	78fb      	ldrb	r3, [r7, #3]
 800b6ce:	f003 030f 	and.w	r3, r3, #15
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d8:	6939      	ldr	r1, [r7, #16]
 800b6da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b6ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da03      	bge.n	800b6fe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b6f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6fa:	61bb      	str	r3, [r7, #24]
 800b6fc:	e001      	b.n	800b702 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7ff feff 	bl	800b506 <USB_GetHostSpeed>
 800b708:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b70a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d106      	bne.n	800b720 <USB_HC_Init+0x1c8>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b02      	cmp	r3, #2
 800b716:	d003      	beq.n	800b720 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b71c:	617b      	str	r3, [r7, #20]
 800b71e:	e001      	b.n	800b724 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b724:	787b      	ldrb	r3, [r7, #1]
 800b726:	059b      	lsls	r3, r3, #22
 800b728:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b72c:	78bb      	ldrb	r3, [r7, #2]
 800b72e:	02db      	lsls	r3, r3, #11
 800b730:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b734:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b736:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b73a:	049b      	lsls	r3, r3, #18
 800b73c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b740:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b742:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b744:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b748:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	0159      	lsls	r1, r3, #5
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	440b      	add	r3, r1
 800b756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b75a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b760:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b762:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b766:	2b03      	cmp	r3, #3
 800b768:	d003      	beq.n	800b772 <USB_HC_Init+0x21a>
 800b76a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d10f      	bne.n	800b792 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b772:	78fb      	ldrb	r3, [r7, #3]
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	78fa      	ldrb	r2, [r7, #3]
 800b782:	0151      	lsls	r1, r2, #5
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	440a      	add	r2, r1
 800b788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b78c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b790:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b792:	7ffb      	ldrb	r3, [r7, #31]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3720      	adds	r7, #32
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08c      	sub	sp, #48	; 0x30
 800b7a0:	af02      	add	r7, sp, #8
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b7b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d02d      	beq.n	800b822 <USB_HC_StartXfer+0x86>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d129      	bne.n	800b822 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d117      	bne.n	800b804 <USB_HC_StartXfer+0x68>
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	79db      	ldrb	r3, [r3, #7]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <USB_HC_StartXfer+0x48>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	79db      	ldrb	r3, [r3, #7]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d10f      	bne.n	800b804 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	0151      	lsls	r1, r2, #5
 800b7f6:	6a3a      	ldr	r2, [r7, #32]
 800b7f8:	440a      	add	r2, r1
 800b7fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b802:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10b      	bne.n	800b822 <USB_HC_StartXfer+0x86>
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	795b      	ldrb	r3, [r3, #5]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d107      	bne.n	800b822 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	785b      	ldrb	r3, [r3, #1]
 800b816:	4619      	mov	r1, r3
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f000 fa0f 	bl	800bc3c <USB_DoPing>
      return HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	e0f8      	b.n	800ba14 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d018      	beq.n	800b85c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	8912      	ldrh	r2, [r2, #8]
 800b832:	4413      	add	r3, r2
 800b834:	3b01      	subs	r3, #1
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	8912      	ldrh	r2, [r2, #8]
 800b83a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b83e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b842:	8b7b      	ldrh	r3, [r7, #26]
 800b844:	429a      	cmp	r2, r3
 800b846:	d90b      	bls.n	800b860 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b848:	8b7b      	ldrh	r3, [r7, #26]
 800b84a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b84c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	8912      	ldrh	r2, [r2, #8]
 800b852:	fb03 f202 	mul.w	r2, r3, r2
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	611a      	str	r2, [r3, #16]
 800b85a:	e001      	b.n	800b860 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b85c:	2301      	movs	r3, #1
 800b85e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	78db      	ldrb	r3, [r3, #3]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	8912      	ldrh	r2, [r2, #8]
 800b86e:	fb03 f202 	mul.w	r2, r3, r2
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	611a      	str	r2, [r3, #16]
 800b876:	e003      	b.n	800b880 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	695a      	ldr	r2, [r3, #20]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b88a:	04d9      	lsls	r1, r3, #19
 800b88c:	4b63      	ldr	r3, [pc, #396]	; (800ba1c <USB_HC_StartXfer+0x280>)
 800b88e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b890:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	7a9b      	ldrb	r3, [r3, #10]
 800b896:	075b      	lsls	r3, r3, #29
 800b898:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b89c:	69f9      	ldr	r1, [r7, #28]
 800b89e:	0148      	lsls	r0, r1, #5
 800b8a0:	6a39      	ldr	r1, [r7, #32]
 800b8a2:	4401      	add	r1, r0
 800b8a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b8a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b8aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d009      	beq.n	800b8c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	68d9      	ldr	r1, [r3, #12]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8c2:	460a      	mov	r2, r1
 800b8c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bf0c      	ite	eq
 800b8d6:	2301      	moveq	r3, #1
 800b8d8:	2300      	movne	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	0151      	lsls	r1, r2, #5
 800b8f0:	6a3a      	ldr	r2, [r7, #32]
 800b8f2:	440a      	add	r2, r1
 800b8f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b8f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b8fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	4413      	add	r3, r2
 800b906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	7e7b      	ldrb	r3, [r7, #25]
 800b90e:	075b      	lsls	r3, r3, #29
 800b910:	69f9      	ldr	r1, [r7, #28]
 800b912:	0148      	lsls	r0, r1, #5
 800b914:	6a39      	ldr	r1, [r7, #32]
 800b916:	4401      	add	r1, r0
 800b918:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b91c:	4313      	orrs	r3, r2
 800b91e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	4413      	add	r3, r2
 800b928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b936:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	78db      	ldrb	r3, [r3, #3]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b946:	613b      	str	r3, [r7, #16]
 800b948:	e003      	b.n	800b952 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b950:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b958:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	015a      	lsls	r2, r3, #5
 800b95e:	6a3b      	ldr	r3, [r7, #32]
 800b960:	4413      	add	r3, r2
 800b962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b966:	461a      	mov	r2, r3
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	e04e      	b.n	800ba14 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	78db      	ldrb	r3, [r3, #3]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d149      	bne.n	800ba12 <USB_HC_StartXfer+0x276>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d045      	beq.n	800ba12 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	79db      	ldrb	r3, [r3, #7]
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d830      	bhi.n	800b9f0 <USB_HC_StartXfer+0x254>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <USB_HC_StartXfer+0x1f8>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800b9a5 	.word	0x0800b9a5
 800b998:	0800b9c9 	.word	0x0800b9c9
 800b99c:	0800b9a5 	.word	0x0800b9a5
 800b9a0:	0800b9c9 	.word	0x0800b9c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	3303      	adds	r3, #3
 800b9aa:	089b      	lsrs	r3, r3, #2
 800b9ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b9ae:	8afa      	ldrh	r2, [r7, #22]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d91c      	bls.n	800b9f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	f043 0220 	orr.w	r2, r3, #32
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b9c6:	e015      	b.n	800b9f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	3303      	adds	r3, #3
 800b9ce:	089b      	lsrs	r3, r3, #2
 800b9d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b9d2:	8afa      	ldrh	r2, [r7, #22]
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d90a      	bls.n	800b9f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	699b      	ldr	r3, [r3, #24]
 800b9e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	619a      	str	r2, [r3, #24]
        }
        break;
 800b9ee:	e003      	b.n	800b9f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b9f0:	bf00      	nop
 800b9f2:	e002      	b.n	800b9fa <USB_HC_StartXfer+0x25e>
        break;
 800b9f4:	bf00      	nop
 800b9f6:	e000      	b.n	800b9fa <USB_HC_StartXfer+0x25e>
        break;
 800b9f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	68d9      	ldr	r1, [r3, #12]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	785a      	ldrb	r2, [r3, #1]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	2000      	movs	r0, #0
 800ba0a:	9000      	str	r0, [sp, #0]
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff fb31 	bl	800b074 <USB_WritePacket>
  }

  return HAL_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3728      	adds	r7, #40	; 0x28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	1ff80000 	.word	0x1ff80000

0800ba20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	b29b      	uxth	r3, r3
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b089      	sub	sp, #36	; 0x24
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ba52:	78fb      	ldrb	r3, [r7, #3]
 800ba54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	0c9b      	lsrs	r3, r3, #18
 800ba6a:	f003 0303 	and.w	r3, r3, #3
 800ba6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	0fdb      	lsrs	r3, r3, #31
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	f003 0320 	and.w	r3, r3, #32
 800ba8e:	2b20      	cmp	r3, #32
 800ba90:	d104      	bne.n	800ba9c <USB_HC_Halt+0x5a>
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d101      	bne.n	800ba9c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e0c8      	b.n	800bc2e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <USB_HC_Halt+0x66>
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d163      	bne.n	800bb70 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	440a      	add	r2, r1
 800babe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bac6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	f040 80ab 	bne.w	800bc2c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d133      	bne.n	800bb4a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	69ba      	ldr	r2, [r7, #24]
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	69fa      	ldr	r2, [r7, #28]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bafc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	69ba      	ldr	r2, [r7, #24]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb20:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	3301      	adds	r3, #1
 800bb26:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb2e:	d81d      	bhi.n	800bb6c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	015a      	lsls	r2, r3, #5
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	4413      	add	r3, r2
 800bb38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb46:	d0ec      	beq.n	800bb22 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb48:	e070      	b.n	800bc2c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	69fa      	ldr	r2, [r7, #28]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb6a:	e05f      	b.n	800bc2c <USB_HC_Halt+0x1ea>
            break;
 800bb6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb6e:	e05d      	b.n	800bc2c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	0151      	lsls	r1, r2, #5
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	440a      	add	r2, r1
 800bb86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d133      	bne.n	800bc08 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	0151      	lsls	r1, r2, #5
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	440a      	add	r2, r1
 800bbb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbbe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	0151      	lsls	r1, r2, #5
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	440a      	add	r2, r1
 800bbd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bbde:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbec:	d81d      	bhi.n	800bc2a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc04:	d0ec      	beq.n	800bbe0 <USB_HC_Halt+0x19e>
 800bc06:	e011      	b.n	800bc2c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	0151      	lsls	r1, r2, #5
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	440a      	add	r2, r1
 800bc1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	e000      	b.n	800bc2c <USB_HC_Halt+0x1ea>
          break;
 800bc2a:	bf00      	nop
    }
  }

  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3724      	adds	r7, #36	; 0x24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
	...

0800bc3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bc50:	2301      	movs	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	04da      	lsls	r2, r3, #19
 800bc58:	4b15      	ldr	r3, [pc, #84]	; (800bcb0 <USB_DoPing+0x74>)
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	0151      	lsls	r1, r2, #5
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	440a      	add	r2, r1
 800bc64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	371c      	adds	r7, #28
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	1ff80000 	.word	0x1ff80000

0800bcb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff f911 	bl	800aef0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bcce:	2110      	movs	r1, #16
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff f96b 	bl	800afac <USB_FlushTxFifo>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff f997 	bl	800b014 <USB_FlushRxFifo>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61bb      	str	r3, [r7, #24]
 800bcf4:	e01f      	b.n	800bd36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	3301      	adds	r3, #1
 800bd34:	61bb      	str	r3, [r7, #24]
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	2b0f      	cmp	r3, #15
 800bd3a:	d9dc      	bls.n	800bcf6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	e034      	b.n	800bdac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	015a      	lsls	r2, r3, #5
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	4413      	add	r3, r2
 800bd72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd76:	461a      	mov	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd88:	d80c      	bhi.n	800bda4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	015a      	lsls	r2, r3, #5
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bda0:	d0ec      	beq.n	800bd7c <USB_StopHost+0xc8>
 800bda2:	e000      	b.n	800bda6 <USB_StopHost+0xf2>
        break;
 800bda4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	61bb      	str	r3, [r7, #24]
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	2b0f      	cmp	r3, #15
 800bdb0:	d9c7      	bls.n	800bd42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdb8:	461a      	mov	r2, r3
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff f880 	bl	800aece <USB_EnableGlobalInt>

  return ret;
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3720      	adds	r7, #32
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bde6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdea:	2b84      	cmp	r3, #132	; 0x84
 800bdec:	d005      	beq.n	800bdfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bdee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3303      	adds	r3, #3
 800bdf8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be0e:	f3ef 8305 	mrs	r3, IPSR
 800be12:	607b      	str	r3, [r7, #4]
  return(result);
 800be14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800be16:	2b00      	cmp	r3, #0
 800be18:	bf14      	ite	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	2300      	moveq	r3, #0
 800be1e:	b2db      	uxtb	r3, r3
}
 800be20:	4618      	mov	r0, r3
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800be30:	f002 f85c 	bl	800deec <vTaskStartScheduler>
  
  return osOK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	bd80      	pop	{r7, pc}

0800be3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800be3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3c:	b089      	sub	sp, #36	; 0x24
 800be3e:	af04      	add	r7, sp, #16
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d020      	beq.n	800be8e <osThreadCreate+0x54>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01c      	beq.n	800be8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685c      	ldr	r4, [r3, #4]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681d      	ldr	r5, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691e      	ldr	r6, [r3, #16]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ffb6 	bl	800bdd8 <makeFreeRtosPriority>
 800be6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be76:	9202      	str	r2, [sp, #8]
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	9100      	str	r1, [sp, #0]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	4632      	mov	r2, r6
 800be80:	4629      	mov	r1, r5
 800be82:	4620      	mov	r0, r4
 800be84:	f001 fe60 	bl	800db48 <xTaskCreateStatic>
 800be88:	4603      	mov	r3, r0
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e01c      	b.n	800bec8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685c      	ldr	r4, [r3, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be9a:	b29e      	uxth	r6, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7ff ff98 	bl	800bdd8 <makeFreeRtosPriority>
 800bea8:	4602      	mov	r2, r0
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	9200      	str	r2, [sp, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	4632      	mov	r2, r6
 800beb6:	4629      	mov	r1, r5
 800beb8:	4620      	mov	r0, r4
 800beba:	f001 fea2 	bl	800dc02 <xTaskCreate>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d001      	beq.n	800bec8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	e000      	b.n	800beca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bec8:	68fb      	ldr	r3, [r7, #12]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3714      	adds	r7, #20
 800bece:	46bd      	mov	sp, r7
 800bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bed2 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 800bed6:	f002 fc2d 	bl	800e734 <xTaskGetCurrentTaskHandle>
 800beda:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800bedc:	4618      	mov	r0, r3
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <osDelay+0x16>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	e000      	b.n	800bef8 <osDelay+0x18>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 ffc3 	bl	800de84 <vTaskDelay>
  
  return osOK;
 800befe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d016      	beq.n	800bf48 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d10a      	bne.n	800bf36 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	2203      	movs	r2, #3
 800bf26:	9200      	str	r2, [sp, #0]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	2001      	movs	r0, #1
 800bf2e:	f000 fee3 	bl	800ccf8 <xQueueGenericCreateStatic>
 800bf32:	4603      	mov	r3, r0
 800bf34:	e023      	b.n	800bf7e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800bf36:	6838      	ldr	r0, [r7, #0]
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f000 ffdd 	bl	800cefe <xQueueCreateCountingSemaphoreStatic>
 800bf44:	4603      	mov	r3, r0
 800bf46:	e01a      	b.n	800bf7e <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d110      	bne.n	800bf70 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800bf4e:	2203      	movs	r2, #3
 800bf50:	2100      	movs	r1, #0
 800bf52:	2001      	movs	r0, #1
 800bf54:	f000 ff48 	bl	800cde8 <xQueueGenericCreate>
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <osSemaphoreCreate+0x64>
 800bf60:	2300      	movs	r3, #0
 800bf62:	2200      	movs	r2, #0
 800bf64:	2100      	movs	r1, #0
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f001 f834 	bl	800cfd4 <xQueueGenericSend>
      return sema;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	e006      	b.n	800bf7e <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	4611      	mov	r1, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 fff8 	bl	800cf6c <xQueueCreateCountingSemaphore>
 800bf7c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bf9c:	2380      	movs	r3, #128	; 0x80
 800bf9e:	e03a      	b.n	800c016 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfaa:	d103      	bne.n	800bfb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bfac:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb0:	60fb      	str	r3, [r7, #12]
 800bfb2:	e009      	b.n	800bfc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <osSemaphoreWait+0x40>
      ticks = 1;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bfc8:	f7ff ff1e 	bl	800be08 <inHandlerMode>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d017      	beq.n	800c002 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bfd2:	f107 0308 	add.w	r3, r7, #8
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	2100      	movs	r1, #0
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 fc0c 	bl	800d7f8 <xQueueReceiveFromISR>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d001      	beq.n	800bfea <osSemaphoreWait+0x62>
      return osErrorOS;
 800bfe6:	23ff      	movs	r3, #255	; 0xff
 800bfe8:	e015      	b.n	800c016 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d011      	beq.n	800c014 <osSemaphoreWait+0x8c>
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <osSemaphoreWait+0x98>)
 800bff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	e008      	b.n	800c014 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c002:	68f9      	ldr	r1, [r7, #12]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 faeb 	bl	800d5e0 <xQueueSemaphoreTake>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d001      	beq.n	800c014 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c010:	23ff      	movs	r3, #255	; 0xff
 800c012:	e000      	b.n	800c016 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	e000ed04 	.word	0xe000ed04

0800c024 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c030:	2300      	movs	r3, #0
 800c032:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c034:	f7ff fee8 	bl	800be08 <inHandlerMode>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d016      	beq.n	800c06c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 f95e 	bl	800d306 <xQueueGiveFromISR>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d001      	beq.n	800c054 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c050:	23ff      	movs	r3, #255	; 0xff
 800c052:	e017      	b.n	800c084 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d013      	beq.n	800c082 <osSemaphoreRelease+0x5e>
 800c05a:	4b0c      	ldr	r3, [pc, #48]	; (800c08c <osSemaphoreRelease+0x68>)
 800c05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	e00a      	b.n	800c082 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c06c:	2300      	movs	r3, #0
 800c06e:	2200      	movs	r2, #0
 800c070:	2100      	movs	r1, #0
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 ffae 	bl	800cfd4 <xQueueGenericSend>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d001      	beq.n	800c082 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c07e:	23ff      	movs	r3, #255	; 0xff
 800c080:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c082:	68fb      	ldr	r3, [r7, #12]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	e000ed04 	.word	0xe000ed04

0800c090 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c090:	b590      	push	{r4, r7, lr}
 800c092:	b085      	sub	sp, #20
 800c094:	af02      	add	r7, sp, #8
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d011      	beq.n	800c0c6 <osMessageCreate+0x36>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00d      	beq.n	800c0c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6818      	ldr	r0, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6859      	ldr	r1, [r3, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	2400      	movs	r4, #0
 800c0bc:	9400      	str	r4, [sp, #0]
 800c0be:	f000 fe1b 	bl	800ccf8 <xQueueGenericCreateStatic>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	e008      	b.n	800c0d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6818      	ldr	r0, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f000 fe89 	bl	800cde8 <xQueueGenericCreate>
 800c0d6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd90      	pop	{r4, r7, pc}

0800c0e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <osMessagePut+0x1e>
    ticks = 1;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c0fe:	f7ff fe83 	bl	800be08 <inHandlerMode>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d018      	beq.n	800c13a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c108:	f107 0210 	add.w	r2, r7, #16
 800c10c:	f107 0108 	add.w	r1, r7, #8
 800c110:	2300      	movs	r3, #0
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f001 f85c 	bl	800d1d0 <xQueueGenericSendFromISR>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d001      	beq.n	800c122 <osMessagePut+0x42>
      return osErrorOS;
 800c11e:	23ff      	movs	r3, #255	; 0xff
 800c120:	e018      	b.n	800c154 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d014      	beq.n	800c152 <osMessagePut+0x72>
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <osMessagePut+0x7c>)
 800c12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c12e:	601a      	str	r2, [r3, #0]
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	e00b      	b.n	800c152 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c13a:	f107 0108 	add.w	r1, r7, #8
 800c13e:	2300      	movs	r3, #0
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	f000 ff46 	bl	800cfd4 <xQueueGenericSend>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d001      	beq.n	800c152 <osMessagePut+0x72>
      return osErrorOS;
 800c14e:	23ff      	movs	r3, #255	; 0xff
 800c150:	e000      	b.n	800c154 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	e000ed04 	.word	0xe000ed04

0800c160 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c160:	b590      	push	{r4, r7, lr}
 800c162:	b08b      	sub	sp, #44	; 0x2c
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c17a:	2380      	movs	r3, #128	; 0x80
 800c17c:	617b      	str	r3, [r7, #20]
    return event;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	461c      	mov	r4, r3
 800c182:	f107 0314 	add.w	r3, r7, #20
 800c186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c18e:	e054      	b.n	800c23a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c190:	2300      	movs	r3, #0
 800c192:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d103      	bne.n	800c1a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1a6:	e009      	b.n	800c1bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d006      	beq.n	800c1bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <osMessageGet+0x5c>
      ticks = 1;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c1bc:	f7ff fe24 	bl	800be08 <inHandlerMode>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d01c      	beq.n	800c200 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c1c6:	f107 0220 	add.w	r2, r7, #32
 800c1ca:	f107 0314 	add.w	r3, r7, #20
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	68b8      	ldr	r0, [r7, #8]
 800c1d4:	f001 fb10 	bl	800d7f8 <xQueueReceiveFromISR>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d102      	bne.n	800c1e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c1de:	2310      	movs	r3, #16
 800c1e0:	617b      	str	r3, [r7, #20]
 800c1e2:	e001      	b.n	800c1e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d01d      	beq.n	800c22a <osMessageGet+0xca>
 800c1ee:	4b15      	ldr	r3, [pc, #84]	; (800c244 <osMessageGet+0xe4>)
 800c1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	e014      	b.n	800c22a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c200:	f107 0314 	add.w	r3, r7, #20
 800c204:	3304      	adds	r3, #4
 800c206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c208:	4619      	mov	r1, r3
 800c20a:	68b8      	ldr	r0, [r7, #8]
 800c20c:	f001 f908 	bl	800d420 <xQueueReceive>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d102      	bne.n	800c21c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c216:	2310      	movs	r3, #16
 800c218:	617b      	str	r3, [r7, #20]
 800c21a:	e006      	b.n	800c22a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <osMessageGet+0xc6>
 800c222:	2300      	movs	r3, #0
 800c224:	e000      	b.n	800c228 <osMessageGet+0xc8>
 800c226:	2340      	movs	r3, #64	; 0x40
 800c228:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	461c      	mov	r4, r3
 800c22e:	f107 0314 	add.w	r3, r7, #20
 800c232:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	372c      	adds	r7, #44	; 0x2c
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd90      	pop	{r4, r7, pc}
 800c242:	bf00      	nop
 800c244:	e000ed04 	.word	0xe000ed04

0800c248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	; 0x28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c254:	f001 feaa 	bl	800dfac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c258:	4b5d      	ldr	r3, [pc, #372]	; (800c3d0 <pvPortMalloc+0x188>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c260:	f000 f924 	bl	800c4ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c264:	4b5b      	ldr	r3, [pc, #364]	; (800c3d4 <pvPortMalloc+0x18c>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 8093 	bne.w	800c398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01d      	beq.n	800c2b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c278:	2208      	movs	r2, #8
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	2b00      	cmp	r3, #0
 800c288:	d014      	beq.n	800c2b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f023 0307 	bic.w	r3, r3, #7
 800c290:	3308      	adds	r3, #8
 800c292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d06e      	beq.n	800c398 <pvPortMalloc+0x150>
 800c2ba:	4b47      	ldr	r3, [pc, #284]	; (800c3d8 <pvPortMalloc+0x190>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d869      	bhi.n	800c398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2c4:	4b45      	ldr	r3, [pc, #276]	; (800c3dc <pvPortMalloc+0x194>)
 800c2c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2c8:	4b44      	ldr	r3, [pc, #272]	; (800c3dc <pvPortMalloc+0x194>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ce:	e004      	b.n	800c2da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <pvPortMalloc+0xa4>
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f1      	bne.n	800c2d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ec:	4b38      	ldr	r3, [pc, #224]	; (800c3d0 <pvPortMalloc+0x188>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d050      	beq.n	800c398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	2308      	movs	r3, #8
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	429a      	cmp	r2, r3
 800c316:	d91f      	bls.n	800c358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4413      	add	r3, r2
 800c31e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <pvPortMalloc+0xf8>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	613b      	str	r3, [r7, #16]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c352:	69b8      	ldr	r0, [r7, #24]
 800c354:	f000 f90c 	bl	800c570 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c358:	4b1f      	ldr	r3, [pc, #124]	; (800c3d8 <pvPortMalloc+0x190>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	4a1d      	ldr	r2, [pc, #116]	; (800c3d8 <pvPortMalloc+0x190>)
 800c364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c366:	4b1c      	ldr	r3, [pc, #112]	; (800c3d8 <pvPortMalloc+0x190>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4b1d      	ldr	r3, [pc, #116]	; (800c3e0 <pvPortMalloc+0x198>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d203      	bcs.n	800c37a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c372:	4b19      	ldr	r3, [pc, #100]	; (800c3d8 <pvPortMalloc+0x190>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a1a      	ldr	r2, [pc, #104]	; (800c3e0 <pvPortMalloc+0x198>)
 800c378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b15      	ldr	r3, [pc, #84]	; (800c3d4 <pvPortMalloc+0x18c>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	431a      	orrs	r2, r3
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c38e:	4b15      	ldr	r3, [pc, #84]	; (800c3e4 <pvPortMalloc+0x19c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a13      	ldr	r2, [pc, #76]	; (800c3e4 <pvPortMalloc+0x19c>)
 800c396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c398:	f001 fe16 	bl	800dfc8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c3a2:	f7f6 f94f 	bl	8002644 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	f003 0307 	and.w	r3, r3, #7
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <pvPortMalloc+0x17e>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	60fb      	str	r3, [r7, #12]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <pvPortMalloc+0x17c>
	return pvReturn;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3728      	adds	r7, #40	; 0x28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20008f44 	.word	0x20008f44
 800c3d4:	20008f58 	.word	0x20008f58
 800c3d8:	20008f48 	.word	0x20008f48
 800c3dc:	20008f3c 	.word	0x20008f3c
 800c3e0:	20008f4c 	.word	0x20008f4c
 800c3e4:	20008f50 	.word	0x20008f50

0800c3e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d04d      	beq.n	800c496 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	425b      	negs	r3, r3
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	4413      	add	r3, r2
 800c402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	685a      	ldr	r2, [r3, #4]
 800c40c:	4b24      	ldr	r3, [pc, #144]	; (800c4a0 <vPortFree+0xb8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4013      	ands	r3, r2
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10a      	bne.n	800c42c <vPortFree+0x44>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	60fb      	str	r3, [r7, #12]
}
 800c428:	bf00      	nop
 800c42a:	e7fe      	b.n	800c42a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00a      	beq.n	800c44a <vPortFree+0x62>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60bb      	str	r3, [r7, #8]
}
 800c446:	bf00      	nop
 800c448:	e7fe      	b.n	800c448 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	4b14      	ldr	r3, [pc, #80]	; (800c4a0 <vPortFree+0xb8>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4013      	ands	r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01e      	beq.n	800c496 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d11a      	bne.n	800c496 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	4b0e      	ldr	r3, [pc, #56]	; (800c4a0 <vPortFree+0xb8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	43db      	mvns	r3, r3
 800c46a:	401a      	ands	r2, r3
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c470:	f001 fd9c 	bl	800dfac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <vPortFree+0xbc>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4413      	add	r3, r2
 800c47e:	4a09      	ldr	r2, [pc, #36]	; (800c4a4 <vPortFree+0xbc>)
 800c480:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c482:	6938      	ldr	r0, [r7, #16]
 800c484:	f000 f874 	bl	800c570 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c488:	4b07      	ldr	r3, [pc, #28]	; (800c4a8 <vPortFree+0xc0>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	4a06      	ldr	r2, [pc, #24]	; (800c4a8 <vPortFree+0xc0>)
 800c490:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c492:	f001 fd99 	bl	800dfc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c496:	bf00      	nop
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20008f58 	.word	0x20008f58
 800c4a4:	20008f48 	.word	0x20008f48
 800c4a8:	20008f54 	.word	0x20008f54

0800c4ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4b8:	4b27      	ldr	r3, [pc, #156]	; (800c558 <prvHeapInit+0xac>)
 800c4ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f003 0307 	and.w	r3, r3, #7
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00c      	beq.n	800c4e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3307      	adds	r3, #7
 800c4ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f023 0307 	bic.w	r3, r3, #7
 800c4d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	4a1f      	ldr	r2, [pc, #124]	; (800c558 <prvHeapInit+0xac>)
 800c4dc:	4413      	add	r3, r2
 800c4de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4e4:	4a1d      	ldr	r2, [pc, #116]	; (800c55c <prvHeapInit+0xb0>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ea:	4b1c      	ldr	r3, [pc, #112]	; (800c55c <prvHeapInit+0xb0>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4f8:	2208      	movs	r2, #8
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	1a9b      	subs	r3, r3, r2
 800c4fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f023 0307 	bic.w	r3, r3, #7
 800c506:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4a15      	ldr	r2, [pc, #84]	; (800c560 <prvHeapInit+0xb4>)
 800c50c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <prvHeapInit+0xb4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c516:	4b12      	ldr	r3, [pc, #72]	; (800c560 <prvHeapInit+0xb4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c52c:	4b0c      	ldr	r3, [pc, #48]	; (800c560 <prvHeapInit+0xb4>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	4a0a      	ldr	r2, [pc, #40]	; (800c564 <prvHeapInit+0xb8>)
 800c53a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	4a09      	ldr	r2, [pc, #36]	; (800c568 <prvHeapInit+0xbc>)
 800c542:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <prvHeapInit+0xc0>)
 800c546:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c54a:	601a      	str	r2, [r3, #0]
}
 800c54c:	bf00      	nop
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	20000f3c 	.word	0x20000f3c
 800c55c:	20008f3c 	.word	0x20008f3c
 800c560:	20008f44 	.word	0x20008f44
 800c564:	20008f4c 	.word	0x20008f4c
 800c568:	20008f48 	.word	0x20008f48
 800c56c:	20008f58 	.word	0x20008f58

0800c570 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c578:	4b28      	ldr	r3, [pc, #160]	; (800c61c <prvInsertBlockIntoFreeList+0xac>)
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	e002      	b.n	800c584 <prvInsertBlockIntoFreeList+0x14>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d8f7      	bhi.n	800c57e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	4413      	add	r3, r2
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d108      	bne.n	800c5b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	685a      	ldr	r2, [r3, #4]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	441a      	add	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	441a      	add	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d118      	bne.n	800c5f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <prvInsertBlockIntoFreeList+0xb0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d00d      	beq.n	800c5ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	441a      	add	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	e008      	b.n	800c600 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5ee:	4b0c      	ldr	r3, [pc, #48]	; (800c620 <prvInsertBlockIntoFreeList+0xb0>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	601a      	str	r2, [r3, #0]
 800c5f6:	e003      	b.n	800c600 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d002      	beq.n	800c60e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20008f3c 	.word	0x20008f3c
 800c620:	20008f44 	.word	0x20008f44

0800c624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f103 0208 	add.w	r2, r3, #8
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f04f 32ff 	mov.w	r2, #4294967295
 800c63c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f103 0208 	add.w	r2, r3, #8
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f103 0208 	add.w	r2, r3, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c67e:	b480      	push	{r7}
 800c680:	b085      	sub	sp, #20
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d103      	bne.n	800c6e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e00c      	b.n	800c700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e002      	b.n	800c6f4 <vListInsert+0x2e>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d2f6      	bcs.n	800c6ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
}
 800c72c:	bf00      	nop
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6892      	ldr	r2, [r2, #8]
 800c74e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6852      	ldr	r2, [r2, #4]
 800c758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	429a      	cmp	r2, r3
 800c762:	d103      	bne.n	800c76c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1e5a      	subs	r2, r3, #1
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3b04      	subs	r3, #4
 800c79c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3b04      	subs	r3, #4
 800c7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f023 0201 	bic.w	r2, r3, #1
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c7bc:	4a0c      	ldr	r2, [pc, #48]	; (800c7f0 <pxPortInitialiseStack+0x64>)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3b14      	subs	r3, #20
 800c7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3b04      	subs	r3, #4
 800c7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f06f 0202 	mvn.w	r2, #2
 800c7da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	3b20      	subs	r3, #32
 800c7e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	0800c7f5 	.word	0x0800c7f5

0800c7f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7fe:	4b12      	ldr	r3, [pc, #72]	; (800c848 <prvTaskExitError+0x54>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c806:	d00a      	beq.n	800c81e <prvTaskExitError+0x2a>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	60fb      	str	r3, [r7, #12]
}
 800c81a:	bf00      	nop
 800c81c:	e7fe      	b.n	800c81c <prvTaskExitError+0x28>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	60bb      	str	r3, [r7, #8]
}
 800c830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c832:	bf00      	nop
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0fc      	beq.n	800c834 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c83a:	bf00      	nop
 800c83c:	bf00      	nop
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	200002e8 	.word	0x200002e8
 800c84c:	00000000 	.word	0x00000000

0800c850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c850:	4b07      	ldr	r3, [pc, #28]	; (800c870 <pxCurrentTCBConst2>)
 800c852:	6819      	ldr	r1, [r3, #0]
 800c854:	6808      	ldr	r0, [r1, #0]
 800c856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85a:	f380 8809 	msr	PSP, r0
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f04f 0000 	mov.w	r0, #0
 800c866:	f380 8811 	msr	BASEPRI, r0
 800c86a:	4770      	bx	lr
 800c86c:	f3af 8000 	nop.w

0800c870 <pxCurrentTCBConst2>:
 800c870:	20008f64 	.word	0x20008f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop

0800c878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c878:	4808      	ldr	r0, [pc, #32]	; (800c89c <prvPortStartFirstTask+0x24>)
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	6800      	ldr	r0, [r0, #0]
 800c87e:	f380 8808 	msr	MSP, r0
 800c882:	f04f 0000 	mov.w	r0, #0
 800c886:	f380 8814 	msr	CONTROL, r0
 800c88a:	b662      	cpsie	i
 800c88c:	b661      	cpsie	f
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	df00      	svc	0
 800c898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c89a:	bf00      	nop
 800c89c:	e000ed08 	.word	0xe000ed08

0800c8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8a6:	4b46      	ldr	r3, [pc, #280]	; (800c9c0 <xPortStartScheduler+0x120>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a46      	ldr	r2, [pc, #280]	; (800c9c4 <xPortStartScheduler+0x124>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d10a      	bne.n	800c8c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	613b      	str	r3, [r7, #16]
}
 800c8c2:	bf00      	nop
 800c8c4:	e7fe      	b.n	800c8c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8c6:	4b3e      	ldr	r3, [pc, #248]	; (800c9c0 <xPortStartScheduler+0x120>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a3f      	ldr	r2, [pc, #252]	; (800c9c8 <xPortStartScheduler+0x128>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d10a      	bne.n	800c8e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	60fb      	str	r3, [r7, #12]
}
 800c8e2:	bf00      	nop
 800c8e4:	e7fe      	b.n	800c8e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8e6:	4b39      	ldr	r3, [pc, #228]	; (800c9cc <xPortStartScheduler+0x12c>)
 800c8e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	22ff      	movs	r2, #255	; 0xff
 800c8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	4b31      	ldr	r3, [pc, #196]	; (800c9d0 <xPortStartScheduler+0x130>)
 800c90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c90e:	4b31      	ldr	r3, [pc, #196]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c910:	2207      	movs	r2, #7
 800c912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c914:	e009      	b.n	800c92a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c916:	4b2f      	ldr	r3, [pc, #188]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3b01      	subs	r3, #1
 800c91c:	4a2d      	ldr	r2, [pc, #180]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c920:	78fb      	ldrb	r3, [r7, #3]
 800c922:	b2db      	uxtb	r3, r3
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	b2db      	uxtb	r3, r3
 800c928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c932:	2b80      	cmp	r3, #128	; 0x80
 800c934:	d0ef      	beq.n	800c916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c936:	4b27      	ldr	r3, [pc, #156]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f1c3 0307 	rsb	r3, r3, #7
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d00a      	beq.n	800c958 <xPortStartScheduler+0xb8>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60bb      	str	r3, [r7, #8]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c958:	4b1e      	ldr	r3, [pc, #120]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	021b      	lsls	r3, r3, #8
 800c95e:	4a1d      	ldr	r2, [pc, #116]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c962:	4b1c      	ldr	r3, [pc, #112]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c96a:	4a1a      	ldr	r2, [pc, #104]	; (800c9d4 <xPortStartScheduler+0x134>)
 800c96c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	b2da      	uxtb	r2, r3
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c976:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <xPortStartScheduler+0x138>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a17      	ldr	r2, [pc, #92]	; (800c9d8 <xPortStartScheduler+0x138>)
 800c97c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c982:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <xPortStartScheduler+0x138>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a14      	ldr	r2, [pc, #80]	; (800c9d8 <xPortStartScheduler+0x138>)
 800c988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c98c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c98e:	f000 f8dd 	bl	800cb4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c992:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <xPortStartScheduler+0x13c>)
 800c994:	2200      	movs	r2, #0
 800c996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c998:	f000 f8fc 	bl	800cb94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c99c:	4b10      	ldr	r3, [pc, #64]	; (800c9e0 <xPortStartScheduler+0x140>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a0f      	ldr	r2, [pc, #60]	; (800c9e0 <xPortStartScheduler+0x140>)
 800c9a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c9a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9a8:	f7ff ff66 	bl	800c878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9ac:	f001 fc60 	bl	800e270 <vTaskSwitchContext>
	prvTaskExitError();
 800c9b0:	f7ff ff20 	bl	800c7f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	e000ed00 	.word	0xe000ed00
 800c9c4:	410fc271 	.word	0x410fc271
 800c9c8:	410fc270 	.word	0x410fc270
 800c9cc:	e000e400 	.word	0xe000e400
 800c9d0:	20008f5c 	.word	0x20008f5c
 800c9d4:	20008f60 	.word	0x20008f60
 800c9d8:	e000ed20 	.word	0xe000ed20
 800c9dc:	200002e8 	.word	0x200002e8
 800c9e0:	e000ef34 	.word	0xe000ef34

0800c9e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	607b      	str	r3, [r7, #4]
}
 800c9fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <vPortEnterCritical+0x58>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	4a0d      	ldr	r2, [pc, #52]	; (800ca3c <vPortEnterCritical+0x58>)
 800ca06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca08:	4b0c      	ldr	r3, [pc, #48]	; (800ca3c <vPortEnterCritical+0x58>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d10f      	bne.n	800ca30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <vPortEnterCritical+0x5c>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00a      	beq.n	800ca30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	603b      	str	r3, [r7, #0]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <vPortEnterCritical+0x4a>
	}
}
 800ca30:	bf00      	nop
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	200002e8 	.word	0x200002e8
 800ca40:	e000ed04 	.word	0xe000ed04

0800ca44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <vPortExitCritical+0x50>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10a      	bne.n	800ca68 <vPortExitCritical+0x24>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	607b      	str	r3, [r7, #4]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca68:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <vPortExitCritical+0x50>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	4a09      	ldr	r2, [pc, #36]	; (800ca94 <vPortExitCritical+0x50>)
 800ca70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca72:	4b08      	ldr	r3, [pc, #32]	; (800ca94 <vPortExitCritical+0x50>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d105      	bne.n	800ca86 <vPortExitCritical+0x42>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ca84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca86:	bf00      	nop
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	200002e8 	.word	0x200002e8
	...

0800caa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800caa0:	f3ef 8009 	mrs	r0, PSP
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4b15      	ldr	r3, [pc, #84]	; (800cb00 <pxCurrentTCBConst>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	f01e 0f10 	tst.w	lr, #16
 800cab0:	bf08      	it	eq
 800cab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caba:	6010      	str	r0, [r2, #0]
 800cabc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cac4:	f380 8811 	msr	BASEPRI, r0
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f001 fbce 	bl	800e270 <vTaskSwitchContext>
 800cad4:	f04f 0000 	mov.w	r0, #0
 800cad8:	f380 8811 	msr	BASEPRI, r0
 800cadc:	bc09      	pop	{r0, r3}
 800cade:	6819      	ldr	r1, [r3, #0]
 800cae0:	6808      	ldr	r0, [r1, #0]
 800cae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae6:	f01e 0f10 	tst.w	lr, #16
 800caea:	bf08      	it	eq
 800caec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caf0:	f380 8809 	msr	PSP, r0
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	4770      	bx	lr
 800cafa:	bf00      	nop
 800cafc:	f3af 8000 	nop.w

0800cb00 <pxCurrentTCBConst>:
 800cb00:	20008f64 	.word	0x20008f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop

0800cb08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	607b      	str	r3, [r7, #4]
}
 800cb20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb22:	f001 faed 	bl	800e100 <xTaskIncrementTick>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb2c:	4b06      	ldr	r3, [pc, #24]	; (800cb48 <SysTick_Handler+0x40>)
 800cb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb32:	601a      	str	r2, [r3, #0]
 800cb34:	2300      	movs	r3, #0
 800cb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	f383 8811 	msr	BASEPRI, r3
}
 800cb3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb50:	4b0b      	ldr	r3, [pc, #44]	; (800cb80 <vPortSetupTimerInterrupt+0x34>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb56:	4b0b      	ldr	r3, [pc, #44]	; (800cb84 <vPortSetupTimerInterrupt+0x38>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <vPortSetupTimerInterrupt+0x3c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <vPortSetupTimerInterrupt+0x40>)
 800cb62:	fba2 2303 	umull	r2, r3, r2, r3
 800cb66:	099b      	lsrs	r3, r3, #6
 800cb68:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <vPortSetupTimerInterrupt+0x44>)
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb6e:	4b04      	ldr	r3, [pc, #16]	; (800cb80 <vPortSetupTimerInterrupt+0x34>)
 800cb70:	2207      	movs	r2, #7
 800cb72:	601a      	str	r2, [r3, #0]
}
 800cb74:	bf00      	nop
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	e000e010 	.word	0xe000e010
 800cb84:	e000e018 	.word	0xe000e018
 800cb88:	200002dc 	.word	0x200002dc
 800cb8c:	10624dd3 	.word	0x10624dd3
 800cb90:	e000e014 	.word	0xe000e014

0800cb94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cba4 <vPortEnableVFP+0x10>
 800cb98:	6801      	ldr	r1, [r0, #0]
 800cb9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb9e:	6001      	str	r1, [r0, #0]
 800cba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cba2:	bf00      	nop
 800cba4:	e000ed88 	.word	0xe000ed88

0800cba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cbae:	f3ef 8305 	mrs	r3, IPSR
 800cbb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b0f      	cmp	r3, #15
 800cbb8:	d914      	bls.n	800cbe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbba:	4a17      	ldr	r2, [pc, #92]	; (800cc18 <vPortValidateInterruptPriority+0x70>)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbc4:	4b15      	ldr	r3, [pc, #84]	; (800cc1c <vPortValidateInterruptPriority+0x74>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	7afa      	ldrb	r2, [r7, #11]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d20a      	bcs.n	800cbe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd2:	f383 8811 	msr	BASEPRI, r3
 800cbd6:	f3bf 8f6f 	isb	sy
 800cbda:	f3bf 8f4f 	dsb	sy
 800cbde:	607b      	str	r3, [r7, #4]
}
 800cbe0:	bf00      	nop
 800cbe2:	e7fe      	b.n	800cbe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbe4:	4b0e      	ldr	r3, [pc, #56]	; (800cc20 <vPortValidateInterruptPriority+0x78>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <vPortValidateInterruptPriority+0x7c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d90a      	bls.n	800cc0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	603b      	str	r3, [r7, #0]
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <vPortValidateInterruptPriority+0x60>
	}
 800cc0a:	bf00      	nop
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	e000e3f0 	.word	0xe000e3f0
 800cc1c:	20008f5c 	.word	0x20008f5c
 800cc20:	e000ed0c 	.word	0xe000ed0c
 800cc24:	20008f60 	.word	0x20008f60

0800cc28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d10a      	bne.n	800cc52 <xQueueGenericReset+0x2a>
	__asm volatile
 800cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	60bb      	str	r3, [r7, #8]
}
 800cc4e:	bf00      	nop
 800cc50:	e7fe      	b.n	800cc50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc52:	f7ff fec7 	bl	800c9e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc62:	fb01 f303 	mul.w	r3, r1, r3
 800cc66:	441a      	add	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc82:	3b01      	subs	r3, #1
 800cc84:	68f9      	ldr	r1, [r7, #12]
 800cc86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc88:	fb01 f303 	mul.w	r3, r1, r3
 800cc8c:	441a      	add	r2, r3
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	22ff      	movs	r2, #255	; 0xff
 800cc96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	22ff      	movs	r2, #255	; 0xff
 800cc9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d114      	bne.n	800ccd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01a      	beq.n	800cce6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3310      	adds	r3, #16
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f001 fb7f 	bl	800e3b8 <xTaskRemoveFromEventList>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d012      	beq.n	800cce6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccc0:	4b0c      	ldr	r3, [pc, #48]	; (800ccf4 <xQueueGenericReset+0xcc>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	e009      	b.n	800cce6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3310      	adds	r3, #16
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fca4 	bl	800c624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	3324      	adds	r3, #36	; 0x24
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7ff fc9f 	bl	800c624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cce6:	f7ff fead 	bl	800ca44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ccea:	2301      	movs	r3, #1
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	e000ed04 	.word	0xe000ed04

0800ccf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08e      	sub	sp, #56	; 0x38
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10a      	bne.n	800cd3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <xQueueGenericCreateStatic+0x52>
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <xQueueGenericCreateStatic+0x56>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e000      	b.n	800cd50 <xQueueGenericCreateStatic+0x58>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	623b      	str	r3, [r7, #32]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <xQueueGenericCreateStatic+0x7e>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <xQueueGenericCreateStatic+0x82>
 800cd76:	2301      	movs	r3, #1
 800cd78:	e000      	b.n	800cd7c <xQueueGenericCreateStatic+0x84>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	61fb      	str	r3, [r7, #28]
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd96:	2348      	movs	r3, #72	; 0x48
 800cd98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b48      	cmp	r3, #72	; 0x48
 800cd9e:	d00a      	beq.n	800cdb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	61bb      	str	r3, [r7, #24]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00d      	beq.n	800cdde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 f83f 	bl	800ce5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3730      	adds	r7, #48	; 0x30
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08a      	sub	sp, #40	; 0x28
 800cdec:	af02      	add	r7, sp, #8
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	613b      	str	r3, [r7, #16]
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	fb02 f303 	mul.w	r3, r2, r3
 800ce1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	3348      	adds	r3, #72	; 0x48
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fa11 	bl	800c248 <pvPortMalloc>
 800ce26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d011      	beq.n	800ce52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	3348      	adds	r3, #72	; 0x48
 800ce36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce40:	79fa      	ldrb	r2, [r7, #7]
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	4613      	mov	r3, r2
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f805 	bl	800ce5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce52:	69bb      	ldr	r3, [r7, #24]
	}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3720      	adds	r7, #32
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d103      	bne.n	800ce78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	69ba      	ldr	r2, [r7, #24]
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	e002      	b.n	800ce7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	69b8      	ldr	r0, [r7, #24]
 800ce8e:	f7ff fecb 	bl	800cc28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b082      	sub	sp, #8
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00e      	beq.n	800cec6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ceba:	2300      	movs	r3, #0
 800cebc:	2200      	movs	r2, #0
 800cebe:	2100      	movs	r1, #0
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f887 	bl	800cfd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b086      	sub	sp, #24
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	4603      	mov	r3, r0
 800ced6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ced8:	2301      	movs	r3, #1
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	2300      	movs	r3, #0
 800cede:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cee0:	79fb      	ldrb	r3, [r7, #7]
 800cee2:	461a      	mov	r2, r3
 800cee4:	6939      	ldr	r1, [r7, #16]
 800cee6:	6978      	ldr	r0, [r7, #20]
 800cee8:	f7ff ff7e 	bl	800cde8 <xQueueGenericCreate>
 800ceec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7ff ffd3 	bl	800ce9a <prvInitialiseMutex>

		return xNewQueue;
 800cef4:	68fb      	ldr	r3, [r7, #12]
	}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b08a      	sub	sp, #40	; 0x28
 800cf02:	af02      	add	r7, sp, #8
 800cf04:	60f8      	str	r0, [r7, #12]
 800cf06:	60b9      	str	r1, [r7, #8]
 800cf08:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	61bb      	str	r3, [r7, #24]
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d90a      	bls.n	800cf44 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	617b      	str	r3, [r7, #20]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cf44:	2302      	movs	r3, #2
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff fed2 	bl	800ccf8 <xQueueGenericCreateStatic>
 800cf54:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cf62:	69fb      	ldr	r3, [r7, #28]
	}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	613b      	str	r3, [r7, #16]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d90a      	bls.n	800cfb0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	60fb      	str	r3, [r7, #12]
}
 800cfac:	bf00      	nop
 800cfae:	e7fe      	b.n	800cfae <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff ff17 	bl	800cde8 <xQueueGenericCreate>
 800cfba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d002      	beq.n	800cfc8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	683a      	ldr	r2, [r7, #0]
 800cfc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cfc8:	697b      	ldr	r3, [r7, #20]
	}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
	...

0800cfd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b08e      	sub	sp, #56	; 0x38
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10a      	bne.n	800d006 <xQueueGenericSend+0x32>
	__asm volatile
 800cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d002:	bf00      	nop
 800d004:	e7fe      	b.n	800d004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d103      	bne.n	800d014 <xQueueGenericSend+0x40>
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d010:	2b00      	cmp	r3, #0
 800d012:	d101      	bne.n	800d018 <xQueueGenericSend+0x44>
 800d014:	2301      	movs	r3, #1
 800d016:	e000      	b.n	800d01a <xQueueGenericSend+0x46>
 800d018:	2300      	movs	r3, #0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10a      	bne.n	800d034 <xQueueGenericSend+0x60>
	__asm volatile
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d030:	bf00      	nop
 800d032:	e7fe      	b.n	800d032 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b02      	cmp	r3, #2
 800d038:	d103      	bne.n	800d042 <xQueueGenericSend+0x6e>
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d101      	bne.n	800d046 <xQueueGenericSend+0x72>
 800d042:	2301      	movs	r3, #1
 800d044:	e000      	b.n	800d048 <xQueueGenericSend+0x74>
 800d046:	2300      	movs	r3, #0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10a      	bne.n	800d062 <xQueueGenericSend+0x8e>
	__asm volatile
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	623b      	str	r3, [r7, #32]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d062:	f001 fb77 	bl	800e754 <xTaskGetSchedulerState>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <xQueueGenericSend+0x9e>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <xQueueGenericSend+0xa2>
 800d072:	2301      	movs	r3, #1
 800d074:	e000      	b.n	800d078 <xQueueGenericSend+0xa4>
 800d076:	2300      	movs	r3, #0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <xQueueGenericSend+0xbe>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	61fb      	str	r3, [r7, #28]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d092:	f7ff fca7 	bl	800c9e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d302      	bcc.n	800d0a8 <xQueueGenericSend+0xd4>
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d129      	bne.n	800d0fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ae:	f000 fc3b 	bl	800d928 <prvCopyDataToQueue>
 800d0b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d010      	beq.n	800d0de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0be:	3324      	adds	r3, #36	; 0x24
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f001 f979 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d013      	beq.n	800d0f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d0cc:	4b3f      	ldr	r3, [pc, #252]	; (800d1cc <xQueueGenericSend+0x1f8>)
 800d0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d2:	601a      	str	r2, [r3, #0]
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	e00a      	b.n	800d0f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d0e4:	4b39      	ldr	r3, [pc, #228]	; (800d1cc <xQueueGenericSend+0x1f8>)
 800d0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d0f4:	f7ff fca6 	bl	800ca44 <vPortExitCritical>
				return pdPASS;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e063      	b.n	800d1c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d103      	bne.n	800d10a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d102:	f7ff fc9f 	bl	800ca44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d106:	2300      	movs	r3, #0
 800d108:	e05c      	b.n	800d1c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d110:	f107 0314 	add.w	r3, r7, #20
 800d114:	4618      	mov	r0, r3
 800d116:	f001 f9b1 	bl	800e47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d11a:	2301      	movs	r3, #1
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d11e:	f7ff fc91 	bl	800ca44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d122:	f000 ff43 	bl	800dfac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d126:	f7ff fc5d 	bl	800c9e4 <vPortEnterCritical>
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d130:	b25b      	sxtb	r3, r3
 800d132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d136:	d103      	bne.n	800d140 <xQueueGenericSend+0x16c>
 800d138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d146:	b25b      	sxtb	r3, r3
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d103      	bne.n	800d156 <xQueueGenericSend+0x182>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d150:	2200      	movs	r2, #0
 800d152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d156:	f7ff fc75 	bl	800ca44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d15a:	1d3a      	adds	r2, r7, #4
 800d15c:	f107 0314 	add.w	r3, r7, #20
 800d160:	4611      	mov	r1, r2
 800d162:	4618      	mov	r0, r3
 800d164:	f001 f9a0 	bl	800e4a8 <xTaskCheckForTimeOut>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d124      	bne.n	800d1b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d16e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d170:	f000 fcd2 	bl	800db18 <prvIsQueueFull>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d018      	beq.n	800d1ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	3310      	adds	r3, #16
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f001 f8f4 	bl	800e370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d18a:	f000 fc5d 	bl	800da48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d18e:	f000 ff1b 	bl	800dfc8 <xTaskResumeAll>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	f47f af7c 	bne.w	800d092 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d19a:	4b0c      	ldr	r3, [pc, #48]	; (800d1cc <xQueueGenericSend+0x1f8>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	e772      	b.n	800d092 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d1ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ae:	f000 fc4b 	bl	800da48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1b2:	f000 ff09 	bl	800dfc8 <xTaskResumeAll>
 800d1b6:	e76c      	b.n	800d092 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1ba:	f000 fc45 	bl	800da48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1be:	f000 ff03 	bl	800dfc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3738      	adds	r7, #56	; 0x38
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	e000ed04 	.word	0xe000ed04

0800d1d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b090      	sub	sp, #64	; 0x40
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10a      	bne.n	800d1fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ec:	f383 8811 	msr	BASEPRI, r3
 800d1f0:	f3bf 8f6f 	isb	sy
 800d1f4:	f3bf 8f4f 	dsb	sy
 800d1f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1fa:	bf00      	nop
 800d1fc:	e7fe      	b.n	800d1fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <xQueueGenericSendFromISR+0x3c>
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <xQueueGenericSendFromISR+0x40>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e000      	b.n	800d212 <xQueueGenericSendFromISR+0x42>
 800d210:	2300      	movs	r3, #0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d103      	bne.n	800d23a <xQueueGenericSendFromISR+0x6a>
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d236:	2b01      	cmp	r3, #1
 800d238:	d101      	bne.n	800d23e <xQueueGenericSendFromISR+0x6e>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <xQueueGenericSendFromISR+0x70>
 800d23e:	2300      	movs	r3, #0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d10a      	bne.n	800d25a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	623b      	str	r3, [r7, #32]
}
 800d256:	bf00      	nop
 800d258:	e7fe      	b.n	800d258 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d25a:	f7ff fca5 	bl	800cba8 <vPortValidateInterruptPriority>
	__asm volatile
 800d25e:	f3ef 8211 	mrs	r2, BASEPRI
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	61fa      	str	r2, [r7, #28]
 800d274:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d276:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d278:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d282:	429a      	cmp	r2, r3
 800d284:	d302      	bcc.n	800d28c <xQueueGenericSendFromISR+0xbc>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d12f      	bne.n	800d2ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	68b9      	ldr	r1, [r7, #8]
 800d2a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2a2:	f000 fb41 	bl	800d928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d112      	bne.n	800d2d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d016      	beq.n	800d2e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	3324      	adds	r3, #36	; 0x24
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 f87b 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00e      	beq.n	800d2e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00b      	beq.n	800d2e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	e007      	b.n	800d2e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	b25a      	sxtb	r2, r3
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d2ea:	e001      	b.n	800d2f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	f383 8811 	msr	BASEPRI, r3
}
 800d2fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3740      	adds	r7, #64	; 0x40
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b08e      	sub	sp, #56	; 0x38
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	623b      	str	r3, [r7, #32]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d334:	2b00      	cmp	r3, #0
 800d336:	d00a      	beq.n	800d34e <xQueueGiveFromISR+0x48>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	61fb      	str	r3, [r7, #28]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d103      	bne.n	800d35e <xQueueGiveFromISR+0x58>
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <xQueueGiveFromISR+0x5c>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <xQueueGiveFromISR+0x5e>
 800d362:	2300      	movs	r3, #0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <xQueueGiveFromISR+0x78>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	61bb      	str	r3, [r7, #24]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d37e:	f7ff fc13 	bl	800cba8 <vPortValidateInterruptPriority>
	__asm volatile
 800d382:	f3ef 8211 	mrs	r2, BASEPRI
 800d386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	617a      	str	r2, [r7, #20]
 800d398:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d39a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d39c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d22b      	bcs.n	800d406 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	1c5a      	adds	r2, r3, #1
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3c8:	d112      	bne.n	800d3f0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d016      	beq.n	800d400 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	3324      	adds	r3, #36	; 0x24
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 ffee 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00e      	beq.n	800d400 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00b      	beq.n	800d400 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e007      	b.n	800d400 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	b25a      	sxtb	r2, r3
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d400:	2301      	movs	r3, #1
 800d402:	637b      	str	r3, [r7, #52]	; 0x34
 800d404:	e001      	b.n	800d40a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d406:	2300      	movs	r3, #0
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
 800d40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f383 8811 	msr	BASEPRI, r3
}
 800d414:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3738      	adds	r7, #56	; 0x38
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b08c      	sub	sp, #48	; 0x30
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10a      	bne.n	800d450 <xQueueReceive+0x30>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	623b      	str	r3, [r7, #32]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d103      	bne.n	800d45e <xQueueReceive+0x3e>
 800d456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <xQueueReceive+0x42>
 800d45e:	2301      	movs	r3, #1
 800d460:	e000      	b.n	800d464 <xQueueReceive+0x44>
 800d462:	2300      	movs	r3, #0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueReceive+0x5e>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61fb      	str	r3, [r7, #28]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d47e:	f001 f969 	bl	800e754 <xTaskGetSchedulerState>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <xQueueReceive+0x6e>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <xQueueReceive+0x72>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <xQueueReceive+0x74>
 800d492:	2300      	movs	r3, #0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xQueueReceive+0x8e>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	61bb      	str	r3, [r7, #24]
}
 800d4aa:	bf00      	nop
 800d4ac:	e7fe      	b.n	800d4ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ae:	f7ff fa99 	bl	800c9e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d01f      	beq.n	800d4fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4c2:	f000 fa9b 	bl	800d9fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	1e5a      	subs	r2, r3, #1
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00f      	beq.n	800d4f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d8:	3310      	adds	r3, #16
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 ff6c 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d007      	beq.n	800d4f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4e6:	4b3d      	ldr	r3, [pc, #244]	; (800d5dc <xQueueReceive+0x1bc>)
 800d4e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ec:	601a      	str	r2, [r3, #0]
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4f6:	f7ff faa5 	bl	800ca44 <vPortExitCritical>
				return pdPASS;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e069      	b.n	800d5d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d103      	bne.n	800d50c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d504:	f7ff fa9e 	bl	800ca44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d508:	2300      	movs	r3, #0
 800d50a:	e062      	b.n	800d5d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d512:	f107 0310 	add.w	r3, r7, #16
 800d516:	4618      	mov	r0, r3
 800d518:	f000 ffb0 	bl	800e47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d51c:	2301      	movs	r3, #1
 800d51e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d520:	f7ff fa90 	bl	800ca44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d524:	f000 fd42 	bl	800dfac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d528:	f7ff fa5c 	bl	800c9e4 <vPortEnterCritical>
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d532:	b25b      	sxtb	r3, r3
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d538:	d103      	bne.n	800d542 <xQueueReceive+0x122>
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d548:	b25b      	sxtb	r3, r3
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54e:	d103      	bne.n	800d558 <xQueueReceive+0x138>
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d558:	f7ff fa74 	bl	800ca44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d55c:	1d3a      	adds	r2, r7, #4
 800d55e:	f107 0310 	add.w	r3, r7, #16
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f000 ff9f 	bl	800e4a8 <xTaskCheckForTimeOut>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d123      	bne.n	800d5b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d572:	f000 fabb 	bl	800daec <prvIsQueueEmpty>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d017      	beq.n	800d5ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	3324      	adds	r3, #36	; 0x24
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	4611      	mov	r1, r2
 800d584:	4618      	mov	r0, r3
 800d586:	f000 fef3 	bl	800e370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58c:	f000 fa5c 	bl	800da48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d590:	f000 fd1a 	bl	800dfc8 <xTaskResumeAll>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d189      	bne.n	800d4ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d59a:	4b10      	ldr	r3, [pc, #64]	; (800d5dc <xQueueReceive+0x1bc>)
 800d59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	e780      	b.n	800d4ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ae:	f000 fa4b 	bl	800da48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5b2:	f000 fd09 	bl	800dfc8 <xTaskResumeAll>
 800d5b6:	e77a      	b.n	800d4ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d5b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ba:	f000 fa45 	bl	800da48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5be:	f000 fd03 	bl	800dfc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5c4:	f000 fa92 	bl	800daec <prvIsQueueEmpty>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f43f af6f 	beq.w	800d4ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3730      	adds	r7, #48	; 0x30
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	; 0x38
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10a      	bne.n	800d612 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	623b      	str	r3, [r7, #32]
}
 800d60e:	bf00      	nop
 800d610:	e7fe      	b.n	800d610 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00a      	beq.n	800d630 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	61fb      	str	r3, [r7, #28]
}
 800d62c:	bf00      	nop
 800d62e:	e7fe      	b.n	800d62e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d630:	f001 f890 	bl	800e754 <xTaskGetSchedulerState>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <xQueueSemaphoreTake+0x60>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <xQueueSemaphoreTake+0x64>
 800d640:	2301      	movs	r3, #1
 800d642:	e000      	b.n	800d646 <xQueueSemaphoreTake+0x66>
 800d644:	2300      	movs	r3, #0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10a      	bne.n	800d660 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	61bb      	str	r3, [r7, #24]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d660:	f7ff f9c0 	bl	800c9e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d024      	beq.n	800d6ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d672:	1e5a      	subs	r2, r3, #1
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d104      	bne.n	800d68a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d680:	f001 fa10 	bl	800eaa4 <pvTaskIncrementMutexHeldCount>
 800d684:	4602      	mov	r2, r0
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00f      	beq.n	800d6b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d694:	3310      	adds	r3, #16
 800d696:	4618      	mov	r0, r3
 800d698:	f000 fe8e 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d007      	beq.n	800d6b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6a2:	4b54      	ldr	r3, [pc, #336]	; (800d7f4 <xQueueSemaphoreTake+0x214>)
 800d6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6b2:	f7ff f9c7 	bl	800ca44 <vPortExitCritical>
				return pdPASS;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e097      	b.n	800d7ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d111      	bne.n	800d6e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	617b      	str	r3, [r7, #20]
}
 800d6d8:	bf00      	nop
 800d6da:	e7fe      	b.n	800d6da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d6dc:	f7ff f9b2 	bl	800ca44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e082      	b.n	800d7ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d106      	bne.n	800d6f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6ea:	f107 030c 	add.w	r3, r7, #12
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 fec4 	bl	800e47c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6f8:	f7ff f9a4 	bl	800ca44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6fc:	f000 fc56 	bl	800dfac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d700:	f7ff f970 	bl	800c9e4 <vPortEnterCritical>
 800d704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d70a:	b25b      	sxtb	r3, r3
 800d70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d710:	d103      	bne.n	800d71a <xQueueSemaphoreTake+0x13a>
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d720:	b25b      	sxtb	r3, r3
 800d722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d726:	d103      	bne.n	800d730 <xQueueSemaphoreTake+0x150>
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d730:	f7ff f988 	bl	800ca44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d734:	463a      	mov	r2, r7
 800d736:	f107 030c 	add.w	r3, r7, #12
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f000 feb3 	bl	800e4a8 <xTaskCheckForTimeOut>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d132      	bne.n	800d7ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d74a:	f000 f9cf 	bl	800daec <prvIsQueueEmpty>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d026      	beq.n	800d7a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d109      	bne.n	800d770 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d75c:	f7ff f942 	bl	800c9e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	4618      	mov	r0, r3
 800d766:	f001 f813 	bl	800e790 <xTaskPriorityInherit>
 800d76a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d76c:	f7ff f96a 	bl	800ca44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d772:	3324      	adds	r3, #36	; 0x24
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	4611      	mov	r1, r2
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 fdf9 	bl	800e370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d780:	f000 f962 	bl	800da48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d784:	f000 fc20 	bl	800dfc8 <xTaskResumeAll>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f47f af68 	bne.w	800d660 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d790:	4b18      	ldr	r3, [pc, #96]	; (800d7f4 <xQueueSemaphoreTake+0x214>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	e75e      	b.n	800d660 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d7a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7a4:	f000 f950 	bl	800da48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7a8:	f000 fc0e 	bl	800dfc8 <xTaskResumeAll>
 800d7ac:	e758      	b.n	800d660 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d7ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7b0:	f000 f94a 	bl	800da48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7b4:	f000 fc08 	bl	800dfc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7ba:	f000 f997 	bl	800daec <prvIsQueueEmpty>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f43f af4d 	beq.w	800d660 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d00d      	beq.n	800d7e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d7cc:	f7ff f90a 	bl	800c9e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d7d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d2:	f000 f891 	bl	800d8f8 <prvGetDisinheritPriorityAfterTimeout>
 800d7d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 f8d2 	bl	800e988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d7e4:	f7ff f92e 	bl	800ca44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3738      	adds	r7, #56	; 0x38
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	e000ed04 	.word	0xe000ed04

0800d7f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b08e      	sub	sp, #56	; 0x38
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10a      	bne.n	800d824 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	623b      	str	r3, [r7, #32]
}
 800d820:	bf00      	nop
 800d822:	e7fe      	b.n	800d822 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d103      	bne.n	800d832 <xQueueReceiveFromISR+0x3a>
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <xQueueReceiveFromISR+0x3e>
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <xQueueReceiveFromISR+0x40>
 800d836:	2300      	movs	r3, #0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10a      	bne.n	800d852 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	61fb      	str	r3, [r7, #28]
}
 800d84e:	bf00      	nop
 800d850:	e7fe      	b.n	800d850 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d852:	f7ff f9a9 	bl	800cba8 <vPortValidateInterruptPriority>
	__asm volatile
 800d856:	f3ef 8211 	mrs	r2, BASEPRI
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	61ba      	str	r2, [r7, #24]
 800d86c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d86e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d876:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d02f      	beq.n	800d8de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d88c:	f000 f8b6 	bl	800d9fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d892:	1e5a      	subs	r2, r3, #1
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d898:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a0:	d112      	bne.n	800d8c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d016      	beq.n	800d8d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	3310      	adds	r3, #16
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fd82 	bl	800e3b8 <xTaskRemoveFromEventList>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00e      	beq.n	800d8d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00b      	beq.n	800d8d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	601a      	str	r2, [r3, #0]
 800d8c6:	e007      	b.n	800d8d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	b25a      	sxtb	r2, r3
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	637b      	str	r3, [r7, #52]	; 0x34
 800d8dc:	e001      	b.n	800d8e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	637b      	str	r3, [r7, #52]	; 0x34
 800d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	f383 8811 	msr	BASEPRI, r3
}
 800d8ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3738      	adds	r7, #56	; 0x38
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	d006      	beq.n	800d916 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f1c3 0307 	rsb	r3, r3, #7
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	e001      	b.n	800d91a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d916:	2300      	movs	r3, #0
 800d918:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d91a:	68fb      	ldr	r3, [r7, #12]
	}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10d      	bne.n	800d962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d14d      	bne.n	800d9ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 ff92 	bl	800e87c <xTaskPriorityDisinherit>
 800d958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	e043      	b.n	800d9ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d119      	bne.n	800d99c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6858      	ldr	r0, [r3, #4]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d970:	461a      	mov	r2, r3
 800d972:	68b9      	ldr	r1, [r7, #8]
 800d974:	f01e f83c 	bl	802b9f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d980:	441a      	add	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d32b      	bcc.n	800d9ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	605a      	str	r2, [r3, #4]
 800d99a:	e026      	b.n	800d9ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	68d8      	ldr	r0, [r3, #12]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	f01e f822 	bl	802b9f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	68da      	ldr	r2, [r3, #12]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b4:	425b      	negs	r3, r3
 800d9b6:	441a      	add	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68da      	ldr	r2, [r3, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d207      	bcs.n	800d9d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d0:	425b      	negs	r3, r3
 800d9d2:	441a      	add	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d105      	bne.n	800d9ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d9f2:	697b      	ldr	r3, [r7, #20]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d018      	beq.n	800da40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68da      	ldr	r2, [r3, #12]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da16:	441a      	add	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	429a      	cmp	r2, r3
 800da26:	d303      	bcc.n	800da30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68d9      	ldr	r1, [r3, #12]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da38:	461a      	mov	r2, r3
 800da3a:	6838      	ldr	r0, [r7, #0]
 800da3c:	f01d ffd8 	bl	802b9f0 <memcpy>
	}
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da50:	f7fe ffc8 	bl	800c9e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da5c:	e011      	b.n	800da82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	2b00      	cmp	r3, #0
 800da64:	d012      	beq.n	800da8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3324      	adds	r3, #36	; 0x24
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 fca4 	bl	800e3b8 <xTaskRemoveFromEventList>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da76:	f000 fd79 	bl	800e56c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da86:	2b00      	cmp	r3, #0
 800da88:	dce9      	bgt.n	800da5e <prvUnlockQueue+0x16>
 800da8a:	e000      	b.n	800da8e <prvUnlockQueue+0x46>
					break;
 800da8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	22ff      	movs	r2, #255	; 0xff
 800da92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800da96:	f7fe ffd5 	bl	800ca44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800da9a:	f7fe ffa3 	bl	800c9e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800daa6:	e011      	b.n	800dacc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d012      	beq.n	800dad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3310      	adds	r3, #16
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fc7f 	bl	800e3b8 <xTaskRemoveFromEventList>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d001      	beq.n	800dac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dac0:	f000 fd54 	bl	800e56c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dacc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dce9      	bgt.n	800daa8 <prvUnlockQueue+0x60>
 800dad4:	e000      	b.n	800dad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	22ff      	movs	r2, #255	; 0xff
 800dadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dae0:	f7fe ffb0 	bl	800ca44 <vPortExitCritical>
}
 800dae4:	bf00      	nop
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800daf4:	f7fe ff76 	bl	800c9e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db00:	2301      	movs	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
 800db04:	e001      	b.n	800db0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db0a:	f7fe ff9b 	bl	800ca44 <vPortExitCritical>

	return xReturn;
 800db0e:	68fb      	ldr	r3, [r7, #12]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db20:	f7fe ff60 	bl	800c9e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d102      	bne.n	800db36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db30:	2301      	movs	r3, #1
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e001      	b.n	800db3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db36:	2300      	movs	r3, #0
 800db38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db3a:	f7fe ff83 	bl	800ca44 <vPortExitCritical>

	return xReturn;
 800db3e:	68fb      	ldr	r3, [r7, #12]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08e      	sub	sp, #56	; 0x38
 800db4c:	af04      	add	r7, sp, #16
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
 800db54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10a      	bne.n	800db72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800db5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	623b      	str	r3, [r7, #32]
}
 800db6e:	bf00      	nop
 800db70:	e7fe      	b.n	800db70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10a      	bne.n	800db8e <xTaskCreateStatic+0x46>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	61fb      	str	r3, [r7, #28]
}
 800db8a:	bf00      	nop
 800db8c:	e7fe      	b.n	800db8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db8e:	2358      	movs	r3, #88	; 0x58
 800db90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2b58      	cmp	r3, #88	; 0x58
 800db96:	d00a      	beq.n	800dbae <xTaskCreateStatic+0x66>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	61bb      	str	r3, [r7, #24]
}
 800dbaa:	bf00      	nop
 800dbac:	e7fe      	b.n	800dbac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d01e      	beq.n	800dbf4 <xTaskCreateStatic+0xac>
 800dbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01b      	beq.n	800dbf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbce:	2300      	movs	r3, #0
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	9302      	str	r3, [sp, #8]
 800dbd6:	f107 0314 	add.w	r3, r7, #20
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f850 	bl	800dc8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbee:	f000 f8df 	bl	800ddb0 <prvAddNewTaskToReadyList>
 800dbf2:	e001      	b.n	800dbf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dbf8:	697b      	ldr	r3, [r7, #20]
	}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3728      	adds	r7, #40	; 0x28
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b08c      	sub	sp, #48	; 0x30
 800dc06:	af04      	add	r7, sp, #16
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	603b      	str	r3, [r7, #0]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc12:	88fb      	ldrh	r3, [r7, #6]
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fe fb16 	bl	800c248 <pvPortMalloc>
 800dc1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00e      	beq.n	800dc42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc24:	2058      	movs	r0, #88	; 0x58
 800dc26:	f7fe fb0f 	bl	800c248 <pvPortMalloc>
 800dc2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d003      	beq.n	800dc3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	631a      	str	r2, [r3, #48]	; 0x30
 800dc38:	e005      	b.n	800dc46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc3a:	6978      	ldr	r0, [r7, #20]
 800dc3c:	f7fe fbd4 	bl	800c3e8 <vPortFree>
 800dc40:	e001      	b.n	800dc46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d017      	beq.n	800dc7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc54:	88fa      	ldrh	r2, [r7, #6]
 800dc56:	2300      	movs	r3, #0
 800dc58:	9303      	str	r3, [sp, #12]
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	9302      	str	r3, [sp, #8]
 800dc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	68b9      	ldr	r1, [r7, #8]
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f000 f80e 	bl	800dc8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc70:	69f8      	ldr	r0, [r7, #28]
 800dc72:	f000 f89d 	bl	800ddb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc76:	2301      	movs	r3, #1
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	e002      	b.n	800dc82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc82:	69bb      	ldr	r3, [r7, #24]
	}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3720      	adds	r7, #32
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	461a      	mov	r2, r3
 800dca4:	21a5      	movs	r1, #165	; 0xa5
 800dca6:	f01d feb1 	bl	802ba0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	4413      	add	r3, r2
 800dcba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	f023 0307 	bic.w	r3, r3, #7
 800dcc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00a      	beq.n	800dce4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	617b      	str	r3, [r7, #20]
}
 800dce0:	bf00      	nop
 800dce2:	e7fe      	b.n	800dce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d01f      	beq.n	800dd2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcea:	2300      	movs	r3, #0
 800dcec:	61fb      	str	r3, [r7, #28]
 800dcee:	e012      	b.n	800dd16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	7819      	ldrb	r1, [r3, #0]
 800dcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	3334      	adds	r3, #52	; 0x34
 800dd00:	460a      	mov	r2, r1
 800dd02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	4413      	add	r3, r2
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d006      	beq.n	800dd1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	3301      	adds	r3, #1
 800dd14:	61fb      	str	r3, [r7, #28]
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	2b0f      	cmp	r3, #15
 800dd1a:	d9e9      	bls.n	800dcf0 <prvInitialiseNewTask+0x64>
 800dd1c:	e000      	b.n	800dd20 <prvInitialiseNewTask+0x94>
			{
				break;
 800dd1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd28:	e003      	b.n	800dd32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	2b06      	cmp	r3, #6
 800dd36:	d901      	bls.n	800dd3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd38:	2306      	movs	r3, #6
 800dd3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	3304      	adds	r3, #4
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fc86 	bl	800c664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fe fc81 	bl	800c664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6a:	f1c3 0207 	rsb	r2, r3, #7
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	2200      	movs	r2, #0
 800dd82:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	68f9      	ldr	r1, [r7, #12]
 800dd90:	69b8      	ldr	r0, [r7, #24]
 800dd92:	f7fe fcfb 	bl	800c78c <pxPortInitialiseStack>
 800dd96:	4602      	mov	r2, r0
 800dd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dda6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dda8:	bf00      	nop
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ddb8:	f7fe fe14 	bl	800c9e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ddbc:	4b2a      	ldr	r3, [pc, #168]	; (800de68 <prvAddNewTaskToReadyList+0xb8>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	4a29      	ldr	r2, [pc, #164]	; (800de68 <prvAddNewTaskToReadyList+0xb8>)
 800ddc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ddc6:	4b29      	ldr	r3, [pc, #164]	; (800de6c <prvAddNewTaskToReadyList+0xbc>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d109      	bne.n	800dde2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ddce:	4a27      	ldr	r2, [pc, #156]	; (800de6c <prvAddNewTaskToReadyList+0xbc>)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ddd4:	4b24      	ldr	r3, [pc, #144]	; (800de68 <prvAddNewTaskToReadyList+0xb8>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d110      	bne.n	800ddfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dddc:	f000 fbec 	bl	800e5b8 <prvInitialiseTaskLists>
 800dde0:	e00d      	b.n	800ddfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dde2:	4b23      	ldr	r3, [pc, #140]	; (800de70 <prvAddNewTaskToReadyList+0xc0>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d109      	bne.n	800ddfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddea:	4b20      	ldr	r3, [pc, #128]	; (800de6c <prvAddNewTaskToReadyList+0xbc>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d802      	bhi.n	800ddfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddf8:	4a1c      	ldr	r2, [pc, #112]	; (800de6c <prvAddNewTaskToReadyList+0xbc>)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ddfe:	4b1d      	ldr	r3, [pc, #116]	; (800de74 <prvAddNewTaskToReadyList+0xc4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	4a1b      	ldr	r2, [pc, #108]	; (800de74 <prvAddNewTaskToReadyList+0xc4>)
 800de06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0c:	2201      	movs	r2, #1
 800de0e:	409a      	lsls	r2, r3
 800de10:	4b19      	ldr	r3, [pc, #100]	; (800de78 <prvAddNewTaskToReadyList+0xc8>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4313      	orrs	r3, r2
 800de16:	4a18      	ldr	r2, [pc, #96]	; (800de78 <prvAddNewTaskToReadyList+0xc8>)
 800de18:	6013      	str	r3, [r2, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1e:	4613      	mov	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4a15      	ldr	r2, [pc, #84]	; (800de7c <prvAddNewTaskToReadyList+0xcc>)
 800de28:	441a      	add	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	3304      	adds	r3, #4
 800de2e:	4619      	mov	r1, r3
 800de30:	4610      	mov	r0, r2
 800de32:	f7fe fc24 	bl	800c67e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de36:	f7fe fe05 	bl	800ca44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de3a:	4b0d      	ldr	r3, [pc, #52]	; (800de70 <prvAddNewTaskToReadyList+0xc0>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00e      	beq.n	800de60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de42:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <prvAddNewTaskToReadyList+0xbc>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d207      	bcs.n	800de60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de50:	4b0b      	ldr	r3, [pc, #44]	; (800de80 <prvAddNewTaskToReadyList+0xd0>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de60:	bf00      	nop
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	20009064 	.word	0x20009064
 800de6c:	20008f64 	.word	0x20008f64
 800de70:	20009070 	.word	0x20009070
 800de74:	20009080 	.word	0x20009080
 800de78:	2000906c 	.word	0x2000906c
 800de7c:	20008f68 	.word	0x20008f68
 800de80:	e000ed04 	.word	0xe000ed04

0800de84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d017      	beq.n	800dec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de96:	4b13      	ldr	r3, [pc, #76]	; (800dee4 <vTaskDelay+0x60>)
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00a      	beq.n	800deb4 <vTaskDelay+0x30>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	60bb      	str	r3, [r7, #8]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800deb4:	f000 f87a 	bl	800dfac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800deb8:	2100      	movs	r1, #0
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 fe06 	bl	800eacc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dec0:	f000 f882 	bl	800dfc8 <xTaskResumeAll>
 800dec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d107      	bne.n	800dedc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800decc:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <vTaskDelay+0x64>)
 800dece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dedc:	bf00      	nop
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	2000908c 	.word	0x2000908c
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08a      	sub	sp, #40	; 0x28
 800def0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800defa:	463a      	mov	r2, r7
 800defc:	1d39      	adds	r1, r7, #4
 800defe:	f107 0308 	add.w	r3, r7, #8
 800df02:	4618      	mov	r0, r3
 800df04:	f7f4 fba6 	bl	8002654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	9202      	str	r2, [sp, #8]
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	2300      	movs	r3, #0
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	460a      	mov	r2, r1
 800df1a:	491e      	ldr	r1, [pc, #120]	; (800df94 <vTaskStartScheduler+0xa8>)
 800df1c:	481e      	ldr	r0, [pc, #120]	; (800df98 <vTaskStartScheduler+0xac>)
 800df1e:	f7ff fe13 	bl	800db48 <xTaskCreateStatic>
 800df22:	4603      	mov	r3, r0
 800df24:	4a1d      	ldr	r2, [pc, #116]	; (800df9c <vTaskStartScheduler+0xb0>)
 800df26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df28:	4b1c      	ldr	r3, [pc, #112]	; (800df9c <vTaskStartScheduler+0xb0>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df30:	2301      	movs	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	e001      	b.n	800df3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df36:	2300      	movs	r3, #0
 800df38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d116      	bne.n	800df6e <vTaskStartScheduler+0x82>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	613b      	str	r3, [r7, #16]
}
 800df52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df54:	4b12      	ldr	r3, [pc, #72]	; (800dfa0 <vTaskStartScheduler+0xb4>)
 800df56:	f04f 32ff 	mov.w	r2, #4294967295
 800df5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df5c:	4b11      	ldr	r3, [pc, #68]	; (800dfa4 <vTaskStartScheduler+0xb8>)
 800df5e:	2201      	movs	r2, #1
 800df60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df62:	4b11      	ldr	r3, [pc, #68]	; (800dfa8 <vTaskStartScheduler+0xbc>)
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df68:	f7fe fc9a 	bl	800c8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df6c:	e00e      	b.n	800df8c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df74:	d10a      	bne.n	800df8c <vTaskStartScheduler+0xa0>
	__asm volatile
 800df76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7a:	f383 8811 	msr	BASEPRI, r3
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	f3bf 8f4f 	dsb	sy
 800df86:	60fb      	str	r3, [r7, #12]
}
 800df88:	bf00      	nop
 800df8a:	e7fe      	b.n	800df8a <vTaskStartScheduler+0x9e>
}
 800df8c:	bf00      	nop
 800df8e:	3718      	adds	r7, #24
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}
 800df94:	0802d890 	.word	0x0802d890
 800df98:	0800e585 	.word	0x0800e585
 800df9c:	20009088 	.word	0x20009088
 800dfa0:	20009084 	.word	0x20009084
 800dfa4:	20009070 	.word	0x20009070
 800dfa8:	20009068 	.word	0x20009068

0800dfac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dfac:	b480      	push	{r7}
 800dfae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dfb0:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <vTaskSuspendAll+0x18>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	4a03      	ldr	r2, [pc, #12]	; (800dfc4 <vTaskSuspendAll+0x18>)
 800dfb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dfba:	bf00      	nop
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr
 800dfc4:	2000908c 	.word	0x2000908c

0800dfc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfd6:	4b41      	ldr	r3, [pc, #260]	; (800e0dc <xTaskResumeAll+0x114>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	603b      	str	r3, [r7, #0]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dff4:	f7fe fcf6 	bl	800c9e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dff8:	4b38      	ldr	r3, [pc, #224]	; (800e0dc <xTaskResumeAll+0x114>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	4a37      	ldr	r2, [pc, #220]	; (800e0dc <xTaskResumeAll+0x114>)
 800e000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e002:	4b36      	ldr	r3, [pc, #216]	; (800e0dc <xTaskResumeAll+0x114>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d161      	bne.n	800e0ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e00a:	4b35      	ldr	r3, [pc, #212]	; (800e0e0 <xTaskResumeAll+0x118>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d05d      	beq.n	800e0ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e012:	e02e      	b.n	800e072 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e014:	4b33      	ldr	r3, [pc, #204]	; (800e0e4 <xTaskResumeAll+0x11c>)
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3318      	adds	r3, #24
 800e020:	4618      	mov	r0, r3
 800e022:	f7fe fb89 	bl	800c738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3304      	adds	r3, #4
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fb84 	bl	800c738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	2201      	movs	r2, #1
 800e036:	409a      	lsls	r2, r3
 800e038:	4b2b      	ldr	r3, [pc, #172]	; (800e0e8 <xTaskResumeAll+0x120>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4313      	orrs	r3, r2
 800e03e:	4a2a      	ldr	r2, [pc, #168]	; (800e0e8 <xTaskResumeAll+0x120>)
 800e040:	6013      	str	r3, [r2, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4a27      	ldr	r2, [pc, #156]	; (800e0ec <xTaskResumeAll+0x124>)
 800e050:	441a      	add	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	3304      	adds	r3, #4
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7fe fb10 	bl	800c67e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e062:	4b23      	ldr	r3, [pc, #140]	; (800e0f0 <xTaskResumeAll+0x128>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d302      	bcc.n	800e072 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e06c:	4b21      	ldr	r3, [pc, #132]	; (800e0f4 <xTaskResumeAll+0x12c>)
 800e06e:	2201      	movs	r2, #1
 800e070:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e072:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <xTaskResumeAll+0x11c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1cc      	bne.n	800e014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e080:	f000 fb38 	bl	800e6f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e084:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <xTaskResumeAll+0x130>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d010      	beq.n	800e0b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e090:	f000 f836 	bl	800e100 <xTaskIncrementTick>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e09a:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <xTaskResumeAll+0x12c>)
 800e09c:	2201      	movs	r2, #1
 800e09e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1f1      	bne.n	800e090 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e0ac:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <xTaskResumeAll+0x130>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0b2:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <xTaskResumeAll+0x12c>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0be:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <xTaskResumeAll+0x134>)
 800e0c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0ce:	f7fe fcb9 	bl	800ca44 <vPortExitCritical>

	return xAlreadyYielded;
 800e0d2:	68bb      	ldr	r3, [r7, #8]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	2000908c 	.word	0x2000908c
 800e0e0:	20009064 	.word	0x20009064
 800e0e4:	20009024 	.word	0x20009024
 800e0e8:	2000906c 	.word	0x2000906c
 800e0ec:	20008f68 	.word	0x20008f68
 800e0f0:	20008f64 	.word	0x20008f64
 800e0f4:	20009078 	.word	0x20009078
 800e0f8:	20009074 	.word	0x20009074
 800e0fc:	e000ed04 	.word	0xe000ed04

0800e100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e10a:	4b4e      	ldr	r3, [pc, #312]	; (800e244 <xTaskIncrementTick+0x144>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f040 808e 	bne.w	800e230 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e114:	4b4c      	ldr	r3, [pc, #304]	; (800e248 <xTaskIncrementTick+0x148>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3301      	adds	r3, #1
 800e11a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e11c:	4a4a      	ldr	r2, [pc, #296]	; (800e248 <xTaskIncrementTick+0x148>)
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d120      	bne.n	800e16a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e128:	4b48      	ldr	r3, [pc, #288]	; (800e24c <xTaskIncrementTick+0x14c>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <xTaskIncrementTick+0x48>
	__asm volatile
 800e132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e136:	f383 8811 	msr	BASEPRI, r3
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	603b      	str	r3, [r7, #0]
}
 800e144:	bf00      	nop
 800e146:	e7fe      	b.n	800e146 <xTaskIncrementTick+0x46>
 800e148:	4b40      	ldr	r3, [pc, #256]	; (800e24c <xTaskIncrementTick+0x14c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	4b40      	ldr	r3, [pc, #256]	; (800e250 <xTaskIncrementTick+0x150>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a3e      	ldr	r2, [pc, #248]	; (800e24c <xTaskIncrementTick+0x14c>)
 800e154:	6013      	str	r3, [r2, #0]
 800e156:	4a3e      	ldr	r2, [pc, #248]	; (800e250 <xTaskIncrementTick+0x150>)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	4b3d      	ldr	r3, [pc, #244]	; (800e254 <xTaskIncrementTick+0x154>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3301      	adds	r3, #1
 800e162:	4a3c      	ldr	r2, [pc, #240]	; (800e254 <xTaskIncrementTick+0x154>)
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	f000 fac5 	bl	800e6f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e16a:	4b3b      	ldr	r3, [pc, #236]	; (800e258 <xTaskIncrementTick+0x158>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	429a      	cmp	r2, r3
 800e172:	d348      	bcc.n	800e206 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e174:	4b35      	ldr	r3, [pc, #212]	; (800e24c <xTaskIncrementTick+0x14c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d104      	bne.n	800e188 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e17e:	4b36      	ldr	r3, [pc, #216]	; (800e258 <xTaskIncrementTick+0x158>)
 800e180:	f04f 32ff 	mov.w	r2, #4294967295
 800e184:	601a      	str	r2, [r3, #0]
					break;
 800e186:	e03e      	b.n	800e206 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e188:	4b30      	ldr	r3, [pc, #192]	; (800e24c <xTaskIncrementTick+0x14c>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e198:	693a      	ldr	r2, [r7, #16]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d203      	bcs.n	800e1a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1a0:	4a2d      	ldr	r2, [pc, #180]	; (800e258 <xTaskIncrementTick+0x158>)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1a6:	e02e      	b.n	800e206 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	3304      	adds	r3, #4
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fe fac3 	bl	800c738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d004      	beq.n	800e1c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	3318      	adds	r3, #24
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe faba 	bl	800c738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	409a      	lsls	r2, r3
 800e1cc:	4b23      	ldr	r3, [pc, #140]	; (800e25c <xTaskIncrementTick+0x15c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	4a22      	ldr	r2, [pc, #136]	; (800e25c <xTaskIncrementTick+0x15c>)
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1da:	4613      	mov	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4a1f      	ldr	r2, [pc, #124]	; (800e260 <xTaskIncrementTick+0x160>)
 800e1e4:	441a      	add	r2, r3
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f7fe fa46 	bl	800c67e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f6:	4b1b      	ldr	r3, [pc, #108]	; (800e264 <xTaskIncrementTick+0x164>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d3b9      	bcc.n	800e174 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e200:	2301      	movs	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e204:	e7b6      	b.n	800e174 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e206:	4b17      	ldr	r3, [pc, #92]	; (800e264 <xTaskIncrementTick+0x164>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20c:	4914      	ldr	r1, [pc, #80]	; (800e260 <xTaskIncrementTick+0x160>)
 800e20e:	4613      	mov	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	440b      	add	r3, r1
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d901      	bls.n	800e222 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e21e:	2301      	movs	r3, #1
 800e220:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e222:	4b11      	ldr	r3, [pc, #68]	; (800e268 <xTaskIncrementTick+0x168>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d007      	beq.n	800e23a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e22a:	2301      	movs	r3, #1
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	e004      	b.n	800e23a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e230:	4b0e      	ldr	r3, [pc, #56]	; (800e26c <xTaskIncrementTick+0x16c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3301      	adds	r3, #1
 800e236:	4a0d      	ldr	r2, [pc, #52]	; (800e26c <xTaskIncrementTick+0x16c>)
 800e238:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e23a:	697b      	ldr	r3, [r7, #20]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}
 800e244:	2000908c 	.word	0x2000908c
 800e248:	20009068 	.word	0x20009068
 800e24c:	2000901c 	.word	0x2000901c
 800e250:	20009020 	.word	0x20009020
 800e254:	2000907c 	.word	0x2000907c
 800e258:	20009084 	.word	0x20009084
 800e25c:	2000906c 	.word	0x2000906c
 800e260:	20008f68 	.word	0x20008f68
 800e264:	20008f64 	.word	0x20008f64
 800e268:	20009078 	.word	0x20009078
 800e26c:	20009074 	.word	0x20009074

0800e270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e276:	4b39      	ldr	r3, [pc, #228]	; (800e35c <vTaskSwitchContext+0xec>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e27e:	4b38      	ldr	r3, [pc, #224]	; (800e360 <vTaskSwitchContext+0xf0>)
 800e280:	2201      	movs	r2, #1
 800e282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e284:	e066      	b.n	800e354 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800e286:	4b36      	ldr	r3, [pc, #216]	; (800e360 <vTaskSwitchContext+0xf0>)
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e28c:	4b35      	ldr	r3, [pc, #212]	; (800e364 <vTaskSwitchContext+0xf4>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e292:	61fb      	str	r3, [r7, #28]
 800e294:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e298:	61bb      	str	r3, [r7, #24]
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	69ba      	ldr	r2, [r7, #24]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d111      	bne.n	800e2c8 <vTaskSwitchContext+0x58>
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	69ba      	ldr	r2, [r7, #24]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d10b      	bne.n	800e2c8 <vTaskSwitchContext+0x58>
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	3308      	adds	r3, #8
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	69ba      	ldr	r2, [r7, #24]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d105      	bne.n	800e2c8 <vTaskSwitchContext+0x58>
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	330c      	adds	r3, #12
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	69ba      	ldr	r2, [r7, #24]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d008      	beq.n	800e2da <vTaskSwitchContext+0x6a>
 800e2c8:	4b26      	ldr	r3, [pc, #152]	; (800e364 <vTaskSwitchContext+0xf4>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b25      	ldr	r3, [pc, #148]	; (800e364 <vTaskSwitchContext+0xf4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3334      	adds	r3, #52	; 0x34
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	f7f4 f9aa 	bl	800262e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2da:	4b23      	ldr	r3, [pc, #140]	; (800e368 <vTaskSwitchContext+0xf8>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	fab3 f383 	clz	r3, r3
 800e2e6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e2e8:	7afb      	ldrb	r3, [r7, #11]
 800e2ea:	f1c3 031f 	rsb	r3, r3, #31
 800e2ee:	617b      	str	r3, [r7, #20]
 800e2f0:	491e      	ldr	r1, [pc, #120]	; (800e36c <vTaskSwitchContext+0xfc>)
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	440b      	add	r3, r1
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <vTaskSwitchContext+0xaa>
	__asm volatile
 800e304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	607b      	str	r3, [r7, #4]
}
 800e316:	bf00      	nop
 800e318:	e7fe      	b.n	800e318 <vTaskSwitchContext+0xa8>
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4a11      	ldr	r2, [pc, #68]	; (800e36c <vTaskSwitchContext+0xfc>)
 800e326:	4413      	add	r3, r2
 800e328:	613b      	str	r3, [r7, #16]
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	605a      	str	r2, [r3, #4]
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	3308      	adds	r3, #8
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d104      	bne.n	800e34a <vTaskSwitchContext+0xda>
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	605a      	str	r2, [r3, #4]
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	4a04      	ldr	r2, [pc, #16]	; (800e364 <vTaskSwitchContext+0xf4>)
 800e352:	6013      	str	r3, [r2, #0]
}
 800e354:	bf00      	nop
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	2000908c 	.word	0x2000908c
 800e360:	20009078 	.word	0x20009078
 800e364:	20008f64 	.word	0x20008f64
 800e368:	2000906c 	.word	0x2000906c
 800e36c:	20008f68 	.word	0x20008f68

0800e370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	60fb      	str	r3, [r7, #12]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e396:	4b07      	ldr	r3, [pc, #28]	; (800e3b4 <vTaskPlaceOnEventList+0x44>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3318      	adds	r3, #24
 800e39c:	4619      	mov	r1, r3
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7fe f991 	bl	800c6c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	6838      	ldr	r0, [r7, #0]
 800e3a8:	f000 fb90 	bl	800eacc <prvAddCurrentTaskToDelayedList>
}
 800e3ac:	bf00      	nop
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	20008f64 	.word	0x20008f64

0800e3b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10a      	bne.n	800e3e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d2:	f383 8811 	msr	BASEPRI, r3
 800e3d6:	f3bf 8f6f 	isb	sy
 800e3da:	f3bf 8f4f 	dsb	sy
 800e3de:	60fb      	str	r3, [r7, #12]
}
 800e3e0:	bf00      	nop
 800e3e2:	e7fe      	b.n	800e3e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	3318      	adds	r3, #24
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fe f9a5 	bl	800c738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ee:	4b1d      	ldr	r3, [pc, #116]	; (800e464 <xTaskRemoveFromEventList+0xac>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d11c      	bne.n	800e430 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe f99c 	bl	800c738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e404:	2201      	movs	r2, #1
 800e406:	409a      	lsls	r2, r3
 800e408:	4b17      	ldr	r3, [pc, #92]	; (800e468 <xTaskRemoveFromEventList+0xb0>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	4a16      	ldr	r2, [pc, #88]	; (800e468 <xTaskRemoveFromEventList+0xb0>)
 800e410:	6013      	str	r3, [r2, #0]
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e416:	4613      	mov	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4a13      	ldr	r2, [pc, #76]	; (800e46c <xTaskRemoveFromEventList+0xb4>)
 800e420:	441a      	add	r2, r3
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	3304      	adds	r3, #4
 800e426:	4619      	mov	r1, r3
 800e428:	4610      	mov	r0, r2
 800e42a:	f7fe f928 	bl	800c67e <vListInsertEnd>
 800e42e:	e005      	b.n	800e43c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	3318      	adds	r3, #24
 800e434:	4619      	mov	r1, r3
 800e436:	480e      	ldr	r0, [pc, #56]	; (800e470 <xTaskRemoveFromEventList+0xb8>)
 800e438:	f7fe f921 	bl	800c67e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e440:	4b0c      	ldr	r3, [pc, #48]	; (800e474 <xTaskRemoveFromEventList+0xbc>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	429a      	cmp	r2, r3
 800e448:	d905      	bls.n	800e456 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e44a:	2301      	movs	r3, #1
 800e44c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e44e:	4b0a      	ldr	r3, [pc, #40]	; (800e478 <xTaskRemoveFromEventList+0xc0>)
 800e450:	2201      	movs	r2, #1
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	e001      	b.n	800e45a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e456:	2300      	movs	r3, #0
 800e458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e45a:	697b      	ldr	r3, [r7, #20]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3718      	adds	r7, #24
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	2000908c 	.word	0x2000908c
 800e468:	2000906c 	.word	0x2000906c
 800e46c:	20008f68 	.word	0x20008f68
 800e470:	20009024 	.word	0x20009024
 800e474:	20008f64 	.word	0x20008f64
 800e478:	20009078 	.word	0x20009078

0800e47c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e484:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <vTaskInternalSetTimeOutState+0x24>)
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e48c:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <vTaskInternalSetTimeOutState+0x28>)
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	605a      	str	r2, [r3, #4]
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	2000907c 	.word	0x2000907c
 800e4a4:	20009068 	.word	0x20009068

0800e4a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	613b      	str	r3, [r7, #16]
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10a      	bne.n	800e4ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e4ea:	f7fe fa7b 	bl	800c9e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4ee:	4b1d      	ldr	r3, [pc, #116]	; (800e564 <xTaskCheckForTimeOut+0xbc>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	1ad3      	subs	r3, r2, r3
 800e4fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e506:	d102      	bne.n	800e50e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e508:	2300      	movs	r3, #0
 800e50a:	61fb      	str	r3, [r7, #28]
 800e50c:	e023      	b.n	800e556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	4b15      	ldr	r3, [pc, #84]	; (800e568 <xTaskCheckForTimeOut+0xc0>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	429a      	cmp	r2, r3
 800e518:	d007      	beq.n	800e52a <xTaskCheckForTimeOut+0x82>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	429a      	cmp	r2, r3
 800e522:	d302      	bcc.n	800e52a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e524:	2301      	movs	r3, #1
 800e526:	61fb      	str	r3, [r7, #28]
 800e528:	e015      	b.n	800e556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	697a      	ldr	r2, [r7, #20]
 800e530:	429a      	cmp	r2, r3
 800e532:	d20b      	bcs.n	800e54c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	1ad2      	subs	r2, r2, r3
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff ff9b 	bl	800e47c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e546:	2300      	movs	r3, #0
 800e548:	61fb      	str	r3, [r7, #28]
 800e54a:	e004      	b.n	800e556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e552:	2301      	movs	r3, #1
 800e554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e556:	f7fe fa75 	bl	800ca44 <vPortExitCritical>

	return xReturn;
 800e55a:	69fb      	ldr	r3, [r7, #28]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	20009068 	.word	0x20009068
 800e568:	2000907c 	.word	0x2000907c

0800e56c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e56c:	b480      	push	{r7}
 800e56e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e570:	4b03      	ldr	r3, [pc, #12]	; (800e580 <vTaskMissedYield+0x14>)
 800e572:	2201      	movs	r2, #1
 800e574:	601a      	str	r2, [r3, #0]
}
 800e576:	bf00      	nop
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	20009078 	.word	0x20009078

0800e584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e58c:	f000 f854 	bl	800e638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e590:	4b07      	ldr	r3, [pc, #28]	; (800e5b0 <prvIdleTask+0x2c>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d907      	bls.n	800e5a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e598:	4b06      	ldr	r3, [pc, #24]	; (800e5b4 <prvIdleTask+0x30>)
 800e59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e59e:	601a      	str	r2, [r3, #0]
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e5a8:	f7f4 f83a 	bl	8002620 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e5ac:	e7ee      	b.n	800e58c <prvIdleTask+0x8>
 800e5ae:	bf00      	nop
 800e5b0:	20008f68 	.word	0x20008f68
 800e5b4:	e000ed04 	.word	0xe000ed04

0800e5b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5be:	2300      	movs	r3, #0
 800e5c0:	607b      	str	r3, [r7, #4]
 800e5c2:	e00c      	b.n	800e5de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4413      	add	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4a12      	ldr	r2, [pc, #72]	; (800e618 <prvInitialiseTaskLists+0x60>)
 800e5d0:	4413      	add	r3, r2
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe f826 	bl	800c624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	607b      	str	r3, [r7, #4]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b06      	cmp	r3, #6
 800e5e2:	d9ef      	bls.n	800e5c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5e4:	480d      	ldr	r0, [pc, #52]	; (800e61c <prvInitialiseTaskLists+0x64>)
 800e5e6:	f7fe f81d 	bl	800c624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5ea:	480d      	ldr	r0, [pc, #52]	; (800e620 <prvInitialiseTaskLists+0x68>)
 800e5ec:	f7fe f81a 	bl	800c624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5f0:	480c      	ldr	r0, [pc, #48]	; (800e624 <prvInitialiseTaskLists+0x6c>)
 800e5f2:	f7fe f817 	bl	800c624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5f6:	480c      	ldr	r0, [pc, #48]	; (800e628 <prvInitialiseTaskLists+0x70>)
 800e5f8:	f7fe f814 	bl	800c624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5fc:	480b      	ldr	r0, [pc, #44]	; (800e62c <prvInitialiseTaskLists+0x74>)
 800e5fe:	f7fe f811 	bl	800c624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e602:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <prvInitialiseTaskLists+0x78>)
 800e604:	4a05      	ldr	r2, [pc, #20]	; (800e61c <prvInitialiseTaskLists+0x64>)
 800e606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e608:	4b0a      	ldr	r3, [pc, #40]	; (800e634 <prvInitialiseTaskLists+0x7c>)
 800e60a:	4a05      	ldr	r2, [pc, #20]	; (800e620 <prvInitialiseTaskLists+0x68>)
 800e60c:	601a      	str	r2, [r3, #0]
}
 800e60e:	bf00      	nop
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20008f68 	.word	0x20008f68
 800e61c:	20008ff4 	.word	0x20008ff4
 800e620:	20009008 	.word	0x20009008
 800e624:	20009024 	.word	0x20009024
 800e628:	20009038 	.word	0x20009038
 800e62c:	20009050 	.word	0x20009050
 800e630:	2000901c 	.word	0x2000901c
 800e634:	20009020 	.word	0x20009020

0800e638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e63e:	e019      	b.n	800e674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e640:	f7fe f9d0 	bl	800c9e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e644:	4b10      	ldr	r3, [pc, #64]	; (800e688 <prvCheckTasksWaitingTermination+0x50>)
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3304      	adds	r3, #4
 800e650:	4618      	mov	r0, r3
 800e652:	f7fe f871 	bl	800c738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e656:	4b0d      	ldr	r3, [pc, #52]	; (800e68c <prvCheckTasksWaitingTermination+0x54>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3b01      	subs	r3, #1
 800e65c:	4a0b      	ldr	r2, [pc, #44]	; (800e68c <prvCheckTasksWaitingTermination+0x54>)
 800e65e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e660:	4b0b      	ldr	r3, [pc, #44]	; (800e690 <prvCheckTasksWaitingTermination+0x58>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	3b01      	subs	r3, #1
 800e666:	4a0a      	ldr	r2, [pc, #40]	; (800e690 <prvCheckTasksWaitingTermination+0x58>)
 800e668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e66a:	f7fe f9eb 	bl	800ca44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 f810 	bl	800e694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e674:	4b06      	ldr	r3, [pc, #24]	; (800e690 <prvCheckTasksWaitingTermination+0x58>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e1      	bne.n	800e640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e67c:	bf00      	nop
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20009038 	.word	0x20009038
 800e68c:	20009064 	.word	0x20009064
 800e690:	2000904c 	.word	0x2000904c

0800e694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d108      	bne.n	800e6b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fd fe9c 	bl	800c3e8 <vPortFree>
				vPortFree( pxTCB );
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7fd fe99 	bl	800c3e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e6b6:	e018      	b.n	800e6ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d103      	bne.n	800e6ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7fd fe90 	bl	800c3e8 <vPortFree>
	}
 800e6c8:	e00f      	b.n	800e6ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e6d0:	2b02      	cmp	r3, #2
 800e6d2:	d00a      	beq.n	800e6ea <prvDeleteTCB+0x56>
	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	60fb      	str	r3, [r7, #12]
}
 800e6e6:	bf00      	nop
 800e6e8:	e7fe      	b.n	800e6e8 <prvDeleteTCB+0x54>
	}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
	...

0800e6f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6fa:	4b0c      	ldr	r3, [pc, #48]	; (800e72c <prvResetNextTaskUnblockTime+0x38>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d104      	bne.n	800e70e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <prvResetNextTaskUnblockTime+0x3c>)
 800e706:	f04f 32ff 	mov.w	r2, #4294967295
 800e70a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e70c:	e008      	b.n	800e720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70e:	4b07      	ldr	r3, [pc, #28]	; (800e72c <prvResetNextTaskUnblockTime+0x38>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	4a04      	ldr	r2, [pc, #16]	; (800e730 <prvResetNextTaskUnblockTime+0x3c>)
 800e71e:	6013      	str	r3, [r2, #0]
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	2000901c 	.word	0x2000901c
 800e730:	20009084 	.word	0x20009084

0800e734 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e73a:	4b05      	ldr	r3, [pc, #20]	; (800e750 <xTaskGetCurrentTaskHandle+0x1c>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e740:	687b      	ldr	r3, [r7, #4]
	}
 800e742:	4618      	mov	r0, r3
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	20008f64 	.word	0x20008f64

0800e754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <xTaskGetSchedulerState+0x34>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e762:	2301      	movs	r3, #1
 800e764:	607b      	str	r3, [r7, #4]
 800e766:	e008      	b.n	800e77a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <xTaskGetSchedulerState+0x38>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d102      	bne.n	800e776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e770:	2302      	movs	r3, #2
 800e772:	607b      	str	r3, [r7, #4]
 800e774:	e001      	b.n	800e77a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e776:	2300      	movs	r3, #0
 800e778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e77a:	687b      	ldr	r3, [r7, #4]
	}
 800e77c:	4618      	mov	r0, r3
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr
 800e788:	20009070 	.word	0x20009070
 800e78c:	2000908c 	.word	0x2000908c

0800e790 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e79c:	2300      	movs	r3, #0
 800e79e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d05e      	beq.n	800e864 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7aa:	4b31      	ldr	r3, [pc, #196]	; (800e870 <xTaskPriorityInherit+0xe0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d24e      	bcs.n	800e852 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	db06      	blt.n	800e7ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7bc:	4b2c      	ldr	r3, [pc, #176]	; (800e870 <xTaskPriorityInherit+0xe0>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c2:	f1c3 0207 	rsb	r2, r3, #7
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6959      	ldr	r1, [r3, #20]
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4a26      	ldr	r2, [pc, #152]	; (800e874 <xTaskPriorityInherit+0xe4>)
 800e7dc:	4413      	add	r3, r2
 800e7de:	4299      	cmp	r1, r3
 800e7e0:	d12f      	bne.n	800e842 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fd ffa6 	bl	800c738 <uxListRemove>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10a      	bne.n	800e808 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e7fc:	43da      	mvns	r2, r3
 800e7fe:	4b1e      	ldr	r3, [pc, #120]	; (800e878 <xTaskPriorityInherit+0xe8>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4013      	ands	r3, r2
 800e804:	4a1c      	ldr	r2, [pc, #112]	; (800e878 <xTaskPriorityInherit+0xe8>)
 800e806:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e808:	4b19      	ldr	r3, [pc, #100]	; (800e870 <xTaskPriorityInherit+0xe0>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	2201      	movs	r2, #1
 800e818:	409a      	lsls	r2, r3
 800e81a:	4b17      	ldr	r3, [pc, #92]	; (800e878 <xTaskPriorityInherit+0xe8>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4313      	orrs	r3, r2
 800e820:	4a15      	ldr	r2, [pc, #84]	; (800e878 <xTaskPriorityInherit+0xe8>)
 800e822:	6013      	str	r3, [r2, #0]
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4a10      	ldr	r2, [pc, #64]	; (800e874 <xTaskPriorityInherit+0xe4>)
 800e832:	441a      	add	r2, r3
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3304      	adds	r3, #4
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f7fd ff1f 	bl	800c67e <vListInsertEnd>
 800e840:	e004      	b.n	800e84c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e842:	4b0b      	ldr	r3, [pc, #44]	; (800e870 <xTaskPriorityInherit+0xe0>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e84c:	2301      	movs	r3, #1
 800e84e:	60fb      	str	r3, [r7, #12]
 800e850:	e008      	b.n	800e864 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e856:	4b06      	ldr	r3, [pc, #24]	; (800e870 <xTaskPriorityInherit+0xe0>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d201      	bcs.n	800e864 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e860:	2301      	movs	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e864:	68fb      	ldr	r3, [r7, #12]
	}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20008f64 	.word	0x20008f64
 800e874:	20008f68 	.word	0x20008f68
 800e878:	2000906c 	.word	0x2000906c

0800e87c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b086      	sub	sp, #24
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e888:	2300      	movs	r3, #0
 800e88a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d06e      	beq.n	800e970 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e892:	4b3a      	ldr	r3, [pc, #232]	; (800e97c <xTaskPriorityDisinherit+0x100>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d00a      	beq.n	800e8b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	60fb      	str	r3, [r7, #12]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10a      	bne.n	800e8d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	60bb      	str	r3, [r7, #8]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d044      	beq.n	800e970 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d140      	bne.n	800e970 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fd ff20 	bl	800c738 <uxListRemove>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d115      	bne.n	800e92a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e902:	491f      	ldr	r1, [pc, #124]	; (800e980 <xTaskPriorityDisinherit+0x104>)
 800e904:	4613      	mov	r3, r2
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4413      	add	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	440b      	add	r3, r1
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <xTaskPriorityDisinherit+0xae>
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e918:	2201      	movs	r2, #1
 800e91a:	fa02 f303 	lsl.w	r3, r2, r3
 800e91e:	43da      	mvns	r2, r3
 800e920:	4b18      	ldr	r3, [pc, #96]	; (800e984 <xTaskPriorityDisinherit+0x108>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4013      	ands	r3, r2
 800e926:	4a17      	ldr	r2, [pc, #92]	; (800e984 <xTaskPriorityDisinherit+0x108>)
 800e928:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e936:	f1c3 0207 	rsb	r2, r3, #7
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e942:	2201      	movs	r2, #1
 800e944:	409a      	lsls	r2, r3
 800e946:	4b0f      	ldr	r3, [pc, #60]	; (800e984 <xTaskPriorityDisinherit+0x108>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	4a0d      	ldr	r2, [pc, #52]	; (800e984 <xTaskPriorityDisinherit+0x108>)
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e954:	4613      	mov	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4413      	add	r3, r2
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	4a08      	ldr	r2, [pc, #32]	; (800e980 <xTaskPriorityDisinherit+0x104>)
 800e95e:	441a      	add	r2, r3
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3304      	adds	r3, #4
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	f7fd fe89 	bl	800c67e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e96c:	2301      	movs	r3, #1
 800e96e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e970:	697b      	ldr	r3, [r7, #20]
	}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	20008f64 	.word	0x20008f64
 800e980:	20008f68 	.word	0x20008f68
 800e984:	2000906c 	.word	0x2000906c

0800e988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e996:	2301      	movs	r3, #1
 800e998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d077      	beq.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10a      	bne.n	800e9be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	60fb      	str	r3, [r7, #12]
}
 800e9ba:	bf00      	nop
 800e9bc:	e7fe      	b.n	800e9bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d902      	bls.n	800e9ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	61fb      	str	r3, [r7, #28]
 800e9cc:	e002      	b.n	800e9d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d058      	beq.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e2:	697a      	ldr	r2, [r7, #20]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d153      	bne.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e9e8:	4b2b      	ldr	r3, [pc, #172]	; (800ea98 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	69ba      	ldr	r2, [r7, #24]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d10a      	bne.n	800ea08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f6:	f383 8811 	msr	BASEPRI, r3
 800e9fa:	f3bf 8f6f 	isb	sy
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	60bb      	str	r3, [r7, #8]
}
 800ea04:	bf00      	nop
 800ea06:	e7fe      	b.n	800ea06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	69fa      	ldr	r2, [r7, #28]
 800ea12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	699b      	ldr	r3, [r3, #24]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	db04      	blt.n	800ea26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	f1c3 0207 	rsb	r2, r3, #7
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	6959      	ldr	r1, [r3, #20]
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	4413      	add	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	4a19      	ldr	r2, [pc, #100]	; (800ea9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea36:	4413      	add	r3, r2
 800ea38:	4299      	cmp	r1, r3
 800ea3a:	d129      	bne.n	800ea90 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fd fe79 	bl	800c738 <uxListRemove>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea50:	2201      	movs	r2, #1
 800ea52:	fa02 f303 	lsl.w	r3, r2, r3
 800ea56:	43da      	mvns	r2, r3
 800ea58:	4b11      	ldr	r3, [pc, #68]	; (800eaa0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4013      	ands	r3, r2
 800ea5e:	4a10      	ldr	r2, [pc, #64]	; (800eaa0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea66:	2201      	movs	r2, #1
 800ea68:	409a      	lsls	r2, r3
 800ea6a:	4b0d      	ldr	r3, [pc, #52]	; (800eaa0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	4a0b      	ldr	r2, [pc, #44]	; (800eaa0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ea72:	6013      	str	r3, [r2, #0]
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea78:	4613      	mov	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4a06      	ldr	r2, [pc, #24]	; (800ea9c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ea82:	441a      	add	r2, r3
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	3304      	adds	r3, #4
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7fd fdf7 	bl	800c67e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea90:	bf00      	nop
 800ea92:	3720      	adds	r7, #32
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20008f64 	.word	0x20008f64
 800ea9c:	20008f68 	.word	0x20008f68
 800eaa0:	2000906c 	.word	0x2000906c

0800eaa4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eaa4:	b480      	push	{r7}
 800eaa6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d004      	beq.n	800eaba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eab0:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eab6:	3201      	adds	r2, #1
 800eab8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eaba:	4b03      	ldr	r3, [pc, #12]	; (800eac8 <pvTaskIncrementMutexHeldCount+0x24>)
 800eabc:	681b      	ldr	r3, [r3, #0]
	}
 800eabe:	4618      	mov	r0, r3
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	20008f64 	.word	0x20008f64

0800eacc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ead6:	4b29      	ldr	r3, [pc, #164]	; (800eb7c <prvAddCurrentTaskToDelayedList+0xb0>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eadc:	4b28      	ldr	r3, [pc, #160]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	3304      	adds	r3, #4
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fd fe28 	bl	800c738 <uxListRemove>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d10b      	bne.n	800eb06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800eaee:	4b24      	ldr	r3, [pc, #144]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	fa02 f303 	lsl.w	r3, r2, r3
 800eafa:	43da      	mvns	r2, r3
 800eafc:	4b21      	ldr	r3, [pc, #132]	; (800eb84 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4013      	ands	r3, r2
 800eb02:	4a20      	ldr	r2, [pc, #128]	; (800eb84 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eb04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0c:	d10a      	bne.n	800eb24 <prvAddCurrentTaskToDelayedList+0x58>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb14:	4b1a      	ldr	r3, [pc, #104]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	481a      	ldr	r0, [pc, #104]	; (800eb88 <prvAddCurrentTaskToDelayedList+0xbc>)
 800eb1e:	f7fd fdae 	bl	800c67e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb22:	e026      	b.n	800eb72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb24:	68fa      	ldr	r2, [r7, #12]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4413      	add	r3, r2
 800eb2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb2c:	4b14      	ldr	r3, [pc, #80]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb34:	68ba      	ldr	r2, [r7, #8]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d209      	bcs.n	800eb50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb3c:	4b13      	ldr	r3, [pc, #76]	; (800eb8c <prvAddCurrentTaskToDelayedList+0xc0>)
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	4b0f      	ldr	r3, [pc, #60]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fd fdbc 	bl	800c6c6 <vListInsert>
}
 800eb4e:	e010      	b.n	800eb72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb50:	4b0f      	ldr	r3, [pc, #60]	; (800eb90 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7fd fdb2 	bl	800c6c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb62:	4b0c      	ldr	r3, [pc, #48]	; (800eb94 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d202      	bcs.n	800eb72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb6c:	4a09      	ldr	r2, [pc, #36]	; (800eb94 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	6013      	str	r3, [r2, #0]
}
 800eb72:	bf00      	nop
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20009068 	.word	0x20009068
 800eb80:	20008f64 	.word	0x20008f64
 800eb84:	2000906c 	.word	0x2000906c
 800eb88:	20009050 	.word	0x20009050
 800eb8c:	20009020 	.word	0x20009020
 800eb90:	2000901c 	.word	0x2000901c
 800eb94:	20009084 	.word	0x20009084

0800eb98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b089      	sub	sp, #36	; 0x24
 800eb9c:	af04      	add	r7, sp, #16
 800eb9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800eba0:	2301      	movs	r3, #1
 800eba2:	2202      	movs	r2, #2
 800eba4:	2102      	movs	r1, #2
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 fcb8 	bl	800f51c <USBH_FindInterface>
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	2bff      	cmp	r3, #255	; 0xff
 800ebb4:	d002      	beq.n	800ebbc <USBH_CDC_InterfaceInit+0x24>
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d901      	bls.n	800ebc0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e13d      	b.n	800ee3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fc8d 	bl	800f4e4 <USBH_SelectInterface>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ebce:	7bbb      	ldrb	r3, [r7, #14]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d001      	beq.n	800ebd8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ebd4:	2302      	movs	r3, #2
 800ebd6:	e131      	b.n	800ee3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ebde:	2050      	movs	r0, #80	; 0x50
 800ebe0:	f01c fef6 	bl	802b9d0 <malloc>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebee:	69db      	ldr	r3, [r3, #28]
 800ebf0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d101      	bne.n	800ebfc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	e11f      	b.n	800ee3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ebfc:	2250      	movs	r2, #80	; 0x50
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68b8      	ldr	r0, [r7, #8]
 800ec02:	f01c ff03 	bl	802ba0c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ec06:	7bfb      	ldrb	r3, [r7, #15]
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	211a      	movs	r1, #26
 800ec0c:	fb01 f303 	mul.w	r3, r1, r3
 800ec10:	4413      	add	r3, r2
 800ec12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	b25b      	sxtb	r3, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	da15      	bge.n	800ec4a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ec1e:	7bfb      	ldrb	r3, [r7, #15]
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	211a      	movs	r1, #26
 800ec24:	fb01 f303 	mul.w	r3, r1, r3
 800ec28:	4413      	add	r3, r2
 800ec2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ec2e:	781a      	ldrb	r2, [r3, #0]
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	211a      	movs	r1, #26
 800ec3a:	fb01 f303 	mul.w	r3, r1, r3
 800ec3e:	4413      	add	r3, r2
 800ec40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ec44:	881a      	ldrh	r2, [r3, #0]
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	785b      	ldrb	r3, [r3, #1]
 800ec4e:	4619      	mov	r1, r3
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f002 f988 	bl	8010f66 <USBH_AllocPipe>
 800ec56:	4603      	mov	r3, r0
 800ec58:	461a      	mov	r2, r3
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	7819      	ldrb	r1, [r3, #0]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	7858      	ldrb	r0, [r3, #1]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	8952      	ldrh	r2, [r2, #10]
 800ec76:	9202      	str	r2, [sp, #8]
 800ec78:	2203      	movs	r2, #3
 800ec7a:	9201      	str	r2, [sp, #4]
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	4623      	mov	r3, r4
 800ec80:	4602      	mov	r2, r0
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f002 f940 	bl	8010f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	4619      	mov	r1, r3
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f00a fdfd 	bl	8019890 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ec96:	2300      	movs	r3, #0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	210a      	movs	r1, #10
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 fc3d 	bl	800f51c <USBH_FindInterface>
 800eca2:	4603      	mov	r3, r0
 800eca4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800eca6:	7bfb      	ldrb	r3, [r7, #15]
 800eca8:	2bff      	cmp	r3, #255	; 0xff
 800ecaa:	d002      	beq.n	800ecb2 <USBH_CDC_InterfaceInit+0x11a>
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d901      	bls.n	800ecb6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	e0c2      	b.n	800ee3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	211a      	movs	r1, #26
 800ecbc:	fb01 f303 	mul.w	r3, r1, r3
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	b25b      	sxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	da16      	bge.n	800ecfc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	211a      	movs	r1, #26
 800ecd4:	fb01 f303 	mul.w	r3, r1, r3
 800ecd8:	4413      	add	r3, r2
 800ecda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ecde:	781a      	ldrb	r2, [r3, #0]
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	211a      	movs	r1, #26
 800ecea:	fb01 f303 	mul.w	r3, r1, r3
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ecf4:	881a      	ldrh	r2, [r3, #0]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	835a      	strh	r2, [r3, #26]
 800ecfa:	e015      	b.n	800ed28 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	211a      	movs	r1, #26
 800ed02:	fb01 f303 	mul.w	r3, r1, r3
 800ed06:	4413      	add	r3, r2
 800ed08:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ed0c:	781a      	ldrb	r2, [r3, #0]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	211a      	movs	r1, #26
 800ed18:	fb01 f303 	mul.w	r3, r1, r3
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ed22:	881a      	ldrh	r2, [r3, #0]
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	211a      	movs	r1, #26
 800ed2e:	fb01 f303 	mul.w	r3, r1, r3
 800ed32:	4413      	add	r3, r2
 800ed34:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	b25b      	sxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	da16      	bge.n	800ed6e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed40:	7bfb      	ldrb	r3, [r7, #15]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	211a      	movs	r1, #26
 800ed46:	fb01 f303 	mul.w	r3, r1, r3
 800ed4a:	4413      	add	r3, r2
 800ed4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	211a      	movs	r1, #26
 800ed5c:	fb01 f303 	mul.w	r3, r1, r3
 800ed60:	4413      	add	r3, r2
 800ed62:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ed66:	881a      	ldrh	r2, [r3, #0]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	835a      	strh	r2, [r3, #26]
 800ed6c:	e015      	b.n	800ed9a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed6e:	7bfb      	ldrb	r3, [r7, #15]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	211a      	movs	r1, #26
 800ed74:	fb01 f303 	mul.w	r3, r1, r3
 800ed78:	4413      	add	r3, r2
 800ed7a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ed7e:	781a      	ldrb	r2, [r3, #0]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	211a      	movs	r1, #26
 800ed8a:	fb01 f303 	mul.w	r3, r1, r3
 800ed8e:	4413      	add	r3, r2
 800ed90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ed94:	881a      	ldrh	r2, [r3, #0]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	7b9b      	ldrb	r3, [r3, #14]
 800ed9e:	4619      	mov	r1, r3
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f002 f8e0 	bl	8010f66 <USBH_AllocPipe>
 800eda6:	4603      	mov	r3, r0
 800eda8:	461a      	mov	r2, r3
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	7bdb      	ldrb	r3, [r3, #15]
 800edb2:	4619      	mov	r1, r3
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f002 f8d6 	bl	8010f66 <USBH_AllocPipe>
 800edba:	4603      	mov	r3, r0
 800edbc:	461a      	mov	r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	7b59      	ldrb	r1, [r3, #13]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	7b98      	ldrb	r0, [r3, #14]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800edd6:	68ba      	ldr	r2, [r7, #8]
 800edd8:	8b12      	ldrh	r2, [r2, #24]
 800edda:	9202      	str	r2, [sp, #8]
 800eddc:	2202      	movs	r2, #2
 800edde:	9201      	str	r2, [sp, #4]
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	4623      	mov	r3, r4
 800ede4:	4602      	mov	r2, r0
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f002 f88e 	bl	8010f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	7b19      	ldrb	r1, [r3, #12]
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	7bd8      	ldrb	r0, [r3, #15]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	8b52      	ldrh	r2, [r2, #26]
 800ee04:	9202      	str	r2, [sp, #8]
 800ee06:	2202      	movs	r2, #2
 800ee08:	9201      	str	r2, [sp, #4]
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	4623      	mov	r3, r4
 800ee0e:	4602      	mov	r2, r0
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f002 f879 	bl	8010f08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	7b5b      	ldrb	r3, [r3, #13]
 800ee22:	2200      	movs	r2, #0
 800ee24:	4619      	mov	r1, r3
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f00a fd32 	bl	8019890 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	7b1b      	ldrb	r3, [r3, #12]
 800ee30:	2200      	movs	r2, #0
 800ee32:	4619      	mov	r1, r3
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f00a fd2b 	bl	8019890 <USBH_LL_SetToggle>

  return USBH_OK;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3714      	adds	r7, #20
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd90      	pop	{r4, r7, pc}

0800ee44 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee52:	69db      	ldr	r3, [r3, #28]
 800ee54:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00e      	beq.n	800ee7c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f002 f86e 	bl	8010f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f002 f899 	bl	8010fa8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	7b1b      	ldrb	r3, [r3, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00e      	beq.n	800eea2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	7b1b      	ldrb	r3, [r3, #12]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f002 f85b 	bl	8010f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	7b1b      	ldrb	r3, [r3, #12]
 800ee94:	4619      	mov	r1, r3
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f002 f886 	bl	8010fa8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	7b5b      	ldrb	r3, [r3, #13]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00e      	beq.n	800eec8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	7b5b      	ldrb	r3, [r3, #13]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f002 f848 	bl	8010f46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	7b5b      	ldrb	r3, [r3, #13]
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f002 f873 	bl	8010fa8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00b      	beq.n	800eeec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	4618      	mov	r0, r3
 800eede:	f01c fd7f 	bl	802b9e0 <free>
    phost->pActiveClass->pData = 0U;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eee8:	2200      	movs	r2, #0
 800eeea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef04:	69db      	ldr	r3, [r3, #28]
 800ef06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	3340      	adds	r3, #64	; 0x40
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f8b1 	bl	800f076 <GetLineCoding>
 800ef14:	4603      	mov	r3, r0
 800ef16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ef18:	7afb      	ldrb	r3, [r7, #11]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d105      	bne.n	800ef2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef24:	2102      	movs	r1, #2
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef4a:	69db      	ldr	r3, [r3, #28]
 800ef4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ef54:	2b04      	cmp	r3, #4
 800ef56:	d877      	bhi.n	800f048 <USBH_CDC_Process+0x114>
 800ef58:	a201      	add	r2, pc, #4	; (adr r2, 800ef60 <USBH_CDC_Process+0x2c>)
 800ef5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef5e:	bf00      	nop
 800ef60:	0800ef75 	.word	0x0800ef75
 800ef64:	0800ef7b 	.word	0x0800ef7b
 800ef68:	0800efab 	.word	0x0800efab
 800ef6c:	0800f01f 	.word	0x0800f01f
 800ef70:	0800f02d 	.word	0x0800f02d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	73fb      	strb	r3, [r7, #15]
      break;
 800ef78:	e06d      	b.n	800f056 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef7e:	4619      	mov	r1, r3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f897 	bl	800f0b4 <SetLineCoding>
 800ef86:	4603      	mov	r3, r0
 800ef88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ef8a:	7bbb      	ldrb	r3, [r7, #14]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d104      	bne.n	800ef9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2202      	movs	r2, #2
 800ef94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ef98:	e058      	b.n	800f04c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ef9a:	7bbb      	ldrb	r3, [r7, #14]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d055      	beq.n	800f04c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2204      	movs	r2, #4
 800efa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800efa8:	e050      	b.n	800f04c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	3340      	adds	r3, #64	; 0x40
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f860 	bl	800f076 <GetLineCoding>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d126      	bne.n	800f00e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efd2:	791b      	ldrb	r3, [r3, #4]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d13b      	bne.n	800f050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efe2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d133      	bne.n	800f050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eff2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d12b      	bne.n	800f050 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f000:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f002:	429a      	cmp	r2, r3
 800f004:	d124      	bne.n	800f050 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f982 	bl	800f310 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f00c:	e020      	b.n	800f050 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d01d      	beq.n	800f050 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2204      	movs	r2, #4
 800f018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f01c:	e018      	b.n	800f050 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 f867 	bl	800f0f2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 f8f6 	bl	800f216 <CDC_ProcessReception>
      break;
 800f02a:	e014      	b.n	800f056 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f02c:	2100      	movs	r1, #0
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f001 f95b 	bl	80102ea <USBH_ClrFeature>
 800f034:	4603      	mov	r3, r0
 800f036:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f038:	7bbb      	ldrb	r3, [r7, #14]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10a      	bne.n	800f054 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f046:	e005      	b.n	800f054 <USBH_CDC_Process+0x120>

    default:
      break;
 800f048:	bf00      	nop
 800f04a:	e004      	b.n	800f056 <USBH_CDC_Process+0x122>
      break;
 800f04c:	bf00      	nop
 800f04e:	e002      	b.n	800f056 <USBH_CDC_Process+0x122>
      break;
 800f050:	bf00      	nop
 800f052:	e000      	b.n	800f056 <USBH_CDC_Process+0x122>
      break;
 800f054:	bf00      	nop

  }

  return status;
 800f056:	7bfb      	ldrb	r3, [r7, #15]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b082      	sub	sp, #8
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	22a1      	movs	r2, #161	; 0xa1
 800f084:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2221      	movs	r2, #33	; 0x21
 800f08a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2207      	movs	r2, #7
 800f09c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	2207      	movs	r2, #7
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f001 fbed 	bl	8010884 <USBH_CtlReq>
 800f0aa:	4603      	mov	r3, r0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2221      	movs	r2, #33	; 0x21
 800f0c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2220      	movs	r2, #32
 800f0c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2207      	movs	r2, #7
 800f0da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2207      	movs	r2, #7
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f001 fbce 	bl	8010884 <USBH_CtlReq>
 800f0e8:	4603      	mov	r3, r0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b086      	sub	sp, #24
 800f0f6:	af02      	add	r7, sp, #8
 800f0f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f100:	69db      	ldr	r3, [r3, #28]
 800f102:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f104:	2300      	movs	r3, #0
 800f106:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d002      	beq.n	800f118 <CDC_ProcessTransmission+0x26>
 800f112:	2b02      	cmp	r3, #2
 800f114:	d023      	beq.n	800f15e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f116:	e07a      	b.n	800f20e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	8b12      	ldrh	r2, [r2, #24]
 800f120:	4293      	cmp	r3, r2
 800f122:	d90b      	bls.n	800f13c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	69d9      	ldr	r1, [r3, #28]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	8b1a      	ldrh	r2, [r3, #24]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	7b5b      	ldrb	r3, [r3, #13]
 800f130:	2001      	movs	r0, #1
 800f132:	9000      	str	r0, [sp, #0]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f001 fea4 	bl	8010e82 <USBH_BulkSendData>
 800f13a:	e00b      	b.n	800f154 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800f144:	b29a      	uxth	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	7b5b      	ldrb	r3, [r3, #13]
 800f14a:	2001      	movs	r0, #1
 800f14c:	9000      	str	r0, [sp, #0]
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f001 fe97 	bl	8010e82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f15c:	e057      	b.n	800f20e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	7b5b      	ldrb	r3, [r3, #13]
 800f162:	4619      	mov	r1, r3
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f00a fb69 	bl	801983c <USBH_LL_GetURBState>
 800f16a:	4603      	mov	r3, r0
 800f16c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f16e:	7afb      	ldrb	r3, [r7, #11]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d136      	bne.n	800f1e2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	8b12      	ldrh	r2, [r2, #24]
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d90e      	bls.n	800f19e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	8b12      	ldrh	r2, [r2, #24]
 800f188:	1a9a      	subs	r2, r3, r2
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	8b12      	ldrh	r2, [r2, #24]
 800f196:	441a      	add	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	61da      	str	r2, [r3, #28]
 800f19c:	e002      	b.n	800f1a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800f1b4:	e006      	b.n	800f1c4 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f892 	bl	800f2e8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2204      	movs	r2, #4
 800f1c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4619      	mov	r1, r3
 800f1dc:	f7fc ff80 	bl	800c0e0 <osMessagePut>
      break;
 800f1e0:	e014      	b.n	800f20c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800f1e2:	7afb      	ldrb	r3, [r7, #11]
 800f1e4:	2b02      	cmp	r3, #2
 800f1e6:	d111      	bne.n	800f20c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f204:	2200      	movs	r2, #0
 800f206:	4619      	mov	r1, r3
 800f208:	f7fc ff6a 	bl	800c0e0 <osMessagePut>
      break;
 800f20c:	bf00      	nop
  }
}
 800f20e:	bf00      	nop
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b086      	sub	sp, #24
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f224:	69db      	ldr	r3, [r3, #28]
 800f226:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f228:	2300      	movs	r3, #0
 800f22a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f232:	2b03      	cmp	r3, #3
 800f234:	d002      	beq.n	800f23c <CDC_ProcessReception+0x26>
 800f236:	2b04      	cmp	r3, #4
 800f238:	d00e      	beq.n	800f258 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f23a:	e051      	b.n	800f2e0 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6a19      	ldr	r1, [r3, #32]
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	8b5a      	ldrh	r2, [r3, #26]
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	7b1b      	ldrb	r3, [r3, #12]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f001 fe3f 	bl	8010ecc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	2204      	movs	r2, #4
 800f252:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f256:	e043      	b.n	800f2e0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	7b1b      	ldrb	r3, [r3, #12]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f00a faec 	bl	801983c <USBH_LL_GetURBState>
 800f264:	4603      	mov	r3, r0
 800f266:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f268:	7cfb      	ldrb	r3, [r7, #19]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d137      	bne.n	800f2de <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	7b1b      	ldrb	r3, [r3, #12]
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f00a fa4f 	bl	8019718 <USBH_LL_GetLastXferSize>
 800f27a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	429a      	cmp	r2, r3
 800f284:	d016      	beq.n	800f2b4 <CDC_ProcessReception+0x9e>
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	8b5b      	ldrh	r3, [r3, #26]
 800f28a:	461a      	mov	r2, r3
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	4293      	cmp	r3, r2
 800f290:	d910      	bls.n	800f2b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	1ad2      	subs	r2, r2, r3
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	6a1a      	ldr	r2, [r3, #32]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	441a      	add	r2, r3
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	2203      	movs	r2, #3
 800f2ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800f2b2:	e006      	b.n	800f2c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f81d 	bl	800f2fc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2204      	movs	r2, #4
 800f2c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f7fc ff01 	bl	800c0e0 <osMessagePut>
      break;
 800f2de:	bf00      	nop
  }
}
 800f2e0:	bf00      	nop
 800f2e2:	3718      	adds	r7, #24
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800f324:	b5b0      	push	{r4, r5, r7, lr}
 800f326:	b090      	sub	sp, #64	; 0x40
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	4613      	mov	r3, r2
 800f330:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f338:	2302      	movs	r3, #2
 800f33a:	e04d      	b.n	800f3d8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	79fa      	ldrb	r2, [r7, #7]
 800f340:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 f847 	bl	800f3e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2200      	movs	r2, #0
 800f376:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d003      	beq.n	800f388 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800f388:	4b15      	ldr	r3, [pc, #84]	; (800f3e0 <USBH_Init+0xbc>)
 800f38a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800f38e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800f394:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f398:	2100      	movs	r1, #0
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fc fe78 	bl	800c090 <osMessageCreate>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <USBH_Init+0xc0>)
 800f3aa:	f107 0414 	add.w	r4, r7, #20
 800f3ae:	461d      	mov	r5, r3
 800f3b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800f3bc:	f107 0314 	add.w	r3, r7, #20
 800f3c0:	68f9      	ldr	r1, [r7, #12]
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fc fd39 	bl	800be3a <osThreadCreate>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f3d0:	68f8      	ldr	r0, [r7, #12]
 800f3d2:	f00a f8e3 	bl	801959c <USBH_LL_Init>

  return USBH_OK;
 800f3d6:	2300      	movs	r3, #0
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3740      	adds	r7, #64	; 0x40
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bdb0      	pop	{r4, r5, r7, pc}
 800f3e0:	0802d8a8 	.word	0x0802d8a8
 800f3e4:	0802d8b8 	.word	0x0802d8b8

0800f3e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	e009      	b.n	800f40e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	33e0      	adds	r3, #224	; 0xe0
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	2200      	movs	r2, #0
 800f406:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	3301      	adds	r3, #1
 800f40c:	60fb      	str	r3, [r7, #12]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2b0f      	cmp	r3, #15
 800f412:	d9f2      	bls.n	800f3fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f414:	2300      	movs	r3, #0
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e009      	b.n	800f42e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f424:	2200      	movs	r2, #0
 800f426:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	3301      	adds	r3, #1
 800f42c:	60fb      	str	r3, [r7, #12]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f434:	d3f1      	bcc.n	800f41a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2200      	movs	r2, #0
 800f44c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2201      	movs	r2, #1
 800f454:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2240      	movs	r2, #64	; 0x40
 800f45a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d016      	beq.n	800f4d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10e      	bne.n	800f4cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f4b4:	1c59      	adds	r1, r3, #1
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	33de      	adds	r3, #222	; 0xde
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	73fb      	strb	r3, [r7, #15]
 800f4ca:	e004      	b.n	800f4d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	73fb      	strb	r3, [r7, #15]
 800f4d0:	e001      	b.n	800f4d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f4d2:	2302      	movs	r3, #2
 800f4d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3714      	adds	r7, #20
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f4fa:	78fa      	ldrb	r2, [r7, #3]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d204      	bcs.n	800f50a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	78fa      	ldrb	r2, [r7, #3]
 800f504:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f508:	e001      	b.n	800f50e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f50a:	2302      	movs	r3, #2
 800f50c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3714      	adds	r7, #20
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	4608      	mov	r0, r1
 800f526:	4611      	mov	r1, r2
 800f528:	461a      	mov	r2, r3
 800f52a:	4603      	mov	r3, r0
 800f52c:	70fb      	strb	r3, [r7, #3]
 800f52e:	460b      	mov	r3, r1
 800f530:	70bb      	strb	r3, [r7, #2]
 800f532:	4613      	mov	r3, r2
 800f534:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f536:	2300      	movs	r3, #0
 800f538:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f544:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f546:	e025      	b.n	800f594 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f548:	7dfb      	ldrb	r3, [r7, #23]
 800f54a:	221a      	movs	r2, #26
 800f54c:	fb02 f303 	mul.w	r3, r2, r3
 800f550:	3308      	adds	r3, #8
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4413      	add	r3, r2
 800f556:	3302      	adds	r3, #2
 800f558:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	795b      	ldrb	r3, [r3, #5]
 800f55e:	78fa      	ldrb	r2, [r7, #3]
 800f560:	429a      	cmp	r2, r3
 800f562:	d002      	beq.n	800f56a <USBH_FindInterface+0x4e>
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	2bff      	cmp	r3, #255	; 0xff
 800f568:	d111      	bne.n	800f58e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f56e:	78ba      	ldrb	r2, [r7, #2]
 800f570:	429a      	cmp	r2, r3
 800f572:	d002      	beq.n	800f57a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f574:	78bb      	ldrb	r3, [r7, #2]
 800f576:	2bff      	cmp	r3, #255	; 0xff
 800f578:	d109      	bne.n	800f58e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f57e:	787a      	ldrb	r2, [r7, #1]
 800f580:	429a      	cmp	r2, r3
 800f582:	d002      	beq.n	800f58a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f584:	787b      	ldrb	r3, [r7, #1]
 800f586:	2bff      	cmp	r3, #255	; 0xff
 800f588:	d101      	bne.n	800f58e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f58a:	7dfb      	ldrb	r3, [r7, #23]
 800f58c:	e006      	b.n	800f59c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f58e:	7dfb      	ldrb	r3, [r7, #23]
 800f590:	3301      	adds	r3, #1
 800f592:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	2b01      	cmp	r3, #1
 800f598:	d9d6      	bls.n	800f548 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f59a:	23ff      	movs	r3, #255	; 0xff
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	371c      	adds	r7, #28
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f00a f839 	bl	8019628 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f5b6:	2101      	movs	r1, #1
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f00a f952 	bl	8019862 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af04      	add	r7, sp, #16
 800f5ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d102      	bne.n	800f5ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2203      	movs	r2, #3
 800f5e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b0b      	cmp	r3, #11
 800f5f2:	f200 8247 	bhi.w	800fa84 <USBH_Process+0x4bc>
 800f5f6:	a201      	add	r2, pc, #4	; (adr r2, 800f5fc <USBH_Process+0x34>)
 800f5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5fc:	0800f62d 	.word	0x0800f62d
 800f600:	0800f67b 	.word	0x0800f67b
 800f604:	0800f6ff 	.word	0x0800f6ff
 800f608:	0800fa03 	.word	0x0800fa03
 800f60c:	0800fa85 	.word	0x0800fa85
 800f610:	0800f7bf 	.word	0x0800f7bf
 800f614:	0800f98d 	.word	0x0800f98d
 800f618:	0800f811 	.word	0x0800f811
 800f61c:	0800f84d 	.word	0x0800f84d
 800f620:	0800f887 	.word	0x0800f887
 800f624:	0800f8e5 	.word	0x0800f8e5
 800f628:	0800f9eb 	.word	0x0800f9eb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	f000 8227 	beq.w	800fa88 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2201      	movs	r2, #1
 800f63e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f640:	20c8      	movs	r0, #200	; 0xc8
 800f642:	f00a f955 	bl	80198f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f00a f84b 	bl	80196e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2201      	movs	r2, #1
 800f660:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f670:	2200      	movs	r2, #0
 800f672:	4619      	mov	r1, r3
 800f674:	f7fc fd34 	bl	800c0e0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f678:	e206      	b.n	800fa88 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f680:	2b01      	cmp	r3, #1
 800f682:	d107      	bne.n	800f694 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2202      	movs	r2, #2
 800f690:	701a      	strb	r2, [r3, #0]
 800f692:	e025      	b.n	800f6e0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f69a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f69e:	d914      	bls.n	800f6ca <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f6b6:	2b03      	cmp	r3, #3
 800f6b8:	d903      	bls.n	800f6c2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	220d      	movs	r2, #13
 800f6be:	701a      	strb	r2, [r3, #0]
 800f6c0:	e00e      	b.n	800f6e0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	701a      	strb	r2, [r3, #0]
 800f6c8:	e00a      	b.n	800f6e0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f6d0:	f103 020a 	add.w	r2, r3, #10
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f6da:	200a      	movs	r0, #10
 800f6dc:	f00a f908 	bl	80198f0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	f7fc fcf2 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f6fc:	e1cb      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f704:	2b00      	cmp	r3, #0
 800f706:	d005      	beq.n	800f714 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f70e:	2104      	movs	r1, #4
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f714:	2064      	movs	r0, #100	; 0x64
 800f716:	f00a f8eb 	bl	80198f0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f009 ffba 	bl	8019694 <USBH_LL_GetSpeed>
 800f720:	4603      	mov	r3, r0
 800f722:	461a      	mov	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2205      	movs	r2, #5
 800f72e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f730:	2100      	movs	r1, #0
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f001 fc17 	bl	8010f66 <USBH_AllocPipe>
 800f738:	4603      	mov	r3, r0
 800f73a:	461a      	mov	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f740:	2180      	movs	r1, #128	; 0x80
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f001 fc0f 	bl	8010f66 <USBH_AllocPipe>
 800f748:	4603      	mov	r3, r0
 800f74a:	461a      	mov	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	7919      	ldrb	r1, [r3, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f764:	b292      	uxth	r2, r2
 800f766:	9202      	str	r2, [sp, #8]
 800f768:	2200      	movs	r2, #0
 800f76a:	9201      	str	r2, [sp, #4]
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	4603      	mov	r3, r0
 800f770:	2280      	movs	r2, #128	; 0x80
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f001 fbc8 	bl	8010f08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7959      	ldrb	r1, [r3, #5]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f78c:	b292      	uxth	r2, r2
 800f78e:	9202      	str	r2, [sp, #8]
 800f790:	2200      	movs	r2, #0
 800f792:	9201      	str	r2, [sp, #4]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	4603      	mov	r3, r0
 800f798:	2200      	movs	r2, #0
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f001 fbb4 	bl	8010f08 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	f7fc fc92 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f7bc:	e16b      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f96e 	bl	800faa0 <USBH_HandleEnum>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f7c8:	7bbb      	ldrb	r3, [r7, #14]
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f040 815d 	bne.w	800fa8c <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d103      	bne.n	800f7ec <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2208      	movs	r2, #8
 800f7e8:	701a      	strb	r2, [r3, #0]
 800f7ea:	e002      	b.n	800f7f2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2207      	movs	r2, #7
 800f7f0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2205      	movs	r2, #5
 800f7f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f806:	2200      	movs	r2, #0
 800f808:	4619      	mov	r1, r3
 800f80a:	f7fc fc69 	bl	800c0e0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f80e:	e13d      	b.n	800fa8c <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 813a 	beq.w	800fa90 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f822:	2101      	movs	r1, #1
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2208      	movs	r2, #8
 800f82c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2205      	movs	r2, #5
 800f832:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f842:	2200      	movs	r2, #0
 800f844:	4619      	mov	r1, r3
 800f846:	f7fc fc4b 	bl	800c0e0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f84a:	e121      	b.n	800fa90 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f852:	b29b      	uxth	r3, r3
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fd00 	bl	801025c <USBH_SetCfg>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2209      	movs	r2, #9
 800f866:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f87c:	2200      	movs	r2, #0
 800f87e:	4619      	mov	r1, r3
 800f880:	f7fc fc2e 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f884:	e107      	b.n	800fa96 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f88c:	f003 0320 	and.w	r3, r3, #32
 800f890:	2b00      	cmp	r3, #0
 800f892:	d015      	beq.n	800f8c0 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f894:	2101      	movs	r1, #1
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fd03 	bl	80102a2 <USBH_SetFeature>
 800f89c:	4603      	mov	r3, r0
 800f89e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d103      	bne.n	800f8b0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	220a      	movs	r2, #10
 800f8ac:	701a      	strb	r2, [r3, #0]
 800f8ae:	e00a      	b.n	800f8c6 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800f8b0:	7bbb      	ldrb	r3, [r7, #14]
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d106      	bne.n	800f8c6 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	220a      	movs	r2, #10
 800f8bc:	701a      	strb	r2, [r3, #0]
 800f8be:	e002      	b.n	800f8c6 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	220a      	movs	r2, #10
 800f8c4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8da:	2200      	movs	r2, #0
 800f8dc:	4619      	mov	r1, r3
 800f8de:	f7fc fbff 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f8e2:	e0d8      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d03f      	beq.n	800f96e <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	73fb      	strb	r3, [r7, #15]
 800f8fa:	e016      	b.n	800f92a <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f8fc:	7bfa      	ldrb	r2, [r7, #15]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	32de      	adds	r2, #222	; 0xde
 800f902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f906:	791a      	ldrb	r2, [r3, #4]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f90e:	429a      	cmp	r2, r3
 800f910:	d108      	bne.n	800f924 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f912:	7bfa      	ldrb	r2, [r7, #15]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	32de      	adds	r2, #222	; 0xde
 800f918:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f922:	e005      	b.n	800f930 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f924:	7bfb      	ldrb	r3, [r7, #15]
 800f926:	3301      	adds	r3, #1
 800f928:	73fb      	strb	r3, [r7, #15]
 800f92a:	7bfb      	ldrb	r3, [r7, #15]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0e5      	beq.n	800f8fc <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d016      	beq.n	800f968 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f940:	689b      	ldr	r3, [r3, #8]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d109      	bne.n	800f960 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2206      	movs	r2, #6
 800f950:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f958:	2103      	movs	r1, #3
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	4798      	blx	r3
 800f95e:	e006      	b.n	800f96e <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	220d      	movs	r2, #13
 800f964:	701a      	strb	r2, [r3, #0]
 800f966:	e002      	b.n	800f96e <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	220d      	movs	r2, #13
 800f96c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2205      	movs	r2, #5
 800f972:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f982:	2200      	movs	r2, #0
 800f984:	4619      	mov	r1, r3
 800f986:	f7fc fbab 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f98a:	e084      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f992:	2b00      	cmp	r3, #0
 800f994:	d017      	beq.n	800f9c6 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f99c:	691b      	ldr	r3, [r3, #16]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	4798      	blx	r3
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f9a6:	7bbb      	ldrb	r3, [r7, #14]
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d103      	bne.n	800f9b6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	220b      	movs	r2, #11
 800f9b2:	701a      	strb	r2, [r3, #0]
 800f9b4:	e00a      	b.n	800f9cc <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800f9b6:	7bbb      	ldrb	r3, [r7, #14]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d106      	bne.n	800f9cc <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	220d      	movs	r2, #13
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	e002      	b.n	800f9cc <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	220d      	movs	r2, #13
 800f9ca:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2205      	movs	r2, #5
 800f9d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	f7fc fb7c 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9e8:	e055      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d04f      	beq.n	800fa94 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9fa:	695b      	ldr	r3, [r3, #20]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	4798      	blx	r3
      }
      break;
 800fa00:	e048      	b.n	800fa94 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff fcec 	bl	800f3e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa3e:	2105      	movs	r1, #5
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d107      	bne.n	800fa60 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7ff fda5 	bl	800f5a8 <USBH_Start>
 800fa5e:	e002      	b.n	800fa66 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f009 fde1 	bl	8019628 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f7fc fb2f 	bl	800c0e0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa82:	e008      	b.n	800fa96 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800fa84:	bf00      	nop
 800fa86:	e006      	b.n	800fa96 <USBH_Process+0x4ce>
      break;
 800fa88:	bf00      	nop
 800fa8a:	e004      	b.n	800fa96 <USBH_Process+0x4ce>
      break;
 800fa8c:	bf00      	nop
 800fa8e:	e002      	b.n	800fa96 <USBH_Process+0x4ce>
    break;
 800fa90:	bf00      	nop
 800fa92:	e000      	b.n	800fa96 <USBH_Process+0x4ce>
      break;
 800fa94:	bf00      	nop
  }
  return USBH_OK;
 800fa96:	2300      	movs	r3, #0
}
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3710      	adds	r7, #16
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af04      	add	r7, sp, #16
 800faa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800faa8:	2301      	movs	r3, #1
 800faaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800faac:	2301      	movs	r3, #1
 800faae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	785b      	ldrb	r3, [r3, #1]
 800fab4:	2b07      	cmp	r3, #7
 800fab6:	f200 8208 	bhi.w	800feca <USBH_HandleEnum+0x42a>
 800faba:	a201      	add	r2, pc, #4	; (adr r2, 800fac0 <USBH_HandleEnum+0x20>)
 800fabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac0:	0800fae1 	.word	0x0800fae1
 800fac4:	0800fb9f 	.word	0x0800fb9f
 800fac8:	0800fc09 	.word	0x0800fc09
 800facc:	0800fc97 	.word	0x0800fc97
 800fad0:	0800fd01 	.word	0x0800fd01
 800fad4:	0800fd71 	.word	0x0800fd71
 800fad8:	0800fe0d 	.word	0x0800fe0d
 800fadc:	0800fe8b 	.word	0x0800fe8b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fae0:	2108      	movs	r1, #8
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 faea 	bl	80100bc <USBH_Get_DevDesc>
 800fae8:	4603      	mov	r3, r0
 800faea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800faec:	7bbb      	ldrb	r3, [r7, #14]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d130      	bne.n	800fb54 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	7919      	ldrb	r1, [r3, #4]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fb16:	b292      	uxth	r2, r2
 800fb18:	9202      	str	r2, [sp, #8]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	9201      	str	r2, [sp, #4]
 800fb1e:	9300      	str	r3, [sp, #0]
 800fb20:	4603      	mov	r3, r0
 800fb22:	2280      	movs	r2, #128	; 0x80
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f001 f9ef 	bl	8010f08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	7959      	ldrb	r1, [r3, #5]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb3e:	b292      	uxth	r2, r2
 800fb40:	9202      	str	r2, [sp, #8]
 800fb42:	2200      	movs	r2, #0
 800fb44:	9201      	str	r2, [sp, #4]
 800fb46:	9300      	str	r3, [sp, #0]
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f001 f9db 	bl	8010f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fb52:	e1bc      	b.n	800fece <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
 800fb56:	2b03      	cmp	r3, #3
 800fb58:	f040 81b9 	bne.w	800fece <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb62:	3301      	adds	r3, #1
 800fb64:	b2da      	uxtb	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb72:	2b03      	cmp	r3, #3
 800fb74:	d903      	bls.n	800fb7e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	220d      	movs	r2, #13
 800fb7a:	701a      	strb	r2, [r3, #0]
      break;
 800fb7c:	e1a7      	b.n	800fece <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	795b      	ldrb	r3, [r3, #5]
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f001 fa0f 	bl	8010fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	791b      	ldrb	r3, [r3, #4]
 800fb8e:	4619      	mov	r1, r3
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f001 fa09 	bl	8010fa8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	701a      	strb	r2, [r3, #0]
      break;
 800fb9c:	e197      	b.n	800fece <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fb9e:	2112      	movs	r1, #18
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fa8b 	bl	80100bc <USBH_Get_DevDesc>
 800fba6:	4603      	mov	r3, r0
 800fba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d103      	bne.n	800fbb8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fbb6:	e18c      	b.n	800fed2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fbb8:	7bbb      	ldrb	r3, [r7, #14]
 800fbba:	2b03      	cmp	r3, #3
 800fbbc:	f040 8189 	bne.w	800fed2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d903      	bls.n	800fbe2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	220d      	movs	r2, #13
 800fbde:	701a      	strb	r2, [r3, #0]
      break;
 800fbe0:	e177      	b.n	800fed2 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	795b      	ldrb	r3, [r3, #5]
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f001 f9dd 	bl	8010fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	791b      	ldrb	r3, [r3, #4]
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f001 f9d7 	bl	8010fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	701a      	strb	r2, [r3, #0]
      break;
 800fc06:	e164      	b.n	800fed2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fc08:	2101      	movs	r1, #1
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fb02 	bl	8010214 <USBH_SetAddress>
 800fc10:	4603      	mov	r3, r0
 800fc12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d132      	bne.n	800fc80 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800fc1a:	2002      	movs	r0, #2
 800fc1c:	f009 fe68 	bl	80198f0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2203      	movs	r2, #3
 800fc2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	7919      	ldrb	r1, [r3, #4]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fc42:	b292      	uxth	r2, r2
 800fc44:	9202      	str	r2, [sp, #8]
 800fc46:	2200      	movs	r2, #0
 800fc48:	9201      	str	r2, [sp, #4]
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2280      	movs	r2, #128	; 0x80
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f001 f959 	bl	8010f08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	7959      	ldrb	r1, [r3, #5]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc6a:	b292      	uxth	r2, r2
 800fc6c:	9202      	str	r2, [sp, #8]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	9201      	str	r2, [sp, #4]
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	4603      	mov	r3, r0
 800fc76:	2200      	movs	r2, #0
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f001 f945 	bl	8010f08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fc7e:	e12a      	b.n	800fed6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc80:	7bbb      	ldrb	r3, [r7, #14]
 800fc82:	2b03      	cmp	r3, #3
 800fc84:	f040 8127 	bne.w	800fed6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	220d      	movs	r2, #13
 800fc8c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	705a      	strb	r2, [r3, #1]
      break;
 800fc94:	e11f      	b.n	800fed6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fc96:	2109      	movs	r1, #9
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	f000 fa37 	bl	801010c <USBH_Get_CfgDesc>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fca2:	7bbb      	ldrb	r3, [r7, #14]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d103      	bne.n	800fcb0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2204      	movs	r2, #4
 800fcac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fcae:	e114      	b.n	800feda <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fcb0:	7bbb      	ldrb	r3, [r7, #14]
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	f040 8111 	bne.w	800feda <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fcce:	2b03      	cmp	r3, #3
 800fcd0:	d903      	bls.n	800fcda <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	220d      	movs	r2, #13
 800fcd6:	701a      	strb	r2, [r3, #0]
      break;
 800fcd8:	e0ff      	b.n	800feda <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	795b      	ldrb	r3, [r3, #5]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 f961 	bl	8010fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	791b      	ldrb	r3, [r3, #4]
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f001 f95b 	bl	8010fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	701a      	strb	r2, [r3, #0]
      break;
 800fcfe:	e0ec      	b.n	800feda <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800fd06:	4619      	mov	r1, r3
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f9ff 	bl	801010c <USBH_Get_CfgDesc>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd12:	7bbb      	ldrb	r3, [r7, #14]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d103      	bne.n	800fd20 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2205      	movs	r2, #5
 800fd1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd1e:	e0de      	b.n	800fede <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd20:	7bbb      	ldrb	r3, [r7, #14]
 800fd22:	2b03      	cmp	r3, #3
 800fd24:	f040 80db 	bne.w	800fede <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd2e:	3301      	adds	r3, #1
 800fd30:	b2da      	uxtb	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd3e:	2b03      	cmp	r3, #3
 800fd40:	d903      	bls.n	800fd4a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	220d      	movs	r2, #13
 800fd46:	701a      	strb	r2, [r3, #0]
      break;
 800fd48:	e0c9      	b.n	800fede <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	795b      	ldrb	r3, [r3, #5]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f001 f929 	bl	8010fa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	791b      	ldrb	r3, [r3, #4]
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f001 f923 	bl	8010fa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	701a      	strb	r2, [r3, #0]
      break;
 800fd6e:	e0b6      	b.n	800fede <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d036      	beq.n	800fde8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fd86:	23ff      	movs	r3, #255	; 0xff
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f9e3 	bl	8010154 <USBH_Get_StringDesc>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fd92:	7bbb      	ldrb	r3, [r7, #14]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d111      	bne.n	800fdbc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2206      	movs	r2, #6
 800fd9c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2205      	movs	r2, #5
 800fda2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	f7fc f993 	bl	800c0e0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fdba:	e092      	b.n	800fee2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fdbc:	7bbb      	ldrb	r3, [r7, #14]
 800fdbe:	2b03      	cmp	r3, #3
 800fdc0:	f040 808f 	bne.w	800fee2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2206      	movs	r2, #6
 800fdc8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2205      	movs	r2, #5
 800fdce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fdde:	2200      	movs	r2, #0
 800fde0:	4619      	mov	r1, r3
 800fde2:	f7fc f97d 	bl	800c0e0 <osMessagePut>
      break;
 800fde6:	e07c      	b.n	800fee2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2206      	movs	r2, #6
 800fdec:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2205      	movs	r2, #5
 800fdf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe02:	2200      	movs	r2, #0
 800fe04:	4619      	mov	r1, r3
 800fe06:	f7fc f96b 	bl	800c0e0 <osMessagePut>
      break;
 800fe0a:	e06a      	b.n	800fee2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d027      	beq.n	800fe66 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fe22:	23ff      	movs	r3, #255	; 0xff
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f995 	bl	8010154 <USBH_Get_StringDesc>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fe2e:	7bbb      	ldrb	r3, [r7, #14]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d103      	bne.n	800fe3c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2207      	movs	r2, #7
 800fe38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fe3a:	e054      	b.n	800fee6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe3c:	7bbb      	ldrb	r3, [r7, #14]
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	d151      	bne.n	800fee6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2207      	movs	r2, #7
 800fe46:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2205      	movs	r2, #5
 800fe4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	4619      	mov	r1, r3
 800fe60:	f7fc f93e 	bl	800c0e0 <osMessagePut>
      break;
 800fe64:	e03f      	b.n	800fee6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2207      	movs	r2, #7
 800fe6a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2205      	movs	r2, #5
 800fe70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fe80:	2200      	movs	r2, #0
 800fe82:	4619      	mov	r1, r3
 800fe84:	f7fc f92c 	bl	800c0e0 <osMessagePut>
      break;
 800fe88:	e02d      	b.n	800fee6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d017      	beq.n	800fec4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fea0:	23ff      	movs	r3, #255	; 0xff
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 f956 	bl	8010154 <USBH_Get_StringDesc>
 800fea8:	4603      	mov	r3, r0
 800feaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800feac:	7bbb      	ldrb	r3, [r7, #14]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d102      	bne.n	800feb8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800feb2:	2300      	movs	r3, #0
 800feb4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800feb6:	e018      	b.n	800feea <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800feb8:	7bbb      	ldrb	r3, [r7, #14]
 800feba:	2b03      	cmp	r3, #3
 800febc:	d115      	bne.n	800feea <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800febe:	2300      	movs	r3, #0
 800fec0:	73fb      	strb	r3, [r7, #15]
      break;
 800fec2:	e012      	b.n	800feea <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800fec4:	2300      	movs	r3, #0
 800fec6:	73fb      	strb	r3, [r7, #15]
      break;
 800fec8:	e00f      	b.n	800feea <USBH_HandleEnum+0x44a>

    default:
      break;
 800feca:	bf00      	nop
 800fecc:	e00e      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fece:	bf00      	nop
 800fed0:	e00c      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fed2:	bf00      	nop
 800fed4:	e00a      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fed6:	bf00      	nop
 800fed8:	e008      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800feda:	bf00      	nop
 800fedc:	e006      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fede:	bf00      	nop
 800fee0:	e004      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fee2:	bf00      	nop
 800fee4:	e002      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800fee6:	bf00      	nop
 800fee8:	e000      	b.n	800feec <USBH_HandleEnum+0x44c>
      break;
 800feea:	bf00      	nop
  }
  return Status;
 800feec:	7bfb      	ldrb	r3, [r7, #15]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop

0800fef8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	683a      	ldr	r2, [r7, #0]
 800ff06:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ff0a:	bf00      	nop
 800ff0c:	370c      	adds	r7, #12
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b082      	sub	sp, #8
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f804 	bl	800ff3a <USBH_HandleSof>
}
 800ff32:	bf00      	nop
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b082      	sub	sp, #8
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	2b0b      	cmp	r3, #11
 800ff4a:	d10a      	bne.n	800ff62 <USBH_HandleSof+0x28>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d005      	beq.n	800ff62 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ff5c:	699b      	ldr	r3, [r3, #24]
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	4798      	blx	r3
  }
}
 800ff62:	bf00      	nop
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b082      	sub	sp, #8
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ff8e:	2200      	movs	r2, #0
 800ff90:	4619      	mov	r1, r3
 800ff92:	f7fc f8a5 	bl	800c0e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ff96:	bf00      	nop
}
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b083      	sub	sp, #12
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ffae:	bf00      	nop
}
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr

0800ffba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ffee:	2200      	movs	r2, #0
 800fff0:	4619      	mov	r1, r3
 800fff2:	f7fc f875 	bl	800c0e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2201      	movs	r2, #1
 801000c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f009 fb1c 	bl	801965e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	791b      	ldrb	r3, [r3, #4]
 801002a:	4619      	mov	r1, r3
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 ffbb 	bl	8010fa8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	795b      	ldrb	r3, [r3, #5]
 8010036:	4619      	mov	r1, r3
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 ffb5 	bl	8010fa8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2201      	movs	r2, #1
 8010042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010052:	2200      	movs	r2, #0
 8010054:	4619      	mov	r1, r3
 8010056:	f7fc f843 	bl	800c0e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8010072:	f107 030c 	add.w	r3, r7, #12
 8010076:	f04f 32ff 	mov.w	r2, #4294967295
 801007a:	4618      	mov	r0, r3
 801007c:	f7fc f870 	bl	800c160 <osMessageGet>
    if (event.status == osEventMessage)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b10      	cmp	r3, #16
 8010084:	d1f2      	bne.n	801006c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7ff fa9e 	bl	800f5c8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801008c:	e7ee      	b.n	801006c <USBH_Process_OS+0x8>

0801008e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b082      	sub	sp, #8
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80100aa:	2200      	movs	r2, #0
 80100ac:	4619      	mov	r1, r3
 80100ae:	f7fc f817 	bl	800c0e0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80100b2:	2300      	movs	r3, #0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af02      	add	r7, sp, #8
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	460b      	mov	r3, r1
 80100c6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80100ce:	78fb      	ldrb	r3, [r7, #3]
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	4613      	mov	r3, r2
 80100d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100da:	2100      	movs	r1, #0
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f864 	bl	80101aa <USBH_GetDescriptor>
 80100e2:	4603      	mov	r3, r0
 80100e4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80100e6:	7bfb      	ldrb	r3, [r7, #15]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10a      	bne.n	8010102 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f203 3026 	addw	r0, r3, #806	; 0x326
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	b292      	uxth	r2, r2
 80100fc:	4619      	mov	r1, r3
 80100fe:	f000 f918 	bl	8010332 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8010102:	7bfb      	ldrb	r3, [r7, #15]
}
 8010104:	4618      	mov	r0, r3
 8010106:	3710      	adds	r7, #16
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}

0801010c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af02      	add	r7, sp, #8
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	331c      	adds	r3, #28
 801011c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801011e:	887b      	ldrh	r3, [r7, #2]
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010128:	2100      	movs	r1, #0
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 f83d 	bl	80101aa <USBH_GetDescriptor>
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010134:	7bfb      	ldrb	r3, [r7, #15]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d107      	bne.n	801014a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801013a:	887b      	ldrh	r3, [r7, #2]
 801013c:	461a      	mov	r2, r3
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 f987 	bl	8010454 <USBH_ParseCfgDesc>
 8010146:	4603      	mov	r3, r0
 8010148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801014a:	7bfb      	ldrb	r3, [r7, #15]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3710      	adds	r7, #16
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b088      	sub	sp, #32
 8010158:	af02      	add	r7, sp, #8
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	607a      	str	r2, [r7, #4]
 801015e:	461a      	mov	r2, r3
 8010160:	460b      	mov	r3, r1
 8010162:	72fb      	strb	r3, [r7, #11]
 8010164:	4613      	mov	r3, r2
 8010166:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8010168:	7afb      	ldrb	r3, [r7, #11]
 801016a:	b29b      	uxth	r3, r3
 801016c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010170:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010178:	893b      	ldrh	r3, [r7, #8]
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	460b      	mov	r3, r1
 801017e:	2100      	movs	r1, #0
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f000 f812 	bl	80101aa <USBH_GetDescriptor>
 8010186:	4603      	mov	r3, r0
 8010188:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801018a:	7dfb      	ldrb	r3, [r7, #23]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d107      	bne.n	80101a0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010196:	893a      	ldrh	r2, [r7, #8]
 8010198:	6879      	ldr	r1, [r7, #4]
 801019a:	4618      	mov	r0, r3
 801019c:	f000 fb24 	bl	80107e8 <USBH_ParseStringDesc>
  }

  return status;
 80101a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3718      	adds	r7, #24
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	60f8      	str	r0, [r7, #12]
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	72fb      	strb	r3, [r7, #11]
 80101b8:	4613      	mov	r3, r2
 80101ba:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	789b      	ldrb	r3, [r3, #2]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d11c      	bne.n	80101fe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2206      	movs	r2, #6
 80101d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	893a      	ldrh	r2, [r7, #8]
 80101da:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80101dc:	893b      	ldrh	r3, [r7, #8]
 80101de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80101e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101e6:	d104      	bne.n	80101f2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f240 4209 	movw	r2, #1033	; 0x409
 80101ee:	829a      	strh	r2, [r3, #20]
 80101f0:	e002      	b.n	80101f8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2200      	movs	r2, #0
 80101f6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	8b3a      	ldrh	r2, [r7, #24]
 80101fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80101fe:	8b3b      	ldrh	r3, [r7, #24]
 8010200:	461a      	mov	r2, r3
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f000 fb3d 	bl	8010884 <USBH_CtlReq>
 801020a:	4603      	mov	r3, r0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3710      	adds	r7, #16
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	460b      	mov	r3, r1
 801021e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	789b      	ldrb	r3, [r3, #2]
 8010224:	2b01      	cmp	r3, #1
 8010226:	d10f      	bne.n	8010248 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2205      	movs	r2, #5
 8010232:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010234:	78fb      	ldrb	r3, [r7, #3]
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010248:	2200      	movs	r2, #0
 801024a:	2100      	movs	r1, #0
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fb19 	bl	8010884 <USBH_CtlReq>
 8010252:	4603      	mov	r3, r0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	460b      	mov	r3, r1
 8010266:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	789b      	ldrb	r3, [r3, #2]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d10e      	bne.n	801028e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2200      	movs	r2, #0
 8010274:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2209      	movs	r2, #9
 801027a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	887a      	ldrh	r2, [r7, #2]
 8010280:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801028e:	2200      	movs	r2, #0
 8010290:	2100      	movs	r1, #0
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 faf6 	bl	8010884 <USBH_CtlReq>
 8010298:	4603      	mov	r3, r0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	460b      	mov	r3, r1
 80102ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	789b      	ldrb	r3, [r3, #2]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d10f      	bne.n	80102d6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2203      	movs	r2, #3
 80102c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80102c2:	78fb      	ldrb	r3, [r7, #3]
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80102d6:	2200      	movs	r2, #0
 80102d8:	2100      	movs	r1, #0
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 fad2 	bl	8010884 <USBH_CtlReq>
 80102e0:	4603      	mov	r3, r0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
 80102f2:	460b      	mov	r3, r1
 80102f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	789b      	ldrb	r3, [r3, #2]
 80102fa:	2b01      	cmp	r3, #1
 80102fc:	d10f      	bne.n	801031e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2202      	movs	r2, #2
 8010302:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010310:	78fb      	ldrb	r3, [r7, #3]
 8010312:	b29a      	uxth	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2200      	movs	r2, #0
 801031c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 801031e:	2200      	movs	r2, #0
 8010320:	2100      	movs	r1, #0
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 faae 	bl	8010884 <USBH_CtlReq>
 8010328:	4603      	mov	r3, r0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8010332:	b480      	push	{r7}
 8010334:	b085      	sub	sp, #20
 8010336:	af00      	add	r7, sp, #0
 8010338:	60f8      	str	r0, [r7, #12]
 801033a:	60b9      	str	r1, [r7, #8]
 801033c:	4613      	mov	r3, r2
 801033e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	781a      	ldrb	r2, [r3, #0]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	785a      	ldrb	r2, [r3, #1]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	3302      	adds	r3, #2
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	b29a      	uxth	r2, r3
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	3303      	adds	r3, #3
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	b29b      	uxth	r3, r3
 8010360:	021b      	lsls	r3, r3, #8
 8010362:	b29b      	uxth	r3, r3
 8010364:	4313      	orrs	r3, r2
 8010366:	b29a      	uxth	r2, r3
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	791a      	ldrb	r2, [r3, #4]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	795a      	ldrb	r2, [r3, #5]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	799a      	ldrb	r2, [r3, #6]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	79da      	ldrb	r2, [r3, #7]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	79db      	ldrb	r3, [r3, #7]
 8010390:	2b20      	cmp	r3, #32
 8010392:	dc11      	bgt.n	80103b8 <USBH_ParseDevDesc+0x86>
 8010394:	2b08      	cmp	r3, #8
 8010396:	db16      	blt.n	80103c6 <USBH_ParseDevDesc+0x94>
 8010398:	3b08      	subs	r3, #8
 801039a:	2201      	movs	r2, #1
 801039c:	fa02 f303 	lsl.w	r3, r2, r3
 80103a0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80103a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bf14      	ite	ne
 80103ac:	2301      	movne	r3, #1
 80103ae:	2300      	moveq	r3, #0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d102      	bne.n	80103bc <USBH_ParseDevDesc+0x8a>
 80103b6:	e006      	b.n	80103c6 <USBH_ParseDevDesc+0x94>
 80103b8:	2b40      	cmp	r3, #64	; 0x40
 80103ba:	d104      	bne.n	80103c6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	79da      	ldrb	r2, [r3, #7]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	71da      	strb	r2, [r3, #7]
      break;
 80103c4:	e003      	b.n	80103ce <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2240      	movs	r2, #64	; 0x40
 80103ca:	71da      	strb	r2, [r3, #7]
      break;
 80103cc:	bf00      	nop
  }

  if (length > 8U)
 80103ce:	88fb      	ldrh	r3, [r7, #6]
 80103d0:	2b08      	cmp	r3, #8
 80103d2:	d939      	bls.n	8010448 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	3308      	adds	r3, #8
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	b29a      	uxth	r2, r3
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	3309      	adds	r3, #9
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	021b      	lsls	r3, r3, #8
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	4313      	orrs	r3, r2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	330a      	adds	r3, #10
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	330b      	adds	r3, #11
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	021b      	lsls	r3, r3, #8
 8010402:	b29b      	uxth	r3, r3
 8010404:	4313      	orrs	r3, r2
 8010406:	b29a      	uxth	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	330c      	adds	r3, #12
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	b29a      	uxth	r2, r3
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	330d      	adds	r3, #13
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	b29b      	uxth	r3, r3
 801041c:	021b      	lsls	r3, r3, #8
 801041e:	b29b      	uxth	r3, r3
 8010420:	4313      	orrs	r3, r2
 8010422:	b29a      	uxth	r2, r3
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	7b9a      	ldrb	r2, [r3, #14]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	7bda      	ldrb	r2, [r3, #15]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	7c1a      	ldrb	r2, [r3, #16]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	7c5a      	ldrb	r2, [r3, #17]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	745a      	strb	r2, [r3, #17]
  }
}
 8010448:	bf00      	nop
 801044a:	3714      	adds	r7, #20
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr

08010454 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b08c      	sub	sp, #48	; 0x30
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	4613      	mov	r3, r2
 8010460:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010468:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010474:	2300      	movs	r3, #0
 8010476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801047a:	2300      	movs	r3, #0
 801047c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	781a      	ldrb	r2, [r3, #0]
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	785a      	ldrb	r2, [r3, #1]
 8010490:	6a3b      	ldr	r3, [r7, #32]
 8010492:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	3302      	adds	r3, #2
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	b29a      	uxth	r2, r3
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	3303      	adds	r3, #3
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	4313      	orrs	r3, r2
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104b0:	bf28      	it	cs
 80104b2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	6a3b      	ldr	r3, [r7, #32]
 80104ba:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	791a      	ldrb	r2, [r3, #4]
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	795a      	ldrb	r2, [r3, #5]
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	799a      	ldrb	r2, [r3, #6]
 80104d0:	6a3b      	ldr	r3, [r7, #32]
 80104d2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	79da      	ldrb	r2, [r3, #7]
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	7a1a      	ldrb	r2, [r3, #8]
 80104e0:	6a3b      	ldr	r3, [r7, #32]
 80104e2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b09      	cmp	r3, #9
 80104ea:	d002      	beq.n	80104f2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80104ec:	6a3b      	ldr	r3, [r7, #32]
 80104ee:	2209      	movs	r2, #9
 80104f0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80104f2:	88fb      	ldrh	r3, [r7, #6]
 80104f4:	2b09      	cmp	r3, #9
 80104f6:	f240 809d 	bls.w	8010634 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80104fa:	2309      	movs	r3, #9
 80104fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80104fe:	2300      	movs	r3, #0
 8010500:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010502:	e081      	b.n	8010608 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010504:	f107 0316 	add.w	r3, r7, #22
 8010508:	4619      	mov	r1, r3
 801050a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801050c:	f000 f99f 	bl	801084e <USBH_GetNextDesc>
 8010510:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	785b      	ldrb	r3, [r3, #1]
 8010516:	2b04      	cmp	r3, #4
 8010518:	d176      	bne.n	8010608 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	2b09      	cmp	r3, #9
 8010520:	d002      	beq.n	8010528 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	2209      	movs	r2, #9
 8010526:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801052c:	221a      	movs	r2, #26
 801052e:	fb02 f303 	mul.w	r3, r2, r3
 8010532:	3308      	adds	r3, #8
 8010534:	6a3a      	ldr	r2, [r7, #32]
 8010536:	4413      	add	r3, r2
 8010538:	3302      	adds	r3, #2
 801053a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 801053c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801053e:	69f8      	ldr	r0, [r7, #28]
 8010540:	f000 f87e 	bl	8010640 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010544:	2300      	movs	r3, #0
 8010546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801054a:	2300      	movs	r3, #0
 801054c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801054e:	e043      	b.n	80105d8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010550:	f107 0316 	add.w	r3, r7, #22
 8010554:	4619      	mov	r1, r3
 8010556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010558:	f000 f979 	bl	801084e <USBH_GetNextDesc>
 801055c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801055e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010560:	785b      	ldrb	r3, [r3, #1]
 8010562:	2b05      	cmp	r3, #5
 8010564:	d138      	bne.n	80105d8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	795b      	ldrb	r3, [r3, #5]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d10f      	bne.n	801058e <USBH_ParseCfgDesc+0x13a>
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	799b      	ldrb	r3, [r3, #6]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d10b      	bne.n	801058e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	79db      	ldrb	r3, [r3, #7]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d10f      	bne.n	801059e <USBH_ParseCfgDesc+0x14a>
 801057e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b09      	cmp	r3, #9
 8010584:	d00b      	beq.n	801059e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	2209      	movs	r2, #9
 801058a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801058c:	e007      	b.n	801059e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 801058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	2b07      	cmp	r3, #7
 8010594:	d004      	beq.n	80105a0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010598:	2207      	movs	r2, #7
 801059a:	701a      	strb	r2, [r3, #0]
 801059c:	e000      	b.n	80105a0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801059e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80105a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80105a8:	3201      	adds	r2, #1
 80105aa:	00d2      	lsls	r2, r2, #3
 80105ac:	211a      	movs	r1, #26
 80105ae:	fb01 f303 	mul.w	r3, r1, r3
 80105b2:	4413      	add	r3, r2
 80105b4:	3308      	adds	r3, #8
 80105b6:	6a3a      	ldr	r2, [r7, #32]
 80105b8:	4413      	add	r3, r2
 80105ba:	3304      	adds	r3, #4
 80105bc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80105be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105c0:	69b9      	ldr	r1, [r7, #24]
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f000 f86b 	bl	801069e <USBH_ParseEPDesc>
 80105c8:	4603      	mov	r3, r0
 80105ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80105ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80105d2:	3301      	adds	r3, #1
 80105d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	791b      	ldrb	r3, [r3, #4]
 80105dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d204      	bcs.n	80105ee <USBH_ParseCfgDesc+0x19a>
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	885a      	ldrh	r2, [r3, #2]
 80105e8:	8afb      	ldrh	r3, [r7, #22]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d8b0      	bhi.n	8010550 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	791b      	ldrb	r3, [r3, #4]
 80105f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d201      	bcs.n	80105fe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80105fa:	2303      	movs	r3, #3
 80105fc:	e01c      	b.n	8010638 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80105fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010602:	3301      	adds	r3, #1
 8010604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060c:	2b01      	cmp	r3, #1
 801060e:	d805      	bhi.n	801061c <USBH_ParseCfgDesc+0x1c8>
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	885a      	ldrh	r2, [r3, #2]
 8010614:	8afb      	ldrh	r3, [r7, #22]
 8010616:	429a      	cmp	r2, r3
 8010618:	f63f af74 	bhi.w	8010504 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801061c:	6a3b      	ldr	r3, [r7, #32]
 801061e:	791b      	ldrb	r3, [r3, #4]
 8010620:	2b02      	cmp	r3, #2
 8010622:	bf28      	it	cs
 8010624:	2302      	movcs	r3, #2
 8010626:	b2db      	uxtb	r3, r3
 8010628:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801062c:	429a      	cmp	r2, r3
 801062e:	d201      	bcs.n	8010634 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8010630:	2303      	movs	r3, #3
 8010632:	e001      	b.n	8010638 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8010634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010638:	4618      	mov	r0, r3
 801063a:	3730      	adds	r7, #48	; 0x30
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	781a      	ldrb	r2, [r3, #0]
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	785a      	ldrb	r2, [r3, #1]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	789a      	ldrb	r2, [r3, #2]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	78da      	ldrb	r2, [r3, #3]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	791a      	ldrb	r2, [r3, #4]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	795a      	ldrb	r2, [r3, #5]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	799a      	ldrb	r2, [r3, #6]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	79da      	ldrb	r2, [r3, #7]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	7a1a      	ldrb	r2, [r3, #8]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	721a      	strb	r2, [r3, #8]
}
 8010692:	bf00      	nop
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr

0801069e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 801069e:	b480      	push	{r7}
 80106a0:	b087      	sub	sp, #28
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	60f8      	str	r0, [r7, #12]
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	781a      	ldrb	r2, [r3, #0]
 80106b2:	68bb      	ldr	r3, [r7, #8]
 80106b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	785a      	ldrb	r2, [r3, #1]
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	789a      	ldrb	r2, [r3, #2]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	78da      	ldrb	r2, [r3, #3]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	3304      	adds	r3, #4
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	3305      	adds	r3, #5
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	021b      	lsls	r3, r3, #8
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	4313      	orrs	r3, r2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	799a      	ldrb	r2, [r3, #6]
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	889b      	ldrh	r3, [r3, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d102      	bne.n	8010700 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80106fa:	2303      	movs	r3, #3
 80106fc:	75fb      	strb	r3, [r7, #23]
 80106fe:	e033      	b.n	8010768 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	889b      	ldrh	r3, [r3, #4]
 8010704:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010708:	f023 0307 	bic.w	r3, r3, #7
 801070c:	b29a      	uxth	r2, r3
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	889b      	ldrh	r3, [r3, #4]
 8010716:	b21a      	sxth	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3304      	adds	r3, #4
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	b299      	uxth	r1, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	3305      	adds	r3, #5
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	b29b      	uxth	r3, r3
 8010728:	021b      	lsls	r3, r3, #8
 801072a:	b29b      	uxth	r3, r3
 801072c:	430b      	orrs	r3, r1
 801072e:	b29b      	uxth	r3, r3
 8010730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010734:	2b00      	cmp	r3, #0
 8010736:	d110      	bne.n	801075a <USBH_ParseEPDesc+0xbc>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	3304      	adds	r3, #4
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	b299      	uxth	r1, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3305      	adds	r3, #5
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	b29b      	uxth	r3, r3
 8010748:	021b      	lsls	r3, r3, #8
 801074a:	b29b      	uxth	r3, r3
 801074c:	430b      	orrs	r3, r1
 801074e:	b29b      	uxth	r3, r3
 8010750:	b21b      	sxth	r3, r3
 8010752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010756:	b21b      	sxth	r3, r3
 8010758:	e001      	b.n	801075e <USBH_ParseEPDesc+0xc0>
 801075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801075e:	4313      	orrs	r3, r2
 8010760:	b21b      	sxth	r3, r3
 8010762:	b29a      	uxth	r2, r3
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801076e:	2b00      	cmp	r3, #0
 8010770:	d116      	bne.n	80107a0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	78db      	ldrb	r3, [r3, #3]
 8010776:	f003 0303 	and.w	r3, r3, #3
 801077a:	2b01      	cmp	r3, #1
 801077c:	d005      	beq.n	801078a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	78db      	ldrb	r3, [r3, #3]
 8010782:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010786:	2b03      	cmp	r3, #3
 8010788:	d127      	bne.n	80107da <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	799b      	ldrb	r3, [r3, #6]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d003      	beq.n	801079a <USBH_ParseEPDesc+0xfc>
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	799b      	ldrb	r3, [r3, #6]
 8010796:	2b10      	cmp	r3, #16
 8010798:	d91f      	bls.n	80107da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 801079a:	2303      	movs	r3, #3
 801079c:	75fb      	strb	r3, [r7, #23]
 801079e:	e01c      	b.n	80107da <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	78db      	ldrb	r3, [r3, #3]
 80107a4:	f003 0303 	and.w	r3, r3, #3
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d10a      	bne.n	80107c2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	799b      	ldrb	r3, [r3, #6]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d003      	beq.n	80107bc <USBH_ParseEPDesc+0x11e>
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	799b      	ldrb	r3, [r3, #6]
 80107b8:	2b10      	cmp	r3, #16
 80107ba:	d90e      	bls.n	80107da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80107bc:	2303      	movs	r3, #3
 80107be:	75fb      	strb	r3, [r7, #23]
 80107c0:	e00b      	b.n	80107da <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	78db      	ldrb	r3, [r3, #3]
 80107c6:	f003 0303 	and.w	r3, r3, #3
 80107ca:	2b03      	cmp	r3, #3
 80107cc:	d105      	bne.n	80107da <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	799b      	ldrb	r3, [r3, #6]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d101      	bne.n	80107da <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80107d6:	2303      	movs	r3, #3
 80107d8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80107da:	7dfb      	ldrb	r3, [r7, #23]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	371c      	adds	r7, #28
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	4613      	mov	r3, r2
 80107f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3301      	adds	r3, #1
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	2b03      	cmp	r3, #3
 80107fe:	d120      	bne.n	8010842 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	1e9a      	subs	r2, r3, #2
 8010806:	88fb      	ldrh	r3, [r7, #6]
 8010808:	4293      	cmp	r3, r2
 801080a:	bf28      	it	cs
 801080c:	4613      	movcs	r3, r2
 801080e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	3302      	adds	r3, #2
 8010814:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010816:	2300      	movs	r3, #0
 8010818:	82fb      	strh	r3, [r7, #22]
 801081a:	e00b      	b.n	8010834 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801081c:	8afb      	ldrh	r3, [r7, #22]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	4413      	add	r3, r2
 8010822:	781a      	ldrb	r2, [r3, #0]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	3301      	adds	r3, #1
 801082c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801082e:	8afb      	ldrh	r3, [r7, #22]
 8010830:	3302      	adds	r3, #2
 8010832:	82fb      	strh	r3, [r7, #22]
 8010834:	8afa      	ldrh	r2, [r7, #22]
 8010836:	8abb      	ldrh	r3, [r7, #20]
 8010838:	429a      	cmp	r2, r3
 801083a:	d3ef      	bcc.n	801081c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2200      	movs	r2, #0
 8010840:	701a      	strb	r2, [r3, #0]
  }
}
 8010842:	bf00      	nop
 8010844:	371c      	adds	r7, #28
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr

0801084e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 801084e:	b480      	push	{r7}
 8010850:	b085      	sub	sp, #20
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	881a      	ldrh	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	b29b      	uxth	r3, r3
 8010862:	4413      	add	r3, r2
 8010864:	b29a      	uxth	r2, r3
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4413      	add	r3, r2
 8010874:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010876:	68fb      	ldr	r3, [r7, #12]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4613      	mov	r3, r2
 8010890:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010892:	2301      	movs	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	789b      	ldrb	r3, [r3, #2]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d002      	beq.n	80108a4 <USBH_CtlReq+0x20>
 801089e:	2b02      	cmp	r3, #2
 80108a0:	d01d      	beq.n	80108de <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80108a2:	e043      	b.n	801092c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68ba      	ldr	r2, [r7, #8]
 80108a8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	88fa      	ldrh	r2, [r7, #6]
 80108ae:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2201      	movs	r2, #1
 80108b4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2202      	movs	r2, #2
 80108ba:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80108bc:	2301      	movs	r3, #1
 80108be:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2203      	movs	r2, #3
 80108c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108d4:	2200      	movs	r2, #0
 80108d6:	4619      	mov	r1, r3
 80108d8:	f7fb fc02 	bl	800c0e0 <osMessagePut>
      break;
 80108dc:	e026      	b.n	801092c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f000 f82a 	bl	8010938 <USBH_HandleControl>
 80108e4:	4603      	mov	r3, r0
 80108e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80108e8:	7dfb      	ldrb	r3, [r7, #23]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d002      	beq.n	80108f4 <USBH_CtlReq+0x70>
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	2b03      	cmp	r3, #3
 80108f2:	d106      	bne.n	8010902 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2201      	movs	r2, #1
 80108f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	761a      	strb	r2, [r3, #24]
 8010900:	e005      	b.n	801090e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8010902:	7dfb      	ldrb	r3, [r7, #23]
 8010904:	2b02      	cmp	r3, #2
 8010906:	d102      	bne.n	801090e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2201      	movs	r2, #1
 801090c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2203      	movs	r2, #3
 8010912:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010922:	2200      	movs	r2, #0
 8010924:	4619      	mov	r1, r3
 8010926:	f7fb fbdb 	bl	800c0e0 <osMessagePut>
      break;
 801092a:	bf00      	nop
  }
  return status;
 801092c:	7dfb      	ldrb	r3, [r7, #23]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3718      	adds	r7, #24
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
	...

08010938 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b086      	sub	sp, #24
 801093c:	af02      	add	r7, sp, #8
 801093e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010940:	2301      	movs	r3, #1
 8010942:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010944:	2300      	movs	r3, #0
 8010946:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	7e1b      	ldrb	r3, [r3, #24]
 801094c:	3b01      	subs	r3, #1
 801094e:	2b0a      	cmp	r3, #10
 8010950:	f200 8229 	bhi.w	8010da6 <USBH_HandleControl+0x46e>
 8010954:	a201      	add	r2, pc, #4	; (adr r2, 801095c <USBH_HandleControl+0x24>)
 8010956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801095a:	bf00      	nop
 801095c:	08010989 	.word	0x08010989
 8010960:	080109a3 	.word	0x080109a3
 8010964:	08010a45 	.word	0x08010a45
 8010968:	08010a6b 	.word	0x08010a6b
 801096c:	08010af7 	.word	0x08010af7
 8010970:	08010b21 	.word	0x08010b21
 8010974:	08010be3 	.word	0x08010be3
 8010978:	08010c05 	.word	0x08010c05
 801097c:	08010c97 	.word	0x08010c97
 8010980:	08010cbd 	.word	0x08010cbd
 8010984:	08010d4f 	.word	0x08010d4f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f103 0110 	add.w	r1, r3, #16
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	795b      	ldrb	r3, [r3, #5]
 8010992:	461a      	mov	r2, r3
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 fa17 	bl	8010dc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2202      	movs	r2, #2
 801099e:	761a      	strb	r2, [r3, #24]
      break;
 80109a0:	e20c      	b.n	8010dbc <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	795b      	ldrb	r3, [r3, #5]
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f008 ff47 	bl	801983c <USBH_LL_GetURBState>
 80109ae:	4603      	mov	r3, r0
 80109b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80109b2:	7bbb      	ldrb	r3, [r7, #14]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d12c      	bne.n	8010a12 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	7c1b      	ldrb	r3, [r3, #16]
 80109bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80109c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	8adb      	ldrh	r3, [r3, #22]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00a      	beq.n	80109e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80109ca:	7b7b      	ldrb	r3, [r7, #13]
 80109cc:	2b80      	cmp	r3, #128	; 0x80
 80109ce:	d103      	bne.n	80109d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2203      	movs	r2, #3
 80109d4:	761a      	strb	r2, [r3, #24]
 80109d6:	e00d      	b.n	80109f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2205      	movs	r2, #5
 80109dc:	761a      	strb	r2, [r3, #24]
 80109de:	e009      	b.n	80109f4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80109e0:	7b7b      	ldrb	r3, [r7, #13]
 80109e2:	2b80      	cmp	r3, #128	; 0x80
 80109e4:	d103      	bne.n	80109ee <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2209      	movs	r2, #9
 80109ea:	761a      	strb	r2, [r3, #24]
 80109ec:	e002      	b.n	80109f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2207      	movs	r2, #7
 80109f2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2203      	movs	r2, #3
 80109f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	f7fb fb68 	bl	800c0e0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010a10:	e1cb      	b.n	8010daa <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010a12:	7bbb      	ldrb	r3, [r7, #14]
 8010a14:	2b04      	cmp	r3, #4
 8010a16:	d003      	beq.n	8010a20 <USBH_HandleControl+0xe8>
 8010a18:	7bbb      	ldrb	r3, [r7, #14]
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	f040 81c5 	bne.w	8010daa <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	220b      	movs	r2, #11
 8010a24:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2203      	movs	r2, #3
 8010a2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	f7fb fb4f 	bl	800c0e0 <osMessagePut>
      break;
 8010a42:	e1b2      	b.n	8010daa <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6899      	ldr	r1, [r3, #8]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	899a      	ldrh	r2, [r3, #12]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	791b      	ldrb	r3, [r3, #4]
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 f9f2 	bl	8010e46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2204      	movs	r2, #4
 8010a66:	761a      	strb	r2, [r3, #24]
      break;
 8010a68:	e1a8      	b.n	8010dbc <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	791b      	ldrb	r3, [r3, #4]
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f008 fee3 	bl	801983c <USBH_LL_GetURBState>
 8010a76:	4603      	mov	r3, r0
 8010a78:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d110      	bne.n	8010aa2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2209      	movs	r2, #9
 8010a84:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2203      	movs	r2, #3
 8010a8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	f7fb fb1f 	bl	800c0e0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010aa2:	7bbb      	ldrb	r3, [r7, #14]
 8010aa4:	2b05      	cmp	r3, #5
 8010aa6:	d110      	bne.n	8010aca <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2203      	movs	r2, #3
 8010ab0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	f7fb fb0c 	bl	800c0e0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ac8:	e171      	b.n	8010dae <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	f040 816e 	bne.w	8010dae <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	220b      	movs	r2, #11
 8010ad6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2203      	movs	r2, #3
 8010adc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010aec:	2200      	movs	r2, #0
 8010aee:	4619      	mov	r1, r3
 8010af0:	f7fb faf6 	bl	800c0e0 <osMessagePut>
      break;
 8010af4:	e15b      	b.n	8010dae <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6899      	ldr	r1, [r3, #8]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	899a      	ldrh	r2, [r3, #12]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	795b      	ldrb	r3, [r3, #5]
 8010b02:	2001      	movs	r0, #1
 8010b04:	9000      	str	r0, [sp, #0]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f978 	bl	8010dfc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2206      	movs	r2, #6
 8010b1c:	761a      	strb	r2, [r3, #24]
      break;
 8010b1e:	e14d      	b.n	8010dbc <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	795b      	ldrb	r3, [r3, #5]
 8010b24:	4619      	mov	r1, r3
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f008 fe88 	bl	801983c <USBH_LL_GetURBState>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d111      	bne.n	8010b5a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2207      	movs	r2, #7
 8010b3a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2203      	movs	r2, #3
 8010b40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b50:	2200      	movs	r2, #0
 8010b52:	4619      	mov	r1, r3
 8010b54:	f7fb fac4 	bl	800c0e0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010b58:	e12b      	b.n	8010db2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8010b5a:	7bbb      	ldrb	r3, [r7, #14]
 8010b5c:	2b05      	cmp	r3, #5
 8010b5e:	d113      	bne.n	8010b88 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	220c      	movs	r2, #12
 8010b64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010b66:	2303      	movs	r3, #3
 8010b68:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2203      	movs	r2, #3
 8010b6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010b7e:	2200      	movs	r2, #0
 8010b80:	4619      	mov	r1, r3
 8010b82:	f7fb faad 	bl	800c0e0 <osMessagePut>
      break;
 8010b86:	e114      	b.n	8010db2 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010b88:	7bbb      	ldrb	r3, [r7, #14]
 8010b8a:	2b02      	cmp	r3, #2
 8010b8c:	d111      	bne.n	8010bb2 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2205      	movs	r2, #5
 8010b92:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2203      	movs	r2, #3
 8010b98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010ba8:	2200      	movs	r2, #0
 8010baa:	4619      	mov	r1, r3
 8010bac:	f7fb fa98 	bl	800c0e0 <osMessagePut>
      break;
 8010bb0:	e0ff      	b.n	8010db2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8010bb2:	7bbb      	ldrb	r3, [r7, #14]
 8010bb4:	2b04      	cmp	r3, #4
 8010bb6:	f040 80fc 	bne.w	8010db2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	220b      	movs	r2, #11
 8010bbe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2203      	movs	r2, #3
 8010bc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010bd8:	2200      	movs	r2, #0
 8010bda:	4619      	mov	r1, r3
 8010bdc:	f7fb fa80 	bl	800c0e0 <osMessagePut>
      break;
 8010be0:	e0e7      	b.n	8010db2 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	791b      	ldrb	r3, [r3, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	2100      	movs	r1, #0
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f92b 	bl	8010e46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2208      	movs	r2, #8
 8010c00:	761a      	strb	r2, [r3, #24]

      break;
 8010c02:	e0db      	b.n	8010dbc <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	791b      	ldrb	r3, [r3, #4]
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f008 fe16 	bl	801983c <USBH_LL_GetURBState>
 8010c10:	4603      	mov	r3, r0
 8010c12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010c14:	7bbb      	ldrb	r3, [r7, #14]
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d113      	bne.n	8010c42 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	220d      	movs	r2, #13
 8010c1e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010c20:	2300      	movs	r3, #0
 8010c22:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2203      	movs	r2, #3
 8010c28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c38:	2200      	movs	r2, #0
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	f7fb fa50 	bl	800c0e0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010c40:	e0b9      	b.n	8010db6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8010c42:	7bbb      	ldrb	r3, [r7, #14]
 8010c44:	2b04      	cmp	r3, #4
 8010c46:	d111      	bne.n	8010c6c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	220b      	movs	r2, #11
 8010c4c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2203      	movs	r2, #3
 8010c52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c62:	2200      	movs	r2, #0
 8010c64:	4619      	mov	r1, r3
 8010c66:	f7fb fa3b 	bl	800c0e0 <osMessagePut>
      break;
 8010c6a:	e0a4      	b.n	8010db6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8010c6c:	7bbb      	ldrb	r3, [r7, #14]
 8010c6e:	2b05      	cmp	r3, #5
 8010c70:	f040 80a1 	bne.w	8010db6 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8010c74:	2303      	movs	r3, #3
 8010c76:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2203      	movs	r2, #3
 8010c7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	4619      	mov	r1, r3
 8010c90:	f7fb fa26 	bl	800c0e0 <osMessagePut>
      break;
 8010c94:	e08f      	b.n	8010db6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	795b      	ldrb	r3, [r3, #5]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	9200      	str	r2, [sp, #0]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f8aa 	bl	8010dfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	220a      	movs	r2, #10
 8010cb8:	761a      	strb	r2, [r3, #24]
      break;
 8010cba:	e07f      	b.n	8010dbc <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	795b      	ldrb	r3, [r3, #5]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f008 fdba 	bl	801983c <USBH_LL_GetURBState>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010ccc:	7bbb      	ldrb	r3, [r7, #14]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d113      	bne.n	8010cfa <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	220d      	movs	r2, #13
 8010cda:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2203      	movs	r2, #3
 8010ce0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	f7fb f9f4 	bl	800c0e0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010cf8:	e05f      	b.n	8010dba <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010cfa:	7bbb      	ldrb	r3, [r7, #14]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d111      	bne.n	8010d24 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2209      	movs	r2, #9
 8010d04:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2203      	movs	r2, #3
 8010d0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	f7fb f9df 	bl	800c0e0 <osMessagePut>
      break;
 8010d22:	e04a      	b.n	8010dba <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8010d24:	7bbb      	ldrb	r3, [r7, #14]
 8010d26:	2b04      	cmp	r3, #4
 8010d28:	d147      	bne.n	8010dba <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	220b      	movs	r2, #11
 8010d2e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2203      	movs	r2, #3
 8010d34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010d44:	2200      	movs	r2, #0
 8010d46:	4619      	mov	r1, r3
 8010d48:	f7fb f9ca 	bl	800c0e0 <osMessagePut>
      break;
 8010d4c:	e035      	b.n	8010dba <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7e5b      	ldrb	r3, [r3, #25]
 8010d52:	3301      	adds	r3, #1
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	765a      	strb	r2, [r3, #25]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	7e5b      	ldrb	r3, [r3, #25]
 8010d5e:	2b02      	cmp	r3, #2
 8010d60:	d806      	bhi.n	8010d70 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2201      	movs	r2, #1
 8010d66:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010d6e:	e025      	b.n	8010dbc <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010d76:	2106      	movs	r1, #6
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	795b      	ldrb	r3, [r3, #5]
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f90d 	bl	8010fa8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	791b      	ldrb	r3, [r3, #4]
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 f907 	bl	8010fa8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010da0:	2302      	movs	r3, #2
 8010da2:	73fb      	strb	r3, [r7, #15]
      break;
 8010da4:	e00a      	b.n	8010dbc <USBH_HandleControl+0x484>

    default:
      break;
 8010da6:	bf00      	nop
 8010da8:	e008      	b.n	8010dbc <USBH_HandleControl+0x484>
      break;
 8010daa:	bf00      	nop
 8010dac:	e006      	b.n	8010dbc <USBH_HandleControl+0x484>
      break;
 8010dae:	bf00      	nop
 8010db0:	e004      	b.n	8010dbc <USBH_HandleControl+0x484>
      break;
 8010db2:	bf00      	nop
 8010db4:	e002      	b.n	8010dbc <USBH_HandleControl+0x484>
      break;
 8010db6:	bf00      	nop
 8010db8:	e000      	b.n	8010dbc <USBH_HandleControl+0x484>
      break;
 8010dba:	bf00      	nop
  }

  return status;
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3710      	adds	r7, #16
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop

08010dc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af04      	add	r7, sp, #16
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010dd6:	79f9      	ldrb	r1, [r7, #7]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	2308      	movs	r3, #8
 8010dde:	9302      	str	r3, [sp, #8]
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	2300      	movs	r3, #0
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	2300      	movs	r3, #0
 8010dea:	2200      	movs	r2, #0
 8010dec:	68f8      	ldr	r0, [r7, #12]
 8010dee:	f008 fcf4 	bl	80197da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	af04      	add	r7, sp, #16
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	4611      	mov	r1, r2
 8010e08:	461a      	mov	r2, r3
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	80fb      	strh	r3, [r7, #6]
 8010e0e:	4613      	mov	r3, r2
 8010e10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010e20:	7979      	ldrb	r1, [r7, #5]
 8010e22:	7e3b      	ldrb	r3, [r7, #24]
 8010e24:	9303      	str	r3, [sp, #12]
 8010e26:	88fb      	ldrh	r3, [r7, #6]
 8010e28:	9302      	str	r3, [sp, #8]
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	9301      	str	r3, [sp, #4]
 8010e2e:	2301      	movs	r3, #1
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	2300      	movs	r3, #0
 8010e34:	2200      	movs	r2, #0
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f008 fccf 	bl	80197da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010e3c:	2300      	movs	r3, #0
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b088      	sub	sp, #32
 8010e4a:	af04      	add	r7, sp, #16
 8010e4c:	60f8      	str	r0, [r7, #12]
 8010e4e:	60b9      	str	r1, [r7, #8]
 8010e50:	4611      	mov	r1, r2
 8010e52:	461a      	mov	r2, r3
 8010e54:	460b      	mov	r3, r1
 8010e56:	80fb      	strh	r3, [r7, #6]
 8010e58:	4613      	mov	r3, r2
 8010e5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010e5c:	7979      	ldrb	r1, [r7, #5]
 8010e5e:	2300      	movs	r3, #0
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	88fb      	ldrh	r3, [r7, #6]
 8010e64:	9302      	str	r3, [sp, #8]
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	9300      	str	r3, [sp, #0]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	2201      	movs	r2, #1
 8010e72:	68f8      	ldr	r0, [r7, #12]
 8010e74:	f008 fcb1 	bl	80197da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010e78:	2300      	movs	r3, #0

}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b088      	sub	sp, #32
 8010e86:	af04      	add	r7, sp, #16
 8010e88:	60f8      	str	r0, [r7, #12]
 8010e8a:	60b9      	str	r1, [r7, #8]
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	461a      	mov	r2, r3
 8010e90:	460b      	mov	r3, r1
 8010e92:	80fb      	strh	r3, [r7, #6]
 8010e94:	4613      	mov	r3, r2
 8010e96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d001      	beq.n	8010ea6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ea6:	7979      	ldrb	r1, [r7, #5]
 8010ea8:	7e3b      	ldrb	r3, [r7, #24]
 8010eaa:	9303      	str	r3, [sp, #12]
 8010eac:	88fb      	ldrh	r3, [r7, #6]
 8010eae:	9302      	str	r3, [sp, #8]
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	9301      	str	r3, [sp, #4]
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	2302      	movs	r3, #2
 8010eba:	2200      	movs	r2, #0
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f008 fc8c 	bl	80197da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010ec2:	2300      	movs	r3, #0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3710      	adds	r7, #16
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	af04      	add	r7, sp, #16
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	4611      	mov	r1, r2
 8010ed8:	461a      	mov	r2, r3
 8010eda:	460b      	mov	r3, r1
 8010edc:	80fb      	strh	r3, [r7, #6]
 8010ede:	4613      	mov	r3, r2
 8010ee0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ee2:	7979      	ldrb	r1, [r7, #5]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	9303      	str	r3, [sp, #12]
 8010ee8:	88fb      	ldrh	r3, [r7, #6]
 8010eea:	9302      	str	r3, [sp, #8]
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	9301      	str	r3, [sp, #4]
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f008 fc6e 	bl	80197da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3710      	adds	r7, #16
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af04      	add	r7, sp, #16
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	4608      	mov	r0, r1
 8010f12:	4611      	mov	r1, r2
 8010f14:	461a      	mov	r2, r3
 8010f16:	4603      	mov	r3, r0
 8010f18:	70fb      	strb	r3, [r7, #3]
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	70bb      	strb	r3, [r7, #2]
 8010f1e:	4613      	mov	r3, r2
 8010f20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010f22:	7878      	ldrb	r0, [r7, #1]
 8010f24:	78ba      	ldrb	r2, [r7, #2]
 8010f26:	78f9      	ldrb	r1, [r7, #3]
 8010f28:	8b3b      	ldrh	r3, [r7, #24]
 8010f2a:	9302      	str	r3, [sp, #8]
 8010f2c:	7d3b      	ldrb	r3, [r7, #20]
 8010f2e:	9301      	str	r3, [sp, #4]
 8010f30:	7c3b      	ldrb	r3, [r7, #16]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	4603      	mov	r3, r0
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f008 fc01 	bl	801973e <USBH_LL_OpenPipe>

  return USBH_OK;
 8010f3c:	2300      	movs	r3, #0
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b082      	sub	sp, #8
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	460b      	mov	r3, r1
 8010f50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010f52:	78fb      	ldrb	r3, [r7, #3]
 8010f54:	4619      	mov	r1, r3
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f008 fc20 	bl	801979c <USBH_LL_ClosePipe>

  return USBH_OK;
 8010f5c:	2300      	movs	r3, #0
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3708      	adds	r7, #8
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	460b      	mov	r3, r1
 8010f70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 f836 	bl	8010fe4 <USBH_GetFreePipe>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010f7c:	89fb      	ldrh	r3, [r7, #14]
 8010f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f82:	4293      	cmp	r3, r2
 8010f84:	d00a      	beq.n	8010f9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010f86:	78fa      	ldrb	r2, [r7, #3]
 8010f88:	89fb      	ldrh	r3, [r7, #14]
 8010f8a:	f003 030f 	and.w	r3, r3, #15
 8010f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010f92:	6879      	ldr	r1, [r7, #4]
 8010f94:	33e0      	adds	r3, #224	; 0xe0
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	440b      	add	r3, r1
 8010f9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010f9c:	89fb      	ldrh	r3, [r7, #14]
 8010f9e:	b2db      	uxtb	r3, r3
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010fb4:	78fb      	ldrb	r3, [r7, #3]
 8010fb6:	2b0f      	cmp	r3, #15
 8010fb8:	d80d      	bhi.n	8010fd6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010fba:	78fb      	ldrb	r3, [r7, #3]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	33e0      	adds	r3, #224	; 0xe0
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	78fb      	ldrb	r3, [r7, #3]
 8010fc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010fcc:	6879      	ldr	r1, [r7, #4]
 8010fce:	33e0      	adds	r3, #224	; 0xe0
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	440b      	add	r3, r1
 8010fd4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010fd6:	2300      	movs	r3, #0
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010fec:	2300      	movs	r3, #0
 8010fee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	73fb      	strb	r3, [r7, #15]
 8010ff4:	e00f      	b.n	8011016 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010ff6:	7bfb      	ldrb	r3, [r7, #15]
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	33e0      	adds	r3, #224	; 0xe0
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	4413      	add	r3, r2
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011006:	2b00      	cmp	r3, #0
 8011008:	d102      	bne.n	8011010 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801100a:	7bfb      	ldrb	r3, [r7, #15]
 801100c:	b29b      	uxth	r3, r3
 801100e:	e007      	b.n	8011020 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8011010:	7bfb      	ldrb	r3, [r7, #15]
 8011012:	3301      	adds	r3, #1
 8011014:	73fb      	strb	r3, [r7, #15]
 8011016:	7bfb      	ldrb	r3, [r7, #15]
 8011018:	2b0f      	cmp	r3, #15
 801101a:	d9ec      	bls.n	8010ff6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801101c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011020:	4618      	mov	r0, r3
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8011030:	f007 fd6c 	bl	8018b0c <touchgfx_init>
}
 8011034:	bf00      	nop
 8011036:	bd80      	pop	{r7, pc}

08011038 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 801103c:	f007 fd90 	bl	8018b60 <touchgfx_taskEntry>
}
 8011040:	bf00      	nop
 8011042:	bd80      	pop	{r7, pc}

08011044 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
    {
 801104c:	4a04      	ldr	r2, [pc, #16]	; (8011060 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	601a      	str	r2, [r3, #0]
    }
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr
 8011060:	0802e3c8 	.word	0x0802e3c8

08011064 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
    }
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7ff ffe9 	bl	8011044 <_ZN8touchgfx12FontProviderD1Ev>
 8011072:	2104      	movs	r1, #4
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f01a fc0e 	bl	802b896 <_ZdlPvj>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4618      	mov	r0, r3
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	460b      	mov	r3, r1
 801108e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011090:	887b      	ldrh	r3, [r7, #2]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <_ZN23ApplicationFontProvider7getFontEt+0x18>
 8011096:	2b01      	cmp	r3, #1
 8011098:	d005      	beq.n	80110a6 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 801109a:	e009      	b.n	80110b0 <_ZN23ApplicationFontProvider7getFontEt+0x2c>
    {
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801109c:	f005 fc86 	bl	80169ac <_ZN17TypedTextDatabase8getFontsEv>
 80110a0:	4603      	mov	r3, r0
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	e005      	b.n	80110b2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
    case Typography::TYPOGRAPHY_01:
        // Alef_Bold_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80110a6:	f005 fc81 	bl	80169ac <_ZN17TypedTextDatabase8getFontsEv>
 80110aa:	4603      	mov	r3, r0
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	e000      	b.n	80110b2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
    default:
        return 0;
 80110b0:	2300      	movs	r3, #0
    }
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3708      	adds	r7, #8
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
	...

080110bc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_00 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 1; // Alef_Bold_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	4a05      	ldr	r2, [pc, #20]	; (80110dc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	601a      	str	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7ff ffb9 	bl	8011044 <_ZN8touchgfx12FontProviderD1Ev>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	0802e3b4 	.word	0x0802e3b4

080110e0 <_ZN23ApplicationFontProviderD0Ev>:
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff ffe7 	bl	80110bc <_ZN23ApplicationFontProviderD1Ev>
 80110ee:	2104      	movs	r1, #4
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f01a fbd0 	bl	802b896 <_ZdlPvj>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
    {
 8011108:	4a04      	ldr	r2, [pc, #16]	; (801111c <_ZN8touchgfx4FontD1Ev+0x1c>)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	601a      	str	r2, [r3, #0]
    }
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4618      	mov	r0, r3
 8011112:	370c      	adds	r7, #12
 8011114:	46bd      	mov	sp, r7
 8011116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111a:	4770      	bx	lr
 801111c:	0802e858 	.word	0x0802e858

08011120 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
    }
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff ffe9 	bl	8011100 <_ZN8touchgfx4FontD1Ev>
 801112e:	2110      	movs	r1, #16
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f01a fbb0 	bl	802b896 <_ZdlPvj>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8011140:	b590      	push	{r4, r7, lr}
 8011142:	b087      	sub	sp, #28
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	460b      	mov	r3, r1
 801114a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 801114c:	887b      	ldrh	r3, [r7, #2]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8011152:	2300      	movs	r3, #0
 8011154:	e010      	b.n	8011178 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	3308      	adds	r3, #8
 8011164:	681c      	ldr	r4, [r3, #0]
 8011166:	f107 030f 	add.w	r3, r7, #15
 801116a:	f107 0210 	add.w	r2, r7, #16
 801116e:	8879      	ldrh	r1, [r7, #2]
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	47a0      	blx	r4
 8011174:	6178      	str	r0, [r7, #20]
        return glyph;
 8011176:	697b      	ldr	r3, [r7, #20]
    }
 8011178:	4618      	mov	r0, r3
 801117a:	371c      	adds	r7, #28
 801117c:	46bd      	mov	sp, r7
 801117e:	bd90      	pop	{r4, r7, pc}

08011180 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8011180:	b480      	push	{r7}
 8011182:	b083      	sub	sp, #12
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	895b      	ldrh	r3, [r3, #10]
    }
 801118c:	4618      	mov	r0, r3
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	899b      	ldrh	r3, [r3, #12]
    }
 80111a4:	4618      	mov	r0, r3
 80111a6:	370c      	adds	r7, #12
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 80111b0:	b480      	push	{r7}
 80111b2:	b083      	sub	sp, #12
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	889b      	ldrh	r3, [r3, #4]
    }
 80111bc:	4618      	mov	r0, r3
 80111be:	370c      	adds	r7, #12
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr

080111c8 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	889a      	ldrh	r2, [r3, #4]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	799b      	ldrb	r3, [r3, #6]
 80111d8:	b29b      	uxth	r3, r3
 80111da:	4413      	add	r3, r2
 80111dc:	b29b      	uxth	r3, r3
    }
 80111de:	4618      	mov	r0, r3
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr

080111ea <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 80111ea:	b480      	push	{r7}
 80111ec:	b083      	sub	sp, #12
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	79db      	ldrb	r3, [r3, #7]
 80111f6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80111fa:	b2db      	uxtb	r3, r3
    }
 80111fc:	4618      	mov	r0, r3
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr

08011208 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	79db      	ldrb	r3, [r3, #7]
 8011214:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8011218:	b2db      	uxtb	r3, r3
    }
 801121a:	4618      	mov	r0, r3
 801121c:	370c      	adds	r7, #12
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
	...

08011228 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8011228:	b580      	push	{r7, lr}
 801122a:	b082      	sub	sp, #8
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	4a05      	ldr	r2, [pc, #20]	; (8011248 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	4618      	mov	r0, r3
 801123a:	f7ff ff61 	bl	8011100 <_ZN8touchgfx4FontD1Ev>
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4618      	mov	r0, r3
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0802f3c4 	.word	0x0802f3c4

0801124c <_ZN8touchgfx9ConstFontD0Ev>:
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ffe7 	bl	8011228 <_ZN8touchgfx9ConstFontD1Ev>
 801125a:	2118      	movs	r1, #24
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f01a fb1a 	bl	802b896 <_ZdlPvj>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4618      	mov	r0, r3
 8011266:	3708      	adds	r7, #8
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	4a05      	ldr	r2, [pc, #20]	; (801128c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4618      	mov	r0, r3
 801127e:	f7ff ffd3 	bl	8011228 <_ZN8touchgfx9ConstFontD1Ev>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	0802e3ec 	.word	0x0802e3ec

08011290 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f7ff ffe7 	bl	801126c <_ZN8touchgfx13GeneratedFontD1Ev>
 801129e:	2128      	movs	r1, #40	; 0x28
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f01a faf8 	bl	802b896 <_ZdlPvj>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
    {
 80112b8:	4a04      	ldr	r2, [pc, #16]	; (80112cc <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	601a      	str	r2, [r3, #0]
    }
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	4618      	mov	r0, r3
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr
 80112cc:	0802e3dc 	.word	0x0802e3dc

080112d0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
    }
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f7ff ffe9 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>
 80112de:	2108      	movs	r1, #8
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f01a fad8 	bl	802b896 <_ZdlPvj>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4618      	mov	r0, r3
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6a1b      	ldr	r3, [r3, #32]
    }
 80112fc:	4618      	mov	r0, r3
 80112fe:	370c      	adds	r7, #12
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8011314:	4618      	mov	r0, r3
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8011320:	b580      	push	{r7, lr}
 8011322:	b08c      	sub	sp, #48	; 0x30
 8011324:	af08      	add	r7, sp, #32
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	4611      	mov	r1, r2
 801132c:	461a      	mov	r2, r3
 801132e:	460b      	mov	r3, r1
 8011330:	80fb      	strh	r3, [r7, #6]
 8011332:	4613      	mov	r3, r2
 8011334:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	88b9      	ldrh	r1, [r7, #4]
 801133a:	88fa      	ldrh	r2, [r7, #6]
 801133c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801133e:	9306      	str	r3, [sp, #24]
 8011340:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011342:	9305      	str	r3, [sp, #20]
 8011344:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011348:	9304      	str	r3, [sp, #16]
 801134a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801134e:	9303      	str	r3, [sp, #12]
 8011350:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011354:	9302      	str	r3, [sp, #8]
 8011356:	7f3b      	ldrb	r3, [r7, #28]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	7e3b      	ldrb	r3, [r7, #24]
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	460b      	mov	r3, r1
 8011360:	68b9      	ldr	r1, [r7, #8]
 8011362:	f00d f909 	bl	801e578 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8011366:	4a0a      	ldr	r2, [pc, #40]	; (8011390 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	601a      	str	r2, [r3, #0]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011370:	619a      	str	r2, [r3, #24]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011376:	61da      	str	r2, [r3, #28]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801137c:	621a      	str	r2, [r3, #32]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011382:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	4618      	mov	r0, r3
 8011388:	3710      	adds	r7, #16
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	0802e3ec 	.word	0x0802e3ec

08011394 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	889b      	ldrh	r3, [r3, #4]
 80113a8:	0adb      	lsrs	r3, r3, #11
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	4413      	add	r3, r2
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4413      	add	r3, r2
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3714      	adds	r7, #20
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80113c6:	b480      	push	{r7}
 80113c8:	b089      	sub	sp, #36	; 0x24
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	60f8      	str	r0, [r7, #12]
 80113ce:	460b      	mov	r3, r1
 80113d0:	607a      	str	r2, [r7, #4]
 80113d2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d003      	beq.n	80113e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	7b1b      	ldrb	r3, [r3, #12]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d101      	bne.n	80113e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	e030      	b.n	8011448 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	69da      	ldr	r2, [r3, #28]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	7b5b      	ldrb	r3, [r3, #13]
 80113f2:	021b      	lsls	r3, r3, #8
 80113f4:	b21b      	sxth	r3, r3
 80113f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113fa:	b219      	sxth	r1, r3
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	7adb      	ldrb	r3, [r3, #11]
 8011400:	b21b      	sxth	r3, r3
 8011402:	430b      	orrs	r3, r1
 8011404:	b21b      	sxth	r3, r3
 8011406:	b29b      	uxth	r3, r3
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	4413      	add	r3, r2
 801140c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	7b1b      	ldrb	r3, [r3, #12]
 8011412:	837b      	strh	r3, [r7, #26]
 8011414:	8b7b      	ldrh	r3, [r7, #26]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d015      	beq.n	8011446 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	881b      	ldrh	r3, [r3, #0]
 801141e:	897a      	ldrh	r2, [r7, #10]
 8011420:	429a      	cmp	r2, r3
 8011422:	d103      	bne.n	801142c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801142a:	e00d      	b.n	8011448 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	881b      	ldrh	r3, [r3, #0]
 8011430:	897a      	ldrh	r2, [r7, #10]
 8011432:	429a      	cmp	r2, r3
 8011434:	d306      	bcc.n	8011444 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8011436:	8b7b      	ldrh	r3, [r7, #26]
 8011438:	3b01      	subs	r3, #1
 801143a:	837b      	strh	r3, [r7, #26]
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	3304      	adds	r3, #4
 8011440:	61fb      	str	r3, [r7, #28]
 8011442:	e7e7      	b.n	8011414 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8011444:	bf00      	nop
        }
    }
    return 0;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3724      	adds	r7, #36	; 0x24
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Alef_Bold_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Alef_Bold_20_4bpp();

touchgfx::GeneratedFont& getFont_Alef_Bold_20_4bpp()
{
    static touchgfx::GeneratedFont Alef_Bold_20_4bpp(glyphs_Alef_Bold_20_4bpp, 16, 20, 3, 4, 1, 0, 0, unicodes_Alef_Bold_20_4bpp, kerning_Alef_Bold_20_4bpp, 63, 0, 0, 0);
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
 8011458:	4801      	ldr	r0, [pc, #4]	; (8011460 <__tcf_0+0xc>)
 801145a:	f7ff ff07 	bl	801126c <_ZN8touchgfx13GeneratedFontD1Ev>
 801145e:	bd80      	pop	{r7, pc}
 8011460:	20009090 	.word	0x20009090

08011464 <_Z25getFont_Alef_Bold_20_4bppv>:
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b08c      	sub	sp, #48	; 0x30
 8011468:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont Alef_Bold_20_4bpp(glyphs_Alef_Bold_20_4bpp, 16, 20, 3, 4, 1, 0, 0, unicodes_Alef_Bold_20_4bpp, kerning_Alef_Bold_20_4bpp, 63, 0, 0, 0);
 801146a:	4b1f      	ldr	r3, [pc, #124]	; (80114e8 <_Z25getFont_Alef_Bold_20_4bppv+0x84>)
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	f3bf 8f5b 	dmb	ish
 8011472:	b2db      	uxtb	r3, r3
 8011474:	f003 0301 	and.w	r3, r3, #1
 8011478:	2b00      	cmp	r3, #0
 801147a:	bf0c      	ite	eq
 801147c:	2301      	moveq	r3, #1
 801147e:	2300      	movne	r3, #0
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b00      	cmp	r3, #0
 8011484:	d02c      	beq.n	80114e0 <_Z25getFont_Alef_Bold_20_4bppv+0x7c>
 8011486:	4818      	ldr	r0, [pc, #96]	; (80114e8 <_Z25getFont_Alef_Bold_20_4bppv+0x84>)
 8011488:	f01a fa07 	bl	802b89a <__cxa_guard_acquire>
 801148c:	4603      	mov	r3, r0
 801148e:	2b00      	cmp	r3, #0
 8011490:	bf14      	ite	ne
 8011492:	2301      	movne	r3, #1
 8011494:	2300      	moveq	r3, #0
 8011496:	b2db      	uxtb	r3, r3
 8011498:	2b00      	cmp	r3, #0
 801149a:	d021      	beq.n	80114e0 <_Z25getFont_Alef_Bold_20_4bppv+0x7c>
 801149c:	2300      	movs	r3, #0
 801149e:	930a      	str	r3, [sp, #40]	; 0x28
 80114a0:	2300      	movs	r3, #0
 80114a2:	9309      	str	r3, [sp, #36]	; 0x24
 80114a4:	2300      	movs	r3, #0
 80114a6:	9308      	str	r3, [sp, #32]
 80114a8:	233f      	movs	r3, #63	; 0x3f
 80114aa:	9307      	str	r3, [sp, #28]
 80114ac:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <_Z25getFont_Alef_Bold_20_4bppv+0x88>)
 80114ae:	9306      	str	r3, [sp, #24]
 80114b0:	4b0f      	ldr	r3, [pc, #60]	; (80114f0 <_Z25getFont_Alef_Bold_20_4bppv+0x8c>)
 80114b2:	9305      	str	r3, [sp, #20]
 80114b4:	2300      	movs	r3, #0
 80114b6:	9304      	str	r3, [sp, #16]
 80114b8:	2300      	movs	r3, #0
 80114ba:	9303      	str	r3, [sp, #12]
 80114bc:	2301      	movs	r3, #1
 80114be:	9302      	str	r3, [sp, #8]
 80114c0:	2304      	movs	r3, #4
 80114c2:	9301      	str	r3, [sp, #4]
 80114c4:	2303      	movs	r3, #3
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	2314      	movs	r3, #20
 80114ca:	2210      	movs	r2, #16
 80114cc:	4909      	ldr	r1, [pc, #36]	; (80114f4 <_Z25getFont_Alef_Bold_20_4bppv+0x90>)
 80114ce:	480a      	ldr	r0, [pc, #40]	; (80114f8 <_Z25getFont_Alef_Bold_20_4bppv+0x94>)
 80114d0:	f7ff ff26 	bl	8011320 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80114d4:	4809      	ldr	r0, [pc, #36]	; (80114fc <_Z25getFont_Alef_Bold_20_4bppv+0x98>)
 80114d6:	f01a fa2b 	bl	802b930 <atexit>
 80114da:	4803      	ldr	r0, [pc, #12]	; (80114e8 <_Z25getFont_Alef_Bold_20_4bppv+0x84>)
 80114dc:	f01a f9e9 	bl	802b8b2 <__cxa_guard_release>
    return Alef_Bold_20_4bpp;
 80114e0:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <_Z25getFont_Alef_Bold_20_4bppv+0x94>)
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	200090b8 	.word	0x200090b8
 80114ec:	08030d40 	.word	0x08030d40
 80114f0:	08030dcc 	.word	0x08030dcc
 80114f4:	080309e8 	.word	0x080309e8
 80114f8:	20009090 	.word	0x20009090
 80114fc:	08011455 	.word	0x08011455

08011500 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 45, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0, 0);
 8011500:	b580      	push	{r7, lr}
 8011502:	af00      	add	r7, sp, #0
 8011504:	4801      	ldr	r0, [pc, #4]	; (801150c <__tcf_0+0xc>)
 8011506:	f7ff feb1 	bl	801126c <_ZN8touchgfx13GeneratedFontD1Ev>
 801150a:	bd80      	pop	{r7, pc}
 801150c:	200090bc 	.word	0x200090bc

08011510 <_Z23getFont_verdana_20_4bppv>:
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b08c      	sub	sp, #48	; 0x30
 8011514:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 45, 20, 4, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0, 0, 0);
 8011516:	4b1f      	ldr	r3, [pc, #124]	; (8011594 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f3bf 8f5b 	dmb	ish
 801151e:	b2db      	uxtb	r3, r3
 8011520:	f003 0301 	and.w	r3, r3, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	bf0c      	ite	eq
 8011528:	2301      	moveq	r3, #1
 801152a:	2300      	movne	r3, #0
 801152c:	b2db      	uxtb	r3, r3
 801152e:	2b00      	cmp	r3, #0
 8011530:	d02c      	beq.n	801158c <_Z23getFont_verdana_20_4bppv+0x7c>
 8011532:	4818      	ldr	r0, [pc, #96]	; (8011594 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011534:	f01a f9b1 	bl	802b89a <__cxa_guard_acquire>
 8011538:	4603      	mov	r3, r0
 801153a:	2b00      	cmp	r3, #0
 801153c:	bf14      	ite	ne
 801153e:	2301      	movne	r3, #1
 8011540:	2300      	moveq	r3, #0
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	d021      	beq.n	801158c <_Z23getFont_verdana_20_4bppv+0x7c>
 8011548:	2300      	movs	r3, #0
 801154a:	930a      	str	r3, [sp, #40]	; 0x28
 801154c:	2300      	movs	r3, #0
 801154e:	9309      	str	r3, [sp, #36]	; 0x24
 8011550:	2300      	movs	r3, #0
 8011552:	9308      	str	r3, [sp, #32]
 8011554:	2300      	movs	r3, #0
 8011556:	9307      	str	r3, [sp, #28]
 8011558:	4b0f      	ldr	r3, [pc, #60]	; (8011598 <_Z23getFont_verdana_20_4bppv+0x88>)
 801155a:	9306      	str	r3, [sp, #24]
 801155c:	4b0f      	ldr	r3, [pc, #60]	; (801159c <_Z23getFont_verdana_20_4bppv+0x8c>)
 801155e:	9305      	str	r3, [sp, #20]
 8011560:	2301      	movs	r3, #1
 8011562:	9304      	str	r3, [sp, #16]
 8011564:	2300      	movs	r3, #0
 8011566:	9303      	str	r3, [sp, #12]
 8011568:	2301      	movs	r3, #1
 801156a:	9302      	str	r3, [sp, #8]
 801156c:	2304      	movs	r3, #4
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	2304      	movs	r3, #4
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	2314      	movs	r3, #20
 8011576:	222d      	movs	r2, #45	; 0x2d
 8011578:	4909      	ldr	r1, [pc, #36]	; (80115a0 <_Z23getFont_verdana_20_4bppv+0x90>)
 801157a:	480a      	ldr	r0, [pc, #40]	; (80115a4 <_Z23getFont_verdana_20_4bppv+0x94>)
 801157c:	f7ff fed0 	bl	8011320 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8011580:	4809      	ldr	r0, [pc, #36]	; (80115a8 <_Z23getFont_verdana_20_4bppv+0x98>)
 8011582:	f01a f9d5 	bl	802b930 <atexit>
 8011586:	4803      	ldr	r0, [pc, #12]	; (8011594 <_Z23getFont_verdana_20_4bppv+0x84>)
 8011588:	f01a f993 	bl	802b8b2 <__cxa_guard_release>
    return verdana_20_4bpp;
 801158c:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 801158e:	4618      	mov	r0, r3
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	200090e4 	.word	0x200090e4
 8011598:	08030d44 	.word	0x08030d44
 801159c:	08030dd0 	.word	0x08030dd0
 80115a0:	08030ac8 	.word	0x08030ac8
 80115a4:	200090bc 	.word	0x200090bc
 80115a8:	08011501 	.word	0x08011501

080115ac <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80115ce:	bf00      	nop
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80115da:	b480      	push	{r7}
 80115dc:	b083      	sub	sp, #12
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80115fa:	bf00      	nop
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8011606:	b480      	push	{r7}
 8011608:	b083      	sub	sp, #12
 801160a:	af00      	add	r7, sp, #0
 801160c:	6078      	str	r0, [r7, #4]
 801160e:	460b      	mov	r3, r1
 8011610:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8011612:	bf00      	nop
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801161e:	b480      	push	{r7}
 8011620:	b083      	sub	sp, #12
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
    {
    }
 8011626:	bf00      	nop
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr

08011632 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8011632:	b480      	push	{r7}
 8011634:	b083      	sub	sp, #12
 8011636:	af00      	add	r7, sp, #0
 8011638:	6078      	str	r0, [r7, #4]
    {
    }
 801163a:	bf00      	nop
 801163c:	370c      	adds	r7, #12
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr
	...

08011648 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
    {
 8011650:	4a04      	ldr	r2, [pc, #16]	; (8011664 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	601a      	str	r2, [r3, #0]
    }
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	0802e554 	.word	0x0802e554

08011668 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
    }
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ffe9 	bl	8011648 <_ZN8touchgfx15UIEventListenerD1Ev>
 8011676:	2104      	movs	r1, #4
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f01a f90c 	bl	802b896 <_ZdlPvj>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
    {
    }
 8011690:	bf00      	nop
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 801169c:	b480      	push	{r7}
 801169e:	b083      	sub	sp, #12
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	460b      	mov	r3, r1
 80116a6:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 80116a8:	bf00      	nop
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80116c6:	6810      	ldr	r0, [r2, #0]
 80116c8:	6851      	ldr	r1, [r2, #4]
 80116ca:	c303      	stmia	r3!, {r0, r1}
    }
 80116cc:	bf00      	nop
 80116ce:	370c      	adds	r7, #12
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
    {
 80116e0:	4a04      	ldr	r2, [pc, #16]	; (80116f4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
    }
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	0802e53c 	.word	0x0802e53c

080116f8 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    }
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ffe9 	bl	80116d8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011706:	2104      	movs	r1, #4
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f01a f8c4 	bl	802b896 <_ZdlPvj>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8011718:	b480      	push	{r7}
 801171a:	af00      	add	r7, sp, #0
    {
        return instance;
 801171c:	4b03      	ldr	r3, [pc, #12]	; (801172c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801171e:	681b      	ldr	r3, [r3, #0]
    }
 8011720:	4618      	mov	r0, r3
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	2000b4c4 	.word	0x2000b4c4

08011730 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8011730:	b480      	push	{r7}
 8011732:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8011734:	4b0b      	ldr	r3, [pc, #44]	; (8011764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801173c:	2b00      	cmp	r3, #0
 801173e:	d008      	beq.n	8011752 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8011740:	4b08      	ldr	r3, [pc, #32]	; (8011764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011746:	2b00      	cmp	r3, #0
 8011748:	d003      	beq.n	8011752 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 801174a:	4b06      	ldr	r3, [pc, #24]	; (8011764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011750:	e002      	b.n	8011758 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8011752:	4b04      	ldr	r3, [pc, #16]	; (8011764 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	689b      	ldr	r3, [r3, #8]
    }
 8011758:	4618      	mov	r0, r3
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	2000b4c4 	.word	0x2000b4c4

08011768 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8011770:	4a07      	ldr	r2, [pc, #28]	; (8011790 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	601a      	str	r2, [r3, #0]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	605a      	str	r2, [r3, #4]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2200      	movs	r2, #0
 8011780:	721a      	strb	r2, [r3, #8]
    {
    }
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4618      	mov	r0, r3
 8011786:	370c      	adds	r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	0802e518 	.word	0x0802e518

08011794 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
    {
 801179c:	4a04      	ldr	r2, [pc, #16]	; (80117b0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	601a      	str	r2, [r3, #0]
    }
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	0802e518 	.word	0x0802e518

080117b4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
    }
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7ff ffe9 	bl	8011794 <_ZN8touchgfx10TransitionD1Ev>
 80117c2:	210c      	movs	r1, #12
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f01a f866 	bl	802b896 <_ZdlPvj>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4618      	mov	r0, r3
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
    {
    }
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
    {
    }
 80117f0:	bf00      	nop
 80117f2:	370c      	adds	r7, #12
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr

080117fc <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
    {
    }
 8011804:	bf00      	nop
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8011810:	b580      	push	{r7, lr}
 8011812:	b082      	sub	sp, #8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8011818:	f00b fe2e 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801181c:	4603      	mov	r3, r0
 801181e:	4618      	mov	r0, r3
 8011820:	f00c fa0a 	bl	801dc38 <_ZN8touchgfx11Application10invalidateEv>
    }
 8011824:	bf00      	nop
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	605a      	str	r2, [r3, #4]
    }
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr

08011848 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	4a05      	ldr	r2, [pc, #20]	; (8011868 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fef5 	bl	8011648 <_ZN8touchgfx15UIEventListenerD1Ev>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4618      	mov	r0, r3
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	0802f310 	.word	0x0802f310

0801186c <_ZN8touchgfx11ApplicationD0Ev>:
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7ff ffe7 	bl	8011848 <_ZN8touchgfx11ApplicationD1Ev>
 801187a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f01a f809 	bl	802b896 <_ZdlPvj>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
	...

08011890 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	4618      	mov	r0, r3
 801189c:	f00b fe48 	bl	801d530 <_ZN8touchgfx11ApplicationC1Ev>
 80118a0:	4a09      	ldr	r2, [pc, #36]	; (80118c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	601a      	str	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2200      	movs	r2, #0
 80118aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2200      	movs	r2, #0
 80118b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4a04      	ldr	r2, [pc, #16]	; (80118cc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80118ba:	6013      	str	r3, [r2, #0]
    }
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4618      	mov	r0, r3
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	0802e4cc 	.word	0x0802e4cc
 80118cc:	2000b510 	.word	0x2000b510

080118d0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f000 f804 	bl	80118e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 80118de:	bf00      	nop
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b082      	sub	sp, #8
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00f      	beq.n	8011918 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	330c      	adds	r3, #12
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	4610      	mov	r0, r2
 801190c:	4798      	blx	r3
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d001      	beq.n	8011918 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8011914:	2301      	movs	r3, #1
 8011916:	e000      	b.n	801191a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8011918:	2300      	movs	r3, #0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00e      	beq.n	801193c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	3308      	adds	r3, #8
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4610      	mov	r0, r2
 8011932:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	683a      	ldr	r2, [r7, #0]
 8011952:	601a      	str	r2, [r3, #0]
    }
 8011954:	bf00      	nop
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr

08011960 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	4a05      	ldr	r2, [pc, #20]	; (8011980 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff ff69 	bl	8011848 <_ZN8touchgfx11ApplicationD1Ev>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	0802e4cc 	.word	0x0802e4cc

08011984 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7ff ffe7 	bl	8011960 <_ZN8touchgfx14MVPApplicationD1Ev>
 8011992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f019 ff7d 	bl	802b896 <_ZdlPvj>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4618      	mov	r0, r3
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
	...

080119a8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	4a08      	ldr	r2, [pc, #32]	; (80119d4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80119bc:	4618      	mov	r0, r3
 80119be:	f000 facb 	bl	8011f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7ff ffcb 	bl	8011960 <_ZN8touchgfx14MVPApplicationD1Ev>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0802e468 	.word	0x0802e468

080119d8 <_ZN23FrontendApplicationBaseD0Ev>:
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff ffe1 	bl	80119a8 <_ZN23FrontendApplicationBaseD1Ev>
 80119e6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f019 ff53 	bl	802b896 <_ZdlPvj>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f87c 	bl	8011b00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8011a08:	bf00      	nop
 8011a0a:	3708      	adds	r7, #8
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	721a      	strb	r2, [r3, #8]
    }
 8011a1e:	bf00      	nop
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8011a2a:	b480      	push	{r7}
 8011a2c:	b083      	sub	sp, #12
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
 8011a32:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	683a      	ldr	r2, [r7, #0]
 8011a38:	605a      	str	r2, [r3, #4]
    }
 8011a3a:	bf00      	nop
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr
	...

08011a48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff ff1a 	bl	8011890 <_ZN8touchgfx14MVPApplicationC1Ev>
 8011a5c:	4a13      	ldr	r2, [pc, #76]	; (8011aac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	601a      	str	r2, [r3, #0]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f000 f89f 	bl	8011bac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8011a7e:	f7ff fe4b 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 8011a82:	4603      	mov	r3, r0
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	3208      	adds	r2, #8
 8011a88:	6812      	ldr	r2, [r2, #0]
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8011a90:	2000      	movs	r0, #0
 8011a92:	f004 ff13 	bl	80168bc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8011a96:	f7ff fe4b 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f012 fffe 	bl	8024a9e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3710      	adds	r7, #16
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	0802e468 	.word	0x0802e468

08011ab0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	6039      	str	r1, [r7, #0]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	4611      	mov	r1, r2
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff ffe9 	bl	8011ab0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	685a      	ldr	r2, [r3, #4]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	605a      	str	r2, [r3, #4]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	3308      	adds	r3, #8
 8011aec:	3208      	adds	r2, #8
 8011aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011af2:	e883 0003 	stmia.w	r3, {r0, r1}
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8011b00:	b590      	push	{r4, r7, lr}
 8011b02:	b089      	sub	sp, #36	; 0x24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8011b0e:	4b10      	ldr	r3, [pc, #64]	; (8011b50 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8011b10:	61bb      	str	r3, [r7, #24]
 8011b12:	2300      	movs	r3, #0
 8011b14:	61fb      	str	r3, [r7, #28]
 8011b16:	f107 0008 	add.w	r0, r7, #8
 8011b1a:	f107 0318 	add.w	r3, r7, #24
 8011b1e:	cb0c      	ldmia	r3, {r2, r3}
 8011b20:	6879      	ldr	r1, [r7, #4]
 8011b22:	f000 f85f 	bl	8011be4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011b26:	f107 0308 	add.w	r3, r7, #8
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f7ff ffcb 	bl	8011ac8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011b32:	f107 0308 	add.w	r3, r7, #8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 fa0e 	bl	8011f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8011b48:	bf00      	nop
 8011b4a:	3724      	adds	r7, #36	; 0x24
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd90      	pop	{r4, r7, pc}
 8011b50:	08011b55 	.word	0x08011b55

08011b54 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af02      	add	r7, sp, #8
 8011b5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8011b68:	461a      	mov	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011b70:	9300      	str	r3, [sp, #0]
 8011b72:	4b04      	ldr	r3, [pc, #16]	; (8011b84 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8011b74:	4804      	ldr	r0, [pc, #16]	; (8011b88 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8011b76:	f000 f867 	bl	8011c48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011b7a:	bf00      	nop
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	2000b504 	.word	0x2000b504
 8011b88:	2000b500 	.word	0x2000b500

08011b8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	4a04      	ldr	r2, [pc, #16]	; (8011ba8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	601a      	str	r2, [r3, #0]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	0802e53c 	.word	0x0802e53c

08011bac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7ff ffe8 	bl	8011b8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8011bbc:	4a08      	ldr	r2, [pc, #32]	; (8011be0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	601a      	str	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	605a      	str	r2, [r3, #4]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	609a      	str	r2, [r3, #8]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	60da      	str	r2, [r3, #12]
    {
    }
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	0802e4b4 	.word	0x0802e4b4

08011be4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	4639      	mov	r1, r7
 8011bf0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7ff ffc8 	bl	8011b8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8011bfc:	4a08      	ldr	r2, [pc, #32]	; (8011c20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	68ba      	ldr	r2, [r7, #8]
 8011c06:	605a      	str	r2, [r3, #4]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	463a      	mov	r2, r7
 8011c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c12:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	0802e4b4 	.word	0x0802e4b4

08011c24 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7ff fd9a 	bl	8011768 <_ZN8touchgfx10TransitionC1Ev>
 8011c34:	4a03      	ldr	r2, [pc, #12]	; (8011c44 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	601a      	str	r2, [r3, #0]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3708      	adds	r7, #8
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	0802e444 	.word	0x0802e444

08011c48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b08f      	sub	sp, #60	; 0x3c
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	60f8      	str	r0, [r7, #12]
 8011c50:	60b9      	str	r1, [r7, #8]
 8011c52:	607a      	str	r2, [r7, #4]
 8011c54:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	689a      	ldr	r2, [r3, #8]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3320      	adds	r3, #32
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4610      	mov	r0, r2
 8011c66:	4798      	blx	r3
 8011c68:	4603      	mov	r3, r0
 8011c6a:	f640 4273 	movw	r2, #3187	; 0xc73
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d805      	bhi.n	8011c7e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8011c72:	4b7f      	ldr	r3, [pc, #508]	; (8011e70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8011c74:	4a7f      	ldr	r2, [pc, #508]	; (8011e74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011c76:	21a3      	movs	r1, #163	; 0xa3
 8011c78:	487f      	ldr	r0, [pc, #508]	; (8011e78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011c7a:	f019 fe3b 	bl	802b8f4 <__assert_func>
 8011c7e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	3320      	adds	r3, #32
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4610      	mov	r0, r2
 8011c90:	4798      	blx	r3
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b0f      	cmp	r3, #15
 8011c96:	d805      	bhi.n	8011ca4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 8011c98:	4b78      	ldr	r3, [pc, #480]	; (8011e7c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8011c9a:	4a76      	ldr	r2, [pc, #472]	; (8011e74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011c9c:	21a4      	movs	r1, #164	; 0xa4
 8011c9e:	4876      	ldr	r0, [pc, #472]	; (8011e78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011ca0:	f019 fe28 	bl	802b8f4 <__assert_func>
 8011ca4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68da      	ldr	r2, [r3, #12]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	3320      	adds	r3, #32
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b0b      	cmp	r3, #11
 8011cbc:	d805      	bhi.n	8011cca <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011cbe:	4b70      	ldr	r3, [pc, #448]	; (8011e80 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8011cc0:	4a6c      	ldr	r2, [pc, #432]	; (8011e74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8011cc2:	21a5      	movs	r1, #165	; 0xa5
 8011cc4:	486c      	ldr	r0, [pc, #432]	; (8011e78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8011cc6:	f019 fe15 	bl	802b8f4 <__assert_func>
 8011cca:	bf00      	nop
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8011cd8:	f00b fbce 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f00b fc0c 	bl	801d4fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d008      	beq.n	8011cfe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	330c      	adds	r3, #12
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4610      	mov	r0, r2
 8011cfc:	4798      	blx	r3
    if (*currentTrans)
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d007      	beq.n	8011d16 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	681a      	ldr	r2, [r3, #0]
 8011d0a:	6a3b      	ldr	r3, [r7, #32]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4610      	mov	r0, r2
 8011d14:	4798      	blx	r3
    if (*currentScreen)
 8011d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d008      	beq.n	8011d30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8011d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	3314      	adds	r3, #20
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	4610      	mov	r0, r2
 8011d2e:	4798      	blx	r3
    if (*currentPresenter)
 8011d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d008      	beq.n	8011d4a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8011d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	3304      	adds	r3, #4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	4610      	mov	r0, r2
 8011d48:	4798      	blx	r3
    if (*currentScreen)
 8011d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d007      	beq.n	8011d62 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8011d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	4610      	mov	r0, r2
 8011d60:	4798      	blx	r3
    if (*currentPresenter)
 8011d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d008      	beq.n	8011d7c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	3308      	adds	r3, #8
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4610      	mov	r0, r2
 8011d7a:	4798      	blx	r3
}
 8011d7c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	2100      	movs	r1, #0
 8011d84:	4618      	mov	r0, r3
 8011d86:	f000 f87d 	bl	8011e84 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	200c      	movs	r0, #12
 8011d90:	f7ff fc0c 	bl	80115ac <_ZnwjPv>
 8011d94:	4604      	mov	r4, r0
 8011d96:	4620      	mov	r0, r4
 8011d98:	f7ff ff44 	bl	8011c24 <_ZN8touchgfx12NoTransitionC1Ev>
 8011d9c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	689b      	ldr	r3, [r3, #8]
 8011da2:	2100      	movs	r1, #0
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 f880 	bl	8011eaa <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011daa:	4603      	mov	r3, r0
 8011dac:	4619      	mov	r1, r3
 8011dae:	f640 4074 	movw	r0, #3188	; 0xc74
 8011db2:	f7ff fbfb 	bl	80115ac <_ZnwjPv>
 8011db6:	4604      	mov	r4, r0
 8011db8:	4620      	mov	r0, r4
 8011dba:	f004 ff77 	bl	8016cac <_ZN8MainViewC1Ev>
 8011dbe:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f000 f882 	bl	8011ed0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	4619      	mov	r1, r3
 8011dd0:	2010      	movs	r0, #16
 8011dd2:	f7ff fbeb 	bl	80115ac <_ZnwjPv>
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f004 ff0e 	bl	8016bfc <_ZN13MainPresenterC1ER8MainView>
 8011de0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dec:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011df2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d002      	beq.n	8011e00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	e000      	b.n	8011e02 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8011e00:	2300      	movs	r3, #0
 8011e02:	4619      	mov	r1, r3
 8011e04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8011e06:	f7ff fd9d 	bl	8011944 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0c:	3304      	adds	r3, #4
 8011e0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff fe0a 	bl	8011a2a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f000 f86b 	bl	8011ef6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8011e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e22:	61fb      	str	r3, [r7, #28]
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	61bb      	str	r3, [r7, #24]
 8011e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e2a:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	330c      	adds	r3, #12
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	69f8      	ldr	r0, [r7, #28]
 8011e36:	4798      	blx	r3
    newPresenter->activate();
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	69b8      	ldr	r0, [r7, #24]
 8011e40:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011e42:	6979      	ldr	r1, [r7, #20]
 8011e44:	69f8      	ldr	r0, [r7, #28]
 8011e46:	f00c ff2f 	bl	801eca8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3310      	adds	r3, #16
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	6978      	ldr	r0, [r7, #20]
 8011e54:	4798      	blx	r3
    newTransition->invalidate();
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	3314      	adds	r3, #20
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6978      	ldr	r0, [r7, #20]
 8011e60:	4798      	blx	r3
}
 8011e62:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	373c      	adds	r7, #60	; 0x3c
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd90      	pop	{r4, r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	0802d8d4 	.word	0x0802d8d4
 8011e74:	0802d964 	.word	0x0802d964
 8011e78:	0802da64 	.word	0x0802da64
 8011e7c:	0802daa8 	.word	0x0802daa8
 8011e80:	0802db4c 	.word	0x0802db4c

08011e84 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	3324      	adds	r3, #36	; 0x24
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	887a      	ldrh	r2, [r7, #2]
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	4798      	blx	r3
 8011ea0:	4603      	mov	r3, r0
    }
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b082      	sub	sp, #8
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	3324      	adds	r3, #36	; 0x24
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	887a      	ldrh	r2, [r7, #2]
 8011ec0:	4611      	mov	r1, r2
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	4798      	blx	r3
 8011ec6:	4603      	mov	r3, r0
    }
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3708      	adds	r7, #8
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	460b      	mov	r3, r1
 8011eda:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	3324      	adds	r3, #36	; 0x24
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	887a      	ldrh	r2, [r7, #2]
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	4798      	blx	r3
 8011eec:	4603      	mov	r3, r0
    }
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3708      	adds	r7, #8
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}

08011ef6 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 8011ef6:	b480      	push	{r7}
 8011ef8:	b083      	sub	sp, #12
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	683a      	ldr	r2, [r7, #0]
 8011f04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011f06:	bf00      	nop
 8011f08:	370c      	adds	r7, #12
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
	...

08011f14 <_ZN8touchgfx12NoTransitionD1Ev>:
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	4a05      	ldr	r2, [pc, #20]	; (8011f34 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff fc35 	bl	8011794 <_ZN8touchgfx10TransitionD1Ev>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	0802e444 	.word	0x0802e444

08011f38 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff ffe7 	bl	8011f14 <_ZN8touchgfx12NoTransitionD1Ev>
 8011f46:	210c      	movs	r1, #12
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f019 fca4 	bl	802b896 <_ZdlPvj>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	4a05      	ldr	r2, [pc, #20]	; (8011f78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	601a      	str	r2, [r3, #0]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7ff fbb5 	bl	80116d8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	0802e4b4 	.word	0x0802e4b4

08011f7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7ff ffe7 	bl	8011f58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011f8a:	2110      	movs	r1, #16
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f019 fc82 	bl	802b896 <_ZdlPvj>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	4618      	mov	r0, r3
 8011f96:	3708      	adds	r7, #8
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	68d2      	ldr	r2, [r2, #12]
 8011fac:	1052      	asrs	r2, r2, #1
 8011fae:	1899      	adds	r1, r3, r2
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d102      	bne.n	8011fc2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	689b      	ldr	r3, [r3, #8]
 8011fc0:	e00a      	b.n	8011fd8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	687a      	ldr	r2, [r7, #4]
 8011fc8:	68d2      	ldr	r2, [r2, #12]
 8011fca:	1052      	asrs	r2, r2, #1
 8011fcc:	4413      	add	r3, r2
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	6892      	ldr	r2, [r2, #8]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4608      	mov	r0, r1
 8011fda:	4798      	blx	r3
    }
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d010      	beq.n	8012016 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	689b      	ldr	r3, [r3, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d107      	bne.n	801200c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	f003 0301 	and.w	r3, r3, #1
 8012004:	2b00      	cmp	r3, #0
 8012006:	d101      	bne.n	801200c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8012008:	2301      	movs	r3, #1
 801200a:	e000      	b.n	801200e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801200c:	2300      	movs	r3, #0
 801200e:	2b01      	cmp	r3, #1
 8012010:	d001      	beq.n	8012016 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8012012:	2301      	movs	r3, #1
 8012014:	e000      	b.n	8012018 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8012016:	2300      	movs	r3, #0
    }
 8012018:	4618      	mov	r0, r3
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8012024:	b480      	push	{r7}
 8012026:	b083      	sub	sp, #12
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
        : color(col)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	601a      	str	r2, [r3, #0]
    {
    }
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	4618      	mov	r0, r3
 8012038:	370c      	adds	r7, #12
 801203a:	46bd      	mov	sp, r7
 801203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012040:	4770      	bx	lr

08012042 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8012042:	b480      	push	{r7}
 8012044:	b083      	sub	sp, #12
 8012046:	af00      	add	r7, sp, #0
 8012048:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	801a      	strh	r2, [r3, #0]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	805a      	strh	r2, [r3, #2]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	809a      	strh	r2, [r3, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	80da      	strh	r2, [r3, #6]
    {
    }
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	370c      	adds	r7, #12
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	4608      	mov	r0, r1
 801207a:	4611      	mov	r1, r2
 801207c:	461a      	mov	r2, r3
 801207e:	4603      	mov	r3, r0
 8012080:	817b      	strh	r3, [r7, #10]
 8012082:	460b      	mov	r3, r1
 8012084:	813b      	strh	r3, [r7, #8]
 8012086:	4613      	mov	r3, r2
 8012088:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	897a      	ldrh	r2, [r7, #10]
 801208e:	801a      	strh	r2, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	893a      	ldrh	r2, [r7, #8]
 8012094:	805a      	strh	r2, [r3, #2]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	88fa      	ldrh	r2, [r7, #6]
 801209a:	809a      	strh	r2, [r3, #4]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	8b3a      	ldrh	r2, [r7, #24]
 80120a0:	80da      	strh	r2, [r3, #6]
    {
    }
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	4618      	mov	r0, r3
 80120a6:	3714      	adds	r7, #20
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr

080120b0 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	460b      	mov	r3, r1
 80120ba:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	887a      	ldrh	r2, [r7, #2]
 80120c0:	801a      	strh	r2, [r3, #0]
    {
    }
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80120d8:	4a14      	ldr	r2, [pc, #80]	; (801212c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	3304      	adds	r3, #4
 80120e2:	4618      	mov	r0, r3
 80120e4:	f7ff ffad 	bl	8012042 <_ZN8touchgfx4RectC1Ev>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	330c      	adds	r3, #12
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7ff ffa8 	bl	8012042 <_ZN8touchgfx4RectC1Ev>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2200      	movs	r2, #0
 80120f6:	615a      	str	r2, [r3, #20]
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	619a      	str	r2, [r3, #24]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2200      	movs	r2, #0
 8012102:	61da      	str	r2, [r3, #28]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2200      	movs	r2, #0
 8012108:	841a      	strh	r2, [r3, #32]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2200      	movs	r2, #0
 801210e:	845a      	strh	r2, [r3, #34]	; 0x22
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2200      	movs	r2, #0
 8012114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2201      	movs	r2, #1
 801211c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	4618      	mov	r0, r3
 8012124:	3708      	adds	r7, #8
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	0802f35c 	.word	0x0802f35c

08012130 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
    {
 8012138:	4a04      	ldr	r2, [pc, #16]	; (801214c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	601a      	str	r2, [r3, #0]
    }
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	0802f35c 	.word	0x0802f35c

08012150 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    }
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff ffe9 	bl	8012130 <_ZN8touchgfx8DrawableD1Ev>
 801215e:	2128      	movs	r1, #40	; 0x28
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f019 fb98 	bl	802b896 <_ZdlPvj>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4618      	mov	r0, r3
 801216a:	3708      	adds	r7, #8
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801217e:	2b00      	cmp	r3, #0
 8012180:	d005      	beq.n	801218e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	3314      	adds	r3, #20
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	4798      	blx	r3
        }
    }
 801218e:	bf00      	nop
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8012196:	b480      	push	{r7}
 8012198:	b083      	sub	sp, #12
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801219e:	2300      	movs	r3, #0
    }
 80121a0:	4618      	mov	r0, r3
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	4608      	mov	r0, r1
 80121b6:	4611      	mov	r1, r2
 80121b8:	461a      	mov	r2, r3
 80121ba:	4603      	mov	r3, r0
 80121bc:	817b      	strh	r3, [r7, #10]
 80121be:	460b      	mov	r3, r1
 80121c0:	813b      	strh	r3, [r7, #8]
 80121c2:	4613      	mov	r3, r2
 80121c4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80121c6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80121ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80121ce:	4619      	mov	r1, r3
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 f82a 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80121d6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80121da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80121de:	4619      	mov	r1, r3
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f000 f87e 	bl	80122e2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80121e6:	bf00      	nop
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 80121ee:	b480      	push	{r7}
 80121f0:	b083      	sub	sp, #12
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
 80121f6:	460b      	mov	r3, r1
 80121f8:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	887a      	ldrh	r2, [r7, #2]
 80121fe:	809a      	strh	r2, [r3, #4]
    }
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	460b      	mov	r3, r1
 8012216:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	887a      	ldrh	r2, [r7, #2]
 801221c:	80da      	strh	r2, [r3, #6]
    }
 801221e:	bf00      	nop
 8012220:	370c      	adds	r7, #12
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr

0801222a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801222a:	b580      	push	{r7, lr}
 801222c:	b082      	sub	sp, #8
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	460b      	mov	r3, r1
 8012234:	807b      	strh	r3, [r7, #2]
 8012236:	4613      	mov	r3, r2
 8012238:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	3330      	adds	r3, #48	; 0x30
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012246:	4611      	mov	r1, r2
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	4798      	blx	r3
        setY(y);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	3334      	adds	r3, #52	; 0x34
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012258:	4611      	mov	r1, r2
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	4798      	blx	r3
    }
 801225e:	bf00      	nop
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8012266:	b480      	push	{r7}
 8012268:	b083      	sub	sp, #12
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	460b      	mov	r3, r1
 8012270:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	887a      	ldrh	r2, [r7, #2]
 8012276:	811a      	strh	r2, [r3, #8]
    }
 8012278:	bf00      	nop
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	460b      	mov	r3, r1
 801228e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	887a      	ldrh	r2, [r7, #2]
 8012294:	815a      	strh	r2, [r3, #10]
    }
 8012296:	bf00      	nop
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80122a2:	b480      	push	{r7}
 80122a4:	b083      	sub	sp, #12
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
    {
    }
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80122b6:	b480      	push	{r7}
 80122b8:	b083      	sub	sp, #12
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
 80122be:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80122c0:	bf00      	nop
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80122d6:	bf00      	nop
 80122d8:	370c      	adds	r7, #12
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b082      	sub	sp, #8
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	460b      	mov	r3, r1
 80122ec:	807b      	strh	r3, [r7, #2]
 80122ee:	4613      	mov	r3, r2
 80122f0:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3338      	adds	r3, #56	; 0x38
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122fe:	4611      	mov	r1, r2
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	4798      	blx	r3
        setHeight(height);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	333c      	adds	r3, #60	; 0x3c
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012310:	4611      	mov	r1, r2
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	4798      	blx	r3
    }
 8012316:	bf00      	nop
 8012318:	3708      	adds	r7, #8
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}

0801231e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801231e:	b480      	push	{r7}
 8012320:	b083      	sub	sp, #12
 8012322:	af00      	add	r7, sp, #0
 8012324:	6078      	str	r0, [r7, #4]
 8012326:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8012334:	b480      	push	{r7}
 8012336:	b083      	sub	sp, #12
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
    {
    }
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	78fa      	ldrb	r2, [r7, #3]
 8012358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8012382:	b480      	push	{r7}
 8012384:	b083      	sub	sp, #12
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8012390:	4618      	mov	r0, r3
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr

0801239c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	807b      	strh	r3, [r7, #2]
 80123a8:	4613      	mov	r3, r2
 80123aa:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	3354      	adds	r3, #84	; 0x54
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	8879      	ldrh	r1, [r7, #2]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80123bc:	b292      	uxth	r2, r2
 80123be:	1a8a      	subs	r2, r1, r2
 80123c0:	b292      	uxth	r2, r2
 80123c2:	b210      	sxth	r0, r2
 80123c4:	8839      	ldrh	r1, [r7, #0]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80123cc:	b292      	uxth	r2, r2
 80123ce:	1a8a      	subs	r2, r1, r2
 80123d0:	b292      	uxth	r2, r2
 80123d2:	b212      	sxth	r2, r2
 80123d4:	4601      	mov	r1, r0
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	4798      	blx	r3
    }
 80123da:	bf00      	nop
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80123e2:	b480      	push	{r7}
 80123e4:	b083      	sub	sp, #12
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123f0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123f8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012400:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012402:	bf00      	nop
 8012404:	370c      	adds	r7, #12
 8012406:	46bd      	mov	sp, r7
 8012408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240c:	4770      	bx	lr

0801240e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 801240e:	b580      	push	{r7, lr}
 8012410:	b084      	sub	sp, #16
 8012412:	af00      	add	r7, sp, #0
 8012414:	60f8      	str	r0, [r7, #12]
 8012416:	60b9      	str	r1, [r7, #8]
 8012418:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f7ff ffe1 	bl	80123e2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	601a      	str	r2, [r3, #0]
    }
 801242e:	bf00      	nop
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
    {
 8012440:	4a06      	ldr	r2, [pc, #24]	; (801245c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	3304      	adds	r3, #4
 801244a:	4618      	mov	r0, r3
 801244c:	f004 f81a 	bl	8016484 <_ZN8touchgfx9ContainerD1Ev>
    }
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	0802f458 	.word	0x0802f458

08012460 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
    }
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff ffe5 	bl	8012438 <_ZN8touchgfx6ScreenD1Ev>
 801246e:	213c      	movs	r1, #60	; 0x3c
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f019 fa10 	bl	802b896 <_ZdlPvj>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
    {
    }
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
    {
    }
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
    {
    }
 80124b0:	bf00      	nop
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
    {
    }
 80124c4:	bf00      	nop
 80124c6:	370c      	adds	r7, #12
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	460b      	mov	r3, r1
 80124da:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80124dc:	bf00      	nop
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	3304      	adds	r3, #4
 80124f6:	6839      	ldr	r1, [r7, #0]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f007 fa85 	bl	8019a08 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80124fe:	bf00      	nop
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8012506:	b580      	push	{r7, lr}
 8012508:	b084      	sub	sp, #16
 801250a:	af00      	add	r7, sp, #0
 801250c:	60f8      	str	r0, [r7, #12]
 801250e:	607b      	str	r3, [r7, #4]
 8012510:	460b      	mov	r3, r1
 8012512:	817b      	strh	r3, [r7, #10]
 8012514:	4613      	mov	r3, r2
 8012516:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	4618      	mov	r0, r3
 801251c:	f7ff ff24 	bl	8012368 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d008      	beq.n	8012538 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	4618      	mov	r0, r3
 801252a:	f7ff ff2a 	bl	8012382 <_ZNK8touchgfx8Drawable11isTouchableEv>
 801252e:	4603      	mov	r3, r0
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012534:	2301      	movs	r3, #1
 8012536:	e000      	b.n	801253a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012538:	2300      	movs	r3, #0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d002      	beq.n	8012544 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	601a      	str	r2, [r3, #0]
        }
    }
 8012544:	bf00      	nop
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	4618      	mov	r0, r3
 8012558:	f7ff fdba 	bl	80120d0 <_ZN8touchgfx8DrawableC1Ev>
 801255c:	4a03      	ldr	r2, [pc, #12]	; (801256c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	0802e6c4 	.word	0x0802e6c4

08012570 <_ZN8touchgfx6WidgetD1Ev>:
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	4a05      	ldr	r2, [pc, #20]	; (8012590 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4618      	mov	r0, r3
 8012582:	f7ff fdd5 	bl	8012130 <_ZN8touchgfx8DrawableD1Ev>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	0802e6c4 	.word	0x0802e6c4

08012594 <_ZN8touchgfx6WidgetD0Ev>:
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff ffe7 	bl	8012570 <_ZN8touchgfx6WidgetD1Ev>
 80125a2:	2128      	movs	r1, #40	; 0x28
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f019 f976 	bl	802b896 <_ZdlPvj>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4618      	mov	r0, r3
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b082      	sub	sp, #8
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	2326      	movs	r3, #38	; 0x26
 80125c2:	461a      	mov	r2, r3
 80125c4:	2100      	movs	r1, #0
 80125c6:	f019 fa21 	bl	802ba0c <memset>
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff ffbd 	bl	801254c <_ZN8touchgfx6WidgetC1Ev>
 80125d2:	4a09      	ldr	r2, [pc, #36]	; (80125f8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	601a      	str	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	22ff      	movs	r2, #255	; 0xff
 80125dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3328      	adds	r3, #40	; 0x28
 80125e4:	2100      	movs	r1, #0
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7ff fd1c 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4618      	mov	r0, r3
 80125f0:	3708      	adds	r7, #8
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop
 80125f8:	0802f0e0 	.word	0x0802f0e0

080125fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	683a      	ldr	r2, [r7, #0]
 801260a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801260c:	bf00      	nop
 801260e:	370c      	adds	r7, #12
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8012618:	b580      	push	{r7, lr}
 801261a:	b082      	sub	sp, #8
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	4618      	mov	r0, r3
 8012624:	2326      	movs	r3, #38	; 0x26
 8012626:	461a      	mov	r2, r3
 8012628:	2100      	movs	r1, #0
 801262a:	f019 f9ef 	bl	802ba0c <memset>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7ff ff8b 	bl	801254c <_ZN8touchgfx6WidgetC1Ev>
 8012636:	4a0a      	ldr	r2, [pc, #40]	; (8012660 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2200      	movs	r2, #0
 8012640:	629a      	str	r2, [r3, #40]	; 0x28
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2200      	movs	r2, #0
 8012646:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2101      	movs	r1, #1
 801264e:	4618      	mov	r0, r3
 8012650:	f7ff fe7a 	bl	8012348 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	3708      	adds	r7, #8
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	0802eef0 	.word	0x0802eef0

08012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012674:	bf00      	nop
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	4a05      	ldr	r2, [pc, #20]	; (80126a0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	f7ff ff6d 	bl	8012570 <_ZN8touchgfx6WidgetD1Ev>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}
 80126a0:	0802eef0 	.word	0x0802eef0

080126a4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff ffe7 	bl	8012680 <_ZN8touchgfx14AbstractButtonD1Ev>
 80126b2:	2130      	movs	r1, #48	; 0x30
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f019 f8ee 	bl	802b896 <_ZdlPvj>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7ff ffa2 	bl	8012618 <_ZN8touchgfx14AbstractButtonC1Ev>
 80126d4:	4a0c      	ldr	r2, [pc, #48]	; (8012708 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	601a      	str	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	332e      	adds	r3, #46	; 0x2e
 80126de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7ff fce4 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	3330      	adds	r3, #48	; 0x30
 80126ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7ff fcdd 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	22ff      	movs	r2, #255	; 0xff
 80126fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4618      	mov	r0, r3
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	0802f148 	.word	0x0802f148

0801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	8812      	ldrh	r2, [r2, #0]
 801271e:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	687a      	ldr	r2, [r7, #4]
 8012724:	68b9      	ldr	r1, [r7, #8]
 8012726:	4618      	mov	r0, r3
 8012728:	f008 ffcc 	bl	801b6c4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 801272c:	bf00      	nop
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	460b      	mov	r3, r1
 801273e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8012740:	4a06      	ldr	r2, [pc, #24]	; (801275c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	887a      	ldrh	r2, [r7, #2]
 801274a:	809a      	strh	r2, [r3, #4]
    }
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	0802e3dc 	.word	0x0802e3dc

08012760 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4618      	mov	r0, r3
 801276c:	2326      	movs	r3, #38	; 0x26
 801276e:	461a      	mov	r2, r3
 8012770:	2100      	movs	r1, #0
 8012772:	f019 f94b 	bl	802ba0c <memset>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4618      	mov	r0, r3
 801277a:	f7ff fee7 	bl	801254c <_ZN8touchgfx6WidgetC1Ev>
 801277e:	4a16      	ldr	r2, [pc, #88]	; (80127d8 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	601a      	str	r2, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3328      	adds	r3, #40	; 0x28
 8012788:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801278c:	4618      	mov	r0, r3
 801278e:	f7ff ffd1 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3330      	adds	r3, #48	; 0x30
 8012796:	2100      	movs	r1, #0
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff fc43 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	869a      	strh	r2, [r3, #52]	; 0x34
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	22ff      	movs	r2, #255	; 0xff
 80127a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2200      	movs	r2, #0
 80127b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2200      	movs	r2, #0
 80127c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	333c      	adds	r3, #60	; 0x3c
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 f8f2 	bl	80129b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	0802f050 	.word	0x0802f050

080127dc <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 80127dc:	b590      	push	{r4, r7, lr}
 80127de:	b087      	sub	sp, #28
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6178      	str	r0, [r7, #20]
 80127e4:	460b      	mov	r3, r1
 80127e6:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80127ee:	4611      	mov	r1, r2
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7ff fd38 	bl	8012266 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	3384      	adds	r3, #132	; 0x84
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	697c      	ldr	r4, [r7, #20]
 8012800:	463a      	mov	r2, r7
 8012802:	6979      	ldr	r1, [r7, #20]
 8012804:	4610      	mov	r0, r2
 8012806:	4798      	blx	r3
 8012808:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801280c:	463a      	mov	r2, r7
 801280e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012814:	bf00      	nop
 8012816:	371c      	adds	r7, #28
 8012818:	46bd      	mov	sp, r7
 801281a:	bd90      	pop	{r4, r7, pc}

0801281c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 801281c:	b590      	push	{r4, r7, lr}
 801281e:	b087      	sub	sp, #28
 8012820:	af00      	add	r7, sp, #0
 8012822:	6178      	str	r0, [r7, #20]
 8012824:	460b      	mov	r3, r1
 8012826:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 801282e:	4611      	mov	r1, r2
 8012830:	4618      	mov	r0, r3
 8012832:	f7ff fd27 	bl	8012284 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	3384      	adds	r3, #132	; 0x84
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	697c      	ldr	r4, [r7, #20]
 8012840:	463a      	mov	r2, r7
 8012842:	6979      	ldr	r1, [r7, #20]
 8012844:	4610      	mov	r0, r2
 8012846:	4798      	blx	r3
 8012848:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801284c:	463a      	mov	r2, r7
 801284e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012854:	bf00      	nop
 8012856:	371c      	adds	r7, #28
 8012858:	46bd      	mov	sp, r7
 801285a:	bd90      	pop	{r4, r7, pc}

0801285c <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff fbeb 	bl	8012042 <_ZN8touchgfx4RectC1Ev>
    }
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	460b      	mov	r3, r1
 801287e:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	78fa      	ldrb	r2, [r7, #3]
 8012884:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8012888:	bf00      	nop
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012896:	b085      	sub	sp, #20
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	460b      	mov	r3, r1
 801289e:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80128a0:	687e      	ldr	r6, [r7, #4]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	3334      	adds	r3, #52	; 0x34
 80128a8:	681c      	ldr	r4, [r3, #0]
 80128aa:	887d      	ldrh	r5, [r7, #2]
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f869 	bl	8012984 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 80128b2:	4603      	mov	r3, r0
 80128b4:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80128b6:	4b1d      	ldr	r3, [pc, #116]	; (801292c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d105      	bne.n	80128ca <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 80128be:	4b1c      	ldr	r3, [pc, #112]	; (8012930 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 80128c0:	4a1c      	ldr	r2, [pc, #112]	; (8012934 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 80128c2:	216c      	movs	r1, #108	; 0x6c
 80128c4:	481c      	ldr	r0, [pc, #112]	; (8012938 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 80128c6:	f019 f815 	bl	802b8f4 <__assert_func>
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	889a      	ldrh	r2, [r3, #4]
 80128d2:	4b1a      	ldr	r3, [pc, #104]	; (801293c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	bf34      	ite	cc
 80128da:	2301      	movcc	r3, #1
 80128dc:	2300      	movcs	r3, #0
 80128de:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d105      	bne.n	80128f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 80128e4:	4b16      	ldr	r3, [pc, #88]	; (8012940 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 80128e6:	4a13      	ldr	r2, [pc, #76]	; (8012934 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 80128e8:	216d      	movs	r1, #109	; 0x6d
 80128ea:	4813      	ldr	r0, [pc, #76]	; (8012938 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 80128ec:	f019 f802 	bl	802b8f4 <__assert_func>
 80128f0:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 80128f2:	4b14      	ldr	r3, [pc, #80]	; (8012944 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	4b0d      	ldr	r3, [pc, #52]	; (801292c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 80128f8:	6819      	ldr	r1, [r3, #0]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	889b      	ldrh	r3, [r3, #4]
 80128fe:	005b      	lsls	r3, r3, #1
 8012900:	440b      	add	r3, r1
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	4413      	add	r3, r2
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	322c      	adds	r2, #44	; 0x2c
 801290e:	6812      	ldr	r2, [r2, #0]
 8012910:	4618      	mov	r0, r3
 8012912:	4790      	blx	r2
 8012914:	4603      	mov	r3, r0
 8012916:	1aeb      	subs	r3, r5, r3
 8012918:	b29b      	uxth	r3, r3
 801291a:	b21b      	sxth	r3, r3
 801291c:	4619      	mov	r1, r3
 801291e:	4630      	mov	r0, r6
 8012920:	47a0      	blx	r4
    }
 8012922:	bf00      	nop
 8012924:	3714      	adds	r7, #20
 8012926:	46bd      	mov	sp, r7
 8012928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801292a:	bf00      	nop
 801292c:	2000b514 	.word	0x2000b514
 8012930:	0802dbf0 	.word	0x0802dbf0
 8012934:	0802dc34 	.word	0x0802dc34
 8012938:	0802dc70 	.word	0x0802dc70
 801293c:	2000b518 	.word	0x2000b518
 8012940:	0802dcb4 	.word	0x0802dcb4
 8012944:	2000b51c 	.word	0x2000b51c

08012948 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	807b      	strh	r3, [r7, #2]
 8012954:	4613      	mov	r3, r2
 8012956:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	3330      	adds	r3, #48	; 0x30
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012966:	4610      	mov	r0, r2
 8012968:	4798      	blx	r3
        setBaselineY(baselineY);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	3364      	adds	r3, #100	; 0x64
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012976:	4611      	mov	r1, r2
 8012978:	6878      	ldr	r0, [r7, #4]
 801297a:	4798      	blx	r3
    }
 801297c:	bf00      	nop
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3328      	adds	r3, #40	; 0x28
    }
 8012990:	4618      	mov	r0, r3
 8012992:	370c      	adds	r7, #12
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80129a4:	2300      	movs	r3, #0
    }
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr

080129b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 80129b2:	b580      	push	{r7, lr}
 80129b4:	b084      	sub	sp, #16
 80129b6:	af02      	add	r7, sp, #8
 80129b8:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f04f 33ff 	mov.w	r3, #4294967295
 80129c0:	9300      	str	r3, [sp, #0]
 80129c2:	f04f 33ff 	mov.w	r3, #4294967295
 80129c6:	2200      	movs	r2, #0
 80129c8:	2100      	movs	r1, #0
 80129ca:	f7ff fb51 	bl	8012070 <_ZN8touchgfx4RectC1Essss>
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	609a      	str	r2, [r3, #8]
        {
        }
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4618      	mov	r0, r3
 80129d8:	3708      	adds	r7, #8
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
	...

080129e0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	4a08      	ldr	r2, [pc, #32]	; (8012a0c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	3328      	adds	r3, #40	; 0x28
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe fc5c 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7ff fdb8 	bl	8012570 <_ZN8touchgfx6WidgetD1Ev>
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	0802f050 	.word	0x0802f050

08012a10 <_ZN8touchgfx8TextAreaD0Ev>:
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f7ff ffe1 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012a1e:	2148      	movs	r1, #72	; 0x48
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f018 ff38 	bl	802b896 <_ZdlPvj>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ff fe90 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8012a40:	4a03      	ldr	r2, [pc, #12]	; (8012a50 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	601a      	str	r2, [r3, #0]
    {
    }
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3708      	adds	r7, #8
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	0802f1bc 	.word	0x0802f1bc

08012a54 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
 8012a5c:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f7ff ffa7 	bl	80129b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	4a05      	ldr	r2, [pc, #20]	; (8012a8c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7ff ffaf 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4618      	mov	r0, r3
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	0802f1bc 	.word	0x0802f1bc

08012a90 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7ff ffe7 	bl	8012a6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012a9e:	2148      	movs	r1, #72	; 0x48
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f018 fef8 	bl	802b896 <_ZdlPvj>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ff ffb8 	bl	8012a30 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012ac0:	4a05      	ldr	r2, [pc, #20]	; (8012ad8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	601a      	str	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	0802e61c 	.word	0x0802e61c

08012adc <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	683a      	ldr	r2, [r7, #0]
 8012aea:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8012aec:	bf00      	nop
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 8012b1a:	6839      	ldr	r1, [r7, #0]
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7ff ffdd 	bl	8012adc <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 8012b22:	bf00      	nop
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	2326      	movs	r3, #38	; 0x26
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	2100      	movs	r1, #0
 8012b40:	f018 ff64 	bl	802ba0c <memset>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fd00 	bl	801254c <_ZN8touchgfx6WidgetC1Ev>
 8012b4c:	4a09      	ldr	r2, [pc, #36]	; (8012b74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	683a      	ldr	r2, [r7, #0]
 8012b56:	8812      	ldrh	r2, [r2, #0]
 8012b58:	84da      	strh	r2, [r3, #38]	; 0x26
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	22ff      	movs	r2, #255	; 0xff
 8012b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 8012b62:	6839      	ldr	r1, [r7, #0]
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f008 ff33 	bl	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3708      	adds	r7, #8
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}
 8012b74:	0802f24c 	.word	0x0802f24c

08012b78 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	4a05      	ldr	r2, [pc, #20]	; (8012b98 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	601a      	str	r2, [r3, #0]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7ff fcf1 	bl	8012570 <_ZN8touchgfx6WidgetD1Ev>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4618      	mov	r0, r3
 8012b92:	3708      	adds	r7, #8
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	0802f24c 	.word	0x0802f24c

08012b9c <_ZN8touchgfx5ImageD0Ev>:
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7ff ffe7 	bl	8012b78 <_ZN8touchgfx5ImageD1Ev>
 8012baa:	212c      	movs	r1, #44	; 0x2c
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f018 fe72 	bl	802b896 <_ZdlPvj>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <_ZN8touchgfx13AnimatedImageC1ERKh>:
     *                        Higher value results in a slower animation.
     *
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
 8012bbc:	b590      	push	{r4, r7, lr}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 8012bc6:	687c      	ldr	r4, [r7, #4]
 8012bc8:	f107 030c 	add.w	r3, r7, #12
 8012bcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ff fa6d 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8012bd6:	f107 030c 	add.w	r3, r7, #12
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4620      	mov	r0, r4
 8012bde:	f7ff ffa5 	bl	8012b2c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012be2:	4a14      	ldr	r2, [pc, #80]	; (8012c34 <_ZN8touchgfx13AnimatedImageC1ERKh+0x78>)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	601a      	str	r2, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	2200      	movs	r2, #0
 8012bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bf4:	861a      	strh	r2, [r3, #48]	; 0x30
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bfc:	865a      	strh	r2, [r3, #50]	; 0x32
          updateTicksInterval(updateInterval),
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	781a      	ldrb	r2, [r3, #0]
          running(false)
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2200      	movs	r2, #0
 8012c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    {
    }
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3714      	adds	r7, #20
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd90      	pop	{r4, r7, pc}
 8012c32:	bf00      	nop
 8012c34:	0802efd4 	.word	0x0802efd4

08012c38 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	4a05      	ldr	r2, [pc, #20]	; (8012c58 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	601a      	str	r2, [r3, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fbf5 	bl	8012438 <_ZN8touchgfx6ScreenD1Ev>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	0802e5e8 	.word	0x0802e5e8

08012c5c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff ffe7 	bl	8012c38 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012c6a:	2140      	movs	r1, #64	; 0x40
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f018 fe12 	bl	802b896 <_ZdlPvj>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	4a90      	ldr	r2, [pc, #576]	; (8012ec8 <_ZN12MainViewBaseD1Ev+0x24c>)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	601a      	str	r2, [r3, #0]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8012c90:	4618      	mov	r0, r3
 8012c92:	f003 fbb3 	bl	80163fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7ff ff6b 	bl	8012b78 <_ZN8touchgfx5ImageD1Ev>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f003 fc51 	bl	8016550 <_ZN8touchgfx13AnimatedImageD1Ev>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f003 fc4b 	bl	8016550 <_ZN8touchgfx13AnimatedImageD1Ev>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f003 fc23 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f003 fbb7 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f003 fbb1 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f003 fbab 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f003 fba5 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f003 fb9f 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f003 fb99 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8012d14:	4618      	mov	r0, r3
 8012d16:	f003 fb93 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8012d20:	4618      	mov	r0, r3
 8012d22:	f003 fb8d 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f003 fb87 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f003 fb81 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8012d44:	4618      	mov	r0, r3
 8012d46:	f003 fbe1 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8012d50:	4618      	mov	r0, r3
 8012d52:	f003 fbdb 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f003 fbd5 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f003 fbcf 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8012d74:	4618      	mov	r0, r3
 8012d76:	f003 fbc9 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8012d80:	4618      	mov	r0, r3
 8012d82:	f003 fbc3 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f003 fbbd 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7ff fe21 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7ff fe1b 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7ff fe15 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff fe0f 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7ff fe09 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff fe03 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fdfd 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff fdf7 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7ff fdf1 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7ff fdeb 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7ff fde5 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff fddf 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7ff fdd9 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7ff fdd3 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7ff fdcd 	bl	80129e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f003 fb5d 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f003 fb57 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8012e64:	4618      	mov	r0, r3
 8012e66:	f003 fb51 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8012e70:	4618      	mov	r0, r3
 8012e72:	f003 fb4b 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f003 fb45 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f003 fb3f 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	33d0      	adds	r3, #208	; 0xd0
 8012e92:	4618      	mov	r0, r3
 8012e94:	f003 fb3a 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3398      	adds	r3, #152	; 0x98
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f003 fb35 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	336c      	adds	r3, #108	; 0x6c
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f003 fb0e 	bl	80164c8 <_ZN8touchgfx3BoxD1Ev>
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	3340      	adds	r3, #64	; 0x40
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f003 fb09 	bl	80164c8 <_ZN8touchgfx3BoxD1Ev>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff febd 	bl	8012c38 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	0802e57c 	.word	0x0802e57c

08012ecc <_ZN12MainViewBaseD0Ev>:
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff fed1 	bl	8012c7c <_ZN12MainViewBaseD1Ev>
 8012eda:	f44f 6147 	mov.w	r1, #3184	; 0xc70
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f018 fcd9 	bl	802b896 <_ZdlPvj>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <_ZN12MainViewBase3SPREv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SPR()
 8012eee:	b480      	push	{r7}
 8012ef0:	b083      	sub	sp, #12
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012ef6:	bf00      	nop
 8012ef8:	370c      	adds	r7, #12
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr

08012f02 <_ZN12MainViewBase3PDZEv>:

    virtual void PDZ()
 8012f02:	b480      	push	{r7}
 8012f04:	b083      	sub	sp, #12
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f0a:	bf00      	nop
 8012f0c:	370c      	adds	r7, #12
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <_ZN12MainViewBase3PCOEv>:

    virtual void PCO()
 8012f16:	b480      	push	{r7}
 8012f18:	b083      	sub	sp, #12
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f1e:	bf00      	nop
 8012f20:	370c      	adds	r7, #12
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr

08012f2a <_ZN12MainViewBase4PCWUEv>:

    virtual void PCWU()
 8012f2a:	b480      	push	{r7}
 8012f2c:	b083      	sub	sp, #12
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f32:	bf00      	nop
 8012f34:	370c      	adds	r7, #12
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <_ZN12MainViewBase3Z3DEv>:

    virtual void Z3D()
 8012f3e:	b480      	push	{r7}
 8012f40:	b083      	sub	sp, #12
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f46:	bf00      	nop
 8012f48:	370c      	adds	r7, #12
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f50:	4770      	bx	lr

08012f52 <_ZN12MainViewBase3GR1Ev>:

    virtual void GR1()
 8012f52:	b480      	push	{r7}
 8012f54:	b083      	sub	sp, #12
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f5a:	bf00      	nop
 8012f5c:	370c      	adds	r7, #12
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <_ZN12MainViewBase3GR2Ev>:

    virtual void GR2()
 8012f66:	b480      	push	{r7}
 8012f68:	b083      	sub	sp, #12
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f6e:	bf00      	nop
 8012f70:	370c      	adds	r7, #12
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr

08012f7a <_ZN12MainViewBase6ZEWZRDEv>:

    virtual void ZEWZRD()
 8012f7a:	b480      	push	{r7}
 8012f7c:	b083      	sub	sp, #12
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8012f82:	bf00      	nop
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
	...

08012f90 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	4a05      	ldr	r2, [pc, #20]	; (8012fb0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff fb6d 	bl	8012680 <_ZN8touchgfx14AbstractButtonD1Ev>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3708      	adds	r7, #8
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}
 8012fb0:	0802f148 	.word	0x0802f148

08012fb4 <_ZN8touchgfx6ButtonD0Ev>:
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff ffe7 	bl	8012f90 <_ZN8touchgfx6ButtonD1Ev>
 8012fc2:	2134      	movs	r1, #52	; 0x34
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f018 fc66 	bl	802b896 <_ZdlPvj>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7ff fb70 	bl	80126c4 <_ZN8touchgfx6ButtonC1Ev>
 8012fe4:	4a07      	ldr	r2, [pc, #28]	; (8013004 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	601a      	str	r2, [r3, #0]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	3334      	adds	r3, #52	; 0x34
 8012fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff f85c 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	0802ef60 	.word	0x0802ef60

08013008 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8013008:	b590      	push	{r4, r7, lr}
 801300a:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
 801300e:	af02      	add	r7, sp, #8
 8013010:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013014:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013018:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 801301a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801301e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4618      	mov	r0, r3
 8013026:	f003 f983 	bl	8016330 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 801302a:	4ae6      	ldr	r2, [pc, #920]	; (80133c4 <_ZN12MainViewBaseC1Ev+0x3bc>)
 801302c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013030:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	601a      	str	r2, [r3, #0]
 8013038:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801303c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	3340      	adds	r3, #64	; 0x40
 8013044:	4618      	mov	r0, r3
 8013046:	f7ff fab5 	bl	80125b4 <_ZN8touchgfx3BoxC1Ev>
 801304a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801304e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	336c      	adds	r3, #108	; 0x6c
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff faac 	bl	80125b4 <_ZN8touchgfx3BoxC1Ev>
 801305c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013060:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	3398      	adds	r3, #152	; 0x98
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff ffb3 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 801306e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013072:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	33d0      	adds	r3, #208	; 0xd0
 801307a:	4618      	mov	r0, r3
 801307c:	f7ff ffaa 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013080:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013084:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801308e:	4618      	mov	r0, r3
 8013090:	f7ff ffa0 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013094:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013098:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7ff ff96 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80130a8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80130ac:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff ff8c 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80130bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80130c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff ff82 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80130d0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80130d4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80130de:	4618      	mov	r0, r3
 80130e0:	f7ff ff78 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80130e4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80130e8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7ff ff6e 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80130f8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80130fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff fb2a 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 801310c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013110:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 801311a:	4618      	mov	r0, r3
 801311c:	f7ff fb20 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013120:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013124:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 801312e:	4618      	mov	r0, r3
 8013130:	f7ff fb16 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013134:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013138:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff fb0c 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013148:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801314c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff fb02 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 801315c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013160:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 801316a:	4618      	mov	r0, r3
 801316c:	f7ff faf8 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013170:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013174:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff faee 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013184:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013188:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff fae4 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013198:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801319c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7ff fada 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 80131ac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80131b0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7ff fad0 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 80131c0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80131c4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7ff fac6 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 80131d4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80131d8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7ff fabc 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 80131e8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80131ec:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7ff fab2 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 80131fc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013200:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 801320a:	4618      	mov	r0, r3
 801320c:	f7ff faa8 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013210:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013214:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff fa9e 	bl	8012760 <_ZN8touchgfx8TextAreaC1Ev>
 8013224:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013228:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fece 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013238:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801323c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8013246:	4618      	mov	r0, r3
 8013248:	f7ff fec4 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 801324c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013250:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801325a:	4618      	mov	r0, r3
 801325c:	f7ff feba 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013260:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013264:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 801326e:	4618      	mov	r0, r3
 8013270:	f7ff feb0 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013274:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013278:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8013282:	4618      	mov	r0, r3
 8013284:	f7ff fea6 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 8013288:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801328c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8013296:	4618      	mov	r0, r3
 8013298:	f7ff fe9c 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 801329c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80132a0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff fe92 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 80132b0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80132b4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80132be:	4618      	mov	r0, r3
 80132c0:	f7ff fbf6 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132c4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80132c8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f603 0364 	addw	r3, r3, #2148	; 0x864
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7ff fbec 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132d8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80132dc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7ff fbe2 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80132ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80132f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7ff fbd8 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013300:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013304:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff fbce 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013314:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013318:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff fbc4 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013328:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801332c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8013336:	4618      	mov	r0, r3
 8013338:	f7ff fbba 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801333c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013340:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 801334a:	4618      	mov	r0, r3
 801334c:	f7ff fbb0 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013350:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013354:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 801335e:	4618      	mov	r0, r3
 8013360:	f7ff fba6 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013364:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013368:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff fb9c 	bl	8012ab0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013378:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801337c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8013386:	4618      	mov	r0, r3
 8013388:	f7ff fe24 	bl	8012fd4 <_ZN8touchgfx12ToggleButtonC1Ev>
 801338c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013390:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f603 3248 	addw	r2, r3, #2888	; 0xb48
    AnimatedImage(const uint8_t& updateInterval = 1)
 801339a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801339e:	f2a3 335e 	subw	r3, r3, #862	; 0x35e
 80133a2:	2101      	movs	r1, #1
 80133a4:	7019      	strb	r1, [r3, #0]
 80133a6:	f107 0382 	add.w	r3, r7, #130	; 0x82
 80133aa:	4619      	mov	r1, r3
 80133ac:	4610      	mov	r0, r2
 80133ae:	f7ff fc05 	bl	8012bbc <_ZN8touchgfx13AnimatedImageC1ERKh>
 80133b2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80133b6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f603 3284 	addw	r2, r3, #2948	; 0xb84
 80133c0:	e002      	b.n	80133c8 <_ZN12MainViewBaseC1Ev+0x3c0>
 80133c2:	bf00      	nop
 80133c4:	0802e57c 	.word	0x0802e57c
 80133c8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80133cc:	f2a3 335d 	subw	r3, r3, #861	; 0x35d
 80133d0:	2101      	movs	r1, #1
 80133d2:	7019      	strb	r1, [r3, #0]
 80133d4:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80133d8:	4619      	mov	r1, r3
 80133da:	4610      	mov	r0, r2
 80133dc:	f7ff fbee 	bl	8012bbc <_ZN8touchgfx13AnimatedImageC1ERKh>
 80133e0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80133e4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f503 643c 	add.w	r4, r3, #3008	; 0xbc0
 80133ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80133f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe fe5a 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80133fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013400:	4619      	mov	r1, r3
 8013402:	4620      	mov	r0, r4
 8013404:	f7ff fb92 	bl	8012b2c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013408:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801340c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	f503 6046 	add.w	r0, r3, #3168	; 0xc60
 8013416:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801341a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801341e:	4aea      	ldr	r2, [pc, #936]	; (80137c8 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013426:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 801342a:	2200      	movs	r2, #0
 801342c:	605a      	str	r2, [r3, #4]
 801342e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013432:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8013436:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801343a:	f5a2 7173 	sub.w	r1, r2, #972	; 0x3cc
 801343e:	cb0c      	ldmia	r3, {r2, r3}
 8013440:	6809      	ldr	r1, [r1, #0]
 8013442:	f002 ff9b 	bl	801637c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 800, 480);
 8013446:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801344a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8013454:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	f44f 7348 	mov.w	r3, #800	; 0x320
 801345e:	2200      	movs	r2, #0
 8013460:	2100      	movs	r1, #0
 8013462:	f7fe fea3 	bl	80121ac <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8013466:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801346a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013474:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013478:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 801347c:	2200      	movs	r2, #0
 801347e:	701a      	strb	r2, [r3, #0]
 8013480:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013484:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8013488:	2200      	movs	r2, #0
 801348a:	701a      	strb	r2, [r3, #0]
 801348c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013490:	f2a3 1395 	subw	r3, r3, #405	; 0x195
 8013494:	2200      	movs	r2, #0
 8013496:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8013498:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801349c:	f2a3 1393 	subw	r3, r3, #403	; 0x193
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	041b      	lsls	r3, r3, #16
 80134a4:	461a      	mov	r2, r3
 80134a6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80134aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	021b      	lsls	r3, r3, #8
 80134b2:	431a      	orrs	r2, r3
 80134b4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80134b8:	f2a3 1395 	subw	r3, r3, #405	; 0x195
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	4313      	orrs	r3, r2
 80134c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80134c4:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fe fdaa 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80134d0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80134d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4619      	mov	r1, r3
 80134dc:	4620      	mov	r0, r4
 80134de:	f7ff f88d 	bl	80125fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, -1, 800, 480);
 80134e2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80134e6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80134f0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80134f4:	9300      	str	r3, [sp, #0]
 80134f6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80134fa:	f04f 32ff 	mov.w	r2, #4294967295
 80134fe:	2100      	movs	r1, #0
 8013500:	f7fe fe54 	bl	80121ac <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(112, 44, 64));
 8013504:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013508:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8013512:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013516:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801351a:	2270      	movs	r2, #112	; 0x70
 801351c:	701a      	strb	r2, [r3, #0]
 801351e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013522:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 8013526:	222c      	movs	r2, #44	; 0x2c
 8013528:	701a      	strb	r2, [r3, #0]
 801352a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801352e:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 8013532:	2240      	movs	r2, #64	; 0x40
 8013534:	701a      	strb	r2, [r3, #0]
 8013536:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801353a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	041b      	lsls	r3, r3, #16
 8013542:	461a      	mov	r2, r3
 8013544:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013548:	f2a3 1391 	subw	r3, r3, #401	; 0x191
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	021b      	lsls	r3, r3, #8
 8013550:	431a      	orrs	r2, r3
 8013552:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013556:	f5a3 73c9 	sub.w	r3, r3, #402	; 0x192
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	4313      	orrs	r3, r2
 801355e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013562:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013566:	4611      	mov	r1, r2
 8013568:	4618      	mov	r0, r3
 801356a:	f7fe fd5b 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801356e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013572:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	4619      	mov	r1, r3
 801357a:	4620      	mov	r0, r4
 801357c:	f7ff f83e 	bl	80125fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    toggleButton1.setXY(139, 19);
 8013580:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013584:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	3398      	adds	r3, #152	; 0x98
 801358c:	2213      	movs	r2, #19
 801358e:	218b      	movs	r1, #139	; 0x8b
 8013590:	4618      	mov	r0, r3
 8013592:	f7fe fe4a 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 8013596:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801359a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80135a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80135a8:	2107      	movs	r1, #7
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7fe fd80 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80135b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80135b4:	2109      	movs	r1, #9
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fe fd7a 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80135bc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80135c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80135c4:	4619      	mov	r1, r3
 80135c6:	4620      	mov	r0, r4
 80135c8:	f7ff f8a0 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 80135cc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80135d0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80135da:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80135de:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80135e8:	4619      	mov	r1, r3
 80135ea:	4610      	mov	r0, r2
 80135ec:	f7ff f83a 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_1.setXY(139, 69);
 80135f0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80135f4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	33d0      	adds	r3, #208	; 0xd0
 80135fc:	2245      	movs	r2, #69	; 0x45
 80135fe:	218b      	movs	r1, #139	; 0x8b
 8013600:	4618      	mov	r0, r3
 8013602:	f7fe fe12 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_1.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 8013606:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801360a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8013614:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013618:	2107      	movs	r1, #7
 801361a:	4618      	mov	r0, r3
 801361c:	f7fe fd48 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013620:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013624:	2109      	movs	r1, #9
 8013626:	4618      	mov	r0, r3
 8013628:	f7fe fd42 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 801362c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013630:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013634:	4619      	mov	r1, r3
 8013636:	4620      	mov	r0, r4
 8013638:	f7ff f868 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_1.setAction(buttonCallback);
 801363c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013640:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 801364a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801364e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8013658:	4619      	mov	r1, r3
 801365a:	4610      	mov	r0, r2
 801365c:	f7ff f802 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_2.setXY(139, 119);
 8013660:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013664:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801366e:	2277      	movs	r2, #119	; 0x77
 8013670:	218b      	movs	r1, #139	; 0x8b
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe fdd9 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_2.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 8013678:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801367c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8013686:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801368a:	2107      	movs	r1, #7
 801368c:	4618      	mov	r0, r3
 801368e:	f7fe fd0f 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013692:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013696:	2109      	movs	r1, #9
 8013698:	4618      	mov	r0, r3
 801369a:	f7fe fd09 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 801369e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80136a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80136a6:	4619      	mov	r1, r3
 80136a8:	4620      	mov	r0, r4
 80136aa:	f7ff f82f 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_2.setAction(buttonCallback);
 80136ae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80136b2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80136bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80136c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80136ca:	4619      	mov	r1, r3
 80136cc:	4610      	mov	r0, r2
 80136ce:	f7fe ffc9 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_3.setXY(139, 169);
 80136d2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80136d6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80136e0:	22a9      	movs	r2, #169	; 0xa9
 80136e2:	218b      	movs	r1, #139	; 0x8b
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fe fda0 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_3.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 80136ea:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80136ee:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80136f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80136fc:	2107      	movs	r1, #7
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fe fcd6 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013704:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013708:	2109      	movs	r1, #9
 801370a:	4618      	mov	r0, r3
 801370c:	f7fe fcd0 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013710:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8013714:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013718:	4619      	mov	r1, r3
 801371a:	4620      	mov	r0, r4
 801371c:	f7fe fff6 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_3.setAction(buttonCallback);
 8013720:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013724:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 801372e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013732:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 801373c:	4619      	mov	r1, r3
 801373e:	4610      	mov	r0, r2
 8013740:	f7fe ff90 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_4.setXY(139, 219);
 8013744:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013748:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013752:	22db      	movs	r2, #219	; 0xdb
 8013754:	218b      	movs	r1, #139	; 0x8b
 8013756:	4618      	mov	r0, r3
 8013758:	f7fe fd67 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_4.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 801375c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013760:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 801376a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801376e:	2107      	movs	r1, #7
 8013770:	4618      	mov	r0, r3
 8013772:	f7fe fc9d 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013776:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801377a:	2109      	movs	r1, #9
 801377c:	4618      	mov	r0, r3
 801377e:	f7fe fc97 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013782:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013786:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801378a:	4619      	mov	r1, r3
 801378c:	4620      	mov	r0, r4
 801378e:	f7fe ffbd 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_4.setAction(buttonCallback);
 8013792:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013796:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80137a0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80137a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 80137ae:	4619      	mov	r1, r3
 80137b0:	4610      	mov	r0, r2
 80137b2:	f7fe ff57 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_5.setXY(139, 269);
 80137b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80137ba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80137c4:	e002      	b.n	80137cc <_ZN12MainViewBaseC1Ev+0x7c4>
 80137c6:	bf00      	nop
 80137c8:	08016255 	.word	0x08016255
 80137cc:	f240 120d 	movw	r2, #269	; 0x10d
 80137d0:	218b      	movs	r1, #139	; 0x8b
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fe fd29 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_5.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 80137d8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80137dc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80137e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80137ea:	2107      	movs	r1, #7
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7fe fc5f 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80137f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80137f6:	2109      	movs	r1, #9
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fe fc59 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80137fe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8013806:	4619      	mov	r1, r3
 8013808:	4620      	mov	r0, r4
 801380a:	f7fe ff7f 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_5.setAction(buttonCallback);
 801380e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013812:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 801381c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013820:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 801382a:	4619      	mov	r1, r3
 801382c:	4610      	mov	r0, r2
 801382e:	f7fe ff19 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_6.setXY(139, 319);
 8013832:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013836:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013840:	f240 123f 	movw	r2, #319	; 0x13f
 8013844:	218b      	movs	r1, #139	; 0x8b
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe fcef 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_6.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 801384c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013850:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f503 74f4 	add.w	r4, r3, #488	; 0x1e8
 801385a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801385e:	2107      	movs	r1, #7
 8013860:	4618      	mov	r0, r3
 8013862:	f7fe fc25 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013866:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801386a:	2109      	movs	r1, #9
 801386c:	4618      	mov	r0, r3
 801386e:	f7fe fc1f 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8013872:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8013876:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801387a:	4619      	mov	r1, r3
 801387c:	4620      	mov	r0, r4
 801387e:	f7fe ff45 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_6.setAction(buttonCallback);
 8013882:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013886:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8013890:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013894:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 801389e:	4619      	mov	r1, r3
 80138a0:	4610      	mov	r0, r2
 80138a2:	f7fe fedf 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1_7.setXY(139, 369);
 80138a6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80138aa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80138b4:	f240 1271 	movw	r2, #369	; 0x171
 80138b8:	218b      	movs	r1, #139	; 0x8b
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fe fcb5 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_7.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_TOGGLE_BUTTON_00_ID), touchgfx::Bitmap(BITMAP_ON_TOGGLE_BUTTON_SELECTED_00_ID));
 80138c0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80138c4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f503 7408 	add.w	r4, r3, #544	; 0x220
 80138ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80138d2:	2107      	movs	r1, #7
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7fe fbeb 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80138da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80138de:	2109      	movs	r1, #9
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fe fbe5 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 80138e6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80138ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80138ee:	4619      	mov	r1, r3
 80138f0:	4620      	mov	r0, r4
 80138f2:	f7fe ff0b 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1_7.setAction(buttonCallback);
 80138f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80138fa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8013904:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013908:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f503 6346 	add.w	r3, r3, #3168	; 0xc60
 8013912:	4619      	mov	r1, r3
 8013914:	4610      	mov	r0, r2
 8013916:	f7fe fea5 	bl	8012664 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(13, 32);
 801391a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801391e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8013928:	2220      	movs	r2, #32
 801392a:	210d      	movs	r1, #13
 801392c:	4618      	mov	r0, r3
 801392e:	f7fe fc7c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8013932:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013936:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8013940:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013944:	f2a3 138d 	subw	r3, r3, #397	; 0x18d
 8013948:	2272      	movs	r2, #114	; 0x72
 801394a:	701a      	strb	r2, [r3, #0]
 801394c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013950:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 8013954:	22b0      	movs	r2, #176	; 0xb0
 8013956:	701a      	strb	r2, [r3, #0]
 8013958:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801395c:	f2a3 138f 	subw	r3, r3, #399	; 0x18f
 8013960:	22f0      	movs	r2, #240	; 0xf0
 8013962:	701a      	strb	r2, [r3, #0]
 8013964:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013968:	f2a3 138d 	subw	r3, r3, #397	; 0x18d
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	041b      	lsls	r3, r3, #16
 8013970:	461a      	mov	r2, r3
 8013972:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013976:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	021b      	lsls	r3, r3, #8
 801397e:	431a      	orrs	r2, r3
 8013980:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013984:	f2a3 138f 	subw	r3, r3, #399	; 0x18f
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	4313      	orrs	r3, r2
 801398c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013990:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013994:	4611      	mov	r1, r2
 8013996:	4618      	mov	r0, r3
 8013998:	f7fe fb44 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801399c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139a0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	461a      	mov	r2, r3
 80139a8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139ac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80139b0:	601c      	str	r4, [r3, #0]
 80139b2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139b6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80139ba:	601a      	str	r2, [r3, #0]
        color = newColor;
 80139bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80139ca:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 80139ce:	6812      	ldr	r2, [r2, #0]
 80139d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80139d2:	bf00      	nop
    textArea1.setLinespacing(0);
 80139d4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139d8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80139e2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80139ea:	601a      	str	r2, [r3, #0]
 80139ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139f0:	f5a3 73c3 	sub.w	r3, r3, #390	; 0x186
 80139f4:	2200      	movs	r2, #0
 80139f6:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80139f8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80139fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013a06:	f5a2 72c3 	sub.w	r2, r2, #390	; 0x186
 8013a0a:	8812      	ldrh	r2, [r2, #0]
 8013a0c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013a0e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013a12:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	3384      	adds	r3, #132	; 0x84
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013a22:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8013a26:	6814      	ldr	r4, [r2, #0]
 8013a28:	4638      	mov	r0, r7
 8013a2a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013a2e:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8013a32:	6811      	ldr	r1, [r2, #0]
 8013a34:	4798      	blx	r3
 8013a36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013a3a:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8013a3e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013a48:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HC40));
 8013a4a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013a4e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8013a58:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fe fe68 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8013a64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013a68:	4619      	mov	r1, r3
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f007 fdd8 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013a70:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fd fc1b 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_1.setXY(10, 77);
 8013a7a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013a7e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013a88:	224d      	movs	r2, #77	; 0x4d
 8013a8a:	210a      	movs	r1, #10
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7fe fbcc 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_1.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8013a92:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013a96:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8013aa0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013aa4:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 8013aa8:	2272      	movs	r2, #114	; 0x72
 8013aaa:	701a      	strb	r2, [r3, #0]
 8013aac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ab0:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8013ab4:	22b0      	movs	r2, #176	; 0xb0
 8013ab6:	701a      	strb	r2, [r3, #0]
 8013ab8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013abc:	f2a3 137f 	subw	r3, r3, #383	; 0x17f
 8013ac0:	22f0      	movs	r2, #240	; 0xf0
 8013ac2:	701a      	strb	r2, [r3, #0]
 8013ac4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ac8:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	041b      	lsls	r3, r3, #16
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ad6:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	021b      	lsls	r3, r3, #8
 8013ade:	431a      	orrs	r2, r3
 8013ae0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ae4:	f2a3 137f 	subw	r3, r3, #383	; 0x17f
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013af0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013af4:	4611      	mov	r1, r2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fe fa94 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8013afc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	461a      	mov	r2, r3
 8013b08:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b0c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8013b10:	601c      	str	r4, [r3, #0]
 8013b12:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b16:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8013b1a:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013b1c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b20:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013b2a:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8013b2e:	6812      	ldr	r2, [r2, #0]
 8013b30:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013b32:	bf00      	nop
    textArea1_1.setLinespacing(0);
 8013b34:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b38:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	f503 7228 	add.w	r2, r3, #672	; 0x2a0
 8013b42:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b46:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013b4a:	601a      	str	r2, [r3, #0]
 8013b4c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b50:	f5a3 73bb 	sub.w	r3, r3, #374	; 0x176
 8013b54:	2200      	movs	r2, #0
 8013b56:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8013b58:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013b66:	f5a2 72bb 	sub.w	r2, r2, #374	; 0x176
 8013b6a:	8812      	ldrh	r2, [r2, #0]
 8013b6c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013b6e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b72:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	3384      	adds	r3, #132	; 0x84
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013b82:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8013b86:	6814      	ldr	r4, [r2, #0]
 8013b88:	4638      	mov	r0, r7
 8013b8a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013b8e:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 8013b92:	6811      	ldr	r1, [r2, #0]
 8013b94:	4798      	blx	r3
 8013b96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013b9a:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8013b9e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013ba2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ba4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013ba8:	bf00      	nop
    textArea1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5UGX));
 8013baa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013bae:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f503 7428 	add.w	r4, r3, #672	; 0x2a0
 8013bb8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013bbc:	2101      	movs	r1, #1
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7fe fdb8 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8013bc4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013bc8:	4619      	mov	r1, r3
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f007 fd28 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013bd0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7fd fb6b 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_2.setXY(10, 127);
 8013bda:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013bde:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8013be8:	227f      	movs	r2, #127	; 0x7f
 8013bea:	210a      	movs	r1, #10
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7fe fb1c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_2.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8013bf2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013bf6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8013c00:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c04:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8013c08:	2272      	movs	r2, #114	; 0x72
 8013c0a:	701a      	strb	r2, [r3, #0]
 8013c0c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c10:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8013c14:	22b0      	movs	r2, #176	; 0xb0
 8013c16:	701a      	strb	r2, [r3, #0]
 8013c18:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c1c:	f2a3 136f 	subw	r3, r3, #367	; 0x16f
 8013c20:	22f0      	movs	r2, #240	; 0xf0
 8013c22:	701a      	strb	r2, [r3, #0]
 8013c24:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c28:	f2a3 136d 	subw	r3, r3, #365	; 0x16d
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	041b      	lsls	r3, r3, #16
 8013c30:	461a      	mov	r2, r3
 8013c32:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c36:	f5a3 73b7 	sub.w	r3, r3, #366	; 0x16e
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	021b      	lsls	r3, r3, #8
 8013c3e:	431a      	orrs	r2, r3
 8013c40:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c44:	f2a3 136f 	subw	r3, r3, #367	; 0x16f
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013c50:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8013c54:	4611      	mov	r1, r2
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7fe f9e4 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8013c5c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	461a      	mov	r2, r3
 8013c68:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c6c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8013c70:	601c      	str	r4, [r3, #0]
 8013c72:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c76:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8013c7a:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013c7c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c80:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013c8a:	f5a2 725b 	sub.w	r2, r2, #876	; 0x36c
 8013c8e:	6812      	ldr	r2, [r2, #0]
 8013c90:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013c92:	bf00      	nop
    textArea1_2.setLinespacing(0);
 8013c94:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013c98:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f503 723a 	add.w	r2, r3, #744	; 0x2e8
 8013ca2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ca6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013caa:	601a      	str	r2, [r3, #0]
 8013cac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013cb0:	f5a3 73b3 	sub.w	r3, r3, #358	; 0x166
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8013cb8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013cbc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013cc6:	f5a2 72b3 	sub.w	r2, r2, #358	; 0x166
 8013cca:	8812      	ldrh	r2, [r2, #0]
 8013ccc:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013cce:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013cd2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	3384      	adds	r3, #132	; 0x84
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013ce2:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8013ce6:	6814      	ldr	r4, [r2, #0]
 8013ce8:	4638      	mov	r0, r7
 8013cea:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013cee:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8013cf2:	6811      	ldr	r1, [r2, #0]
 8013cf4:	4798      	blx	r3
 8013cf6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013cfa:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8013cfe:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013d08:	bf00      	nop
    textArea1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VDQ3));
 8013d0a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d0e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8013d18:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013d1c:	2102      	movs	r1, #2
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7fe fd08 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8013d24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013d28:	4619      	mov	r1, r3
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f007 fc78 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013d30:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fd fabb 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_3.setXY(10, 177);
 8013d3a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d3e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8013d48:	22b1      	movs	r2, #177	; 0xb1
 8013d4a:	210a      	movs	r1, #10
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7fe fa6c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_3.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8013d52:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d56:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8013d60:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d64:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8013d68:	2272      	movs	r2, #114	; 0x72
 8013d6a:	701a      	strb	r2, [r3, #0]
 8013d6c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d70:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
 8013d74:	22b0      	movs	r2, #176	; 0xb0
 8013d76:	701a      	strb	r2, [r3, #0]
 8013d78:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d7c:	f2a3 135f 	subw	r3, r3, #351	; 0x15f
 8013d80:	22f0      	movs	r2, #240	; 0xf0
 8013d82:	701a      	strb	r2, [r3, #0]
 8013d84:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d88:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8013d8c:	781b      	ldrb	r3, [r3, #0]
 8013d8e:	041b      	lsls	r3, r3, #16
 8013d90:	461a      	mov	r2, r3
 8013d92:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013d96:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
 8013d9a:	781b      	ldrb	r3, [r3, #0]
 8013d9c:	021b      	lsls	r3, r3, #8
 8013d9e:	431a      	orrs	r2, r3
 8013da0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013da4:	f2a3 135f 	subw	r3, r3, #351	; 0x15f
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	4313      	orrs	r3, r2
 8013dac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013db0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013db4:	4611      	mov	r1, r2
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fe f934 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8013dbc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013dc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013dcc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013dd0:	601c      	str	r4, [r3, #0]
 8013dd2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013dd6:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8013dda:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013ddc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013de0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013dea:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 8013dee:	6812      	ldr	r2, [r2, #0]
 8013df0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013df2:	bf00      	nop
    textArea1_3.setLinespacing(0);
 8013df4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013df8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f503 724c 	add.w	r2, r3, #816	; 0x330
 8013e02:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013e0a:	601a      	str	r2, [r3, #0]
 8013e0c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e10:	f5a3 73ab 	sub.w	r3, r3, #342	; 0x156
 8013e14:	2200      	movs	r2, #0
 8013e16:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8013e18:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e1c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013e26:	f5a2 72ab 	sub.w	r2, r2, #342	; 0x156
 8013e2a:	8812      	ldrh	r2, [r2, #0]
 8013e2c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013e2e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e32:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	3384      	adds	r3, #132	; 0x84
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013e42:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8013e46:	6814      	ldr	r4, [r2, #0]
 8013e48:	4638      	mov	r0, r7
 8013e4a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013e4e:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8013e52:	6811      	ldr	r1, [r2, #0]
 8013e54:	4798      	blx	r3
 8013e56:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e5a:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8013e5e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013e68:	bf00      	nop
    textArea1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M29T));
 8013e6a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e6e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	f503 744c 	add.w	r4, r3, #816	; 0x330
 8013e78:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013e7c:	2103      	movs	r1, #3
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7fe fc58 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8013e84:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013e88:	4619      	mov	r1, r3
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f007 fbc8 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013e90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7fd fa0b 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_4.setXY(10, 227);
 8013e9a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013e9e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8013ea8:	22e3      	movs	r2, #227	; 0xe3
 8013eaa:	210a      	movs	r1, #10
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fe f9bc 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_4.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8013eb2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013eb6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f503 745e 	add.w	r4, r3, #888	; 0x378
 8013ec0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ec4:	f2a3 134d 	subw	r3, r3, #333	; 0x14d
 8013ec8:	2272      	movs	r2, #114	; 0x72
 8013eca:	701a      	strb	r2, [r3, #0]
 8013ecc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ed0:	f5a3 73a7 	sub.w	r3, r3, #334	; 0x14e
 8013ed4:	22b0      	movs	r2, #176	; 0xb0
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013edc:	f2a3 134f 	subw	r3, r3, #335	; 0x14f
 8013ee0:	22f0      	movs	r2, #240	; 0xf0
 8013ee2:	701a      	strb	r2, [r3, #0]
 8013ee4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ee8:	f2a3 134d 	subw	r3, r3, #333	; 0x14d
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	041b      	lsls	r3, r3, #16
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ef6:	f5a3 73a7 	sub.w	r3, r3, #334	; 0x14e
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	021b      	lsls	r3, r3, #8
 8013efe:	431a      	orrs	r2, r3
 8013f00:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f04:	f2a3 134f 	subw	r3, r3, #335	; 0x14f
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	4313      	orrs	r3, r2
 8013f0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013f10:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8013f14:	4611      	mov	r1, r2
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe f884 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8013f1c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	461a      	mov	r2, r3
 8013f28:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013f30:	601c      	str	r4, [r3, #0]
 8013f32:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f36:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8013f3a:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013f3c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f40:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013f4a:	f5a2 725d 	sub.w	r2, r2, #884	; 0x374
 8013f4e:	6812      	ldr	r2, [r2, #0]
 8013f50:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013f52:	bf00      	nop
    textArea1_4.setLinespacing(0);
 8013f54:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f58:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f503 725e 	add.w	r2, r3, #888	; 0x378
 8013f62:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f6a:	601a      	str	r2, [r3, #0]
 8013f6c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f70:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8013f74:	2200      	movs	r2, #0
 8013f76:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8013f78:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013f86:	f5a2 72a3 	sub.w	r2, r2, #326	; 0x146
 8013f8a:	8812      	ldrh	r2, [r2, #0]
 8013f8c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013f8e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013f92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	3384      	adds	r3, #132	; 0x84
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013fa2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8013fa6:	6814      	ldr	r4, [r2, #0]
 8013fa8:	4638      	mov	r0, r7
 8013faa:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8013fae:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8013fb2:	6811      	ldr	r1, [r2, #0]
 8013fb4:	4798      	blx	r3
 8013fb6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013fba:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8013fbe:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013fc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013fc8:	bf00      	nop
    textArea1_4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_281K));
 8013fca:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013fce:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f503 745e 	add.w	r4, r3, #888	; 0x378
 8013fd8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013fdc:	2104      	movs	r1, #4
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fe fba8 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8013fe4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013fe8:	4619      	mov	r1, r3
 8013fea:	4620      	mov	r0, r4
 8013fec:	f007 fb18 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013ff0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fd f95b 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_5.setXY(10, 277);
 8013ffa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8013ffe:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8014008:	f240 1215 	movw	r2, #277	; 0x115
 801400c:	210a      	movs	r1, #10
 801400e:	4618      	mov	r0, r3
 8014010:	f7fe f90b 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_5.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8014014:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014018:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 8014022:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014026:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 801402a:	2272      	movs	r2, #114	; 0x72
 801402c:	701a      	strb	r2, [r3, #0]
 801402e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014032:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8014036:	22b0      	movs	r2, #176	; 0xb0
 8014038:	701a      	strb	r2, [r3, #0]
 801403a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801403e:	f2a3 133f 	subw	r3, r3, #319	; 0x13f
 8014042:	22f0      	movs	r2, #240	; 0xf0
 8014044:	701a      	strb	r2, [r3, #0]
 8014046:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801404a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	041b      	lsls	r3, r3, #16
 8014052:	461a      	mov	r2, r3
 8014054:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014058:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	021b      	lsls	r3, r3, #8
 8014060:	431a      	orrs	r2, r3
 8014062:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014066:	f2a3 133f 	subw	r3, r3, #319	; 0x13f
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	4313      	orrs	r3, r2
 801406e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014072:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014076:	4611      	mov	r1, r2
 8014078:	4618      	mov	r0, r3
 801407a:	f7fd ffd3 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801407e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014082:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	461a      	mov	r2, r3
 801408a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801408e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8014092:	601c      	str	r4, [r3, #0]
 8014094:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014098:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 801409c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801409e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80140ac:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 80140b0:	6812      	ldr	r2, [r2, #0]
 80140b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80140b4:	bf00      	nop
    textArea1_5.setLinespacing(0);
 80140b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140ba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 80140c4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140d2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80140d6:	2200      	movs	r2, #0
 80140d8:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80140da:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80140e8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80140ec:	8812      	ldrh	r2, [r2, #0]
 80140ee:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80140f0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80140f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	3384      	adds	r3, #132	; 0x84
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014104:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8014108:	6814      	ldr	r4, [r2, #0]
 801410a:	4638      	mov	r0, r7
 801410c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014110:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8014114:	6811      	ldr	r1, [r2, #0]
 8014116:	4798      	blx	r3
 8014118:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801411c:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014120:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014124:	ca07      	ldmia	r2, {r0, r1, r2}
 8014126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801412a:	bf00      	nop
    textArea1_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2PWB));
 801412c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014130:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	f503 7470 	add.w	r4, r3, #960	; 0x3c0
 801413a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801413e:	2105      	movs	r1, #5
 8014140:	4618      	mov	r0, r3
 8014142:	f7fe faf7 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014146:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801414a:	4619      	mov	r1, r3
 801414c:	4620      	mov	r0, r4
 801414e:	f007 fa67 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014152:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014156:	4618      	mov	r0, r3
 8014158:	f7fd f8aa 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_6.setXY(10, 327);
 801415c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014160:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801416a:	f240 1247 	movw	r2, #327	; 0x147
 801416e:	210a      	movs	r1, #10
 8014170:	4618      	mov	r0, r3
 8014172:	f7fe f85a 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_6.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8014176:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801417a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 8014184:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014188:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 801418c:	2272      	movs	r2, #114	; 0x72
 801418e:	701a      	strb	r2, [r3, #0]
 8014190:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014194:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014198:	22b0      	movs	r2, #176	; 0xb0
 801419a:	701a      	strb	r2, [r3, #0]
 801419c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141a0:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 80141a4:	22f0      	movs	r2, #240	; 0xf0
 80141a6:	701a      	strb	r2, [r3, #0]
 80141a8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141ac:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	041b      	lsls	r3, r3, #16
 80141b4:	461a      	mov	r2, r3
 80141b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141ba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	021b      	lsls	r3, r3, #8
 80141c2:	431a      	orrs	r2, r3
 80141c4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141c8:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	4313      	orrs	r3, r2
 80141d0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80141d4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fd ff22 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80141e0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	461a      	mov	r2, r3
 80141ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80141f4:	601c      	str	r4, [r3, #0]
 80141f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80141fa:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80141fe:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014200:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801420e:	f5a2 725f 	sub.w	r2, r2, #892	; 0x37c
 8014212:	6812      	ldr	r2, [r2, #0]
 8014214:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014216:	bf00      	nop
    textArea1_6.setLinespacing(0);
 8014218:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801421c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 8014226:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801422a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801422e:	601a      	str	r2, [r3, #0]
 8014230:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014234:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8014238:	2200      	movs	r2, #0
 801423a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801423c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014240:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801424a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 801424e:	8812      	ldrh	r2, [r2, #0]
 8014250:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014252:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014256:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	3384      	adds	r3, #132	; 0x84
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014266:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 801426a:	6814      	ldr	r4, [r2, #0]
 801426c:	4638      	mov	r0, r7
 801426e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014272:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8014276:	6811      	ldr	r1, [r2, #0]
 8014278:	4798      	blx	r3
 801427a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801427e:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014282:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014286:	ca07      	ldmia	r2, {r0, r1, r2}
 8014288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801428c:	bf00      	nop
    textArea1_6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CU4U));
 801428e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014292:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 801429c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80142a0:	2106      	movs	r1, #6
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe fa46 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 80142a8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80142ac:	4619      	mov	r1, r3
 80142ae:	4620      	mov	r0, r4
 80142b0:	f007 f9b6 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80142b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fc fff9 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_7.setXY(10, 377);
 80142be:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80142c2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80142cc:	f240 1279 	movw	r2, #377	; 0x179
 80142d0:	210a      	movs	r1, #10
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fd ffa9 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_7.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 80142d8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80142dc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80142e6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80142ea:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80142ee:	2272      	movs	r2, #114	; 0x72
 80142f0:	701a      	strb	r2, [r3, #0]
 80142f2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80142f6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80142fa:	22b0      	movs	r2, #176	; 0xb0
 80142fc:	701a      	strb	r2, [r3, #0]
 80142fe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014302:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014306:	22f0      	movs	r2, #240	; 0xf0
 8014308:	701a      	strb	r2, [r3, #0]
 801430a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801430e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	041b      	lsls	r3, r3, #16
 8014316:	461a      	mov	r2, r3
 8014318:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801431c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	021b      	lsls	r3, r3, #8
 8014324:	431a      	orrs	r2, r3
 8014326:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801432a:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	4313      	orrs	r3, r2
 8014332:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014336:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801433a:	4611      	mov	r1, r2
 801433c:	4618      	mov	r0, r3
 801433e:	f7fd fe71 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8014342:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014346:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	461a      	mov	r2, r3
 801434e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014352:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014356:	601c      	str	r4, [r3, #0]
 8014358:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801435c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8014360:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014362:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014366:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014370:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 8014374:	6812      	ldr	r2, [r2, #0]
 8014376:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014378:	bf00      	nop
    textArea1_7.setLinespacing(0);
 801437a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801437e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	f503 628a 	add.w	r2, r3, #1104	; 0x450
 8014388:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801438c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8014390:	601a      	str	r2, [r3, #0]
 8014392:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014396:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801439a:	2200      	movs	r2, #0
 801439c:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801439e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80143a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80143ac:	f5a2 728b 	sub.w	r2, r2, #278	; 0x116
 80143b0:	8812      	ldrh	r2, [r2, #0]
 80143b2:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80143b4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80143b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	3384      	adds	r3, #132	; 0x84
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80143c8:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80143cc:	6814      	ldr	r4, [r2, #0]
 80143ce:	4638      	mov	r0, r7
 80143d0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80143d4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80143d8:	6811      	ldr	r1, [r2, #0]
 80143da:	4798      	blx	r3
 80143dc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80143e0:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80143e4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80143e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80143ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80143ee:	bf00      	nop
    textArea1_7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_78W6));
 80143f0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80143f4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f503 648a 	add.w	r4, r3, #1104	; 0x450
 80143fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014402:	2107      	movs	r1, #7
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe f995 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801440a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801440e:	4619      	mov	r1, r3
 8014410:	4620      	mov	r0, r4
 8014412:	f007 f905 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801441a:	4618      	mov	r0, r3
 801441c:	f7fc ff48 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8.setXY(212, 32);
 8014420:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014424:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 801442e:	2220      	movs	r2, #32
 8014430:	21d4      	movs	r1, #212	; 0xd4
 8014432:	4618      	mov	r0, r3
 8014434:	f7fd fef9 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8014438:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801443c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 8014446:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801444a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 801444e:	2272      	movs	r2, #114	; 0x72
 8014450:	701a      	strb	r2, [r3, #0]
 8014452:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014456:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801445a:	22b0      	movs	r2, #176	; 0xb0
 801445c:	701a      	strb	r2, [r3, #0]
 801445e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014462:	f2a3 130f 	subw	r3, r3, #271	; 0x10f
 8014466:	22f0      	movs	r2, #240	; 0xf0
 8014468:	701a      	strb	r2, [r3, #0]
 801446a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801446e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	041b      	lsls	r3, r3, #16
 8014476:	461a      	mov	r2, r3
 8014478:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801447c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	021b      	lsls	r3, r3, #8
 8014484:	431a      	orrs	r2, r3
 8014486:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801448a:	f2a3 130f 	subw	r3, r3, #271	; 0x10f
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	4313      	orrs	r3, r2
 8014492:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014496:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801449a:	4611      	mov	r1, r2
 801449c:	4618      	mov	r0, r3
 801449e:	f7fd fdc1 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80144a2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	461a      	mov	r2, r3
 80144ae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80144b6:	601c      	str	r4, [r3, #0]
 80144b8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144bc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80144c0:	601a      	str	r2, [r3, #0]
        color = newColor;
 80144c2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80144d0:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 80144d4:	6812      	ldr	r2, [r2, #0]
 80144d6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80144d8:	bf00      	nop
    textArea1_8.setLinespacing(0);
 80144da:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144de:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f503 6293 	add.w	r2, r3, #1176	; 0x498
 80144e8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80144f0:	601a      	str	r2, [r3, #0]
 80144f2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80144f6:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80144fa:	2200      	movs	r2, #0
 80144fc:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80144fe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801450c:	f5a2 7283 	sub.w	r2, r2, #262	; 0x106
 8014510:	8812      	ldrh	r2, [r2, #0]
 8014512:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014514:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	3384      	adds	r3, #132	; 0x84
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014528:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 801452c:	6814      	ldr	r4, [r2, #0]
 801452e:	4638      	mov	r0, r7
 8014530:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014534:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8014538:	6811      	ldr	r1, [r2, #0]
 801453a:	4798      	blx	r3
 801453c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014540:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014544:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014548:	ca07      	ldmia	r2, {r0, r1, r2}
 801454a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801454e:	bf00      	nop
    textArea1_8.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XH3M));
 8014550:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014554:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	f503 6493 	add.w	r4, r3, #1176	; 0x498
 801455e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014562:	2108      	movs	r1, #8
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe f8e5 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801456a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801456e:	4619      	mov	r1, r3
 8014570:	4620      	mov	r0, r4
 8014572:	f007 f855 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014576:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801457a:	4618      	mov	r0, r3
 801457c:	f7fc fe98 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_1.setXY(212, 82);
 8014580:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014584:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 801458e:	2252      	movs	r2, #82	; 0x52
 8014590:	21d4      	movs	r1, #212	; 0xd4
 8014592:	4618      	mov	r0, r3
 8014594:	f7fd fe49 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_1.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8014598:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801459c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f503 649c 	add.w	r4, r3, #1248	; 0x4e0
 80145a6:	2372      	movs	r3, #114	; 0x72
 80145a8:	f887 32e3 	strb.w	r3, [r7, #739]	; 0x2e3
 80145ac:	23b0      	movs	r3, #176	; 0xb0
 80145ae:	f887 32e2 	strb.w	r3, [r7, #738]	; 0x2e2
 80145b2:	23f0      	movs	r3, #240	; 0xf0
 80145b4:	f887 32e1 	strb.w	r3, [r7, #737]	; 0x2e1
 80145b8:	f897 32e3 	ldrb.w	r3, [r7, #739]	; 0x2e3
 80145bc:	041b      	lsls	r3, r3, #16
 80145be:	461a      	mov	r2, r3
 80145c0:	f897 32e2 	ldrb.w	r3, [r7, #738]	; 0x2e2
 80145c4:	021b      	lsls	r3, r3, #8
 80145c6:	431a      	orrs	r2, r3
 80145c8:	f897 32e1 	ldrb.w	r3, [r7, #737]	; 0x2e1
 80145cc:	4313      	orrs	r3, r2
 80145ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80145d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145d6:	4611      	mov	r1, r2
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fd fd23 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80145de:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80145e2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	461a      	mov	r2, r3
 80145ea:	f8c7 42e4 	str.w	r4, [r7, #740]	; 0x2e4
 80145ee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80145f2:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80145f6:	601a      	str	r2, [r3, #0]
        color = newColor;
 80145f8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80145fc:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014600:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 8014604:	6812      	ldr	r2, [r2, #0]
 8014606:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014608:	bf00      	nop
    textArea1_8_1.setLinespacing(0);
 801460a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801460e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8014618:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801461c:	2300      	movs	r3, #0
 801461e:	f8a7 32ea 	strh.w	r3, [r7, #746]	; 0x2ea
        linespace = space;
 8014622:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8014626:	f8b7 22ea 	ldrh.w	r2, [r7, #746]	; 0x2ea
 801462a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801462c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	3384      	adds	r3, #132	; 0x84
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f8d7 42ec 	ldr.w	r4, [r7, #748]	; 0x2ec
 801463a:	463a      	mov	r2, r7
 801463c:	f8d7 12ec 	ldr.w	r1, [r7, #748]	; 0x2ec
 8014640:	4610      	mov	r0, r2
 8014642:	4798      	blx	r3
 8014644:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014648:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 801464c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014650:	ca07      	ldmia	r2, {r0, r1, r2}
 8014652:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014656:	bf00      	nop
    textArea1_8_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_73J3));
 8014658:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801465c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f503 649c 	add.w	r4, r3, #1248	; 0x4e0
 8014666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801466a:	2109      	movs	r1, #9
 801466c:	4618      	mov	r0, r3
 801466e:	f7fe f861 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014672:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014676:	4619      	mov	r1, r3
 8014678:	4620      	mov	r0, r4
 801467a:	f006 ffd1 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801467e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014682:	4618      	mov	r0, r3
 8014684:	f7fc fe14 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_2.setXY(212, 132);
 8014688:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801468c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8014696:	2284      	movs	r2, #132	; 0x84
 8014698:	21d4      	movs	r1, #212	; 0xd4
 801469a:	4618      	mov	r0, r3
 801469c:	f7fd fdc5 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_2.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 80146a0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80146a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	f503 64a5 	add.w	r4, r3, #1320	; 0x528
 80146ae:	2372      	movs	r3, #114	; 0x72
 80146b0:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
 80146b4:	23b0      	movs	r3, #176	; 0xb0
 80146b6:	f887 32f2 	strb.w	r3, [r7, #754]	; 0x2f2
 80146ba:	23f0      	movs	r3, #240	; 0xf0
 80146bc:	f887 32f1 	strb.w	r3, [r7, #753]	; 0x2f1
 80146c0:	f897 32f3 	ldrb.w	r3, [r7, #755]	; 0x2f3
 80146c4:	041b      	lsls	r3, r3, #16
 80146c6:	461a      	mov	r2, r3
 80146c8:	f897 32f2 	ldrb.w	r3, [r7, #754]	; 0x2f2
 80146cc:	021b      	lsls	r3, r3, #8
 80146ce:	431a      	orrs	r2, r3
 80146d0:	f897 32f1 	ldrb.w	r3, [r7, #753]	; 0x2f1
 80146d4:	4313      	orrs	r3, r2
 80146d6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80146da:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80146de:	4611      	mov	r1, r2
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fd fc9f 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80146e6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80146ea:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	461a      	mov	r2, r3
 80146f2:	f8c7 42f4 	str.w	r4, [r7, #756]	; 0x2f4
 80146f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80146fa:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 80146fe:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014700:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8014704:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014708:	f5a2 7263 	sub.w	r2, r2, #908	; 0x38c
 801470c:	6812      	ldr	r2, [r2, #0]
 801470e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014710:	bf00      	nop
    textArea1_8_2.setLinespacing(0);
 8014712:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014716:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8014720:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8014724:	2300      	movs	r3, #0
 8014726:	f8a7 32fa 	strh.w	r3, [r7, #762]	; 0x2fa
        linespace = space;
 801472a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 801472e:	f8b7 22fa 	ldrh.w	r2, [r7, #762]	; 0x2fa
 8014732:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014734:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	3384      	adds	r3, #132	; 0x84
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	f8d7 42fc 	ldr.w	r4, [r7, #764]	; 0x2fc
 8014742:	463a      	mov	r2, r7
 8014744:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 8014748:	4610      	mov	r0, r2
 801474a:	4798      	blx	r3
 801474c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014750:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014754:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014758:	ca07      	ldmia	r2, {r0, r1, r2}
 801475a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801475e:	bf00      	nop
    textArea1_8_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UXPV));
 8014760:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014764:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	f503 64a5 	add.w	r4, r3, #1320	; 0x528
 801476e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014772:	210a      	movs	r1, #10
 8014774:	4618      	mov	r0, r3
 8014776:	f7fd ffdd 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801477a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801477e:	4619      	mov	r1, r3
 8014780:	4620      	mov	r0, r4
 8014782:	f006 ff4d 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801478a:	4618      	mov	r0, r3
 801478c:	f7fc fd90 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_3.setXY(212, 182);
 8014790:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014794:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 801479e:	22b6      	movs	r2, #182	; 0xb6
 80147a0:	21d4      	movs	r1, #212	; 0xd4
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7fd fd41 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_3.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 80147a8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80147ac:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f503 64ae 	add.w	r4, r3, #1392	; 0x570
 80147b6:	2372      	movs	r3, #114	; 0x72
 80147b8:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303
 80147bc:	23b0      	movs	r3, #176	; 0xb0
 80147be:	f887 3302 	strb.w	r3, [r7, #770]	; 0x302
 80147c2:	23f0      	movs	r3, #240	; 0xf0
 80147c4:	f887 3301 	strb.w	r3, [r7, #769]	; 0x301
 80147c8:	f897 3303 	ldrb.w	r3, [r7, #771]	; 0x303
 80147cc:	041b      	lsls	r3, r3, #16
 80147ce:	461a      	mov	r2, r3
 80147d0:	f897 3302 	ldrb.w	r3, [r7, #770]	; 0x302
 80147d4:	021b      	lsls	r3, r3, #8
 80147d6:	431a      	orrs	r2, r3
 80147d8:	f897 3301 	ldrb.w	r3, [r7, #769]	; 0x301
 80147dc:	4313      	orrs	r3, r2
 80147de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80147e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80147e6:	4611      	mov	r1, r2
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fd fc1b 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80147ee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80147f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	461a      	mov	r2, r3
 80147fa:	f8c7 4304 	str.w	r4, [r7, #772]	; 0x304
 80147fe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014802:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8014806:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014808:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801480c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014810:	f5a2 7264 	sub.w	r2, r2, #912	; 0x390
 8014814:	6812      	ldr	r2, [r2, #0]
 8014816:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014818:	bf00      	nop
    textArea1_8_3.setLinespacing(0);
 801481a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801481e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8014828:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 801482c:	2300      	movs	r3, #0
 801482e:	f8a7 330a 	strh.w	r3, [r7, #778]	; 0x30a
        linespace = space;
 8014832:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8014836:	f8b7 230a 	ldrh.w	r2, [r7, #778]	; 0x30a
 801483a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801483c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	3384      	adds	r3, #132	; 0x84
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	f8d7 430c 	ldr.w	r4, [r7, #780]	; 0x30c
 801484a:	463a      	mov	r2, r7
 801484c:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
 8014850:	4610      	mov	r0, r2
 8014852:	4798      	blx	r3
 8014854:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014858:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 801485c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014860:	ca07      	ldmia	r2, {r0, r1, r2}
 8014862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014866:	bf00      	nop
    textArea1_8_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P3TM));
 8014868:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801486c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	f503 64ae 	add.w	r4, r3, #1392	; 0x570
 8014876:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801487a:	210b      	movs	r1, #11
 801487c:	4618      	mov	r0, r3
 801487e:	f7fd ff59 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014882:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8014886:	4619      	mov	r1, r3
 8014888:	4620      	mov	r0, r4
 801488a:	f006 fec9 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801488e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8014892:	4618      	mov	r0, r3
 8014894:	f7fc fd0c 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_4.setXY(212, 232);
 8014898:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801489c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80148a6:	22e8      	movs	r2, #232	; 0xe8
 80148a8:	21d4      	movs	r1, #212	; 0xd4
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fd fcbd 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_4.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 80148b0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80148b4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 80148be:	2372      	movs	r3, #114	; 0x72
 80148c0:	f887 3313 	strb.w	r3, [r7, #787]	; 0x313
 80148c4:	23b0      	movs	r3, #176	; 0xb0
 80148c6:	f887 3312 	strb.w	r3, [r7, #786]	; 0x312
 80148ca:	23f0      	movs	r3, #240	; 0xf0
 80148cc:	f887 3311 	strb.w	r3, [r7, #785]	; 0x311
 80148d0:	f897 3313 	ldrb.w	r3, [r7, #787]	; 0x313
 80148d4:	041b      	lsls	r3, r3, #16
 80148d6:	461a      	mov	r2, r3
 80148d8:	f897 3312 	ldrb.w	r3, [r7, #786]	; 0x312
 80148dc:	021b      	lsls	r3, r3, #8
 80148de:	431a      	orrs	r2, r3
 80148e0:	f897 3311 	ldrb.w	r3, [r7, #785]	; 0x311
 80148e4:	4313      	orrs	r3, r2
 80148e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80148ea:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80148ee:	4611      	mov	r1, r2
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fd fb97 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80148f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80148fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	461a      	mov	r2, r3
 8014902:	f8c7 4314 	str.w	r4, [r7, #788]	; 0x314
 8014906:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801490a:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 801490e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014910:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8014914:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014918:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 801491c:	6812      	ldr	r2, [r2, #0]
 801491e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014920:	bf00      	nop
    textArea1_8_4.setLinespacing(0);
 8014922:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014926:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8014930:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8014934:	2300      	movs	r3, #0
 8014936:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
        linespace = space;
 801493a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 801493e:	f8b7 231a 	ldrh.w	r2, [r7, #794]	; 0x31a
 8014942:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014944:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	3384      	adds	r3, #132	; 0x84
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f8d7 431c 	ldr.w	r4, [r7, #796]	; 0x31c
 8014952:	463a      	mov	r2, r7
 8014954:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 8014958:	4610      	mov	r0, r2
 801495a:	4798      	blx	r3
 801495c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014960:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014964:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014968:	ca07      	ldmia	r2, {r0, r1, r2}
 801496a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801496e:	bf00      	nop
    textArea1_8_4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1D1D));
 8014970:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014974:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 801497e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014982:	210c      	movs	r1, #12
 8014984:	4618      	mov	r0, r3
 8014986:	f7fd fed5 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801498e:	4619      	mov	r1, r3
 8014990:	4620      	mov	r0, r4
 8014992:	f006 fe45 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801499a:	4618      	mov	r0, r3
 801499c:	f7fc fc88 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_5.setXY(212, 282);
 80149a0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80149a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80149ae:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80149b2:	21d4      	movs	r1, #212	; 0xd4
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7fd fc38 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_5.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 80149ba:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80149be:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f503 64c0 	add.w	r4, r3, #1536	; 0x600
 80149c8:	2372      	movs	r3, #114	; 0x72
 80149ca:	f887 3323 	strb.w	r3, [r7, #803]	; 0x323
 80149ce:	23b0      	movs	r3, #176	; 0xb0
 80149d0:	f887 3322 	strb.w	r3, [r7, #802]	; 0x322
 80149d4:	23f0      	movs	r3, #240	; 0xf0
 80149d6:	f887 3321 	strb.w	r3, [r7, #801]	; 0x321
 80149da:	f897 3323 	ldrb.w	r3, [r7, #803]	; 0x323
 80149de:	041b      	lsls	r3, r3, #16
 80149e0:	461a      	mov	r2, r3
 80149e2:	f897 3322 	ldrb.w	r3, [r7, #802]	; 0x322
 80149e6:	021b      	lsls	r3, r3, #8
 80149e8:	431a      	orrs	r2, r3
 80149ea:	f897 3321 	ldrb.w	r3, [r7, #801]	; 0x321
 80149ee:	4313      	orrs	r3, r2
 80149f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80149f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80149f8:	4611      	mov	r1, r2
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fd fb12 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8014a00:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014a04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	f8c7 4324 	str.w	r4, [r7, #804]	; 0x324
 8014a10:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014a14:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8014a18:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014a1a:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8014a1e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014a22:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8014a26:	6812      	ldr	r2, [r2, #0]
 8014a28:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014a2a:	bf00      	nop
    textArea1_8_5.setLinespacing(0);
 8014a2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014a30:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8014a3a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8014a3e:	2300      	movs	r3, #0
 8014a40:	f8a7 332a 	strh.w	r3, [r7, #810]	; 0x32a
        linespace = space;
 8014a44:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8014a48:	f8b7 232a 	ldrh.w	r2, [r7, #810]	; 0x32a
 8014a4c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014a4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	3384      	adds	r3, #132	; 0x84
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8014a5c:	463a      	mov	r2, r7
 8014a5e:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8014a62:	4610      	mov	r0, r2
 8014a64:	4798      	blx	r3
 8014a66:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014a6a:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014a6e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014a78:	bf00      	nop
    textArea1_8_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GH41));
 8014a7a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014a7e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	f503 64c0 	add.w	r4, r3, #1536	; 0x600
 8014a88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a8c:	210d      	movs	r1, #13
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fd fe50 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a98:	4619      	mov	r1, r3
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f006 fdc0 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014aa0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7fc fc03 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea1_8_6.setXY(212, 332);
 8014aaa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014aae:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8014ab8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8014abc:	21d4      	movs	r1, #212	; 0xd4
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7fd fbb3 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea1_8_6.setColor(touchgfx::Color::getColorFromRGB(114, 176, 240));
 8014ac4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014ac8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f503 64c9 	add.w	r4, r3, #1608	; 0x648
 8014ad2:	2372      	movs	r3, #114	; 0x72
 8014ad4:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
 8014ad8:	23b0      	movs	r3, #176	; 0xb0
 8014ada:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
 8014ade:	23f0      	movs	r3, #240	; 0xf0
 8014ae0:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
 8014ae4:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8014ae8:	041b      	lsls	r3, r3, #16
 8014aea:	461a      	mov	r2, r3
 8014aec:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 8014af0:	021b      	lsls	r3, r3, #8
 8014af2:	431a      	orrs	r2, r3
 8014af4:	f897 3331 	ldrb.w	r3, [r7, #817]	; 0x331
 8014af8:	4313      	orrs	r3, r2
 8014afa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014afe:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8014b02:	4611      	mov	r1, r2
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fd fa8d 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8014b0a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014b0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	461a      	mov	r2, r3
 8014b16:	f8c7 4334 	str.w	r4, [r7, #820]	; 0x334
 8014b1a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014b1e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8014b22:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014b24:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8014b28:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014b2c:	f5a2 7267 	sub.w	r2, r2, #924	; 0x39c
 8014b30:	6812      	ldr	r2, [r2, #0]
 8014b32:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014b34:	bf00      	nop
    textArea1_8_6.setLinespacing(0);
 8014b36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014b3a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8014b44:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8014b48:	2300      	movs	r3, #0
 8014b4a:	f8a7 333a 	strh.w	r3, [r7, #826]	; 0x33a
        linespace = space;
 8014b4e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8014b52:	f8b7 233a 	ldrh.w	r2, [r7, #826]	; 0x33a
 8014b56:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014b58:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	3384      	adds	r3, #132	; 0x84
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f8d7 433c 	ldr.w	r4, [r7, #828]	; 0x33c
 8014b66:	463a      	mov	r2, r7
 8014b68:	f8d7 133c 	ldr.w	r1, [r7, #828]	; 0x33c
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	4798      	blx	r3
 8014b70:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014b74:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014b78:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014b7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8014b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014b82:	bf00      	nop
    textArea1_8_6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P3XL));
 8014b84:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014b88:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	f503 64c9 	add.w	r4, r3, #1608	; 0x648
 8014b92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014b96:	210e      	movs	r1, #14
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7fd fdcb 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014b9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	f006 fd3b 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014baa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7fc fb7e 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    toggleButton1_8.setXY(381, 19);
 8014bb4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014bb8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8014bc2:	2213      	movs	r2, #19
 8014bc4:	f240 117d 	movw	r1, #381	; 0x17d
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fd fb2e 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_8.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014bce:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014bd2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 8014bdc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014be0:	2106      	movs	r1, #6
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fd fa64 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014be8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8014bec:	2108      	movs	r1, #8
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fd fa5e 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014bf4:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8014bf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7fd fd84 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_9.setXY(381, 69);
 8014c04:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014c08:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8014c12:	2245      	movs	r2, #69	; 0x45
 8014c14:	f240 117d 	movw	r1, #381	; 0x17d
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7fd fb06 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_9.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014c1e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014c22:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	f503 64d9 	add.w	r4, r3, #1736	; 0x6c8
 8014c2c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8014c30:	2106      	movs	r1, #6
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fd fa3c 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014c38:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8014c3c:	2108      	movs	r1, #8
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fd fa36 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014c44:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8014c48:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7fd fd5c 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_10.setXY(381, 119);
 8014c54:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014c58:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8014c62:	2277      	movs	r2, #119	; 0x77
 8014c64:	f240 117d 	movw	r1, #381	; 0x17d
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fd fade 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_10.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014c6e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014c72:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	f503 64e0 	add.w	r4, r3, #1792	; 0x700
 8014c7c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014c80:	2106      	movs	r1, #6
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7fd fa14 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014c88:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8014c8c:	2108      	movs	r1, #8
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fd fa0e 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014c94:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8014c98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	4620      	mov	r0, r4
 8014ca0:	f7fd fd34 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_11.setXY(381, 169);
 8014ca4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014ca8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8014cb2:	22a9      	movs	r2, #169	; 0xa9
 8014cb4:	f240 117d 	movw	r1, #381	; 0x17d
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7fd fab6 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_11.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014cbe:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014cc2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f503 64e7 	add.w	r4, r3, #1848	; 0x738
 8014ccc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014cd0:	2106      	movs	r1, #6
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7fd f9ec 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014cd8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014cdc:	2108      	movs	r1, #8
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7fd f9e6 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014ce4:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8014ce8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014cec:	4619      	mov	r1, r3
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f7fd fd0c 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_12.setXY(381, 219);
 8014cf4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014cf8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8014d02:	22db      	movs	r2, #219	; 0xdb
 8014d04:	f240 117d 	movw	r1, #381	; 0x17d
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fd fa8e 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_12.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014d0e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014d12:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f503 64ee 	add.w	r4, r3, #1904	; 0x770
 8014d1c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8014d20:	2106      	movs	r1, #6
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fd f9c4 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014d28:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8014d2c:	2108      	movs	r1, #8
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fd f9be 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014d34:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8014d38:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f7fd fce4 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_13.setXY(381, 269);
 8014d44:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014d48:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8014d52:	f240 120d 	movw	r2, #269	; 0x10d
 8014d56:	f240 117d 	movw	r1, #381	; 0x17d
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fd fa65 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_13.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014d60:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014d64:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	f503 64f5 	add.w	r4, r3, #1960	; 0x7a8
 8014d6e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014d72:	2106      	movs	r1, #6
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fd f99b 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014d7a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014d7e:	2108      	movs	r1, #8
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7fd f995 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014d86:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8014d8a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014d8e:	4619      	mov	r1, r3
 8014d90:	4620      	mov	r0, r4
 8014d92:	f7fd fcbb 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    toggleButton1_14.setXY(381, 319);
 8014d96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014d9a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8014da4:	f240 123f 	movw	r2, #319	; 0x13f
 8014da8:	f240 117d 	movw	r1, #381	; 0x17d
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fd fa3c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_14.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8014db2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014db6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	f503 64fc 	add.w	r4, r3, #2016	; 0x7e0
 8014dc0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8014dc4:	2106      	movs	r1, #6
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7fd f972 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014dcc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8014dd0:	2108      	movs	r1, #8
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fd f96c 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8014dd8:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8014ddc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8014de0:	4619      	mov	r1, r3
 8014de2:	4620      	mov	r0, r4
 8014de4:	f7fd fc92 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    textArea2.setXY(445, 32);
 8014de8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014dec:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8014df6:	2220      	movs	r2, #32
 8014df8:	f240 11bd 	movw	r1, #445	; 0x1bd
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f7fd fa14 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 8014e02:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014e06:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	f603 0418 	addw	r4, r3, #2072	; 0x818
 8014e10:	2346      	movs	r3, #70	; 0x46
 8014e12:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
 8014e16:	239d      	movs	r3, #157	; 0x9d
 8014e18:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
 8014e1c:	23c2      	movs	r3, #194	; 0xc2
 8014e1e:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
 8014e22:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 8014e26:	041b      	lsls	r3, r3, #16
 8014e28:	461a      	mov	r2, r3
 8014e2a:	f897 3342 	ldrb.w	r3, [r7, #834]	; 0x342
 8014e2e:	021b      	lsls	r3, r3, #8
 8014e30:	431a      	orrs	r2, r3
 8014e32:	f897 3341 	ldrb.w	r3, [r7, #833]	; 0x341
 8014e36:	4313      	orrs	r3, r2
 8014e38:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8014e40:	4611      	mov	r1, r2
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd f8ee 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8014e48:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014e4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	461a      	mov	r2, r3
 8014e54:	f8c7 4344 	str.w	r4, [r7, #836]	; 0x344
 8014e58:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014e5c:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8014e60:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014e62:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8014e66:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014e6a:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8014e6e:	6812      	ldr	r2, [r2, #0]
 8014e70:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014e72:	bf00      	nop
    textArea2.setLinespacing(0);
 8014e74:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014e78:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8014e82:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8014e86:	2300      	movs	r3, #0
 8014e88:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
        linespace = space;
 8014e8c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8014e90:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 8014e94:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014e96:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	3384      	adds	r3, #132	; 0x84
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f8d7 434c 	ldr.w	r4, [r7, #844]	; 0x34c
 8014ea4:	463a      	mov	r2, r7
 8014ea6:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 8014eaa:	4610      	mov	r0, r2
 8014eac:	4798      	blx	r3
 8014eae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014eb2:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8014eb6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014ec0:	bf00      	nop
    textArea2Buffer[0] = 0;
 8014ec2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014ec6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	2200      	movs	r2, #0
 8014ece:	f8a3 2bec 	strh.w	r2, [r3, #3052]	; 0xbec
    textArea2.setWildcard(textArea2Buffer);
 8014ed2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014ed6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8014ee0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014ee4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8014eee:	4619      	mov	r1, r3
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	f7fd fe0d 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2.resizeToCurrentText();
 8014ef6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014efa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8014f04:	4618      	mov	r0, r3
 8014f06:	f006 fb6b 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0V0W));
 8014f0a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014f0e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	f603 0418 	addw	r4, r3, #2072	; 0x818
 8014f18:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8014f1c:	210f      	movs	r1, #15
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7fd fc08 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8014f24:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8014f28:	4619      	mov	r1, r3
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f006 fb78 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014f30:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fc f9bb 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_1.setXY(444, 82);
 8014f3a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014f3e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8014f48:	2252      	movs	r2, #82	; 0x52
 8014f4a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fd f96b 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_1.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 8014f54:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014f58:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	f603 0464 	addw	r4, r3, #2148	; 0x864
 8014f62:	2346      	movs	r3, #70	; 0x46
 8014f64:	f887 3353 	strb.w	r3, [r7, #851]	; 0x353
 8014f68:	239d      	movs	r3, #157	; 0x9d
 8014f6a:	f887 3352 	strb.w	r3, [r7, #850]	; 0x352
 8014f6e:	23c2      	movs	r3, #194	; 0xc2
 8014f70:	f887 3351 	strb.w	r3, [r7, #849]	; 0x351
 8014f74:	f897 3353 	ldrb.w	r3, [r7, #851]	; 0x353
 8014f78:	041b      	lsls	r3, r3, #16
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	f897 3352 	ldrb.w	r3, [r7, #850]	; 0x352
 8014f80:	021b      	lsls	r3, r3, #8
 8014f82:	431a      	orrs	r2, r3
 8014f84:	f897 3351 	ldrb.w	r3, [r7, #849]	; 0x351
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014f8e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8014f92:	4611      	mov	r1, r2
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7fd f845 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8014f9a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014f9e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	f8c7 4354 	str.w	r4, [r7, #852]	; 0x354
 8014faa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014fae:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014fb2:	601a      	str	r2, [r3, #0]
        color = newColor;
 8014fb4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8014fb8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8014fbc:	f5a2 7269 	sub.w	r2, r2, #932	; 0x3a4
 8014fc0:	6812      	ldr	r2, [r2, #0]
 8014fc2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014fc4:	bf00      	nop
    textArea2_1.setLinespacing(0);
 8014fc6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8014fca:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8014fd4:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8014fd8:	2300      	movs	r3, #0
 8014fda:	f8a7 335a 	strh.w	r3, [r7, #858]	; 0x35a
        linespace = space;
 8014fde:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8014fe2:	f8b7 235a 	ldrh.w	r2, [r7, #858]	; 0x35a
 8014fe6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014fe8:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	3384      	adds	r3, #132	; 0x84
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	f8d7 435c 	ldr.w	r4, [r7, #860]	; 0x35c
 8014ff6:	463a      	mov	r2, r7
 8014ff8:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8014ffc:	4610      	mov	r0, r2
 8014ffe:	4798      	blx	r3
 8015000:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015004:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8015008:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801500c:	ca07      	ldmia	r2, {r0, r1, r2}
 801500e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015012:	bf00      	nop
    textArea2_1Buffer[0] = 0;
 8015014:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015018:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2200      	movs	r2, #0
 8015020:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	; 0xbf8
    textArea2_1.setWildcard(textArea2_1Buffer);
 8015024:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015028:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	f603 0264 	addw	r2, r3, #2148	; 0x864
 8015032:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015036:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8015040:	4619      	mov	r1, r3
 8015042:	4610      	mov	r0, r2
 8015044:	f7fd fd64 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_1.resizeToCurrentText();
 8015048:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801504c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8015056:	4618      	mov	r0, r3
 8015058:	f006 fac2 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RUFE));
 801505c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015060:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	f603 0464 	addw	r4, r3, #2148	; 0x864
 801506a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801506e:	2110      	movs	r1, #16
 8015070:	4618      	mov	r0, r3
 8015072:	f7fd fb5f 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8015076:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801507a:	4619      	mov	r1, r3
 801507c:	4620      	mov	r0, r4
 801507e:	f006 facf 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015082:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8015086:	4618      	mov	r0, r3
 8015088:	f7fc f912 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_2.setXY(445, 132);
 801508c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015090:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 801509a:	2284      	movs	r2, #132	; 0x84
 801509c:	f240 11bd 	movw	r1, #445	; 0x1bd
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fd f8c2 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_2.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 80150a6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80150aa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f503 640b 	add.w	r4, r3, #2224	; 0x8b0
 80150b4:	2346      	movs	r3, #70	; 0x46
 80150b6:	f887 3363 	strb.w	r3, [r7, #867]	; 0x363
 80150ba:	239d      	movs	r3, #157	; 0x9d
 80150bc:	f887 3362 	strb.w	r3, [r7, #866]	; 0x362
 80150c0:	23c2      	movs	r3, #194	; 0xc2
 80150c2:	f887 3361 	strb.w	r3, [r7, #865]	; 0x361
 80150c6:	f897 3363 	ldrb.w	r3, [r7, #867]	; 0x363
 80150ca:	041b      	lsls	r3, r3, #16
 80150cc:	461a      	mov	r2, r3
 80150ce:	f897 3362 	ldrb.w	r3, [r7, #866]	; 0x362
 80150d2:	021b      	lsls	r3, r3, #8
 80150d4:	431a      	orrs	r2, r3
 80150d6:	f897 3361 	ldrb.w	r3, [r7, #865]	; 0x361
 80150da:	4313      	orrs	r3, r2
 80150dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80150e0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80150e4:	4611      	mov	r1, r2
 80150e6:	4618      	mov	r0, r3
 80150e8:	f7fc ff9c 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80150ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80150f0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f8c7 4364 	str.w	r4, [r7, #868]	; 0x364
 80150fc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015100:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8015104:	601a      	str	r2, [r3, #0]
        color = newColor;
 8015106:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801510a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801510e:	f5a2 726a 	sub.w	r2, r2, #936	; 0x3a8
 8015112:	6812      	ldr	r2, [r2, #0]
 8015114:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015116:	bf00      	nop
    textArea2_2.setLinespacing(0);
 8015118:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801511c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8015126:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 801512a:	2300      	movs	r3, #0
 801512c:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
        linespace = space;
 8015130:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8015134:	f8b7 236a 	ldrh.w	r2, [r7, #874]	; 0x36a
 8015138:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801513a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	3384      	adds	r3, #132	; 0x84
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	f8d7 436c 	ldr.w	r4, [r7, #876]	; 0x36c
 8015148:	463a      	mov	r2, r7
 801514a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 801514e:	4610      	mov	r0, r2
 8015150:	4798      	blx	r3
 8015152:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015156:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 801515a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801515e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015164:	bf00      	nop
    textArea2_2Buffer[0] = 0;
 8015166:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801516a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2200      	movs	r2, #0
 8015172:	f8a3 2c04 	strh.w	r2, [r3, #3076]	; 0xc04
    textArea2_2.setWildcard(textArea2_2Buffer);
 8015176:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801517a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	f503 620b 	add.w	r2, r3, #2224	; 0x8b0
 8015184:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015188:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8015192:	4619      	mov	r1, r3
 8015194:	4610      	mov	r0, r2
 8015196:	f7fd fcbb 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_2.resizeToCurrentText();
 801519a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801519e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80151a8:	4618      	mov	r0, r3
 80151aa:	f006 fa19 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8WV9));
 80151ae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80151b2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f503 640b 	add.w	r4, r3, #2224	; 0x8b0
 80151bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80151c0:	2111      	movs	r1, #17
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7fd fab6 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 80151c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80151cc:	4619      	mov	r1, r3
 80151ce:	4620      	mov	r0, r4
 80151d0:	f006 fa26 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80151d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80151d8:	4618      	mov	r0, r3
 80151da:	f7fc f869 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_3.setXY(445, 182);
 80151de:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80151e2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80151ec:	22b6      	movs	r2, #182	; 0xb6
 80151ee:	f240 11bd 	movw	r1, #445	; 0x1bd
 80151f2:	4618      	mov	r0, r3
 80151f4:	f7fd f819 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_3.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 80151f8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80151fc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	f603 04fc 	addw	r4, r3, #2300	; 0x8fc
 8015206:	2346      	movs	r3, #70	; 0x46
 8015208:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
 801520c:	239d      	movs	r3, #157	; 0x9d
 801520e:	f887 3372 	strb.w	r3, [r7, #882]	; 0x372
 8015212:	23c2      	movs	r3, #194	; 0xc2
 8015214:	f887 3371 	strb.w	r3, [r7, #881]	; 0x371
 8015218:	f897 3373 	ldrb.w	r3, [r7, #883]	; 0x373
 801521c:	041b      	lsls	r3, r3, #16
 801521e:	461a      	mov	r2, r3
 8015220:	f897 3372 	ldrb.w	r3, [r7, #882]	; 0x372
 8015224:	021b      	lsls	r3, r3, #8
 8015226:	431a      	orrs	r2, r3
 8015228:	f897 3371 	ldrb.w	r3, [r7, #881]	; 0x371
 801522c:	4313      	orrs	r3, r2
 801522e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015232:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8015236:	4611      	mov	r1, r2
 8015238:	4618      	mov	r0, r3
 801523a:	f7fc fef3 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801523e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015242:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	461a      	mov	r2, r3
 801524a:	f8c7 4374 	str.w	r4, [r7, #884]	; 0x374
 801524e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015252:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 8015256:	601a      	str	r2, [r3, #0]
        color = newColor;
 8015258:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801525c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8015260:	f5a2 726b 	sub.w	r2, r2, #940	; 0x3ac
 8015264:	6812      	ldr	r2, [r2, #0]
 8015266:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015268:	bf00      	nop
    textArea2_3.setLinespacing(0);
 801526a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801526e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8015278:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 801527c:	2300      	movs	r3, #0
 801527e:	f8a7 337a 	strh.w	r3, [r7, #890]	; 0x37a
        linespace = space;
 8015282:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8015286:	f8b7 237a 	ldrh.w	r2, [r7, #890]	; 0x37a
 801528a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801528c:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3384      	adds	r3, #132	; 0x84
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	f8d7 437c 	ldr.w	r4, [r7, #892]	; 0x37c
 801529a:	463a      	mov	r2, r7
 801529c:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 80152a0:	4610      	mov	r0, r2
 80152a2:	4798      	blx	r3
 80152a4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80152a8:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80152ac:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80152b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80152b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80152b6:	bf00      	nop
    textArea2_3Buffer[0] = 0;
 80152b8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80152bc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2200      	movs	r2, #0
 80152c4:	f8a3 2c10 	strh.w	r2, [r3, #3088]	; 0xc10
    textArea2_3.setWildcard(textArea2_3Buffer);
 80152c8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80152cc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	f603 02fc 	addw	r2, r3, #2300	; 0x8fc
 80152d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80152da:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 80152e4:	4619      	mov	r1, r3
 80152e6:	4610      	mov	r0, r2
 80152e8:	f7fd fc12 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_3.resizeToCurrentText();
 80152ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80152f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80152fa:	4618      	mov	r0, r3
 80152fc:	f006 f970 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Y80E));
 8015300:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015304:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f603 04fc 	addw	r4, r3, #2300	; 0x8fc
 801530e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8015312:	2112      	movs	r1, #18
 8015314:	4618      	mov	r0, r3
 8015316:	f7fd fa0d 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801531a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801531e:	4619      	mov	r1, r3
 8015320:	4620      	mov	r0, r4
 8015322:	f006 f97d 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015326:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801532a:	4618      	mov	r0, r3
 801532c:	f7fb ffc0 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_4.setXY(445, 232);
 8015330:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015334:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 801533e:	22e8      	movs	r2, #232	; 0xe8
 8015340:	f240 11bd 	movw	r1, #445	; 0x1bd
 8015344:	4618      	mov	r0, r3
 8015346:	f7fc ff70 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_4.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 801534a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801534e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8015358:	2346      	movs	r3, #70	; 0x46
 801535a:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383
 801535e:	239d      	movs	r3, #157	; 0x9d
 8015360:	f887 3382 	strb.w	r3, [r7, #898]	; 0x382
 8015364:	23c2      	movs	r3, #194	; 0xc2
 8015366:	f887 3381 	strb.w	r3, [r7, #897]	; 0x381
 801536a:	f897 3383 	ldrb.w	r3, [r7, #899]	; 0x383
 801536e:	041b      	lsls	r3, r3, #16
 8015370:	461a      	mov	r2, r3
 8015372:	f897 3382 	ldrb.w	r3, [r7, #898]	; 0x382
 8015376:	021b      	lsls	r3, r3, #8
 8015378:	431a      	orrs	r2, r3
 801537a:	f897 3381 	ldrb.w	r3, [r7, #897]	; 0x381
 801537e:	4313      	orrs	r3, r2
 8015380:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015384:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8015388:	4611      	mov	r1, r2
 801538a:	4618      	mov	r0, r3
 801538c:	f7fc fe4a 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8015390:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015394:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	461a      	mov	r2, r3
 801539c:	f8c7 4384 	str.w	r4, [r7, #900]	; 0x384
 80153a0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80153a4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80153a8:	601a      	str	r2, [r3, #0]
        color = newColor;
 80153aa:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80153ae:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80153b2:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 80153b6:	6812      	ldr	r2, [r2, #0]
 80153b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80153ba:	bf00      	nop
    textArea2_4.setLinespacing(0);
 80153bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80153c0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80153ca:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80153ce:	2300      	movs	r3, #0
 80153d0:	f8a7 338a 	strh.w	r3, [r7, #906]	; 0x38a
        linespace = space;
 80153d4:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80153d8:	f8b7 238a 	ldrh.w	r2, [r7, #906]	; 0x38a
 80153dc:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80153de:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	3384      	adds	r3, #132	; 0x84
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f8d7 438c 	ldr.w	r4, [r7, #908]	; 0x38c
 80153ec:	463a      	mov	r2, r7
 80153ee:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 80153f2:	4610      	mov	r0, r2
 80153f4:	4798      	blx	r3
 80153f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80153fa:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80153fe:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8015402:	ca07      	ldmia	r2, {r0, r1, r2}
 8015404:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015408:	bf00      	nop
    textArea2_4Buffer[0] = 0;
 801540a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801540e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	2200      	movs	r2, #0
 8015416:	f8a3 2c1c 	strh.w	r2, [r3, #3100]	; 0xc1c
    textArea2_4.setWildcard(textArea2_4Buffer);
 801541a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801541e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8015428:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801542c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8015436:	4619      	mov	r1, r3
 8015438:	4610      	mov	r0, r2
 801543a:	f7fd fb69 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_4.resizeToCurrentText();
 801543e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015442:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	f603 1348 	addw	r3, r3, #2376	; 0x948
 801544c:	4618      	mov	r0, r3
 801544e:	f006 f8c7 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9AWJ));
 8015452:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015456:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	f603 1448 	addw	r4, r3, #2376	; 0x948
 8015460:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8015464:	2113      	movs	r1, #19
 8015466:	4618      	mov	r0, r3
 8015468:	f7fd f964 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 801546c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8015470:	4619      	mov	r1, r3
 8015472:	4620      	mov	r0, r4
 8015474:	f006 f8d4 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015478:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801547c:	4618      	mov	r0, r3
 801547e:	f7fb ff17 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_5.setXY(445, 282);
 8015482:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015486:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8015490:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8015494:	f240 11bd 	movw	r1, #445	; 0x1bd
 8015498:	4618      	mov	r0, r3
 801549a:	f7fc fec6 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_5.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 801549e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80154a2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f603 1494 	addw	r4, r3, #2452	; 0x994
 80154ac:	2346      	movs	r3, #70	; 0x46
 80154ae:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
 80154b2:	239d      	movs	r3, #157	; 0x9d
 80154b4:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392
 80154b8:	23c2      	movs	r3, #194	; 0xc2
 80154ba:	f887 3391 	strb.w	r3, [r7, #913]	; 0x391
 80154be:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 80154c2:	041b      	lsls	r3, r3, #16
 80154c4:	461a      	mov	r2, r3
 80154c6:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 80154ca:	021b      	lsls	r3, r3, #8
 80154cc:	431a      	orrs	r2, r3
 80154ce:	f897 3391 	ldrb.w	r3, [r7, #913]	; 0x391
 80154d2:	4313      	orrs	r3, r2
 80154d4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80154d8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80154dc:	4611      	mov	r1, r2
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fc fda0 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80154e4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80154e8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	461a      	mov	r2, r3
 80154f0:	f8c7 4394 	str.w	r4, [r7, #916]	; 0x394
 80154f4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80154f8:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80154fc:	601a      	str	r2, [r3, #0]
        color = newColor;
 80154fe:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8015502:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8015506:	f5a2 726d 	sub.w	r2, r2, #948	; 0x3b4
 801550a:	6812      	ldr	r2, [r2, #0]
 801550c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801550e:	bf00      	nop
    textArea2_5.setLinespacing(0);
 8015510:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015514:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f603 1394 	addw	r3, r3, #2452	; 0x994
 801551e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8015522:	2300      	movs	r3, #0
 8015524:	f8a7 339a 	strh.w	r3, [r7, #922]	; 0x39a
        linespace = space;
 8015528:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 801552c:	f8b7 239a 	ldrh.w	r2, [r7, #922]	; 0x39a
 8015530:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8015532:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	3384      	adds	r3, #132	; 0x84
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f8d7 439c 	ldr.w	r4, [r7, #924]	; 0x39c
 8015540:	463a      	mov	r2, r7
 8015542:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8015546:	4610      	mov	r0, r2
 8015548:	4798      	blx	r3
 801554a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801554e:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8015552:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8015556:	ca07      	ldmia	r2, {r0, r1, r2}
 8015558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801555c:	bf00      	nop
    textArea2_5Buffer[0] = 0;
 801555e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015562:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	2200      	movs	r2, #0
 801556a:	f8a3 2c28 	strh.w	r2, [r3, #3112]	; 0xc28
    textArea2_5.setWildcard(textArea2_5Buffer);
 801556e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015572:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f603 1294 	addw	r2, r3, #2452	; 0x994
 801557c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015580:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 801558a:	4619      	mov	r1, r3
 801558c:	4610      	mov	r0, r2
 801558e:	f7fd fabf 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_5.resizeToCurrentText();
 8015592:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015596:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	f603 1394 	addw	r3, r3, #2452	; 0x994
 80155a0:	4618      	mov	r0, r3
 80155a2:	f006 f81d 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AR34));
 80155a6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80155aa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f603 1494 	addw	r4, r3, #2452	; 0x994
 80155b4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80155b8:	2114      	movs	r1, #20
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fd f8ba 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 80155c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80155c4:	4619      	mov	r1, r3
 80155c6:	4620      	mov	r0, r4
 80155c8:	f006 f82a 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80155cc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fb fe6d 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_6.setXY(444, 332);
 80155d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80155da:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80155e4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80155e8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7fc fe1c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_6.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 80155f2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80155f6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	f503 641e 	add.w	r4, r3, #2528	; 0x9e0
 8015600:	2346      	movs	r3, #70	; 0x46
 8015602:	f887 33a3 	strb.w	r3, [r7, #931]	; 0x3a3
 8015606:	239d      	movs	r3, #157	; 0x9d
 8015608:	f887 33a2 	strb.w	r3, [r7, #930]	; 0x3a2
 801560c:	23c2      	movs	r3, #194	; 0xc2
 801560e:	f887 33a1 	strb.w	r3, [r7, #929]	; 0x3a1
 8015612:	f897 33a3 	ldrb.w	r3, [r7, #931]	; 0x3a3
 8015616:	041b      	lsls	r3, r3, #16
 8015618:	461a      	mov	r2, r3
 801561a:	f897 33a2 	ldrb.w	r3, [r7, #930]	; 0x3a2
 801561e:	021b      	lsls	r3, r3, #8
 8015620:	431a      	orrs	r2, r3
 8015622:	f897 33a1 	ldrb.w	r3, [r7, #929]	; 0x3a1
 8015626:	4313      	orrs	r3, r2
 8015628:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801562c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8015630:	4611      	mov	r1, r2
 8015632:	4618      	mov	r0, r3
 8015634:	f7fc fcf6 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8015638:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801563c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	461a      	mov	r2, r3
 8015644:	f8c7 43a4 	str.w	r4, [r7, #932]	; 0x3a4
 8015648:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801564c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8015650:	601a      	str	r2, [r3, #0]
        color = newColor;
 8015652:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8015656:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 801565a:	f5a2 726e 	sub.w	r2, r2, #952	; 0x3b8
 801565e:	6812      	ldr	r2, [r2, #0]
 8015660:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015662:	bf00      	nop
    textArea2_6.setLinespacing(0);
 8015664:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015668:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8015672:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8015676:	2300      	movs	r3, #0
 8015678:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
        linespace = space;
 801567c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8015680:	f8b7 23aa 	ldrh.w	r2, [r7, #938]	; 0x3aa
 8015684:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8015686:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	3384      	adds	r3, #132	; 0x84
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	f8d7 43ac 	ldr.w	r4, [r7, #940]	; 0x3ac
 8015694:	463a      	mov	r2, r7
 8015696:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 801569a:	4610      	mov	r0, r2
 801569c:	4798      	blx	r3
 801569e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156a2:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80156a6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80156aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80156ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80156b0:	bf00      	nop
    textArea2_6Buffer[0] = 0;
 80156b2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156b6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	2200      	movs	r2, #0
 80156be:	f8a3 2c34 	strh.w	r2, [r3, #3124]	; 0xc34
    textArea2_6.setWildcard(textArea2_6Buffer);
 80156c2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156c6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f503 621e 	add.w	r2, r3, #2528	; 0x9e0
 80156d0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156d4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 80156de:	4619      	mov	r1, r3
 80156e0:	4610      	mov	r0, r2
 80156e2:	f7fd fa15 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_6.resizeToCurrentText();
 80156e6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156ea:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80156f4:	4618      	mov	r0, r3
 80156f6:	f005 ff73 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HSZQ));
 80156fa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80156fe:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	f503 641e 	add.w	r4, r3, #2528	; 0x9e0
 8015708:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801570c:	2115      	movs	r1, #21
 801570e:	4618      	mov	r0, r3
 8015710:	f7fd f810 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8015714:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015718:	4619      	mov	r1, r3
 801571a:	4620      	mov	r0, r4
 801571c:	f005 ff80 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015720:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8015724:	4618      	mov	r0, r3
 8015726:	f7fb fdc3 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_7.setXY(444, 382);
 801572a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801572e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8015738:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 801573c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8015740:	4618      	mov	r0, r3
 8015742:	f7fc fd72 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_7.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 8015746:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801574a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8015754:	2346      	movs	r3, #70	; 0x46
 8015756:	f887 33b3 	strb.w	r3, [r7, #947]	; 0x3b3
 801575a:	239d      	movs	r3, #157	; 0x9d
 801575c:	f887 33b2 	strb.w	r3, [r7, #946]	; 0x3b2
 8015760:	23c2      	movs	r3, #194	; 0xc2
 8015762:	f887 33b1 	strb.w	r3, [r7, #945]	; 0x3b1
 8015766:	f897 33b3 	ldrb.w	r3, [r7, #947]	; 0x3b3
 801576a:	041b      	lsls	r3, r3, #16
 801576c:	461a      	mov	r2, r3
 801576e:	f897 33b2 	ldrb.w	r3, [r7, #946]	; 0x3b2
 8015772:	021b      	lsls	r3, r3, #8
 8015774:	431a      	orrs	r2, r3
 8015776:	f897 33b1 	ldrb.w	r3, [r7, #945]	; 0x3b1
 801577a:	4313      	orrs	r3, r2
 801577c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015780:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8015784:	4611      	mov	r1, r2
 8015786:	4618      	mov	r0, r3
 8015788:	f7fc fc4c 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 801578c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	461a      	mov	r2, r3
 8015798:	f8c7 43b4 	str.w	r4, [r7, #948]	; 0x3b4
 801579c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80157a0:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80157a4:	601a      	str	r2, [r3, #0]
        color = newColor;
 80157a6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 80157aa:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80157ae:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80157b2:	6812      	ldr	r2, [r2, #0]
 80157b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80157b6:	bf00      	nop
    textArea2_7.setLinespacing(0);
 80157b8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80157bc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80157c6:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80157ca:	2300      	movs	r3, #0
 80157cc:	f8a7 33ba 	strh.w	r3, [r7, #954]	; 0x3ba
        linespace = space;
 80157d0:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80157d4:	f8b7 23ba 	ldrh.w	r2, [r7, #954]	; 0x3ba
 80157d8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80157da:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	3384      	adds	r3, #132	; 0x84
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f8d7 43bc 	ldr.w	r4, [r7, #956]	; 0x3bc
 80157e8:	463a      	mov	r2, r7
 80157ea:	f8d7 13bc 	ldr.w	r1, [r7, #956]	; 0x3bc
 80157ee:	4610      	mov	r0, r2
 80157f0:	4798      	blx	r3
 80157f2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80157f6:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 80157fa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80157fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8015800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015804:	bf00      	nop
    textArea2_7Buffer[0] = 0;
 8015806:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801580a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	2200      	movs	r2, #0
 8015812:	f8a3 2c40 	strh.w	r2, [r3, #3136]	; 0xc40
    textArea2_7.setWildcard(textArea2_7Buffer);
 8015816:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801581a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 8015824:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015828:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8015832:	4619      	mov	r1, r3
 8015834:	4610      	mov	r0, r2
 8015836:	f7fd f96b 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_7.resizeToCurrentText();
 801583a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801583e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8015848:	4618      	mov	r0, r3
 801584a:	f005 fec9 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NB6D));
 801584e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015852:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 801585c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8015860:	2116      	movs	r1, #22
 8015862:	4618      	mov	r0, r3
 8015864:	f7fc ff66 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8015868:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801586c:	4619      	mov	r1, r3
 801586e:	4620      	mov	r0, r4
 8015870:	f005 fed6 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015874:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8015878:	4618      	mov	r0, r3
 801587a:	f7fb fd19 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_8.setXY(611, 13);
 801587e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015882:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 801588c:	220d      	movs	r2, #13
 801588e:	f240 2163 	movw	r1, #611	; 0x263
 8015892:	4618      	mov	r0, r3
 8015894:	f7fc fcc9 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_8.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 8015898:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801589c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	f603 2478 	addw	r4, r3, #2680	; 0xa78
 80158a6:	2346      	movs	r3, #70	; 0x46
 80158a8:	f887 33c3 	strb.w	r3, [r7, #963]	; 0x3c3
 80158ac:	239d      	movs	r3, #157	; 0x9d
 80158ae:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
 80158b2:	23c2      	movs	r3, #194	; 0xc2
 80158b4:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
 80158b8:	f897 33c3 	ldrb.w	r3, [r7, #963]	; 0x3c3
 80158bc:	041b      	lsls	r3, r3, #16
 80158be:	461a      	mov	r2, r3
 80158c0:	f897 33c2 	ldrb.w	r3, [r7, #962]	; 0x3c2
 80158c4:	021b      	lsls	r3, r3, #8
 80158c6:	431a      	orrs	r2, r3
 80158c8:	f897 33c1 	ldrb.w	r3, [r7, #961]	; 0x3c1
 80158cc:	4313      	orrs	r3, r2
 80158ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80158d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80158d6:	4611      	mov	r1, r2
 80158d8:	4618      	mov	r0, r3
 80158da:	f7fc fba3 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 80158de:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80158e2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	461a      	mov	r2, r3
 80158ea:	f8c7 43c4 	str.w	r4, [r7, #964]	; 0x3c4
 80158ee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80158f2:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80158f6:	601a      	str	r2, [r3, #0]
        color = newColor;
 80158f8:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80158fc:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8015900:	f5a2 7270 	sub.w	r2, r2, #960	; 0x3c0
 8015904:	6812      	ldr	r2, [r2, #0]
 8015906:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015908:	bf00      	nop
    textArea2_8.setLinespacing(0);
 801590a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801590e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8015918:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 801591c:	2300      	movs	r3, #0
 801591e:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        linespace = space;
 8015922:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8015926:	f8b7 23ca 	ldrh.w	r2, [r7, #970]	; 0x3ca
 801592a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801592c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	3384      	adds	r3, #132	; 0x84
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	f8d7 43cc 	ldr.w	r4, [r7, #972]	; 0x3cc
 801593a:	463a      	mov	r2, r7
 801593c:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 8015940:	4610      	mov	r0, r2
 8015942:	4798      	blx	r3
 8015944:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015948:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 801594c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8015950:	ca07      	ldmia	r2, {r0, r1, r2}
 8015952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015956:	bf00      	nop
    textArea2_8Buffer[0] = 0;
 8015958:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801595c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	2200      	movs	r2, #0
 8015964:	f8a3 2c4c 	strh.w	r2, [r3, #3148]	; 0xc4c
    textArea2_8.setWildcard(textArea2_8Buffer);
 8015968:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801596c:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f603 2278 	addw	r2, r3, #2680	; 0xa78
 8015976:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801597a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8015984:	4619      	mov	r1, r3
 8015986:	4610      	mov	r0, r2
 8015988:	f7fd f8c2 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_8.resizeToCurrentText();
 801598c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015990:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 801599a:	4618      	mov	r0, r3
 801599c:	f005 fe20 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_8.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F8D8));
 80159a0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80159a4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	f603 2478 	addw	r4, r3, #2680	; 0xa78
 80159ae:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80159b2:	2117      	movs	r1, #23
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7fc febd 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 80159ba:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80159be:	4619      	mov	r1, r3
 80159c0:	4620      	mov	r0, r4
 80159c2:	f005 fe2d 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80159c6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fb fc70 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    textArea2_9.setXY(610, 47);
 80159d0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80159d4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 80159de:	222f      	movs	r2, #47	; 0x2f
 80159e0:	f240 2162 	movw	r1, #610	; 0x262
 80159e4:	4618      	mov	r0, r3
 80159e6:	f7fc fc20 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    textArea2_9.setColor(touchgfx::Color::getColorFromRGB(70, 157, 194));
 80159ea:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80159ee:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 80159f8:	2346      	movs	r3, #70	; 0x46
 80159fa:	f887 33d3 	strb.w	r3, [r7, #979]	; 0x3d3
 80159fe:	239d      	movs	r3, #157	; 0x9d
 8015a00:	f887 33d2 	strb.w	r3, [r7, #978]	; 0x3d2
 8015a04:	23c2      	movs	r3, #194	; 0xc2
 8015a06:	f887 33d1 	strb.w	r3, [r7, #977]	; 0x3d1
 8015a0a:	f897 33d3 	ldrb.w	r3, [r7, #979]	; 0x3d3
 8015a0e:	041b      	lsls	r3, r3, #16
 8015a10:	461a      	mov	r2, r3
 8015a12:	f897 33d2 	ldrb.w	r3, [r7, #978]	; 0x3d2
 8015a16:	021b      	lsls	r3, r3, #8
 8015a18:	431a      	orrs	r2, r3
 8015a1a:	f897 33d1 	ldrb.w	r3, [r7, #977]	; 0x3d1
 8015a1e:	4313      	orrs	r3, r2
 8015a20:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015a24:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8015a28:	4611      	mov	r1, r2
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fc fafa 	bl	8012024 <_ZN8touchgfx9colortypeC1Em>
 8015a30:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015a34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	f8c7 43d4 	str.w	r4, [r7, #980]	; 0x3d4
 8015a40:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015a44:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 8015a48:	601a      	str	r2, [r3, #0]
        color = newColor;
 8015a4a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8015a4e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8015a52:	f5a2 7271 	sub.w	r2, r2, #964	; 0x3c4
 8015a56:	6812      	ldr	r2, [r2, #0]
 8015a58:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015a5a:	bf00      	nop
    textArea2_9.setLinespacing(0);
 8015a5c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015a60:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8015a6a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8015a6e:	2300      	movs	r3, #0
 8015a70:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
        linespace = space;
 8015a74:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8015a78:	f8b7 23da 	ldrh.w	r2, [r7, #986]	; 0x3da
 8015a7c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8015a7e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	3384      	adds	r3, #132	; 0x84
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	f8d7 43dc 	ldr.w	r4, [r7, #988]	; 0x3dc
 8015a8c:	463a      	mov	r2, r7
 8015a8e:	f8d7 13dc 	ldr.w	r1, [r7, #988]	; 0x3dc
 8015a92:	4610      	mov	r0, r2
 8015a94:	4798      	blx	r3
 8015a96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015a9a:	f5a3 7278 	sub.w	r2, r3, #992	; 0x3e0
 8015a9e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8015aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8015aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015aa8:	bf00      	nop
    textArea2_9Buffer[0] = 0;
 8015aaa:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015aae:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f8a3 2c56 	strh.w	r2, [r3, #3158]	; 0xc56
    textArea2_9.setWildcard(textArea2_9Buffer);
 8015aba:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015abe:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	f603 22c4 	addw	r2, r3, #2756	; 0xac4
 8015ac8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015acc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	f603 4356 	addw	r3, r3, #3158	; 0xc56
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	4610      	mov	r0, r2
 8015ada:	f7fd f819 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea2_9.resizeToCurrentText();
 8015ade:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ae2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8015aec:	4618      	mov	r0, r3
 8015aee:	f005 fd77 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textArea2_9.setTypedText(touchgfx::TypedText(T___SINGLEUSE_72E4));
 8015af2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015af6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	f603 24c4 	addw	r4, r3, #2756	; 0xac4
 8015b00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8015b04:	2118      	movs	r1, #24
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7fc fe14 	bl	8012734 <_ZN8touchgfx9TypedTextC1Et>
 8015b0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8015b10:	4619      	mov	r1, r3
 8015b12:	4620      	mov	r0, r4
 8015b14:	f005 fd84 	bl	801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8015b18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7fb fbc7 	bl	80112b0 <_ZN8touchgfx9TypedTextD1Ev>

    toggleButton1_14_1.setXY(738, 419);
 8015b22:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015b26:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 8015b30:	f240 12a3 	movw	r2, #419	; 0x1a3
 8015b34:	f240 21e2 	movw	r1, #738	; 0x2e2
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f7fc fb76 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1_14_1.setBitmaps(touchgfx::Bitmap(BITMAP_NOK_ID), touchgfx::Bitmap(BITMAP_OK_ID));
 8015b3e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015b42:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f503 6431 	add.w	r4, r3, #2832	; 0xb10
 8015b4c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8015b50:	2106      	movs	r1, #6
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fc faac 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8015b58:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8015b5c:	2108      	movs	r1, #8
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7fc faa6 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8015b64:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8015b68:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f7fc fdcc 	bl	801270c <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    animatedImage1.setXY(606, 204);
 8015b74:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015b78:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8015b82:	22cc      	movs	r2, #204	; 0xcc
 8015b84:	f240 215e 	movw	r1, #606	; 0x25e
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fc fb4e 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    animatedImage1.setBitmaps(BITMAP_FAN_SB_01_ID, BITMAP_FAN_SB_04_ID);
 8015b8e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015b92:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8015b9c:	2203      	movs	r2, #3
 8015b9e:	2100      	movs	r1, #0
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f005 f9ca 	bl	801af3a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(3);
 8015ba6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015baa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 8015bb4:	2103      	movs	r1, #3
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f005 f9d2 	bl	801af60 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
 8015bbc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015bc0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	f603 3048 	addw	r0, r3, #2888	; 0xb48
 8015bca:	2301      	movs	r3, #1
 8015bcc:	2201      	movs	r2, #1
 8015bce:	2100      	movs	r1, #0
 8015bd0:	f005 f916 	bl	801ae00 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>

    animatedImage1_1.setXY(675, 102);
 8015bd4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015bd8:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8015be2:	2266      	movs	r2, #102	; 0x66
 8015be4:	f240 21a3 	movw	r1, #675	; 0x2a3
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7fc fb1e 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    animatedImage1_1.setBitmaps(BITMAP_PUMP_OS2_02_ID, BITMAP_PUMP_OS2_05_ID);
 8015bee:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015bf2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8015bfc:	220d      	movs	r2, #13
 8015bfe:	210a      	movs	r1, #10
 8015c00:	4618      	mov	r0, r3
 8015c02:	f005 f99a 	bl	801af3a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1_1.setUpdateTicksInterval(3);
 8015c06:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c0a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8015c14:	2103      	movs	r1, #3
 8015c16:	4618      	mov	r0, r3
 8015c18:	f005 f9a2 	bl	801af60 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1_1.startAnimation(false, true, true);
 8015c1c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c20:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	2201      	movs	r2, #1
 8015c2e:	2100      	movs	r1, #0
 8015c30:	f005 f8e6 	bl	801ae00 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>

    image1.setXY(654, 92);
 8015c34:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c38:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8015c42:	225c      	movs	r2, #92	; 0x5c
 8015c44:	f240 218e 	movw	r1, #654	; 0x28e
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fc faee 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_PUMP_OS2_MAIN_ID));
 8015c4e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c52:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	f503 643c 	add.w	r4, r3, #3008	; 0xbc0
 8015c5c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8015c60:	210e      	movs	r1, #14
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7fc fa24 	bl	80120b0 <_ZN8touchgfx6BitmapC1Et>
 8015c68:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	4620      	mov	r0, r4
 8015c70:	f005 feae 	bl	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8015c74:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c78:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c82:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	3340      	adds	r3, #64	; 0x40
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	4610      	mov	r0, r2
 8015c8e:	f7fc fc2b 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8015c92:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015c96:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015c9a:	681a      	ldr	r2, [r3, #0]
 8015c9c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ca0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	336c      	adds	r3, #108	; 0x6c
 8015ca8:	4619      	mov	r1, r3
 8015caa:	4610      	mov	r0, r2
 8015cac:	f7fc fc1c 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 8015cb0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cb4:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cbe:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	3398      	adds	r3, #152	; 0x98
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	4610      	mov	r0, r2
 8015cca:	f7fc fc0d 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_1);
 8015cce:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cd2:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015cd6:	681a      	ldr	r2, [r3, #0]
 8015cd8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cdc:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	33d0      	adds	r3, #208	; 0xd0
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	f7fc fbfe 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_2);
 8015cec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cf0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015cfa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8015d04:	4619      	mov	r1, r3
 8015d06:	4610      	mov	r0, r2
 8015d08:	f7fc fbee 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_3);
 8015d0c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d10:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d1a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015d24:	4619      	mov	r1, r3
 8015d26:	4610      	mov	r0, r2
 8015d28:	f7fc fbde 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_4);
 8015d2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d30:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d3a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015d44:	4619      	mov	r1, r3
 8015d46:	4610      	mov	r0, r2
 8015d48:	f7fc fbce 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_5);
 8015d4c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d50:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d54:	681a      	ldr	r2, [r3, #0]
 8015d56:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d5a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8015d64:	4619      	mov	r1, r3
 8015d66:	4610      	mov	r0, r2
 8015d68:	f7fc fbbe 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_6);
 8015d6c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d70:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d7a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015d84:	4619      	mov	r1, r3
 8015d86:	4610      	mov	r0, r2
 8015d88:	f7fc fbae 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_7);
 8015d8c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d90:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015d9a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8015da4:	4619      	mov	r1, r3
 8015da6:	4610      	mov	r0, r2
 8015da8:	f7fc fb9e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8015dac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015db0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015db4:	681a      	ldr	r2, [r3, #0]
 8015db6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015dba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	4610      	mov	r0, r2
 8015dc8:	f7fc fb8e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_1);
 8015dcc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015dd0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015dda:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8015de4:	4619      	mov	r1, r3
 8015de6:	4610      	mov	r0, r2
 8015de8:	f7fc fb7e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_2);
 8015dec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015df0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015dfa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8015e04:	4619      	mov	r1, r3
 8015e06:	4610      	mov	r0, r2
 8015e08:	f7fc fb6e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_3);
 8015e0c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e10:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e14:	681a      	ldr	r2, [r3, #0]
 8015e16:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e1a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8015e24:	4619      	mov	r1, r3
 8015e26:	4610      	mov	r0, r2
 8015e28:	f7fc fb5e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_4);
 8015e2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e30:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e3a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8015e44:	4619      	mov	r1, r3
 8015e46:	4610      	mov	r0, r2
 8015e48:	f7fc fb4e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_5);
 8015e4c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e50:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e54:	681a      	ldr	r2, [r3, #0]
 8015e56:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e5a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8015e64:	4619      	mov	r1, r3
 8015e66:	4610      	mov	r0, r2
 8015e68:	f7fc fb3e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_6);
 8015e6c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e70:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e74:	681a      	ldr	r2, [r3, #0]
 8015e76:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e7a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8015e84:	4619      	mov	r1, r3
 8015e86:	4610      	mov	r0, r2
 8015e88:	f7fc fb2e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_7);
 8015e8c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e90:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015e9a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	4610      	mov	r0, r2
 8015ea8:	f7fc fb1e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8);
 8015eac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015eb0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015eba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	4610      	mov	r0, r2
 8015ec8:	f7fc fb0e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_1);
 8015ecc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ed0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ed4:	681a      	ldr	r2, [r3, #0]
 8015ed6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015eda:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 8015ee4:	4619      	mov	r1, r3
 8015ee6:	4610      	mov	r0, r2
 8015ee8:	f7fc fafe 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_2);
 8015eec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ef0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015efa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8015f04:	4619      	mov	r1, r3
 8015f06:	4610      	mov	r0, r2
 8015f08:	f7fc faee 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_3);
 8015f0c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f10:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f1a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f503 63ae 	add.w	r3, r3, #1392	; 0x570
 8015f24:	4619      	mov	r1, r3
 8015f26:	4610      	mov	r0, r2
 8015f28:	f7fc fade 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_4);
 8015f2c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f30:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f34:	681a      	ldr	r2, [r3, #0]
 8015f36:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f3a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8015f44:	4619      	mov	r1, r3
 8015f46:	4610      	mov	r0, r2
 8015f48:	f7fc face 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_5);
 8015f4c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f50:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f5a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8015f64:	4619      	mov	r1, r3
 8015f66:	4610      	mov	r0, r2
 8015f68:	f7fc fabe 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1_8_6);
 8015f6c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f70:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f7a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8015f84:	4619      	mov	r1, r3
 8015f86:	4610      	mov	r0, r2
 8015f88:	f7fc faae 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_8);
 8015f8c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f90:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f94:	681a      	ldr	r2, [r3, #0]
 8015f96:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015f9a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8015fa4:	4619      	mov	r1, r3
 8015fa6:	4610      	mov	r0, r2
 8015fa8:	f7fc fa9e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_9);
 8015fac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015fb0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015fba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	4610      	mov	r0, r2
 8015fc8:	f7fc fa8e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_10);
 8015fcc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015fd0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015fda:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	4610      	mov	r0, r2
 8015fe8:	f7fc fa7e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_11);
 8015fec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ff0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8015ffa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8016004:	4619      	mov	r1, r3
 8016006:	4610      	mov	r0, r2
 8016008:	f7fc fa6e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_12);
 801600c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016010:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801601a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8016024:	4619      	mov	r1, r3
 8016026:	4610      	mov	r0, r2
 8016028:	f7fc fa5e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_13);
 801602c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016030:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016034:	681a      	ldr	r2, [r3, #0]
 8016036:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801603a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8016044:	4619      	mov	r1, r3
 8016046:	4610      	mov	r0, r2
 8016048:	f7fc fa4e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_14);
 801604c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016050:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801605a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8016064:	4619      	mov	r1, r3
 8016066:	4610      	mov	r0, r2
 8016068:	f7fc fa3e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 801606c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016070:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801607a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8016084:	4619      	mov	r1, r3
 8016086:	4610      	mov	r0, r2
 8016088:	f7fc fa2e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_1);
 801608c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016090:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016094:	681a      	ldr	r2, [r3, #0]
 8016096:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801609a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	f603 0364 	addw	r3, r3, #2148	; 0x864
 80160a4:	4619      	mov	r1, r3
 80160a6:	4610      	mov	r0, r2
 80160a8:	f7fc fa1e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_2);
 80160ac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160b0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160ba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 80160c4:	4619      	mov	r1, r3
 80160c6:	4610      	mov	r0, r2
 80160c8:	f7fc fa0e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_3);
 80160cc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160d0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160d4:	681a      	ldr	r2, [r3, #0]
 80160d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160da:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80160e4:	4619      	mov	r1, r3
 80160e6:	4610      	mov	r0, r2
 80160e8:	f7fc f9fe 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_4);
 80160ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160f4:	681a      	ldr	r2, [r3, #0]
 80160f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80160fa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8016104:	4619      	mov	r1, r3
 8016106:	4610      	mov	r0, r2
 8016108:	f7fc f9ee 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_5);
 801610c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016110:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801611a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8016124:	4619      	mov	r1, r3
 8016126:	4610      	mov	r0, r2
 8016128:	f7fc f9de 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_6);
 801612c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016130:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801613a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8016144:	4619      	mov	r1, r3
 8016146:	4610      	mov	r0, r2
 8016148:	f7fc f9ce 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_7);
 801614c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016150:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016154:	681a      	ldr	r2, [r3, #0]
 8016156:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801615a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8016164:	4619      	mov	r1, r3
 8016166:	4610      	mov	r0, r2
 8016168:	f7fc f9be 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_8);
 801616c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016170:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801617a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8016184:	4619      	mov	r1, r3
 8016186:	4610      	mov	r0, r2
 8016188:	f7fc f9ae 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2_9);
 801618c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016190:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016194:	681a      	ldr	r2, [r3, #0]
 8016196:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801619a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 80161a4:	4619      	mov	r1, r3
 80161a6:	4610      	mov	r0, r2
 80161a8:	f7fc f99e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1_14_1);
 80161ac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161b0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161b4:	681a      	ldr	r2, [r3, #0]
 80161b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161ba:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80161c4:	4619      	mov	r1, r3
 80161c6:	4610      	mov	r0, r2
 80161c8:	f7fc f98e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(animatedImage1);
 80161cc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161d0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161d4:	681a      	ldr	r2, [r3, #0]
 80161d6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161da:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f603 3348 	addw	r3, r3, #2888	; 0xb48
 80161e4:	4619      	mov	r1, r3
 80161e6:	4610      	mov	r0, r2
 80161e8:	f7fc f97e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(animatedImage1_1);
 80161ec:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161f0:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80161fa:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8016204:	4619      	mov	r1, r3
 8016206:	4610      	mov	r0, r2
 8016208:	f7fc f96e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 801620c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016210:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016214:	681a      	ldr	r2, [r3, #0]
 8016216:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801621a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	f503 633c 	add.w	r3, r3, #3008	; 0xbc0
 8016224:	4619      	mov	r1, r3
 8016226:	4610      	mov	r0, r2
 8016228:	f7fc f95e 	bl	80124e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801622c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8016230:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	4618      	mov	r0, r3
 8016238:	f507 7779 	add.w	r7, r7, #996	; 0x3e4
 801623c:	46bd      	mov	sp, r7
 801623e:	bd90      	pop	{r4, r7, pc}

08016240 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8016240:	b480      	push	{r7}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]

}
 8016248:	bf00      	nop
 801624a:	370c      	adds	r7, #12
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr

08016254 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6039      	str	r1, [r7, #0]
    if (&src == &toggleButton1)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	3398      	adds	r3, #152	; 0x98
 8016262:	683a      	ldr	r2, [r7, #0]
 8016264:	429a      	cmp	r2, r3
 8016266:	d106      	bne.n	8016276 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //SPR_ON_Click
        //When toggleButton1 clicked call virtual function
        //Call SPR
        SPR();
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	332c      	adds	r3, #44	; 0x2c
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	4798      	blx	r3
        //ZEWZRD_ON_Click
        //When toggleButton1_7 clicked call virtual function
        //Call ZEWZRD
        ZEWZRD();
    }
}
 8016274:	e058      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_1)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	33d0      	adds	r3, #208	; 0xd0
 801627a:	683a      	ldr	r2, [r7, #0]
 801627c:	429a      	cmp	r2, r3
 801627e:	d106      	bne.n	801628e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        PDZ();
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	3330      	adds	r3, #48	; 0x30
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	4798      	blx	r3
}
 801628c:	e04c      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_2)
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8016294:	683a      	ldr	r2, [r7, #0]
 8016296:	429a      	cmp	r2, r3
 8016298:	d106      	bne.n	80162a8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x54>
        PCO();
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	3334      	adds	r3, #52	; 0x34
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	4798      	blx	r3
}
 80162a6:	e03f      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_3)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80162ae:	683a      	ldr	r2, [r7, #0]
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d106      	bne.n	80162c2 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x6e>
        PCWU();
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	3338      	adds	r3, #56	; 0x38
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	4798      	blx	r3
}
 80162c0:	e032      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_4)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80162c8:	683a      	ldr	r2, [r7, #0]
 80162ca:	429a      	cmp	r2, r3
 80162cc:	d106      	bne.n	80162dc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
        Z3D();
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	333c      	adds	r3, #60	; 0x3c
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	4798      	blx	r3
}
 80162da:	e025      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_5)
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d106      	bne.n	80162f6 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa2>
        GR1();
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	3340      	adds	r3, #64	; 0x40
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	4798      	blx	r3
}
 80162f4:	e018      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_6)
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80162fc:	683a      	ldr	r2, [r7, #0]
 80162fe:	429a      	cmp	r2, r3
 8016300:	d106      	bne.n	8016310 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xbc>
        GR2();
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	3344      	adds	r3, #68	; 0x44
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	4798      	blx	r3
}
 801630e:	e00b      	b.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
    else if (&src == &toggleButton1_7)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	429a      	cmp	r2, r3
 801631a:	d105      	bne.n	8016328 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd4>
        ZEWZRD();
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	3348      	adds	r3, #72	; 0x48
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	4798      	blx	r3
}
 8016328:	bf00      	nop
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}

08016330 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	4618      	mov	r0, r3
 801633c:	f008 fb08 	bl	801e950 <_ZN8touchgfx6ScreenC1Ev>
 8016340:	4a05      	ldr	r2, [pc, #20]	; (8016358 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	601a      	str	r2, [r3, #0]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2200      	movs	r2, #0
 801634a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	4618      	mov	r0, r3
 8016350:	3708      	adds	r7, #8
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	0802e5e8 	.word	0x0802e5e8

0801635c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	4a04      	ldr	r2, [pc, #16]	; (8016378 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	601a      	str	r2, [r3, #0]
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	4618      	mov	r0, r3
 801636e:	370c      	adds	r7, #12
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr
 8016378:	0802e6ac 	.word	0x0802e6ac

0801637c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	60f8      	str	r0, [r7, #12]
 8016384:	60b9      	str	r1, [r7, #8]
 8016386:	4639      	mov	r1, r7
 8016388:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff ffe4 	bl	801635c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8016394:	4a08      	ldr	r2, [pc, #32]	; (80163b8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	601a      	str	r2, [r3, #0]
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	68ba      	ldr	r2, [r7, #8]
 801639e:	605a      	str	r2, [r3, #4]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	3308      	adds	r3, #8
 80163a4:	463a      	mov	r2, r7
 80163a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80163aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	4618      	mov	r0, r3
 80163b2:	3710      	adds	r7, #16
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}
 80163b8:	0802e5d0 	.word	0x0802e5d0

080163bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
    }
 80163c4:	4a04      	ldr	r2, [pc, #16]	; (80163d8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	601a      	str	r2, [r3, #0]
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	4618      	mov	r0, r3
 80163ce:	370c      	adds	r7, #12
 80163d0:	46bd      	mov	sp, r7
 80163d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d6:	4770      	bx	lr
 80163d8:	0802e6ac 	.word	0x0802e6ac

080163dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
    }
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f7ff ffe9 	bl	80163bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80163ea:	2104      	movs	r1, #4
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f015 fa52 	bl	802b896 <_ZdlPvj>
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4618      	mov	r0, r3
 80163f6:	3708      	adds	r7, #8
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}

080163fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	4a05      	ldr	r2, [pc, #20]	; (801641c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	601a      	str	r2, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4618      	mov	r0, r3
 801640e:	f7ff ffd5 	bl	80163bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	4618      	mov	r0, r3
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	0802e5d0 	.word	0x0802e5d0

08016420 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8016420:	b580      	push	{r7, lr}
 8016422:	b082      	sub	sp, #8
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	f7ff ffe7 	bl	80163fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801642e:	2110      	movs	r1, #16
 8016430:	6878      	ldr	r0, [r7, #4]
 8016432:	f015 fa30 	bl	802b896 <_ZdlPvj>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	4618      	mov	r0, r3
 801643a:	3708      	adds	r7, #8
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}

08016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8016440:	b580      	push	{r7, lr}
 8016442:	b082      	sub	sp, #8
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
 8016448:	4a05      	ldr	r2, [pc, #20]	; (8016460 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	601a      	str	r2, [r3, #0]
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	4618      	mov	r0, r3
 8016452:	f7fc fb0b 	bl	8012a6c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	4618      	mov	r0, r3
 801645a:	3708      	adds	r7, #8
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	0802e61c 	.word	0x0802e61c

08016464 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7ff ffe7 	bl	8016440 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8016472:	214c      	movs	r1, #76	; 0x4c
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f015 fa0e 	bl	802b896 <_ZdlPvj>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	4618      	mov	r0, r3
 801647e:	3708      	adds	r7, #8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	4a05      	ldr	r2, [pc, #20]	; (80164a4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	601a      	str	r2, [r3, #0]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4618      	mov	r0, r3
 8016496:	f7fb fe4b 	bl	8012130 <_ZN8touchgfx8DrawableD1Ev>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	4618      	mov	r0, r3
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	0802ed08 	.word	0x0802ed08

080164a8 <_ZN8touchgfx9ContainerD0Ev>:
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f7ff ffe7 	bl	8016484 <_ZN8touchgfx9ContainerD1Ev>
 80164b6:	212c      	movs	r1, #44	; 0x2c
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f015 f9ec 	bl	802b896 <_ZdlPvj>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	4618      	mov	r0, r3
 80164c2:	3708      	adds	r7, #8
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	4a05      	ldr	r2, [pc, #20]	; (80164e8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	601a      	str	r2, [r3, #0]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	4618      	mov	r0, r3
 80164da:	f7fc f849 	bl	8012570 <_ZN8touchgfx6WidgetD1Ev>
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	4618      	mov	r0, r3
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	0802f0e0 	.word	0x0802f0e0

080164ec <_ZN8touchgfx3BoxD0Ev>:
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f7ff ffe7 	bl	80164c8 <_ZN8touchgfx3BoxD1Ev>
 80164fa:	212c      	movs	r1, #44	; 0x2c
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f015 f9ca 	bl	802b896 <_ZdlPvj>
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	4618      	mov	r0, r3
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}

0801650c <_ZN8touchgfx12ToggleButtonD1Ev>:
 801650c:	b580      	push	{r7, lr}
 801650e:	b082      	sub	sp, #8
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	4a05      	ldr	r2, [pc, #20]	; (801652c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	601a      	str	r2, [r3, #0]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	4618      	mov	r0, r3
 801651e:	f7fc fd37 	bl	8012f90 <_ZN8touchgfx6ButtonD1Ev>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	4618      	mov	r0, r3
 8016526:	3708      	adds	r7, #8
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}
 801652c:	0802ef60 	.word	0x0802ef60

08016530 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7ff ffe7 	bl	801650c <_ZN8touchgfx12ToggleButtonD1Ev>
 801653e:	2138      	movs	r1, #56	; 0x38
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f015 f9a8 	bl	802b896 <_ZdlPvj>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	4618      	mov	r0, r3
 801654a:	3708      	adds	r7, #8
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <_ZN8touchgfx13AnimatedImageD1Ev>:
class AnimatedImage : public Image
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
 8016558:	4a05      	ldr	r2, [pc, #20]	; (8016570 <_ZN8touchgfx13AnimatedImageD1Ev+0x20>)
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	601a      	str	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	4618      	mov	r0, r3
 8016562:	f7fc fb09 	bl	8012b78 <_ZN8touchgfx5ImageD1Ev>
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	4618      	mov	r0, r3
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	0802efd4 	.word	0x0802efd4

08016574 <_ZN8touchgfx13AnimatedImageD0Ev>:
 8016574:	b580      	push	{r7, lr}
 8016576:	b082      	sub	sp, #8
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f7ff ffe7 	bl	8016550 <_ZN8touchgfx13AnimatedImageD1Ev>
 8016582:	213c      	movs	r1, #60	; 0x3c
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f015 f986 	bl	802b896 <_ZdlPvj>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	4618      	mov	r0, r3
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}

08016594 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	68d2      	ldr	r2, [r2, #12]
 80165a6:	1052      	asrs	r2, r2, #1
 80165a8:	1898      	adds	r0, r3, r2
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	f003 0301 	and.w	r3, r3, #1
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d102      	bne.n	80165bc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	689b      	ldr	r3, [r3, #8]
 80165ba:	e00a      	b.n	80165d2 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	68d2      	ldr	r2, [r2, #12]
 80165c4:	1052      	asrs	r2, r2, #1
 80165c6:	4413      	add	r3, r2
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	6892      	ldr	r2, [r2, #8]
 80165ce:	4413      	add	r3, r2
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	6839      	ldr	r1, [r7, #0]
 80165d4:	4798      	blx	r3
    }
 80165d6:	bf00      	nop
 80165d8:	3708      	adds	r7, #8
 80165da:	46bd      	mov	sp, r7
 80165dc:	bd80      	pop	{r7, pc}

080165de <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80165de:	b480      	push	{r7}
 80165e0:	b083      	sub	sp, #12
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d010      	beq.n	8016610 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	689b      	ldr	r3, [r3, #8]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d107      	bne.n	8016606 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	68db      	ldr	r3, [r3, #12]
 80165fa:	f003 0301 	and.w	r3, r3, #1
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d101      	bne.n	8016606 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8016602:	2301      	movs	r3, #1
 8016604:	e000      	b.n	8016608 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8016606:	2300      	movs	r3, #0
 8016608:	2b01      	cmp	r3, #1
 801660a:	d001      	beq.n	8016610 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801660c:	2301      	movs	r3, #1
 801660e:	e000      	b.n	8016612 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8016610:	2300      	movs	r3, #0
    }
 8016612:	4618      	mov	r0, r3
 8016614:	370c      	adds	r7, #12
 8016616:	46bd      	mov	sp, r7
 8016618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661c:	4770      	bx	lr
	...

08016620 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8016620:	b480      	push	{r7}
 8016622:	af00      	add	r7, sp, #0
    return bitmap_database;
 8016624:	4b02      	ldr	r3, [pc, #8]	; (8016630 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8016626:	4618      	mov	r0, r3
 8016628:	46bd      	mov	sp, r7
 801662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662e:	4770      	bx	lr
 8016630:	0802e724 	.word	0x0802e724

08016634 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8016634:	b480      	push	{r7}
 8016636:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8016638:	230f      	movs	r3, #15
}
 801663a:	4618      	mov	r0, r3
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8016644:	b480      	push	{r7}
 8016646:	b085      	sub	sp, #20
 8016648:	af00      	add	r7, sp, #0
 801664a:	60f8      	str	r0, [r7, #12]
 801664c:	460b      	mov	r3, r1
 801664e:	607a      	str	r2, [r7, #4]
 8016650:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8016652:	2300      	movs	r3, #0
    }
 8016654:	4618      	mov	r0, r3
 8016656:	3714      	adds	r7, #20
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr

08016660 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8016660:	b480      	push	{r7}
 8016662:	b083      	sub	sp, #12
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8016668:	2300      	movs	r3, #0
    }
 801666a:	4618      	mov	r0, r3
 801666c:	370c      	adds	r7, #12
 801666e:	46bd      	mov	sp, r7
 8016670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016674:	4770      	bx	lr

08016676 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8016676:	b480      	push	{r7}
 8016678:	b083      	sub	sp, #12
 801667a:	af00      	add	r7, sp, #0
 801667c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801667e:	2300      	movs	r3, #0
    }
 8016680:	4618      	mov	r0, r3
 8016682:	370c      	adds	r7, #12
 8016684:	46bd      	mov	sp, r7
 8016686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668a:	4770      	bx	lr

0801668c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801668c:	b480      	push	{r7}
 801668e:	b085      	sub	sp, #20
 8016690:	af00      	add	r7, sp, #0
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	4613      	mov	r3, r2
 8016698:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 801669a:	4a07      	ldr	r2, [pc, #28]	; (80166b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	6013      	str	r3, [r2, #0]
        fonts = f;
 80166a0:	4a06      	ldr	r2, [pc, #24]	; (80166bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80166a2:	68bb      	ldr	r3, [r7, #8]
 80166a4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80166a6:	4a06      	ldr	r2, [pc, #24]	; (80166c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80166a8:	88fb      	ldrh	r3, [r7, #6]
 80166aa:	8013      	strh	r3, [r2, #0]
    }
 80166ac:	bf00      	nop
 80166ae:	3714      	adds	r7, #20
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr
 80166b8:	2000b514 	.word	0x2000b514
 80166bc:	2000b51c 	.word	0x2000b51c
 80166c0:	2000b518 	.word	0x2000b518

080166c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80166c4:	b40e      	push	{r1, r2, r3}
 80166c6:	b580      	push	{r7, lr}
 80166c8:	b085      	sub	sp, #20
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 80166ce:	f107 0320 	add.w	r3, r7, #32
 80166d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	69fa      	ldr	r2, [r7, #28]
 80166d8:	2100      	movs	r1, #0
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f007 fd7e 	bl	801e1dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80166e0:	4603      	mov	r3, r0
 80166e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80166e4:	89fb      	ldrh	r3, [r7, #14]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3714      	adds	r7, #20
 80166ea:	46bd      	mov	sp, r7
 80166ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80166f0:	b003      	add	sp, #12
 80166f2:	4770      	bx	lr

080166f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80166f4:	b40c      	push	{r2, r3}
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b084      	sub	sp, #16
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
 80166fe:	460b      	mov	r3, r1
 8016700:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8016702:	f107 031c 	add.w	r3, r7, #28
 8016706:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8016708:	78f9      	ldrb	r1, [r7, #3]
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	69ba      	ldr	r2, [r7, #24]
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f007 fd64 	bl	801e1dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8016714:	4603      	mov	r3, r0
 8016716:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8016718:	89fb      	ldrh	r3, [r7, #14]
}
 801671a:	4618      	mov	r0, r3
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016724:	b002      	add	sp, #8
 8016726:	4770      	bx	lr

08016728 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b08a      	sub	sp, #40	; 0x28
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	460b      	mov	r3, r1
 8016732:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016738:	2b00      	cmp	r3, #0
 801673a:	d016      	beq.n	801676a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	3322      	adds	r3, #34	; 0x22
 8016740:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8016742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016744:	8adb      	ldrh	r3, [r3, #22]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d105      	bne.n	8016756 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 801674a:	4b43      	ldr	r3, [pc, #268]	; (8016858 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 801674c:	4a43      	ldr	r2, [pc, #268]	; (801685c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 801674e:	21c0      	movs	r1, #192	; 0xc0
 8016750:	4843      	ldr	r0, [pc, #268]	; (8016860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8016752:	f015 f8cf 	bl	802b8f4 <__assert_func>
            return buffer[pos];
 8016756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016758:	8a9b      	ldrh	r3, [r3, #20]
 801675a:	461a      	mov	r2, r3
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d001      	beq.n	801676a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8016766:	2301      	movs	r3, #1
 8016768:	e000      	b.n	801676c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 801676a:	2300      	movs	r3, #0
 801676c:	2b00      	cmp	r3, #0
 801676e:	d06a      	beq.n	8016846 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f008 ffc8 	bl	801f706 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	3322      	adds	r3, #34	; 0x22
 801677a:	623b      	str	r3, [r7, #32]
 801677c:	2301      	movs	r3, #1
 801677e:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8016780:	6a3b      	ldr	r3, [r7, #32]
 8016782:	8adb      	ldrh	r3, [r3, #22]
 8016784:	8bfa      	ldrh	r2, [r7, #30]
 8016786:	429a      	cmp	r2, r3
 8016788:	d305      	bcc.n	8016796 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 801678a:	4b36      	ldr	r3, [pc, #216]	; (8016864 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 801678c:	4a36      	ldr	r2, [pc, #216]	; (8016868 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 801678e:	21c5      	movs	r1, #197	; 0xc5
 8016790:	4833      	ldr	r0, [pc, #204]	; (8016860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8016792:	f015 f8af 	bl	802b8f4 <__assert_func>
            const uint16_t index = pos + offset;
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	8a9a      	ldrh	r2, [r3, #20]
 801679a:	8bfb      	ldrh	r3, [r7, #30]
 801679c:	4413      	add	r3, r2
 801679e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 80167a0:	8bbb      	ldrh	r3, [r7, #28]
 80167a2:	2b09      	cmp	r3, #9
 80167a4:	d801      	bhi.n	80167aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 80167a6:	8bbb      	ldrh	r3, [r7, #28]
 80167a8:	e001      	b.n	80167ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 80167aa:	8bbb      	ldrh	r3, [r7, #28]
 80167ac:	3b0a      	subs	r3, #10
 80167ae:	6a3a      	ldr	r2, [r7, #32]
 80167b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80167b4:	f640 123f 	movw	r2, #2367	; 0x93f
 80167b8:	4293      	cmp	r3, r2
 80167ba:	bf0c      	ite	eq
 80167bc:	2301      	moveq	r3, #1
 80167be:	2300      	movne	r3, #0
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d03f      	beq.n	8016846 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	3322      	adds	r3, #34	; 0x22
 80167ca:	687a      	ldr	r2, [r7, #4]
 80167cc:	3222      	adds	r2, #34	; 0x22
 80167ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 80167d0:	68ba      	ldr	r2, [r7, #8]
 80167d2:	8ad2      	ldrh	r2, [r2, #22]
 80167d4:	2a00      	cmp	r2, #0
 80167d6:	d105      	bne.n	80167e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 80167d8:	4b1f      	ldr	r3, [pc, #124]	; (8016858 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80167da:	4a20      	ldr	r2, [pc, #128]	; (801685c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80167dc:	21c0      	movs	r1, #192	; 0xc0
 80167de:	4820      	ldr	r0, [pc, #128]	; (8016860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80167e0:	f015 f888 	bl	802b8f4 <__assert_func>
            return buffer[pos];
 80167e4:	68ba      	ldr	r2, [r7, #8]
 80167e6:	8a92      	ldrh	r2, [r2, #20]
 80167e8:	4611      	mov	r1, r2
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80167f0:	613b      	str	r3, [r7, #16]
 80167f2:	4613      	mov	r3, r2
 80167f4:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	8adb      	ldrh	r3, [r3, #22]
 80167fa:	2b01      	cmp	r3, #1
 80167fc:	d806      	bhi.n	801680c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80167fe:	4b1b      	ldr	r3, [pc, #108]	; (801686c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8016800:	4a1b      	ldr	r2, [pc, #108]	; (8016870 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8016802:	f240 110d 	movw	r1, #269	; 0x10d
 8016806:	4816      	ldr	r0, [pc, #88]	; (8016860 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8016808:	f015 f874 	bl	802b8f4 <__assert_func>
            const uint16_t index = pos + 1;
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	8a9b      	ldrh	r3, [r3, #20]
 8016810:	3301      	adds	r3, #1
 8016812:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8016814:	89bb      	ldrh	r3, [r7, #12]
 8016816:	2b09      	cmp	r3, #9
 8016818:	d801      	bhi.n	801681e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 801681a:	89bb      	ldrh	r3, [r7, #12]
 801681c:	e000      	b.n	8016820 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 801681e:	2300      	movs	r3, #0
 8016820:	693a      	ldr	r2, [r7, #16]
 8016822:	89f9      	ldrh	r1, [r7, #14]
 8016824:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8016828:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3322      	adds	r3, #34	; 0x22
 801682e:	61bb      	str	r3, [r7, #24]
 8016830:	f640 133f 	movw	r3, #2367	; 0x93f
 8016834:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	8a9b      	ldrh	r3, [r3, #20]
 801683a:	4619      	mov	r1, r3
 801683c:	69bb      	ldr	r3, [r7, #24]
 801683e:	8afa      	ldrh	r2, [r7, #22]
 8016840:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8016844:	bf00      	nop
        }
    }
    return getNextChar();
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f008 fe60 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801684c:	4603      	mov	r3, r0
}
 801684e:	4618      	mov	r0, r3
 8016850:	3728      	adds	r7, #40	; 0x28
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}
 8016856:	bf00      	nop
 8016858:	0802dcf4 	.word	0x0802dcf4
 801685c:	0802dd00 	.word	0x0802dd00
 8016860:	0802ddac 	.word	0x0802ddac
 8016864:	0802ddf4 	.word	0x0802ddf4
 8016868:	0802de04 	.word	0x0802de04
 801686c:	0802ded8 	.word	0x0802ded8
 8016870:	0802dee4 	.word	0x0802dee4

08016874 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b082      	sub	sp, #8
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f008 fe0c 	bl	801f49a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8016882:	bf00      	nop
 8016884:	3708      	adds	r7, #8
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}

0801688a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 801688a:	b580      	push	{r7, lr}
 801688c:	b088      	sub	sp, #32
 801688e:	af02      	add	r7, sp, #8
 8016890:	60f8      	str	r0, [r7, #12]
 8016892:	1d38      	adds	r0, r7, #4
 8016894:	e880 0006 	stmia.w	r0, {r1, r2}
 8016898:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 801689a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801689e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80168a0:	1d39      	adds	r1, r7, #4
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	9301      	str	r3, [sp, #4]
 80168a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a8:	9300      	str	r3, [sp, #0]
 80168aa:	6a3b      	ldr	r3, [r7, #32]
 80168ac:	683a      	ldr	r2, [r7, #0]
 80168ae:	68f8      	ldr	r0, [r7, #12]
 80168b0:	f006 f921 	bl	801caf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80168b4:	bf00      	nop
 80168b6:	3718      	adds	r7, #24
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}

080168bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80168bc:	b590      	push	{r4, r7, lr}
 80168be:	b085      	sub	sp, #20
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	4603      	mov	r3, r0
 80168c4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80168c6:	2300      	movs	r3, #0
 80168c8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80168ca:	88fb      	ldrh	r3, [r7, #6]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d127      	bne.n	8016920 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80168d0:	88fb      	ldrh	r3, [r7, #6]
 80168d2:	4a1e      	ldr	r2, [pc, #120]	; (801694c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80168d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d016      	beq.n	801690a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80168dc:	88fb      	ldrh	r3, [r7, #6]
 80168de:	4a1b      	ldr	r2, [pc, #108]	; (801694c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80168e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168e4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	68ba      	ldr	r2, [r7, #8]
 80168ec:	4413      	add	r3, r2
 80168ee:	4a18      	ldr	r2, [pc, #96]	; (8016950 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80168f0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	68ba      	ldr	r2, [r7, #8]
 80168f8:	4413      	add	r3, r2
 80168fa:	4a16      	ldr	r2, [pc, #88]	; (8016954 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80168fc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	689b      	ldr	r3, [r3, #8]
 8016902:	68ba      	ldr	r2, [r7, #8]
 8016904:	4413      	add	r3, r2
 8016906:	60fb      	str	r3, [r7, #12]
 8016908:	e00a      	b.n	8016920 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 801690a:	4b11      	ldr	r3, [pc, #68]	; (8016950 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 801690c:	4a12      	ldr	r2, [pc, #72]	; (8016958 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 801690e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8016910:	4a12      	ldr	r2, [pc, #72]	; (801695c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8016912:	4b10      	ldr	r3, [pc, #64]	; (8016954 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8016914:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8016916:	88fb      	ldrh	r3, [r7, #6]
 8016918:	4a11      	ldr	r2, [pc, #68]	; (8016960 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 801691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801691e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d00d      	beq.n	8016942 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8016926:	4a0f      	ldr	r2, [pc, #60]	; (8016964 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8016928:	88fb      	ldrh	r3, [r7, #6]
 801692a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 801692c:	f000 f83e 	bl	80169ac <_ZN17TypedTextDatabase8getFontsEv>
 8016930:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8016932:	f000 f833 	bl	801699c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8016936:	4603      	mov	r3, r0
 8016938:	461a      	mov	r2, r3
 801693a:	4621      	mov	r1, r4
 801693c:	68f8      	ldr	r0, [r7, #12]
 801693e:	f7ff fea5 	bl	801668c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8016942:	bf00      	nop
 8016944:	3714      	adds	r7, #20
 8016946:	46bd      	mov	sp, r7
 8016948:	bd90      	pop	{r4, r7, pc}
 801694a:	bf00      	nop
 801694c:	200090e8 	.word	0x200090e8
 8016950:	200090f0 	.word	0x200090f0
 8016954:	200090f4 	.word	0x200090f4
 8016958:	0805c268 	.word	0x0805c268
 801695c:	0805c204 	.word	0x0805c204
 8016960:	0805c470 	.word	0x0805c470
 8016964:	200090ec 	.word	0x200090ec

08016968 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8016974:	4b07      	ldr	r3, [pc, #28]	; (8016994 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	4b07      	ldr	r3, [pc, #28]	; (8016998 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 801697a:	6819      	ldr	r1, [r3, #0]
 801697c:	887b      	ldrh	r3, [r7, #2]
 801697e:	009b      	lsls	r3, r3, #2
 8016980:	440b      	add	r3, r1
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	005b      	lsls	r3, r3, #1
 8016986:	4413      	add	r3, r2
}
 8016988:	4618      	mov	r0, r3
 801698a:	370c      	adds	r7, #12
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr
 8016994:	200090f0 	.word	0x200090f0
 8016998:	200090f4 	.word	0x200090f4

0801699c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 801699c:	b480      	push	{r7}
 801699e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 80169a0:	2319      	movs	r3, #25
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	46bd      	mov	sp, r7
 80169a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169aa:	4770      	bx	lr

080169ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80169ac:	b480      	push	{r7}
 80169ae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80169b0:	4b02      	ldr	r3, [pc, #8]	; (80169bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr
 80169bc:	200090f8 	.word	0x200090f8

080169c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_Alef_Bold_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d10e      	bne.n	80169ee <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169d6:	4293      	cmp	r3, r2
 80169d8:	d109      	bne.n	80169ee <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_verdana_20_4bpp()),
 80169da:	f7fa fd99 	bl	8011510 <_Z23getFont_verdana_20_4bppv>
 80169de:	4603      	mov	r3, r0
};
 80169e0:	4a05      	ldr	r2, [pc, #20]	; (80169f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80169e2:	6013      	str	r3, [r2, #0]
    &(getFont_Alef_Bold_20_4bpp())
 80169e4:	f7fa fd3e 	bl	8011464 <_Z25getFont_Alef_Bold_20_4bppv>
 80169e8:	4603      	mov	r3, r0
};
 80169ea:	4a03      	ldr	r2, [pc, #12]	; (80169f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80169ec:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 80169ee:	bf00      	nop
 80169f0:	3708      	adds	r7, #8
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	200090f8 	.word	0x200090f8

080169fc <_GLOBAL__sub_I_touchgfx_fonts>:
 80169fc:	b580      	push	{r7, lr}
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016a04:	2001      	movs	r0, #1
 8016a06:	f7ff ffdb 	bl	80169c0 <_Z41__static_initialization_and_destruction_0ii>
 8016a0a:	bd80      	pop	{r7, pc}

08016a0c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
 8016a14:	4a05      	ldr	r2, [pc, #20]	; (8016a2c <_ZN19FrontendApplicationD1Ev+0x20>)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	601a      	str	r2, [r3, #0]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7fa ffc3 	bl	80119a8 <_ZN23FrontendApplicationBaseD1Ev>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	4618      	mov	r0, r3
 8016a26:	3708      	adds	r7, #8
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}
 8016a2c:	0802e8ac 	.word	0x0802e8ac

08016a30 <_ZN19FrontendApplicationD0Ev>:
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f7ff ffe7 	bl	8016a0c <_ZN19FrontendApplicationD1Ev>
 8016a3e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f014 ff27 	bl	802b896 <_ZdlPvj>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3708      	adds	r7, #8
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b082      	sub	sp, #8
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8016a60:	4618      	mov	r0, r3
 8016a62:	f000 fdad 	bl	80175c0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f006 fbbd 	bl	801d1e8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8016a6e:	bf00      	nop
 8016a70:	3708      	adds	r7, #8
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd80      	pop	{r7, pc}
	...

08016a78 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b084      	sub	sp, #16
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	687a      	ldr	r2, [r7, #4]
 8016a88:	68b9      	ldr	r1, [r7, #8]
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7fa ffdc 	bl	8011a48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8016a90:	4a03      	ldr	r2, [pc, #12]	; (8016aa0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	601a      	str	r2, [r3, #0]
{

}
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3710      	adds	r7, #16
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	0802e8ac 	.word	0x0802e8ac

08016aa4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
    {
    }
 8016aac:	bf00      	nop
 8016aae:	370c      	adds	r7, #12
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr

08016ab8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    {
    }
 8016ac0:	bf00      	nop
 8016ac2:	370c      	adds	r7, #12
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aca:	4770      	bx	lr

08016acc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8016acc:	b480      	push	{r7}
 8016ace:	b083      	sub	sp, #12
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
    {
 8016ad4:	4a04      	ldr	r2, [pc, #16]	; (8016ae8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	601a      	str	r2, [r3, #0]
    }
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	4618      	mov	r0, r3
 8016ade:	370c      	adds	r7, #12
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae6:	4770      	bx	lr
 8016ae8:	0802e930 	.word	0x0802e930

08016aec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b082      	sub	sp, #8
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
    }
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f7ff ffe9 	bl	8016acc <_ZN8touchgfx9PresenterD1Ev>
 8016afa:	2104      	movs	r1, #4
 8016afc:	6878      	ldr	r0, [r7, #4]
 8016afe:	f014 feca 	bl	802b896 <_ZdlPvj>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4618      	mov	r0, r3
 8016b06:	3708      	adds	r7, #8
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	bd80      	pop	{r7, pc}

08016b0c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8016b0c:	b480      	push	{r7}
 8016b0e:	b083      	sub	sp, #12
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
    {
 8016b14:	4a04      	ldr	r2, [pc, #16]	; (8016b28 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	601a      	str	r2, [r3, #0]
    }
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	370c      	adds	r7, #12
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr
 8016b28:	0802e930 	.word	0x0802e930

08016b2c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
 8016b34:	4a06      	ldr	r2, [pc, #24]	; (8016b50 <_ZN13ModelListenerC1Ev+0x24>)
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	605a      	str	r2, [r3, #4]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	4618      	mov	r0, r3
 8016b44:	370c      	adds	r7, #12
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop
 8016b50:	0802e920 	.word	0x0802e920

08016b54 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	4a04      	ldr	r2, [pc, #16]	; (8016b70 <_ZN13ModelListenerD1Ev+0x1c>)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	601a      	str	r2, [r3, #0]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4618      	mov	r0, r3
 8016b66:	370c      	adds	r7, #12
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr
 8016b70:	0802e920 	.word	0x0802e920

08016b74 <_ZN13ModelListenerD0Ev>:
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7ff ffe9 	bl	8016b54 <_ZN13ModelListenerD1Ev>
 8016b82:	2108      	movs	r1, #8
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f014 fe86 	bl	802b896 <_ZdlPvj>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b082      	sub	sp, #8
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
 8016b9c:	4a09      	ldr	r2, [pc, #36]	; (8016bc4 <_ZN13MainPresenterD1Ev+0x30>)
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	601a      	str	r2, [r3, #0]
 8016ba2:	4a09      	ldr	r2, [pc, #36]	; (8016bc8 <_ZN13MainPresenterD1Ev+0x34>)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	605a      	str	r2, [r3, #4]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	3304      	adds	r3, #4
 8016bac:	4618      	mov	r0, r3
 8016bae:	f7ff ffd1 	bl	8016b54 <_ZN13ModelListenerD1Ev>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7ff ff89 	bl	8016acc <_ZN8touchgfx9PresenterD1Ev>
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3708      	adds	r7, #8
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}
 8016bc4:	0802e8f8 	.word	0x0802e8f8
 8016bc8:	0802e910 	.word	0x0802e910

08016bcc <_ZThn4_N13MainPresenterD1Ev>:
 8016bcc:	f1a0 0004 	sub.w	r0, r0, #4
 8016bd0:	e7e0      	b.n	8016b94 <_ZN13MainPresenterD1Ev>
 8016bd2:	bf00      	nop

08016bd4 <_ZN13MainPresenterD0Ev>:
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f7ff ffd9 	bl	8016b94 <_ZN13MainPresenterD1Ev>
 8016be2:	2110      	movs	r1, #16
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f014 fe56 	bl	802b896 <_ZdlPvj>
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	4618      	mov	r0, r3
 8016bee:	3708      	adds	r7, #8
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <_ZThn4_N13MainPresenterD0Ev>:
 8016bf4:	f1a0 0004 	sub.w	r0, r0, #4
 8016bf8:	e7ec      	b.n	8016bd4 <_ZN13MainPresenterD0Ev>
	...

08016bfc <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b082      	sub	sp, #8
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
    : view(v)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7ff ff7f 	bl	8016b0c <_ZN8touchgfx9PresenterC1Ev>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	3304      	adds	r3, #4
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7ff ff8a 	bl	8016b2c <_ZN13ModelListenerC1Ev>
 8016c18:	4a06      	ldr	r2, [pc, #24]	; (8016c34 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	601a      	str	r2, [r3, #0]
 8016c1e:	4a06      	ldr	r2, [pc, #24]	; (8016c38 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	605a      	str	r2, [r3, #4]
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	683a      	ldr	r2, [r7, #0]
 8016c28:	60da      	str	r2, [r3, #12]
{

}
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	0802e8f8 	.word	0x0802e8f8
 8016c38:	0802e910 	.word	0x0802e910

08016c3c <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]

}
 8016c44:	bf00      	nop
 8016c46:	370c      	adds	r7, #12
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4e:	4770      	bx	lr

08016c50 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8016c50:	b480      	push	{r7}
 8016c52:	b083      	sub	sp, #12
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]

}
 8016c58:	bf00      	nop
 8016c5a:	370c      	adds	r7, #12
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c62:	4770      	bx	lr

08016c64 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	4a05      	ldr	r2, [pc, #20]	; (8016c84 <_ZN8MainViewD1Ev+0x20>)
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	601a      	str	r2, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7fc f801 	bl	8012c7c <_ZN12MainViewBaseD1Ev>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	0802e948 	.word	0x0802e948

08016c88 <_ZN8MainViewD0Ev>:
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7ff ffe7 	bl	8016c64 <_ZN8MainViewD1Ev>
 8016c96:	f640 4174 	movw	r1, #3188	; 0xc74
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f014 fdfb 	bl	802b896 <_ZdlPvj>
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3708      	adds	r7, #8
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
	...

08016cac <_ZN8MainViewC1Ev>:
#include "../LIB/BUS.h"




MainView::MainView()
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7fc f9a6 	bl	8013008 <_ZN12MainViewBaseC1Ev>
 8016cbc:	4a07      	ldr	r2, [pc, #28]	; (8016cdc <_ZN8MainViewC1Ev+0x30>)
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	601a      	str	r2, [r3, #0]
{
    counter = 0;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	f883 2c70 	strb.w	r2, [r3, #3184]	; 0xc70
    flag = true;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2201      	movs	r2, #1
 8016cce:	f883 2c71 	strb.w	r2, [r3, #3185]	; 0xc71

}
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	0802e948 	.word	0x0802e948

08016ce0 <_ZN8MainView15handleTickEventEv>:

uint8_t i_flag =0;

void MainView::handleTickEvent(){
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]

	float ccc= -1.2f;
 8016ce8:	4bcc      	ldr	r3, [pc, #816]	; (801701c <_ZN8MainView15handleTickEventEv+0x33c>)
 8016cea:	60fb      	str	r3, [r7, #12]
    counter++;    if(counter%60 == 0) // every 1s    ,
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f893 3c70 	ldrb.w	r3, [r3, #3184]	; 0xc70
 8016cf2:	3301      	adds	r3, #1
 8016cf4:	b2da      	uxtb	r2, r3
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f883 2c70 	strb.w	r2, [r3, #3184]	; 0xc70
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f893 2c70 	ldrb.w	r2, [r3, #3184]	; 0xc70
 8016d02:	4bc7      	ldr	r3, [pc, #796]	; (8017020 <_ZN8MainView15handleTickEventEv+0x340>)
 8016d04:	fba3 1302 	umull	r1, r3, r3, r2
 8016d08:	0959      	lsrs	r1, r3, #5
 8016d0a:	460b      	mov	r3, r1
 8016d0c:	011b      	lsls	r3, r3, #4
 8016d0e:	1a5b      	subs	r3, r3, r1
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	b2db      	uxtb	r3, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	f040 82f0 	bne.w	80172fc <_ZN8MainView15handleTickEventEv+0x61c>
    	//Unicode::snprintfFloat(textArea2Buffer, 5,"%2.1f",ccc);flag = false;
    	//textArea2.setWildcard(textArea2Buffer);
    	//textArea2.resizeToCurrentText();
    	//textArea2.invalidate();

    	i_flag = !i_flag;
 8016d1c:	4bc1      	ldr	r3, [pc, #772]	; (8017024 <_ZN8MainView15handleTickEventEv+0x344>)
 8016d1e:	781b      	ldrb	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	bf0c      	ite	eq
 8016d24:	2301      	moveq	r3, #1
 8016d26:	2300      	movne	r3, #0
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	4bbd      	ldr	r3, [pc, #756]	; (8017024 <_ZN8MainView15handleTickEventEv+0x344>)
 8016d2e:	701a      	strb	r2, [r3, #0]

    	if(flag == true){
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f893 3c71 	ldrb.w	r3, [r3, #3185]	; 0xc71
 8016d36:	2b01      	cmp	r3, #1
 8016d38:	f040 80a8 	bne.w	8016e8c <_ZN8MainView15handleTickEventEv+0x1ac>

        	Unicode::strncpy(textArea2Buffer,Temperatures.T1,5);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8016d42:	2205      	movs	r2, #5
 8016d44:	49b8      	ldr	r1, [pc, #736]	; (8017028 <_ZN8MainView15handleTickEventEv+0x348>)
 8016d46:	4618      	mov	r0, r3
 8016d48:	f008 ff18 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2.setWildcard(textArea2Buffer);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8016d58:	4619      	mov	r1, r3
 8016d5a:	4610      	mov	r0, r2
 8016d5c:	f7fb fed8 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>



        	Unicode::strncpy(textArea2_1Buffer, Temperatures.T2,5);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8016d66:	2205      	movs	r2, #5
 8016d68:	49b0      	ldr	r1, [pc, #704]	; (801702c <_ZN8MainView15handleTickEventEv+0x34c>)
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f008 ff06 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_1.setWildcard(textArea2_1Buffer);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f603 0264 	addw	r2, r3, #2148	; 0x864
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	4610      	mov	r0, r2
 8016d80:	f7fb fec6 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>


        	Unicode::strncpy(textArea2_2Buffer, Temperatures.T3,5);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8016d8a:	2205      	movs	r2, #5
 8016d8c:	49a8      	ldr	r1, [pc, #672]	; (8017030 <_ZN8MainView15handleTickEventEv+0x350>)
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f008 fef4 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_2.setWildcard(textArea2_2Buffer);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f503 620b 	add.w	r2, r3, #2224	; 0x8b0
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8016da0:	4619      	mov	r1, r3
 8016da2:	4610      	mov	r0, r2
 8016da4:	f7fb feb4 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>


        	Unicode::strncpy(textArea2_3Buffer, Temperatures.T4,5);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8016dae:	2205      	movs	r2, #5
 8016db0:	49a0      	ldr	r1, [pc, #640]	; (8017034 <_ZN8MainView15handleTickEventEv+0x354>)
 8016db2:	4618      	mov	r0, r3
 8016db4:	f008 fee2 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_3.setWildcard(textArea2_3Buffer);
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f603 02fc 	addw	r2, r3, #2300	; 0x8fc
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4610      	mov	r0, r2
 8016dc8:	f7fb fea2 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>



        	Unicode::strncpy(textArea2_4Buffer, Temperatures.T5,5);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8016dd2:	2205      	movs	r2, #5
 8016dd4:	4998      	ldr	r1, [pc, #608]	; (8017038 <_ZN8MainView15handleTickEventEv+0x358>)
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f008 fed0 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_4.setWildcard(textArea2_4Buffer);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8016de8:	4619      	mov	r1, r3
 8016dea:	4610      	mov	r0, r2
 8016dec:	f7fb fe90 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>


        	Unicode::strncpy(textArea2_5Buffer, Temperatures.T6,5);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8016df6:	2205      	movs	r2, #5
 8016df8:	4990      	ldr	r1, [pc, #576]	; (801703c <_ZN8MainView15handleTickEventEv+0x35c>)
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f008 febe 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_5.setWildcard(textArea2_5Buffer);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f603 1294 	addw	r2, r3, #2452	; 0x994
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	4610      	mov	r0, r2
 8016e10:	f7fb fe7e 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>



        	Unicode::strncpy(textArea2_6Buffer, Temperatures.T7,5);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8016e1a:	2205      	movs	r2, #5
 8016e1c:	4988      	ldr	r1, [pc, #544]	; (8017040 <_ZN8MainView15handleTickEventEv+0x360>)
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f008 feac 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_6.setWildcard(textArea2_6Buffer);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	f503 621e 	add.w	r2, r3, #2528	; 0x9e0
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8016e30:	4619      	mov	r1, r3
 8016e32:	4610      	mov	r0, r2
 8016e34:	f7fb fe6c 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>



        	Unicode::strncpy(textArea2_7Buffer, Temperatures.TZ,5);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8016e3e:	2205      	movs	r2, #5
 8016e40:	4980      	ldr	r1, [pc, #512]	; (8017044 <_ZN8MainView15handleTickEventEv+0x364>)
 8016e42:	4618      	mov	r0, r3
 8016e44:	f008 fe9a 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        	textArea2_7.setWildcard(textArea2_7Buffer);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8016e54:	4619      	mov	r1, r3
 8016e56:	4610      	mov	r0, r2
 8016e58:	f7fb fe5a 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>




        	//Unicode::strncpy(textArea2_8Buffer, PWM1,4);
        	textArea2_8.setWildcard(textArea2_8Buffer);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f603 2278 	addw	r2, r3, #2680	; 0xa78
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8016e68:	4619      	mov	r1, r3
 8016e6a:	4610      	mov	r0, r2
 8016e6c:	f7fb fe50 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

        	//Unicode::strncpy(textArea2_9Buffer, PWM2,4);
        	textArea2_9.setWildcard(textArea2_9Buffer);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	f603 22c4 	addw	r2, r3, #2756	; 0xac4
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	f603 4356 	addw	r3, r3, #3158	; 0xc56
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	4610      	mov	r0, r2
 8016e80:	f7fb fe46 	bl	8012b10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>

        	flag = false;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	2200      	movs	r2, #0
 8016e88:	f883 2c71 	strb.w	r2, [r3, #3185]	; 0xc71

    	}

    	if (xSemaphoreTake(refresh_data_mutex, 100) == pdTRUE) {
 8016e8c:	4b6e      	ldr	r3, [pc, #440]	; (8017048 <_ZN8MainView15handleTickEventEv+0x368>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	2164      	movs	r1, #100	; 0x64
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7f6 fba4 	bl	800d5e0 <xQueueSemaphoreTake>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	bf0c      	ite	eq
 8016e9e:	2301      	moveq	r3, #1
 8016ea0:	2300      	movne	r3, #0
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 8225 	beq.w	80172f4 <_ZN8MainView15handleTickEventEv+0x614>
    	Unicode::strncpy(textArea2_8Buffer, PWM1,4);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8016eb0:	2204      	movs	r2, #4
 8016eb2:	4966      	ldr	r1, [pc, #408]	; (801704c <_ZN8MainView15handleTickEventEv+0x36c>)
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	f008 fe61 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>

    	textArea2_8.resizeToCurrentText();
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f004 fb8d 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_8.invalidate();
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f007 faa6 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>

    	Unicode::strncpy(textArea2_9Buffer, PWM2,4);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	f603 4356 	addw	r3, r3, #3158	; 0xc56
 8016ed8:	2204      	movs	r2, #4
 8016eda:	495d      	ldr	r1, [pc, #372]	; (8017050 <_ZN8MainView15handleTickEventEv+0x370>)
 8016edc:	4618      	mov	r0, r3
 8016ede:	f008 fe4d 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>

    	textArea2_9.resizeToCurrentText();
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f004 fb79 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_9.invalidate();
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	f603 23c4 	addw	r3, r3, #2756	; 0xac4
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f007 fa92 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>





    	Unicode::strncpy(textArea2Buffer,Temperatures.T1,5);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	f603 33ec 	addw	r3, r3, #3052	; 0xbec
 8016f00:	2205      	movs	r2, #5
 8016f02:	4949      	ldr	r1, [pc, #292]	; (8017028 <_ZN8MainView15handleTickEventEv+0x348>)
 8016f04:	4618      	mov	r0, r3
 8016f06:	f008 fe39 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2.resizeToCurrentText();
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8016f10:	4618      	mov	r0, r3
 8016f12:	f004 fb65 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2.invalidate();
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f007 fa7e 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_1Buffer, Temperatures.T2,5);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8016f28:	2205      	movs	r2, #5
 8016f2a:	4940      	ldr	r1, [pc, #256]	; (801702c <_ZN8MainView15handleTickEventEv+0x34c>)
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f008 fe25 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
     	textArea2_1.resizeToCurrentText();
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f004 fb51 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_1.invalidate();
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	f603 0364 	addw	r3, r3, #2148	; 0x864
 8016f44:	4618      	mov	r0, r3
 8016f46:	f007 fa6a 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_2Buffer, Temperatures.T3,5);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8016f50:	2205      	movs	r2, #5
 8016f52:	4937      	ldr	r1, [pc, #220]	; (8017030 <_ZN8MainView15handleTickEventEv+0x350>)
 8016f54:	4618      	mov	r0, r3
 8016f56:	f008 fe11 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_2.resizeToCurrentText();
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016f60:	4618      	mov	r0, r3
 8016f62:	f004 fb3d 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_2.invalidate();
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f007 fa56 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>

    	Unicode::strncpy(textArea2_3Buffer, Temperatures.T4,5);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f503 6341 	add.w	r3, r3, #3088	; 0xc10
 8016f78:	2205      	movs	r2, #5
 8016f7a:	492e      	ldr	r1, [pc, #184]	; (8017034 <_ZN8MainView15handleTickEventEv+0x354>)
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f008 fdfd 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_3.resizeToCurrentText();
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f004 fb29 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_3.invalidate();
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8016f94:	4618      	mov	r0, r3
 8016f96:	f007 fa42 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_4Buffer, Temperatures.T5,5);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8016fa0:	2205      	movs	r2, #5
 8016fa2:	4925      	ldr	r1, [pc, #148]	; (8017038 <_ZN8MainView15handleTickEventEv+0x358>)
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f008 fde9 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_4.resizeToCurrentText();
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f004 fb15 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_4.invalidate();
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f007 fa2e 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_5Buffer, Temperatures.T6,5);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	f603 4328 	addw	r3, r3, #3112	; 0xc28
 8016fc8:	2205      	movs	r2, #5
 8016fca:	491c      	ldr	r1, [pc, #112]	; (801703c <_ZN8MainView15handleTickEventEv+0x35c>)
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f008 fdd5 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_5.resizeToCurrentText();
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f004 fb01 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_5.invalidate();
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f603 1394 	addw	r3, r3, #2452	; 0x994
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f007 fa1a 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_6Buffer, Temperatures.T7,5);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8016ff0:	2205      	movs	r2, #5
 8016ff2:	4913      	ldr	r1, [pc, #76]	; (8017040 <_ZN8MainView15handleTickEventEv+0x360>)
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f008 fdc1 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_6.resizeToCurrentText();
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8017000:	4618      	mov	r0, r3
 8017002:	f004 faed 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_6.invalidate();
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 801700c:	4618      	mov	r0, r3
 801700e:	f007 fa06 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>


    	Unicode::strncpy(textArea2_7Buffer, Temperatures.TZ,5);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8017018:	2205      	movs	r2, #5
 801701a:	e01b      	b.n	8017054 <_ZN8MainView15handleTickEventEv+0x374>
 801701c:	bf99999a 	.word	0xbf99999a
 8017020:	88888889 	.word	0x88888889
 8017024:	20009100 	.word	0x20009100
 8017028:	200008c0 	.word	0x200008c0
 801702c:	200008c5 	.word	0x200008c5
 8017030:	200008ca 	.word	0x200008ca
 8017034:	200008cf 	.word	0x200008cf
 8017038:	200008d4 	.word	0x200008d4
 801703c:	200008d9 	.word	0x200008d9
 8017040:	200008de 	.word	0x200008de
 8017044:	200008e3 	.word	0x200008e3
 8017048:	20000490 	.word	0x20000490
 801704c:	20000494 	.word	0x20000494
 8017050:	2000049c 	.word	0x2000049c
 8017054:	49ab      	ldr	r1, [pc, #684]	; (8017304 <_ZN8MainView15handleTickEventEv+0x624>)
 8017056:	4618      	mov	r0, r3
 8017058:	f008 fd90 	bl	801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	textArea2_7.resizeToCurrentText();
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8017062:	4618      	mov	r0, r3
 8017064:	f004 fabc 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	textArea2_7.invalidate();
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 801706e:	4618      	mov	r0, r3
 8017070:	f007 f9d5 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>




    	if(S[0].DigitalInputs & 0x01)
 8017074:	4ba4      	ldr	r3, [pc, #656]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 8017076:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801707a:	b2db      	uxtb	r3, r3
 801707c:	f003 0301 	and.w	r3, r3, #1
 8017080:	2b00      	cmp	r3, #0
 8017082:	bf14      	ite	ne
 8017084:	2301      	movne	r3, #1
 8017086:	2300      	moveq	r3, #0
 8017088:	b2db      	uxtb	r3, r3
 801708a:	2b00      	cmp	r3, #0
 801708c:	d00d      	beq.n	80170aa <_ZN8MainView15handleTickEventEv+0x3ca>
    	{
        	toggleButton1_8.forceState(1);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8017094:	2101      	movs	r1, #1
 8017096:	4618      	mov	r0, r3
 8017098:	f003 fe7e 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_8.invalidate();
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80170a2:	4618      	mov	r0, r3
 80170a4:	f007 f9bb 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 80170a8:	e00c      	b.n	80170c4 <_ZN8MainView15handleTickEventEv+0x3e4>
    	}
    	else
    	{
        	toggleButton1_8.forceState(0);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80170b0:	2100      	movs	r1, #0
 80170b2:	4618      	mov	r0, r3
 80170b4:	f003 fe70 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_8.invalidate();
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 80170be:	4618      	mov	r0, r3
 80170c0:	f007 f9ad 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}



    	if(S[0].DigitalInputs & 0x02)
 80170c4:	4b90      	ldr	r3, [pc, #576]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 80170c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80170ca:	b2db      	uxtb	r3, r3
 80170cc:	f003 0302 	and.w	r3, r3, #2
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	bf14      	ite	ne
 80170d4:	2301      	movne	r3, #1
 80170d6:	2300      	moveq	r3, #0
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d00d      	beq.n	80170fa <_ZN8MainView15handleTickEventEv+0x41a>
    	{
        	toggleButton1_9.forceState(1);
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80170e4:	2101      	movs	r1, #1
 80170e6:	4618      	mov	r0, r3
 80170e8:	f003 fe56 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_9.invalidate();
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80170f2:	4618      	mov	r0, r3
 80170f4:	f007 f993 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 80170f8:	e00c      	b.n	8017114 <_ZN8MainView15handleTickEventEv+0x434>
    	}
    	else
    	{
        	toggleButton1_9.forceState(0);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8017100:	2100      	movs	r1, #0
 8017102:	4618      	mov	r0, r3
 8017104:	f003 fe48 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_9.invalidate();
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 801710e:	4618      	mov	r0, r3
 8017110:	f007 f985 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}



    	if(S[0].DigitalInputs & 0x04)
 8017114:	4b7c      	ldr	r3, [pc, #496]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 8017116:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801711a:	b2db      	uxtb	r3, r3
 801711c:	f003 0304 	and.w	r3, r3, #4
 8017120:	2b00      	cmp	r3, #0
 8017122:	bf14      	ite	ne
 8017124:	2301      	movne	r3, #1
 8017126:	2300      	moveq	r3, #0
 8017128:	b2db      	uxtb	r3, r3
 801712a:	2b00      	cmp	r3, #0
 801712c:	d00d      	beq.n	801714a <_ZN8MainView15handleTickEventEv+0x46a>
    	{
        	toggleButton1_10.forceState(1);
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8017134:	2101      	movs	r1, #1
 8017136:	4618      	mov	r0, r3
 8017138:	f003 fe2e 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_10.invalidate();
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8017142:	4618      	mov	r0, r3
 8017144:	f007 f96b 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 8017148:	e00c      	b.n	8017164 <_ZN8MainView15handleTickEventEv+0x484>
    	}
    	else
    	{
        	toggleButton1_10.forceState(0);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8017150:	2100      	movs	r1, #0
 8017152:	4618      	mov	r0, r3
 8017154:	f003 fe20 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_10.invalidate();
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 801715e:	4618      	mov	r0, r3
 8017160:	f007 f95d 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}


    	if(S[0].DigitalInputs & 0x08)
 8017164:	4b68      	ldr	r3, [pc, #416]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 8017166:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801716a:	b2db      	uxtb	r3, r3
 801716c:	f003 0308 	and.w	r3, r3, #8
 8017170:	2b00      	cmp	r3, #0
 8017172:	bf14      	ite	ne
 8017174:	2301      	movne	r3, #1
 8017176:	2300      	moveq	r3, #0
 8017178:	b2db      	uxtb	r3, r3
 801717a:	2b00      	cmp	r3, #0
 801717c:	d00d      	beq.n	801719a <_ZN8MainView15handleTickEventEv+0x4ba>
    	{
        	toggleButton1_11.forceState(1);
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8017184:	2101      	movs	r1, #1
 8017186:	4618      	mov	r0, r3
 8017188:	f003 fe06 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_11.invalidate();
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8017192:	4618      	mov	r0, r3
 8017194:	f007 f943 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 8017198:	e00c      	b.n	80171b4 <_ZN8MainView15handleTickEventEv+0x4d4>
    	}
    	else
    	{
        	toggleButton1_11.forceState(0);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 80171a0:	2100      	movs	r1, #0
 80171a2:	4618      	mov	r0, r3
 80171a4:	f003 fdf8 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_11.invalidate();
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 80171ae:	4618      	mov	r0, r3
 80171b0:	f007 f935 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}


    	if(S[0].DigitalInputs & 0x10)
 80171b4:	4b54      	ldr	r3, [pc, #336]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 80171b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80171ba:	b2db      	uxtb	r3, r3
 80171bc:	f003 0310 	and.w	r3, r3, #16
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	bf14      	ite	ne
 80171c4:	2301      	movne	r3, #1
 80171c6:	2300      	moveq	r3, #0
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d00d      	beq.n	80171ea <_ZN8MainView15handleTickEventEv+0x50a>
    	{
        	toggleButton1_12.forceState(1);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80171d4:	2101      	movs	r1, #1
 80171d6:	4618      	mov	r0, r3
 80171d8:	f003 fdde 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_12.invalidate();
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80171e2:	4618      	mov	r0, r3
 80171e4:	f007 f91b 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 80171e8:	e00c      	b.n	8017204 <_ZN8MainView15handleTickEventEv+0x524>
    	}
    	else
    	{
        	toggleButton1_12.forceState(0);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80171f0:	2100      	movs	r1, #0
 80171f2:	4618      	mov	r0, r3
 80171f4:	f003 fdd0 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_12.invalidate();
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80171fe:	4618      	mov	r0, r3
 8017200:	f007 f90d 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}


    	if(S[0].DigitalInputs & 0x20)
 8017204:	4b40      	ldr	r3, [pc, #256]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 8017206:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801720a:	b2db      	uxtb	r3, r3
 801720c:	f003 0320 	and.w	r3, r3, #32
 8017210:	2b00      	cmp	r3, #0
 8017212:	bf14      	ite	ne
 8017214:	2301      	movne	r3, #1
 8017216:	2300      	moveq	r3, #0
 8017218:	b2db      	uxtb	r3, r3
 801721a:	2b00      	cmp	r3, #0
 801721c:	d00d      	beq.n	801723a <_ZN8MainView15handleTickEventEv+0x55a>
    	{
        	toggleButton1_13.forceState(1);
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8017224:	2101      	movs	r1, #1
 8017226:	4618      	mov	r0, r3
 8017228:	f003 fdb6 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_13.invalidate();
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8017232:	4618      	mov	r0, r3
 8017234:	f007 f8f3 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 8017238:	e00c      	b.n	8017254 <_ZN8MainView15handleTickEventEv+0x574>
    	}
    	else
    	{
        	toggleButton1_13.forceState(0);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8017240:	2100      	movs	r1, #0
 8017242:	4618      	mov	r0, r3
 8017244:	f003 fda8 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_13.invalidate();
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 801724e:	4618      	mov	r0, r3
 8017250:	f007 f8e5 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}


    	if(S[0].DigitalInputs & 0x40)
 8017254:	4b2c      	ldr	r3, [pc, #176]	; (8017308 <_ZN8MainView15handleTickEventEv+0x628>)
 8017256:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801725a:	b2db      	uxtb	r3, r3
 801725c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017260:	2b00      	cmp	r3, #0
 8017262:	bf14      	ite	ne
 8017264:	2301      	movne	r3, #1
 8017266:	2300      	moveq	r3, #0
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d00d      	beq.n	801728a <_ZN8MainView15handleTickEventEv+0x5aa>
    	{
        	toggleButton1_14.forceState(1);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8017274:	2101      	movs	r1, #1
 8017276:	4618      	mov	r0, r3
 8017278:	f003 fd8e 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_14.invalidate();
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8017282:	4618      	mov	r0, r3
 8017284:	f007 f8cb 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 8017288:	e00c      	b.n	80172a4 <_ZN8MainView15handleTickEventEv+0x5c4>
    	}
    	else
    	{
        	toggleButton1_14.forceState(0);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8017290:	2100      	movs	r1, #0
 8017292:	4618      	mov	r0, r3
 8017294:	f003 fd80 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
        	toggleButton1_14.invalidate();
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 801729e:	4618      	mov	r0, r3
 80172a0:	f007 f8bd 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}



    	if(i_flag & 0x01)
 80172a4:	4b19      	ldr	r3, [pc, #100]	; (801730c <_ZN8MainView15handleTickEventEv+0x62c>)
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	f003 0301 	and.w	r3, r3, #1
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d00d      	beq.n	80172cc <_ZN8MainView15handleTickEventEv+0x5ec>
    	{
    		toggleButton1_14_1.forceState(1);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80172b6:	2101      	movs	r1, #1
 80172b8:	4618      	mov	r0, r3
 80172ba:	f003 fd6d 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
    		toggleButton1_14_1.invalidate();
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80172c4:	4618      	mov	r0, r3
 80172c6:	f007 f8aa 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
 80172ca:	e00c      	b.n	80172e6 <_ZN8MainView15handleTickEventEv+0x606>
    	}
    	else
    	{
    		toggleButton1_14_1.forceState(0);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80172d2:	2100      	movs	r1, #0
 80172d4:	4618      	mov	r0, r3
 80172d6:	f003 fd5f 	bl	801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>
    		toggleButton1_14_1.invalidate();
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	f503 6331 	add.w	r3, r3, #2832	; 0xb10
 80172e0:	4618      	mov	r0, r3
 80172e2:	f007 f89c 	bl	801e41e <_ZNK8touchgfx8Drawable10invalidateEv>
    	}
    	xSemaphoreGive(refresh_data_mutex);
 80172e6:	4b0a      	ldr	r3, [pc, #40]	; (8017310 <_ZN8MainView15handleTickEventEv+0x630>)
 80172e8:	6818      	ldr	r0, [r3, #0]
 80172ea:	2300      	movs	r3, #0
 80172ec:	2200      	movs	r2, #0
 80172ee:	2100      	movs	r1, #0
 80172f0:	f7f5 fe70 	bl	800cfd4 <xQueueGenericSend>


       // if(flag){Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_STMICROID).getText());flag = false;}
       // else{Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_TOUCHGFXID).getText());flag = true;}
       // textArea.invalidate();
        counter = 0;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2200      	movs	r2, #0
 80172f8:	f883 2c70 	strb.w	r2, [r3, #3184]	; 0xc70
    }




}
 80172fc:	bf00      	nop
 80172fe:	3710      	adds	r7, #16
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}
 8017304:	200008e3 	.word	0x200008e3
 8017308:	200004a4 	.word	0x200004a4
 801730c:	20009100 	.word	0x20009100
 8017310:	20000490 	.word	0x20000490

08017314 <_ZN8MainView11setupScreenEv>:




void MainView::setupScreen()
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b082      	sub	sp, #8
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	4618      	mov	r0, r3
 8017320:	f7fe ff8e 	bl	8016240 <_ZN12MainViewBase11setupScreenEv>
}
 8017324:	bf00      	nop
 8017326:	3708      	adds	r7, #8
 8017328:	46bd      	mov	sp, r7
 801732a:	bd80      	pop	{r7, pc}

0801732c <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	4618      	mov	r0, r3
 8017338:	f7fb f8b6 	bl	80124a8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801733c:	bf00      	nop
 801733e:	3708      	adds	r7, #8
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <_ZN8MainView3SPREv>:


void MainView::SPR()
{
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]


	 if(S[0].Out.SP == 0){
 801734c:	4b0f      	ldr	r3, [pc, #60]	; (801738c <_ZN8MainView3SPREv+0x48>)
 801734e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017352:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017356:	b2db      	uxtb	r3, r3
 8017358:	f083 0301 	eor.w	r3, r3, #1
 801735c:	b2db      	uxtb	r3, r3
 801735e:	2b00      	cmp	r3, #0
 8017360:	d007      	beq.n	8017372 <_ZN8MainView3SPREv+0x2e>
		 S[0].Out.SP = 1;
 8017362:	4a0a      	ldr	r2, [pc, #40]	; (801738c <_ZN8MainView3SPREv+0x48>)
 8017364:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801736c:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	 {
		 S[0].Out.SP = 0;
	 }


}
 8017370:	e006      	b.n	8017380 <_ZN8MainView3SPREv+0x3c>
		 S[0].Out.SP = 0;
 8017372:	4a06      	ldr	r2, [pc, #24]	; (801738c <_ZN8MainView3SPREv+0x48>)
 8017374:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017378:	f36f 13c7 	bfc	r3, #7, #1
 801737c:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 8017380:	bf00      	nop
 8017382:	370c      	adds	r7, #12
 8017384:	46bd      	mov	sp, r7
 8017386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738a:	4770      	bx	lr
 801738c:	200004a4 	.word	0x200004a4

08017390 <_ZN8MainView3PDZEv>:

void MainView::PDZ()
{
 8017390:	b480      	push	{r7}
 8017392:	b083      	sub	sp, #12
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]


	 if(S[0].Out.PDZ == 0){
 8017398:	4b0f      	ldr	r3, [pc, #60]	; (80173d8 <_ZN8MainView3PDZEv+0x48>)
 801739a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801739e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	f083 0301 	eor.w	r3, r3, #1
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d007      	beq.n	80173be <_ZN8MainView3PDZEv+0x2e>
		 S[0].Out.PDZ = 1;
 80173ae:	4a0a      	ldr	r2, [pc, #40]	; (80173d8 <_ZN8MainView3PDZEv+0x48>)
 80173b0:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80173b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173b8:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	 }
	 else
	 {
		 S[0].Out.PDZ = 0;
	 }
}
 80173bc:	e006      	b.n	80173cc <_ZN8MainView3PDZEv+0x3c>
		 S[0].Out.PDZ = 0;
 80173be:	4a06      	ldr	r2, [pc, #24]	; (80173d8 <_ZN8MainView3PDZEv+0x48>)
 80173c0:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80173c4:	f36f 1386 	bfc	r3, #6, #1
 80173c8:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 80173cc:	bf00      	nop
 80173ce:	370c      	adds	r7, #12
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr
 80173d8:	200004a4 	.word	0x200004a4

080173dc <_ZN8MainView3PCOEv>:

void MainView::PCO()
{
 80173dc:	b480      	push	{r7}
 80173de:	b083      	sub	sp, #12
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
	if(S[0].Out.PSG == 0){
 80173e4:	4b0f      	ldr	r3, [pc, #60]	; (8017424 <_ZN8MainView3PCOEv+0x48>)
 80173e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80173ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80173ee:	b2db      	uxtb	r3, r3
 80173f0:	f083 0301 	eor.w	r3, r3, #1
 80173f4:	b2db      	uxtb	r3, r3
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d007      	beq.n	801740a <_ZN8MainView3PCOEv+0x2e>
		S[0].Out.PSG = 1;
 80173fa:	4a0a      	ldr	r2, [pc, #40]	; (8017424 <_ZN8MainView3PCOEv+0x48>)
 80173fc:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017400:	f043 0320 	orr.w	r3, r3, #32
 8017404:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	}
	else
	{
		S[0].Out.PSG = 0;
	}
}
 8017408:	e006      	b.n	8017418 <_ZN8MainView3PCOEv+0x3c>
		S[0].Out.PSG = 0;
 801740a:	4a06      	ldr	r2, [pc, #24]	; (8017424 <_ZN8MainView3PCOEv+0x48>)
 801740c:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017410:	f36f 1345 	bfc	r3, #5, #1
 8017414:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 8017418:	bf00      	nop
 801741a:	370c      	adds	r7, #12
 801741c:	46bd      	mov	sp, r7
 801741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017422:	4770      	bx	lr
 8017424:	200004a4 	.word	0x200004a4

08017428 <_ZN8MainView4PCWUEv>:

void MainView::PCWU()
{
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]

	if(S[0].Out.PCWU == 0){
 8017430:	4b0f      	ldr	r3, [pc, #60]	; (8017470 <_ZN8MainView4PCWUEv+0x48>)
 8017432:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017436:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801743a:	b2db      	uxtb	r3, r3
 801743c:	f083 0301 	eor.w	r3, r3, #1
 8017440:	b2db      	uxtb	r3, r3
 8017442:	2b00      	cmp	r3, #0
 8017444:	d007      	beq.n	8017456 <_ZN8MainView4PCWUEv+0x2e>
		S[0].Out.PCWU  = 1;
 8017446:	4a0a      	ldr	r2, [pc, #40]	; (8017470 <_ZN8MainView4PCWUEv+0x48>)
 8017448:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 801744c:	f043 0310 	orr.w	r3, r3, #16
 8017450:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	else
	{
		S[0].Out.PCWU  = 0;
	}

}
 8017454:	e006      	b.n	8017464 <_ZN8MainView4PCWUEv+0x3c>
		S[0].Out.PCWU  = 0;
 8017456:	4a06      	ldr	r2, [pc, #24]	; (8017470 <_ZN8MainView4PCWUEv+0x48>)
 8017458:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 801745c:	f36f 1304 	bfc	r3, #4, #1
 8017460:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 8017464:	bf00      	nop
 8017466:	370c      	adds	r7, #12
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr
 8017470:	200004a4 	.word	0x200004a4

08017474 <_ZN8MainView3Z3DEv>:


void MainView::Z3D()
{
 8017474:	b480      	push	{r7}
 8017476:	b083      	sub	sp, #12
 8017478:	af00      	add	r7, sp, #0
 801747a:	6078      	str	r0, [r7, #4]

	if(S[0].Out.Z3D == 0){
 801747c:	4b0f      	ldr	r3, [pc, #60]	; (80174bc <_ZN8MainView3Z3DEv+0x48>)
 801747e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017482:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8017486:	b2db      	uxtb	r3, r3
 8017488:	f083 0301 	eor.w	r3, r3, #1
 801748c:	b2db      	uxtb	r3, r3
 801748e:	2b00      	cmp	r3, #0
 8017490:	d007      	beq.n	80174a2 <_ZN8MainView3Z3DEv+0x2e>
		S[0].Out.Z3D  = 1;
 8017492:	4a0a      	ldr	r2, [pc, #40]	; (80174bc <_ZN8MainView3Z3DEv+0x48>)
 8017494:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017498:	f043 0308 	orr.w	r3, r3, #8
 801749c:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	else
	{
		S[0].Out.Z3D  = 0;
	}

}
 80174a0:	e006      	b.n	80174b0 <_ZN8MainView3Z3DEv+0x3c>
		S[0].Out.Z3D  = 0;
 80174a2:	4a06      	ldr	r2, [pc, #24]	; (80174bc <_ZN8MainView3Z3DEv+0x48>)
 80174a4:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80174a8:	f36f 03c3 	bfc	r3, #3, #1
 80174ac:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 80174b0:	bf00      	nop
 80174b2:	370c      	adds	r7, #12
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr
 80174bc:	200004a4 	.word	0x200004a4

080174c0 <_ZN8MainView3GR1Ev>:

void MainView::GR1()
{
 80174c0:	b480      	push	{r7}
 80174c2:	b083      	sub	sp, #12
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]

	if(S[0].Out.DO1 == 0){
 80174c8:	4b0f      	ldr	r3, [pc, #60]	; (8017508 <_ZN8MainView3GR1Ev+0x48>)
 80174ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80174ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	f083 0301 	eor.w	r3, r3, #1
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d007      	beq.n	80174ee <_ZN8MainView3GR1Ev+0x2e>
		S[0].Out.DO1  = 1;
 80174de:	4a0a      	ldr	r2, [pc, #40]	; (8017508 <_ZN8MainView3GR1Ev+0x48>)
 80174e0:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80174e4:	f043 0304 	orr.w	r3, r3, #4
 80174e8:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	else
	{
		S[0].Out.DO1  = 0;
	}

}
 80174ec:	e006      	b.n	80174fc <_ZN8MainView3GR1Ev+0x3c>
		S[0].Out.DO1  = 0;
 80174ee:	4a06      	ldr	r2, [pc, #24]	; (8017508 <_ZN8MainView3GR1Ev+0x48>)
 80174f0:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 80174f4:	f36f 0382 	bfc	r3, #2, #1
 80174f8:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 80174fc:	bf00      	nop
 80174fe:	370c      	adds	r7, #12
 8017500:	46bd      	mov	sp, r7
 8017502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017506:	4770      	bx	lr
 8017508:	200004a4 	.word	0x200004a4

0801750c <_ZN8MainView3GR2Ev>:

void MainView::GR2()
{
 801750c:	b480      	push	{r7}
 801750e:	b083      	sub	sp, #12
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]

	if(S[0].Out.DO2 == 0){
 8017514:	4b0f      	ldr	r3, [pc, #60]	; (8017554 <_ZN8MainView3GR2Ev+0x48>)
 8017516:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801751a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801751e:	b2db      	uxtb	r3, r3
 8017520:	f083 0301 	eor.w	r3, r3, #1
 8017524:	b2db      	uxtb	r3, r3
 8017526:	2b00      	cmp	r3, #0
 8017528:	d007      	beq.n	801753a <_ZN8MainView3GR2Ev+0x2e>
		S[0].Out.DO2  = 1;
 801752a:	4a0a      	ldr	r2, [pc, #40]	; (8017554 <_ZN8MainView3GR2Ev+0x48>)
 801752c:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017530:	f043 0302 	orr.w	r3, r3, #2
 8017534:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	else
	{
		S[0].Out.DO2  = 0;
	}

}
 8017538:	e006      	b.n	8017548 <_ZN8MainView3GR2Ev+0x3c>
		S[0].Out.DO2  = 0;
 801753a:	4a06      	ldr	r2, [pc, #24]	; (8017554 <_ZN8MainView3GR2Ev+0x48>)
 801753c:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 8017540:	f36f 0341 	bfc	r3, #1, #1
 8017544:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 8017548:	bf00      	nop
 801754a:	370c      	adds	r7, #12
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr
 8017554:	200004a4 	.word	0x200004a4

08017558 <_ZN8MainView6ZEWZRDEv>:

void MainView::ZEWZRD()
{
 8017558:	b480      	push	{r7}
 801755a:	b083      	sub	sp, #12
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]

	if(S[0].Out.ZZC == 0){
 8017560:	4b0f      	ldr	r3, [pc, #60]	; (80175a0 <_ZN8MainView6ZEWZRDEv+0x48>)
 8017562:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017566:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801756a:	b2db      	uxtb	r3, r3
 801756c:	f083 0301 	eor.w	r3, r3, #1
 8017570:	b2db      	uxtb	r3, r3
 8017572:	2b00      	cmp	r3, #0
 8017574:	d007      	beq.n	8017586 <_ZN8MainView6ZEWZRDEv+0x2e>
		S[0].Out.ZZC  = 1;
 8017576:	4a0a      	ldr	r2, [pc, #40]	; (80175a0 <_ZN8MainView6ZEWZRDEv+0x48>)
 8017578:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 801757c:	f043 0301 	orr.w	r3, r3, #1
 8017580:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	else
	{
		S[0].Out.ZZC  = 0;
	}

}
 8017584:	e006      	b.n	8017594 <_ZN8MainView6ZEWZRDEv+0x3c>
		S[0].Out.ZZC  = 0;
 8017586:	4a06      	ldr	r2, [pc, #24]	; (80175a0 <_ZN8MainView6ZEWZRDEv+0x48>)
 8017588:	f892 3062 	ldrb.w	r3, [r2, #98]	; 0x62
 801758c:	f36f 0300 	bfc	r3, #0, #1
 8017590:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 8017594:	bf00      	nop
 8017596:	370c      	adds	r7, #12
 8017598:	46bd      	mov	sp, r7
 801759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759e:	4770      	bx	lr
 80175a0:	200004a4 	.word	0x200004a4

080175a4 <_ZN5ModelC1Ev>:

extern UART_HandleTypeDef huart5;



Model::Model() : modelListener(0)
 80175a4:	b480      	push	{r7}
 80175a6:	b083      	sub	sp, #12
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2200      	movs	r2, #0
 80175b0:	601a      	str	r2, [r3, #0]
{

}
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	4618      	mov	r0, r3
 80175b6:	370c      	adds	r7, #12
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80175c0:	b480      	push	{r7}
 80175c2:	b083      	sub	sp, #12
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(UA5_EN_GPIO_Port, UA5_EN_Pin, SET);
	//HAL_UART_Transmit(&huart5, datas, sizeof(datas), 10);
	//HAL_GPIO_WritePin(UA5_EN_GPIO_Port, UA5_EN_Pin, RESET);


}
 80175c8:	bf00      	nop
 80175ca:	370c      	adds	r7, #12
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
    {
 80175dc:	4a04      	ldr	r2, [pc, #16]	; (80175f0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	601a      	str	r2, [r3, #0]
    }
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	4618      	mov	r0, r3
 80175e6:	370c      	adds	r7, #12
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr
 80175f0:	0802e9b4 	.word	0x0802e9b4

080175f4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b082      	sub	sp, #8
 80175f8:	af00      	add	r7, sp, #0
 80175fa:	6078      	str	r0, [r7, #4]
    }
 80175fc:	6878      	ldr	r0, [r7, #4]
 80175fe:	f7ff ffe9 	bl	80175d4 <_ZN8touchgfx15TouchControllerD1Ev>
 8017602:	2104      	movs	r1, #4
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f014 f946 	bl	802b896 <_ZdlPvj>
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	4618      	mov	r0, r3
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <_ZN20STM32TouchController4initEv>:


extern int16_t pos_x;
extern int16_t pos_y;
void STM32TouchController::init()
{
 8017614:	b480      	push	{r7}
 8017616:	b083      	sub	sp, #12
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]

    /**
     * Initialize touch controller and driver
     *
     */
}
 801761c:	bf00      	nop
 801761e:	370c      	adds	r7, #12
 8017620:	46bd      	mov	sp, r7
 8017622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017626:	4770      	bx	lr

08017628 <_ZN20STM32TouchController11sampleTouchERlS0_>:

static uint16_t timer = 0;
bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8017628:	b480      	push	{r7}
 801762a:	b085      	sub	sp, #20
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	607a      	str	r2, [r7, #4]



if(pos_x < 0 && pos_y < 0)
 8017634:	4b0f      	ldr	r3, [pc, #60]	; (8017674 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8017636:	f9b3 3000 	ldrsh.w	r3, [r3]
 801763a:	2b00      	cmp	r3, #0
 801763c:	da06      	bge.n	801764c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
 801763e:	4b0e      	ldr	r3, [pc, #56]	; (8017678 <_ZN20STM32TouchController11sampleTouchERlS0_+0x50>)
 8017640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017644:	2b00      	cmp	r3, #0
 8017646:	da01      	bge.n	801764c <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
{
return false;
 8017648:	2300      	movs	r3, #0
 801764a:	e00c      	b.n	8017666 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>

}
else
{

	x = pos_x;
 801764c:	4b09      	ldr	r3, [pc, #36]	; (8017674 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 801764e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017652:	461a      	mov	r2, r3
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	601a      	str	r2, [r3, #0]
	y = pos_y;
 8017658:	4b07      	ldr	r3, [pc, #28]	; (8017678 <_ZN20STM32TouchController11sampleTouchERlS0_+0x50>)
 801765a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801765e:	461a      	mov	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	601a      	str	r2, [r3, #0]

	return true;
 8017664:	2301      	movs	r3, #1
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return true;
}
 8017666:	4618      	mov	r0, r3
 8017668:	3714      	adds	r7, #20
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr
 8017672:	bf00      	nop
 8017674:	200008e8 	.word	0x200008e8
 8017678:	200008ea 	.word	0x200008ea

0801767c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
 8017684:	4a05      	ldr	r2, [pc, #20]	; (801769c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	601a      	str	r2, [r3, #0]
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	4618      	mov	r0, r3
 801768e:	f7ff ffa1 	bl	80175d4 <_ZN8touchgfx15TouchControllerD1Ev>
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	4618      	mov	r0, r3
 8017696:	3708      	adds	r7, #8
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	0802e99c 	.word	0x0802e99c

080176a0 <_ZN20STM32TouchControllerD0Ev>:
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6878      	ldr	r0, [r7, #4]
 80176aa:	f7ff ffe7 	bl	801767c <_ZN20STM32TouchControllerD1Ev>
 80176ae:	2104      	movs	r1, #4
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f014 f8f0 	bl	802b896 <_ZdlPvj>
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	4618      	mov	r0, r3
 80176ba:	3708      	adds	r7, #8
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}

080176c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	4603      	mov	r3, r0
 80176c8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80176ca:	79fb      	ldrb	r3, [r7, #7]
 80176cc:	2b03      	cmp	r3, #3
 80176ce:	d80c      	bhi.n	80176ea <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80176d0:	a201      	add	r2, pc, #4	; (adr r2, 80176d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80176d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176d6:	bf00      	nop
 80176d8:	080176e9 	.word	0x080176e9
 80176dc:	080176e9 	.word	0x080176e9
 80176e0:	080176e9 	.word	0x080176e9
 80176e4:	080176e9 	.word	0x080176e9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80176e8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80176ea:	bf00      	nop
 80176ec:	370c      	adds	r7, #12
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop

080176f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80176f8:	b480      	push	{r7}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	4603      	mov	r3, r0
 8017700:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8017702:	79fb      	ldrb	r3, [r7, #7]
 8017704:	2b03      	cmp	r3, #3
 8017706:	d80c      	bhi.n	8017722 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8017708:	a201      	add	r2, pc, #4	; (adr r2, 8017710 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801770e:	bf00      	nop
 8017710:	08017721 	.word	0x08017721
 8017714:	08017721 	.word	0x08017721
 8017718:	08017721 	.word	0x08017721
 801771c:	08017721 	.word	0x08017721
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8017720:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8017722:	bf00      	nop
 8017724:	370c      	adds	r7, #12
 8017726:	46bd      	mov	sp, r7
 8017728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop

08017730 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8017730:	b480      	push	{r7}
 8017732:	b083      	sub	sp, #12
 8017734:	af00      	add	r7, sp, #0
 8017736:	4603      	mov	r3, r0
 8017738:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801773a:	79fb      	ldrb	r3, [r7, #7]
 801773c:	2b03      	cmp	r3, #3
 801773e:	d80c      	bhi.n	801775a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8017740:	a201      	add	r2, pc, #4	; (adr r2, 8017748 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8017742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017746:	bf00      	nop
 8017748:	08017759 	.word	0x08017759
 801774c:	08017759 	.word	0x08017759
 8017750:	08017759 	.word	0x08017759
 8017754:	08017759 	.word	0x08017759
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8017758:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801775a:	bf00      	nop
 801775c:	370c      	adds	r7, #12
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop

08017768 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8017768:	b480      	push	{r7}
 801776a:	b083      	sub	sp, #12
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
    {
 8017770:	4a04      	ldr	r2, [pc, #16]	; (8017784 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	601a      	str	r2, [r3, #0]
    }
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4618      	mov	r0, r3
 801777a:	370c      	adds	r7, #12
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr
 8017784:	0802eda4 	.word	0x0802eda4

08017788 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8017788:	b580      	push	{r7, lr}
 801778a:	b082      	sub	sp, #8
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
    }
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f7ff ffe9 	bl	8017768 <_ZN8touchgfx3HALD1Ev>
 8017796:	217c      	movs	r1, #124	; 0x7c
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f014 f87c 	bl	802b896 <_ZdlPvj>
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	4618      	mov	r0, r3
 80177a2:	3708      	adds	r7, #8
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}

080177a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80177a8:	b480      	push	{r7}
 80177aa:	b083      	sub	sp, #12
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
 80177b0:	460b      	mov	r3, r1
 80177b2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	78fa      	ldrb	r2, [r7, #3]
 80177b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2201      	movs	r2, #1
 80177c0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80177c4:	bf00      	nop
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b082      	sub	sp, #8
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
 80177d8:	460b      	mov	r3, r1
 80177da:	807b      	strh	r3, [r7, #2]
 80177dc:	4613      	mov	r3, r2
 80177de:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80177e0:	4b0c      	ldr	r3, [pc, #48]	; (8017814 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80177e2:	881b      	ldrh	r3, [r3, #0]
 80177e4:	887a      	ldrh	r2, [r7, #2]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d304      	bcc.n	80177f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80177ea:	4b0b      	ldr	r3, [pc, #44]	; (8017818 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80177ec:	881b      	ldrh	r3, [r3, #0]
 80177ee:	883a      	ldrh	r2, [r7, #0]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d205      	bcs.n	8017800 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80177f4:	4b09      	ldr	r3, [pc, #36]	; (801781c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80177f6:	4a0a      	ldr	r2, [pc, #40]	; (8017820 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80177f8:	219e      	movs	r1, #158	; 0x9e
 80177fa:	480a      	ldr	r0, [pc, #40]	; (8017824 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80177fc:	f014 f87a 	bl	802b8f4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8017800:	4a09      	ldr	r2, [pc, #36]	; (8017828 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8017802:	887b      	ldrh	r3, [r7, #2]
 8017804:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8017806:	4a09      	ldr	r2, [pc, #36]	; (801782c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8017808:	883b      	ldrh	r3, [r7, #0]
 801780a:	8013      	strh	r3, [r2, #0]
    }
 801780c:	bf00      	nop
 801780e:	3708      	adds	r7, #8
 8017810:	46bd      	mov	sp, r7
 8017812:	bd80      	pop	{r7, pc}
 8017814:	2000b4b8 	.word	0x2000b4b8
 8017818:	2000b4ba 	.word	0x2000b4ba
 801781c:	0802df98 	.word	0x0802df98
 8017820:	0802dffc 	.word	0x0802dffc
 8017824:	0802e040 	.word	0x0802e040
 8017828:	2000b4be 	.word	0x2000b4be
 801782c:	2000b4c0 	.word	0x2000b4c0

08017830 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801783e:	2b00      	cmp	r3, #0
 8017840:	d009      	beq.n	8017856 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	685a      	ldr	r2, [r3, #4]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	685b      	ldr	r3, [r3, #4]
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	4610      	mov	r0, r2
 8017850:	4798      	blx	r3
 8017852:	4603      	mov	r3, r0
 8017854:	e000      	b.n	8017858 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8017856:	2300      	movs	r3, #0
    }
 8017858:	4618      	mov	r0, r3
 801785a:	3708      	adds	r7, #8
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}

08017860 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8017868:	6878      	ldr	r0, [r7, #4]
 801786a:	f003 f903 	bl	801aa74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	33ac      	adds	r3, #172	; 0xac
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	4798      	blx	r3
    }
 801787a:	bf00      	nop
 801787c:	3708      	adds	r7, #8
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8017882:	b480      	push	{r7}
 8017884:	b083      	sub	sp, #12
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
 801788a:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 801788c:	2300      	movs	r3, #0
    }
 801788e:	4618      	mov	r0, r3
 8017890:	370c      	adds	r7, #12
 8017892:	46bd      	mov	sp, r7
 8017894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017898:	4770      	bx	lr
	...

0801789c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
 80178a8:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d106      	bne.n	80178be <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80178b0:	4b0f      	ldr	r3, [pc, #60]	; (80178f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80178b2:	4a10      	ldr	r2, [pc, #64]	; (80178f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80178b4:	f240 21d2 	movw	r1, #722	; 0x2d2
 80178b8:	480f      	ldr	r0, [pc, #60]	; (80178f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80178ba:	f014 f81b 	bl	802b8f4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	68ba      	ldr	r2, [r7, #8]
 80178c2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	687a      	ldr	r2, [r7, #4]
 80178c8:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	bf14      	ite	ne
 80178d0:	2301      	movne	r3, #1
 80178d2:	2300      	moveq	r3, #0
 80178d4:	b2da      	uxtb	r2, r3
 80178d6:	4b09      	ldr	r3, [pc, #36]	; (80178fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80178d8:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	338c      	adds	r3, #140	; 0x8c
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	6839      	ldr	r1, [r7, #0]
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	4798      	blx	r3
    }
 80178e8:	bf00      	nop
 80178ea:	3710      	adds	r7, #16
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	0802e084 	.word	0x0802e084
 80178f4:	0802e0bc 	.word	0x0802e0bc
 80178f8:	0802e040 	.word	0x0802e040
 80178fc:	2000b4c2 	.word	0x2000b4c2

08017900 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8017900:	b480      	push	{r7}
 8017902:	b083      	sub	sp, #12
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
 8017908:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	683a      	ldr	r2, [r7, #0]
 801790e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	bf14      	ite	ne
 8017916:	2301      	movne	r3, #1
 8017918:	2300      	moveq	r3, #0
 801791a:	b2da      	uxtb	r2, r3
 801791c:	4b03      	ldr	r3, [pc, #12]	; (801792c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801791e:	701a      	strb	r2, [r3, #0]
    }
 8017920:	bf00      	nop
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr
 801792c:	2000b4c3 	.word	0x2000b4c3

08017930 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8017938:	2300      	movs	r3, #0
    }
 801793a:	4618      	mov	r0, r3
 801793c:	370c      	adds	r7, #12
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr

08017946 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8017946:	b580      	push	{r7, lr}
 8017948:	b082      	sub	sp, #8
 801794a:	af00      	add	r7, sp, #0
 801794c:	6078      	str	r0, [r7, #4]
 801794e:	460b      	mov	r3, r1
 8017950:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017956:	2b00      	cmp	r3, #0
 8017958:	d004      	beq.n	8017964 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801795e:	887a      	ldrh	r2, [r7, #2]
 8017960:	4610      	mov	r0, r2
 8017962:	4798      	blx	r3
        }
    }
 8017964:	bf00      	nop
 8017966:	3708      	adds	r7, #8
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}

0801796c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	685a      	ldr	r2, [r3, #4]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	685b      	ldr	r3, [r3, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	3318      	adds	r3, #24
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	4610      	mov	r0, r2
 8017984:	4798      	blx	r3
 8017986:	4603      	mov	r3, r0
    }
 8017988:	4618      	mov	r0, r3
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}

08017990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8017990:	b480      	push	{r7}
 8017992:	b085      	sub	sp, #20
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d011      	beq.n	80179cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80179a8:	4b14      	ldr	r3, [pc, #80]	; (80179fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d11e      	bne.n	80179ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80179b0:	4b13      	ldr	r3, [pc, #76]	; (8017a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80179b6:	4b13      	ldr	r3, [pc, #76]	; (8017a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80179b8:	881a      	ldrh	r2, [r3, #0]
 80179ba:	4b11      	ldr	r3, [pc, #68]	; (8017a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80179bc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80179be:	4a11      	ldr	r2, [pc, #68]	; (8017a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80179c0:	89bb      	ldrh	r3, [r7, #12]
 80179c2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80179c4:	4b0d      	ldr	r3, [pc, #52]	; (80179fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80179c6:	2201      	movs	r2, #1
 80179c8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80179ca:	e010      	b.n	80179ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80179cc:	4b0b      	ldr	r3, [pc, #44]	; (80179fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d00c      	beq.n	80179ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80179d4:	4b0a      	ldr	r3, [pc, #40]	; (8017a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80179d6:	881b      	ldrh	r3, [r3, #0]
 80179d8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80179da:	4b0a      	ldr	r3, [pc, #40]	; (8017a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80179dc:	881a      	ldrh	r2, [r3, #0]
 80179de:	4b08      	ldr	r3, [pc, #32]	; (8017a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80179e0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80179e2:	4a08      	ldr	r2, [pc, #32]	; (8017a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80179e4:	89fb      	ldrh	r3, [r7, #14]
 80179e6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80179e8:	4b04      	ldr	r3, [pc, #16]	; (80179fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80179ea:	2200      	movs	r2, #0
 80179ec:	701a      	strb	r2, [r3, #0]
    }
 80179ee:	bf00      	nop
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	2000b4bc 	.word	0x2000b4bc
 8017a00:	2000b4ba 	.word	0x2000b4ba
 8017a04:	2000b4b8 	.word	0x2000b4b8

08017a08 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8017a08:	b480      	push	{r7}
 8017a0a:	b083      	sub	sp, #12
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
    {
    }
 8017a10:	bf00      	nop
 8017a12:	370c      	adds	r7, #12
 8017a14:	46bd      	mov	sp, r7
 8017a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1a:	4770      	bx	lr

08017a1c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8017a1c:	b480      	push	{r7}
 8017a1e:	b083      	sub	sp, #12
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
    {
    }
 8017a24:	bf00      	nop
 8017a26:	370c      	adds	r7, #12
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2e:	4770      	bx	lr

08017a30 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	f002 fa7f 	bl	8019f3e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8017a40:	bf00      	nop
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	4a05      	ldr	r2, [pc, #20]	; (8017a68 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	601a      	str	r2, [r3, #0]
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7ff fe85 	bl	8017768 <_ZN8touchgfx3HALD1Ev>
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	4618      	mov	r0, r3
 8017a62:	3708      	adds	r7, #8
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	0802ebfc 	.word	0x0802ebfc

08017a6c <_ZN20TouchGFXGeneratedHALD0Ev>:
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	f7ff ffe7 	bl	8017a48 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017a7a:	217c      	movs	r1, #124	; 0x7c
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f013 ff0a 	bl	802b896 <_ZdlPvj>
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	4618      	mov	r0, r3
 8017a86:	3708      	adds	r7, #8
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}

08017a8c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b082      	sub	sp, #8
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7ff ffca 	bl	8017a30 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8017a9c:	bf00      	nop
 8017a9e:	3708      	adds	r7, #8
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b082      	sub	sp, #8
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f001 fb0c 	bl	80190cc <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8017ab4:	bf00      	nop
 8017ab6:	3708      	adds	r7, #8
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f001 fbac 	bl	8019224 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8017acc:	4603      	mov	r3, r0
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3708      	adds	r7, #8
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}

08017ad6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8017ad6:	b580      	push	{r7, lr}
 8017ad8:	b082      	sub	sp, #8
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	6078      	str	r0, [r7, #4]
 8017ade:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6839      	ldr	r1, [r7, #0]
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f001 fbab 	bl	8019240 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8017aea:	bf00      	nop
 8017aec:	3708      	adds	r7, #8
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd80      	pop	{r7, pc}

08017af2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017af2:	b580      	push	{r7, lr}
 8017af4:	b082      	sub	sp, #8
 8017af6:	af00      	add	r7, sp, #0
 8017af8:	6078      	str	r0, [r7, #4]
 8017afa:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6839      	ldr	r1, [r7, #0]
 8017b00:	4618      	mov	r0, r3
 8017b02:	f001 fbb3 	bl	801926c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8017b06:	bf00      	nop
 8017b08:	3708      	adds	r7, #8
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}

08017b0e <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017b0e:	b580      	push	{r7, lr}
 8017b10:	b084      	sub	sp, #16
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	60f8      	str	r0, [r7, #12]
 8017b16:	60b9      	str	r1, [r7, #8]
 8017b18:	607a      	str	r2, [r7, #4]
 8017b1a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8017b1c:	68f8      	ldr	r0, [r7, #12]
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	68b9      	ldr	r1, [r7, #8]
 8017b24:	f001 fbb0 	bl	8019288 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8017b28:	4603      	mov	r3, r0
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3710      	adds	r7, #16
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}

08017b32 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8017b32:	b580      	push	{r7, lr}
 8017b34:	b082      	sub	sp, #8
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f001 faf3 	bl	8019128 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8017b42:	bf00      	nop
 8017b44:	3708      	adds	r7, #8
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}

08017b4a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8017b4a:	b580      	push	{r7, lr}
 8017b4c:	b082      	sub	sp, #8
 8017b4e:	af00      	add	r7, sp, #0
 8017b50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	4618      	mov	r0, r3
 8017b56:	f001 faf7 	bl	8019148 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8017b5a:	bf00      	nop
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	bd80      	pop	{r7, pc}

08017b62 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8017b62:	b580      	push	{r7, lr}
 8017b64:	b082      	sub	sp, #8
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f001 faf9 	bl	8019164 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8017b72:	bf00      	nop
 8017b74:	3708      	adds	r7, #8
 8017b76:	46bd      	mov	sp, r7
 8017b78:	bd80      	pop	{r7, pc}

08017b7a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8017b7a:	b580      	push	{r7, lr}
 8017b7c:	b082      	sub	sp, #8
 8017b7e:	af00      	add	r7, sp, #0
 8017b80:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f001 fafb 	bl	8019180 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}

08017b92 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8017b92:	b580      	push	{r7, lr}
 8017b94:	b082      	sub	sp, #8
 8017b96:	af00      	add	r7, sp, #0
 8017b98:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f001 fb1d 	bl	80191dc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8017ba2:	4603      	mov	r3, r0
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3708      	adds	r7, #8
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f001 fb1e 	bl	80191f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8017bbc:	bf00      	nop
 8017bbe:	3708      	adds	r7, #8
 8017bc0:	46bd      	mov	sp, r7
 8017bc2:	bd80      	pop	{r7, pc}

08017bc4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	6078      	str	r0, [r7, #4]
 8017bcc:	4a05      	ldr	r2, [pc, #20]	; (8017be4 <_ZN11TouchGFXHALD1Ev+0x20>)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	601a      	str	r2, [r3, #0]
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7ff ff37 	bl	8017a48 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	4618      	mov	r0, r3
 8017bde:	3708      	adds	r7, #8
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	0802e9cc 	.word	0x0802e9cc

08017be8 <_ZN11TouchGFXHALD0Ev>:
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7ff ffe7 	bl	8017bc4 <_ZN11TouchGFXHALD1Ev>
 8017bf6:	217c      	movs	r1, #124	; 0x7c
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f013 fe4c 	bl	802b896 <_ZdlPvj>
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	4618      	mov	r0, r3
 8017c02:	3708      	adds	r7, #8
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	af00      	add	r7, sp, #0
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1);
 8017c0c:	2101      	movs	r1, #1
 8017c0e:	4811      	ldr	r0, [pc, #68]	; (8017c54 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8017c10:	f7f4 f97a 	bl	800bf08 <osSemaphoreCreate>
 8017c14:	4603      	mov	r3, r0
 8017c16:	4a10      	ldr	r2, [pc, #64]	; (8017c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8017c18:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8017c1a:	4b0f      	ldr	r3, [pc, #60]	; (8017c58 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d105      	bne.n	8017c2e <_ZN8touchgfx10OSWrappers10initializeEv+0x26>
 8017c22:	4b0e      	ldr	r3, [pc, #56]	; (8017c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8017c24:	4a0e      	ldr	r2, [pc, #56]	; (8017c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8017c26:	2127      	movs	r1, #39	; 0x27
 8017c28:	480e      	ldr	r0, [pc, #56]	; (8017c64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8017c2a:	f013 fe63 	bl	802b8f4 <__assert_func>

    vsync_sem = osSemaphoreCreate(osSemaphore(vsync_sem), 1);
 8017c2e:	2101      	movs	r1, #1
 8017c30:	480d      	ldr	r0, [pc, #52]	; (8017c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8017c32:	f7f4 f969 	bl	800bf08 <osSemaphoreCreate>
 8017c36:	4603      	mov	r3, r0
 8017c38:	4a0c      	ldr	r2, [pc, #48]	; (8017c6c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8017c3a:	6013      	str	r3, [r2, #0]
    assert((vsync_sem != NULL) && "Creation of vsync semaphore failed");
 8017c3c:	4b0b      	ldr	r3, [pc, #44]	; (8017c6c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d105      	bne.n	8017c50 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>
 8017c44:	4b0a      	ldr	r3, [pc, #40]	; (8017c70 <_ZN8touchgfx10OSWrappers10initializeEv+0x68>)
 8017c46:	4a06      	ldr	r2, [pc, #24]	; (8017c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8017c48:	212a      	movs	r1, #42	; 0x2a
 8017c4a:	4806      	ldr	r0, [pc, #24]	; (8017c64 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8017c4c:	f013 fe52 	bl	802b8f4 <__assert_func>
}
 8017c50:	bf00      	nop
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	0802ea9c 	.word	0x0802ea9c
 8017c58:	20009104 	.word	0x20009104
 8017c5c:	0802e10c 	.word	0x0802e10c
 8017c60:	0802e158 	.word	0x0802e158
 8017c64:	0802e188 	.word	0x0802e188
 8017c68:	0802eaa4 	.word	0x0802eaa4
 8017c6c:	20009108 	.word	0x20009108
 8017c70:	0802e1b4 	.word	0x0802e1b4

08017c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8017c78:	4b04      	ldr	r3, [pc, #16]	; (8017c8c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7f4 f981 	bl	800bf88 <osSemaphoreWait>
}
 8017c86:	bf00      	nop
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	20009104 	.word	0x20009104

08017c90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017c94:	4b03      	ldr	r3, [pc, #12]	; (8017ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f7f4 f9c3 	bl	800c024 <osSemaphoreRelease>
}
 8017c9e:	bf00      	nop
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20009104 	.word	0x20009104

08017ca8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
    osSemaphoreWait(frame_buffer_sem, 0);
 8017cac:	4b03      	ldr	r3, [pc, #12]	; (8017cbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7f4 f968 	bl	800bf88 <osSemaphoreWait>
}
 8017cb8:	bf00      	nop
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	20009104 	.word	0x20009104

08017cc0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(frame_buffer_sem);
 8017cc4:	4b03      	ldr	r3, [pc, #12]	; (8017cd4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7f4 f9ab 	bl	800c024 <osSemaphoreRelease>
}
 8017cce:	bf00      	nop
 8017cd0:	bd80      	pop	{r7, pc}
 8017cd2:	bf00      	nop
 8017cd4:	20009104 	.word	0x20009104

08017cd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	af00      	add	r7, sp, #0
    // Release of semaphore inside an interrupt is handled by the CMSIS layer
    osSemaphoreRelease(vsync_sem);
 8017cdc:	4b03      	ldr	r3, [pc, #12]	; (8017cec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7f4 f99f 	bl	800c024 <osSemaphoreRelease>
}
 8017ce6:	bf00      	nop
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	20009108 	.word	0x20009108

08017cf0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osSemaphoreWait(vsync_sem, 0);
 8017cf4:	4b07      	ldr	r3, [pc, #28]	; (8017d14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	2100      	movs	r1, #0
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7f4 f944 	bl	800bf88 <osSemaphoreWait>

    // Then, wait for next VSYNC to occur.
    osSemaphoreWait(vsync_sem, osWaitForever);
 8017d00:	4b04      	ldr	r3, [pc, #16]	; (8017d14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f04f 31ff 	mov.w	r1, #4294967295
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7f4 f93d 	bl	800bf88 <osSemaphoreWait>
}
 8017d0e:	bf00      	nop
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	20009108 	.word	0x20009108

08017d18 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b082      	sub	sp, #8
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	4603      	mov	r3, r0
 8017d20:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8017d22:	88fb      	ldrh	r3, [r7, #6]
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7f4 f8db 	bl	800bee0 <osDelay>
}
 8017d2a:	bf00      	nop
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
	...

08017d34 <__NVIC_EnableIRQ>:
{
 8017d34:	b480      	push	{r7}
 8017d36:	b083      	sub	sp, #12
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	db0b      	blt.n	8017d5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017d46:	79fb      	ldrb	r3, [r7, #7]
 8017d48:	f003 021f 	and.w	r2, r3, #31
 8017d4c:	4907      	ldr	r1, [pc, #28]	; (8017d6c <__NVIC_EnableIRQ+0x38>)
 8017d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d52:	095b      	lsrs	r3, r3, #5
 8017d54:	2001      	movs	r0, #1
 8017d56:	fa00 f202 	lsl.w	r2, r0, r2
 8017d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017d5e:	bf00      	nop
 8017d60:	370c      	adds	r7, #12
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr
 8017d6a:	bf00      	nop
 8017d6c:	e000e100 	.word	0xe000e100

08017d70 <__NVIC_DisableIRQ>:
{
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	4603      	mov	r3, r0
 8017d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	db12      	blt.n	8017da8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017d82:	79fb      	ldrb	r3, [r7, #7]
 8017d84:	f003 021f 	and.w	r2, r3, #31
 8017d88:	490a      	ldr	r1, [pc, #40]	; (8017db4 <__NVIC_DisableIRQ+0x44>)
 8017d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d8e:	095b      	lsrs	r3, r3, #5
 8017d90:	2001      	movs	r0, #1
 8017d92:	fa00 f202 	lsl.w	r2, r0, r2
 8017d96:	3320      	adds	r3, #32
 8017d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017d9c:	f3bf 8f4f 	dsb	sy
}
 8017da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017da2:	f3bf 8f6f 	isb	sy
}
 8017da6:	bf00      	nop
}
 8017da8:	bf00      	nop
 8017daa:	370c      	adds	r7, #12
 8017dac:	46bd      	mov	sp, r7
 8017dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db2:	4770      	bx	lr
 8017db4:	e000e100 	.word	0xe000e100

08017db8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
        : color(0)
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	601a      	str	r2, [r3, #0]
    }
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	4618      	mov	r0, r3
 8017dca:	370c      	adds	r7, #12
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd2:	4770      	bx	lr

08017dd4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8017dd4:	b480      	push	{r7}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
        return color;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
    }
 8017de0:	4618      	mov	r0, r3
 8017de2:	370c      	adds	r7, #12
 8017de4:	46bd      	mov	sp, r7
 8017de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dea:	4770      	bx	lr

08017dec <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8017dec:	b480      	push	{r7}
 8017dee:	b083      	sub	sp, #12
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
    {
 8017df4:	4a04      	ldr	r2, [pc, #16]	; (8017e08 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	601a      	str	r2, [r3, #0]
    }
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	370c      	adds	r7, #12
 8017e00:	46bd      	mov	sp, r7
 8017e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e06:	4770      	bx	lr
 8017e08:	0802eb04 	.word	0x0802eb04

08017e0c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
    }
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f7ff ffe9 	bl	8017dec <_ZN8touchgfx9DMA_QueueD1Ev>
 8017e1a:	2104      	movs	r1, #4
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f013 fd3a 	bl	802b896 <_ZdlPvj>
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	4618      	mov	r0, r3
 8017e26:	3708      	adds	r7, #8
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	3344      	adds	r3, #68	; 0x44
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	4798      	blx	r3
    }
 8017e40:	bf00      	nop
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8017e48:	b480      	push	{r7}
 8017e4a:	b083      	sub	sp, #12
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
    {
 8017e50:	4a04      	ldr	r2, [pc, #16]	; (8017e64 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	601a      	str	r2, [r3, #0]
    }
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	370c      	adds	r7, #12
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e62:	4770      	bx	lr
 8017e64:	0802ee7c 	.word	0x0802ee7c

08017e68 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
    }
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7ff ffe9 	bl	8017e48 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8017e76:	210c      	movs	r1, #12
 8017e78:	6878      	ldr	r0, [r7, #4]
 8017e7a:	f013 fd0c 	bl	802b896 <_ZdlPvj>
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	4618      	mov	r0, r3
 8017e82:	3708      	adds	r7, #8
 8017e84:	46bd      	mov	sp, r7
 8017e86:	bd80      	pop	{r7, pc}

08017e88 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8017e88:	b480      	push	{r7}
 8017e8a:	b083      	sub	sp, #12
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8017e92:	4a09      	ldr	r2, [pc, #36]	; (8017eb8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	601a      	str	r2, [r3, #0]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	683a      	ldr	r2, [r7, #0]
 8017e9c:	605a      	str	r2, [r3, #4]
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	721a      	strb	r2, [r3, #8]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	725a      	strb	r2, [r3, #9]
    {
    }
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	4618      	mov	r0, r3
 8017eae:	370c      	adds	r7, #12
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb6:	4770      	bx	lr
 8017eb8:	0802ee7c 	.word	0x0802ee7c

08017ebc <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8017ec4:	2301      	movs	r3, #1
    }
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	370c      	adds	r7, #12
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr

08017ed2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8017ed2:	b580      	push	{r7, lr}
 8017ed4:	b082      	sub	sp, #8
 8017ed6:	af00      	add	r7, sp, #0
 8017ed8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	3328      	adds	r3, #40	; 0x28
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	4610      	mov	r0, r2
 8017ee6:	4798      	blx	r3
    }
 8017ee8:	bf00      	nop
 8017eea:	3708      	adds	r7, #8
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	685a      	ldr	r2, [r3, #4]
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	685b      	ldr	r3, [r3, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	3314      	adds	r3, #20
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	4610      	mov	r0, r2
 8017f08:	4798      	blx	r3
    }
 8017f0a:	bf00      	nop
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b082      	sub	sp, #8
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8017f1a:	f7f9 fbfd 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7ff ffe5 	bl	8017ef0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8017f26:	bf00      	nop
 8017f28:	3708      	adds	r7, #8
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}

08017f2e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8017f2e:	b580      	push	{r7, lr}
 8017f30:	b082      	sub	sp, #8
 8017f32:	af00      	add	r7, sp, #0
 8017f34:	6078      	str	r0, [r7, #4]
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	330c      	adds	r3, #12
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f7ff ff3c 	bl	8017db8 <_ZN8touchgfx9colortypeC1Ev>
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	4618      	mov	r0, r3
 8017f44:	3708      	adds	r7, #8
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}
	...

08017f4c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8017f4c:	b5b0      	push	{r4, r5, r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8017f54:	687a      	ldr	r2, [r7, #4]
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	330c      	adds	r3, #12
 8017f5a:	4619      	mov	r1, r3
 8017f5c:	4610      	mov	r0, r2
 8017f5e:	f7ff ff93 	bl	8017e88 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8017f62:	4a0e      	ldr	r2, [pc, #56]	; (8017f9c <_ZN8STM32DMAC1Ev+0x50>)
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	601a      	str	r2, [r3, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f103 000c 	add.w	r0, r3, #12
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	3320      	adds	r3, #32
 8017f72:	2260      	movs	r2, #96	; 0x60
 8017f74:	4619      	mov	r1, r3
 8017f76:	f002 feb7 	bl	801ace8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	3320      	adds	r3, #32
 8017f7e:	245f      	movs	r4, #95	; 0x5f
 8017f80:	461d      	mov	r5, r3
 8017f82:	2c00      	cmp	r4, #0
 8017f84:	db05      	blt.n	8017f92 <_ZN8STM32DMAC1Ev+0x46>
 8017f86:	4628      	mov	r0, r5
 8017f88:	f7ff ffd1 	bl	8017f2e <_ZN8touchgfx6BlitOpC1Ev>
 8017f8c:	3524      	adds	r5, #36	; 0x24
 8017f8e:	3c01      	subs	r4, #1
 8017f90:	e7f7      	b.n	8017f82 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	4618      	mov	r0, r3
 8017f96:	3708      	adds	r7, #8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8017f9c:	0802eab4 	.word	0x0802eab4

08017fa0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
 8017fa8:	4a09      	ldr	r2, [pc, #36]	; (8017fd0 <_ZN8STM32DMAD1Ev+0x30>)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017fae:	205a      	movs	r0, #90	; 0x5a
 8017fb0:	f7ff fede 	bl	8017d70 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	330c      	adds	r3, #12
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f000 fac7 	bl	801854c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7ff ff41 	bl	8017e48 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}
 8017fd0:	0802eab4 	.word	0x0802eab4

08017fd4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
}
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f7ff ffdf 	bl	8017fa0 <_ZN8STM32DMAD1Ev>
 8017fe2:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f013 fc55 	bl	802b896 <_ZdlPvj>
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3708      	adds	r7, #8
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
	...

08017ff8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b084      	sub	sp, #16
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8018000:	2300      	movs	r3, #0
 8018002:	60fb      	str	r3, [r7, #12]
 8018004:	4b10      	ldr	r3, [pc, #64]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 8018006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018008:	4a0f      	ldr	r2, [pc, #60]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 801800a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801800e:	6313      	str	r3, [r2, #48]	; 0x30
 8018010:	4b0d      	ldr	r3, [pc, #52]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 8018012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018018:	60fb      	str	r3, [r7, #12]
 801801a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 801801c:	4b0a      	ldr	r3, [pc, #40]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 801801e:	691b      	ldr	r3, [r3, #16]
 8018020:	4a09      	ldr	r2, [pc, #36]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 8018022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018026:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8018028:	4b07      	ldr	r3, [pc, #28]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 801802a:	691b      	ldr	r3, [r3, #16]
 801802c:	4a06      	ldr	r2, [pc, #24]	; (8018048 <_ZN8STM32DMA10initializeEv+0x50>)
 801802e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8018032:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8018034:	4b05      	ldr	r3, [pc, #20]	; (801804c <_ZN8STM32DMA10initializeEv+0x54>)
 8018036:	4a06      	ldr	r2, [pc, #24]	; (8018050 <_ZN8STM32DMA10initializeEv+0x58>)
 8018038:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 801803a:	205a      	movs	r0, #90	; 0x5a
 801803c:	f7ff fe7a 	bl	8017d34 <__NVIC_EnableIRQ>
}
 8018040:	bf00      	nop
 8018042:	3710      	adds	r7, #16
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	40023800 	.word	0x40023800
 801804c:	20000b88 	.word	0x20000b88
 8018050:	08017f13 	.word	0x08017f13

08018054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8018054:	b580      	push	{r7, lr}
 8018056:	b084      	sub	sp, #16
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
 801805c:	460b      	mov	r3, r1
 801805e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8018060:	2300      	movs	r3, #0
 8018062:	60fb      	str	r3, [r7, #12]

    switch (format)
 8018064:	78fb      	ldrb	r3, [r7, #3]
 8018066:	2b0b      	cmp	r3, #11
 8018068:	d826      	bhi.n	80180b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 801806a:	a201      	add	r2, pc, #4	; (adr r2, 8018070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 801806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018070:	080180ad 	.word	0x080180ad
 8018074:	080180a7 	.word	0x080180a7
 8018078:	080180a1 	.word	0x080180a1
 801807c:	080180b9 	.word	0x080180b9
 8018080:	080180b9 	.word	0x080180b9
 8018084:	080180b9 	.word	0x080180b9
 8018088:	080180b9 	.word	0x080180b9
 801808c:	080180b3 	.word	0x080180b3
 8018090:	080180b3 	.word	0x080180b3
 8018094:	080180b3 	.word	0x080180b3
 8018098:	080180b3 	.word	0x080180b3
 801809c:	080180b3 	.word	0x080180b3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80180a0:	2300      	movs	r3, #0
 80180a2:	60fb      	str	r3, [r7, #12]
        break;
 80180a4:	e00e      	b.n	80180c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80180a6:	2301      	movs	r3, #1
 80180a8:	60fb      	str	r3, [r7, #12]
        break;
 80180aa:	e00b      	b.n	80180c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80180ac:	2302      	movs	r3, #2
 80180ae:	60fb      	str	r3, [r7, #12]
        break;
 80180b0:	e008      	b.n	80180c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80180b2:	2305      	movs	r3, #5
 80180b4:	60fb      	str	r3, [r7, #12]
        break;
 80180b6:	e005      	b.n	80180c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80180b8:	4b05      	ldr	r3, [pc, #20]	; (80180d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80180ba:	4a06      	ldr	r2, [pc, #24]	; (80180d4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80180bc:	2166      	movs	r1, #102	; 0x66
 80180be:	4806      	ldr	r0, [pc, #24]	; (80180d8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80180c0:	f013 fc18 	bl	802b8f4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80180c4:	68fb      	ldr	r3, [r7, #12]
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3710      	adds	r7, #16
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}
 80180ce:	bf00      	nop
 80180d0:	0802e1f0 	.word	0x0802e1f0
 80180d4:	0802e20c 	.word	0x0802e20c
 80180d8:	0802e258 	.word	0x0802e258

080180dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b084      	sub	sp, #16
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	460b      	mov	r3, r1
 80180e6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80180e8:	2300      	movs	r3, #0
 80180ea:	60fb      	str	r3, [r7, #12]

    switch (format)
 80180ec:	78fb      	ldrb	r3, [r7, #3]
 80180ee:	2b0a      	cmp	r3, #10
 80180f0:	d821      	bhi.n	8018136 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80180f2:	a201      	add	r2, pc, #4	; (adr r2, 80180f8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80180f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180f8:	08018131 	.word	0x08018131
 80180fc:	0801812b 	.word	0x0801812b
 8018100:	08018125 	.word	0x08018125
 8018104:	08018137 	.word	0x08018137
 8018108:	08018137 	.word	0x08018137
 801810c:	08018137 	.word	0x08018137
 8018110:	08018137 	.word	0x08018137
 8018114:	0801812b 	.word	0x0801812b
 8018118:	0801812b 	.word	0x0801812b
 801811c:	0801812b 	.word	0x0801812b
 8018120:	0801812b 	.word	0x0801812b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8018124:	2300      	movs	r3, #0
 8018126:	60fb      	str	r3, [r7, #12]
        break;
 8018128:	e00b      	b.n	8018142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801812a:	2301      	movs	r3, #1
 801812c:	60fb      	str	r3, [r7, #12]
        break;
 801812e:	e008      	b.n	8018142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8018130:	2302      	movs	r3, #2
 8018132:	60fb      	str	r3, [r7, #12]
        break;
 8018134:	e005      	b.n	8018142 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8018136:	4b05      	ldr	r3, [pc, #20]	; (801814c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8018138:	4a05      	ldr	r2, [pc, #20]	; (8018150 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801813a:	2187      	movs	r1, #135	; 0x87
 801813c:	4805      	ldr	r0, [pc, #20]	; (8018154 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801813e:	f013 fbd9 	bl	802b8f4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8018142:	68fb      	ldr	r3, [r7, #12]
}
 8018144:	4618      	mov	r0, r3
 8018146:	3710      	adds	r7, #16
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}
 801814c:	0802e1f0 	.word	0x0802e1f0
 8018150:	0802e284 	.word	0x0802e284
 8018154:	0802e258 	.word	0x0802e258

08018158 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8018158:	b480      	push	{r7}
 801815a:	b083      	sub	sp, #12
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8018160:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8018164:	4618      	mov	r0, r3
 8018166:	370c      	adds	r7, #12
 8018168:	46bd      	mov	sp, r7
 801816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816e:	4770      	bx	lr

08018170 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b089      	sub	sp, #36	; 0x24
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	7f5b      	ldrb	r3, [r3, #29]
 801817e:	4619      	mov	r1, r3
 8018180:	6878      	ldr	r0, [r7, #4]
 8018182:	f7ff ff67 	bl	8018054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8018186:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	7f9b      	ldrb	r3, [r3, #30]
 801818c:	4619      	mov	r1, r3
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f7ff ff60 	bl	8018054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8018194:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	7f9b      	ldrb	r3, [r3, #30]
 801819a:	4619      	mov	r1, r3
 801819c:	6878      	ldr	r0, [r7, #4]
 801819e:	f7ff ff9d 	bl	80180dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80181a2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	8b5b      	ldrh	r3, [r3, #26]
 80181a8:	461a      	mov	r2, r3
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	8a9b      	ldrh	r3, [r3, #20]
 80181ae:	1ad2      	subs	r2, r2, r3
 80181b0:	4b95      	ldr	r3, [pc, #596]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	8b5b      	ldrh	r3, [r3, #26]
 80181b8:	461a      	mov	r2, r3
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	8a9b      	ldrh	r3, [r3, #20]
 80181be:	1ad2      	subs	r2, r2, r3
 80181c0:	4b91      	ldr	r3, [pc, #580]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181c2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	8b1b      	ldrh	r3, [r3, #24]
 80181c8:	461a      	mov	r2, r3
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	8a9b      	ldrh	r3, [r3, #20]
 80181ce:	1ad2      	subs	r2, r2, r3
 80181d0:	4b8d      	ldr	r3, [pc, #564]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181d2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80181d4:	4a8c      	ldr	r2, [pc, #560]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181d6:	693b      	ldr	r3, [r7, #16]
 80181d8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	8adb      	ldrh	r3, [r3, #22]
 80181de:	461a      	mov	r2, r3
 80181e0:	683b      	ldr	r3, [r7, #0]
 80181e2:	8a9b      	ldrh	r3, [r3, #20]
 80181e4:	041b      	lsls	r3, r3, #16
 80181e6:	431a      	orrs	r2, r3
 80181e8:	4b87      	ldr	r3, [pc, #540]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	691a      	ldr	r2, [r3, #16]
 80181f0:	4b85      	ldr	r3, [pc, #532]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	685a      	ldr	r2, [r3, #4]
 80181f8:	4b83      	ldr	r3, [pc, #524]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80181fa:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80181fc:	683b      	ldr	r3, [r7, #0]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018204:	d037      	beq.n	8018276 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8018206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801820a:	f200 80e8 	bhi.w	80183de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801820e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018212:	d014      	beq.n	801823e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8018214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018218:	f200 80e1 	bhi.w	80183de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801821c:	2b80      	cmp	r3, #128	; 0x80
 801821e:	d05b      	beq.n	80182d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8018220:	2b80      	cmp	r3, #128	; 0x80
 8018222:	f200 80dc 	bhi.w	80183de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8018226:	2b40      	cmp	r3, #64	; 0x40
 8018228:	f000 80c4 	beq.w	80183b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801822c:	2b40      	cmp	r3, #64	; 0x40
 801822e:	f200 80d6 	bhi.w	80183de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8018232:	2b04      	cmp	r3, #4
 8018234:	d03b      	beq.n	80182ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8018236:	2b20      	cmp	r3, #32
 8018238:	f000 80bc 	beq.w	80183b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801823c:	e0cf      	b.n	80183de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	7f1b      	ldrb	r3, [r3, #28]
 8018242:	061b      	lsls	r3, r3, #24
 8018244:	4a70      	ldr	r2, [pc, #448]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801824a:	f043 030a 	orr.w	r3, r3, #10
 801824e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	330c      	adds	r3, #12
 8018254:	4c6c      	ldr	r4, [pc, #432]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018256:	4618      	mov	r0, r3
 8018258:	f7ff fdbc 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 801825c:	4603      	mov	r3, r0
 801825e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8018260:	4a69      	ldr	r2, [pc, #420]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	691a      	ldr	r2, [r3, #16]
 801826a:	4b67      	ldr	r3, [pc, #412]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801826c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801826e:	4b66      	ldr	r3, [pc, #408]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018270:	4a66      	ldr	r2, [pc, #408]	; (801840c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018272:	601a      	str	r2, [r3, #0]
        break;
 8018274:	e0d9      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	7f1b      	ldrb	r3, [r3, #28]
 801827a:	061b      	lsls	r3, r3, #24
 801827c:	4a62      	ldr	r2, [pc, #392]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801827e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018282:	f043 0309 	orr.w	r3, r3, #9
 8018286:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8018288:	683b      	ldr	r3, [r7, #0]
 801828a:	330c      	adds	r3, #12
 801828c:	4c5e      	ldr	r4, [pc, #376]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801828e:	4618      	mov	r0, r3
 8018290:	f7ff fda0 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 8018294:	4603      	mov	r3, r0
 8018296:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8018298:	4a5b      	ldr	r2, [pc, #364]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	691a      	ldr	r2, [r3, #16]
 80182a2:	4b59      	ldr	r3, [pc, #356]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182a4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80182a6:	4b58      	ldr	r3, [pc, #352]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182a8:	4a58      	ldr	r2, [pc, #352]	; (801840c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182aa:	601a      	str	r2, [r3, #0]
        break;
 80182ac:	e0bd      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80182ae:	683b      	ldr	r3, [r7, #0]
 80182b0:	7f1b      	ldrb	r3, [r3, #28]
 80182b2:	061b      	lsls	r3, r3, #24
 80182b4:	461a      	mov	r2, r3
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	4313      	orrs	r3, r2
 80182ba:	4a53      	ldr	r2, [pc, #332]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80182c0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80182c2:	4a51      	ldr	r2, [pc, #324]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182c4:	697b      	ldr	r3, [r7, #20]
 80182c6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	691a      	ldr	r2, [r3, #16]
 80182cc:	4b4e      	ldr	r3, [pc, #312]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182ce:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80182d0:	4b4d      	ldr	r3, [pc, #308]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182d2:	4a4e      	ldr	r2, [pc, #312]	; (801840c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182d4:	601a      	str	r2, [r3, #0]
        break;
 80182d6:	e0a8      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80182d8:	2301      	movs	r3, #1
 80182da:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	689b      	ldr	r3, [r3, #8]
 80182e0:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	1d1a      	adds	r2, r3, #4
 80182e6:	4b48      	ldr	r3, [pc, #288]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182e8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	7f1b      	ldrb	r3, [r3, #28]
 80182ee:	061b      	lsls	r3, r3, #24
 80182f0:	461a      	mov	r2, r3
 80182f2:	69bb      	ldr	r3, [r7, #24]
 80182f4:	4313      	orrs	r3, r2
 80182f6:	4a44      	ldr	r2, [pc, #272]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80182f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80182fc:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80182fe:	4a42      	ldr	r2, [pc, #264]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	691a      	ldr	r2, [r3, #16]
 8018308:	4b3f      	ldr	r3, [pc, #252]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801830a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	881b      	ldrh	r3, [r3, #0]
 8018310:	b2db      	uxtb	r3, r3
 8018312:	2b00      	cmp	r3, #0
 8018314:	d002      	beq.n	801831c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 8018316:	2b01      	cmp	r3, #1
 8018318:	d00f      	beq.n	801833a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 801831a:	e024      	b.n	8018366 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801831c:	4b3a      	ldr	r3, [pc, #232]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801831e:	69db      	ldr	r3, [r3, #28]
 8018320:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018324:	f023 0310 	bic.w	r3, r3, #16
 8018328:	68fa      	ldr	r2, [r7, #12]
 801832a:	8852      	ldrh	r2, [r2, #2]
 801832c:	3a01      	subs	r2, #1
 801832e:	0212      	lsls	r2, r2, #8
 8018330:	4611      	mov	r1, r2
 8018332:	4a35      	ldr	r2, [pc, #212]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018334:	430b      	orrs	r3, r1
 8018336:	61d3      	str	r3, [r2, #28]
                break;
 8018338:	e01c      	b.n	8018374 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	7f1b      	ldrb	r3, [r3, #28]
 801833e:	2bff      	cmp	r3, #255	; 0xff
 8018340:	d101      	bne.n	8018346 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8018342:	2300      	movs	r3, #0
 8018344:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8018346:	4b30      	ldr	r3, [pc, #192]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018348:	69db      	ldr	r3, [r3, #28]
 801834a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801834e:	f023 0310 	bic.w	r3, r3, #16
 8018352:	68fa      	ldr	r2, [r7, #12]
 8018354:	8852      	ldrh	r2, [r2, #2]
 8018356:	3a01      	subs	r2, #1
 8018358:	0212      	lsls	r2, r2, #8
 801835a:	4313      	orrs	r3, r2
 801835c:	4a2a      	ldr	r2, [pc, #168]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801835e:	f043 0310 	orr.w	r3, r3, #16
 8018362:	61d3      	str	r3, [r2, #28]
                break;
 8018364:	e006      	b.n	8018374 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8018366:	4b2a      	ldr	r3, [pc, #168]	; (8018410 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8018368:	4a2a      	ldr	r2, [pc, #168]	; (8018414 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801836a:	f240 1111 	movw	r1, #273	; 0x111
 801836e:	482a      	ldr	r0, [pc, #168]	; (8018418 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8018370:	f013 fac0 	bl	802b8f4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8018374:	4b24      	ldr	r3, [pc, #144]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018376:	69db      	ldr	r3, [r3, #28]
 8018378:	4a23      	ldr	r2, [pc, #140]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801837a:	f043 0320 	orr.w	r3, r3, #32
 801837e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8018380:	4b21      	ldr	r3, [pc, #132]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018382:	69db      	ldr	r3, [r3, #28]
 8018384:	f003 0320 	and.w	r3, r3, #32
 8018388:	2b00      	cmp	r3, #0
 801838a:	bf14      	ite	ne
 801838c:	2301      	movne	r3, #1
 801838e:	2300      	moveq	r3, #0
 8018390:	b2db      	uxtb	r3, r3
 8018392:	2b00      	cmp	r3, #0
 8018394:	d000      	beq.n	8018398 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8018396:	e7f3      	b.n	8018380 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8018398:	4b1b      	ldr	r3, [pc, #108]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801839a:	2210      	movs	r2, #16
 801839c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 801839e:	7ffb      	ldrb	r3, [r7, #31]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d003      	beq.n	80183ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80183a4:	4b18      	ldr	r3, [pc, #96]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183a6:	4a19      	ldr	r2, [pc, #100]	; (801840c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183a8:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80183aa:	e03e      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80183ac:	4b16      	ldr	r3, [pc, #88]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183ae:	4a1b      	ldr	r2, [pc, #108]	; (801841c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80183b0:	601a      	str	r2, [r3, #0]
        break;
 80183b2:	e03a      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	7f1b      	ldrb	r3, [r3, #28]
 80183b8:	061b      	lsls	r3, r3, #24
 80183ba:	461a      	mov	r2, r3
 80183bc:	69bb      	ldr	r3, [r7, #24]
 80183be:	4313      	orrs	r3, r2
 80183c0:	4a11      	ldr	r2, [pc, #68]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80183c6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80183c8:	4a0f      	ldr	r2, [pc, #60]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80183ce:	683b      	ldr	r3, [r7, #0]
 80183d0:	691a      	ldr	r2, [r3, #16]
 80183d2:	4b0d      	ldr	r3, [pc, #52]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183d4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80183d6:	4b0c      	ldr	r3, [pc, #48]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183d8:	4a0c      	ldr	r2, [pc, #48]	; (801840c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183da:	601a      	str	r2, [r3, #0]
        break;
 80183dc:	e025      	b.n	801842a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	7f1b      	ldrb	r3, [r3, #28]
 80183e2:	061b      	lsls	r3, r3, #24
 80183e4:	461a      	mov	r2, r3
 80183e6:	69bb      	ldr	r3, [r7, #24]
 80183e8:	4313      	orrs	r3, r2
 80183ea:	4a07      	ldr	r2, [pc, #28]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80183f0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	7f5a      	ldrb	r2, [r3, #29]
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	7f9b      	ldrb	r3, [r3, #30]
 80183fa:	429a      	cmp	r2, r3
 80183fc:	d010      	beq.n	8018420 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80183fe:	4b02      	ldr	r3, [pc, #8]	; (8018408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018400:	4a06      	ldr	r2, [pc, #24]	; (801841c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8018402:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8018404:	e010      	b.n	8018428 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8018406:	bf00      	nop
 8018408:	4002b000 	.word	0x4002b000
 801840c:	00020201 	.word	0x00020201
 8018410:	0802e2d0 	.word	0x0802e2d0
 8018414:	0802e2ec 	.word	0x0802e2ec
 8018418:	0802e258 	.word	0x0802e258
 801841c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8018420:	4b04      	ldr	r3, [pc, #16]	; (8018434 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8018422:	f240 2201 	movw	r2, #513	; 0x201
 8018426:	601a      	str	r2, [r3, #0]
        break;
 8018428:	bf00      	nop
    }
}
 801842a:	bf00      	nop
 801842c:	3724      	adds	r7, #36	; 0x24
 801842e:	46bd      	mov	sp, r7
 8018430:	bd90      	pop	{r4, r7, pc}
 8018432:	bf00      	nop
 8018434:	4002b000 	.word	0x4002b000

08018438 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8018438:	b590      	push	{r4, r7, lr}
 801843a:	b085      	sub	sp, #20
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	7f9b      	ldrb	r3, [r3, #30]
 8018446:	4619      	mov	r1, r3
 8018448:	6878      	ldr	r0, [r7, #4]
 801844a:	f7ff fe47 	bl	80180dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801844e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8018450:	4a3b      	ldr	r2, [pc, #236]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	8adb      	ldrh	r3, [r3, #22]
 801845a:	461a      	mov	r2, r3
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	8a9b      	ldrh	r3, [r3, #20]
 8018460:	041b      	lsls	r3, r3, #16
 8018462:	431a      	orrs	r2, r3
 8018464:	4b36      	ldr	r3, [pc, #216]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018466:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	691a      	ldr	r2, [r3, #16]
 801846c:	4b34      	ldr	r3, [pc, #208]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801846e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	8b5b      	ldrh	r3, [r3, #26]
 8018474:	461a      	mov	r2, r3
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	8a9b      	ldrh	r3, [r3, #20]
 801847a:	1ad2      	subs	r2, r2, r3
 801847c:	4b30      	ldr	r3, [pc, #192]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801847e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2b08      	cmp	r3, #8
 8018486:	d12f      	bne.n	80184e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018488:	683b      	ldr	r3, [r7, #0]
 801848a:	8b5b      	ldrh	r3, [r3, #26]
 801848c:	461a      	mov	r2, r3
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	8a9b      	ldrh	r3, [r3, #20]
 8018492:	1ad2      	subs	r2, r2, r3
 8018494:	4b2a      	ldr	r3, [pc, #168]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018496:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	8b5b      	ldrh	r3, [r3, #26]
 801849c:	461a      	mov	r2, r3
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	8a9b      	ldrh	r3, [r3, #20]
 80184a2:	1ad2      	subs	r2, r2, r3
 80184a4:	4b26      	ldr	r3, [pc, #152]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184a6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80184a8:	4a25      	ldr	r2, [pc, #148]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184aa:	68fb      	ldr	r3, [r7, #12]
 80184ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	7f1b      	ldrb	r3, [r3, #28]
 80184b2:	061b      	lsls	r3, r3, #24
 80184b4:	4a22      	ldr	r2, [pc, #136]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80184ba:	f043 0309 	orr.w	r3, r3, #9
 80184be:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	330c      	adds	r3, #12
 80184c4:	4c1e      	ldr	r4, [pc, #120]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7ff fc84 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 80184cc:	4603      	mov	r3, r0
 80184ce:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	691a      	ldr	r2, [r3, #16]
 80184d4:	4b1a      	ldr	r3, [pc, #104]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184d6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80184d8:	683b      	ldr	r3, [r7, #0]
 80184da:	691a      	ldr	r2, [r3, #16]
 80184dc:	4b18      	ldr	r3, [pc, #96]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184de:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80184e0:	4b17      	ldr	r3, [pc, #92]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184e2:	4a18      	ldr	r2, [pc, #96]	; (8018544 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80184e4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80184e6:	e027      	b.n	8018538 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80184e8:	4a15      	ldr	r2, [pc, #84]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80184ee:	4b14      	ldr	r3, [pc, #80]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80184f0:	2200      	movs	r2, #0
 80184f2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	330c      	adds	r3, #12
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7ff fc6b 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 80184fe:	4603      	mov	r3, r0
 8018500:	0a1b      	lsrs	r3, r3, #8
 8018502:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	330c      	adds	r3, #12
 801850a:	4618      	mov	r0, r3
 801850c:	f7ff fc62 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 8018510:	4603      	mov	r3, r0
 8018512:	095b      	lsrs	r3, r3, #5
 8018514:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018518:	431c      	orrs	r4, r3
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	330c      	adds	r3, #12
 801851e:	4618      	mov	r0, r3
 8018520:	f7ff fc58 	bl	8017dd4 <_ZNK8touchgfx9colortypecvmEv>
 8018524:	4603      	mov	r3, r0
 8018526:	08db      	lsrs	r3, r3, #3
 8018528:	f003 031f 	and.w	r3, r3, #31
 801852c:	4a04      	ldr	r2, [pc, #16]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801852e:	4323      	orrs	r3, r4
 8018530:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8018532:	4b03      	ldr	r3, [pc, #12]	; (8018540 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018534:	4a04      	ldr	r2, [pc, #16]	; (8018548 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8018536:	601a      	str	r2, [r3, #0]
}
 8018538:	bf00      	nop
 801853a:	3714      	adds	r7, #20
 801853c:	46bd      	mov	sp, r7
 801853e:	bd90      	pop	{r4, r7, pc}
 8018540:	4002b000 	.word	0x4002b000
 8018544:	00020201 	.word	0x00020201
 8018548:	00030201 	.word	0x00030201

0801854c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801854c:	b580      	push	{r7, lr}
 801854e:	b082      	sub	sp, #8
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	4a05      	ldr	r2, [pc, #20]	; (801856c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	601a      	str	r2, [r3, #0]
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	4618      	mov	r0, r3
 801855e:	f7ff fc45 	bl	8017dec <_ZN8touchgfx9DMA_QueueD1Ev>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	4618      	mov	r0, r3
 8018566:	3708      	adds	r7, #8
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}
 801856c:	0802eecc 	.word	0x0802eecc

08018570 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
 8018578:	6878      	ldr	r0, [r7, #4]
 801857a:	f7ff ffe7 	bl	801854c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801857e:	2114      	movs	r1, #20
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f013 f988 	bl	802b896 <_ZdlPvj>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	4618      	mov	r0, r3
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8018590:	b480      	push	{r7}
 8018592:	b083      	sub	sp, #12
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8018598:	4a04      	ldr	r2, [pc, #16]	; (80185ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6013      	str	r3, [r2, #0]
    }
 801859e:	bf00      	nop
 80185a0:	370c      	adds	r7, #12
 80185a2:	46bd      	mov	sp, r7
 80185a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a8:	4770      	bx	lr
 80185aa:	bf00      	nop
 80185ac:	2000b520 	.word	0x2000b520

080185b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80185b0:	b480      	push	{r7}
 80185b2:	b085      	sub	sp, #20
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
 80185bc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80185be:	4a0b      	ldr	r2, [pc, #44]	; (80185ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	601a      	str	r2, [r3, #0]
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	68ba      	ldr	r2, [r7, #8]
 80185c8:	605a      	str	r2, [r3, #4]
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	687a      	ldr	r2, [r7, #4]
 80185ce:	609a      	str	r2, [r3, #8]
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	683a      	ldr	r2, [r7, #0]
 80185d4:	60da      	str	r2, [r3, #12]
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	69ba      	ldr	r2, [r7, #24]
 80185da:	611a      	str	r2, [r3, #16]
    {
    }
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	4618      	mov	r0, r3
 80185e0:	3714      	adds	r7, #20
 80185e2:	46bd      	mov	sp, r7
 80185e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e8:	4770      	bx	lr
 80185ea:	bf00      	nop
 80185ec:	0802ebec 	.word	0x0802ebec

080185f0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80185f0:	b480      	push	{r7}
 80185f2:	b083      	sub	sp, #12
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
    {
 80185f8:	4a04      	ldr	r2, [pc, #16]	; (801860c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	601a      	str	r2, [r3, #0]
    }
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	4618      	mov	r0, r3
 8018602:	370c      	adds	r7, #12
 8018604:	46bd      	mov	sp, r7
 8018606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860a:	4770      	bx	lr
 801860c:	0802ebec 	.word	0x0802ebec

08018610 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8018610:	b580      	push	{r7, lr}
 8018612:	b082      	sub	sp, #8
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
    }
 8018618:	6878      	ldr	r0, [r7, #4]
 801861a:	f7ff ffe9 	bl	80185f0 <_ZN8touchgfx7MVPHeapD1Ev>
 801861e:	2114      	movs	r1, #20
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f013 f938 	bl	802b896 <_ZdlPvj>
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	4618      	mov	r0, r3
 801862a:	3708      	adds	r7, #8
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}

08018630 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8018630:	b480      	push	{r7}
 8018632:	b083      	sub	sp, #12
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
    {
 8018638:	4a04      	ldr	r2, [pc, #16]	; (801864c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	601a      	str	r2, [r3, #0]
    }
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	4618      	mov	r0, r3
 8018642:	370c      	adds	r7, #12
 8018644:	46bd      	mov	sp, r7
 8018646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864a:	4770      	bx	lr
 801864c:	0802f2b8 	.word	0x0802f2b8

08018650 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
    }
 8018658:	6878      	ldr	r0, [r7, #4]
 801865a:	f7ff ffe9 	bl	8018630 <_ZN8touchgfx3LCDD1Ev>
 801865e:	2108      	movs	r1, #8
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f013 f918 	bl	802b896 <_ZdlPvj>
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	4618      	mov	r0, r3
 801866a:	3708      	adds	r7, #8
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8018670:	b480      	push	{r7}
 8018672:	b083      	sub	sp, #12
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2200      	movs	r2, #0
 801867c:	801a      	strh	r2, [r3, #0]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2200      	movs	r2, #0
 8018682:	805a      	strh	r2, [r3, #2]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	2200      	movs	r2, #0
 8018688:	809a      	strh	r2, [r3, #4]
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2200      	movs	r2, #0
 801868e:	80da      	strh	r2, [r3, #6]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2200      	movs	r2, #0
 8018694:	811a      	strh	r2, [r3, #8]
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	2200      	movs	r2, #0
 801869a:	815a      	strh	r2, [r3, #10]
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2200      	movs	r2, #0
 80186a0:	819a      	strh	r2, [r3, #12]
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	2200      	movs	r2, #0
 80186a6:	739a      	strb	r2, [r3, #14]
        {
        }
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	4618      	mov	r0, r3
 80186ac:	370c      	adds	r7, #12
 80186ae:	46bd      	mov	sp, r7
 80186b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b4:	4770      	bx	lr

080186b6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80186b6:	b580      	push	{r7, lr}
 80186b8:	b082      	sub	sp, #8
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7ff ffd5 	bl	8018670 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	2200      	movs	r2, #0
 80186ca:	611a      	str	r2, [r3, #16]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	2200      	movs	r2, #0
 80186d0:	829a      	strh	r2, [r3, #20]
    {
    }
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	4618      	mov	r0, r3
 80186d6:	3708      	adds	r7, #8
 80186d8:	46bd      	mov	sp, r7
 80186da:	bd80      	pop	{r7, pc}

080186dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80186dc:	b580      	push	{r7, lr}
 80186de:	b084      	sub	sp, #16
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	60b9      	str	r1, [r7, #8]
 80186e6:	607a      	str	r2, [r7, #4]
 80186e8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80186ea:	4a55      	ldr	r2, [pc, #340]	; (8018840 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	601a      	str	r2, [r3, #0]
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	68ba      	ldr	r2, [r7, #8]
 80186f4:	605a      	str	r2, [r3, #4]
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	609a      	str	r2, [r3, #8]
 80186fc:	68fb      	ldr	r3, [r7, #12]
 80186fe:	683a      	ldr	r2, [r7, #0]
 8018700:	60da      	str	r2, [r3, #12]
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2200      	movs	r2, #0
 8018706:	611a      	str	r2, [r3, #16]
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	2200      	movs	r2, #0
 801870c:	615a      	str	r2, [r3, #20]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	2200      	movs	r2, #0
 8018712:	619a      	str	r2, [r3, #24]
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	331c      	adds	r3, #28
 8018718:	4618      	mov	r0, r3
 801871a:	f7ff ffcc 	bl	80186b6 <_ZN8touchgfx8GesturesC1Ev>
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	2200      	movs	r2, #0
 8018722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	2200      	movs	r2, #0
 801872a:	639a      	str	r2, [r3, #56]	; 0x38
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	2200      	movs	r2, #0
 8018730:	63da      	str	r2, [r3, #60]	; 0x3c
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	2200      	movs	r2, #0
 8018736:	641a      	str	r2, [r3, #64]	; 0x40
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2200      	movs	r2, #0
 801873c:	645a      	str	r2, [r3, #68]	; 0x44
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	2200      	movs	r2, #0
 8018742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	2201      	movs	r2, #1
 801874a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	2200      	movs	r2, #0
 8018752:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	2200      	movs	r2, #0
 801875a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	2200      	movs	r2, #0
 8018762:	64da      	str	r2, [r3, #76]	; 0x4c
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	3350      	adds	r3, #80	; 0x50
 8018768:	4618      	mov	r0, r3
 801876a:	f7f9 fc6a 	bl	8012042 <_ZN8touchgfx4RectC1Ev>
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	2200      	movs	r2, #0
 8018772:	659a      	str	r2, [r3, #88]	; 0x58
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	2200      	movs	r2, #0
 8018778:	65da      	str	r2, [r3, #92]	; 0x5c
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2200      	movs	r2, #0
 801877e:	661a      	str	r2, [r3, #96]	; 0x60
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	2201      	movs	r2, #1
 8018784:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2200      	movs	r2, #0
 801878c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	2200      	movs	r2, #0
 8018794:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	2201      	movs	r2, #1
 801879c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	2200      	movs	r2, #0
 80187a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	2200      	movs	r2, #0
 80187ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	2200      	movs	r2, #0
 80187b4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2200      	movs	r2, #0
 80187bc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	2200      	movs	r2, #0
 80187c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2200      	movs	r2, #0
 80187cc:	671a      	str	r2, [r3, #112]	; 0x70
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	2200      	movs	r2, #0
 80187d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	2200      	movs	r2, #0
 80187da:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	2200      	movs	r2, #0
 80187e2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	2201      	movs	r2, #1
 80187ea:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	2201      	movs	r2, #1
 80187f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80187f6:	4a13      	ldr	r2, [pc, #76]	; (8018844 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80187fc:	4a12      	ldr	r2, [pc, #72]	; (8018848 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80187fe:	8b3b      	ldrh	r3, [r7, #24]
 8018800:	8013      	strh	r3, [r2, #0]
 8018802:	4b11      	ldr	r3, [pc, #68]	; (8018848 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8018804:	881a      	ldrh	r2, [r3, #0]
 8018806:	4b11      	ldr	r3, [pc, #68]	; (801884c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8018808:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801880a:	4a11      	ldr	r2, [pc, #68]	; (8018850 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801880c:	8bbb      	ldrh	r3, [r7, #28]
 801880e:	8013      	strh	r3, [r2, #0]
 8018810:	4b0f      	ldr	r3, [pc, #60]	; (8018850 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8018812:	881a      	ldrh	r2, [r3, #0]
 8018814:	4b0f      	ldr	r3, [pc, #60]	; (8018854 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8018816:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8018818:	4b0f      	ldr	r3, [pc, #60]	; (8018858 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801881a:	2200      	movs	r2, #0
 801881c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801881e:	8b3a      	ldrh	r2, [r7, #24]
 8018820:	8bbb      	ldrh	r3, [r7, #28]
 8018822:	429a      	cmp	r2, r3
 8018824:	bf34      	ite	cc
 8018826:	2301      	movcc	r3, #1
 8018828:	2300      	movcs	r3, #0
 801882a:	b2db      	uxtb	r3, r3
 801882c:	461a      	mov	r2, r3
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	4618      	mov	r0, r3
 8018838:	3710      	adds	r7, #16
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	0802eda4 	.word	0x0802eda4
 8018844:	2000b4c4 	.word	0x2000b4c4
 8018848:	2000b4b8 	.word	0x2000b4b8
 801884c:	2000b4be 	.word	0x2000b4be
 8018850:	2000b4ba 	.word	0x2000b4ba
 8018854:	2000b4c0 	.word	0x2000b4c0
 8018858:	2000b4bc 	.word	0x2000b4bc

0801885c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801885c:	b580      	push	{r7, lr}
 801885e:	b082      	sub	sp, #8
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	4618      	mov	r0, r3
 801886a:	f7f9 f949 	bl	8011b00 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801886e:	bf00      	nop
 8018870:	3708      	adds	r7, #8
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
	...

08018878 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8018878:	b580      	push	{r7, lr}
 801887a:	b086      	sub	sp, #24
 801887c:	af02      	add	r7, sp, #8
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	607a      	str	r2, [r7, #4]
 8018884:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8018886:	68f8      	ldr	r0, [r7, #12]
 8018888:	69bb      	ldr	r3, [r7, #24]
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	687a      	ldr	r2, [r7, #4]
 8018890:	68b9      	ldr	r1, [r7, #8]
 8018892:	f7ff fe8d 	bl	80185b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8018896:	4a04      	ldr	r2, [pc, #16]	; (80188a8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	601a      	str	r2, [r3, #0]
    {

    }
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	4618      	mov	r0, r3
 80188a0:	3710      	adds	r7, #16
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	0802ebd8 	.word	0x0802ebd8

080188ac <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80188ac:	b580      	push	{r7, lr}
 80188ae:	af00      	add	r7, sp, #0
 80188b0:	4801      	ldr	r0, [pc, #4]	; (80188b8 <__tcf_0+0xc>)
 80188b2:	f000 f95f 	bl	8018b74 <_ZN12FrontendHeapD1Ev>
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	2000910c 	.word	0x2000910c

080188bc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80188bc:	b580      	push	{r7, lr}
 80188be:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80188c0:	4b12      	ldr	r3, [pc, #72]	; (801890c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	f3bf 8f5b 	dmb	ish
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	f003 0301 	and.w	r3, r3, #1
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	bf0c      	ite	eq
 80188d2:	2301      	moveq	r3, #1
 80188d4:	2300      	movne	r3, #0
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d013      	beq.n	8018904 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80188dc:	480b      	ldr	r0, [pc, #44]	; (801890c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80188de:	f012 ffdc 	bl	802b89a <__cxa_guard_acquire>
 80188e2:	4603      	mov	r3, r0
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	bf14      	ite	ne
 80188e8:	2301      	movne	r3, #1
 80188ea:	2300      	moveq	r3, #0
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d008      	beq.n	8018904 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80188f2:	4807      	ldr	r0, [pc, #28]	; (8018910 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80188f4:	f000 f868 	bl	80189c8 <_ZN12FrontendHeapC1Ev>
 80188f8:	4806      	ldr	r0, [pc, #24]	; (8018914 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80188fa:	f013 f819 	bl	802b930 <atexit>
 80188fe:	4803      	ldr	r0, [pc, #12]	; (801890c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8018900:	f012 ffd7 	bl	802b8b2 <__cxa_guard_release>
        return instance;
 8018904:	4b02      	ldr	r3, [pc, #8]	; (8018910 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8018906:	4618      	mov	r0, r3
 8018908:	bd80      	pop	{r7, pc}
 801890a:	bf00      	nop
 801890c:	20009f24 	.word	0x20009f24
 8018910:	2000910c 	.word	0x2000910c
 8018914:	080188ad 	.word	0x080188ad

08018918 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8018918:	b580      	push	{r7, lr}
 801891a:	b082      	sub	sp, #8
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	4a05      	ldr	r2, [pc, #20]	; (8018938 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	601a      	str	r2, [r3, #0]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	4618      	mov	r0, r3
 801892a:	f7ff fe61 	bl	80185f0 <_ZN8touchgfx7MVPHeapD1Ev>
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	4618      	mov	r0, r3
 8018932:	3708      	adds	r7, #8
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}
 8018938:	0802ebd8 	.word	0x0802ebd8

0801893c <_ZN16FrontendHeapBaseD0Ev>:
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f7ff ffe7 	bl	8018918 <_ZN16FrontendHeapBaseD1Ev>
 801894a:	2114      	movs	r1, #20
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f012 ffa2 	bl	802b896 <_ZdlPvj>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	4618      	mov	r0, r3
 8018956:	3708      	adds	r7, #8
 8018958:	46bd      	mov	sp, r7
 801895a:	bd80      	pop	{r7, pc}

0801895c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801895c:	b580      	push	{r7, lr}
 801895e:	b082      	sub	sp, #8
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	4618      	mov	r0, r3
 8018968:	f001 f83a 	bl	80199e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801896c:	4a03      	ldr	r2, [pc, #12]	; (801897c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	601a      	str	r2, [r3, #0]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	4618      	mov	r0, r3
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	0802eba4 	.word	0x0802eba4

08018980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f001 f828 	bl	80199e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018990:	4a03      	ldr	r2, [pc, #12]	; (80189a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	601a      	str	r2, [r3, #0]
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	4618      	mov	r0, r3
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}
 80189a0:	0802eb70 	.word	0x0802eb70

080189a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	4618      	mov	r0, r3
 80189b0:	f001 f816 	bl	80199e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80189b4:	4a03      	ldr	r2, [pc, #12]	; (80189c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	601a      	str	r2, [r3, #0]
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	4618      	mov	r0, r3
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	0802eb3c 	.word	0x0802eb3c

080189c8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80189c8:	b590      	push	{r4, r7, lr}
 80189ca:	b085      	sub	sp, #20
 80189cc:	af02      	add	r7, sp, #8
 80189ce:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	f103 0114 	add.w	r1, r3, #20
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	f603 44a8 	addw	r4, r3, #3240	; 0xca8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
        app(model, *this)
 80189ea:	9300      	str	r3, [sp, #0]
 80189ec:	4623      	mov	r3, r4
 80189ee:	f7ff ff43 	bl	8018878 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80189f2:	4a18      	ldr	r2, [pc, #96]	; (8018a54 <_ZN12FrontendHeapC1Ev+0x8c>)
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	601a      	str	r2, [r3, #0]
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	3314      	adds	r3, #20
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7ff ffad 	bl	801895c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	332c      	adds	r3, #44	; 0x2c
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7ff ffba 	bl	8018980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8018a12:	4618      	mov	r0, r3
 8018a14:	f7ff ffc6 	bl	80189a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7fe fdc0 	bl	80175a4 <_ZN5ModelC1Ev>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	f503 604c 	add.w	r0, r3, #3264	; 0xcc0
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	4619      	mov	r1, r3
 8018a34:	f7fe f820 	bl	8016a78 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8018a38:	687a      	ldr	r2, [r7, #4]
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8018a40:	4619      	mov	r1, r3
 8018a42:	4610      	mov	r0, r2
 8018a44:	f7ff ff0a 	bl	801885c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	370c      	adds	r7, #12
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd90      	pop	{r4, r7, pc}
 8018a52:	bf00      	nop
 8018a54:	0802eb28 	.word	0x0802eb28

08018a58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b086      	sub	sp, #24
 8018a5c:	af02      	add	r7, sp, #8
 8018a5e:	60f8      	str	r0, [r7, #12]
 8018a60:	60b9      	str	r1, [r7, #8]
 8018a62:	607a      	str	r2, [r7, #4]
 8018a64:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8018a66:	68f8      	ldr	r0, [r7, #12]
 8018a68:	8bbb      	ldrh	r3, [r7, #28]
 8018a6a:	9301      	str	r3, [sp, #4]
 8018a6c:	8b3b      	ldrh	r3, [r7, #24]
 8018a6e:	9300      	str	r3, [sp, #0]
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	68b9      	ldr	r1, [r7, #8]
 8018a76:	f7ff fe31 	bl	80186dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8018a7a:	4a04      	ldr	r2, [pc, #16]	; (8018a8c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	601a      	str	r2, [r3, #0]
    }
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	4618      	mov	r0, r3
 8018a84:	3710      	adds	r7, #16
 8018a86:	46bd      	mov	sp, r7
 8018a88:	bd80      	pop	{r7, pc}
 8018a8a:	bf00      	nop
 8018a8c:	0802ebfc 	.word	0x0802ebfc

08018a90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b086      	sub	sp, #24
 8018a94:	af02      	add	r7, sp, #8
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	603b      	str	r3, [r7, #0]
 8018a9e:	68f8      	ldr	r0, [r7, #12]
 8018aa0:	8bbb      	ldrh	r3, [r7, #28]
 8018aa2:	9301      	str	r3, [sp, #4]
 8018aa4:	8b3b      	ldrh	r3, [r7, #24]
 8018aa6:	9300      	str	r3, [sp, #0]
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	687a      	ldr	r2, [r7, #4]
 8018aac:	68b9      	ldr	r1, [r7, #8]
 8018aae:	f7ff ffd3 	bl	8018a58 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018ab2:	4a04      	ldr	r2, [pc, #16]	; (8018ac4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	601a      	str	r2, [r3, #0]
    }
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	4618      	mov	r0, r3
 8018abc:	3710      	adds	r7, #16
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	0802e9cc 	.word	0x0802e9cc

08018ac8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8018ac8:	b480      	push	{r7}
 8018aca:	b083      	sub	sp, #12
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
 8018ad0:	4a04      	ldr	r2, [pc, #16]	; (8018ae4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	601a      	str	r2, [r3, #0]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	370c      	adds	r7, #12
 8018adc:	46bd      	mov	sp, r7
 8018ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae2:	4770      	bx	lr
 8018ae4:	0802e9b4 	.word	0x0802e9b4

08018ae8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7ff ffe8 	bl	8018ac8 <_ZN8touchgfx15TouchControllerC1Ev>
 8018af8:	4a03      	ldr	r2, [pc, #12]	; (8018b08 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	601a      	str	r2, [r3, #0]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	4618      	mov	r0, r3
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	0802e99c 	.word	0x0802e99c

08018b0c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8018b0c:	b590      	push	{r4, r7, lr}
 8018b0e:	b085      	sub	sp, #20
 8018b10:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8018b12:	f7fd fd85 	bl	8016620 <_ZN14BitmapDatabase11getInstanceEv>
 8018b16:	4604      	mov	r4, r0
 8018b18:	f7fd fd8c 	bl	8016634 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	4619      	mov	r1, r3
 8018b20:	2300      	movs	r3, #0
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	2300      	movs	r3, #0
 8018b26:	2200      	movs	r2, #0
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f007 f8d1 	bl	801fcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8018b2e:	4809      	ldr	r0, [pc, #36]	; (8018b54 <touchgfx_init+0x48>)
 8018b30:	f7ff fd2e 	bl	8018590 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8018b34:	2000      	movs	r0, #0
 8018b36:	f7fd fec1 	bl	80168bc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8018b3a:	4807      	ldr	r0, [pc, #28]	; (8018b58 <touchgfx_init+0x4c>)
 8018b3c:	f007 f830 	bl	801fba0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8018b40:	f7ff febc 	bl	80188bc <_ZN12FrontendHeap11getInstanceEv>
 8018b44:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8018b46:	4805      	ldr	r0, [pc, #20]	; (8018b5c <touchgfx_init+0x50>)
 8018b48:	f7fe ffac 	bl	8017aa4 <_ZN11TouchGFXHAL10initializeEv>
}
 8018b4c:	bf00      	nop
 8018b4e:	370c      	adds	r7, #12
 8018b50:	46bd      	mov	sp, r7
 8018b52:	bd90      	pop	{r4, r7, pc}
 8018b54:	2000ad44 	.word	0x2000ad44
 8018b58:	2000030c 	.word	0x2000030c
 8018b5c:	2000ad48 	.word	0x2000ad48

08018b60 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8018b64:	4802      	ldr	r0, [pc, #8]	; (8018b70 <touchgfx_taskEntry+0x10>)
 8018b66:	f001 fa52 	bl	801a00e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8018b6a:	bf00      	nop
 8018b6c:	bd80      	pop	{r7, pc}
 8018b6e:	bf00      	nop
 8018b70:	2000ad48 	.word	0x2000ad48

08018b74 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b082      	sub	sp, #8
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	4a10      	ldr	r2, [pc, #64]	; (8018bc0 <_ZN12FrontendHeapD1Ev+0x4c>)
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	601a      	str	r2, [r3, #0]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f503 634c 	add.w	r3, r3, #3264	; 0xcc0
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7fd ff3f 	bl	8016a0c <_ZN19FrontendApplicationD1Ev>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8018b94:	4618      	mov	r0, r3
 8018b96:	f000 f827 	bl	8018be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	332c      	adds	r3, #44	; 0x2c
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f000 f844 	bl	8018c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	3314      	adds	r3, #20
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f000 f863 	bl	8018c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7ff feb1 	bl	8018918 <_ZN16FrontendHeapBaseD1Ev>
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3708      	adds	r7, #8
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	0802eb28 	.word	0x0802eb28

08018bc4 <_ZN12FrontendHeapD0Ev>:
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6878      	ldr	r0, [r7, #4]
 8018bce:	f7ff ffd1 	bl	8018b74 <_ZN12FrontendHeapD1Ev>
 8018bd2:	f640 6118 	movw	r1, #3608	; 0xe18
 8018bd6:	6878      	ldr	r0, [r7, #4]
 8018bd8:	f012 fe5d 	bl	802b896 <_ZdlPvj>
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	4618      	mov	r0, r3
 8018be0:	3708      	adds	r7, #8
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}
	...

08018be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b082      	sub	sp, #8
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	4a05      	ldr	r2, [pc, #20]	; (8018c08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	601a      	str	r2, [r3, #0]
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f000 fef0 	bl	80199de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	4618      	mov	r0, r3
 8018c02:	3708      	adds	r7, #8
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}
 8018c08:	0802eb3c 	.word	0x0802eb3c

08018c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f7ff ffe7 	bl	8018be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018c1a:	2114      	movs	r1, #20
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f012 fe3a 	bl	802b896 <_ZdlPvj>
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	4618      	mov	r0, r3
 8018c26:	3708      	adds	r7, #8
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	4a05      	ldr	r2, [pc, #20]	; (8018c4c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f000 fece 	bl	80199de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	4618      	mov	r0, r3
 8018c46:	3708      	adds	r7, #8
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	0802eb70 	.word	0x0802eb70

08018c50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b082      	sub	sp, #8
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7ff ffe7 	bl	8018c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018c5e:	f640 417c 	movw	r1, #3196	; 0xc7c
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	f012 fe17 	bl	802b896 <_ZdlPvj>
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}
	...

08018c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	4a05      	ldr	r2, [pc, #20]	; (8018c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	601a      	str	r2, [r3, #0]
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	4618      	mov	r0, r3
 8018c86:	f000 feaa 	bl	80199de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3708      	adds	r7, #8
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}
 8018c94:	0802eba4 	.word	0x0802eba4

08018c98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b082      	sub	sp, #8
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
 8018ca0:	6878      	ldr	r0, [r7, #4]
 8018ca2:	f7ff ffe7 	bl	8018c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018ca6:	2118      	movs	r1, #24
 8018ca8:	6878      	ldr	r0, [r7, #4]
 8018caa:	f012 fdf4 	bl	802b896 <_ZdlPvj>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3708      	adds	r7, #8
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}

08018cb8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	4a05      	ldr	r2, [pc, #20]	; (8018cd8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	601a      	str	r2, [r3, #0]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7ff fcb1 	bl	8018630 <_ZN8touchgfx3LCDD1Ev>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	3708      	adds	r7, #8
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}
 8018cd8:	0802f6bc 	.word	0x0802f6bc

08018cdc <_ZN8touchgfx8LCD16bppD0Ev>:
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
 8018ce4:	6878      	ldr	r0, [r7, #4]
 8018ce6:	f7ff ffe7 	bl	8018cb8 <_ZN8touchgfx8LCD16bppD1Ev>
 8018cea:	2178      	movs	r1, #120	; 0x78
 8018cec:	6878      	ldr	r0, [r7, #4]
 8018cee:	f012 fdd2 	bl	802b896 <_ZdlPvj>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	3708      	adds	r7, #8
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}

08018cfc <_Z41__static_initialization_and_destruction_0ii>:
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af02      	add	r7, sp, #8
 8018d02:	6078      	str	r0, [r7, #4]
 8018d04:	6039      	str	r1, [r7, #0]
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d119      	bne.n	8018d40 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d12:	4293      	cmp	r3, r2
 8018d14:	d114      	bne.n	8018d40 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8018d16:	4818      	ldr	r0, [pc, #96]	; (8018d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018d18:	f7ff fee6 	bl	8018ae8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8018d1c:	4817      	ldr	r0, [pc, #92]	; (8018d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018d1e:	f7ff f915 	bl	8017f4c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8018d22:	4817      	ldr	r0, [pc, #92]	; (8018d80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018d24:	f00a f8d4 	bl	8022ed0 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8018d28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8018d2c:	9301      	str	r3, [sp, #4]
 8018d2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8018d32:	9300      	str	r3, [sp, #0]
 8018d34:	4b10      	ldr	r3, [pc, #64]	; (8018d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018d36:	4a12      	ldr	r2, [pc, #72]	; (8018d80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018d38:	4910      	ldr	r1, [pc, #64]	; (8018d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018d3a:	4812      	ldr	r0, [pc, #72]	; (8018d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018d3c:	f7ff fea8 	bl	8018a90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d113      	bne.n	8018d6e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d4c:	4293      	cmp	r3, r2
 8018d4e:	d10e      	bne.n	8018d6e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018d50:	480c      	ldr	r0, [pc, #48]	; (8018d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018d52:	f7fe ff37 	bl	8017bc4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8018d56:	480c      	ldr	r0, [pc, #48]	; (8018d88 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018d58:	f7f8 f9b0 	bl	80110bc <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8018d5c:	4808      	ldr	r0, [pc, #32]	; (8018d80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018d5e:	f7ff ffab 	bl	8018cb8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8018d62:	4806      	ldr	r0, [pc, #24]	; (8018d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018d64:	f7ff f91c 	bl	8017fa0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8018d68:	4803      	ldr	r0, [pc, #12]	; (8018d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018d6a:	f7fe fc87 	bl	801767c <_ZN20STM32TouchControllerD1Ev>
}
 8018d6e:	bf00      	nop
 8018d70:	3708      	adds	r7, #8
 8018d72:	46bd      	mov	sp, r7
 8018d74:	bd80      	pop	{r7, pc}
 8018d76:	bf00      	nop
 8018d78:	20009f28 	.word	0x20009f28
 8018d7c:	20009f2c 	.word	0x20009f2c
 8018d80:	2000accc 	.word	0x2000accc
 8018d84:	2000ad48 	.word	0x2000ad48
 8018d88:	2000030c 	.word	0x2000030c

08018d8c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8018d8c:	b480      	push	{r7}
 8018d8e:	b083      	sub	sp, #12
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8018d94:	2301      	movs	r3, #1
    }
 8018d96:	4618      	mov	r0, r3
 8018d98:	370c      	adds	r7, #12
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr

08018da2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8018da2:	b480      	push	{r7}
 8018da4:	b083      	sub	sp, #12
 8018da6:	af00      	add	r7, sp, #0
 8018da8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8018daa:	230c      	movs	r3, #12
    }
 8018dac:	4618      	mov	r0, r3
 8018dae:	370c      	adds	r7, #12
 8018db0:	46bd      	mov	sp, r7
 8018db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db6:	4770      	bx	lr

08018db8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8018db8:	b480      	push	{r7}
 8018dba:	b083      	sub	sp, #12
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8018dc4:	887a      	ldrh	r2, [r7, #2]
 8018dc6:	4613      	mov	r3, r2
 8018dc8:	005b      	lsls	r3, r3, #1
 8018dca:	4413      	add	r3, r2
 8018dcc:	009b      	lsls	r3, r3, #2
 8018dce:	3308      	adds	r3, #8
 8018dd0:	687a      	ldr	r2, [r7, #4]
 8018dd2:	4413      	add	r3, r2
    }
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	370c      	adds	r7, #12
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dde:	4770      	bx	lr

08018de0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8018de0:	b480      	push	{r7}
 8018de2:	b083      	sub	sp, #12
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	460b      	mov	r3, r1
 8018dea:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8018dec:	887a      	ldrh	r2, [r7, #2]
 8018dee:	4613      	mov	r3, r2
 8018df0:	005b      	lsls	r3, r3, #1
 8018df2:	4413      	add	r3, r2
 8018df4:	009b      	lsls	r3, r3, #2
 8018df6:	3308      	adds	r3, #8
 8018df8:	687a      	ldr	r2, [r7, #4]
 8018dfa:	4413      	add	r3, r2
    }
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	370c      	adds	r7, #12
 8018e00:	46bd      	mov	sp, r7
 8018e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e06:	4770      	bx	lr

08018e08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8018e08:	b480      	push	{r7}
 8018e0a:	b083      	sub	sp, #12
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8018e10:	2301      	movs	r3, #1
    }
 8018e12:	4618      	mov	r0, r3
 8018e14:	370c      	adds	r7, #12
 8018e16:	46bd      	mov	sp, r7
 8018e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1c:	4770      	bx	lr

08018e1e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8018e1e:	b480      	push	{r7}
 8018e20:	b083      	sub	sp, #12
 8018e22:	af00      	add	r7, sp, #0
 8018e24:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8018e26:	f640 4374 	movw	r3, #3188	; 0xc74
    }
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	370c      	adds	r7, #12
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e34:	4770      	bx	lr

08018e36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8018e36:	b480      	push	{r7}
 8018e38:	b083      	sub	sp, #12
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	6078      	str	r0, [r7, #4]
 8018e3e:	460b      	mov	r3, r1
 8018e40:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018e42:	887b      	ldrh	r3, [r7, #2]
 8018e44:	f640 4274 	movw	r2, #3188	; 0xc74
 8018e48:	fb02 f303 	mul.w	r3, r2, r3
 8018e4c:	3308      	adds	r3, #8
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	4413      	add	r3, r2
    }
 8018e52:	4618      	mov	r0, r3
 8018e54:	370c      	adds	r7, #12
 8018e56:	46bd      	mov	sp, r7
 8018e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5c:	4770      	bx	lr

08018e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8018e5e:	b480      	push	{r7}
 8018e60:	b083      	sub	sp, #12
 8018e62:	af00      	add	r7, sp, #0
 8018e64:	6078      	str	r0, [r7, #4]
 8018e66:	460b      	mov	r3, r1
 8018e68:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018e6a:	887b      	ldrh	r3, [r7, #2]
 8018e6c:	f640 4274 	movw	r2, #3188	; 0xc74
 8018e70:	fb02 f303 	mul.w	r3, r2, r3
 8018e74:	3308      	adds	r3, #8
 8018e76:	687a      	ldr	r2, [r7, #4]
 8018e78:	4413      	add	r3, r2
    }
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	370c      	adds	r7, #12
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e84:	4770      	bx	lr

08018e86 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8018e86:	b480      	push	{r7}
 8018e88:	b083      	sub	sp, #12
 8018e8a:	af00      	add	r7, sp, #0
 8018e8c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8018e8e:	2301      	movs	r3, #1
    }
 8018e90:	4618      	mov	r0, r3
 8018e92:	370c      	adds	r7, #12
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr

08018e9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8018e9c:	b480      	push	{r7}
 8018e9e:	b083      	sub	sp, #12
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8018ea4:	2310      	movs	r3, #16
    }
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	370c      	adds	r7, #12
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb0:	4770      	bx	lr

08018eb2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8018eb2:	b480      	push	{r7}
 8018eb4:	b083      	sub	sp, #12
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
 8018eba:	460b      	mov	r3, r1
 8018ebc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018ebe:	887b      	ldrh	r3, [r7, #2]
 8018ec0:	011b      	lsls	r3, r3, #4
 8018ec2:	3308      	adds	r3, #8
 8018ec4:	687a      	ldr	r2, [r7, #4]
 8018ec6:	4413      	add	r3, r2
    }
 8018ec8:	4618      	mov	r0, r3
 8018eca:	370c      	adds	r7, #12
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr

08018ed4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8018ed4:	b480      	push	{r7}
 8018ed6:	b083      	sub	sp, #12
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	460b      	mov	r3, r1
 8018ede:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8018ee0:	887b      	ldrh	r3, [r7, #2]
 8018ee2:	011b      	lsls	r3, r3, #4
 8018ee4:	3308      	adds	r3, #8
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	4413      	add	r3, r2
    }
 8018eea:	4618      	mov	r0, r3
 8018eec:	370c      	adds	r7, #12
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ef4:	4770      	bx	lr

08018ef6 <_GLOBAL__sub_I_touchgfx_init>:
 8018ef6:	b580      	push	{r7, lr}
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018efe:	2001      	movs	r0, #1
 8018f00:	f7ff fefc 	bl	8018cfc <_Z41__static_initialization_and_destruction_0ii>
 8018f04:	bd80      	pop	{r7, pc}

08018f06 <_GLOBAL__sub_D_touchgfx_init>:
 8018f06:	b580      	push	{r7, lr}
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018f0e:	2000      	movs	r0, #0
 8018f10:	f7ff fef4 	bl	8018cfc <_Z41__static_initialization_and_destruction_0ii>
 8018f14:	bd80      	pop	{r7, pc}

08018f16 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8018f16:	b580      	push	{r7, lr}
 8018f18:	b082      	sub	sp, #8
 8018f1a:	af00      	add	r7, sp, #0
 8018f1c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	3320      	adds	r3, #32
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	6878      	ldr	r0, [r7, #4]
 8018f28:	4798      	blx	r3
    }
 8018f2a:	bf00      	nop
 8018f2c:	3708      	adds	r7, #8
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	bd80      	pop	{r7, pc}

08018f32 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8018f32:	b480      	push	{r7}
 8018f34:	b083      	sub	sp, #12
 8018f36:	af00      	add	r7, sp, #0
 8018f38:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8018f40:	3301      	adds	r3, #1
 8018f42:	b2da      	uxtb	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8018f4a:	bf00      	nop
 8018f4c:	370c      	adds	r7, #12
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f54:	4770      	bx	lr
	...

08018f58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b082      	sub	sp, #8
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	460b      	mov	r3, r1
 8018f62:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8018f64:	78fb      	ldrb	r3, [r7, #3]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d002      	beq.n	8018f70 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8018f6a:	78fb      	ldrb	r3, [r7, #3]
 8018f6c:	2b02      	cmp	r3, #2
 8018f6e:	d105      	bne.n	8018f7c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	78fa      	ldrb	r2, [r7, #3]
 8018f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8018f78:	2301      	movs	r3, #1
 8018f7a:	e027      	b.n	8018fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8018f7c:	78fb      	ldrb	r3, [r7, #3]
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d123      	bne.n	8018fca <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d014      	beq.n	8018fb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	339c      	adds	r3, #156	; 0x9c
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	4798      	blx	r3
 8018f96:	4603      	mov	r3, r0
 8018f98:	461a      	mov	r2, r3
 8018f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d008      	beq.n	8018fb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8018fa2:	4b0c      	ldr	r3, [pc, #48]	; (8018fd4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	f083 0301 	eor.w	r3, r3, #1
 8018faa:	b2db      	uxtb	r3, r3
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d001      	beq.n	8018fb4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	e000      	b.n	8018fb6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d005      	beq.n	8018fc6 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	78fa      	ldrb	r2, [r7, #3]
 8018fbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8018fc2:	2301      	movs	r3, #1
 8018fc4:	e002      	b.n	8018fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	e000      	b.n	8018fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8018fca:	2300      	movs	r3, #0
    }
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3708      	adds	r7, #8
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	2000b4c2 	.word	0x2000b4c2

08018fd8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8018fd8:	b480      	push	{r7}
 8018fda:	b083      	sub	sp, #12
 8018fdc:	af00      	add	r7, sp, #0
 8018fde:	6078      	str	r0, [r7, #4]
 8018fe0:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	683a      	ldr	r2, [r7, #0]
 8018fe6:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8018fe8:	bf00      	nop
 8018fea:	370c      	adds	r7, #12
 8018fec:	46bd      	mov	sp, r7
 8018fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff2:	4770      	bx	lr

08018ff4 <__NVIC_EnableIRQ>:
{
 8018ff4:	b480      	push	{r7}
 8018ff6:	b083      	sub	sp, #12
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019002:	2b00      	cmp	r3, #0
 8019004:	db0b      	blt.n	801901e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019006:	79fb      	ldrb	r3, [r7, #7]
 8019008:	f003 021f 	and.w	r2, r3, #31
 801900c:	4907      	ldr	r1, [pc, #28]	; (801902c <__NVIC_EnableIRQ+0x38>)
 801900e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019012:	095b      	lsrs	r3, r3, #5
 8019014:	2001      	movs	r0, #1
 8019016:	fa00 f202 	lsl.w	r2, r0, r2
 801901a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801901e:	bf00      	nop
 8019020:	370c      	adds	r7, #12
 8019022:	46bd      	mov	sp, r7
 8019024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019028:	4770      	bx	lr
 801902a:	bf00      	nop
 801902c:	e000e100 	.word	0xe000e100

08019030 <__NVIC_DisableIRQ>:
{
 8019030:	b480      	push	{r7}
 8019032:	b083      	sub	sp, #12
 8019034:	af00      	add	r7, sp, #0
 8019036:	4603      	mov	r3, r0
 8019038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801903a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801903e:	2b00      	cmp	r3, #0
 8019040:	db12      	blt.n	8019068 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019042:	79fb      	ldrb	r3, [r7, #7]
 8019044:	f003 021f 	and.w	r2, r3, #31
 8019048:	490a      	ldr	r1, [pc, #40]	; (8019074 <__NVIC_DisableIRQ+0x44>)
 801904a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801904e:	095b      	lsrs	r3, r3, #5
 8019050:	2001      	movs	r0, #1
 8019052:	fa00 f202 	lsl.w	r2, r0, r2
 8019056:	3320      	adds	r3, #32
 8019058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801905c:	f3bf 8f4f 	dsb	sy
}
 8019060:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019062:	f3bf 8f6f 	isb	sy
}
 8019066:	bf00      	nop
}
 8019068:	bf00      	nop
 801906a:	370c      	adds	r7, #12
 801906c:	46bd      	mov	sp, r7
 801906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019072:	4770      	bx	lr
 8019074:	e000e100 	.word	0xe000e100

08019078 <__NVIC_SetPriority>:
{
 8019078:	b480      	push	{r7}
 801907a:	b083      	sub	sp, #12
 801907c:	af00      	add	r7, sp, #0
 801907e:	4603      	mov	r3, r0
 8019080:	6039      	str	r1, [r7, #0]
 8019082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019088:	2b00      	cmp	r3, #0
 801908a:	db0a      	blt.n	80190a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	b2da      	uxtb	r2, r3
 8019090:	490c      	ldr	r1, [pc, #48]	; (80190c4 <__NVIC_SetPriority+0x4c>)
 8019092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019096:	0112      	lsls	r2, r2, #4
 8019098:	b2d2      	uxtb	r2, r2
 801909a:	440b      	add	r3, r1
 801909c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80190a0:	e00a      	b.n	80190b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	b2da      	uxtb	r2, r3
 80190a6:	4908      	ldr	r1, [pc, #32]	; (80190c8 <__NVIC_SetPriority+0x50>)
 80190a8:	79fb      	ldrb	r3, [r7, #7]
 80190aa:	f003 030f 	and.w	r3, r3, #15
 80190ae:	3b04      	subs	r3, #4
 80190b0:	0112      	lsls	r2, r2, #4
 80190b2:	b2d2      	uxtb	r2, r2
 80190b4:	440b      	add	r3, r1
 80190b6:	761a      	strb	r2, [r3, #24]
}
 80190b8:	bf00      	nop
 80190ba:	370c      	adds	r7, #12
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr
 80190c4:	e000e100 	.word	0xe000e100
 80190c8:	e000ed00 	.word	0xe000ed00

080190cc <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80190cc:	b5b0      	push	{r4, r5, r7, lr}
 80190ce:	b082      	sub	sp, #8
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	4618      	mov	r0, r3
 80190d8:	f000 ff87 	bl	8019fea <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80190dc:	687d      	ldr	r5, [r7, #4]
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	3364      	adds	r3, #100	; 0x64
 80190e4:	681c      	ldr	r4, [r3, #0]
 80190e6:	f004 f9c7 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 80190ea:	4603      	mov	r3, r0
 80190ec:	4619      	mov	r1, r3
 80190ee:	4628      	mov	r0, r5
 80190f0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	490b      	ldr	r1, [pc, #44]	; (8019124 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7ff ff6e 	bl	8018fd8 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2101      	movs	r1, #1
 8019100:	4618      	mov	r0, r3
 8019102:	f7ff ff29 	bl	8018f58 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	3388      	adds	r3, #136	; 0x88
 801910e:	681c      	ldr	r4, [r3, #0]
 8019110:	2300      	movs	r3, #0
 8019112:	2200      	movs	r2, #0
 8019114:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8019118:	47a0      	blx	r4
}
 801911a:	bf00      	nop
 801911c:	3708      	adds	r7, #8
 801911e:	46bd      	mov	sp, r7
 8019120:	bdb0      	pop	{r4, r5, r7, pc}
 8019122:	bf00      	nop
 8019124:	08017d19 	.word	0x08017d19

08019128 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b082      	sub	sp, #8
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8019130:	2109      	movs	r1, #9
 8019132:	205a      	movs	r0, #90	; 0x5a
 8019134:	f7ff ffa0 	bl	8019078 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8019138:	2109      	movs	r1, #9
 801913a:	2058      	movs	r0, #88	; 0x58
 801913c:	f7ff ff9c 	bl	8019078 <__NVIC_SetPriority>
}
 8019140:	bf00      	nop
 8019142:	3708      	adds	r7, #8
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}

08019148 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b082      	sub	sp, #8
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8019150:	205a      	movs	r0, #90	; 0x5a
 8019152:	f7ff ff4f 	bl	8018ff4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8019156:	2058      	movs	r0, #88	; 0x58
 8019158:	f7ff ff4c 	bl	8018ff4 <__NVIC_EnableIRQ>
}
 801915c:	bf00      	nop
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801916c:	205a      	movs	r0, #90	; 0x5a
 801916e:	f7ff ff5f 	bl	8019030 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8019172:	2058      	movs	r0, #88	; 0x58
 8019174:	f7ff ff5c 	bl	8019030 <__NVIC_DisableIRQ>
}
 8019178:	bf00      	nop
 801917a:	3708      	adds	r7, #8
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}

08019180 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8019180:	b480      	push	{r7}
 8019182:	b083      	sub	sp, #12
 8019184:	af00      	add	r7, sp, #0
 8019186:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8019188:	4b11      	ldr	r3, [pc, #68]	; (80191d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801918a:	68db      	ldr	r3, [r3, #12]
 801918c:	b29b      	uxth	r3, r3
 801918e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019192:	b29b      	uxth	r3, r3
 8019194:	3b01      	subs	r3, #1
 8019196:	b29a      	uxth	r2, r3
 8019198:	4b0e      	ldr	r3, [pc, #56]	; (80191d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801919a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801919c:	4b0c      	ldr	r3, [pc, #48]	; (80191d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801919e:	691b      	ldr	r3, [r3, #16]
 80191a0:	b29b      	uxth	r3, r3
 80191a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	3b01      	subs	r3, #1
 80191aa:	b29a      	uxth	r2, r3
 80191ac:	4b0a      	ldr	r3, [pc, #40]	; (80191d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80191ae:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80191b0:	4b08      	ldr	r3, [pc, #32]	; (80191d4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80191b2:	881a      	ldrh	r2, [r3, #0]
 80191b4:	4b06      	ldr	r3, [pc, #24]	; (80191d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80191b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80191b8:	4b05      	ldr	r3, [pc, #20]	; (80191d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80191ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80191bc:	4a04      	ldr	r2, [pc, #16]	; (80191d0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80191be:	f043 0301 	orr.w	r3, r3, #1
 80191c2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80191c4:	bf00      	nop
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr
 80191d0:	40016800 	.word	0x40016800
 80191d4:	2000adc6 	.word	0x2000adc6
 80191d8:	2000adc8 	.word	0x2000adc8

080191dc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	4618      	mov	r0, r3
 80191e8:	f000 fee6 	bl	8019fb8 <_ZN8touchgfx3HAL10beginFrameEv>
 80191ec:	4603      	mov	r3, r0
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3708      	adds	r7, #8
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
	...

080191f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b082      	sub	sp, #8
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8019206:	2b00      	cmp	r3, #0
 8019208:	d002      	beq.n	8019210 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801920a:	4b05      	ldr	r3, [pc, #20]	; (8019220 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 801920c:	2201      	movs	r2, #1
 801920e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	4618      	mov	r0, r3
 8019214:	f000 fedc 	bl	8019fd0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8019218:	bf00      	nop
 801921a:	3708      	adds	r7, #8
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	2000adc4 	.word	0x2000adc4

08019224 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8019224:	b480      	push	{r7}
 8019226:	b083      	sub	sp, #12
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801922c:	4b03      	ldr	r3, [pc, #12]	; (801923c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8019230:	4618      	mov	r0, r3
 8019232:	370c      	adds	r7, #12
 8019234:	46bd      	mov	sp, r7
 8019236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923a:	4770      	bx	lr
 801923c:	40016884 	.word	0x40016884

08019240 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801924a:	4a06      	ldr	r2, [pc, #24]	; (8019264 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8019250:	4b05      	ldr	r3, [pc, #20]	; (8019268 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8019252:	2201      	movs	r2, #1
 8019254:	625a      	str	r2, [r3, #36]	; 0x24
}
 8019256:	bf00      	nop
 8019258:	370c      	adds	r7, #12
 801925a:	46bd      	mov	sp, r7
 801925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019260:	4770      	bx	lr
 8019262:	bf00      	nop
 8019264:	40016884 	.word	0x40016884
 8019268:	40016800 	.word	0x40016800

0801926c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6839      	ldr	r1, [r7, #0]
 801927a:	4618      	mov	r0, r3
 801927c:	f000 fe65 	bl	8019f4a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8019280:	bf00      	nop
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b084      	sub	sp, #16
 801928c:	af00      	add	r7, sp, #0
 801928e:	60f8      	str	r0, [r7, #12]
 8019290:	60b9      	str	r1, [r7, #8]
 8019292:	607a      	str	r2, [r7, #4]
 8019294:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	68b9      	ldr	r1, [r7, #8]
 801929e:	f000 ffbe 	bl	801a21e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80192a2:	4603      	mov	r3, r0
}
 80192a4:	4618      	mov	r0, r3
 80192a6:	3710      	adds	r7, #16
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}

080192ac <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 80192ac:	b480      	push	{r7}
 80192ae:	b085      	sub	sp, #20
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80192b4:	4b0d      	ldr	r3, [pc, #52]	; (80192ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80192b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192b8:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80192ba:	4b0c      	ldr	r3, [pc, #48]	; (80192ec <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	b29b      	uxth	r3, r3
 80192c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80192c4:	b29b      	uxth	r3, r3
 80192c6:	3301      	adds	r3, #1
 80192c8:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 80192ca:	89fa      	ldrh	r2, [r7, #14]
 80192cc:	89bb      	ldrh	r3, [r7, #12]
 80192ce:	429a      	cmp	r2, r3
 80192d0:	d304      	bcc.n	80192dc <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 80192d2:	89fa      	ldrh	r2, [r7, #14]
 80192d4:	89bb      	ldrh	r3, [r7, #12]
 80192d6:	1ad3      	subs	r3, r2, r3
 80192d8:	b29b      	uxth	r3, r3
 80192da:	e000      	b.n	80192de <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 80192dc:	2300      	movs	r3, #0
}
 80192de:	4618      	mov	r0, r3
 80192e0:	3714      	adds	r7, #20
 80192e2:	46bd      	mov	sp, r7
 80192e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop
 80192ec:	40016800 	.word	0x40016800

080192f0 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b082      	sub	sp, #8
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80192f8:	f7f8 fa0e 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b00      	cmp	r3, #0
 8019300:	bf0c      	ite	eq
 8019302:	2301      	moveq	r3, #1
 8019304:	2300      	movne	r3, #0
 8019306:	b2db      	uxtb	r3, r3
 8019308:	2b00      	cmp	r3, #0
 801930a:	d132      	bne.n	8019372 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 801930c:	4b1b      	ldr	r3, [pc, #108]	; (801937c <HAL_LTDC_LineEventCallback+0x8c>)
 801930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019310:	4a1b      	ldr	r2, [pc, #108]	; (8019380 <HAL_LTDC_LineEventCallback+0x90>)
 8019312:	8812      	ldrh	r2, [r2, #0]
 8019314:	4293      	cmp	r3, r2
 8019316:	bf0c      	ite	eq
 8019318:	2301      	moveq	r3, #1
 801931a:	2300      	movne	r3, #0
 801931c:	b2db      	uxtb	r3, r3
 801931e:	2b00      	cmp	r3, #0
 8019320:	d017      	beq.n	8019352 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8019322:	4b18      	ldr	r3, [pc, #96]	; (8019384 <HAL_LTDC_LineEventCallback+0x94>)
 8019324:	881b      	ldrh	r3, [r3, #0]
 8019326:	4619      	mov	r1, r3
 8019328:	6878      	ldr	r0, [r7, #4]
 801932a:	f7ee fb83 	bl	8007a34 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801932e:	f7f8 f9f3 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 8019332:	4603      	mov	r3, r0
 8019334:	4618      	mov	r0, r3
 8019336:	f7ff fdfc 	bl	8018f32 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801933a:	f7fe fccd 	bl	8017cd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801933e:	f7f8 f9eb 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 8019342:	4603      	mov	r3, r0
 8019344:	4618      	mov	r0, r3
 8019346:	f001 fb95 	bl	801aa74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801934a:	2000      	movs	r0, #0
 801934c:	f7fe f9b8 	bl	80176c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019350:	e010      	b.n	8019374 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8019352:	4b0b      	ldr	r3, [pc, #44]	; (8019380 <HAL_LTDC_LineEventCallback+0x90>)
 8019354:	881b      	ldrh	r3, [r3, #0]
 8019356:	4619      	mov	r1, r3
 8019358:	6878      	ldr	r0, [r7, #4]
 801935a:	f7ee fb6b 	bl	8007a34 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801935e:	f7f8 f9db 	bl	8011718 <_ZN8touchgfx3HAL11getInstanceEv>
 8019362:	4603      	mov	r3, r0
 8019364:	4618      	mov	r0, r3
 8019366:	f7ff fdd6 	bl	8018f16 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801936a:	2000      	movs	r0, #0
 801936c:	f7fe f9c4 	bl	80176f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019370:	e000      	b.n	8019374 <HAL_LTDC_LineEventCallback+0x84>
            return;
 8019372:	bf00      	nop
        }
    }
 8019374:	3708      	adds	r7, #8
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
 801937a:	bf00      	nop
 801937c:	40016800 	.word	0x40016800
 8019380:	2000adc6 	.word	0x2000adc6
 8019384:	2000adc8 	.word	0x2000adc8

08019388 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 801938c:	2200      	movs	r2, #0
 801938e:	490e      	ldr	r1, [pc, #56]	; (80193c8 <MX_USB_HOST_Init+0x40>)
 8019390:	480e      	ldr	r0, [pc, #56]	; (80193cc <MX_USB_HOST_Init+0x44>)
 8019392:	f7f5 ffc7 	bl	800f324 <USBH_Init>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d001      	beq.n	80193a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801939c:	f7e9 fe20 	bl	8002fe0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80193a0:	490b      	ldr	r1, [pc, #44]	; (80193d0 <MX_USB_HOST_Init+0x48>)
 80193a2:	480a      	ldr	r0, [pc, #40]	; (80193cc <MX_USB_HOST_Init+0x44>)
 80193a4:	f7f6 f874 	bl	800f490 <USBH_RegisterClass>
 80193a8:	4603      	mov	r3, r0
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d001      	beq.n	80193b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80193ae:	f7e9 fe17 	bl	8002fe0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80193b2:	4806      	ldr	r0, [pc, #24]	; (80193cc <MX_USB_HOST_Init+0x44>)
 80193b4:	f7f6 f8f8 	bl	800f5a8 <USBH_Start>
 80193b8:	4603      	mov	r3, r0
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d001      	beq.n	80193c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80193be:	f7e9 fe0f 	bl	8002fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80193c2:	bf00      	nop
 80193c4:	bd80      	pop	{r7, pc}
 80193c6:	bf00      	nop
 80193c8:	080193d5 	.word	0x080193d5
 80193cc:	2000adcc 	.word	0x2000adcc
 80193d0:	200002ec 	.word	0x200002ec

080193d4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80193d4:	b480      	push	{r7}
 80193d6:	b083      	sub	sp, #12
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	460b      	mov	r3, r1
 80193de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80193e0:	78fb      	ldrb	r3, [r7, #3]
 80193e2:	3b01      	subs	r3, #1
 80193e4:	2b04      	cmp	r3, #4
 80193e6:	d819      	bhi.n	801941c <USBH_UserProcess+0x48>
 80193e8:	a201      	add	r2, pc, #4	; (adr r2, 80193f0 <USBH_UserProcess+0x1c>)
 80193ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193ee:	bf00      	nop
 80193f0:	0801941d 	.word	0x0801941d
 80193f4:	0801940d 	.word	0x0801940d
 80193f8:	0801941d 	.word	0x0801941d
 80193fc:	08019415 	.word	0x08019415
 8019400:	08019405 	.word	0x08019405
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019404:	4b09      	ldr	r3, [pc, #36]	; (801942c <USBH_UserProcess+0x58>)
 8019406:	2203      	movs	r2, #3
 8019408:	701a      	strb	r2, [r3, #0]
  break;
 801940a:	e008      	b.n	801941e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801940c:	4b07      	ldr	r3, [pc, #28]	; (801942c <USBH_UserProcess+0x58>)
 801940e:	2202      	movs	r2, #2
 8019410:	701a      	strb	r2, [r3, #0]
  break;
 8019412:	e004      	b.n	801941e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019414:	4b05      	ldr	r3, [pc, #20]	; (801942c <USBH_UserProcess+0x58>)
 8019416:	2201      	movs	r2, #1
 8019418:	701a      	strb	r2, [r3, #0]
  break;
 801941a:	e000      	b.n	801941e <USBH_UserProcess+0x4a>

  default:
  break;
 801941c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801941e:	bf00      	nop
 8019420:	370c      	adds	r7, #12
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr
 801942a:	bf00      	nop
 801942c:	2000b1b0 	.word	0x2000b1b0

08019430 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b08a      	sub	sp, #40	; 0x28
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019438:	f107 0314 	add.w	r3, r7, #20
 801943c:	2200      	movs	r2, #0
 801943e:	601a      	str	r2, [r3, #0]
 8019440:	605a      	str	r2, [r3, #4]
 8019442:	609a      	str	r2, [r3, #8]
 8019444:	60da      	str	r2, [r3, #12]
 8019446:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	4a24      	ldr	r2, [pc, #144]	; (80194e0 <HAL_HCD_MspInit+0xb0>)
 801944e:	4293      	cmp	r3, r2
 8019450:	d141      	bne.n	80194d6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019452:	2300      	movs	r3, #0
 8019454:	613b      	str	r3, [r7, #16]
 8019456:	4b23      	ldr	r3, [pc, #140]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 8019458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801945a:	4a22      	ldr	r2, [pc, #136]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 801945c:	f043 0302 	orr.w	r3, r3, #2
 8019460:	6313      	str	r3, [r2, #48]	; 0x30
 8019462:	4b20      	ldr	r3, [pc, #128]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 8019464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019466:	f003 0302 	and.w	r3, r3, #2
 801946a:	613b      	str	r3, [r7, #16]
 801946c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801946e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8019472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019474:	2302      	movs	r3, #2
 8019476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019478:	2300      	movs	r3, #0
 801947a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801947c:	2300      	movs	r3, #0
 801947e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8019480:	230c      	movs	r3, #12
 8019482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019484:	f107 0314 	add.w	r3, r7, #20
 8019488:	4619      	mov	r1, r3
 801948a:	4817      	ldr	r0, [pc, #92]	; (80194e8 <HAL_HCD_MspInit+0xb8>)
 801948c:	f7eb fb14 	bl	8004ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8019490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019496:	2300      	movs	r3, #0
 8019498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801949a:	2300      	movs	r3, #0
 801949c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801949e:	f107 0314 	add.w	r3, r7, #20
 80194a2:	4619      	mov	r1, r3
 80194a4:	4810      	ldr	r0, [pc, #64]	; (80194e8 <HAL_HCD_MspInit+0xb8>)
 80194a6:	f7eb fb07 	bl	8004ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80194aa:	2300      	movs	r3, #0
 80194ac:	60fb      	str	r3, [r7, #12]
 80194ae:	4b0d      	ldr	r3, [pc, #52]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 80194b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194b2:	4a0c      	ldr	r2, [pc, #48]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 80194b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80194b8:	6313      	str	r3, [r2, #48]	; 0x30
 80194ba:	4b0a      	ldr	r3, [pc, #40]	; (80194e4 <HAL_HCD_MspInit+0xb4>)
 80194bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80194c2:	60fb      	str	r3, [r7, #12]
 80194c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80194c6:	2200      	movs	r2, #0
 80194c8:	2105      	movs	r1, #5
 80194ca:	204d      	movs	r0, #77	; 0x4d
 80194cc:	f7ea fcb2 	bl	8003e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80194d0:	204d      	movs	r0, #77	; 0x4d
 80194d2:	f7ea fccb 	bl	8003e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80194d6:	bf00      	nop
 80194d8:	3728      	adds	r7, #40	; 0x28
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}
 80194de:	bf00      	nop
 80194e0:	40040000 	.word	0x40040000
 80194e4:	40023800 	.word	0x40023800
 80194e8:	40020400 	.word	0x40020400

080194ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80194fa:	4618      	mov	r0, r3
 80194fc:	f7f6 fd0b 	bl	800ff16 <USBH_LL_IncTimer>
}
 8019500:	bf00      	nop
 8019502:	3708      	adds	r7, #8
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}

08019508 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019516:	4618      	mov	r0, r3
 8019518:	f7f6 fd4f 	bl	800ffba <USBH_LL_Connect>
}
 801951c:	bf00      	nop
 801951e:	3708      	adds	r7, #8
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}

08019524 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b082      	sub	sp, #8
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019532:	4618      	mov	r0, r3
 8019534:	f7f6 fd64 	bl	8010000 <USBH_LL_Disconnect>
}
 8019538:	bf00      	nop
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	460b      	mov	r3, r1
 801954a:	70fb      	strb	r3, [r7, #3]
 801954c:	4613      	mov	r3, r2
 801954e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019556:	4618      	mov	r0, r3
 8019558:	f7f6 fd99 	bl	801008e <USBH_LL_NotifyURBChange>
#endif
}
 801955c:	bf00      	nop
 801955e:	3708      	adds	r7, #8
 8019560:	46bd      	mov	sp, r7
 8019562:	bd80      	pop	{r7, pc}

08019564 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8019572:	4618      	mov	r0, r3
 8019574:	f7f6 fcf9 	bl	800ff6a <USBH_LL_PortEnabled>
}
 8019578:	bf00      	nop
 801957a:	3708      	adds	r7, #8
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}

08019580 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b082      	sub	sp, #8
 8019584:	af00      	add	r7, sp, #0
 8019586:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801958e:	4618      	mov	r0, r3
 8019590:	f7f6 fd05 	bl	800ff9e <USBH_LL_PortDisabled>
}
 8019594:	bf00      	nop
 8019596:	3708      	adds	r7, #8
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}

0801959c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d132      	bne.n	8019614 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80195ae:	4a1c      	ldr	r2, [pc, #112]	; (8019620 <USBH_LL_Init+0x84>)
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	4a19      	ldr	r2, [pc, #100]	; (8019620 <USBH_LL_Init+0x84>)
 80195ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80195be:	4b18      	ldr	r3, [pc, #96]	; (8019620 <USBH_LL_Init+0x84>)
 80195c0:	4a18      	ldr	r2, [pc, #96]	; (8019624 <USBH_LL_Init+0x88>)
 80195c2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80195c4:	4b16      	ldr	r3, [pc, #88]	; (8019620 <USBH_LL_Init+0x84>)
 80195c6:	220c      	movs	r2, #12
 80195c8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80195ca:	4b15      	ldr	r3, [pc, #84]	; (8019620 <USBH_LL_Init+0x84>)
 80195cc:	2201      	movs	r2, #1
 80195ce:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80195d0:	4b13      	ldr	r3, [pc, #76]	; (8019620 <USBH_LL_Init+0x84>)
 80195d2:	2200      	movs	r2, #0
 80195d4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80195d6:	4b12      	ldr	r3, [pc, #72]	; (8019620 <USBH_LL_Init+0x84>)
 80195d8:	2202      	movs	r2, #2
 80195da:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80195dc:	4b10      	ldr	r3, [pc, #64]	; (8019620 <USBH_LL_Init+0x84>)
 80195de:	2200      	movs	r2, #0
 80195e0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80195e2:	4b0f      	ldr	r3, [pc, #60]	; (8019620 <USBH_LL_Init+0x84>)
 80195e4:	2200      	movs	r2, #0
 80195e6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80195e8:	4b0d      	ldr	r3, [pc, #52]	; (8019620 <USBH_LL_Init+0x84>)
 80195ea:	2200      	movs	r2, #0
 80195ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80195ee:	4b0c      	ldr	r3, [pc, #48]	; (8019620 <USBH_LL_Init+0x84>)
 80195f0:	2200      	movs	r2, #0
 80195f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80195f4:	480a      	ldr	r0, [pc, #40]	; (8019620 <USBH_LL_Init+0x84>)
 80195f6:	f7eb fc3d 	bl	8004e74 <HAL_HCD_Init>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d001      	beq.n	8019604 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8019600:	f7e9 fcee 	bl	8002fe0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8019604:	4806      	ldr	r0, [pc, #24]	; (8019620 <USBH_LL_Init+0x84>)
 8019606:	f7ec f820 	bl	800564a <HAL_HCD_GetCurrentFrame>
 801960a:	4603      	mov	r3, r0
 801960c:	4619      	mov	r1, r3
 801960e:	6878      	ldr	r0, [r7, #4]
 8019610:	f7f6 fc72 	bl	800fef8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019614:	2300      	movs	r3, #0
}
 8019616:	4618      	mov	r0, r3
 8019618:	3708      	adds	r7, #8
 801961a:	46bd      	mov	sp, r7
 801961c:	bd80      	pop	{r7, pc}
 801961e:	bf00      	nop
 8019620:	2000b1b4 	.word	0x2000b1b4
 8019624:	40040000 	.word	0x40040000

08019628 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b084      	sub	sp, #16
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019630:	2300      	movs	r3, #0
 8019632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019634:	2300      	movs	r3, #0
 8019636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801963e:	4618      	mov	r0, r3
 8019640:	f7eb ff8d 	bl	800555e <HAL_HCD_Start>
 8019644:	4603      	mov	r3, r0
 8019646:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019648:	7bfb      	ldrb	r3, [r7, #15]
 801964a:	4618      	mov	r0, r3
 801964c:	f000 f95c 	bl	8019908 <USBH_Get_USB_Status>
 8019650:	4603      	mov	r3, r0
 8019652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019654:	7bbb      	ldrb	r3, [r7, #14]
}
 8019656:	4618      	mov	r0, r3
 8019658:	3710      	adds	r7, #16
 801965a:	46bd      	mov	sp, r7
 801965c:	bd80      	pop	{r7, pc}

0801965e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801965e:	b580      	push	{r7, lr}
 8019660:	b084      	sub	sp, #16
 8019662:	af00      	add	r7, sp, #0
 8019664:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019666:	2300      	movs	r3, #0
 8019668:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801966a:	2300      	movs	r3, #0
 801966c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8019674:	4618      	mov	r0, r3
 8019676:	f7eb ff95 	bl	80055a4 <HAL_HCD_Stop>
 801967a:	4603      	mov	r3, r0
 801967c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801967e:	7bfb      	ldrb	r3, [r7, #15]
 8019680:	4618      	mov	r0, r3
 8019682:	f000 f941 	bl	8019908 <USBH_Get_USB_Status>
 8019686:	4603      	mov	r3, r0
 8019688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801968a:	7bbb      	ldrb	r3, [r7, #14]
}
 801968c:	4618      	mov	r0, r3
 801968e:	3710      	adds	r7, #16
 8019690:	46bd      	mov	sp, r7
 8019692:	bd80      	pop	{r7, pc}

08019694 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801969c:	2301      	movs	r3, #1
 801969e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80196a6:	4618      	mov	r0, r3
 80196a8:	f7eb ffdd 	bl	8005666 <HAL_HCD_GetCurrentSpeed>
 80196ac:	4603      	mov	r3, r0
 80196ae:	2b02      	cmp	r3, #2
 80196b0:	d00c      	beq.n	80196cc <USBH_LL_GetSpeed+0x38>
 80196b2:	2b02      	cmp	r3, #2
 80196b4:	d80d      	bhi.n	80196d2 <USBH_LL_GetSpeed+0x3e>
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d002      	beq.n	80196c0 <USBH_LL_GetSpeed+0x2c>
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d003      	beq.n	80196c6 <USBH_LL_GetSpeed+0x32>
 80196be:	e008      	b.n	80196d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80196c0:	2300      	movs	r3, #0
 80196c2:	73fb      	strb	r3, [r7, #15]
    break;
 80196c4:	e008      	b.n	80196d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80196c6:	2301      	movs	r3, #1
 80196c8:	73fb      	strb	r3, [r7, #15]
    break;
 80196ca:	e005      	b.n	80196d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80196cc:	2302      	movs	r3, #2
 80196ce:	73fb      	strb	r3, [r7, #15]
    break;
 80196d0:	e002      	b.n	80196d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80196d2:	2301      	movs	r3, #1
 80196d4:	73fb      	strb	r3, [r7, #15]
    break;
 80196d6:	bf00      	nop
  }
  return  speed;
 80196d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3710      	adds	r7, #16
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}

080196e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80196e2:	b580      	push	{r7, lr}
 80196e4:	b084      	sub	sp, #16
 80196e6:	af00      	add	r7, sp, #0
 80196e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196ea:	2300      	movs	r3, #0
 80196ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80196ee:	2300      	movs	r3, #0
 80196f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80196f8:	4618      	mov	r0, r3
 80196fa:	f7eb ff70 	bl	80055de <HAL_HCD_ResetPort>
 80196fe:	4603      	mov	r3, r0
 8019700:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019702:	7bfb      	ldrb	r3, [r7, #15]
 8019704:	4618      	mov	r0, r3
 8019706:	f000 f8ff 	bl	8019908 <USBH_Get_USB_Status>
 801970a:	4603      	mov	r3, r0
 801970c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801970e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019710:	4618      	mov	r0, r3
 8019712:	3710      	adds	r7, #16
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}

08019718 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b082      	sub	sp, #8
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
 8019720:	460b      	mov	r3, r1
 8019722:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801972a:	78fa      	ldrb	r2, [r7, #3]
 801972c:	4611      	mov	r1, r2
 801972e:	4618      	mov	r0, r3
 8019730:	f7eb ff77 	bl	8005622 <HAL_HCD_HC_GetXferCount>
 8019734:	4603      	mov	r3, r0
}
 8019736:	4618      	mov	r0, r3
 8019738:	3708      	adds	r7, #8
 801973a:	46bd      	mov	sp, r7
 801973c:	bd80      	pop	{r7, pc}

0801973e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801973e:	b590      	push	{r4, r7, lr}
 8019740:	b089      	sub	sp, #36	; 0x24
 8019742:	af04      	add	r7, sp, #16
 8019744:	6078      	str	r0, [r7, #4]
 8019746:	4608      	mov	r0, r1
 8019748:	4611      	mov	r1, r2
 801974a:	461a      	mov	r2, r3
 801974c:	4603      	mov	r3, r0
 801974e:	70fb      	strb	r3, [r7, #3]
 8019750:	460b      	mov	r3, r1
 8019752:	70bb      	strb	r3, [r7, #2]
 8019754:	4613      	mov	r3, r2
 8019756:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019758:	2300      	movs	r3, #0
 801975a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801975c:	2300      	movs	r3, #0
 801975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019766:	787c      	ldrb	r4, [r7, #1]
 8019768:	78ba      	ldrb	r2, [r7, #2]
 801976a:	78f9      	ldrb	r1, [r7, #3]
 801976c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801976e:	9302      	str	r3, [sp, #8]
 8019770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019774:	9301      	str	r3, [sp, #4]
 8019776:	f897 3020 	ldrb.w	r3, [r7, #32]
 801977a:	9300      	str	r3, [sp, #0]
 801977c:	4623      	mov	r3, r4
 801977e:	f7eb fbdb 	bl	8004f38 <HAL_HCD_HC_Init>
 8019782:	4603      	mov	r3, r0
 8019784:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019786:	7bfb      	ldrb	r3, [r7, #15]
 8019788:	4618      	mov	r0, r3
 801978a:	f000 f8bd 	bl	8019908 <USBH_Get_USB_Status>
 801978e:	4603      	mov	r3, r0
 8019790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019792:	7bbb      	ldrb	r3, [r7, #14]
}
 8019794:	4618      	mov	r0, r3
 8019796:	3714      	adds	r7, #20
 8019798:	46bd      	mov	sp, r7
 801979a:	bd90      	pop	{r4, r7, pc}

0801979c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b084      	sub	sp, #16
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	460b      	mov	r3, r1
 80197a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197a8:	2300      	movs	r3, #0
 80197aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80197ac:	2300      	movs	r3, #0
 80197ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80197b6:	78fa      	ldrb	r2, [r7, #3]
 80197b8:	4611      	mov	r1, r2
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7eb fc4b 	bl	8005056 <HAL_HCD_HC_Halt>
 80197c0:	4603      	mov	r3, r0
 80197c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80197c4:	7bfb      	ldrb	r3, [r7, #15]
 80197c6:	4618      	mov	r0, r3
 80197c8:	f000 f89e 	bl	8019908 <USBH_Get_USB_Status>
 80197cc:	4603      	mov	r3, r0
 80197ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80197d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80197d2:	4618      	mov	r0, r3
 80197d4:	3710      	adds	r7, #16
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bd80      	pop	{r7, pc}

080197da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80197da:	b590      	push	{r4, r7, lr}
 80197dc:	b089      	sub	sp, #36	; 0x24
 80197de:	af04      	add	r7, sp, #16
 80197e0:	6078      	str	r0, [r7, #4]
 80197e2:	4608      	mov	r0, r1
 80197e4:	4611      	mov	r1, r2
 80197e6:	461a      	mov	r2, r3
 80197e8:	4603      	mov	r3, r0
 80197ea:	70fb      	strb	r3, [r7, #3]
 80197ec:	460b      	mov	r3, r1
 80197ee:	70bb      	strb	r3, [r7, #2]
 80197f0:	4613      	mov	r3, r2
 80197f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197f4:	2300      	movs	r3, #0
 80197f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80197f8:	2300      	movs	r3, #0
 80197fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8019802:	787c      	ldrb	r4, [r7, #1]
 8019804:	78ba      	ldrb	r2, [r7, #2]
 8019806:	78f9      	ldrb	r1, [r7, #3]
 8019808:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801980c:	9303      	str	r3, [sp, #12]
 801980e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019810:	9302      	str	r3, [sp, #8]
 8019812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019814:	9301      	str	r3, [sp, #4]
 8019816:	f897 3020 	ldrb.w	r3, [r7, #32]
 801981a:	9300      	str	r3, [sp, #0]
 801981c:	4623      	mov	r3, r4
 801981e:	f7eb fc3d 	bl	800509c <HAL_HCD_HC_SubmitRequest>
 8019822:	4603      	mov	r3, r0
 8019824:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019826:	7bfb      	ldrb	r3, [r7, #15]
 8019828:	4618      	mov	r0, r3
 801982a:	f000 f86d 	bl	8019908 <USBH_Get_USB_Status>
 801982e:	4603      	mov	r3, r0
 8019830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019832:	7bbb      	ldrb	r3, [r7, #14]
}
 8019834:	4618      	mov	r0, r3
 8019836:	3714      	adds	r7, #20
 8019838:	46bd      	mov	sp, r7
 801983a:	bd90      	pop	{r4, r7, pc}

0801983c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b082      	sub	sp, #8
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
 8019844:	460b      	mov	r3, r1
 8019846:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801984e:	78fa      	ldrb	r2, [r7, #3]
 8019850:	4611      	mov	r1, r2
 8019852:	4618      	mov	r0, r3
 8019854:	f7eb fed1 	bl	80055fa <HAL_HCD_HC_GetURBState>
 8019858:	4603      	mov	r3, r0
}
 801985a:	4618      	mov	r0, r3
 801985c:	3708      	adds	r7, #8
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}

08019862 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019862:	b580      	push	{r7, lr}
 8019864:	b082      	sub	sp, #8
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
 801986a:	460b      	mov	r3, r1
 801986c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8019874:	2b00      	cmp	r3, #0
 8019876:	d103      	bne.n	8019880 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8019878:	78fb      	ldrb	r3, [r7, #3]
 801987a:	4618      	mov	r0, r3
 801987c:	f000 f870 	bl	8019960 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019880:	20c8      	movs	r0, #200	; 0xc8
 8019882:	f7ea f9d7 	bl	8003c34 <HAL_Delay>
  return USBH_OK;
 8019886:	2300      	movs	r3, #0
}
 8019888:	4618      	mov	r0, r3
 801988a:	3708      	adds	r7, #8
 801988c:	46bd      	mov	sp, r7
 801988e:	bd80      	pop	{r7, pc}

08019890 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019890:	b480      	push	{r7}
 8019892:	b085      	sub	sp, #20
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
 8019898:	460b      	mov	r3, r1
 801989a:	70fb      	strb	r3, [r7, #3]
 801989c:	4613      	mov	r3, r2
 801989e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80198a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80198a8:	78fb      	ldrb	r3, [r7, #3]
 80198aa:	68fa      	ldr	r2, [r7, #12]
 80198ac:	212c      	movs	r1, #44	; 0x2c
 80198ae:	fb01 f303 	mul.w	r3, r1, r3
 80198b2:	4413      	add	r3, r2
 80198b4:	333b      	adds	r3, #59	; 0x3b
 80198b6:	781b      	ldrb	r3, [r3, #0]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d009      	beq.n	80198d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80198bc:	78fb      	ldrb	r3, [r7, #3]
 80198be:	68fa      	ldr	r2, [r7, #12]
 80198c0:	212c      	movs	r1, #44	; 0x2c
 80198c2:	fb01 f303 	mul.w	r3, r1, r3
 80198c6:	4413      	add	r3, r2
 80198c8:	3354      	adds	r3, #84	; 0x54
 80198ca:	78ba      	ldrb	r2, [r7, #2]
 80198cc:	701a      	strb	r2, [r3, #0]
 80198ce:	e008      	b.n	80198e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80198d0:	78fb      	ldrb	r3, [r7, #3]
 80198d2:	68fa      	ldr	r2, [r7, #12]
 80198d4:	212c      	movs	r1, #44	; 0x2c
 80198d6:	fb01 f303 	mul.w	r3, r1, r3
 80198da:	4413      	add	r3, r2
 80198dc:	3355      	adds	r3, #85	; 0x55
 80198de:	78ba      	ldrb	r2, [r7, #2]
 80198e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80198e2:	2300      	movs	r3, #0
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3714      	adds	r7, #20
 80198e8:	46bd      	mov	sp, r7
 80198ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ee:	4770      	bx	lr

080198f0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80198f8:	6878      	ldr	r0, [r7, #4]
 80198fa:	f7ea f99b 	bl	8003c34 <HAL_Delay>
}
 80198fe:	bf00      	nop
 8019900:	3708      	adds	r7, #8
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}
	...

08019908 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019908:	b480      	push	{r7}
 801990a:	b085      	sub	sp, #20
 801990c:	af00      	add	r7, sp, #0
 801990e:	4603      	mov	r3, r0
 8019910:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019912:	2300      	movs	r3, #0
 8019914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019916:	79fb      	ldrb	r3, [r7, #7]
 8019918:	2b03      	cmp	r3, #3
 801991a:	d817      	bhi.n	801994c <USBH_Get_USB_Status+0x44>
 801991c:	a201      	add	r2, pc, #4	; (adr r2, 8019924 <USBH_Get_USB_Status+0x1c>)
 801991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019922:	bf00      	nop
 8019924:	08019935 	.word	0x08019935
 8019928:	0801993b 	.word	0x0801993b
 801992c:	08019941 	.word	0x08019941
 8019930:	08019947 	.word	0x08019947
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019934:	2300      	movs	r3, #0
 8019936:	73fb      	strb	r3, [r7, #15]
    break;
 8019938:	e00b      	b.n	8019952 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801993a:	2302      	movs	r3, #2
 801993c:	73fb      	strb	r3, [r7, #15]
    break;
 801993e:	e008      	b.n	8019952 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019940:	2301      	movs	r3, #1
 8019942:	73fb      	strb	r3, [r7, #15]
    break;
 8019944:	e005      	b.n	8019952 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019946:	2302      	movs	r3, #2
 8019948:	73fb      	strb	r3, [r7, #15]
    break;
 801994a:	e002      	b.n	8019952 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801994c:	2302      	movs	r3, #2
 801994e:	73fb      	strb	r3, [r7, #15]
    break;
 8019950:	bf00      	nop
  }
  return usb_status;
 8019952:	7bfb      	ldrb	r3, [r7, #15]
}
 8019954:	4618      	mov	r0, r3
 8019956:	3714      	adds	r7, #20
 8019958:	46bd      	mov	sp, r7
 801995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801995e:	4770      	bx	lr

08019960 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b084      	sub	sp, #16
 8019964:	af00      	add	r7, sp, #0
 8019966:	4603      	mov	r3, r0
 8019968:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801996a:	79fb      	ldrb	r3, [r7, #7]
 801996c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801996e:	79fb      	ldrb	r3, [r7, #7]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d102      	bne.n	801997a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8019974:	2301      	movs	r3, #1
 8019976:	73fb      	strb	r3, [r7, #15]
 8019978:	e001      	b.n	801997e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801997a:	2300      	movs	r3, #0
 801997c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801997e:	7bfb      	ldrb	r3, [r7, #15]
 8019980:	461a      	mov	r2, r3
 8019982:	2110      	movs	r1, #16
 8019984:	4803      	ldr	r0, [pc, #12]	; (8019994 <MX_DriverVbusHS+0x34>)
 8019986:	f7eb fa43 	bl	8004e10 <HAL_GPIO_WritePin>
}
 801998a:	bf00      	nop
 801998c:	3710      	adds	r7, #16
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}
 8019992:	bf00      	nop
 8019994:	40020800 	.word	0x40020800

08019998 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8019998:	8880      	ldrh	r0, [r0, #4]
 801999a:	4770      	bx	lr

0801999c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801999c:	b570      	push	{r4, r5, r6, lr}
 801999e:	6803      	ldr	r3, [r0, #0]
 80199a0:	4605      	mov	r5, r0
 80199a2:	460c      	mov	r4, r1
 80199a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199a6:	2100      	movs	r1, #0
 80199a8:	4798      	blx	r3
 80199aa:	682b      	ldr	r3, [r5, #0]
 80199ac:	4606      	mov	r6, r0
 80199ae:	6a1b      	ldr	r3, [r3, #32]
 80199b0:	4628      	mov	r0, r5
 80199b2:	4798      	blx	r3
 80199b4:	1ba4      	subs	r4, r4, r6
 80199b6:	b2a4      	uxth	r4, r4
 80199b8:	fbb4 f0f0 	udiv	r0, r4, r0
 80199bc:	bd70      	pop	{r4, r5, r6, pc}

080199be <_ZN8touchgfx17AbstractPartition5clearEv>:
 80199be:	2300      	movs	r3, #0
 80199c0:	8083      	strh	r3, [r0, #4]
 80199c2:	4770      	bx	lr

080199c4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80199c4:	b510      	push	{r4, lr}
 80199c6:	6803      	ldr	r3, [r0, #0]
 80199c8:	8881      	ldrh	r1, [r0, #4]
 80199ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199cc:	4604      	mov	r4, r0
 80199ce:	4798      	blx	r3
 80199d0:	88a3      	ldrh	r3, [r4, #4]
 80199d2:	3301      	adds	r3, #1
 80199d4:	80a3      	strh	r3, [r4, #4]
 80199d6:	bd10      	pop	{r4, pc}

080199d8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80199d8:	6803      	ldr	r3, [r0, #0]
 80199da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199dc:	4718      	bx	r3

080199de <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80199de:	4770      	bx	lr

080199e0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80199e0:	4a02      	ldr	r2, [pc, #8]	; (80199ec <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80199e2:	6002      	str	r2, [r0, #0]
 80199e4:	2200      	movs	r2, #0
 80199e6:	8082      	strh	r2, [r0, #4]
 80199e8:	4770      	bx	lr
 80199ea:	bf00      	nop
 80199ec:	0802ecd4 	.word	0x0802ecd4

080199f0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80199f0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80199f2:	4770      	bx	lr

080199f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80199f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80199f6:	2000      	movs	r0, #0
 80199f8:	b12b      	cbz	r3, 8019a06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80199fa:	b920      	cbnz	r0, 8019a06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80199fc:	1a5a      	subs	r2, r3, r1
 80199fe:	4250      	negs	r0, r2
 8019a00:	4150      	adcs	r0, r2
 8019a02:	699b      	ldr	r3, [r3, #24]
 8019a04:	e7f8      	b.n	80199f8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8019a06:	4770      	bx	lr

08019a08 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8019a08:	2300      	movs	r3, #0
 8019a0a:	6148      	str	r0, [r1, #20]
 8019a0c:	618b      	str	r3, [r1, #24]
 8019a0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019a10:	b913      	cbnz	r3, 8019a18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019a12:	6281      	str	r1, [r0, #40]	; 0x28
 8019a14:	4770      	bx	lr
 8019a16:	4613      	mov	r3, r2
 8019a18:	699a      	ldr	r2, [r3, #24]
 8019a1a:	2a00      	cmp	r2, #0
 8019a1c:	d1fb      	bne.n	8019a16 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019a1e:	6199      	str	r1, [r3, #24]
 8019a20:	4770      	bx	lr

08019a22 <_ZN8touchgfx9Container9removeAllEv>:
 8019a22:	2200      	movs	r2, #0
 8019a24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019a26:	b123      	cbz	r3, 8019a32 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8019a28:	6999      	ldr	r1, [r3, #24]
 8019a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8019a2c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019a30:	e7f8      	b.n	8019a24 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019a32:	4770      	bx	lr

08019a34 <_ZN8touchgfx9Container6unlinkEv>:
 8019a34:	2300      	movs	r3, #0
 8019a36:	6283      	str	r3, [r0, #40]	; 0x28
 8019a38:	4770      	bx	lr

08019a3a <_ZNK8touchgfx9Container12getSolidRectEv>:
 8019a3a:	2200      	movs	r2, #0
 8019a3c:	8002      	strh	r2, [r0, #0]
 8019a3e:	8042      	strh	r2, [r0, #2]
 8019a40:	8082      	strh	r2, [r0, #4]
 8019a42:	80c2      	strh	r2, [r0, #6]
 8019a44:	4770      	bx	lr

08019a46 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8019a46:	b570      	push	{r4, r5, r6, lr}
 8019a48:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019a4a:	460d      	mov	r5, r1
 8019a4c:	4616      	mov	r6, r2
 8019a4e:	b13c      	cbz	r4, 8019a60 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8019a50:	6823      	ldr	r3, [r4, #0]
 8019a52:	4620      	mov	r0, r4
 8019a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a56:	4632      	mov	r2, r6
 8019a58:	4629      	mov	r1, r5
 8019a5a:	4798      	blx	r3
 8019a5c:	69a4      	ldr	r4, [r4, #24]
 8019a5e:	e7f6      	b.n	8019a4e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8019a60:	bd70      	pop	{r4, r5, r6, pc}

08019a62 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8019a62:	b538      	push	{r3, r4, r5, lr}
 8019a64:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019a66:	460d      	mov	r5, r1
 8019a68:	b134      	cbz	r4, 8019a78 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8019a6a:	682b      	ldr	r3, [r5, #0]
 8019a6c:	4621      	mov	r1, r4
 8019a6e:	689b      	ldr	r3, [r3, #8]
 8019a70:	4628      	mov	r0, r5
 8019a72:	4798      	blx	r3
 8019a74:	69a4      	ldr	r4, [r4, #24]
 8019a76:	e7f7      	b.n	8019a68 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8019a78:	bd38      	pop	{r3, r4, r5, pc}

08019a7a <_ZNK8touchgfx9Container17invalidateContentEv>:
 8019a7a:	b510      	push	{r4, lr}
 8019a7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019a7e:	b12c      	cbz	r4, 8019a8c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8019a80:	6823      	ldr	r3, [r4, #0]
 8019a82:	4620      	mov	r0, r4
 8019a84:	699b      	ldr	r3, [r3, #24]
 8019a86:	4798      	blx	r3
 8019a88:	69a4      	ldr	r4, [r4, #24]
 8019a8a:	e7f8      	b.n	8019a7e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8019a8c:	bd10      	pop	{r4, pc}

08019a8e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8019a8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019a90:	b19b      	cbz	r3, 8019aba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019a92:	428b      	cmp	r3, r1
 8019a94:	d109      	bne.n	8019aaa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8019a96:	699a      	ldr	r2, [r3, #24]
 8019a98:	2100      	movs	r1, #0
 8019a9a:	6159      	str	r1, [r3, #20]
 8019a9c:	6282      	str	r2, [r0, #40]	; 0x28
 8019a9e:	b902      	cbnz	r2, 8019aa2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8019aa0:	4770      	bx	lr
 8019aa2:	6199      	str	r1, [r3, #24]
 8019aa4:	4770      	bx	lr
 8019aa6:	4613      	mov	r3, r2
 8019aa8:	b13a      	cbz	r2, 8019aba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8019aaa:	699a      	ldr	r2, [r3, #24]
 8019aac:	428a      	cmp	r2, r1
 8019aae:	d1fa      	bne.n	8019aa6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019ab0:	698a      	ldr	r2, [r1, #24]
 8019ab2:	619a      	str	r2, [r3, #24]
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8019aba:	4770      	bx	lr

08019abc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8019abc:	b410      	push	{r4}
 8019abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019ac0:	4604      	mov	r4, r0
 8019ac2:	b92b      	cbnz	r3, 8019ad0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019ac4:	6803      	ldr	r3, [r0, #0]
 8019ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019acc:	4611      	mov	r1, r2
 8019ace:	4718      	bx	r3
 8019ad0:	b941      	cbnz	r1, 8019ae4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019ad2:	6193      	str	r3, [r2, #24]
 8019ad4:	6282      	str	r2, [r0, #40]	; 0x28
 8019ad6:	6154      	str	r4, [r2, #20]
 8019ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019adc:	4770      	bx	lr
 8019ade:	4603      	mov	r3, r0
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d0f9      	beq.n	8019ad8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019ae4:	4299      	cmp	r1, r3
 8019ae6:	6998      	ldr	r0, [r3, #24]
 8019ae8:	d1f9      	bne.n	8019ade <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8019aea:	6190      	str	r0, [r2, #24]
 8019aec:	618a      	str	r2, [r1, #24]
 8019aee:	e7f2      	b.n	8019ad6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019af0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019af4:	461f      	mov	r7, r3
 8019af6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8019afa:	460d      	mov	r5, r1
 8019afc:	4616      	mov	r6, r2
 8019afe:	b103      	cbz	r3, 8019b02 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019b00:	6038      	str	r0, [r7, #0]
 8019b02:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019b04:	b314      	cbz	r4, 8019b4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8019b06:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019b0a:	b1eb      	cbz	r3, 8019b48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019b0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019b10:	428d      	cmp	r5, r1
 8019b12:	db19      	blt.n	8019b48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019b14:	8923      	ldrh	r3, [r4, #8]
 8019b16:	b289      	uxth	r1, r1
 8019b18:	440b      	add	r3, r1
 8019b1a:	b21b      	sxth	r3, r3
 8019b1c:	429d      	cmp	r5, r3
 8019b1e:	da13      	bge.n	8019b48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019b20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019b24:	4296      	cmp	r6, r2
 8019b26:	db0f      	blt.n	8019b48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019b28:	8963      	ldrh	r3, [r4, #10]
 8019b2a:	b292      	uxth	r2, r2
 8019b2c:	4413      	add	r3, r2
 8019b2e:	b21b      	sxth	r3, r3
 8019b30:	429e      	cmp	r6, r3
 8019b32:	da09      	bge.n	8019b48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019b34:	6823      	ldr	r3, [r4, #0]
 8019b36:	1ab2      	subs	r2, r6, r2
 8019b38:	1a69      	subs	r1, r5, r1
 8019b3a:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019b3e:	b212      	sxth	r2, r2
 8019b40:	463b      	mov	r3, r7
 8019b42:	b209      	sxth	r1, r1
 8019b44:	4620      	mov	r0, r4
 8019b46:	47c0      	blx	r8
 8019b48:	69a4      	ldr	r4, [r4, #24]
 8019b4a:	e7db      	b.n	8019b04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8019b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019b50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8019b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b54:	4c6e      	ldr	r4, [pc, #440]	; (8019d10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8019b56:	b0a1      	sub	sp, #132	; 0x84
 8019b58:	6824      	ldr	r4, [r4, #0]
 8019b5a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019b5c:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8019b60:	9303      	str	r3, [sp, #12]
 8019b62:	2400      	movs	r4, #0
 8019b64:	802c      	strh	r4, [r5, #0]
 8019b66:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8019b68:	802c      	strh	r4, [r5, #0]
 8019b6a:	601c      	str	r4, [r3, #0]
 8019b6c:	4606      	mov	r6, r0
 8019b6e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8019b72:	f7ff ffbd 	bl	8019af0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019b76:	f1b9 0f03 	cmp.w	r9, #3
 8019b7a:	f340 80c2 	ble.w	8019d02 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8019b7e:	4631      	mov	r1, r6
 8019b80:	a80c      	add	r0, sp, #48	; 0x30
 8019b82:	f004 fce7 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b86:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8019b8a:	9306      	str	r3, [sp, #24]
 8019b8c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8019b90:	9307      	str	r3, [sp, #28]
 8019b92:	9b03      	ldr	r3, [sp, #12]
 8019b94:	f8d3 a000 	ldr.w	sl, [r3]
 8019b98:	f1ba 0f00 	cmp.w	sl, #0
 8019b9c:	f000 80b4 	beq.w	8019d08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8019ba0:	4651      	mov	r1, sl
 8019ba2:	a810      	add	r0, sp, #64	; 0x40
 8019ba4:	f004 fcd6 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ba8:	9b01      	ldr	r3, [sp, #4]
 8019baa:	9a06      	ldr	r2, [sp, #24]
 8019bac:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8019bb0:	189d      	adds	r5, r3, r2
 8019bb2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8019bb6:	9a07      	ldr	r2, [sp, #28]
 8019bb8:	2002      	movs	r0, #2
 8019bba:	fb91 f1f0 	sdiv	r1, r1, r0
 8019bbe:	4419      	add	r1, r3
 8019bc0:	1a6d      	subs	r5, r5, r1
 8019bc2:	9b02      	ldr	r3, [sp, #8]
 8019bc4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019bc8:	4413      	add	r3, r2
 8019bca:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019bce:	fb92 f2f0 	sdiv	r2, r2, r0
 8019bd2:	440a      	add	r2, r1
 8019bd4:	1a9b      	subs	r3, r3, r2
 8019bd6:	435b      	muls	r3, r3
 8019bd8:	fb05 3505 	mla	r5, r5, r5, r3
 8019bdc:	4f4d      	ldr	r7, [pc, #308]	; (8019d14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8019bde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019be0:	ac10      	add	r4, sp, #64	; 0x40
 8019be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019be4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019bec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019bf0:	f1b9 0f0c 	cmp.w	r9, #12
 8019bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019bf8:	f04f 0303 	mov.w	r3, #3
 8019bfc:	bfc8      	it	gt
 8019bfe:	4698      	movgt	r8, r3
 8019c00:	f8cd 9000 	str.w	r9, [sp]
 8019c04:	f04f 0400 	mov.w	r4, #0
 8019c08:	bfdc      	itt	le
 8019c0a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019c0e:	fb92 f8f3 	sdivle	r8, r2, r3
 8019c12:	1c63      	adds	r3, r4, #1
 8019c14:	aa10      	add	r2, sp, #64	; 0x40
 8019c16:	f004 0401 	and.w	r4, r4, #1
 8019c1a:	9308      	str	r3, [sp, #32]
 8019c1c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019c20:	9b00      	ldr	r3, [sp, #0]
 8019c22:	fb93 f3f8 	sdiv	r3, r3, r8
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	3404      	adds	r4, #4
 8019c2a:	f04f 0b00 	mov.w	fp, #0
 8019c2e:	9304      	str	r3, [sp, #16]
 8019c30:	9a04      	ldr	r2, [sp, #16]
 8019c32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019c36:	fb13 f302 	smulbb	r3, r3, r2
 8019c3a:	9a01      	ldr	r2, [sp, #4]
 8019c3c:	b29b      	uxth	r3, r3
 8019c3e:	1899      	adds	r1, r3, r2
 8019c40:	9305      	str	r3, [sp, #20]
 8019c42:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8019c46:	b209      	sxth	r1, r1
 8019c48:	4299      	cmp	r1, r3
 8019c4a:	db4d      	blt.n	8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c4c:	8932      	ldrh	r2, [r6, #8]
 8019c4e:	4413      	add	r3, r2
 8019c50:	b21b      	sxth	r3, r3
 8019c52:	4299      	cmp	r1, r3
 8019c54:	da48      	bge.n	8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c56:	9b04      	ldr	r3, [sp, #16]
 8019c58:	6827      	ldr	r7, [r4, #0]
 8019c5a:	fb17 f703 	smulbb	r7, r7, r3
 8019c5e:	9b02      	ldr	r3, [sp, #8]
 8019c60:	b2bf      	uxth	r7, r7
 8019c62:	18fa      	adds	r2, r7, r3
 8019c64:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8019c68:	b212      	sxth	r2, r2
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	db3c      	blt.n	8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c6e:	8970      	ldrh	r0, [r6, #10]
 8019c70:	4403      	add	r3, r0
 8019c72:	b21b      	sxth	r3, r3
 8019c74:	429a      	cmp	r2, r3
 8019c76:	da37      	bge.n	8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c78:	2300      	movs	r3, #0
 8019c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c7c:	4630      	mov	r0, r6
 8019c7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8019c80:	f7ff ff36 	bl	8019af0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c86:	b37a      	cbz	r2, 8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c88:	4552      	cmp	r2, sl
 8019c8a:	d02d      	beq.n	8019ce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8019c8c:	4611      	mov	r1, r2
 8019c8e:	a80e      	add	r0, sp, #56	; 0x38
 8019c90:	9209      	str	r2, [sp, #36]	; 0x24
 8019c92:	f004 fc5f 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c96:	9a06      	ldr	r2, [sp, #24]
 8019c98:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8019c9c:	9b01      	ldr	r3, [sp, #4]
 8019c9e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8019ca2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8019ca6:	4413      	add	r3, r2
 8019ca8:	f04f 0e02 	mov.w	lr, #2
 8019cac:	fb91 f1fe 	sdiv	r1, r1, lr
 8019cb0:	4401      	add	r1, r0
 8019cb2:	1a58      	subs	r0, r3, r1
 8019cb4:	9a07      	ldr	r2, [sp, #28]
 8019cb6:	9b02      	ldr	r3, [sp, #8]
 8019cb8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8019cbc:	fb9c fcfe 	sdiv	ip, ip, lr
 8019cc0:	4413      	add	r3, r2
 8019cc2:	448c      	add	ip, r1
 8019cc4:	eba3 030c 	sub.w	r3, r3, ip
 8019cc8:	435b      	muls	r3, r3
 8019cca:	fb00 3300 	mla	r3, r0, r0, r3
 8019cce:	42ab      	cmp	r3, r5
 8019cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cd2:	d208      	bcs.n	8019ce6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019cd4:	9803      	ldr	r0, [sp, #12]
 8019cd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019cd8:	6001      	str	r1, [r0, #0]
 8019cda:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019cdc:	9805      	ldr	r0, [sp, #20]
 8019cde:	8008      	strh	r0, [r1, #0]
 8019ce0:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019ce2:	461d      	mov	r5, r3
 8019ce4:	800f      	strh	r7, [r1, #0]
 8019ce6:	4692      	mov	sl, r2
 8019ce8:	f10b 0b01 	add.w	fp, fp, #1
 8019cec:	f1bb 0f04 	cmp.w	fp, #4
 8019cf0:	f104 0408 	add.w	r4, r4, #8
 8019cf4:	d19c      	bne.n	8019c30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8019cf6:	9b00      	ldr	r3, [sp, #0]
 8019cf8:	9c08      	ldr	r4, [sp, #32]
 8019cfa:	444b      	add	r3, r9
 8019cfc:	4544      	cmp	r4, r8
 8019cfe:	9300      	str	r3, [sp, #0]
 8019d00:	d187      	bne.n	8019c12 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019d02:	b021      	add	sp, #132	; 0x84
 8019d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d08:	f04f 35ff 	mov.w	r5, #4294967295
 8019d0c:	e766      	b.n	8019bdc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019d0e:	bf00      	nop
 8019d10:	2000b4c4 	.word	0x2000b4c4
 8019d14:	0802e32c 	.word	0x0802e32c

08019d18 <_ZN8touchgfx4RectaNERKS0_>:
 8019d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d1c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019d20:	888c      	ldrh	r4, [r1, #4]
 8019d22:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019d26:	443c      	add	r4, r7
 8019d28:	b2a4      	uxth	r4, r4
 8019d2a:	fa0f f884 	sxth.w	r8, r4
 8019d2e:	45c1      	cmp	r9, r8
 8019d30:	da2f      	bge.n	8019d92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019d32:	8882      	ldrh	r2, [r0, #4]
 8019d34:	444a      	add	r2, r9
 8019d36:	b292      	uxth	r2, r2
 8019d38:	fa0f fe82 	sxth.w	lr, r2
 8019d3c:	4577      	cmp	r7, lr
 8019d3e:	da28      	bge.n	8019d92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019d40:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019d44:	88cb      	ldrh	r3, [r1, #6]
 8019d46:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8019d4a:	442b      	add	r3, r5
 8019d4c:	b21b      	sxth	r3, r3
 8019d4e:	429e      	cmp	r6, r3
 8019d50:	da1f      	bge.n	8019d92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019d52:	88c3      	ldrh	r3, [r0, #6]
 8019d54:	4433      	add	r3, r6
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	fa0f fc83 	sxth.w	ip, r3
 8019d5c:	4565      	cmp	r5, ip
 8019d5e:	da18      	bge.n	8019d92 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019d60:	454f      	cmp	r7, r9
 8019d62:	bfb8      	it	lt
 8019d64:	464f      	movlt	r7, r9
 8019d66:	42b5      	cmp	r5, r6
 8019d68:	bfb8      	it	lt
 8019d6a:	4635      	movlt	r5, r6
 8019d6c:	45f0      	cmp	r8, lr
 8019d6e:	bfd8      	it	le
 8019d70:	4622      	movle	r2, r4
 8019d72:	1bd2      	subs	r2, r2, r7
 8019d74:	8082      	strh	r2, [r0, #4]
 8019d76:	884a      	ldrh	r2, [r1, #2]
 8019d78:	88c9      	ldrh	r1, [r1, #6]
 8019d7a:	8007      	strh	r7, [r0, #0]
 8019d7c:	440a      	add	r2, r1
 8019d7e:	b292      	uxth	r2, r2
 8019d80:	b211      	sxth	r1, r2
 8019d82:	458c      	cmp	ip, r1
 8019d84:	bfa8      	it	ge
 8019d86:	4613      	movge	r3, r2
 8019d88:	1b5b      	subs	r3, r3, r5
 8019d8a:	80c3      	strh	r3, [r0, #6]
 8019d8c:	8045      	strh	r5, [r0, #2]
 8019d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d92:	2300      	movs	r3, #0
 8019d94:	8003      	strh	r3, [r0, #0]
 8019d96:	8043      	strh	r3, [r0, #2]
 8019d98:	8083      	strh	r3, [r0, #4]
 8019d9a:	80c3      	strh	r3, [r0, #6]
 8019d9c:	e7f7      	b.n	8019d8e <_ZN8touchgfx4RectaNERKS0_+0x76>

08019d9e <_ZNK8touchgfx4Rect7isEmptyEv>:
 8019d9e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	dd06      	ble.n	8019db4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8019da6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8019daa:	2800      	cmp	r0, #0
 8019dac:	bfcc      	ite	gt
 8019dae:	2000      	movgt	r0, #0
 8019db0:	2001      	movle	r0, #1
 8019db2:	4770      	bx	lr
 8019db4:	2001      	movs	r0, #1
 8019db6:	4770      	bx	lr

08019db8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8019db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019dc0:	8003      	strh	r3, [r0, #0]
 8019dc2:	4604      	mov	r4, r0
 8019dc4:	8043      	strh	r3, [r0, #2]
 8019dc6:	8083      	strh	r3, [r0, #4]
 8019dc8:	80c3      	strh	r3, [r0, #6]
 8019dca:	2d00      	cmp	r5, #0
 8019dcc:	d040      	beq.n	8019e50 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019dce:	1d28      	adds	r0, r5, #4
 8019dd0:	f7ff ffe5 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019dd4:	b988      	cbnz	r0, 8019dfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	f7ff ffe1 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ddc:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019de0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019de4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8019de8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019dec:	b138      	cbz	r0, 8019dfe <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019dee:	8022      	strh	r2, [r4, #0]
 8019df0:	8063      	strh	r3, [r4, #2]
 8019df2:	f8a4 e004 	strh.w	lr, [r4, #4]
 8019df6:	f8a4 c006 	strh.w	ip, [r4, #6]
 8019dfa:	69ad      	ldr	r5, [r5, #24]
 8019dfc:	e7e5      	b.n	8019dca <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019dfe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019e02:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019e06:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8019e0a:	4290      	cmp	r0, r2
 8019e0c:	4607      	mov	r7, r0
 8019e0e:	bfa8      	it	ge
 8019e10:	4617      	movge	r7, r2
 8019e12:	4472      	add	r2, lr
 8019e14:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8019e18:	8027      	strh	r7, [r4, #0]
 8019e1a:	4299      	cmp	r1, r3
 8019e1c:	460e      	mov	r6, r1
 8019e1e:	4440      	add	r0, r8
 8019e20:	bfa8      	it	ge
 8019e22:	461e      	movge	r6, r3
 8019e24:	4471      	add	r1, lr
 8019e26:	4463      	add	r3, ip
 8019e28:	b200      	sxth	r0, r0
 8019e2a:	b212      	sxth	r2, r2
 8019e2c:	b209      	sxth	r1, r1
 8019e2e:	b21b      	sxth	r3, r3
 8019e30:	4290      	cmp	r0, r2
 8019e32:	bfac      	ite	ge
 8019e34:	ebc7 0200 	rsbge	r2, r7, r0
 8019e38:	ebc7 0202 	rsblt	r2, r7, r2
 8019e3c:	4299      	cmp	r1, r3
 8019e3e:	bfac      	ite	ge
 8019e40:	ebc6 0301 	rsbge	r3, r6, r1
 8019e44:	ebc6 0303 	rsblt	r3, r6, r3
 8019e48:	8066      	strh	r6, [r4, #2]
 8019e4a:	80a2      	strh	r2, [r4, #4]
 8019e4c:	80e3      	strh	r3, [r4, #6]
 8019e4e:	e7d4      	b.n	8019dfa <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8019e50:	4620      	mov	r0, r4
 8019e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8019e56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019e5a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019e5e:	b383      	cbz	r3, 8019ec2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019e60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019e62:	b374      	cbz	r4, 8019ec2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8019e64:	f9b1 5000 	ldrsh.w	r5, [r1]
 8019e68:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8019e6c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8019e70:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8019e74:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019e78:	b303      	cbz	r3, 8019ebc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019e7a:	4668      	mov	r0, sp
 8019e7c:	1d21      	adds	r1, r4, #4
 8019e7e:	f8ad 5000 	strh.w	r5, [sp]
 8019e82:	f8ad 6002 	strh.w	r6, [sp, #2]
 8019e86:	f8ad 7004 	strh.w	r7, [sp, #4]
 8019e8a:	f8ad 8006 	strh.w	r8, [sp, #6]
 8019e8e:	f7ff ff43 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8019e92:	4668      	mov	r0, sp
 8019e94:	f7ff ff83 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019e98:	b980      	cbnz	r0, 8019ebc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8019e9a:	f8bd 3000 	ldrh.w	r3, [sp]
 8019e9e:	88a2      	ldrh	r2, [r4, #4]
 8019ea0:	1a9b      	subs	r3, r3, r2
 8019ea2:	f8ad 3000 	strh.w	r3, [sp]
 8019ea6:	88e2      	ldrh	r2, [r4, #6]
 8019ea8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019eac:	1a9b      	subs	r3, r3, r2
 8019eae:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019eb2:	6823      	ldr	r3, [r4, #0]
 8019eb4:	4669      	mov	r1, sp
 8019eb6:	689b      	ldr	r3, [r3, #8]
 8019eb8:	4620      	mov	r0, r4
 8019eba:	4798      	blx	r3
 8019ebc:	69a4      	ldr	r4, [r4, #24]
 8019ebe:	2c00      	cmp	r4, #0
 8019ec0:	d1d8      	bne.n	8019e74 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8019ec2:	b002      	add	sp, #8
 8019ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019ec8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019eca:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019ece:	460d      	mov	r5, r1
 8019ed0:	4616      	mov	r6, r2
 8019ed2:	b323      	cbz	r3, 8019f1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019ed4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019ed6:	b314      	cbz	r4, 8019f1e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019ed8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019edc:	b1eb      	cbz	r3, 8019f1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019ede:	6828      	ldr	r0, [r5, #0]
 8019ee0:	6869      	ldr	r1, [r5, #4]
 8019ee2:	466b      	mov	r3, sp
 8019ee4:	c303      	stmia	r3!, {r0, r1}
 8019ee6:	4668      	mov	r0, sp
 8019ee8:	1d21      	adds	r1, r4, #4
 8019eea:	f7ff ff15 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8019eee:	4668      	mov	r0, sp
 8019ef0:	f7ff ff55 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ef4:	b988      	cbnz	r0, 8019f1a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019ef6:	f8bd 3000 	ldrh.w	r3, [sp]
 8019efa:	88a2      	ldrh	r2, [r4, #4]
 8019efc:	1a9b      	subs	r3, r3, r2
 8019efe:	f8ad 3000 	strh.w	r3, [sp]
 8019f02:	88e2      	ldrh	r2, [r4, #6]
 8019f04:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019f08:	1a9b      	subs	r3, r3, r2
 8019f0a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	4632      	mov	r2, r6
 8019f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f14:	4669      	mov	r1, sp
 8019f16:	4620      	mov	r0, r4
 8019f18:	4798      	blx	r3
 8019f1a:	69a4      	ldr	r4, [r4, #24]
 8019f1c:	e7db      	b.n	8019ed6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019f1e:	b002      	add	sp, #8
 8019f20:	bd70      	pop	{r4, r5, r6, pc}

08019f22 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8019f22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f26:	4770      	bx	lr

08019f28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019f28:	b513      	push	{r0, r1, r4, lr}
 8019f2a:	6803      	ldr	r3, [r0, #0]
 8019f2c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8019f30:	2300      	movs	r3, #0
 8019f32:	e9cd 3300 	strd	r3, r3, [sp]
 8019f36:	466b      	mov	r3, sp
 8019f38:	47a0      	blx	r4
 8019f3a:	b002      	add	sp, #8
 8019f3c:	bd10      	pop	{r4, pc}

08019f3e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019f3e:	2301      	movs	r3, #1
 8019f40:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019f44:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019f48:	4770      	bx	lr

08019f4a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019f50:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019f54:	4770      	bx	lr

08019f56 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019f56:	6843      	ldr	r3, [r0, #4]
 8019f58:	2201      	movs	r2, #1
 8019f5a:	725a      	strb	r2, [r3, #9]
 8019f5c:	6840      	ldr	r0, [r0, #4]
 8019f5e:	6803      	ldr	r3, [r0, #0]
 8019f60:	691b      	ldr	r3, [r3, #16]
 8019f62:	4718      	bx	r3

08019f64 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019f64:	6840      	ldr	r0, [r0, #4]
 8019f66:	6803      	ldr	r3, [r0, #0]
 8019f68:	689b      	ldr	r3, [r3, #8]
 8019f6a:	4718      	bx	r3

08019f6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8019f6c:	b530      	push	{r4, r5, lr}
 8019f6e:	b08b      	sub	sp, #44	; 0x2c
 8019f70:	6804      	ldr	r4, [r0, #0]
 8019f72:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8019f76:	9509      	str	r5, [sp, #36]	; 0x24
 8019f78:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8019f7c:	9508      	str	r5, [sp, #32]
 8019f7e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019f82:	9507      	str	r5, [sp, #28]
 8019f84:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8019f88:	9506      	str	r5, [sp, #24]
 8019f8a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019f8e:	9505      	str	r5, [sp, #20]
 8019f90:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8019f94:	9504      	str	r5, [sp, #16]
 8019f96:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8019f9a:	9503      	str	r5, [sp, #12]
 8019f9c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019fa0:	9502      	str	r5, [sp, #8]
 8019fa2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019fa6:	e9cd 3500 	strd	r3, r5, [sp]
 8019faa:	4613      	mov	r3, r2
 8019fac:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8019fae:	2200      	movs	r2, #0
 8019fb0:	47a0      	blx	r4
 8019fb2:	b00b      	add	sp, #44	; 0x2c
 8019fb4:	bd30      	pop	{r4, r5, pc}
	...

08019fb8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019fb8:	4b04      	ldr	r3, [pc, #16]	; (8019fcc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8019fba:	781b      	ldrb	r3, [r3, #0]
 8019fbc:	b123      	cbz	r3, 8019fc8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8019fbe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019fc2:	f080 0001 	eor.w	r0, r0, #1
 8019fc6:	4770      	bx	lr
 8019fc8:	2001      	movs	r0, #1
 8019fca:	4770      	bx	lr
 8019fcc:	2000b4c2 	.word	0x2000b4c2

08019fd0 <_ZN8touchgfx3HAL8endFrameEv>:
 8019fd0:	b510      	push	{r4, lr}
 8019fd2:	4604      	mov	r4, r0
 8019fd4:	6840      	ldr	r0, [r0, #4]
 8019fd6:	6803      	ldr	r3, [r0, #0]
 8019fd8:	689b      	ldr	r3, [r3, #8]
 8019fda:	4798      	blx	r3
 8019fdc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019fe0:	b113      	cbz	r3, 8019fe8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019fe8:	bd10      	pop	{r4, pc}

08019fea <_ZN8touchgfx3HAL10initializeEv>:
 8019fea:	b510      	push	{r4, lr}
 8019fec:	4604      	mov	r4, r0
 8019fee:	f7fd fe0b 	bl	8017c08 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019ff2:	6860      	ldr	r0, [r4, #4]
 8019ff4:	6803      	ldr	r3, [r0, #0]
 8019ff6:	68db      	ldr	r3, [r3, #12]
 8019ff8:	4798      	blx	r3
 8019ffa:	68e0      	ldr	r0, [r4, #12]
 8019ffc:	6803      	ldr	r3, [r0, #0]
 8019ffe:	689b      	ldr	r3, [r3, #8]
 801a000:	4798      	blx	r3
 801a002:	6823      	ldr	r3, [r4, #0]
 801a004:	4620      	mov	r0, r4
 801a006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a00c:	4718      	bx	r3

0801a00e <_ZN8touchgfx3HAL9taskEntryEv>:
 801a00e:	b508      	push	{r3, lr}
 801a010:	6803      	ldr	r3, [r0, #0]
 801a012:	4604      	mov	r4, r0
 801a014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a018:	4798      	blx	r3
 801a01a:	6823      	ldr	r3, [r4, #0]
 801a01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a01e:	4620      	mov	r0, r4
 801a020:	4798      	blx	r3
 801a022:	f7fd fe65 	bl	8017cf0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801a026:	6823      	ldr	r3, [r4, #0]
 801a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a02a:	e7f8      	b.n	801a01e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801a02c <_ZN8touchgfx3HAL4tickEv>:
 801a02c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a02e:	6803      	ldr	r3, [r0, #0]
 801a030:	4d5b      	ldr	r5, [pc, #364]	; (801a1a0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 801a032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a036:	4604      	mov	r4, r0
 801a038:	4798      	blx	r3
 801a03a:	2800      	cmp	r0, #0
 801a03c:	f000 8095 	beq.w	801a16a <_ZN8touchgfx3HAL4tickEv+0x13e>
 801a040:	2001      	movs	r0, #1
 801a042:	f7fd fb3d 	bl	80176c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801a046:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801a04a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a04e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801a052:	2600      	movs	r6, #0
 801a054:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801a058:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801a05c:	b133      	cbz	r3, 801a06c <_ZN8touchgfx3HAL4tickEv+0x40>
 801a05e:	6823      	ldr	r3, [r4, #0]
 801a060:	4620      	mov	r0, r4
 801a062:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a066:	4798      	blx	r3
 801a068:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801a06c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a070:	6862      	ldr	r2, [r4, #4]
 801a072:	f083 0301 	eor.w	r3, r3, #1
 801a076:	7253      	strb	r3, [r2, #9]
 801a078:	2601      	movs	r6, #1
 801a07a:	702e      	strb	r6, [r5, #0]
 801a07c:	f003 f9fc 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801a080:	6803      	ldr	r3, [r0, #0]
 801a082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a084:	4798      	blx	r3
 801a086:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a08a:	b90b      	cbnz	r3, 801a090 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a08c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801a090:	f003 f9f2 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801a094:	6803      	ldr	r3, [r0, #0]
 801a096:	695b      	ldr	r3, [r3, #20]
 801a098:	4798      	blx	r3
 801a09a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a09c:	6803      	ldr	r3, [r0, #0]
 801a09e:	691b      	ldr	r3, [r3, #16]
 801a0a0:	4798      	blx	r3
 801a0a2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801a0a6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801a0aa:	3b01      	subs	r3, #1
 801a0ac:	b2db      	uxtb	r3, r3
 801a0ae:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801a0b2:	b10a      	cbz	r2, 801a0b8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d1eb      	bne.n	801a090 <_ZN8touchgfx3HAL4tickEv+0x64>
 801a0b8:	4a3a      	ldr	r2, [pc, #232]	; (801a1a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801a0ba:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801a0be:	7813      	ldrb	r3, [r2, #0]
 801a0c0:	3301      	adds	r3, #1
 801a0c2:	b25b      	sxtb	r3, r3
 801a0c4:	4299      	cmp	r1, r3
 801a0c6:	7013      	strb	r3, [r2, #0]
 801a0c8:	dc10      	bgt.n	801a0ec <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a0ca:	68e0      	ldr	r0, [r4, #12]
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	7013      	strb	r3, [r2, #0]
 801a0d0:	6803      	ldr	r3, [r0, #0]
 801a0d2:	aa03      	add	r2, sp, #12
 801a0d4:	68db      	ldr	r3, [r3, #12]
 801a0d6:	a902      	add	r1, sp, #8
 801a0d8:	4798      	blx	r3
 801a0da:	6823      	ldr	r3, [r4, #0]
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	d050      	beq.n	801a182 <_ZN8touchgfx3HAL4tickEv+0x156>
 801a0e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801a0e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	4798      	blx	r3
 801a0ec:	6960      	ldr	r0, [r4, #20]
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	f88d 3007 	strb.w	r3, [sp, #7]
 801a0f4:	b158      	cbz	r0, 801a10e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a0f6:	6803      	ldr	r3, [r0, #0]
 801a0f8:	f10d 0107 	add.w	r1, sp, #7
 801a0fc:	68db      	ldr	r3, [r3, #12]
 801a0fe:	4798      	blx	r3
 801a100:	b128      	cbz	r0, 801a10e <_ZN8touchgfx3HAL4tickEv+0xe2>
 801a102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a104:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a108:	6803      	ldr	r3, [r0, #0]
 801a10a:	68db      	ldr	r3, [r3, #12]
 801a10c:	4798      	blx	r3
 801a10e:	f104 001c 	add.w	r0, r4, #28
 801a112:	f011 fb0b 	bl	802b72c <_ZN8touchgfx8Gestures4tickEv>
 801a116:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801a11a:	b30b      	cbz	r3, 801a160 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a11c:	6920      	ldr	r0, [r4, #16]
 801a11e:	6803      	ldr	r3, [r0, #0]
 801a120:	691b      	ldr	r3, [r3, #16]
 801a122:	4798      	blx	r3
 801a124:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a126:	4606      	mov	r6, r0
 801a128:	b903      	cbnz	r3, 801a12c <_ZN8touchgfx3HAL4tickEv+0x100>
 801a12a:	6720      	str	r0, [r4, #112]	; 0x70
 801a12c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a12e:	4a1e      	ldr	r2, [pc, #120]	; (801a1a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801a130:	1af3      	subs	r3, r6, r3
 801a132:	4293      	cmp	r3, r2
 801a134:	d914      	bls.n	801a160 <_ZN8touchgfx3HAL4tickEv+0x134>
 801a136:	6920      	ldr	r0, [r4, #16]
 801a138:	6803      	ldr	r3, [r0, #0]
 801a13a:	699b      	ldr	r3, [r3, #24]
 801a13c:	4798      	blx	r3
 801a13e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a140:	2264      	movs	r2, #100	; 0x64
 801a142:	1af3      	subs	r3, r6, r3
 801a144:	fbb3 f3f2 	udiv	r3, r3, r2
 801a148:	fbb0 f0f3 	udiv	r0, r0, r3
 801a14c:	2800      	cmp	r0, #0
 801a14e:	dc1d      	bgt.n	801a18c <_ZN8touchgfx3HAL4tickEv+0x160>
 801a150:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801a154:	6920      	ldr	r0, [r4, #16]
 801a156:	6803      	ldr	r3, [r0, #0]
 801a158:	2100      	movs	r1, #0
 801a15a:	69db      	ldr	r3, [r3, #28]
 801a15c:	4798      	blx	r3
 801a15e:	6726      	str	r6, [r4, #112]	; 0x70
 801a160:	f003 f98a 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a168:	4798      	blx	r3
 801a16a:	6823      	ldr	r3, [r4, #0]
 801a16c:	4620      	mov	r0, r4
 801a16e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801a172:	4798      	blx	r3
 801a174:	2001      	movs	r0, #1
 801a176:	f7fd fabf 	bl	80176f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801a17a:	2300      	movs	r3, #0
 801a17c:	702b      	strb	r3, [r5, #0]
 801a17e:	b004      	add	sp, #16
 801a180:	bd70      	pop	{r4, r5, r6, pc}
 801a182:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a186:	4620      	mov	r0, r4
 801a188:	4798      	blx	r3
 801a18a:	e7af      	b.n	801a0ec <_ZN8touchgfx3HAL4tickEv+0xc0>
 801a18c:	2863      	cmp	r0, #99	; 0x63
 801a18e:	bfcb      	itete	gt
 801a190:	2300      	movgt	r3, #0
 801a192:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801a196:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801a19a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801a19e:	e7d9      	b.n	801a154 <_ZN8touchgfx3HAL4tickEv+0x128>
 801a1a0:	2000b4c8 	.word	0x2000b4c8
 801a1a4:	2000b4c9 	.word	0x2000b4c9
 801a1a8:	05f5e100 	.word	0x05f5e100

0801a1ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801a1ac:	f7fd bd70 	b.w	8017c90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a1b0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801a1b0:	6581      	str	r1, [r0, #88]	; 0x58
 801a1b2:	301c      	adds	r0, #28
 801a1b4:	f011 bab8 	b.w	802b728 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801a1b8 <_ZN8touchgfx3HAL5touchEll>:
 801a1b8:	b530      	push	{r4, r5, lr}
 801a1ba:	b087      	sub	sp, #28
 801a1bc:	4604      	mov	r4, r0
 801a1be:	a804      	add	r0, sp, #16
 801a1c0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801a1c4:	f002 fede 	bl	801cf84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801a1c8:	9b04      	ldr	r3, [sp, #16]
 801a1ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a1ce:	a906      	add	r1, sp, #24
 801a1d0:	9b05      	ldr	r3, [sp, #20]
 801a1d2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801a1d6:	a803      	add	r0, sp, #12
 801a1d8:	f002 ff26 	bl	801d028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801a1dc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801a1e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801a1e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a1e8:	f104 001c 	add.w	r0, r4, #28
 801a1ec:	b189      	cbz	r1, 801a212 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801a1ee:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a1f2:	9300      	str	r3, [sp, #0]
 801a1f4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a1f8:	4613      	mov	r3, r2
 801a1fa:	462a      	mov	r2, r5
 801a1fc:	f011 faa4 	bl	802b748 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801a200:	b128      	cbz	r0, 801a20e <_ZN8touchgfx3HAL5touchEll+0x56>
 801a202:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801a206:	65e3      	str	r3, [r4, #92]	; 0x5c
 801a208:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a20c:	6623      	str	r3, [r4, #96]	; 0x60
 801a20e:	b007      	add	sp, #28
 801a210:	bd30      	pop	{r4, r5, pc}
 801a212:	f011 fad9 	bl	802b7c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a216:	2301      	movs	r3, #1
 801a218:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a21c:	e7f1      	b.n	801a202 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801a21e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801a21e:	b510      	push	{r4, lr}
 801a220:	2b00      	cmp	r3, #0
 801a222:	d046      	beq.n	801a2b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a224:	ea81 0002 	eor.w	r0, r1, r2
 801a228:	07c4      	lsls	r4, r0, #31
 801a22a:	d508      	bpl.n	801a23e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801a22c:	440b      	add	r3, r1
 801a22e:	3a01      	subs	r2, #1
 801a230:	428b      	cmp	r3, r1
 801a232:	d93e      	bls.n	801a2b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a234:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a238:	f801 0b01 	strb.w	r0, [r1], #1
 801a23c:	e7f8      	b.n	801a230 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801a23e:	07d0      	lsls	r0, r2, #31
 801a240:	bf42      	ittt	mi
 801a242:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801a246:	f801 0b01 	strbmi.w	r0, [r1], #1
 801a24a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801a24e:	2b01      	cmp	r3, #1
 801a250:	d911      	bls.n	801a276 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a252:	ea81 0402 	eor.w	r4, r1, r2
 801a256:	07a4      	lsls	r4, r4, #30
 801a258:	4610      	mov	r0, r2
 801a25a:	d022      	beq.n	801a2a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801a25c:	f023 0401 	bic.w	r4, r3, #1
 801a260:	440c      	add	r4, r1
 801a262:	428c      	cmp	r4, r1
 801a264:	4602      	mov	r2, r0
 801a266:	d904      	bls.n	801a272 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801a268:	8812      	ldrh	r2, [r2, #0]
 801a26a:	f821 2b02 	strh.w	r2, [r1], #2
 801a26e:	3002      	adds	r0, #2
 801a270:	e7f7      	b.n	801a262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801a272:	f003 0301 	and.w	r3, r3, #1
 801a276:	f023 0003 	bic.w	r0, r3, #3
 801a27a:	4408      	add	r0, r1
 801a27c:	4288      	cmp	r0, r1
 801a27e:	4614      	mov	r4, r2
 801a280:	d904      	bls.n	801a28c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801a282:	6824      	ldr	r4, [r4, #0]
 801a284:	f841 4b04 	str.w	r4, [r1], #4
 801a288:	3204      	adds	r2, #4
 801a28a:	e7f7      	b.n	801a27c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801a28c:	f003 0303 	and.w	r3, r3, #3
 801a290:	440b      	add	r3, r1
 801a292:	3a01      	subs	r2, #1
 801a294:	428b      	cmp	r3, r1
 801a296:	d90c      	bls.n	801a2b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801a298:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801a29c:	f801 0b01 	strb.w	r0, [r1], #1
 801a2a0:	e7f8      	b.n	801a294 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801a2a2:	0790      	lsls	r0, r2, #30
 801a2a4:	d0e7      	beq.n	801a276 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a2a6:	f832 0b02 	ldrh.w	r0, [r2], #2
 801a2aa:	f821 0b02 	strh.w	r0, [r1], #2
 801a2ae:	3b02      	subs	r3, #2
 801a2b0:	e7e1      	b.n	801a276 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801a2b2:	2001      	movs	r0, #1
 801a2b4:	bd10      	pop	{r4, pc}

0801a2b6 <_ZN8touchgfx3HAL7noTouchEv>:
 801a2b6:	b510      	push	{r4, lr}
 801a2b8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801a2bc:	4604      	mov	r4, r0
 801a2be:	b153      	cbz	r3, 801a2d6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801a2c0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801a2c4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801a2c8:	2101      	movs	r1, #1
 801a2ca:	301c      	adds	r0, #28
 801a2cc:	f011 fa7c 	bl	802b7c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801a2d6:	bd10      	pop	{r4, pc}

0801a2d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801a2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2dc:	b085      	sub	sp, #20
 801a2de:	ad04      	add	r5, sp, #16
 801a2e0:	4604      	mov	r4, r0
 801a2e2:	2000      	movs	r0, #0
 801a2e4:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a2e8:	69a0      	ldr	r0, [r4, #24]
 801a2ea:	6806      	ldr	r6, [r0, #0]
 801a2ec:	9501      	str	r5, [sp, #4]
 801a2ee:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801a2f2:	9500      	str	r5, [sp, #0]
 801a2f4:	6835      	ldr	r5, [r6, #0]
 801a2f6:	4699      	mov	r9, r3
 801a2f8:	460f      	mov	r7, r1
 801a2fa:	4690      	mov	r8, r2
 801a2fc:	47a8      	blx	r5
 801a2fe:	4d10      	ldr	r5, [pc, #64]	; (801a340 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801a300:	4606      	mov	r6, r0
 801a302:	f8a5 9000 	strh.w	r9, [r5]
 801a306:	f7f7 fa13 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a30a:	6803      	ldr	r3, [r0, #0]
 801a30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a30e:	4798      	blx	r3
 801a310:	b128      	cbz	r0, 801a31e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801a312:	2801      	cmp	r0, #1
 801a314:	d00b      	beq.n	801a32e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801a316:	4630      	mov	r0, r6
 801a318:	b005      	add	sp, #20
 801a31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a31e:	882b      	ldrh	r3, [r5, #0]
 801a320:	fb08 7203 	mla	r2, r8, r3, r7
 801a324:	9b03      	ldr	r3, [sp, #12]
 801a326:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801a32a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801a32c:	e7f3      	b.n	801a316 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a32e:	882a      	ldrh	r2, [r5, #0]
 801a330:	9b03      	ldr	r3, [sp, #12]
 801a332:	fb08 7202 	mla	r2, r8, r2, r7
 801a336:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a33a:	1a9a      	subs	r2, r3, r2
 801a33c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801a33e:	e7ea      	b.n	801a316 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801a340:	2000b4be 	.word	0x2000b4be

0801a344 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801a344:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a346:	b08b      	sub	sp, #44	; 0x2c
 801a348:	4617      	mov	r7, r2
 801a34a:	4604      	mov	r4, r0
 801a34c:	460e      	mov	r6, r1
 801a34e:	461d      	mov	r5, r3
 801a350:	f7f7 f9ee 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a354:	6803      	ldr	r3, [r0, #0]
 801a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a358:	4798      	blx	r3
 801a35a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a35e:	9007      	str	r0, [sp, #28]
 801a360:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a364:	4b0d      	ldr	r3, [pc, #52]	; (801a39c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801a366:	6822      	ldr	r2, [r4, #0]
 801a368:	881b      	ldrh	r3, [r3, #0]
 801a36a:	9306      	str	r3, [sp, #24]
 801a36c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a370:	9305      	str	r3, [sp, #20]
 801a372:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801a376:	9304      	str	r3, [sp, #16]
 801a378:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a37c:	9303      	str	r3, [sp, #12]
 801a37e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a382:	9302      	str	r3, [sp, #8]
 801a384:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a388:	e9cd 5300 	strd	r5, r3, [sp]
 801a38c:	4631      	mov	r1, r6
 801a38e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801a390:	463b      	mov	r3, r7
 801a392:	2200      	movs	r2, #0
 801a394:	4620      	mov	r0, r4
 801a396:	47a8      	blx	r5
 801a398:	b00b      	add	sp, #44	; 0x2c
 801a39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a39c:	2000b4be 	.word	0x2000b4be

0801a3a0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801a3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3a4:	4698      	mov	r8, r3
 801a3a6:	6803      	ldr	r3, [r0, #0]
 801a3a8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801a3aa:	4b15      	ldr	r3, [pc, #84]	; (801a400 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801a3ac:	b08b      	sub	sp, #44	; 0x2c
 801a3ae:	4617      	mov	r7, r2
 801a3b0:	f8b3 9000 	ldrh.w	r9, [r3]
 801a3b4:	460e      	mov	r6, r1
 801a3b6:	4604      	mov	r4, r0
 801a3b8:	f7f7 f9ba 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a3bc:	6803      	ldr	r3, [r0, #0]
 801a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3c0:	4798      	blx	r3
 801a3c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a3c6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801a3ca:	2302      	movs	r3, #2
 801a3cc:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	9305      	str	r3, [sp, #20]
 801a3d4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801a3d8:	9304      	str	r3, [sp, #16]
 801a3da:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a3de:	9303      	str	r3, [sp, #12]
 801a3e0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a3e4:	9302      	str	r3, [sp, #8]
 801a3e6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	e9cd 8300 	strd	r8, r3, [sp]
 801a3f0:	4631      	mov	r1, r6
 801a3f2:	463b      	mov	r3, r7
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	47a8      	blx	r5
 801a3f8:	b00b      	add	sp, #44	; 0x2c
 801a3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3fe:	bf00      	nop
 801a400:	2000b4be 	.word	0x2000b4be

0801a404 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 801a404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a408:	4698      	mov	r8, r3
 801a40a:	6803      	ldr	r3, [r0, #0]
 801a40c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801a40e:	4b11      	ldr	r3, [pc, #68]	; (801a454 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801a410:	b087      	sub	sp, #28
 801a412:	f8b3 9000 	ldrh.w	r9, [r3]
 801a416:	460e      	mov	r6, r1
 801a418:	4617      	mov	r7, r2
 801a41a:	4604      	mov	r4, r0
 801a41c:	f7f7 f988 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a420:	6803      	ldr	r3, [r0, #0]
 801a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a424:	4798      	blx	r3
 801a426:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801a42a:	f8cd 900c 	str.w	r9, [sp, #12]
 801a42e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801a432:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a436:	9302      	str	r3, [sp, #8]
 801a438:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a43c:	9301      	str	r3, [sp, #4]
 801a43e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a442:	9300      	str	r3, [sp, #0]
 801a444:	463a      	mov	r2, r7
 801a446:	4643      	mov	r3, r8
 801a448:	4631      	mov	r1, r6
 801a44a:	4620      	mov	r0, r4
 801a44c:	47a8      	blx	r5
 801a44e:	b007      	add	sp, #28
 801a450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a454:	2000b4be 	.word	0x2000b4be

0801a458 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a45c:	4604      	mov	r4, r0
 801a45e:	b08f      	sub	sp, #60	; 0x3c
 801a460:	4610      	mov	r0, r2
 801a462:	460d      	mov	r5, r1
 801a464:	4691      	mov	r9, r2
 801a466:	461e      	mov	r6, r3
 801a468:	f005 fbb2 	bl	801fbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a46c:	2800      	cmp	r0, #0
 801a46e:	f000 809d 	beq.w	801a5ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801a472:	6823      	ldr	r3, [r4, #0]
 801a474:	f8df b198 	ldr.w	fp, [pc, #408]	; 801a610 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a47a:	f8df a198 	ldr.w	sl, [pc, #408]	; 801a614 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801a47e:	4f61      	ldr	r7, [pc, #388]	; (801a604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a480:	4620      	mov	r0, r4
 801a482:	4798      	blx	r3
 801a484:	6823      	ldr	r3, [r4, #0]
 801a486:	4620      	mov	r0, r4
 801a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a48a:	4798      	blx	r3
 801a48c:	f8bb 3000 	ldrh.w	r3, [fp]
 801a490:	9301      	str	r3, [sp, #4]
 801a492:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a496:	f8ba 3000 	ldrh.w	r3, [sl]
 801a49a:	9302      	str	r3, [sp, #8]
 801a49c:	883b      	ldrh	r3, [r7, #0]
 801a49e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801a4a2:	9303      	str	r3, [sp, #12]
 801a4a4:	4b58      	ldr	r3, [pc, #352]	; (801a608 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a4a6:	9305      	str	r3, [sp, #20]
 801a4a8:	881a      	ldrh	r2, [r3, #0]
 801a4aa:	9204      	str	r2, [sp, #16]
 801a4ac:	4640      	mov	r0, r8
 801a4ae:	f005 fc23 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a4b2:	8038      	strh	r0, [r7, #0]
 801a4b4:	4640      	mov	r0, r8
 801a4b6:	f005 fc53 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a4ba:	9b05      	ldr	r3, [sp, #20]
 801a4bc:	b280      	uxth	r0, r0
 801a4be:	8018      	strh	r0, [r3, #0]
 801a4c0:	4b52      	ldr	r3, [pc, #328]	; (801a60c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801a4c2:	781b      	ldrb	r3, [r3, #0]
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d174      	bne.n	801a5b2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801a4c8:	883b      	ldrh	r3, [r7, #0]
 801a4ca:	f8ab 3000 	strh.w	r3, [fp]
 801a4ce:	f8aa 0000 	strh.w	r0, [sl]
 801a4d2:	4648      	mov	r0, r9
 801a4d4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801a4d8:	f005 fb7a 	bl	801fbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a4dc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	4611      	mov	r1, r2
 801a4e4:	4628      	mov	r0, r5
 801a4e6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801a4ea:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801a4ee:	f7f7 fe9c 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
 801a4f2:	2301      	movs	r3, #1
 801a4f4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801a4f8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a4fc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a500:	2b00      	cmp	r3, #0
 801a502:	dd5c      	ble.n	801a5be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a504:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	dd58      	ble.n	801a5be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a50c:	462a      	mov	r2, r5
 801a50e:	ab0a      	add	r3, sp, #40	; 0x28
 801a510:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a514:	6851      	ldr	r1, [r2, #4]
 801a516:	c303      	stmia	r3!, {r0, r1}
 801a518:	4631      	mov	r1, r6
 801a51a:	a80a      	add	r0, sp, #40	; 0x28
 801a51c:	f7ff fbfc 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801a520:	4b38      	ldr	r3, [pc, #224]	; (801a604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a522:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a526:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a52a:	2100      	movs	r1, #0
 801a52c:	aa0a      	add	r2, sp, #40	; 0x28
 801a52e:	4b36      	ldr	r3, [pc, #216]	; (801a608 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a530:	910c      	str	r1, [sp, #48]	; 0x30
 801a532:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a53a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a53e:	ab08      	add	r3, sp, #32
 801a540:	e883 0003 	stmia.w	r3, {r0, r1}
 801a544:	4618      	mov	r0, r3
 801a546:	a90c      	add	r1, sp, #48	; 0x30
 801a548:	f7ff fbe6 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801a54c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d13c      	bne.n	801a5cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801a552:	2000      	movs	r0, #0
 801a554:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801a558:	2600      	movs	r6, #0
 801a55a:	682a      	ldr	r2, [r5, #0]
 801a55c:	696b      	ldr	r3, [r5, #20]
 801a55e:	616e      	str	r6, [r5, #20]
 801a560:	9305      	str	r3, [sp, #20]
 801a562:	6892      	ldr	r2, [r2, #8]
 801a564:	a908      	add	r1, sp, #32
 801a566:	4628      	mov	r0, r5
 801a568:	4790      	blx	r2
 801a56a:	9b05      	ldr	r3, [sp, #20]
 801a56c:	616b      	str	r3, [r5, #20]
 801a56e:	4652      	mov	r2, sl
 801a570:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801a574:	4649      	mov	r1, r9
 801a576:	4628      	mov	r0, r5
 801a578:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801a57c:	f7f7 fe55 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
 801a580:	4b23      	ldr	r3, [pc, #140]	; (801a610 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801a582:	9a01      	ldr	r2, [sp, #4]
 801a584:	801a      	strh	r2, [r3, #0]
 801a586:	4b23      	ldr	r3, [pc, #140]	; (801a614 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801a588:	9a02      	ldr	r2, [sp, #8]
 801a58a:	801a      	strh	r2, [r3, #0]
 801a58c:	4b1d      	ldr	r3, [pc, #116]	; (801a604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a58e:	9a03      	ldr	r2, [sp, #12]
 801a590:	801a      	strh	r2, [r3, #0]
 801a592:	4b1d      	ldr	r3, [pc, #116]	; (801a608 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a594:	9a04      	ldr	r2, [sp, #16]
 801a596:	801a      	strh	r2, [r3, #0]
 801a598:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801a59c:	6823      	ldr	r3, [r4, #0]
 801a59e:	4620      	mov	r0, r4
 801a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5a2:	4798      	blx	r3
 801a5a4:	6823      	ldr	r3, [r4, #0]
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5aa:	4798      	blx	r3
 801a5ac:	b00f      	add	sp, #60	; 0x3c
 801a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b2:	883b      	ldrh	r3, [r7, #0]
 801a5b4:	f8ab 0000 	strh.w	r0, [fp]
 801a5b8:	f8aa 3000 	strh.w	r3, [sl]
 801a5bc:	e789      	b.n	801a4d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801a5be:	462a      	mov	r2, r5
 801a5c0:	ab0a      	add	r3, sp, #40	; 0x28
 801a5c2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a5c6:	6851      	ldr	r1, [r2, #4]
 801a5c8:	c303      	stmia	r3!, {r0, r1}
 801a5ca:	e7a9      	b.n	801a520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a5cc:	a807      	add	r0, sp, #28
 801a5ce:	f005 fd03 	bl	801ffd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a5d2:	4606      	mov	r6, r0
 801a5d4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801a5d6:	6803      	ldr	r3, [r0, #0]
 801a5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5da:	4798      	blx	r3
 801a5dc:	4286      	cmp	r6, r0
 801a5de:	d1b8      	bne.n	801a552 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a5e0:	f7f7 f8a6 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a5e4:	6803      	ldr	r3, [r0, #0]
 801a5e6:	4606      	mov	r6, r0
 801a5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5ea:	9305      	str	r3, [sp, #20]
 801a5ec:	a807      	add	r0, sp, #28
 801a5ee:	f005 fcf3 	bl	801ffd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a5f2:	9b05      	ldr	r3, [sp, #20]
 801a5f4:	4601      	mov	r1, r0
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4798      	blx	r3
 801a5fa:	f080 0001 	eor.w	r0, r0, #1
 801a5fe:	b2c0      	uxtb	r0, r0
 801a600:	e7a8      	b.n	801a554 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a602:	bf00      	nop
 801a604:	2000b4b8 	.word	0x2000b4b8
 801a608:	2000b4ba 	.word	0x2000b4ba
 801a60c:	2000b4bc 	.word	0x2000b4bc
 801a610:	2000b4be 	.word	0x2000b4be
 801a614:	2000b4c0 	.word	0x2000b4c0

0801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a618:	b510      	push	{r4, lr}
 801a61a:	4b07      	ldr	r3, [pc, #28]	; (801a638 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a61c:	781b      	ldrb	r3, [r3, #0]
 801a61e:	4604      	mov	r4, r0
 801a620:	b13b      	cbz	r3, 801a632 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a622:	6803      	ldr	r3, [r0, #0]
 801a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a626:	4798      	blx	r3
 801a628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a62a:	4283      	cmp	r3, r0
 801a62c:	d101      	bne.n	801a632 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a62e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a630:	bd10      	pop	{r4, pc}
 801a632:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801a634:	e7fc      	b.n	801a630 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a636:	bf00      	nop
 801a638:	2000b4c2 	.word	0x2000b4c2

0801a63c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a640:	b08a      	sub	sp, #40	; 0x28
 801a642:	461d      	mov	r5, r3
 801a644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a648:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a64c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a650:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a654:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a658:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a65c:	2400      	movs	r4, #0
 801a65e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a662:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801a666:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a66a:	4690      	mov	r8, r2
 801a66c:	4607      	mov	r7, r0
 801a66e:	9404      	str	r4, [sp, #16]
 801a670:	f88d 4020 	strb.w	r4, [sp, #32]
 801a674:	f7ff ffd0 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a678:	fb06 8505 	mla	r5, r6, r5, r8
 801a67c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a680:	6878      	ldr	r0, [r7, #4]
 801a682:	9505      	str	r5, [sp, #20]
 801a684:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a688:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a68c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801a690:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a694:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a698:	6803      	ldr	r3, [r0, #0]
 801a69a:	a901      	add	r1, sp, #4
 801a69c:	685b      	ldr	r3, [r3, #4]
 801a69e:	4798      	blx	r3
 801a6a0:	b00a      	add	sp, #40	; 0x28
 801a6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6a6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a6a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6aa:	b08b      	sub	sp, #44	; 0x2c
 801a6ac:	2400      	movs	r4, #0
 801a6ae:	461d      	mov	r5, r3
 801a6b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a6b4:	4688      	mov	r8, r1
 801a6b6:	4691      	mov	r9, r2
 801a6b8:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801a6bc:	9404      	str	r4, [sp, #16]
 801a6be:	4607      	mov	r7, r0
 801a6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6c4:	f7ff ffa8 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a6c8:	fb06 9505 	mla	r5, r6, r5, r9
 801a6cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a6d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a6d4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a6d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	9505      	str	r5, [sp, #20]
 801a6e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a6e4:	f8ad 401c 	strh.w	r4, [sp, #28]
 801a6e8:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a6ec:	f8cd 8010 	str.w	r8, [sp, #16]
 801a6f0:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a6f4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a6f8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a6fc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a700:	6803      	ldr	r3, [r0, #0]
 801a702:	a901      	add	r1, sp, #4
 801a704:	685b      	ldr	r3, [r3, #4]
 801a706:	4798      	blx	r3
 801a708:	b00b      	add	sp, #44	; 0x2c
 801a70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a710 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a714:	b08a      	sub	sp, #40	; 0x28
 801a716:	4698      	mov	r8, r3
 801a718:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a71c:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801a720:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801a724:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801a728:	2300      	movs	r3, #0
 801a72a:	2d0b      	cmp	r5, #11
 801a72c:	4606      	mov	r6, r0
 801a72e:	9304      	str	r3, [sp, #16]
 801a730:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801a734:	d138      	bne.n	801a7a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 801a736:	2380      	movs	r3, #128	; 0x80
 801a738:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a73c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a740:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a744:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a748:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a74c:	f88d 0020 	strb.w	r0, [sp, #32]
 801a750:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a754:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a758:	4630      	mov	r0, r6
 801a75a:	9203      	str	r2, [sp, #12]
 801a75c:	f7ff ff5c 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a760:	2c0b      	cmp	r4, #11
 801a762:	bf98      	it	ls
 801a764:	4b1b      	ldrls	r3, [pc, #108]	; (801a7d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801a766:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a76a:	bf98      	it	ls
 801a76c:	5d19      	ldrbls	r1, [r3, r4]
 801a76e:	f8ad 701e 	strh.w	r7, [sp, #30]
 801a772:	bf88      	it	hi
 801a774:	2100      	movhi	r1, #0
 801a776:	fb02 8307 	mla	r3, r2, r7, r8
 801a77a:	10c9      	asrs	r1, r1, #3
 801a77c:	fb01 0003 	mla	r0, r1, r3, r0
 801a780:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801a784:	9005      	str	r0, [sp, #20]
 801a786:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a78a:	6870      	ldr	r0, [r6, #4]
 801a78c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801a790:	2300      	movs	r3, #0
 801a792:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a796:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a79a:	6803      	ldr	r3, [r0, #0]
 801a79c:	a901      	add	r1, sp, #4
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	4798      	blx	r3
 801a7a2:	b00a      	add	sp, #40	; 0x28
 801a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7a8:	2d02      	cmp	r5, #2
 801a7aa:	d109      	bne.n	801a7c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 801a7ac:	28ff      	cmp	r0, #255	; 0xff
 801a7ae:	d105      	bne.n	801a7bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 801a7b0:	f1bc 0f00 	cmp.w	ip, #0
 801a7b4:	bf14      	ite	ne
 801a7b6:	2340      	movne	r3, #64	; 0x40
 801a7b8:	2320      	moveq	r3, #32
 801a7ba:	e7bd      	b.n	801a738 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a7bc:	2340      	movs	r3, #64	; 0x40
 801a7be:	e7bb      	b.n	801a738 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a7c0:	28ff      	cmp	r0, #255	; 0xff
 801a7c2:	d105      	bne.n	801a7d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 801a7c4:	f1bc 0f00 	cmp.w	ip, #0
 801a7c8:	bf14      	ite	ne
 801a7ca:	2304      	movne	r3, #4
 801a7cc:	2301      	moveq	r3, #1
 801a7ce:	e7b3      	b.n	801a738 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a7d0:	2304      	movs	r3, #4
 801a7d2:	e7b1      	b.n	801a738 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a7d4:	0802ed90 	.word	0x0802ed90

0801a7d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7dc:	b08b      	sub	sp, #44	; 0x2c
 801a7de:	461d      	mov	r5, r3
 801a7e0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801a7e4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801a7e8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801a7ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a7f0:	bf14      	ite	ne
 801a7f2:	2308      	movne	r3, #8
 801a7f4:	2302      	moveq	r3, #2
 801a7f6:	2400      	movs	r4, #0
 801a7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7fc:	4688      	mov	r8, r1
 801a7fe:	4693      	mov	fp, r2
 801a800:	9404      	str	r4, [sp, #16]
 801a802:	4607      	mov	r7, r0
 801a804:	f7ff ff08 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a808:	2e0b      	cmp	r6, #11
 801a80a:	bf98      	it	ls
 801a80c:	4b15      	ldrls	r3, [pc, #84]	; (801a864 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801a80e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a812:	bf98      	it	ls
 801a814:	5d9c      	ldrbls	r4, [r3, r6]
 801a816:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a81a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a81e:	fb05 b50a 	mla	r5, r5, sl, fp
 801a822:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a826:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a82a:	10e4      	asrs	r4, r4, #3
 801a82c:	fb04 0405 	mla	r4, r4, r5, r0
 801a830:	2300      	movs	r3, #0
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	9405      	str	r4, [sp, #20]
 801a836:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a83a:	f8ad a01e 	strh.w	sl, [sp, #30]
 801a83e:	f8cd 8010 	str.w	r8, [sp, #16]
 801a842:	f88d 9020 	strb.w	r9, [sp, #32]
 801a846:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801a84a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a84e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801a852:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801a856:	6803      	ldr	r3, [r0, #0]
 801a858:	a901      	add	r1, sp, #4
 801a85a:	685b      	ldr	r3, [r3, #4]
 801a85c:	4798      	blx	r3
 801a85e:	b00b      	add	sp, #44	; 0x2c
 801a860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a864:	0802ed90 	.word	0x0802ed90

0801a868 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a86c:	461e      	mov	r6, r3
 801a86e:	4b0a      	ldr	r3, [pc, #40]	; (801a898 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801a870:	460f      	mov	r7, r1
 801a872:	881d      	ldrh	r5, [r3, #0]
 801a874:	4690      	mov	r8, r2
 801a876:	f7f6 ff5b 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a87a:	6803      	ldr	r3, [r0, #0]
 801a87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a87e:	4798      	blx	r3
 801a880:	280b      	cmp	r0, #11
 801a882:	bf9a      	itte	ls
 801a884:	4b05      	ldrls	r3, [pc, #20]	; (801a89c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a886:	5c1c      	ldrbls	r4, [r3, r0]
 801a888:	2400      	movhi	r4, #0
 801a88a:	fb08 7005 	mla	r0, r8, r5, r7
 801a88e:	10e4      	asrs	r4, r4, #3
 801a890:	fb04 6000 	mla	r0, r4, r0, r6
 801a894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a898:	2000b4be 	.word	0x2000b4be
 801a89c:	0802ed90 	.word	0x0802ed90

0801a8a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8a2:	b08b      	sub	sp, #44	; 0x2c
 801a8a4:	461f      	mov	r7, r3
 801a8a6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a8aa:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a8ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a8b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a8b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a8ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a8be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a8c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a8c6:	2500      	movs	r5, #0
 801a8c8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a8cc:	f88d 3020 	strb.w	r3, [sp, #32]
 801a8d0:	4604      	mov	r4, r0
 801a8d2:	4616      	mov	r6, r2
 801a8d4:	9504      	str	r5, [sp, #16]
 801a8d6:	f7ff fe9f 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a8da:	463a      	mov	r2, r7
 801a8dc:	4631      	mov	r1, r6
 801a8de:	4603      	mov	r3, r0
 801a8e0:	4620      	mov	r0, r4
 801a8e2:	f7ff ffc1 	bl	801a868 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a8e6:	4b0e      	ldr	r3, [pc, #56]	; (801a920 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a8e8:	9005      	str	r0, [sp, #20]
 801a8ea:	881b      	ldrh	r3, [r3, #0]
 801a8ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a8f0:	f7f6 ff1e 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a8f4:	6803      	ldr	r3, [r0, #0]
 801a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8f8:	4798      	blx	r3
 801a8fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a8fc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a900:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a904:	9304      	str	r3, [sp, #16]
 801a906:	6860      	ldr	r0, [r4, #4]
 801a908:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a90c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a910:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801a914:	6803      	ldr	r3, [r0, #0]
 801a916:	a901      	add	r1, sp, #4
 801a918:	685b      	ldr	r3, [r3, #4]
 801a91a:	4798      	blx	r3
 801a91c:	b00b      	add	sp, #44	; 0x2c
 801a91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a920:	2000b4be 	.word	0x2000b4be

0801a924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a924:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a926:	b08d      	sub	sp, #52	; 0x34
 801a928:	466b      	mov	r3, sp
 801a92a:	e883 0006 	stmia.w	r3, {r1, r2}
 801a92e:	2300      	movs	r3, #0
 801a930:	9306      	str	r3, [sp, #24]
 801a932:	6803      	ldr	r3, [r0, #0]
 801a934:	f8bd 6000 	ldrh.w	r6, [sp]
 801a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a93a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a93e:	2501      	movs	r5, #1
 801a940:	9503      	str	r5, [sp, #12]
 801a942:	4604      	mov	r4, r0
 801a944:	4798      	blx	r3
 801a946:	463a      	mov	r2, r7
 801a948:	4631      	mov	r1, r6
 801a94a:	4603      	mov	r3, r0
 801a94c:	4620      	mov	r0, r4
 801a94e:	f7ff ff8b 	bl	801a868 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a952:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a954:	9307      	str	r3, [sp, #28]
 801a956:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a95a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a95e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a962:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a966:	4b0f      	ldr	r3, [pc, #60]	; (801a9a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801a968:	9004      	str	r0, [sp, #16]
 801a96a:	881b      	ldrh	r3, [r3, #0]
 801a96c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a970:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a974:	f7f6 fedc 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801a978:	6803      	ldr	r3, [r0, #0]
 801a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a97c:	4798      	blx	r3
 801a97e:	23ff      	movs	r3, #255	; 0xff
 801a980:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a984:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a988:	6860      	ldr	r0, [r4, #4]
 801a98a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a98e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a992:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a996:	6803      	ldr	r3, [r0, #0]
 801a998:	a903      	add	r1, sp, #12
 801a99a:	685b      	ldr	r3, [r3, #4]
 801a99c:	4798      	blx	r3
 801a99e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a9a0:	b00d      	add	sp, #52	; 0x34
 801a9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9a4:	2000b4be 	.word	0x2000b4be

0801a9a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ac:	b08c      	sub	sp, #48	; 0x30
 801a9ae:	461e      	mov	r6, r3
 801a9b0:	466d      	mov	r5, sp
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	e885 0006 	stmia.w	r5, {r1, r2}
 801a9b8:	9306      	str	r3, [sp, #24]
 801a9ba:	6803      	ldr	r3, [r0, #0]
 801a9bc:	f8bd 7000 	ldrh.w	r7, [sp]
 801a9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9c2:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a9c6:	2501      	movs	r5, #1
 801a9c8:	9503      	str	r5, [sp, #12]
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	4798      	blx	r3
 801a9ce:	4642      	mov	r2, r8
 801a9d0:	4639      	mov	r1, r7
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	f7ff ff47 	bl	801a868 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a9da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a9de:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a9e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a9e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a9ea:	4b11      	ldr	r3, [pc, #68]	; (801aa30 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a9ec:	9004      	str	r0, [sp, #16]
 801a9ee:	881b      	ldrh	r3, [r3, #0]
 801a9f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a9f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a9f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a9fa:	9607      	str	r6, [sp, #28]
 801a9fc:	f7f6 fe98 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 801aa00:	6803      	ldr	r3, [r0, #0]
 801aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa04:	4798      	blx	r3
 801aa06:	23ff      	movs	r3, #255	; 0xff
 801aa08:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801aa0c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801aa10:	6860      	ldr	r0, [r4, #4]
 801aa12:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801aa16:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801aa1a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801aa1e:	6803      	ldr	r3, [r0, #0]
 801aa20:	a903      	add	r1, sp, #12
 801aa22:	685b      	ldr	r3, [r3, #4]
 801aa24:	4798      	blx	r3
 801aa26:	4630      	mov	r0, r6
 801aa28:	b00c      	add	sp, #48	; 0x30
 801aa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa2e:	bf00      	nop
 801aa30:	2000b4be 	.word	0x2000b4be

0801aa34 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa36:	b085      	sub	sp, #20
 801aa38:	ac02      	add	r4, sp, #8
 801aa3a:	e884 0006 	stmia.w	r4, {r1, r2}
 801aa3e:	4605      	mov	r5, r0
 801aa40:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801aa44:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801aa48:	f7ff fde6 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aa4c:	463a      	mov	r2, r7
 801aa4e:	4603      	mov	r3, r0
 801aa50:	4631      	mov	r1, r6
 801aa52:	4628      	mov	r0, r5
 801aa54:	f7ff ff08 	bl	801a868 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801aa58:	4a05      	ldr	r2, [pc, #20]	; (801aa70 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801aa5a:	682b      	ldr	r3, [r5, #0]
 801aa5c:	8812      	ldrh	r2, [r2, #0]
 801aa5e:	9200      	str	r2, [sp, #0]
 801aa60:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801aa62:	e894 0006 	ldmia.w	r4, {r1, r2}
 801aa66:	4603      	mov	r3, r0
 801aa68:	4628      	mov	r0, r5
 801aa6a:	47b0      	blx	r6
 801aa6c:	b005      	add	sp, #20
 801aa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa70:	2000b4be 	.word	0x2000b4be

0801aa74 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801aa74:	b570      	push	{r4, r5, r6, lr}
 801aa76:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801aa7a:	4604      	mov	r4, r0
 801aa7c:	b19b      	cbz	r3, 801aaa6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801aa7e:	2002      	movs	r0, #2
 801aa80:	f7fc fe56 	bl	8017730 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801aa84:	2300      	movs	r3, #0
 801aa86:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801aa8a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801aa8e:	6823      	ldr	r3, [r4, #0]
 801aa90:	4620      	mov	r0, r4
 801aa92:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801aa96:	f7ff fdbf 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801aa9a:	462b      	mov	r3, r5
 801aa9c:	4601      	mov	r1, r0
 801aa9e:	4620      	mov	r0, r4
 801aaa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aaa4:	4718      	bx	r3
 801aaa6:	bd70      	pop	{r4, r5, r6, pc}

0801aaa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801aaa8:	b538      	push	{r3, r4, r5, lr}
 801aaaa:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801aaae:	428b      	cmp	r3, r1
 801aab0:	4604      	mov	r4, r0
 801aab2:	460d      	mov	r5, r1
 801aab4:	d006      	beq.n	801aac4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801aab6:	6803      	ldr	r3, [r0, #0]
 801aab8:	b929      	cbnz	r1, 801aac6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801aaba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801aabe:	4798      	blx	r3
 801aac0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801aac4:	bd38      	pop	{r3, r4, r5, pc}
 801aac6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801aaca:	e7f8      	b.n	801aabe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801aacc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801aacc:	b510      	push	{r4, lr}
 801aace:	4b0d      	ldr	r3, [pc, #52]	; (801ab04 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801aad0:	781b      	ldrb	r3, [r3, #0]
 801aad2:	4604      	mov	r4, r0
 801aad4:	b95b      	cbnz	r3, 801aaee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aad6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801aada:	2b02      	cmp	r3, #2
 801aadc:	d007      	beq.n	801aaee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aade:	6840      	ldr	r0, [r0, #4]
 801aae0:	f000 f90e 	bl	801ad00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801aae4:	b118      	cbz	r0, 801aaee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801aae6:	6862      	ldr	r2, [r4, #4]
 801aae8:	7a53      	ldrb	r3, [r2, #9]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d0fc      	beq.n	801aae8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801aaee:	f7fd f8c1 	bl	8017c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	f7ff ffd7 	bl	801aaa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801aafa:	4620      	mov	r0, r4
 801aafc:	f7ff fd8c 	bl	801a618 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801ab00:	bd10      	pop	{r4, pc}
 801ab02:	bf00      	nop
 801ab04:	2000b4c2 	.word	0x2000b4c2

0801ab08 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801ab08:	4770      	bx	lr

0801ab0a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801ab0a:	2000      	movs	r0, #0
 801ab0c:	4770      	bx	lr

0801ab0e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801ab0e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801ab12:	1a13      	subs	r3, r2, r0
 801ab14:	4258      	negs	r0, r3
 801ab16:	4158      	adcs	r0, r3
 801ab18:	4770      	bx	lr

0801ab1a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801ab1a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801ab1e:	1a9b      	subs	r3, r3, r2
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	bfdc      	itt	le
 801ab24:	6882      	ldrle	r2, [r0, #8]
 801ab26:	189b      	addle	r3, r3, r2
 801ab28:	2b01      	cmp	r3, #1
 801ab2a:	bfcc      	ite	gt
 801ab2c:	2000      	movgt	r0, #0
 801ab2e:	2001      	movle	r0, #1
 801ab30:	4770      	bx	lr

0801ab32 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801ab32:	6902      	ldr	r2, [r0, #16]
 801ab34:	6843      	ldr	r3, [r0, #4]
 801ab36:	2024      	movs	r0, #36	; 0x24
 801ab38:	fb00 3002 	mla	r0, r0, r2, r3
 801ab3c:	4770      	bx	lr

0801ab3e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801ab3e:	6803      	ldr	r3, [r0, #0]
 801ab40:	691b      	ldr	r3, [r3, #16]
 801ab42:	4718      	bx	r3

0801ab44 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801ab44:	b570      	push	{r4, r5, r6, lr}
 801ab46:	2301      	movs	r3, #1
 801ab48:	7203      	strb	r3, [r0, #8]
 801ab4a:	4604      	mov	r4, r0
 801ab4c:	6840      	ldr	r0, [r0, #4]
 801ab4e:	6803      	ldr	r3, [r0, #0]
 801ab50:	699b      	ldr	r3, [r3, #24]
 801ab52:	4798      	blx	r3
 801ab54:	6803      	ldr	r3, [r0, #0]
 801ab56:	2b40      	cmp	r3, #64	; 0x40
 801ab58:	4605      	mov	r5, r0
 801ab5a:	d00c      	beq.n	801ab76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ab5c:	d810      	bhi.n	801ab80 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801ab5e:	2b04      	cmp	r3, #4
 801ab60:	d01d      	beq.n	801ab9e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801ab62:	d804      	bhi.n	801ab6e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d006      	beq.n	801ab76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ab68:	2b02      	cmp	r3, #2
 801ab6a:	d02c      	beq.n	801abc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801ab6c:	bd70      	pop	{r4, r5, r6, pc}
 801ab6e:	2b08      	cmp	r3, #8
 801ab70:	d01d      	beq.n	801abae <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801ab72:	2b20      	cmp	r3, #32
 801ab74:	d1fa      	bne.n	801ab6c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801ab76:	6823      	ldr	r3, [r4, #0]
 801ab78:	4620      	mov	r0, r4
 801ab7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab7c:	4798      	blx	r3
 801ab7e:	e013      	b.n	801aba8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801ab80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab84:	d0f7      	beq.n	801ab76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ab86:	d804      	bhi.n	801ab92 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801ab88:	2b80      	cmp	r3, #128	; 0x80
 801ab8a:	d0f4      	beq.n	801ab76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ab8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab90:	e7f0      	b.n	801ab74 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801ab92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab96:	d0ee      	beq.n	801ab76 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801ab98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ab9c:	e7e5      	b.n	801ab6a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801ab9e:	6823      	ldr	r3, [r4, #0]
 801aba0:	7f01      	ldrb	r1, [r0, #28]
 801aba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aba4:	4620      	mov	r0, r4
 801aba6:	4798      	blx	r3
 801aba8:	6823      	ldr	r3, [r4, #0]
 801abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abac:	e006      	b.n	801abbc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801abae:	6823      	ldr	r3, [r4, #0]
 801abb0:	7f01      	ldrb	r1, [r0, #28]
 801abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abb4:	4620      	mov	r0, r4
 801abb6:	4798      	blx	r3
 801abb8:	6823      	ldr	r3, [r4, #0]
 801abba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abbc:	4629      	mov	r1, r5
 801abbe:	4620      	mov	r0, r4
 801abc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abc4:	4718      	bx	r3
 801abc6:	6823      	ldr	r3, [r4, #0]
 801abc8:	4620      	mov	r0, r4
 801abca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801abcc:	4798      	blx	r3
 801abce:	e7f3      	b.n	801abb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801abd0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801abd0:	4770      	bx	lr

0801abd2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801abd2:	4770      	bx	lr

0801abd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801abd4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801abd8:	1ad2      	subs	r2, r2, r3
 801abda:	2a00      	cmp	r2, #0
 801abdc:	b510      	push	{r4, lr}
 801abde:	bfdc      	itt	le
 801abe0:	6884      	ldrle	r4, [r0, #8]
 801abe2:	1912      	addle	r2, r2, r4
 801abe4:	2a01      	cmp	r2, #1
 801abe6:	dd16      	ble.n	801ac16 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801abe8:	6842      	ldr	r2, [r0, #4]
 801abea:	2424      	movs	r4, #36	; 0x24
 801abec:	fb04 2303 	mla	r3, r4, r3, r2
 801abf0:	f101 0220 	add.w	r2, r1, #32
 801abf4:	f851 4b04 	ldr.w	r4, [r1], #4
 801abf8:	f843 4b04 	str.w	r4, [r3], #4
 801abfc:	4291      	cmp	r1, r2
 801abfe:	d1f9      	bne.n	801abf4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801ac00:	780a      	ldrb	r2, [r1, #0]
 801ac02:	701a      	strb	r2, [r3, #0]
 801ac04:	68c3      	ldr	r3, [r0, #12]
 801ac06:	6882      	ldr	r2, [r0, #8]
 801ac08:	f3bf 8f5b 	dmb	ish
 801ac0c:	3301      	adds	r3, #1
 801ac0e:	429a      	cmp	r2, r3
 801ac10:	bfd8      	it	le
 801ac12:	1a9b      	suble	r3, r3, r2
 801ac14:	60c3      	str	r3, [r0, #12]
 801ac16:	bd10      	pop	{r4, pc}

0801ac18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801ac18:	6903      	ldr	r3, [r0, #16]
 801ac1a:	6882      	ldr	r2, [r0, #8]
 801ac1c:	f3bf 8f5b 	dmb	ish
 801ac20:	3301      	adds	r3, #1
 801ac22:	429a      	cmp	r2, r3
 801ac24:	bfd8      	it	le
 801ac26:	1a9b      	suble	r3, r3, r2
 801ac28:	6103      	str	r3, [r0, #16]
 801ac2a:	4770      	bx	lr

0801ac2c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801ac2c:	b570      	push	{r4, r5, r6, lr}
 801ac2e:	4604      	mov	r4, r0
 801ac30:	460e      	mov	r6, r1
 801ac32:	6860      	ldr	r0, [r4, #4]
 801ac34:	6803      	ldr	r3, [r0, #0]
 801ac36:	685b      	ldr	r3, [r3, #4]
 801ac38:	4798      	blx	r3
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	d1f9      	bne.n	801ac32 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801ac3e:	4d0d      	ldr	r5, [pc, #52]	; (801ac74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801ac40:	6828      	ldr	r0, [r5, #0]
 801ac42:	6803      	ldr	r3, [r0, #0]
 801ac44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ac46:	4798      	blx	r3
 801ac48:	f7fd f82e 	bl	8017ca8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801ac4c:	6828      	ldr	r0, [r5, #0]
 801ac4e:	2101      	movs	r1, #1
 801ac50:	f7ff ff2a 	bl	801aaa8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801ac54:	6860      	ldr	r0, [r4, #4]
 801ac56:	6803      	ldr	r3, [r0, #0]
 801ac58:	4631      	mov	r1, r6
 801ac5a:	689b      	ldr	r3, [r3, #8]
 801ac5c:	4798      	blx	r3
 801ac5e:	6823      	ldr	r3, [r4, #0]
 801ac60:	4620      	mov	r0, r4
 801ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac64:	4798      	blx	r3
 801ac66:	6828      	ldr	r0, [r5, #0]
 801ac68:	6803      	ldr	r3, [r0, #0]
 801ac6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac70:	4718      	bx	r3
 801ac72:	bf00      	nop
 801ac74:	2000b4c4 	.word	0x2000b4c4

0801ac78 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801ac78:	b508      	push	{r3, lr}
 801ac7a:	f7fc fffb 	bl	8017c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801ac7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ac82:	f7fd b805 	b.w	8017c90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801ac86 <_ZN8touchgfx13DMA_Interface5startEv>:
 801ac86:	b510      	push	{r4, lr}
 801ac88:	4604      	mov	r4, r0
 801ac8a:	6840      	ldr	r0, [r0, #4]
 801ac8c:	6803      	ldr	r3, [r0, #0]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	4798      	blx	r3
 801ac92:	b948      	cbnz	r0, 801aca8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ac94:	7a63      	ldrb	r3, [r4, #9]
 801ac96:	b13b      	cbz	r3, 801aca8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ac98:	7a23      	ldrb	r3, [r4, #8]
 801ac9a:	b92b      	cbnz	r3, 801aca8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801ac9c:	6823      	ldr	r3, [r4, #0]
 801ac9e:	4620      	mov	r0, r4
 801aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aca6:	4718      	bx	r3
 801aca8:	bd10      	pop	{r4, pc}

0801acaa <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801acaa:	b570      	push	{r4, r5, r6, lr}
 801acac:	4604      	mov	r4, r0
 801acae:	6840      	ldr	r0, [r0, #4]
 801acb0:	6803      	ldr	r3, [r0, #0]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	4798      	blx	r3
 801acb6:	4605      	mov	r5, r0
 801acb8:	b930      	cbnz	r0, 801acc8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801acba:	7a23      	ldrb	r3, [r4, #8]
 801acbc:	b123      	cbz	r3, 801acc8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801acbe:	6860      	ldr	r0, [r4, #4]
 801acc0:	6803      	ldr	r3, [r0, #0]
 801acc2:	695b      	ldr	r3, [r3, #20]
 801acc4:	4798      	blx	r3
 801acc6:	7225      	strb	r5, [r4, #8]
 801acc8:	6860      	ldr	r0, [r4, #4]
 801acca:	6803      	ldr	r3, [r0, #0]
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	4798      	blx	r3
 801acd0:	b928      	cbnz	r0, 801acde <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801acd2:	6823      	ldr	r3, [r4, #0]
 801acd4:	4620      	mov	r0, r4
 801acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801acdc:	4718      	bx	r3
 801acde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ace2:	f7fc bfed 	b.w	8017cc0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801ace8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801ace8:	b510      	push	{r4, lr}
 801acea:	4c04      	ldr	r4, [pc, #16]	; (801acfc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801acec:	6082      	str	r2, [r0, #8]
 801acee:	2200      	movs	r2, #0
 801acf0:	e9c0 4100 	strd	r4, r1, [r0]
 801acf4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801acf8:	bd10      	pop	{r4, pc}
 801acfa:	bf00      	nop
 801acfc:	0802eecc 	.word	0x0802eecc

0801ad00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801ad00:	6840      	ldr	r0, [r0, #4]
 801ad02:	6803      	ldr	r3, [r0, #0]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	4718      	bx	r3

0801ad08 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801ad08:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801ad0c:	4770      	bx	lr

0801ad0e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801ad0e:	b510      	push	{r4, lr}
 801ad10:	4604      	mov	r4, r0
 801ad12:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ad14:	b150      	cbz	r0, 801ad2c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801ad16:	6803      	ldr	r3, [r0, #0]
 801ad18:	68db      	ldr	r3, [r3, #12]
 801ad1a:	4798      	blx	r3
 801ad1c:	b130      	cbz	r0, 801ad2c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801ad1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801ad20:	6803      	ldr	r3, [r0, #0]
 801ad22:	4621      	mov	r1, r4
 801ad24:	689b      	ldr	r3, [r3, #8]
 801ad26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad2a:	4718      	bx	r3
 801ad2c:	bd10      	pop	{r4, pc}

0801ad2e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801ad2e:	b570      	push	{r4, r5, r6, lr}
 801ad30:	790b      	ldrb	r3, [r1, #4]
 801ad32:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	bf0c      	ite	eq
 801ad3a:	2301      	moveq	r3, #1
 801ad3c:	2300      	movne	r3, #0
 801ad3e:	4604      	mov	r4, r0
 801ad40:	460e      	mov	r6, r1
 801ad42:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801ad46:	d109      	bne.n	801ad5c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801ad48:	b14d      	cbz	r5, 801ad5e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801ad4a:	7933      	ldrb	r3, [r6, #4]
 801ad4c:	2b01      	cmp	r3, #1
 801ad4e:	d10c      	bne.n	801ad6a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	4620      	mov	r0, r4
 801ad54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad5a:	4718      	bx	r3
 801ad5c:	b12d      	cbz	r5, 801ad6a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801ad5e:	6823      	ldr	r3, [r4, #0]
 801ad60:	4620      	mov	r0, r4
 801ad62:	695b      	ldr	r3, [r3, #20]
 801ad64:	4798      	blx	r3
 801ad66:	2d00      	cmp	r5, #0
 801ad68:	d1ef      	bne.n	801ad4a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801ad6a:	bd70      	pop	{r4, r5, r6, pc}

0801ad6c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801ad6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801ad70:	b133      	cbz	r3, 801ad80 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801ad72:	790b      	ldrb	r3, [r1, #4]
 801ad74:	2b01      	cmp	r3, #1
 801ad76:	bf01      	itttt	eq
 801ad78:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801ad7a:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801ad7c:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801ad7e:	8603      	strheq	r3, [r0, #48]	; 0x30
 801ad80:	f7ff bfd5 	b.w	801ad2e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801ad84 <_ZNK8touchgfx6Button17invalidateContentEv>:
 801ad84:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 801ad88:	b12a      	cbz	r2, 801ad96 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801ad8a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801ad8e:	b112      	cbz	r2, 801ad96 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801ad90:	6803      	ldr	r3, [r0, #0]
 801ad92:	695b      	ldr	r3, [r3, #20]
 801ad94:	4718      	bx	r3
 801ad96:	4770      	bx	lr

0801ad98 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801ad98:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 801ad9a:	b129      	cbz	r1, 801ada8 <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 801ad9c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 801ad9e:	429a      	cmp	r2, r3
 801ada0:	d007      	beq.n	801adb2 <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 801ada2:	8602      	strh	r2, [r0, #48]	; 0x30
 801ada4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ada6:	4770      	bx	lr
 801ada8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801adaa:	429a      	cmp	r2, r3
 801adac:	bf1c      	itt	ne
 801adae:	85c2      	strhne	r2, [r0, #46]	; 0x2e
 801adb0:	8603      	strhne	r3, [r0, #48]	; 0x30
 801adb2:	4770      	bx	lr

0801adb4 <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 801adb4:	880b      	ldrh	r3, [r1, #0]
 801adb6:	8643      	strh	r3, [r0, #50]	; 0x32
 801adb8:	4770      	bx	lr

0801adba <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 801adba:	b513      	push	{r0, r1, r4, lr}
 801adbc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801adc0:	4604      	mov	r4, r0
 801adc2:	b13b      	cbz	r3, 801add4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1a>
 801adc4:	f002 fb58 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801adc8:	4621      	mov	r1, r4
 801adca:	f002 fb81 	bl	801d4d0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801adce:	2300      	movs	r3, #0
 801add0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801add4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801add8:	b163      	cbz	r3, 801adf4 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3a>
 801adda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801addc:	f8ad 3004 	strh.w	r3, [sp, #4]
 801ade0:	a901      	add	r1, sp, #4
 801ade2:	4620      	mov	r0, r4
 801ade4:	f000 fdf4 	bl	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ade8:	6823      	ldr	r3, [r4, #0]
 801adea:	4620      	mov	r0, r4
 801adec:	695b      	ldr	r3, [r3, #20]
 801adee:	4798      	blx	r3
 801adf0:	b002      	add	sp, #8
 801adf2:	bd10      	pop	{r4, pc}
 801adf4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801adf6:	e7f1      	b.n	801addc <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x22>

0801adf8 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 801adf8:	880b      	ldrh	r3, [r1, #0]
 801adfa:	8603      	strh	r3, [r0, #48]	; 0x30
 801adfc:	f000 bde8 	b.w	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

0801ae00 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 801ae00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae02:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801ae04:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801ae08:	42bd      	cmp	r5, r7
 801ae0a:	4604      	mov	r4, r0
 801ae0c:	d019      	beq.n	801ae42 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 801ae0e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801ae10:	42be      	cmp	r6, r7
 801ae12:	d016      	beq.n	801ae42 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x42>
 801ae14:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801ae18:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
 801ae1c:	b199      	cbz	r1, 801ae46 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x46>
 801ae1e:	b142      	cbz	r2, 801ae32 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801ae20:	a902      	add	r1, sp, #8
 801ae22:	f821 6d04 	strh.w	r6, [r1, #-4]!
 801ae26:	f000 fdd3 	bl	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ae2a:	6823      	ldr	r3, [r4, #0]
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	695b      	ldr	r3, [r3, #20]
 801ae30:	4798      	blx	r3
 801ae32:	f002 fb21 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801ae36:	4621      	mov	r1, r4
 801ae38:	f002 fb24 	bl	801d484 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801ae3c:	2301      	movs	r3, #1
 801ae3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801ae42:	b003      	add	sp, #12
 801ae44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae46:	2a00      	cmp	r2, #0
 801ae48:	d0f3      	beq.n	801ae32 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 801ae4a:	a902      	add	r1, sp, #8
 801ae4c:	f821 5d04 	strh.w	r5, [r1, #-4]!
 801ae50:	e7e9      	b.n	801ae26 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

0801ae52 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 801ae52:	b510      	push	{r4, lr}
 801ae54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801ae58:	4604      	mov	r4, r0
 801ae5a:	b143      	cbz	r3, 801ae6e <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1c>
 801ae5c:	f002 fb0c 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801ae60:	4621      	mov	r1, r4
 801ae62:	f002 fb35 	bl	801d4d0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801ae66:	2300      	movs	r3, #0
 801ae68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801ae6c:	bd10      	pop	{r4, pc}
 801ae6e:	f002 fb03 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801ae72:	4621      	mov	r1, r4
 801ae74:	f002 fb06 	bl	801d484 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 801ae78:	2301      	movs	r3, #1
 801ae7a:	e7f5      	b.n	801ae68 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x16>

0801ae7c <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 801ae7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801ae82:	4604      	mov	r4, r0
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d041      	beq.n	801af0c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801ae88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ae8c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 801ae90:	3301      	adds	r3, #1
 801ae92:	b2db      	uxtb	r3, r3
 801ae94:	429a      	cmp	r2, r3
 801ae96:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801ae9a:	d137      	bne.n	801af0c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801aea2:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801aea4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 801aea6:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 801aeaa:	4299      	cmp	r1, r3
 801aeac:	d100      	bne.n	801aeb0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 801aeae:	b122      	cbz	r2, 801aeba <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 801aeb0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 801aeb2:	4299      	cmp	r1, r3
 801aeb4:	d12e      	bne.n	801af14 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x98>
 801aeb6:	2a00      	cmp	r2, #0
 801aeb8:	d033      	beq.n	801af22 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa6>
 801aeba:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
 801aebe:	b935      	cbnz	r5, 801aece <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x52>
 801aec0:	f002 fada 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801aec4:	4621      	mov	r1, r4
 801aec6:	f002 fb03 	bl	801d4d0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 801aeca:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 801aece:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801aed0:	b140      	cbz	r0, 801aee4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x68>
 801aed2:	6803      	ldr	r3, [r0, #0]
 801aed4:	68db      	ldr	r3, [r3, #12]
 801aed6:	4798      	blx	r3
 801aed8:	b120      	cbz	r0, 801aee4 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x68>
 801aeda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801aedc:	6803      	ldr	r3, [r0, #0]
 801aede:	4621      	mov	r1, r4
 801aee0:	689b      	ldr	r3, [r3, #8]
 801aee2:	4798      	blx	r3
 801aee4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801aee8:	b183      	cbz	r3, 801af0c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801aeea:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801aeee:	b16b      	cbz	r3, 801af0c <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x90>
 801aef0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801aef4:	b163      	cbz	r3, 801af10 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x94>
 801aef6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801aef8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801aefc:	a901      	add	r1, sp, #4
 801aefe:	4620      	mov	r0, r4
 801af00:	f000 fd66 	bl	801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	4620      	mov	r0, r4
 801af08:	695b      	ldr	r3, [r3, #20]
 801af0a:	4798      	blx	r3
 801af0c:	b003      	add	sp, #12
 801af0e:	bd30      	pop	{r4, r5, pc}
 801af10:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801af12:	e7f1      	b.n	801aef8 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7c>
 801af14:	b12a      	cbz	r2, 801af22 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa6>
 801af16:	3b01      	subs	r3, #1
 801af18:	a902      	add	r1, sp, #8
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801af20:	e7ed      	b.n	801aefe <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x82>
 801af22:	3301      	adds	r3, #1
 801af24:	e7f8      	b.n	801af18 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9c>

0801af26 <_ZNK8touchgfx5Image17invalidateContentEv>:
 801af26:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801af2a:	b12a      	cbz	r2, 801af38 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801af2c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801af30:	b112      	cbz	r2, 801af38 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801af32:	6803      	ldr	r3, [r0, #0]
 801af34:	695b      	ldr	r3, [r3, #20]
 801af36:	4718      	bx	r3
 801af38:	4770      	bx	lr

0801af3a <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 801af3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801af3c:	ac02      	add	r4, sp, #8
 801af3e:	6803      	ldr	r3, [r0, #0]
 801af40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801af42:	f824 1d04 	strh.w	r1, [r4, #-4]!
 801af46:	4605      	mov	r5, r0
 801af48:	4621      	mov	r1, r4
 801af4a:	4616      	mov	r6, r2
 801af4c:	4798      	blx	r3
 801af4e:	682b      	ldr	r3, [r5, #0]
 801af50:	4621      	mov	r1, r4
 801af52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af54:	f8ad 6004 	strh.w	r6, [sp, #4]
 801af58:	4628      	mov	r0, r5
 801af5a:	4798      	blx	r3
 801af5c:	b002      	add	sp, #8
 801af5e:	bd70      	pop	{r4, r5, r6, pc}

0801af60 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 801af60:	2300      	movs	r3, #0
 801af62:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 801af66:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 801af6a:	4770      	bx	lr

0801af6c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801af6c:	2000      	movs	r0, #0
 801af6e:	4770      	bx	lr

0801af70 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801af70:	4b07      	ldr	r3, [pc, #28]	; (801af90 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801af72:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801af74:	881b      	ldrh	r3, [r3, #0]
 801af76:	4293      	cmp	r3, r2
 801af78:	bf81      	itttt	hi
 801af7a:	4b06      	ldrhi	r3, [pc, #24]	; (801af94 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801af7c:	681b      	ldrhi	r3, [r3, #0]
 801af7e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801af82:	7858      	ldrbhi	r0, [r3, #1]
 801af84:	bf8c      	ite	hi
 801af86:	f000 0003 	andhi.w	r0, r0, #3
 801af8a:	2000      	movls	r0, #0
 801af8c:	4770      	bx	lr
 801af8e:	bf00      	nop
 801af90:	2000b518 	.word	0x2000b518
 801af94:	2000b514 	.word	0x2000b514

0801af98 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af9c:	4b10      	ldr	r3, [pc, #64]	; (801afe0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801af9e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801afa0:	881b      	ldrh	r3, [r3, #0]
 801afa2:	428b      	cmp	r3, r1
 801afa4:	4604      	mov	r4, r0
 801afa6:	d918      	bls.n	801afda <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801afa8:	6803      	ldr	r3, [r0, #0]
 801afaa:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801afac:	4b0d      	ldr	r3, [pc, #52]	; (801afe4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801afae:	6818      	ldr	r0, [r3, #0]
 801afb0:	f7fb fcda 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801afb4:	6823      	ldr	r3, [r4, #0]
 801afb6:	4606      	mov	r6, r0
 801afb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801afba:	4620      	mov	r0, r4
 801afbc:	4798      	blx	r3
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	4607      	mov	r7, r0
 801afc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801afc6:	4620      	mov	r0, r4
 801afc8:	4798      	blx	r3
 801afca:	463a      	mov	r2, r7
 801afcc:	4603      	mov	r3, r0
 801afce:	4631      	mov	r1, r6
 801afd0:	4620      	mov	r0, r4
 801afd2:	46ac      	mov	ip, r5
 801afd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afd8:	4760      	bx	ip
 801afda:	2000      	movs	r0, #0
 801afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afe0:	2000b518 	.word	0x2000b518
 801afe4:	2000b520 	.word	0x2000b520

0801afe8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801afe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801afec:	4b17      	ldr	r3, [pc, #92]	; (801b04c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801afee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801aff0:	881b      	ldrh	r3, [r3, #0]
 801aff2:	428b      	cmp	r3, r1
 801aff4:	4604      	mov	r4, r0
 801aff6:	d926      	bls.n	801b046 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801aff8:	4b15      	ldr	r3, [pc, #84]	; (801b050 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801b000:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801b004:	4b13      	ldr	r3, [pc, #76]	; (801b054 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801b006:	7855      	ldrb	r5, [r2, #1]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b00e:	6833      	ldr	r3, [r6, #0]
 801b010:	69df      	ldr	r7, [r3, #28]
 801b012:	4b11      	ldr	r3, [pc, #68]	; (801b058 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801b014:	6818      	ldr	r0, [r3, #0]
 801b016:	f7fb fca7 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b01a:	6823      	ldr	r3, [r4, #0]
 801b01c:	4680      	mov	r8, r0
 801b01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b020:	4620      	mov	r0, r4
 801b022:	4798      	blx	r3
 801b024:	6823      	ldr	r3, [r4, #0]
 801b026:	4681      	mov	r9, r0
 801b028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b02c:	4620      	mov	r0, r4
 801b02e:	4798      	blx	r3
 801b030:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801b034:	9000      	str	r0, [sp, #0]
 801b036:	464b      	mov	r3, r9
 801b038:	4642      	mov	r2, r8
 801b03a:	4629      	mov	r1, r5
 801b03c:	4630      	mov	r0, r6
 801b03e:	47b8      	blx	r7
 801b040:	b003      	add	sp, #12
 801b042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b046:	2000      	movs	r0, #0
 801b048:	e7fa      	b.n	801b040 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801b04a:	bf00      	nop
 801b04c:	2000b518 	.word	0x2000b518
 801b050:	2000b514 	.word	0x2000b514
 801b054:	2000b51c 	.word	0x2000b51c
 801b058:	2000b520 	.word	0x2000b520

0801b05c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801b05c:	b40e      	push	{r1, r2, r3}
 801b05e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b062:	4b2f      	ldr	r3, [pc, #188]	; (801b120 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801b064:	881a      	ldrh	r2, [r3, #0]
 801b066:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801b068:	429a      	cmp	r2, r3
 801b06a:	b09d      	sub	sp, #116	; 0x74
 801b06c:	4604      	mov	r4, r0
 801b06e:	d954      	bls.n	801b11a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801b070:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801b124 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801b074:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801b128 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801b078:	aa26      	add	r2, sp, #152	; 0x98
 801b07a:	9202      	str	r2, [sp, #8]
 801b07c:	f8d9 2000 	ldr.w	r2, [r9]
 801b080:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801b084:	f8d8 3000 	ldr.w	r3, [r8]
 801b088:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b08c:	682b      	ldr	r3, [r5, #0]
 801b08e:	4628      	mov	r0, r5
 801b090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b092:	4798      	blx	r3
 801b094:	b207      	sxth	r7, r0
 801b096:	4606      	mov	r6, r0
 801b098:	a803      	add	r0, sp, #12
 801b09a:	f003 fe0b 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801b09e:	682b      	ldr	r3, [r5, #0]
 801b0a0:	4628      	mov	r0, r5
 801b0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0a4:	4798      	blx	r3
 801b0a6:	682b      	ldr	r3, [r5, #0]
 801b0a8:	4682      	mov	sl, r0
 801b0aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b0ac:	4628      	mov	r0, r5
 801b0ae:	4798      	blx	r3
 801b0b0:	4653      	mov	r3, sl
 801b0b2:	9000      	str	r0, [sp, #0]
 801b0b4:	9a02      	ldr	r2, [sp, #8]
 801b0b6:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b0b8:	a803      	add	r0, sp, #12
 801b0ba:	f003 fe56 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b0be:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b0c0:	f8d9 3000 	ldr.w	r3, [r9]
 801b0c4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801b0c8:	8925      	ldrh	r5, [r4, #8]
 801b0ca:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801b0ce:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801b0d2:	eba5 050c 	sub.w	r5, r5, ip
 801b0d6:	784a      	ldrb	r2, [r1, #1]
 801b0d8:	f8d8 3000 	ldr.w	r3, [r8]
 801b0dc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801b0e0:	b22d      	sxth	r5, r5
 801b0e2:	9500      	str	r5, [sp, #0]
 801b0e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801b0e8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b0ec:	a803      	add	r0, sp, #12
 801b0ee:	f001 fcdd 	bl	801caac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801b0f2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801b0f6:	18b9      	adds	r1, r7, r2
 801b0f8:	2900      	cmp	r1, #0
 801b0fa:	b203      	sxth	r3, r0
 801b0fc:	dd0b      	ble.n	801b116 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801b0fe:	3b01      	subs	r3, #1
 801b100:	fb13 f302 	smulbb	r3, r3, r2
 801b104:	fb16 3300 	smlabb	r3, r6, r0, r3
 801b108:	b21f      	sxth	r7, r3
 801b10a:	4638      	mov	r0, r7
 801b10c:	b01d      	add	sp, #116	; 0x74
 801b10e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b112:	b003      	add	sp, #12
 801b114:	4770      	bx	lr
 801b116:	2b00      	cmp	r3, #0
 801b118:	dcf7      	bgt.n	801b10a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b11a:	2700      	movs	r7, #0
 801b11c:	e7f5      	b.n	801b10a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b11e:	bf00      	nop
 801b120:	2000b518 	.word	0x2000b518
 801b124:	2000b514 	.word	0x2000b514
 801b128:	2000b51c 	.word	0x2000b51c

0801b12c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b130:	4bbb      	ldr	r3, [pc, #748]	; (801b420 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 801b132:	460c      	mov	r4, r1
 801b134:	881b      	ldrh	r3, [r3, #0]
 801b136:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801b138:	428b      	cmp	r3, r1
 801b13a:	b0a9      	sub	sp, #164	; 0xa4
 801b13c:	4681      	mov	r9, r0
 801b13e:	d809      	bhi.n	801b154 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801b140:	2300      	movs	r3, #0
 801b142:	f04f 32ff 	mov.w	r2, #4294967295
 801b146:	e9c0 3200 	strd	r3, r2, [r0]
 801b14a:	6083      	str	r3, [r0, #8]
 801b14c:	4648      	mov	r0, r9
 801b14e:	b029      	add	sp, #164	; 0xa4
 801b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b154:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 801b428 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801b158:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 801b42c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 801b15c:	f8db 3000 	ldr.w	r3, [fp]
 801b160:	f8d8 0000 	ldr.w	r0, [r8]
 801b164:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801b168:	4bae      	ldr	r3, [pc, #696]	; (801b424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b170:	f7fb fbfa 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b174:	682b      	ldr	r3, [r5, #0]
 801b176:	4607      	mov	r7, r0
 801b178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b17a:	4628      	mov	r0, r5
 801b17c:	4798      	blx	r3
 801b17e:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801b180:	f8cd 800c 	str.w	r8, [sp, #12]
 801b184:	4430      	add	r0, r6
 801b186:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801b18a:	b283      	uxth	r3, r0
 801b18c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801b190:	9302      	str	r3, [sp, #8]
 801b192:	4650      	mov	r0, sl
 801b194:	2e00      	cmp	r6, #0
 801b196:	f040 8091 	bne.w	801b2bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 801b19a:	f003 fd8b 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801b19e:	682b      	ldr	r3, [r5, #0]
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1a4:	4798      	blx	r3
 801b1a6:	682b      	ldr	r3, [r5, #0]
 801b1a8:	9005      	str	r0, [sp, #20]
 801b1aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	4798      	blx	r3
 801b1b0:	6823      	ldr	r3, [r4, #0]
 801b1b2:	4680      	mov	r8, r0
 801b1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	4798      	blx	r3
 801b1ba:	6822      	ldr	r2, [r4, #0]
 801b1bc:	9004      	str	r0, [sp, #16]
 801b1be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b1c2:	4620      	mov	r0, r4
 801b1c4:	4790      	blx	r2
 801b1c6:	9905      	ldr	r1, [sp, #20]
 801b1c8:	9b04      	ldr	r3, [sp, #16]
 801b1ca:	9001      	str	r0, [sp, #4]
 801b1cc:	9300      	str	r3, [sp, #0]
 801b1ce:	460a      	mov	r2, r1
 801b1d0:	4643      	mov	r3, r8
 801b1d2:	4639      	mov	r1, r7
 801b1d4:	4650      	mov	r0, sl
 801b1d6:	f003 fddd 	bl	801ed94 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b1da:	4637      	mov	r7, r6
 801b1dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b1de:	f8db 3000 	ldr.w	r3, [fp]
 801b1e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	785b      	ldrb	r3, [r3, #1]
 801b1ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b1ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b1f2:	4650      	mov	r0, sl
 801b1f4:	f001 f9ac 	bl	801c550 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b1f8:	4287      	cmp	r7, r0
 801b1fa:	bfb8      	it	lt
 801b1fc:	b207      	sxthlt	r7, r0
 801b1fe:	3601      	adds	r6, #1
 801b200:	4650      	mov	r0, sl
 801b202:	b2b6      	uxth	r6, r6
 801b204:	f003 fd7d 	bl	801ed02 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801b208:	2800      	cmp	r0, #0
 801b20a:	d0e7      	beq.n	801b1dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 801b20c:	9b02      	ldr	r3, [sp, #8]
 801b20e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801b212:	fb13 f606 	smulbb	r6, r3, r6
 801b216:	eba6 0608 	sub.w	r6, r6, r8
 801b21a:	b2b6      	uxth	r6, r6
 801b21c:	fa0f f886 	sxth.w	r8, r6
 801b220:	f1b8 0f00 	cmp.w	r8, #0
 801b224:	dd06      	ble.n	801b234 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801b226:	682b      	ldr	r3, [r5, #0]
 801b228:	4628      	mov	r0, r5
 801b22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b22c:	4798      	blx	r3
 801b22e:	4430      	add	r0, r6
 801b230:	fa0f f880 	sxth.w	r8, r0
 801b234:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b238:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b23c:	6823      	ldr	r3, [r4, #0]
 801b23e:	bf08      	it	eq
 801b240:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 801b244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b246:	bf18      	it	ne
 801b248:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801b24c:	4620      	mov	r0, r4
 801b24e:	4798      	blx	r3
 801b250:	2801      	cmp	r0, #1
 801b252:	b2ba      	uxth	r2, r7
 801b254:	f000 80d1 	beq.w	801b3fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801b258:	2802      	cmp	r0, #2
 801b25a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b25e:	f000 80d2 	beq.w	801b406 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 801b262:	b21e      	sxth	r6, r3
 801b264:	7a29      	ldrb	r1, [r5, #8]
 801b266:	7a6d      	ldrb	r5, [r5, #9]
 801b268:	1a76      	subs	r6, r6, r1
 801b26a:	4429      	add	r1, r5
 801b26c:	440a      	add	r2, r1
 801b26e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801b272:	b2b3      	uxth	r3, r6
 801b274:	b292      	uxth	r2, r2
 801b276:	2902      	cmp	r1, #2
 801b278:	b21f      	sxth	r7, r3
 801b27a:	b216      	sxth	r6, r2
 801b27c:	f000 80c6 	beq.w	801b40c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801b280:	2903      	cmp	r1, #3
 801b282:	f000 80d5 	beq.w	801b430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801b286:	2901      	cmp	r1, #1
 801b288:	f040 80db 	bne.w	801b442 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801b28c:	8923      	ldrh	r3, [r4, #8]
 801b28e:	4632      	mov	r2, r6
 801b290:	eba3 0308 	sub.w	r3, r3, r8
 801b294:	4646      	mov	r6, r8
 801b296:	463d      	mov	r5, r7
 801b298:	4690      	mov	r8, r2
 801b29a:	b21f      	sxth	r7, r3
 801b29c:	9b03      	ldr	r3, [sp, #12]
 801b29e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b2a0:	6818      	ldr	r0, [r3, #0]
 801b2a2:	f7fb fb61 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b2a6:	f8a9 7000 	strh.w	r7, [r9]
 801b2aa:	f8a9 5002 	strh.w	r5, [r9, #2]
 801b2ae:	f8a9 6004 	strh.w	r6, [r9, #4]
 801b2b2:	f8a9 8006 	strh.w	r8, [r9, #6]
 801b2b6:	f8c9 0008 	str.w	r0, [r9, #8]
 801b2ba:	e747      	b.n	801b14c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801b2bc:	f003 fcfa 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801b2c0:	682b      	ldr	r3, [r5, #0]
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2c6:	4798      	blx	r3
 801b2c8:	682b      	ldr	r3, [r5, #0]
 801b2ca:	4606      	mov	r6, r0
 801b2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	4798      	blx	r3
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	4680      	mov	r8, r0
 801b2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b2d8:	4620      	mov	r0, r4
 801b2da:	4798      	blx	r3
 801b2dc:	6822      	ldr	r2, [r4, #0]
 801b2de:	9004      	str	r0, [sp, #16]
 801b2e0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b2e4:	4620      	mov	r0, r4
 801b2e6:	4790      	blx	r2
 801b2e8:	9b04      	ldr	r3, [sp, #16]
 801b2ea:	9001      	str	r0, [sp, #4]
 801b2ec:	4632      	mov	r2, r6
 801b2ee:	9300      	str	r3, [sp, #0]
 801b2f0:	4639      	mov	r1, r7
 801b2f2:	4643      	mov	r3, r8
 801b2f4:	4650      	mov	r0, sl
 801b2f6:	f003 fd4d 	bl	801ed94 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b2fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b2fe:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801b302:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b304:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801b308:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b30c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b310:	bf0a      	itet	eq
 801b312:	4642      	moveq	r2, r8
 801b314:	461a      	movne	r2, r3
 801b316:	4698      	moveq	r8, r3
 801b318:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b31c:	1ad2      	subs	r2, r2, r3
 801b31e:	f8db 3000 	ldr.w	r3, [fp]
 801b322:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b326:	7859      	ldrb	r1, [r3, #1]
 801b328:	f8cd a020 	str.w	sl, [sp, #32]
 801b32c:	2300      	movs	r3, #0
 801b32e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801b332:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b336:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b33a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801b33e:	950a      	str	r5, [sp, #40]	; 0x28
 801b340:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b344:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b348:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b34c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b350:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b354:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b358:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b35c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801b360:	b350      	cbz	r0, 801b3b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b362:	682b      	ldr	r3, [r5, #0]
 801b364:	4628      	mov	r0, r5
 801b366:	695b      	ldr	r3, [r3, #20]
 801b368:	4798      	blx	r3
 801b36a:	4607      	mov	r7, r0
 801b36c:	b320      	cbz	r0, 801b3b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b36e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b370:	6803      	ldr	r3, [r0, #0]
 801b372:	4639      	mov	r1, r7
 801b374:	68db      	ldr	r3, [r3, #12]
 801b376:	4798      	blx	r3
 801b378:	4606      	mov	r6, r0
 801b37a:	b1e8      	cbz	r0, 801b3b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b37c:	7b43      	ldrb	r3, [r0, #13]
 801b37e:	7a82      	ldrb	r2, [r0, #10]
 801b380:	005b      	lsls	r3, r3, #1
 801b382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b386:	4313      	orrs	r3, r2
 801b388:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b38c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801b390:	2b04      	cmp	r3, #4
 801b392:	d111      	bne.n	801b3b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b394:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b396:	6803      	ldr	r3, [r0, #0]
 801b398:	4632      	mov	r2, r6
 801b39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b39c:	4639      	mov	r1, r7
 801b39e:	4798      	blx	r3
 801b3a0:	7b73      	ldrb	r3, [r6, #13]
 801b3a2:	005b      	lsls	r3, r3, #1
 801b3a4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b3a8:	7ab3      	ldrb	r3, [r6, #10]
 801b3aa:	4313      	orrs	r3, r2
 801b3ac:	4418      	add	r0, r3
 801b3ae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b3b2:	4418      	add	r0, r3
 801b3b4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801b3b8:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801b3bc:	2600      	movs	r6, #0
 801b3be:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 801b3c2:	4637      	mov	r7, r6
 801b3c4:	45c3      	cmp	fp, r8
 801b3c6:	bfd4      	ite	le
 801b3c8:	2100      	movle	r1, #0
 801b3ca:	2101      	movgt	r1, #1
 801b3cc:	a807      	add	r0, sp, #28
 801b3ce:	f001 fa9e 	bl	801c90e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b3d2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b3d6:	429f      	cmp	r7, r3
 801b3d8:	bfb8      	it	lt
 801b3da:	b21f      	sxthlt	r7, r3
 801b3dc:	9b02      	ldr	r3, [sp, #8]
 801b3de:	eba8 0803 	sub.w	r8, r8, r3
 801b3e2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b3e6:	3601      	adds	r6, #1
 801b3e8:	b2b6      	uxth	r6, r6
 801b3ea:	fa0f f888 	sxth.w	r8, r8
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	f43f af0c 	beq.w	801b20c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b3f4:	45c2      	cmp	sl, r8
 801b3f6:	dbe5      	blt.n	801b3c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x298>
 801b3f8:	e708      	b.n	801b20c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b3fa:	1bf6      	subs	r6, r6, r7
 801b3fc:	2702      	movs	r7, #2
 801b3fe:	fb96 f6f7 	sdiv	r6, r6, r7
 801b402:	b236      	sxth	r6, r6
 801b404:	e72e      	b.n	801b264 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x138>
 801b406:	4413      	add	r3, r2
 801b408:	1af6      	subs	r6, r6, r3
 801b40a:	e7fa      	b.n	801b402 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 801b40c:	8925      	ldrh	r5, [r4, #8]
 801b40e:	1aad      	subs	r5, r5, r2
 801b410:	1aed      	subs	r5, r5, r3
 801b412:	b22f      	sxth	r7, r5
 801b414:	8965      	ldrh	r5, [r4, #10]
 801b416:	eba5 0508 	sub.w	r5, r5, r8
 801b41a:	b22d      	sxth	r5, r5
 801b41c:	e73e      	b.n	801b29c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b41e:	bf00      	nop
 801b420:	2000b518 	.word	0x2000b518
 801b424:	2000b51c 	.word	0x2000b51c
 801b428:	2000b514 	.word	0x2000b514
 801b42c:	2000b520 	.word	0x2000b520
 801b430:	8965      	ldrh	r5, [r4, #10]
 801b432:	1aad      	subs	r5, r5, r2
 801b434:	1aed      	subs	r5, r5, r3
 801b436:	4633      	mov	r3, r6
 801b438:	b22d      	sxth	r5, r5
 801b43a:	4646      	mov	r6, r8
 801b43c:	2700      	movs	r7, #0
 801b43e:	4698      	mov	r8, r3
 801b440:	e72c      	b.n	801b29c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b442:	2500      	movs	r5, #0
 801b444:	e72a      	b.n	801b29c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b446:	bf00      	nop

0801b448 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801b448:	b513      	push	{r0, r1, r4, lr}
 801b44a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801b44e:	4604      	mov	r4, r0
 801b450:	b1fb      	cbz	r3, 801b492 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b452:	4b16      	ldr	r3, [pc, #88]	; (801b4ac <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801b454:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b456:	881b      	ldrh	r3, [r3, #0]
 801b458:	428b      	cmp	r3, r1
 801b45a:	d91a      	bls.n	801b492 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b45c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b460:	2b00      	cmp	r3, #0
 801b462:	dd16      	ble.n	801b492 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b464:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	dd12      	ble.n	801b492 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b46c:	4b10      	ldr	r3, [pc, #64]	; (801b4b0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801b46e:	6818      	ldr	r0, [r3, #0]
 801b470:	f7fb fa7a 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b474:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b478:	6822      	ldr	r2, [r4, #0]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	db06      	blt.n	801b48c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b47e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b482:	2b00      	cmp	r3, #0
 801b484:	db02      	blt.n	801b48c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b488:	4298      	cmp	r0, r3
 801b48a:	d004      	beq.n	801b496 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801b48c:	6953      	ldr	r3, [r2, #20]
 801b48e:	4620      	mov	r0, r4
 801b490:	4798      	blx	r3
 801b492:	b002      	add	sp, #8
 801b494:	bd10      	pop	{r4, pc}
 801b496:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b49a:	c903      	ldmia	r1, {r0, r1}
 801b49c:	466b      	mov	r3, sp
 801b49e:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4a2:	6912      	ldr	r2, [r2, #16]
 801b4a4:	4619      	mov	r1, r3
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	4790      	blx	r2
 801b4aa:	e7f2      	b.n	801b492 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b4ac:	2000b518 	.word	0x2000b518
 801b4b0:	2000b520 	.word	0x2000b520

0801b4b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4b8:	4b44      	ldr	r3, [pc, #272]	; (801b5cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801b4ba:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b4bc:	881b      	ldrh	r3, [r3, #0]
 801b4be:	4293      	cmp	r3, r2
 801b4c0:	b08e      	sub	sp, #56	; 0x38
 801b4c2:	4604      	mov	r4, r0
 801b4c4:	d97e      	bls.n	801b5c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b4c6:	6808      	ldr	r0, [r1, #0]
 801b4c8:	4d41      	ldr	r5, [pc, #260]	; (801b5d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801b4ca:	6849      	ldr	r1, [r1, #4]
 801b4cc:	ab05      	add	r3, sp, #20
 801b4ce:	c303      	stmia	r3!, {r0, r1}
 801b4d0:	4611      	mov	r1, r2
 801b4d2:	6828      	ldr	r0, [r5, #0]
 801b4d4:	f7fb fa48 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b4d8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	db11      	blt.n	801b504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b4e0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	db0d      	blt.n	801b504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b4e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b4ea:	4298      	cmp	r0, r3
 801b4ec:	d10a      	bne.n	801b504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b4ee:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b4f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b4f6:	ab09      	add	r3, sp, #36	; 0x24
 801b4f8:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	a805      	add	r0, sp, #20
 801b500:	f7fe fc0a 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801b504:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	dd5b      	ble.n	801b5c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b50c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b510:	2b00      	cmp	r3, #0
 801b512:	dd57      	ble.n	801b5c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b514:	4f2f      	ldr	r7, [pc, #188]	; (801b5d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801b516:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b518:	683b      	ldr	r3, [r7, #0]
 801b51a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b51e:	4b2e      	ldr	r3, [pc, #184]	; (801b5d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b526:	2e00      	cmp	r6, #0
 801b528:	d04c      	beq.n	801b5c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b52a:	6823      	ldr	r3, [r4, #0]
 801b52c:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801b530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b532:	4620      	mov	r0, r4
 801b534:	4798      	blx	r3
 801b536:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b538:	683b      	ldr	r3, [r7, #0]
 801b53a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801b53e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801b542:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801b546:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b548:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b54c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801b550:	785b      	ldrb	r3, [r3, #1]
 801b552:	9609      	str	r6, [sp, #36]	; 0x24
 801b554:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b55c:	4b1f      	ldr	r3, [pc, #124]	; (801b5dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b55e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801b568:	910b      	str	r1, [sp, #44]	; 0x2c
 801b56a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801b56e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801b572:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801b576:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801b57a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b57e:	b10a      	cbz	r2, 801b584 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b580:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801b582:	b906      	cbnz	r6, 801b586 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b584:	689e      	ldr	r6, [r3, #8]
 801b586:	af07      	add	r7, sp, #28
 801b588:	4621      	mov	r1, r4
 801b58a:	4638      	mov	r0, r7
 801b58c:	f002 ffe2 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b590:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b592:	6828      	ldr	r0, [r5, #0]
 801b594:	f7fb f9e8 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b598:	6823      	ldr	r3, [r4, #0]
 801b59a:	4605      	mov	r5, r0
 801b59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b59e:	4620      	mov	r0, r4
 801b5a0:	4798      	blx	r3
 801b5a2:	6823      	ldr	r3, [r4, #0]
 801b5a4:	4680      	mov	r8, r0
 801b5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b5aa:	4620      	mov	r0, r4
 801b5ac:	4798      	blx	r3
 801b5ae:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801b5b2:	ab09      	add	r3, sp, #36	; 0x24
 801b5b4:	9300      	str	r3, [sp, #0]
 801b5b6:	9501      	str	r5, [sp, #4]
 801b5b8:	ab05      	add	r3, sp, #20
 801b5ba:	e897 0006 	ldmia.w	r7, {r1, r2}
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f7fb f963 	bl	801688a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b5c4:	b00e      	add	sp, #56	; 0x38
 801b5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ca:	bf00      	nop
 801b5cc:	2000b518 	.word	0x2000b518
 801b5d0:	2000b520 	.word	0x2000b520
 801b5d4:	2000b514 	.word	0x2000b514
 801b5d8:	2000b51c 	.word	0x2000b51c
 801b5dc:	2000b4c4 	.word	0x2000b4c4

0801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801b5e0:	b538      	push	{r3, r4, r5, lr}
 801b5e2:	4b0e      	ldr	r3, [pc, #56]	; (801b61c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801b5e4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b5e6:	881b      	ldrh	r3, [r3, #0]
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	d214      	bcs.n	801b618 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801b5ee:	6803      	ldr	r3, [r0, #0]
 801b5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b5f2:	4798      	blx	r3
 801b5f4:	6823      	ldr	r3, [r4, #0]
 801b5f6:	4605      	mov	r5, r0
 801b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	4798      	blx	r3
 801b5fe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b602:	b22d      	sxth	r5, r5
 801b604:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b608:	4601      	mov	r1, r0
 801b60a:	bf06      	itte	eq
 801b60c:	4602      	moveq	r2, r0
 801b60e:	4629      	moveq	r1, r5
 801b610:	462a      	movne	r2, r5
 801b612:	4620      	mov	r0, r4
 801b614:	f7f6 fe65 	bl	80122e2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b618:	bd38      	pop	{r3, r4, r5, pc}
 801b61a:	bf00      	nop
 801b61c:	2000b518 	.word	0x2000b518

0801b620 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801b620:	b530      	push	{r4, r5, lr}
 801b622:	888b      	ldrh	r3, [r1, #4]
 801b624:	8583      	strh	r3, [r0, #44]	; 0x2c
 801b626:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b62a:	b085      	sub	sp, #20
 801b62c:	4604      	mov	r4, r0
 801b62e:	b923      	cbnz	r3, 801b63a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b630:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b634:	b90b      	cbnz	r3, 801b63a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b636:	f7ff ffd3 	bl	801b5e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801b63a:	6823      	ldr	r3, [r4, #0]
 801b63c:	466d      	mov	r5, sp
 801b63e:	4621      	mov	r1, r4
 801b640:	4628      	mov	r0, r5
 801b642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b646:	4798      	blx	r3
 801b648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b64c:	343c      	adds	r4, #60	; 0x3c
 801b64e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b652:	b005      	add	sp, #20
 801b654:	bd30      	pop	{r4, r5, pc}

0801b656 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b656:	2300      	movs	r3, #0
 801b658:	8083      	strh	r3, [r0, #4]
 801b65a:	80c3      	strh	r3, [r0, #6]
 801b65c:	8003      	strh	r3, [r0, #0]
 801b65e:	8043      	strh	r3, [r0, #2]
 801b660:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b664:	2bff      	cmp	r3, #255	; 0xff
 801b666:	bf01      	itttt	eq
 801b668:	890b      	ldrheq	r3, [r1, #8]
 801b66a:	8083      	strheq	r3, [r0, #4]
 801b66c:	894b      	ldrheq	r3, [r1, #10]
 801b66e:	80c3      	strheq	r3, [r0, #6]
 801b670:	4770      	bx	lr
	...

0801b674 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b676:	4604      	mov	r4, r0
 801b678:	6808      	ldr	r0, [r1, #0]
 801b67a:	6849      	ldr	r1, [r1, #4]
 801b67c:	466b      	mov	r3, sp
 801b67e:	c303      	stmia	r3!, {r0, r1}
 801b680:	6823      	ldr	r3, [r4, #0]
 801b682:	4669      	mov	r1, sp
 801b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b686:	4620      	mov	r0, r4
 801b688:	4798      	blx	r3
 801b68a:	4b08      	ldr	r3, [pc, #32]	; (801b6ac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b692:	b10a      	cbz	r2, 801b698 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b694:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b696:	b900      	cbnz	r0, 801b69a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b698:	6898      	ldr	r0, [r3, #8]
 801b69a:	6803      	ldr	r3, [r0, #0]
 801b69c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b69e:	6a1d      	ldr	r5, [r3, #32]
 801b6a0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b6a4:	4669      	mov	r1, sp
 801b6a6:	47a8      	blx	r5
 801b6a8:	b003      	add	sp, #12
 801b6aa:	bd30      	pop	{r4, r5, pc}
 801b6ac:	2000b4c4 	.word	0x2000b4c4

0801b6b0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b6b0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b6b4:	b12a      	cbz	r2, 801b6c2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b6b6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b6ba:	b112      	cbz	r2, 801b6c2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b6bc:	6803      	ldr	r3, [r0, #0]
 801b6be:	695b      	ldr	r3, [r3, #20]
 801b6c0:	4718      	bx	r3
 801b6c2:	4770      	bx	lr

0801b6c4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801b6c4:	b570      	push	{r4, r5, r6, lr}
 801b6c6:	880b      	ldrh	r3, [r1, #0]
 801b6c8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801b6ca:	4605      	mov	r5, r0
 801b6cc:	8813      	ldrh	r3, [r2, #0]
 801b6ce:	f825 3f30 	strh.w	r3, [r5, #48]!
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	4628      	mov	r0, r5
 801b6d6:	f004 fb0f 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6da:	4606      	mov	r6, r0
 801b6dc:	4628      	mov	r0, r5
 801b6de:	f004 fb3f 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6e2:	6823      	ldr	r3, [r4, #0]
 801b6e4:	4605      	mov	r5, r0
 801b6e6:	4631      	mov	r1, r6
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6ec:	4798      	blx	r3
 801b6ee:	6823      	ldr	r3, [r4, #0]
 801b6f0:	4629      	mov	r1, r5
 801b6f2:	4620      	mov	r0, r4
 801b6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6fa:	4718      	bx	r3

0801b6fc <_ZNK8touchgfx6Button12getSolidRectEv>:
 801b6fc:	b510      	push	{r4, lr}
 801b6fe:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801b702:	2bff      	cmp	r3, #255	; 0xff
 801b704:	4604      	mov	r4, r0
 801b706:	d006      	beq.n	801b716 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801b708:	2300      	movs	r3, #0
 801b70a:	8003      	strh	r3, [r0, #0]
 801b70c:	8043      	strh	r3, [r0, #2]
 801b70e:	8083      	strh	r3, [r0, #4]
 801b710:	80c3      	strh	r3, [r0, #6]
 801b712:	4620      	mov	r0, r4
 801b714:	bd10      	pop	{r4, pc}
 801b716:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801b71a:	b11b      	cbz	r3, 801b724 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801b71c:	3130      	adds	r1, #48	; 0x30
 801b71e:	f004 fb53 	bl	801fdc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b722:	e7f6      	b.n	801b712 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801b724:	312e      	adds	r1, #46	; 0x2e
 801b726:	e7fa      	b.n	801b71e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

0801b728 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801b730:	b08a      	sub	sp, #40	; 0x28
 801b732:	4604      	mov	r4, r0
 801b734:	4688      	mov	r8, r1
 801b736:	2b00      	cmp	r3, #0
 801b738:	d066      	beq.n	801b808 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801b73a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801b73c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b740:	a805      	add	r0, sp, #20
 801b742:	f004 fad9 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b746:	4607      	mov	r7, r0
 801b748:	a805      	add	r0, sp, #20
 801b74a:	f004 fb09 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b74e:	f9b8 6000 	ldrsh.w	r6, [r8]
 801b752:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801b756:	4432      	add	r2, r6
 801b758:	b292      	uxth	r2, r2
 801b75a:	2300      	movs	r3, #0
 801b75c:	fa0f fc82 	sxth.w	ip, r2
 801b760:	459c      	cmp	ip, r3
 801b762:	9306      	str	r3, [sp, #24]
 801b764:	dd52      	ble.n	801b80c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b766:	42b7      	cmp	r7, r6
 801b768:	dd50      	ble.n	801b80c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b76a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801b76e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801b772:	442b      	add	r3, r5
 801b774:	b29b      	uxth	r3, r3
 801b776:	b219      	sxth	r1, r3
 801b778:	2900      	cmp	r1, #0
 801b77a:	dd47      	ble.n	801b80c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b77c:	42a8      	cmp	r0, r5
 801b77e:	dd45      	ble.n	801b80c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801b780:	4567      	cmp	r7, ip
 801b782:	bfb8      	it	lt
 801b784:	b2ba      	uxthlt	r2, r7
 801b786:	4288      	cmp	r0, r1
 801b788:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801b78c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b790:	bfb8      	it	lt
 801b792:	b283      	uxthlt	r3, r0
 801b794:	1b92      	subs	r2, r2, r6
 801b796:	1b5b      	subs	r3, r3, r5
 801b798:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b79c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b7a0:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b7a4:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b7a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d026      	beq.n	801b802 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7b4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	dd22      	ble.n	801b802 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7bc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	dd1e      	ble.n	801b802 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801b7ca:	6823      	ldr	r3, [r4, #0]
 801b7cc:	a908      	add	r1, sp, #32
 801b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	4798      	blx	r3
 801b7d4:	4b0f      	ldr	r3, [pc, #60]	; (801b814 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b7dc:	b10a      	cbz	r2, 801b7e2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801b7de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b7e0:	b900      	cbnz	r0, 801b7e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801b7e2:	6898      	ldr	r0, [r3, #8]
 801b7e4:	6801      	ldr	r1, [r0, #0]
 801b7e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b7ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b7ee:	2501      	movs	r5, #1
 801b7f0:	9502      	str	r5, [sp, #8]
 801b7f2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801b7f6:	9401      	str	r4, [sp, #4]
 801b7f8:	ac06      	add	r4, sp, #24
 801b7fa:	9400      	str	r4, [sp, #0]
 801b7fc:	688c      	ldr	r4, [r1, #8]
 801b7fe:	a905      	add	r1, sp, #20
 801b800:	47a0      	blx	r4
 801b802:	b00a      	add	sp, #40	; 0x28
 801b804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b808:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801b80a:	e797      	b.n	801b73c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801b80c:	2300      	movs	r3, #0
 801b80e:	9307      	str	r3, [sp, #28]
 801b810:	e7ca      	b.n	801b7a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801b812:	bf00      	nop
 801b814:	2000b4c4 	.word	0x2000b4c4

0801b818 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801b818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b81c:	4b2f      	ldr	r3, [pc, #188]	; (801b8dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801b81e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b820:	881b      	ldrh	r3, [r3, #0]
 801b822:	4293      	cmp	r3, r2
 801b824:	b08d      	sub	sp, #52	; 0x34
 801b826:	4604      	mov	r4, r0
 801b828:	460f      	mov	r7, r1
 801b82a:	d954      	bls.n	801b8d6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801b82c:	4b2c      	ldr	r3, [pc, #176]	; (801b8e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801b82e:	6819      	ldr	r1, [r3, #0]
 801b830:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 801b834:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801b838:	4a2a      	ldr	r2, [pc, #168]	; (801b8e4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801b83a:	6812      	ldr	r2, [r2, #0]
 801b83c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801b840:	2900      	cmp	r1, #0
 801b842:	d048      	beq.n	801b8d6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801b844:	785a      	ldrb	r2, [r3, #1]
 801b846:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801b84a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801b84e:	4b26      	ldr	r3, [pc, #152]	; (801b8e8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801b850:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801b854:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801b858:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801b85c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801b85e:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801b862:	9107      	str	r1, [sp, #28]
 801b864:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801b868:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b86c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	f88d 8020 	strb.w	r8, [sp, #32]
 801b876:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 801b87a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801b87e:	9609      	str	r6, [sp, #36]	; 0x24
 801b880:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801b884:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801b888:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 801b88c:	b10b      	cbz	r3, 801b892 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801b88e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801b890:	b905      	cbnz	r5, 801b894 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801b892:	6895      	ldr	r5, [r2, #8]
 801b894:	ae05      	add	r6, sp, #20
 801b896:	4621      	mov	r1, r4
 801b898:	4630      	mov	r0, r6
 801b89a:	f002 fe5b 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b89e:	4b13      	ldr	r3, [pc, #76]	; (801b8ec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801b8a0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b8a2:	6818      	ldr	r0, [r3, #0]
 801b8a4:	f7fb f860 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b8a8:	6823      	ldr	r3, [r4, #0]
 801b8aa:	4680      	mov	r8, r0
 801b8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	4798      	blx	r3
 801b8b2:	6823      	ldr	r3, [r4, #0]
 801b8b4:	4681      	mov	r9, r0
 801b8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8ba:	4620      	mov	r0, r4
 801b8bc:	4798      	blx	r3
 801b8be:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801b8c2:	ab07      	add	r3, sp, #28
 801b8c4:	9300      	str	r3, [sp, #0]
 801b8c6:	f8cd 8004 	str.w	r8, [sp, #4]
 801b8ca:	463b      	mov	r3, r7
 801b8cc:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	f7fa ffda 	bl	801688a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b8d6:	b00d      	add	sp, #52	; 0x34
 801b8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b8dc:	2000b518 	.word	0x2000b518
 801b8e0:	2000b514 	.word	0x2000b514
 801b8e4:	2000b51c 	.word	0x2000b51c
 801b8e8:	2000b4c4 	.word	0x2000b4c4
 801b8ec:	2000b520 	.word	0x2000b520

0801b8f0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 801b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801b8f8:	b0a0      	sub	sp, #128	; 0x80
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	b193      	cbz	r3, 801b924 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801b8fe:	4b30      	ldr	r3, [pc, #192]	; (801b9c0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 801b900:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b902:	881b      	ldrh	r3, [r3, #0]
 801b904:	428b      	cmp	r3, r1
 801b906:	d90d      	bls.n	801b924 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801b908:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	dd09      	ble.n	801b924 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801b910:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b914:	2b00      	cmp	r3, #0
 801b916:	dd05      	ble.n	801b924 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801b918:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801b91c:	b12b      	cbz	r3, 801b92a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801b91e:	6803      	ldr	r3, [r0, #0]
 801b920:	695b      	ldr	r3, [r3, #20]
 801b922:	4798      	blx	r3
 801b924:	b020      	add	sp, #128	; 0x80
 801b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b92a:	4b26      	ldr	r3, [pc, #152]	; (801b9c4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801b932:	4b25      	ldr	r3, [pc, #148]	; (801b9c8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b93a:	4b24      	ldr	r3, [pc, #144]	; (801b9cc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 801b93c:	6818      	ldr	r0, [r3, #0]
 801b93e:	f7fb f813 	bl	8016968 <_ZNK8touchgfx5Texts7getTextEt>
 801b942:	4606      	mov	r6, r0
 801b944:	a807      	add	r0, sp, #28
 801b946:	f003 f9b5 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801b94a:	682b      	ldr	r3, [r5, #0]
 801b94c:	4628      	mov	r0, r5
 801b94e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b950:	4798      	blx	r3
 801b952:	682b      	ldr	r3, [r5, #0]
 801b954:	4607      	mov	r7, r0
 801b956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b958:	4628      	mov	r0, r5
 801b95a:	4798      	blx	r3
 801b95c:	6823      	ldr	r3, [r4, #0]
 801b95e:	4605      	mov	r5, r0
 801b960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b962:	4620      	mov	r0, r4
 801b964:	4798      	blx	r3
 801b966:	6823      	ldr	r3, [r4, #0]
 801b968:	4680      	mov	r8, r0
 801b96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b96e:	4620      	mov	r0, r4
 801b970:	4798      	blx	r3
 801b972:	462b      	mov	r3, r5
 801b974:	e9cd 8000 	strd	r8, r0, [sp]
 801b978:	463a      	mov	r2, r7
 801b97a:	a807      	add	r0, sp, #28
 801b97c:	4631      	mov	r1, r6
 801b97e:	f003 fa09 	bl	801ed94 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b982:	a807      	add	r0, sp, #28
 801b984:	f003 fdc2 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b988:	280a      	cmp	r0, #10
 801b98a:	d103      	bne.n	801b994 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 801b98c:	6823      	ldr	r3, [r4, #0]
 801b98e:	4620      	mov	r0, r4
 801b990:	695b      	ldr	r3, [r3, #20]
 801b992:	e7c6      	b.n	801b922 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 801b994:	a807      	add	r0, sp, #28
 801b996:	f003 fdb9 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b99a:	2800      	cmp	r0, #0
 801b99c:	d1f4      	bne.n	801b988 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801b99e:	ad04      	add	r5, sp, #16
 801b9a0:	4621      	mov	r1, r4
 801b9a2:	4628      	mov	r0, r5
 801b9a4:	f7ff fbc2 	bl	801b12c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801b9a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b9ac:	6822      	ldr	r2, [r4, #0]
 801b9ae:	ab02      	add	r3, sp, #8
 801b9b0:	e883 0003 	stmia.w	r3, {r0, r1}
 801b9b4:	6912      	ldr	r2, [r2, #16]
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	4620      	mov	r0, r4
 801b9ba:	4790      	blx	r2
 801b9bc:	e7b2      	b.n	801b924 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801b9be:	bf00      	nop
 801b9c0:	2000b518 	.word	0x2000b518
 801b9c4:	2000b514 	.word	0x2000b514
 801b9c8:	2000b51c 	.word	0x2000b51c
 801b9cc:	2000b520 	.word	0x2000b520

0801b9d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801b9d0:	b570      	push	{r4, r5, r6, lr}
 801b9d2:	880b      	ldrh	r3, [r1, #0]
 801b9d4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	4608      	mov	r0, r1
 801b9da:	460d      	mov	r5, r1
 801b9dc:	f004 f98c 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b9e0:	4606      	mov	r6, r0
 801b9e2:	4628      	mov	r0, r5
 801b9e4:	f004 f9bc 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b9e8:	6823      	ldr	r3, [r4, #0]
 801b9ea:	4605      	mov	r5, r0
 801b9ec:	4631      	mov	r1, r6
 801b9ee:	4620      	mov	r0, r4
 801b9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b9f2:	4798      	blx	r3
 801b9f4:	6823      	ldr	r3, [r4, #0]
 801b9f6:	4629      	mov	r1, r5
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba00:	4718      	bx	r3

0801ba02 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801ba02:	b510      	push	{r4, lr}
 801ba04:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801ba08:	2bff      	cmp	r3, #255	; 0xff
 801ba0a:	4604      	mov	r4, r0
 801ba0c:	d006      	beq.n	801ba1c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801ba0e:	2300      	movs	r3, #0
 801ba10:	8003      	strh	r3, [r0, #0]
 801ba12:	8043      	strh	r3, [r0, #2]
 801ba14:	8083      	strh	r3, [r0, #4]
 801ba16:	80c3      	strh	r3, [r0, #6]
 801ba18:	4620      	mov	r0, r4
 801ba1a:	bd10      	pop	{r4, pc}
 801ba1c:	3126      	adds	r1, #38	; 0x26
 801ba1e:	f004 f9d3 	bl	801fdc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801ba22:	e7f9      	b.n	801ba18 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801ba24 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba28:	4604      	mov	r4, r0
 801ba2a:	b088      	sub	sp, #32
 801ba2c:	f854 3b26 	ldr.w	r3, [r4], #38
 801ba30:	2500      	movs	r5, #0
 801ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba34:	460f      	mov	r7, r1
 801ba36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ba3a:	a904      	add	r1, sp, #16
 801ba3c:	4606      	mov	r6, r0
 801ba3e:	4798      	blx	r3
 801ba40:	4620      	mov	r0, r4
 801ba42:	f004 f959 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ba46:	4680      	mov	r8, r0
 801ba48:	4620      	mov	r0, r4
 801ba4a:	f004 f989 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ba4e:	9506      	str	r5, [sp, #24]
 801ba50:	ad06      	add	r5, sp, #24
 801ba52:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ba56:	4639      	mov	r1, r7
 801ba58:	4628      	mov	r0, r5
 801ba5a:	f8ad 801c 	strh.w	r8, [sp, #28]
 801ba5e:	f7fe f95b 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801ba62:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	dd19      	ble.n	801ba9e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801ba6a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	dd15      	ble.n	801ba9e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801ba72:	4b0c      	ldr	r3, [pc, #48]	; (801baa4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801ba74:	681b      	ldr	r3, [r3, #0]
 801ba76:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ba7a:	b10a      	cbz	r2, 801ba80 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801ba7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ba7e:	b900      	cbnz	r0, 801ba82 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801ba80:	6898      	ldr	r0, [r3, #8]
 801ba82:	6801      	ldr	r1, [r0, #0]
 801ba84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ba88:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ba8c:	2701      	movs	r7, #1
 801ba8e:	9702      	str	r7, [sp, #8]
 801ba90:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801ba94:	e9cd 5600 	strd	r5, r6, [sp]
 801ba98:	688d      	ldr	r5, [r1, #8]
 801ba9a:	4621      	mov	r1, r4
 801ba9c:	47a8      	blx	r5
 801ba9e:	b008      	add	sp, #32
 801baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baa4:	2000b4c4 	.word	0x2000b4c4

0801baa8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801baa8:	b510      	push	{r4, lr}
 801baaa:	6803      	ldr	r3, [r0, #0]
 801baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801baae:	460c      	mov	r4, r1
 801bab0:	4798      	blx	r3
 801bab2:	1b03      	subs	r3, r0, r4
 801bab4:	4258      	negs	r0, r3
 801bab6:	4158      	adcs	r0, r3
 801bab8:	bd10      	pop	{r4, pc}
	...

0801babc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801babc:	4b01      	ldr	r3, [pc, #4]	; (801bac4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801babe:	6019      	str	r1, [r3, #0]
 801bac0:	4770      	bx	lr
 801bac2:	bf00      	nop
 801bac4:	2000b4cc 	.word	0x2000b4cc

0801bac8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801bac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bacc:	4696      	mov	lr, r2
 801bace:	4605      	mov	r5, r0
 801bad0:	4614      	mov	r4, r2
 801bad2:	460e      	mov	r6, r1
 801bad4:	461f      	mov	r7, r3
 801bad6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bada:	b097      	sub	sp, #92	; 0x5c
 801badc:	f10d 0c1c 	add.w	ip, sp, #28
 801bae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bae4:	f8de 3000 	ldr.w	r3, [lr]
 801bae8:	f8cc 3000 	str.w	r3, [ip]
 801baec:	f104 0e14 	add.w	lr, r4, #20
 801baf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801baf4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801baf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bafc:	f8de 3000 	ldr.w	r3, [lr]
 801bb00:	f8cc 3000 	str.w	r3, [ip]
 801bb04:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801bb08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb0c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801bb10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb14:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801bb18:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801bb1c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801bb20:	f8de 3000 	ldr.w	r3, [lr]
 801bb24:	f8cc 3000 	str.w	r3, [ip]
 801bb28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb2a:	682b      	ldr	r3, [r5, #0]
 801bb2c:	9201      	str	r2, [sp, #4]
 801bb2e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801bb32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb34:	9200      	str	r2, [sp, #0]
 801bb36:	f8cd 8008 	str.w	r8, [sp, #8]
 801bb3a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801bb3e:	aa07      	add	r2, sp, #28
 801bb40:	463b      	mov	r3, r7
 801bb42:	4631      	mov	r1, r6
 801bb44:	4628      	mov	r0, r5
 801bb46:	47d8      	blx	fp
 801bb48:	46a6      	mov	lr, r4
 801bb4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb4e:	f10d 0c1c 	add.w	ip, sp, #28
 801bb52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb56:	f8de 3000 	ldr.w	r3, [lr]
 801bb5a:	f8cc 3000 	str.w	r3, [ip]
 801bb5e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801bb62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb66:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801bb6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb6e:	343c      	adds	r4, #60	; 0x3c
 801bb70:	f8de 3000 	ldr.w	r3, [lr]
 801bb74:	f8cc 3000 	str.w	r3, [ip]
 801bb78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bb7a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801bb7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb82:	6823      	ldr	r3, [r4, #0]
 801bb84:	f8cc 3000 	str.w	r3, [ip]
 801bb88:	682b      	ldr	r3, [r5, #0]
 801bb8a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801bb8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bb90:	9201      	str	r2, [sp, #4]
 801bb92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bb94:	9200      	str	r2, [sp, #0]
 801bb96:	f8cd 8008 	str.w	r8, [sp, #8]
 801bb9a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801bb9c:	aa07      	add	r2, sp, #28
 801bb9e:	463b      	mov	r3, r7
 801bba0:	4631      	mov	r1, r6
 801bba2:	4628      	mov	r0, r5
 801bba4:	47a0      	blx	r4
 801bba6:	b017      	add	sp, #92	; 0x5c
 801bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbac <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bbac:	2000      	movs	r0, #0
 801bbae:	4770      	bx	lr

0801bbb0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801bbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbb4:	b08d      	sub	sp, #52	; 0x34
 801bbb6:	4688      	mov	r8, r1
 801bbb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801bbba:	f8d3 c000 	ldr.w	ip, [r3]
 801bbbe:	680f      	ldr	r7, [r1, #0]
 801bbc0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801bbc4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801bbc8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801bbcc:	edd3 6a07 	vldr	s13, [r3, #28]
 801bbd0:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bbd2:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801bbd6:	f9b1 9000 	ldrsh.w	r9, [r1]
 801bbda:	f9ba 1000 	ldrsh.w	r1, [sl]
 801bbde:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801bbe2:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801bbe6:	eba7 070c 	sub.w	r7, r7, ip
 801bbea:	42bc      	cmp	r4, r7
 801bbec:	bfa8      	it	ge
 801bbee:	463c      	movge	r4, r7
 801bbf0:	ee07 4a90 	vmov	s15, r4
 801bbf4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801bbf8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801bbfc:	ee25 4a04 	vmul.f32	s8, s10, s8
 801bc00:	ee65 4a24 	vmul.f32	s9, s10, s9
 801bc04:	ee25 5a27 	vmul.f32	s10, s10, s15
 801bc08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bc0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801bc10:	eb09 0e0c 	add.w	lr, r9, ip
 801bc14:	4571      	cmp	r1, lr
 801bc16:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801bc1a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801bc1e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801bc22:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bc26:	ee22 2a07 	vmul.f32	s4, s4, s14
 801bc2a:	f340 808d 	ble.w	801bd48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801bc2e:	eba1 060e 	sub.w	r6, r1, lr
 801bc32:	fb96 f5f4 	sdiv	r5, r6, r4
 801bc36:	ee07 5a10 	vmov	s14, r5
 801bc3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bc3e:	2d00      	cmp	r5, #0
 801bc40:	fb04 6615 	mls	r6, r4, r5, r6
 801bc44:	eea7 0a04 	vfma.f32	s0, s14, s8
 801bc48:	eee7 0a24 	vfma.f32	s1, s14, s9
 801bc4c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801bc50:	dd13      	ble.n	801bc7a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801bc52:	ee70 6a44 	vsub.f32	s13, s0, s8
 801bc56:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801bc5a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801bc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc62:	bf18      	it	ne
 801bc64:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801bc68:	ee31 2a45 	vsub.f32	s4, s2, s10
 801bc6c:	bf08      	it	eq
 801bc6e:	eeb0 7a67 	vmoveq.f32	s14, s15
 801bc72:	ee61 1a87 	vmul.f32	s3, s3, s14
 801bc76:	ee22 2a07 	vmul.f32	s4, s4, s14
 801bc7a:	fb05 f204 	mul.w	r2, r5, r4
 801bc7e:	1abf      	subs	r7, r7, r2
 801bc80:	4494      	add	ip, r2
 801bc82:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801bc86:	4411      	add	r1, r2
 801bc88:	eb09 020c 	add.w	r2, r9, ip
 801bc8c:	443a      	add	r2, r7
 801bc8e:	b209      	sxth	r1, r1
 801bc90:	428a      	cmp	r2, r1
 801bc92:	bfc4      	itt	gt
 801bc94:	eba1 0209 	subgt.w	r2, r1, r9
 801bc98:	eba2 070c 	subgt.w	r7, r2, ip
 801bc9c:	2f00      	cmp	r7, #0
 801bc9e:	dd50      	ble.n	801bd42 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801bca0:	fb97 f1f4 	sdiv	r1, r7, r4
 801bca4:	fb04 7211 	mls	r2, r4, r1, r7
 801bca8:	b90a      	cbnz	r2, 801bcae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801bcaa:	3901      	subs	r1, #1
 801bcac:	4622      	mov	r2, r4
 801bcae:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801bcb2:	6840      	ldr	r0, [r0, #4]
 801bcb4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bcb6:	f8d0 a000 	ldr.w	sl, [r0]
 801bcba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bcbc:	9008      	str	r0, [sp, #32]
 801bcbe:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801bcc2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801bcc4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801bcc8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801bccc:	695b      	ldr	r3, [r3, #20]
 801bcce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bcd0:	445b      	add	r3, fp
 801bcd2:	eef0 6a42 	vmov.f32	s13, s4
 801bcd6:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801bcda:	ee21 3a23 	vmul.f32	s6, s2, s7
 801bcde:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801bce2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bce6:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bcea:	9307      	str	r3, [sp, #28]
 801bcec:	ee17 7a90 	vmov	r7, s15
 801bcf0:	ee73 7a42 	vsub.f32	s15, s6, s4
 801bcf4:	eeb0 7a61 	vmov.f32	s14, s3
 801bcf8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801bcfc:	ee16 3a90 	vmov	r3, s13
 801bd00:	fb97 f7f4 	sdiv	r7, r7, r4
 801bd04:	ee17 ca90 	vmov	ip, s15
 801bd08:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801bd0c:	fb9c fcf4 	sdiv	ip, ip, r4
 801bd10:	fb0c 3306 	mla	r3, ip, r6, r3
 801bd14:	9302      	str	r3, [sp, #8]
 801bd16:	ee17 3a10 	vmov	r3, s14
 801bd1a:	44b6      	add	lr, r6
 801bd1c:	fb04 e505 	mla	r5, r4, r5, lr
 801bd20:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801bd24:	fb07 3706 	mla	r7, r7, r6, r3
 801bd28:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801bd2c:	e9cd 4700 	strd	r4, r7, [sp]
 801bd30:	2900      	cmp	r1, #0
 801bd32:	bfcc      	ite	gt
 801bd34:	46a1      	movgt	r9, r4
 801bd36:	4691      	movle	r9, r2
 801bd38:	eba9 0306 	sub.w	r3, r9, r6
 801bd3c:	f8da 4008 	ldr.w	r4, [sl, #8]
 801bd40:	47a0      	blx	r4
 801bd42:	b00d      	add	sp, #52	; 0x34
 801bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd48:	2500      	movs	r5, #0
 801bd4a:	462e      	mov	r6, r5
 801bd4c:	e799      	b.n	801bc82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801bd50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd54:	b0db      	sub	sp, #364	; 0x16c
 801bd56:	461d      	mov	r5, r3
 801bd58:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801bd5c:	930a      	str	r3, [sp, #40]	; 0x28
 801bd5e:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801bd62:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd64:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801bd68:	9310      	str	r3, [sp, #64]	; 0x40
 801bd6a:	6803      	ldr	r3, [r0, #0]
 801bd6c:	910f      	str	r1, [sp, #60]	; 0x3c
 801bd6e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801bd70:	9009      	str	r0, [sp, #36]	; 0x24
 801bd72:	4614      	mov	r4, r2
 801bd74:	4629      	mov	r1, r5
 801bd76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bd7a:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801bd7e:	47b8      	blx	r7
 801bd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd82:	6058      	str	r0, [r3, #4]
 801bd84:	2800      	cmp	r0, #0
 801bd86:	f000 83a1 	beq.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bd8a:	682b      	ldr	r3, [r5, #0]
 801bd8c:	9314      	str	r3, [sp, #80]	; 0x50
 801bd8e:	686b      	ldr	r3, [r5, #4]
 801bd90:	9315      	str	r3, [sp, #84]	; 0x54
 801bd92:	4bc4      	ldr	r3, [pc, #784]	; (801c0a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801bd94:	ed94 7a02 	vldr	s14, [r4, #8]
 801bd98:	7819      	ldrb	r1, [r3, #0]
 801bd9a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801bd9e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801bda2:	2900      	cmp	r1, #0
 801bda4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bda8:	bf16      	itet	ne
 801bdaa:	4619      	movne	r1, r3
 801bdac:	4611      	moveq	r1, r2
 801bdae:	4613      	movne	r3, r2
 801bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdb4:	9116      	str	r1, [sp, #88]	; 0x58
 801bdb6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801bdba:	f240 8387 	bls.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdbe:	ed94 7a07 	vldr	s14, [r4, #28]
 801bdc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdca:	f240 837f 	bls.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdce:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801bdd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdda:	f240 8377 	bls.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdde:	6822      	ldr	r2, [r4, #0]
 801bde0:	4bb1      	ldr	r3, [pc, #708]	; (801c0a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801bde2:	429a      	cmp	r2, r3
 801bde4:	f2c0 8372 	blt.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bde8:	49b0      	ldr	r1, [pc, #704]	; (801c0ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801bdea:	6963      	ldr	r3, [r4, #20]
 801bdec:	428a      	cmp	r2, r1
 801bdee:	f300 836d 	bgt.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801bdf2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801bdf6:	48ae      	ldr	r0, [pc, #696]	; (801c0b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801bdf8:	33ff      	adds	r3, #255	; 0xff
 801bdfa:	4283      	cmp	r3, r0
 801bdfc:	f200 8366 	bhi.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801be02:	4dac      	ldr	r5, [pc, #688]	; (801c0b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801be04:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801be08:	33ff      	adds	r3, #255	; 0xff
 801be0a:	42ab      	cmp	r3, r5
 801be0c:	f200 835e 	bhi.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be10:	6862      	ldr	r2, [r4, #4]
 801be12:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801be16:	33ff      	adds	r3, #255	; 0xff
 801be18:	4283      	cmp	r3, r0
 801be1a:	f200 8357 	bhi.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be1e:	69a1      	ldr	r1, [r4, #24]
 801be20:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801be24:	33ff      	adds	r3, #255	; 0xff
 801be26:	4283      	cmp	r3, r0
 801be28:	f200 8350 	bhi.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801be2e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801be32:	30ff      	adds	r0, #255	; 0xff
 801be34:	42a8      	cmp	r0, r5
 801be36:	f200 8349 	bhi.w	801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801be3a:	428a      	cmp	r2, r1
 801be3c:	f280 8110 	bge.w	801c060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801be40:	429a      	cmp	r2, r3
 801be42:	f300 8119 	bgt.w	801c078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801be46:	4299      	cmp	r1, r3
 801be48:	f280 811d 	bge.w	801c086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801be4c:	2502      	movs	r5, #2
 801be4e:	2701      	movs	r7, #1
 801be50:	46a9      	mov	r9, r5
 801be52:	46b8      	mov	r8, r7
 801be54:	f04f 0a00 	mov.w	sl, #0
 801be58:	4621      	mov	r1, r4
 801be5a:	a849      	add	r0, sp, #292	; 0x124
 801be5c:	f003 fc72 	bl	801f744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801be60:	4622      	mov	r2, r4
 801be62:	4653      	mov	r3, sl
 801be64:	a949      	add	r1, sp, #292	; 0x124
 801be66:	f8cd 9000 	str.w	r9, [sp]
 801be6a:	a819      	add	r0, sp, #100	; 0x64
 801be6c:	f003 fd9a 	bl	801f9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be70:	4622      	mov	r2, r4
 801be72:	4653      	mov	r3, sl
 801be74:	a949      	add	r1, sp, #292	; 0x124
 801be76:	f8cd 8000 	str.w	r8, [sp]
 801be7a:	a829      	add	r0, sp, #164	; 0xa4
 801be7c:	f003 fd92 	bl	801f9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be80:	4643      	mov	r3, r8
 801be82:	4622      	mov	r2, r4
 801be84:	a949      	add	r1, sp, #292	; 0x124
 801be86:	f8cd 9000 	str.w	r9, [sp]
 801be8a:	a839      	add	r0, sp, #228	; 0xe4
 801be8c:	f003 fd8a 	bl	801f9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801be90:	42af      	cmp	r7, r5
 801be92:	bfb5      	itete	lt
 801be94:	2300      	movlt	r3, #0
 801be96:	2301      	movge	r3, #1
 801be98:	930e      	strlt	r3, [sp, #56]	; 0x38
 801be9a:	930e      	strge	r3, [sp, #56]	; 0x38
 801be9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bea2:	af12      	add	r7, sp, #72	; 0x48
 801bea4:	bfb9      	ittee	lt
 801bea6:	ad29      	addlt	r5, sp, #164	; 0xa4
 801bea8:	ac19      	addlt	r4, sp, #100	; 0x64
 801beaa:	ad19      	addge	r5, sp, #100	; 0x64
 801beac:	ac29      	addge	r4, sp, #164	; 0xa4
 801beae:	e887 0003 	stmia.w	r7, {r0, r1}
 801beb2:	b928      	cbnz	r0, 801bec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801beb4:	4b80      	ldr	r3, [pc, #512]	; (801c0b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801beb6:	6818      	ldr	r0, [r3, #0]
 801beb8:	6803      	ldr	r3, [r0, #0]
 801beba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bebc:	4798      	blx	r3
 801bebe:	6038      	str	r0, [r7, #0]
 801bec0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bec2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801bec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801beca:	930c      	str	r3, [sp, #48]	; 0x30
 801becc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bece:	6963      	ldr	r3, [r4, #20]
 801bed0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801bed2:	440b      	add	r3, r1
 801bed4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801bed8:	4408      	add	r0, r1
 801beda:	b200      	sxth	r0, r0
 801bedc:	4283      	cmp	r3, r0
 801bede:	900d      	str	r0, [sp, #52]	; 0x34
 801bee0:	f280 80dd 	bge.w	801c09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801bee4:	428b      	cmp	r3, r1
 801bee6:	da08      	bge.n	801befa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801bee8:	2a00      	cmp	r2, #0
 801beea:	dd06      	ble.n	801befa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801beec:	1acb      	subs	r3, r1, r3
 801beee:	429a      	cmp	r2, r3
 801bef0:	f2c0 80e4 	blt.w	801c0bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	f300 80e2 	bgt.w	801c0be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801befa:	6967      	ldr	r7, [r4, #20]
 801befc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801befe:	443b      	add	r3, r7
 801bf00:	461f      	mov	r7, r3
 801bf02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf04:	1bdf      	subs	r7, r3, r7
 801bf06:	4297      	cmp	r7, r2
 801bf08:	bfa8      	it	ge
 801bf0a:	4617      	movge	r7, r2
 801bf0c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801bf10:	2f00      	cmp	r7, #0
 801bf12:	f340 8166 	ble.w	801c1e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801bf16:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801bf18:	6829      	ldr	r1, [r5, #0]
 801bf1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf1e:	f9bb 3000 	ldrsh.w	r3, [fp]
 801bf22:	6820      	ldr	r0, [r4, #0]
 801bf24:	4411      	add	r1, r2
 801bf26:	4299      	cmp	r1, r3
 801bf28:	dd1a      	ble.n	801bf60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bf2a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801bf2e:	440b      	add	r3, r1
 801bf30:	4402      	add	r2, r0
 801bf32:	b21b      	sxth	r3, r3
 801bf34:	429a      	cmp	r2, r3
 801bf36:	dc13      	bgt.n	801bf60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	9206      	str	r2, [sp, #24]
 801bf40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bf42:	9205      	str	r2, [sp, #20]
 801bf44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf46:	9500      	str	r5, [sp, #0]
 801bf48:	e9cd b203 	strd	fp, r2, [sp, #12]
 801bf4c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801bf4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf50:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801bf54:	a912      	add	r1, sp, #72	; 0x48
 801bf56:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801bf5a:	aa49      	add	r2, sp, #292	; 0x124
 801bf5c:	4623      	mov	r3, r4
 801bf5e:	47c8      	blx	r9
 801bf60:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bf64:	441a      	add	r2, r3
 801bf66:	6963      	ldr	r3, [r4, #20]
 801bf68:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801bf6c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801bf70:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801bf74:	68a1      	ldr	r1, [r4, #8]
 801bf76:	ed94 6a08 	vldr	s12, [r4, #32]
 801bf7a:	6022      	str	r2, [r4, #0]
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	6163      	str	r3, [r4, #20]
 801bf80:	69a3      	ldr	r3, [r4, #24]
 801bf82:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bf86:	3b01      	subs	r3, #1
 801bf88:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801bf8c:	61a3      	str	r3, [r4, #24]
 801bf8e:	6923      	ldr	r3, [r4, #16]
 801bf90:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bf94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf98:	edd4 6a07 	vldr	s13, [r4, #28]
 801bf9c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bfa0:	440b      	add	r3, r1
 801bfa2:	68e1      	ldr	r1, [r4, #12]
 801bfa4:	6123      	str	r3, [r4, #16]
 801bfa6:	ee76 6a86 	vadd.f32	s13, s13, s12
 801bfaa:	428b      	cmp	r3, r1
 801bfac:	edc4 6a07 	vstr	s13, [r4, #28]
 801bfb0:	db15      	blt.n	801bfde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801bfb2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801bfb6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801bfba:	3201      	adds	r2, #1
 801bfbc:	edc4 6a07 	vstr	s13, [r4, #28]
 801bfc0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801bfc4:	6022      	str	r2, [r4, #0]
 801bfc6:	ee36 7a87 	vadd.f32	s14, s13, s14
 801bfca:	1a5b      	subs	r3, r3, r1
 801bfcc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801bfd0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801bfd4:	6123      	str	r3, [r4, #16]
 801bfd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801bfda:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801bfde:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bfe2:	441a      	add	r2, r3
 801bfe4:	696b      	ldr	r3, [r5, #20]
 801bfe6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801bfea:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801bfee:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801bff2:	68a9      	ldr	r1, [r5, #8]
 801bff4:	ed95 6a08 	vldr	s12, [r5, #32]
 801bff8:	602a      	str	r2, [r5, #0]
 801bffa:	3301      	adds	r3, #1
 801bffc:	616b      	str	r3, [r5, #20]
 801bffe:	69ab      	ldr	r3, [r5, #24]
 801c000:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c004:	3b01      	subs	r3, #1
 801c006:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c00a:	61ab      	str	r3, [r5, #24]
 801c00c:	692b      	ldr	r3, [r5, #16]
 801c00e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c016:	edd5 6a07 	vldr	s13, [r5, #28]
 801c01a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c01e:	440b      	add	r3, r1
 801c020:	68e9      	ldr	r1, [r5, #12]
 801c022:	612b      	str	r3, [r5, #16]
 801c024:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c028:	428b      	cmp	r3, r1
 801c02a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c02e:	db15      	blt.n	801c05c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801c030:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c034:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c038:	3201      	adds	r2, #1
 801c03a:	edc5 6a07 	vstr	s13, [r5, #28]
 801c03e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c042:	602a      	str	r2, [r5, #0]
 801c044:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c048:	1a5b      	subs	r3, r3, r1
 801c04a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c04e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c052:	612b      	str	r3, [r5, #16]
 801c054:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c058:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c05c:	3f01      	subs	r7, #1
 801c05e:	e757      	b.n	801bf10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801c060:	4299      	cmp	r1, r3
 801c062:	dc13      	bgt.n	801c08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801c064:	429a      	cmp	r2, r3
 801c066:	da14      	bge.n	801c092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801c068:	2502      	movs	r5, #2
 801c06a:	2703      	movs	r7, #3
 801c06c:	46a9      	mov	r9, r5
 801c06e:	f04f 0800 	mov.w	r8, #0
 801c072:	f04f 0a01 	mov.w	sl, #1
 801c076:	e6ef      	b.n	801be58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c078:	2501      	movs	r5, #1
 801c07a:	2700      	movs	r7, #0
 801c07c:	46a9      	mov	r9, r5
 801c07e:	46b8      	mov	r8, r7
 801c080:	f04f 0a02 	mov.w	sl, #2
 801c084:	e6e8      	b.n	801be58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801c086:	2501      	movs	r5, #1
 801c088:	2702      	movs	r7, #2
 801c08a:	e6e1      	b.n	801be50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801c08c:	2500      	movs	r5, #0
 801c08e:	2701      	movs	r7, #1
 801c090:	e7f4      	b.n	801c07c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801c092:	2702      	movs	r7, #2
 801c094:	2503      	movs	r5, #3
 801c096:	f04f 0900 	mov.w	r9, #0
 801c09a:	46b8      	mov	r8, r7
 801c09c:	e7e9      	b.n	801c072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801c09e:	4613      	mov	r3, r2
 801c0a0:	e728      	b.n	801bef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801c0a2:	bf00      	nop
 801c0a4:	2000b4bc 	.word	0x2000b4bc
 801c0a8:	fffd8f01 	.word	0xfffd8f01
 801c0ac:	00027100 	.word	0x00027100
 801c0b0:	0004e1ff 	.word	0x0004e1ff
 801c0b4:	0004e1fe 	.word	0x0004e1fe
 801c0b8:	2000b4c4 	.word	0x2000b4c4
 801c0bc:	4613      	mov	r3, r2
 801c0be:	992b      	ldr	r1, [sp, #172]	; 0xac
 801c0c0:	9111      	str	r1, [sp, #68]	; 0x44
 801c0c2:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801c0c6:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801c0ca:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801c0cc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801c0d0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801c0d4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801c0d8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801c0dc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801c0e0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801c0e4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801c0e8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801c0ec:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801c0f0:	469e      	mov	lr, r3
 801c0f2:	469c      	mov	ip, r3
 801c0f4:	f04f 0900 	mov.w	r9, #0
 801c0f8:	f1bc 0f00 	cmp.w	ip, #0
 801c0fc:	d147      	bne.n	801c18e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801c0fe:	eb03 0c07 	add.w	ip, r3, r7
 801c102:	1ad7      	subs	r7, r2, r3
 801c104:	f1b9 0f00 	cmp.w	r9, #0
 801c108:	d009      	beq.n	801c11e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801c10a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801c10e:	9029      	str	r0, [sp, #164]	; 0xa4
 801c110:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801c114:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801c118:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801c11c:	912d      	str	r1, [sp, #180]	; 0xb4
 801c11e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c120:	9111      	str	r1, [sp, #68]	; 0x44
 801c122:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c126:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c12a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c12e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c132:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c136:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c13a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c13e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c142:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c146:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c14a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c14e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c152:	f04f 0800 	mov.w	r8, #0
 801c156:	f1be 0f00 	cmp.w	lr, #0
 801c15a:	d031      	beq.n	801c1c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801c15c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c15e:	4431      	add	r1, r6
 801c160:	4549      	cmp	r1, r9
 801c162:	4450      	add	r0, sl
 801c164:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c168:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c16c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c170:	db08      	blt.n	801c184 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801c172:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c176:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c17a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c17e:	3001      	adds	r0, #1
 801c180:	eba1 0109 	sub.w	r1, r1, r9
 801c184:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c188:	f04f 0801 	mov.w	r8, #1
 801c18c:	e7e3      	b.n	801c156 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801c18e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c190:	4431      	add	r1, r6
 801c192:	4541      	cmp	r1, r8
 801c194:	4450      	add	r0, sl
 801c196:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c19a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c19e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c1a2:	db08      	blt.n	801c1b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801c1a4:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c1a8:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c1ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c1b0:	3001      	adds	r0, #1
 801c1b2:	eba1 0108 	sub.w	r1, r1, r8
 801c1b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c1ba:	f04f 0901 	mov.w	r9, #1
 801c1be:	e79b      	b.n	801c0f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801c1c0:	449c      	add	ip, r3
 801c1c2:	1aff      	subs	r7, r7, r3
 801c1c4:	f1b8 0f00 	cmp.w	r8, #0
 801c1c8:	d009      	beq.n	801c1de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801c1ca:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c1ce:	9019      	str	r0, [sp, #100]	; 0x64
 801c1d0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c1d4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c1d8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c1dc:	911d      	str	r1, [sp, #116]	; 0x74
 801c1de:	1ad2      	subs	r2, r2, r3
 801c1e0:	e68b      	b.n	801befa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801c1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c1e4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	f000 80d1 	beq.w	801c38e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801c1ec:	ad19      	add	r5, sp, #100	; 0x64
 801c1ee:	ac39      	add	r4, sp, #228	; 0xe4
 801c1f0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c1f2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801c1f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c1fa:	930c      	str	r3, [sp, #48]	; 0x30
 801c1fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c1fe:	6963      	ldr	r3, [r4, #20]
 801c200:	440b      	add	r3, r1
 801c202:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801c206:	4408      	add	r0, r1
 801c208:	b200      	sxth	r0, r0
 801c20a:	4283      	cmp	r3, r0
 801c20c:	900d      	str	r0, [sp, #52]	; 0x34
 801c20e:	f280 80c1 	bge.w	801c394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801c212:	428b      	cmp	r3, r1
 801c214:	da08      	bge.n	801c228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c216:	2a00      	cmp	r2, #0
 801c218:	dd06      	ble.n	801c228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c21a:	1acb      	subs	r3, r1, r3
 801c21c:	429a      	cmp	r2, r3
 801c21e:	f2c0 80bb 	blt.w	801c398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801c222:	2b00      	cmp	r3, #0
 801c224:	f300 80b9 	bgt.w	801c39a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801c228:	6967      	ldr	r7, [r4, #20]
 801c22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c22c:	443b      	add	r3, r7
 801c22e:	461f      	mov	r7, r3
 801c230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c232:	1bdf      	subs	r7, r3, r7
 801c234:	4297      	cmp	r7, r2
 801c236:	bfa8      	it	ge
 801c238:	4617      	movge	r7, r2
 801c23a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801c23e:	2f00      	cmp	r7, #0
 801c240:	f340 813c 	ble.w	801c4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801c244:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c246:	6829      	ldr	r1, [r5, #0]
 801c248:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c24c:	f9bb 3000 	ldrsh.w	r3, [fp]
 801c250:	6820      	ldr	r0, [r4, #0]
 801c252:	4411      	add	r1, r2
 801c254:	4299      	cmp	r1, r3
 801c256:	dd1a      	ble.n	801c28e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c258:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801c25c:	440b      	add	r3, r1
 801c25e:	4402      	add	r2, r0
 801c260:	b21b      	sxth	r3, r3
 801c262:	429a      	cmp	r2, r3
 801c264:	dc13      	bgt.n	801c28e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c268:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	9206      	str	r2, [sp, #24]
 801c26e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c270:	9205      	str	r2, [sp, #20]
 801c272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c274:	9500      	str	r5, [sp, #0]
 801c276:	e9cd b203 	strd	fp, r2, [sp, #12]
 801c27a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801c27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c27e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801c282:	a912      	add	r1, sp, #72	; 0x48
 801c284:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801c288:	aa49      	add	r2, sp, #292	; 0x124
 801c28a:	4623      	mov	r3, r4
 801c28c:	47c8      	blx	r9
 801c28e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c292:	441a      	add	r2, r3
 801c294:	6963      	ldr	r3, [r4, #20]
 801c296:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801c29a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801c29e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801c2a2:	68a1      	ldr	r1, [r4, #8]
 801c2a4:	ed94 6a08 	vldr	s12, [r4, #32]
 801c2a8:	6022      	str	r2, [r4, #0]
 801c2aa:	3301      	adds	r3, #1
 801c2ac:	6163      	str	r3, [r4, #20]
 801c2ae:	69a3      	ldr	r3, [r4, #24]
 801c2b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c2b4:	3b01      	subs	r3, #1
 801c2b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801c2ba:	61a3      	str	r3, [r4, #24]
 801c2bc:	6923      	ldr	r3, [r4, #16]
 801c2be:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c2c6:	edd4 6a07 	vldr	s13, [r4, #28]
 801c2ca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c2ce:	440b      	add	r3, r1
 801c2d0:	68e1      	ldr	r1, [r4, #12]
 801c2d2:	6123      	str	r3, [r4, #16]
 801c2d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c2d8:	428b      	cmp	r3, r1
 801c2da:	edc4 6a07 	vstr	s13, [r4, #28]
 801c2de:	db15      	blt.n	801c30c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801c2e0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801c2e4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c2e8:	3201      	adds	r2, #1
 801c2ea:	edc4 6a07 	vstr	s13, [r4, #28]
 801c2ee:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801c2f2:	6022      	str	r2, [r4, #0]
 801c2f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c2f8:	1a5b      	subs	r3, r3, r1
 801c2fa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801c2fe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801c302:	6123      	str	r3, [r4, #16]
 801c304:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c308:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801c30c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c310:	441a      	add	r2, r3
 801c312:	696b      	ldr	r3, [r5, #20]
 801c314:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801c318:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801c31c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801c320:	68a9      	ldr	r1, [r5, #8]
 801c322:	ed95 6a08 	vldr	s12, [r5, #32]
 801c326:	602a      	str	r2, [r5, #0]
 801c328:	3301      	adds	r3, #1
 801c32a:	616b      	str	r3, [r5, #20]
 801c32c:	69ab      	ldr	r3, [r5, #24]
 801c32e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c332:	3b01      	subs	r3, #1
 801c334:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801c338:	61ab      	str	r3, [r5, #24]
 801c33a:	692b      	ldr	r3, [r5, #16]
 801c33c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c344:	edd5 6a07 	vldr	s13, [r5, #28]
 801c348:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c34c:	440b      	add	r3, r1
 801c34e:	68e9      	ldr	r1, [r5, #12]
 801c350:	612b      	str	r3, [r5, #16]
 801c352:	ee76 6a86 	vadd.f32	s13, s13, s12
 801c356:	428b      	cmp	r3, r1
 801c358:	edc5 6a07 	vstr	s13, [r5, #28]
 801c35c:	db15      	blt.n	801c38a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801c35e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801c362:	ee76 6a26 	vadd.f32	s13, s12, s13
 801c366:	3201      	adds	r2, #1
 801c368:	edc5 6a07 	vstr	s13, [r5, #28]
 801c36c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801c370:	602a      	str	r2, [r5, #0]
 801c372:	ee36 7a87 	vadd.f32	s14, s13, s14
 801c376:	1a5b      	subs	r3, r3, r1
 801c378:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801c37c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801c380:	612b      	str	r3, [r5, #16]
 801c382:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c386:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801c38a:	3f01      	subs	r7, #1
 801c38c:	e757      	b.n	801c23e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801c38e:	ad39      	add	r5, sp, #228	; 0xe4
 801c390:	ac19      	add	r4, sp, #100	; 0x64
 801c392:	e72d      	b.n	801c1f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801c394:	4613      	mov	r3, r2
 801c396:	e744      	b.n	801c222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801c398:	4613      	mov	r3, r2
 801c39a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801c39e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801c3a0:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801c3a4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801c3a8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801c3ac:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801c3b0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801c3b4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801c3b8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801c3bc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801c3be:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801c3c2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801c3c6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801c3ca:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801c3ce:	960e      	str	r6, [sp, #56]	; 0x38
 801c3d0:	469e      	mov	lr, r3
 801c3d2:	461f      	mov	r7, r3
 801c3d4:	f04f 0900 	mov.w	r9, #0
 801c3d8:	2f00      	cmp	r7, #0
 801c3da:	d146      	bne.n	801c46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801c3dc:	449c      	add	ip, r3
 801c3de:	1ad7      	subs	r7, r2, r3
 801c3e0:	f1b9 0f00 	cmp.w	r9, #0
 801c3e4:	d009      	beq.n	801c3fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801c3e6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801c3ea:	9039      	str	r0, [sp, #228]	; 0xe4
 801c3ec:	913d      	str	r1, [sp, #244]	; 0xf4
 801c3ee:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801c3f2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801c3f6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801c3fa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801c3fc:	910e      	str	r1, [sp, #56]	; 0x38
 801c3fe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801c402:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801c406:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801c40a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801c40e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801c412:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801c416:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801c41a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801c41e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801c422:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801c426:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801c42a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801c42e:	f04f 0800 	mov.w	r8, #0
 801c432:	f1be 0f00 	cmp.w	lr, #0
 801c436:	d030      	beq.n	801c49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801c438:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c43a:	4431      	add	r1, r6
 801c43c:	4549      	cmp	r1, r9
 801c43e:	4450      	add	r0, sl
 801c440:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801c444:	ee37 7a04 	vadd.f32	s14, s14, s8
 801c448:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c44c:	db08      	blt.n	801c460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801c44e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c452:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801c456:	ee37 7a06 	vadd.f32	s14, s14, s12
 801c45a:	3001      	adds	r0, #1
 801c45c:	eba1 0109 	sub.w	r1, r1, r9
 801c460:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c464:	f04f 0801 	mov.w	r8, #1
 801c468:	e7e3      	b.n	801c432 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801c46a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801c46c:	4431      	add	r1, r6
 801c46e:	4541      	cmp	r1, r8
 801c470:	4450      	add	r0, sl
 801c472:	ee37 7a24 	vadd.f32	s14, s14, s9
 801c476:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c47a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801c47e:	db08      	blt.n	801c492 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801c480:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c484:	ee37 7a25 	vadd.f32	s14, s14, s11
 801c488:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c48c:	3001      	adds	r0, #1
 801c48e:	eba1 0108 	sub.w	r1, r1, r8
 801c492:	3f01      	subs	r7, #1
 801c494:	f04f 0901 	mov.w	r9, #1
 801c498:	e79e      	b.n	801c3d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801c49a:	449c      	add	ip, r3
 801c49c:	1aff      	subs	r7, r7, r3
 801c49e:	f1b8 0f00 	cmp.w	r8, #0
 801c4a2:	d009      	beq.n	801c4b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801c4a4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801c4a8:	9019      	str	r0, [sp, #100]	; 0x64
 801c4aa:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801c4ae:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801c4b2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801c4b6:	911d      	str	r1, [sp, #116]	; 0x74
 801c4b8:	1ad2      	subs	r2, r2, r3
 801c4ba:	e6b5      	b.n	801c228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801c4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	b923      	cbnz	r3, 801c4cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801c4c2:	4b04      	ldr	r3, [pc, #16]	; (801c4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801c4c4:	6818      	ldr	r0, [r3, #0]
 801c4c6:	6803      	ldr	r3, [r0, #0]
 801c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4ca:	4798      	blx	r3
 801c4cc:	b05b      	add	sp, #364	; 0x16c
 801c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4d2:	bf00      	nop
 801c4d4:	2000b4c4 	.word	0x2000b4c4

0801c4d8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801c4d8:	b570      	push	{r4, r5, r6, lr}
 801c4da:	4604      	mov	r4, r0
 801c4dc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801c4e0:	9804      	ldr	r0, [sp, #16]
 801c4e2:	6061      	str	r1, [r4, #4]
 801c4e4:	2500      	movs	r5, #0
 801c4e6:	8025      	strh	r5, [r4, #0]
 801c4e8:	7223      	strb	r3, [r4, #8]
 801c4ea:	7266      	strb	r6, [r4, #9]
 801c4ec:	60e0      	str	r0, [r4, #12]
 801c4ee:	8222      	strh	r2, [r4, #16]
 801c4f0:	8265      	strh	r5, [r4, #18]
 801c4f2:	82a5      	strh	r5, [r4, #20]
 801c4f4:	82e5      	strh	r5, [r4, #22]
 801c4f6:	8325      	strh	r5, [r4, #24]
 801c4f8:	8365      	strh	r5, [r4, #26]
 801c4fa:	83a5      	strh	r5, [r4, #28]
 801c4fc:	77a5      	strb	r5, [r4, #30]
 801c4fe:	b32e      	cbz	r6, 801c54c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801c500:	6803      	ldr	r3, [r0, #0]
 801c502:	695b      	ldr	r3, [r3, #20]
 801c504:	4798      	blx	r3
 801c506:	4606      	mov	r6, r0
 801c508:	b300      	cbz	r0, 801c54c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801c50a:	68e0      	ldr	r0, [r4, #12]
 801c50c:	6803      	ldr	r3, [r0, #0]
 801c50e:	4631      	mov	r1, r6
 801c510:	68db      	ldr	r3, [r3, #12]
 801c512:	4798      	blx	r3
 801c514:	4605      	mov	r5, r0
 801c516:	b1c8      	cbz	r0, 801c54c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801c518:	7b43      	ldrb	r3, [r0, #13]
 801c51a:	7a82      	ldrb	r2, [r0, #10]
 801c51c:	005b      	lsls	r3, r3, #1
 801c51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c522:	4313      	orrs	r3, r2
 801c524:	83a3      	strh	r3, [r4, #28]
 801c526:	7a63      	ldrb	r3, [r4, #9]
 801c528:	2b04      	cmp	r3, #4
 801c52a:	d10f      	bne.n	801c54c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801c52c:	68e0      	ldr	r0, [r4, #12]
 801c52e:	6803      	ldr	r3, [r0, #0]
 801c530:	462a      	mov	r2, r5
 801c532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c534:	4631      	mov	r1, r6
 801c536:	4798      	blx	r3
 801c538:	7b6b      	ldrb	r3, [r5, #13]
 801c53a:	005b      	lsls	r3, r3, #1
 801c53c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c540:	7aab      	ldrb	r3, [r5, #10]
 801c542:	4313      	orrs	r3, r2
 801c544:	4418      	add	r0, r3
 801c546:	8ba3      	ldrh	r3, [r4, #28]
 801c548:	4418      	add	r0, r3
 801c54a:	83a0      	strh	r0, [r4, #28]
 801c54c:	4620      	mov	r0, r4
 801c54e:	bd70      	pop	{r4, r5, r6, pc}

0801c550 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801c550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c554:	2400      	movs	r4, #0
 801c556:	b085      	sub	sp, #20
 801c558:	4681      	mov	r9, r0
 801c55a:	4688      	mov	r8, r1
 801c55c:	4692      	mov	sl, r2
 801c55e:	469b      	mov	fp, r3
 801c560:	4627      	mov	r7, r4
 801c562:	4625      	mov	r5, r4
 801c564:	4626      	mov	r6, r4
 801c566:	4554      	cmp	r4, sl
 801c568:	da2a      	bge.n	801c5c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c56a:	2300      	movs	r3, #0
 801c56c:	9303      	str	r3, [sp, #12]
 801c56e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c572:	429d      	cmp	r5, r3
 801c574:	d004      	beq.n	801c580 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801c576:	f242 030b 	movw	r3, #8203	; 0x200b
 801c57a:	429d      	cmp	r5, r3
 801c57c:	bf18      	it	ne
 801c57e:	462f      	movne	r7, r5
 801c580:	ab03      	add	r3, sp, #12
 801c582:	4642      	mov	r2, r8
 801c584:	4659      	mov	r1, fp
 801c586:	4648      	mov	r0, r9
 801c588:	f002 fef2 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c58c:	4605      	mov	r5, r0
 801c58e:	b1b8      	cbz	r0, 801c5c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c590:	280a      	cmp	r0, #10
 801c592:	d015      	beq.n	801c5c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801c594:	9a03      	ldr	r2, [sp, #12]
 801c596:	b18a      	cbz	r2, 801c5bc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801c598:	7b50      	ldrb	r0, [r2, #13]
 801c59a:	7a93      	ldrb	r3, [r2, #10]
 801c59c:	8895      	ldrh	r5, [r2, #4]
 801c59e:	0040      	lsls	r0, r0, #1
 801c5a0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c5a4:	4303      	orrs	r3, r0
 801c5a6:	9301      	str	r3, [sp, #4]
 801c5a8:	f8d8 3000 	ldr.w	r3, [r8]
 801c5ac:	4639      	mov	r1, r7
 801c5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c5b0:	4640      	mov	r0, r8
 801c5b2:	4798      	blx	r3
 801c5b4:	9b01      	ldr	r3, [sp, #4]
 801c5b6:	4418      	add	r0, r3
 801c5b8:	4406      	add	r6, r0
 801c5ba:	b2b6      	uxth	r6, r6
 801c5bc:	3401      	adds	r4, #1
 801c5be:	e7d2      	b.n	801c566 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801c5c0:	4630      	mov	r0, r6
 801c5c2:	b005      	add	sp, #20
 801c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801c5c8:	2a02      	cmp	r2, #2
 801c5ca:	b530      	push	{r4, r5, lr}
 801c5cc:	d011      	beq.n	801c5f2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801c5ce:	2a03      	cmp	r2, #3
 801c5d0:	d01c      	beq.n	801c60c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801c5d2:	2a01      	cmp	r2, #1
 801c5d4:	d10c      	bne.n	801c5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801c5d6:	888b      	ldrh	r3, [r1, #4]
 801c5d8:	8801      	ldrh	r1, [r0, #0]
 801c5da:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801c5de:	8844      	ldrh	r4, [r0, #2]
 801c5e0:	8004      	strh	r4, [r0, #0]
 801c5e2:	1a5b      	subs	r3, r3, r1
 801c5e4:	1a9b      	subs	r3, r3, r2
 801c5e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801c5ea:	8043      	strh	r3, [r0, #2]
 801c5ec:	8081      	strh	r1, [r0, #4]
 801c5ee:	80c2      	strh	r2, [r0, #6]
 801c5f0:	bd30      	pop	{r4, r5, pc}
 801c5f2:	88cb      	ldrh	r3, [r1, #6]
 801c5f4:	8842      	ldrh	r2, [r0, #2]
 801c5f6:	1a9b      	subs	r3, r3, r2
 801c5f8:	88c2      	ldrh	r2, [r0, #6]
 801c5fa:	1a9b      	subs	r3, r3, r2
 801c5fc:	888a      	ldrh	r2, [r1, #4]
 801c5fe:	8801      	ldrh	r1, [r0, #0]
 801c600:	8043      	strh	r3, [r0, #2]
 801c602:	1a52      	subs	r2, r2, r1
 801c604:	8881      	ldrh	r1, [r0, #4]
 801c606:	1a52      	subs	r2, r2, r1
 801c608:	8002      	strh	r2, [r0, #0]
 801c60a:	e7f1      	b.n	801c5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801c60c:	88cb      	ldrh	r3, [r1, #6]
 801c60e:	8841      	ldrh	r1, [r0, #2]
 801c610:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801c614:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c618:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c61c:	8045      	strh	r5, [r0, #2]
 801c61e:	1a5b      	subs	r3, r3, r1
 801c620:	1a9b      	subs	r3, r3, r2
 801c622:	8003      	strh	r3, [r0, #0]
 801c624:	8082      	strh	r2, [r0, #4]
 801c626:	80c4      	strh	r4, [r0, #6]
 801c628:	e7e2      	b.n	801c5f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801c62a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801c62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c62e:	b09f      	sub	sp, #124	; 0x7c
 801c630:	9116      	str	r1, [sp, #88]	; 0x58
 801c632:	9317      	str	r3, [sp, #92]	; 0x5c
 801c634:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c636:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c638:	8809      	ldrh	r1, [r1, #0]
 801c63a:	889b      	ldrh	r3, [r3, #4]
 801c63c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801c640:	9212      	str	r2, [sp, #72]	; 0x48
 801c642:	440b      	add	r3, r1
 801c644:	b21b      	sxth	r3, r3
 801c646:	9310      	str	r3, [sp, #64]	; 0x40
 801c648:	f8d8 3000 	ldr.w	r3, [r8]
 801c64c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801c650:	7a59      	ldrb	r1, [r3, #9]
 801c652:	7a1b      	ldrb	r3, [r3, #8]
 801c654:	9011      	str	r0, [sp, #68]	; 0x44
 801c656:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801c65a:	9114      	str	r1, [sp, #80]	; 0x50
 801c65c:	9315      	str	r3, [sp, #84]	; 0x54
 801c65e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801c662:	2a00      	cmp	r2, #0
 801c664:	d06a      	beq.n	801c73c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801c666:	f898 3010 	ldrb.w	r3, [r8, #16]
 801c66a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c66c:	2b04      	cmp	r3, #4
 801c66e:	bf14      	ite	ne
 801c670:	2301      	movne	r3, #1
 801c672:	2302      	moveq	r3, #2
 801c674:	4413      	add	r3, r2
 801c676:	f04f 0900 	mov.w	r9, #0
 801c67a:	930f      	str	r3, [sp, #60]	; 0x3c
 801c67c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801c680:	464c      	mov	r4, r9
 801c682:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801c686:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801c68a:	4293      	cmp	r3, r2
 801c68c:	f280 808f 	bge.w	801c7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801c690:	2300      	movs	r3, #0
 801c692:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801c696:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801c69a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c69e:	429c      	cmp	r4, r3
 801c6a0:	d006      	beq.n	801c6b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801c6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6a4:	f242 020b 	movw	r2, #8203	; 0x200b
 801c6a8:	4294      	cmp	r4, r2
 801c6aa:	bf18      	it	ne
 801c6ac:	4623      	movne	r3, r4
 801c6ae:	930d      	str	r3, [sp, #52]	; 0x34
 801c6b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6b2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801c6b4:	f8d8 2000 	ldr.w	r2, [r8]
 801c6b8:	428b      	cmp	r3, r1
 801c6ba:	db41      	blt.n	801c740 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801c6bc:	6813      	ldr	r3, [r2, #0]
 801c6be:	4610      	mov	r0, r2
 801c6c0:	695b      	ldr	r3, [r3, #20]
 801c6c2:	4798      	blx	r3
 801c6c4:	4604      	mov	r4, r0
 801c6c6:	f8d8 0000 	ldr.w	r0, [r8]
 801c6ca:	6803      	ldr	r3, [r0, #0]
 801c6cc:	aa1d      	add	r2, sp, #116	; 0x74
 801c6ce:	689e      	ldr	r6, [r3, #8]
 801c6d0:	4621      	mov	r1, r4
 801c6d2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801c6d6:	47b0      	blx	r6
 801c6d8:	901c      	str	r0, [sp, #112]	; 0x70
 801c6da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c6de:	429c      	cmp	r4, r3
 801c6e0:	f000 80e9 	beq.w	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c6e4:	f242 030b 	movw	r3, #8203	; 0x200b
 801c6e8:	429c      	cmp	r4, r3
 801c6ea:	f000 80e4 	beq.w	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c6ee:	2c00      	cmp	r4, #0
 801c6f0:	f000 80f6 	beq.w	801c8e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801c6f4:	2c0a      	cmp	r4, #10
 801c6f6:	d060      	beq.n	801c7ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801c6f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c6fa:	b36a      	cbz	r2, 801c758 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801c6fc:	8894      	ldrh	r4, [r2, #4]
 801c6fe:	f1bb 0f00 	cmp.w	fp, #0
 801c702:	d03b      	beq.n	801c77c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801c704:	f892 900d 	ldrb.w	r9, [r2, #13]
 801c708:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c70c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801c710:	f892 900a 	ldrb.w	r9, [r2, #10]
 801c714:	f1bb 0f01 	cmp.w	fp, #1
 801c718:	ea49 0903 	orr.w	r9, r9, r3
 801c71c:	d134      	bne.n	801c788 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801c71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c720:	eba5 0509 	sub.w	r5, r5, r9
 801c724:	2b00      	cmp	r3, #0
 801c726:	d14f      	bne.n	801c7c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c72a:	eb09 0305 	add.w	r3, r9, r5
 801c72e:	4413      	add	r3, r2
 801c730:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c732:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c736:	4293      	cmp	r3, r2
 801c738:	da51      	bge.n	801c7de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c73a:	e038      	b.n	801c7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801c73c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c73e:	e79a      	b.n	801c676 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801c740:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801c744:	9301      	str	r3, [sp, #4]
 801c746:	ab1d      	add	r3, sp, #116	; 0x74
 801c748:	9300      	str	r3, [sp, #0]
 801c74a:	4659      	mov	r1, fp
 801c74c:	ab1c      	add	r3, sp, #112	; 0x70
 801c74e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c750:	f002 fe57 	bl	801f402 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801c754:	4604      	mov	r4, r0
 801c756:	e7c0      	b.n	801c6da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801c758:	f8d8 0000 	ldr.w	r0, [r8]
 801c75c:	6803      	ldr	r3, [r0, #0]
 801c75e:	691b      	ldr	r3, [r3, #16]
 801c760:	4798      	blx	r3
 801c762:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c766:	4298      	cmp	r0, r3
 801c768:	f000 80a5 	beq.w	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c76c:	f242 030b 	movw	r3, #8203	; 0x200b
 801c770:	4298      	cmp	r0, r3
 801c772:	f000 80a0 	beq.w	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c776:	f1bb 0f00 	cmp.w	fp, #0
 801c77a:	d100      	bne.n	801c77e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801c77c:	444d      	add	r5, r9
 801c77e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c780:	2a00      	cmp	r2, #0
 801c782:	d1bf      	bne.n	801c704 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801c784:	4691      	mov	r9, r2
 801c786:	e096      	b.n	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c788:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	f000 80aa 	beq.w	801c8e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801c790:	f1bb 0f00 	cmp.w	fp, #0
 801c794:	d118      	bne.n	801c7c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801c796:	f8d8 0000 	ldr.w	r0, [r8]
 801c79a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c79c:	6803      	ldr	r3, [r0, #0]
 801c79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7a0:	4798      	blx	r3
 801c7a2:	4405      	add	r5, r0
 801c7a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c7a8:	1aeb      	subs	r3, r5, r3
 801c7aa:	4293      	cmp	r3, r2
 801c7ac:	dd17      	ble.n	801c7de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801c7ae:	2c00      	cmp	r4, #0
 801c7b0:	f000 8096 	beq.w	801c8e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801c7b4:	2c0a      	cmp	r4, #10
 801c7b6:	f040 8084 	bne.w	801c8c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801c7ba:	240a      	movs	r4, #10
 801c7bc:	fab4 f084 	clz	r0, r4
 801c7c0:	0940      	lsrs	r0, r0, #5
 801c7c2:	b01f      	add	sp, #124	; 0x7c
 801c7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7c8:	f8d8 0000 	ldr.w	r0, [r8]
 801c7cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c7ce:	6803      	ldr	r3, [r0, #0]
 801c7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c7d2:	4798      	blx	r3
 801c7d4:	f1bb 0f01 	cmp.w	fp, #1
 801c7d8:	eba5 0500 	sub.w	r5, r5, r0
 801c7dc:	d0a4      	beq.n	801c728 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801c7de:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c7e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c7e2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801c7e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c7ea:	7b43      	ldrb	r3, [r0, #13]
 801c7ec:	015b      	lsls	r3, r3, #5
 801c7ee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7f2:	7983      	ldrb	r3, [r0, #6]
 801c7f4:	4429      	add	r1, r5
 801c7f6:	4313      	orrs	r3, r2
 801c7f8:	440b      	add	r3, r1
 801c7fa:	42b3      	cmp	r3, r6
 801c7fc:	db5b      	blt.n	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c7fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c800:	4299      	cmp	r1, r3
 801c802:	da58      	bge.n	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c804:	f8d8 0000 	ldr.w	r0, [r8]
 801c808:	6803      	ldr	r3, [r0, #0]
 801c80a:	42ae      	cmp	r6, r5
 801c80c:	bfc8      	it	gt
 801c80e:	1b76      	subgt	r6, r6, r5
 801c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c812:	bfcc      	ite	gt
 801c814:	b2b6      	uxthgt	r6, r6
 801c816:	2600      	movle	r6, #0
 801c818:	4798      	blx	r3
 801c81a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c81c:	7b5a      	ldrb	r2, [r3, #13]
 801c81e:	00d1      	lsls	r1, r2, #3
 801c820:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801c824:	7a19      	ldrb	r1, [r3, #8]
 801c826:	4339      	orrs	r1, r7
 801c828:	0657      	lsls	r7, r2, #25
 801c82a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801c82c:	bf44      	itt	mi
 801c82e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801c832:	b209      	sxthmi	r1, r1
 801c834:	19c7      	adds	r7, r0, r7
 801c836:	1a7f      	subs	r7, r7, r1
 801c838:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c83a:	b2bf      	uxth	r7, r7
 801c83c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801c840:	fa0f fa87 	sxth.w	sl, r7
 801c844:	4551      	cmp	r1, sl
 801c846:	dd3a      	ble.n	801c8be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801c848:	0112      	lsls	r2, r2, #4
 801c84a:	79d8      	ldrb	r0, [r3, #7]
 801c84c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c850:	4302      	orrs	r2, r0
 801c852:	4492      	add	sl, r2
 801c854:	4551      	cmp	r1, sl
 801c856:	dc2e      	bgt.n	801c8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801c858:	1bcf      	subs	r7, r1, r7
 801c85a:	b2bf      	uxth	r7, r7
 801c85c:	468a      	mov	sl, r1
 801c85e:	9319      	str	r3, [sp, #100]	; 0x64
 801c860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c862:	f8d8 0000 	ldr.w	r0, [r8]
 801c866:	681a      	ldr	r2, [r3, #0]
 801c868:	6801      	ldr	r1, [r0, #0]
 801c86a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801c86c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c86e:	9313      	str	r3, [sp, #76]	; 0x4c
 801c870:	9218      	str	r2, [sp, #96]	; 0x60
 801c872:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801c874:	4788      	blx	r1
 801c876:	f898 1006 	ldrb.w	r1, [r8, #6]
 801c87a:	910b      	str	r1, [sp, #44]	; 0x2c
 801c87c:	f898 100e 	ldrb.w	r1, [r8, #14]
 801c880:	910a      	str	r1, [sp, #40]	; 0x28
 801c882:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801c886:	9109      	str	r1, [sp, #36]	; 0x24
 801c888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c88a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c88e:	9305      	str	r3, [sp, #20]
 801c890:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c892:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c894:	9206      	str	r2, [sp, #24]
 801c896:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801c89a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801c89e:	e9cd a601 	strd	sl, r6, [sp, #4]
 801c8a2:	442e      	add	r6, r5
 801c8a4:	b236      	sxth	r6, r6
 801c8a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c8a8:	9600      	str	r6, [sp, #0]
 801c8aa:	681a      	ldr	r2, [r3, #0]
 801c8ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 801c8ae:	685b      	ldr	r3, [r3, #4]
 801c8b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c8b2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c8b4:	47b0      	blx	r6
 801c8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8b8:	3301      	adds	r3, #1
 801c8ba:	930e      	str	r3, [sp, #56]	; 0x38
 801c8bc:	e6e3      	b.n	801c686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801c8be:	2700      	movs	r7, #0
 801c8c0:	e7cd      	b.n	801c85e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801c8c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c8c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c8c6:	3501      	adds	r5, #1
 801c8c8:	429d      	cmp	r5, r3
 801c8ca:	f6bf af77 	bge.w	801c7bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c8ce:	4659      	mov	r1, fp
 801c8d0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801c8d2:	f7f9 ff29 	bl	8016728 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c8d6:	4604      	mov	r4, r0
 801c8d8:	b110      	cbz	r0, 801c8e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801c8da:	280a      	cmp	r0, #10
 801c8dc:	d1f2      	bne.n	801c8c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801c8de:	e76c      	b.n	801c7ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801c8e0:	2400      	movs	r4, #0
 801c8e2:	e76b      	b.n	801c7bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801c8e4:	f1bb 0f00 	cmp.w	fp, #0
 801c8e8:	f43f af5c 	beq.w	801c7a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801c8ec:	e777      	b.n	801c7de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801c8ee <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801c8ee:	b530      	push	{r4, r5, lr}
 801c8f0:	8a44      	ldrh	r4, [r0, #18]
 801c8f2:	8ac5      	ldrh	r5, [r0, #22]
 801c8f4:	82c3      	strh	r3, [r0, #22]
 801c8f6:	442c      	add	r4, r5
 801c8f8:	1ae4      	subs	r4, r4, r3
 801c8fa:	8244      	strh	r4, [r0, #18]
 801c8fc:	8b03      	ldrh	r3, [r0, #24]
 801c8fe:	8a84      	ldrh	r4, [r0, #20]
 801c900:	4422      	add	r2, r4
 801c902:	440c      	add	r4, r1
 801c904:	1a59      	subs	r1, r3, r1
 801c906:	8342      	strh	r2, [r0, #26]
 801c908:	8284      	strh	r4, [r0, #20]
 801c90a:	8301      	strh	r1, [r0, #24]
 801c90c:	bd30      	pop	{r4, r5, pc}

0801c90e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801c90e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c912:	7a43      	ldrb	r3, [r0, #9]
 801c914:	1eda      	subs	r2, r3, #3
 801c916:	b087      	sub	sp, #28
 801c918:	4604      	mov	r4, r0
 801c91a:	b2d2      	uxtb	r2, r2
 801c91c:	460f      	mov	r7, r1
 801c91e:	2900      	cmp	r1, #0
 801c920:	d036      	beq.n	801c990 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801c922:	2a01      	cmp	r2, #1
 801c924:	d932      	bls.n	801c98c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801c926:	1e58      	subs	r0, r3, #1
 801c928:	f1d0 0b00 	rsbs	fp, r0, #0
 801c92c:	eb4b 0b00 	adc.w	fp, fp, r0
 801c930:	1e99      	subs	r1, r3, #2
 801c932:	424b      	negs	r3, r1
 801c934:	414b      	adcs	r3, r1
 801c936:	9303      	str	r3, [sp, #12]
 801c938:	2300      	movs	r3, #0
 801c93a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801c93e:	2500      	movs	r5, #0
 801c940:	8265      	strh	r5, [r4, #18]
 801c942:	82a5      	strh	r5, [r4, #20]
 801c944:	46a9      	mov	r9, r5
 801c946:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801c94a:	2300      	movs	r3, #0
 801c94c:	9305      	str	r3, [sp, #20]
 801c94e:	8823      	ldrh	r3, [r4, #0]
 801c950:	2b20      	cmp	r3, #32
 801c952:	d02b      	beq.n	801c9ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801c954:	eba3 020a 	sub.w	r2, r3, sl
 801c958:	4256      	negs	r6, r2
 801c95a:	4156      	adcs	r6, r2
 801c95c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c960:	4293      	cmp	r3, r2
 801c962:	d004      	beq.n	801c96e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801c964:	4553      	cmp	r3, sl
 801c966:	bf16      	itet	ne
 801c968:	4699      	movne	r9, r3
 801c96a:	2601      	moveq	r6, #1
 801c96c:	2600      	movne	r6, #0
 801c96e:	ab05      	add	r3, sp, #20
 801c970:	68e2      	ldr	r2, [r4, #12]
 801c972:	7a21      	ldrb	r1, [r4, #8]
 801c974:	6860      	ldr	r0, [r4, #4]
 801c976:	f002 fcfb 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c97a:	8020      	strh	r0, [r4, #0]
 801c97c:	b9c8      	cbnz	r0, 801c9b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801c97e:	8b22      	ldrh	r2, [r4, #24]
 801c980:	2300      	movs	r3, #0
 801c982:	4611      	mov	r1, r2
 801c984:	4620      	mov	r0, r4
 801c986:	f7ff ffb2 	bl	801c8ee <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801c98a:	e066      	b.n	801ca5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801c98c:	468b      	mov	fp, r1
 801c98e:	e7cf      	b.n	801c930 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801c990:	3b01      	subs	r3, #1
 801c992:	2a01      	cmp	r2, #1
 801c994:	bf8c      	ite	hi
 801c996:	2200      	movhi	r2, #0
 801c998:	2201      	movls	r2, #1
 801c99a:	2b01      	cmp	r3, #1
 801c99c:	bf8c      	ite	hi
 801c99e:	2300      	movhi	r3, #0
 801c9a0:	2301      	movls	r3, #1
 801c9a2:	9202      	str	r2, [sp, #8]
 801c9a4:	9301      	str	r3, [sp, #4]
 801c9a6:	9103      	str	r1, [sp, #12]
 801c9a8:	468b      	mov	fp, r1
 801c9aa:	e7c8      	b.n	801c93e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801c9ac:	4699      	mov	r9, r3
 801c9ae:	2601      	movs	r6, #1
 801c9b0:	e7dd      	b.n	801c96e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801c9b2:	8ae3      	ldrh	r3, [r4, #22]
 801c9b4:	280a      	cmp	r0, #10
 801c9b6:	f103 0301 	add.w	r3, r3, #1
 801c9ba:	82e3      	strh	r3, [r4, #22]
 801c9bc:	d0df      	beq.n	801c97e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801c9be:	9a05      	ldr	r2, [sp, #20]
 801c9c0:	bb42      	cbnz	r2, 801ca14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801c9c2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c9c6:	4298      	cmp	r0, r3
 801c9c8:	d001      	beq.n	801c9ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801c9ca:	4550      	cmp	r0, sl
 801c9cc:	d1bd      	bne.n	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801c9ce:	8823      	ldrh	r3, [r4, #0]
 801c9d0:	8b21      	ldrh	r1, [r4, #24]
 801c9d2:	2b20      	cmp	r3, #32
 801c9d4:	d001      	beq.n	801c9da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801c9d6:	4553      	cmp	r3, sl
 801c9d8:	d131      	bne.n	801ca3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801c9da:	2e00      	cmp	r6, #0
 801c9dc:	bf0a      	itet	eq
 801c9de:	460d      	moveq	r5, r1
 801c9e0:	4630      	movne	r0, r6
 801c9e2:	2001      	moveq	r0, #1
 801c9e4:	440a      	add	r2, r1
 801c9e6:	8aa3      	ldrh	r3, [r4, #20]
 801c9e8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801c9ec:	b292      	uxth	r2, r2
 801c9ee:	8322      	strh	r2, [r4, #24]
 801c9f0:	4413      	add	r3, r2
 801c9f2:	2f00      	cmp	r7, #0
 801c9f4:	d03a      	beq.n	801ca6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801c9f6:	f1bb 0f00 	cmp.w	fp, #0
 801c9fa:	d102      	bne.n	801ca02 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801c9fc:	9903      	ldr	r1, [sp, #12]
 801c9fe:	b301      	cbz	r1, 801ca42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ca00:	b1f8      	cbz	r0, 801ca42 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801ca02:	8ba1      	ldrh	r1, [r4, #28]
 801ca04:	4419      	add	r1, r3
 801ca06:	458c      	cmp	ip, r1
 801ca08:	da2a      	bge.n	801ca60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ca0a:	8a61      	ldrh	r1, [r4, #18]
 801ca0c:	b341      	cbz	r1, 801ca60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801ca0e:	4563      	cmp	r3, ip
 801ca10:	dd9b      	ble.n	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca12:	e01c      	b.n	801ca4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801ca14:	8893      	ldrh	r3, [r2, #4]
 801ca16:	8023      	strh	r3, [r4, #0]
 801ca18:	f892 800d 	ldrb.w	r8, [r2, #13]
 801ca1c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801ca20:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801ca24:	f892 800a 	ldrb.w	r8, [r2, #10]
 801ca28:	ea48 0800 	orr.w	r8, r8, r0
 801ca2c:	68e0      	ldr	r0, [r4, #12]
 801ca2e:	6803      	ldr	r3, [r0, #0]
 801ca30:	4649      	mov	r1, r9
 801ca32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca34:	4798      	blx	r3
 801ca36:	eb08 0200 	add.w	r2, r8, r0
 801ca3a:	b292      	uxth	r2, r2
 801ca3c:	e7c7      	b.n	801c9ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801ca3e:	2000      	movs	r0, #0
 801ca40:	e7d0      	b.n	801c9e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801ca42:	4563      	cmp	r3, ip
 801ca44:	dd81      	ble.n	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca46:	8a63      	ldrh	r3, [r4, #18]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	f43f af7e 	beq.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca4e:	2301      	movs	r3, #1
 801ca50:	77a3      	strb	r3, [r4, #30]
 801ca52:	8ba2      	ldrh	r2, [r4, #28]
 801ca54:	8b63      	ldrh	r3, [r4, #26]
 801ca56:	4413      	add	r3, r2
 801ca58:	8363      	strh	r3, [r4, #26]
 801ca5a:	b007      	add	sp, #28
 801ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca60:	2300      	movs	r3, #0
 801ca62:	4611      	mov	r1, r2
 801ca64:	4620      	mov	r0, r4
 801ca66:	f7ff ff42 	bl	801c8ee <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801ca6a:	e76e      	b.n	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca6c:	4563      	cmp	r3, ip
 801ca6e:	dd14      	ble.n	801ca9a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801ca70:	9b02      	ldr	r3, [sp, #8]
 801ca72:	b113      	cbz	r3, 801ca7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801ca74:	2301      	movs	r3, #1
 801ca76:	460a      	mov	r2, r1
 801ca78:	e783      	b.n	801c982 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801ca7a:	9b01      	ldr	r3, [sp, #4]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	f43f af64 	beq.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca82:	2800      	cmp	r0, #0
 801ca84:	f47f af61 	bne.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca88:	b116      	cbz	r6, 801ca90 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801ca8a:	2301      	movs	r3, #1
 801ca8c:	462a      	mov	r2, r5
 801ca8e:	e779      	b.n	801c984 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801ca90:	8a63      	ldrh	r3, [r4, #18]
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	f43f af59 	beq.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801ca98:	e7df      	b.n	801ca5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	f47f af55 	bne.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801caa0:	2e00      	cmp	r6, #0
 801caa2:	f43f af52 	beq.w	801c94a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801caa6:	2301      	movs	r3, #1
 801caa8:	462a      	mov	r2, r5
 801caaa:	e7db      	b.n	801ca64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801caac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801caac:	b530      	push	{r4, r5, lr}
 801caae:	4605      	mov	r5, r0
 801cab0:	b08b      	sub	sp, #44	; 0x2c
 801cab2:	b191      	cbz	r1, 801cada <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801cab4:	e9cd 3100 	strd	r3, r1, [sp]
 801cab8:	4613      	mov	r3, r2
 801caba:	4601      	mov	r1, r0
 801cabc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801cac0:	a802      	add	r0, sp, #8
 801cac2:	f7ff fd09 	bl	801c4d8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801cac6:	2401      	movs	r4, #1
 801cac8:	2100      	movs	r1, #0
 801caca:	a802      	add	r0, sp, #8
 801cacc:	f7ff ff1f 	bl	801c90e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801cad0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cad4:	b163      	cbz	r3, 801caf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801cad6:	3401      	adds	r4, #1
 801cad8:	e7f6      	b.n	801cac8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801cada:	f002 fd17 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cade:	2401      	movs	r4, #1
 801cae0:	280a      	cmp	r0, #10
 801cae2:	4628      	mov	r0, r5
 801cae4:	bf08      	it	eq
 801cae6:	3401      	addeq	r4, #1
 801cae8:	f002 fd10 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801caec:	2800      	cmp	r0, #0
 801caee:	d1f7      	bne.n	801cae0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801caf0:	b2a0      	uxth	r0, r4
 801caf2:	b00b      	add	sp, #44	; 0x2c
 801caf4:	bd30      	pop	{r4, r5, pc}

0801caf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801caf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cafa:	b0e5      	sub	sp, #404	; 0x194
 801cafc:	4689      	mov	r9, r1
 801cafe:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801cb02:	900a      	str	r0, [sp, #40]	; 0x28
 801cb04:	461c      	mov	r4, r3
 801cb06:	f1ba 0f00 	cmp.w	sl, #0
 801cb0a:	f000 80b4 	beq.w	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	f000 80b0 	beq.w	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cb16:	7ba3      	ldrb	r3, [r4, #14]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	f000 80ac 	beq.w	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cb1e:	6810      	ldr	r0, [r2, #0]
 801cb20:	6851      	ldr	r1, [r2, #4]
 801cb22:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801cb26:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801cb2a:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801cb2e:	4643      	mov	r3, r8
 801cb30:	c303      	stmia	r3!, {r0, r1}
 801cb32:	2500      	movs	r5, #0
 801cb34:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801cb38:	79a2      	ldrb	r2, [r4, #6]
 801cb3a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cb3e:	a90f      	add	r1, sp, #60	; 0x3c
 801cb40:	4640      	mov	r0, r8
 801cb42:	950f      	str	r5, [sp, #60]	; 0x3c
 801cb44:	f7ff fd40 	bl	801c5c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801cb48:	a90f      	add	r1, sp, #60	; 0x3c
 801cb4a:	4608      	mov	r0, r1
 801cb4c:	79a2      	ldrb	r2, [r4, #6]
 801cb4e:	af19      	add	r7, sp, #100	; 0x64
 801cb50:	f7ff fd3a 	bl	801c5c8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801cb54:	4638      	mov	r0, r7
 801cb56:	f002 f8ad 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801cb5a:	6820      	ldr	r0, [r4, #0]
 801cb5c:	6803      	ldr	r3, [r0, #0]
 801cb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb60:	4798      	blx	r3
 801cb62:	4606      	mov	r6, r0
 801cb64:	6820      	ldr	r0, [r4, #0]
 801cb66:	6803      	ldr	r3, [r0, #0]
 801cb68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb6a:	4798      	blx	r3
 801cb6c:	4633      	mov	r3, r6
 801cb6e:	9000      	str	r0, [sp, #0]
 801cb70:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801cb72:	4651      	mov	r1, sl
 801cb74:	4638      	mov	r0, r7
 801cb76:	f002 f8f8 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb7a:	6820      	ldr	r0, [r4, #0]
 801cb7c:	7923      	ldrb	r3, [r4, #4]
 801cb7e:	9308      	str	r3, [sp, #32]
 801cb80:	6803      	ldr	r3, [r0, #0]
 801cb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb84:	4798      	blx	r3
 801cb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb8a:	181e      	adds	r6, r3, r0
 801cb8c:	42ae      	cmp	r6, r5
 801cb8e:	dd06      	ble.n	801cb9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801cb90:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801cb94:	4282      	cmp	r2, r0
 801cb96:	bfa4      	itt	ge
 801cb98:	189d      	addge	r5, r3, r2
 801cb9a:	fb95 f5f6 	sdivge	r5, r5, r6
 801cb9e:	a832      	add	r0, sp, #200	; 0xc8
 801cba0:	f002 f888 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801cba4:	7c23      	ldrb	r3, [r4, #16]
 801cba6:	b17b      	cbz	r3, 801cbc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801cba8:	6820      	ldr	r0, [r4, #0]
 801cbaa:	6803      	ldr	r3, [r0, #0]
 801cbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cbae:	4798      	blx	r3
 801cbb0:	4683      	mov	fp, r0
 801cbb2:	6820      	ldr	r0, [r4, #0]
 801cbb4:	6803      	ldr	r3, [r0, #0]
 801cbb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cbb8:	4798      	blx	r3
 801cbba:	465b      	mov	r3, fp
 801cbbc:	9000      	str	r0, [sp, #0]
 801cbbe:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801cbc0:	4651      	mov	r1, sl
 801cbc2:	a832      	add	r0, sp, #200	; 0xc8
 801cbc4:	f002 f8d1 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cbc8:	7be1      	ldrb	r1, [r4, #15]
 801cbca:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801cbce:	7963      	ldrb	r3, [r4, #5]
 801cbd0:	1a52      	subs	r2, r2, r1
 801cbd2:	7c21      	ldrb	r1, [r4, #16]
 801cbd4:	9101      	str	r1, [sp, #4]
 801cbd6:	6821      	ldr	r1, [r4, #0]
 801cbd8:	9100      	str	r1, [sp, #0]
 801cbda:	b292      	uxth	r2, r2
 801cbdc:	a932      	add	r1, sp, #200	; 0xc8
 801cbde:	a811      	add	r0, sp, #68	; 0x44
 801cbe0:	f7ff fc7a 	bl	801c4d8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801cbe4:	7c23      	ldrb	r3, [r4, #16]
 801cbe6:	b9bb      	cbnz	r3, 801cc18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801cbe8:	fa1f fa86 	uxth.w	sl, r6
 801cbec:	2d00      	cmp	r5, #0
 801cbee:	dd45      	ble.n	801cc7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801cbf0:	4638      	mov	r0, r7
 801cbf2:	f002 fc8b 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cbf6:	2800      	cmp	r0, #0
 801cbf8:	d03d      	beq.n	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cbfa:	280a      	cmp	r0, #10
 801cbfc:	d1f6      	bne.n	801cbec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801cbfe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801cc02:	4453      	add	r3, sl
 801cc04:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801cc08:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801cc0c:	eba3 030a 	sub.w	r3, r3, sl
 801cc10:	3d01      	subs	r5, #1
 801cc12:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cc16:	e7e9      	b.n	801cbec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801cc18:	0073      	lsls	r3, r6, #1
 801cc1a:	9309      	str	r3, [sp, #36]	; 0x24
 801cc1c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801cc20:	fa1f fa86 	uxth.w	sl, r6
 801cc24:	2d00      	cmp	r5, #0
 801cc26:	dd29      	ble.n	801cc7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801cc28:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801cc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc2e:	428b      	cmp	r3, r1
 801cc30:	bfd4      	ite	le
 801cc32:	2100      	movle	r1, #0
 801cc34:	2101      	movgt	r1, #1
 801cc36:	a811      	add	r0, sp, #68	; 0x44
 801cc38:	f7ff fe69 	bl	801c90e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801cc3c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801cc40:	3b01      	subs	r3, #1
 801cc42:	b29b      	uxth	r3, r3
 801cc44:	455b      	cmp	r3, fp
 801cc46:	930b      	str	r3, [sp, #44]	; 0x2c
 801cc48:	d005      	beq.n	801cc56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801cc4a:	7961      	ldrb	r1, [r4, #5]
 801cc4c:	4638      	mov	r0, r7
 801cc4e:	f7f9 fd6b 	bl	8016728 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc54:	e7f4      	b.n	801cc40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801cc56:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801cc5a:	4453      	add	r3, sl
 801cc5c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801cc60:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801cc64:	eba3 030a 	sub.w	r3, r3, sl
 801cc68:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801cc6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cc70:	3d01      	subs	r5, #1
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d1d6      	bne.n	801cc24 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801cc76:	b065      	add	sp, #404	; 0x194
 801cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc7c:	0075      	lsls	r5, r6, #1
 801cc7e:	f04f 0a00 	mov.w	sl, #0
 801cc82:	7c23      	ldrb	r3, [r4, #16]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d066      	beq.n	801cd56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801cc88:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801cc8c:	428d      	cmp	r5, r1
 801cc8e:	bfd4      	ite	le
 801cc90:	2100      	movle	r1, #0
 801cc92:	2101      	movgt	r1, #1
 801cc94:	a811      	add	r0, sp, #68	; 0x44
 801cc96:	f7ff fe3a 	bl	801c90e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801cc9a:	9b08      	ldr	r3, [sp, #32]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d055      	beq.n	801cd4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801cca0:	f894 b010 	ldrb.w	fp, [r4, #16]
 801cca4:	2264      	movs	r2, #100	; 0x64
 801cca6:	4639      	mov	r1, r7
 801cca8:	a84b      	add	r0, sp, #300	; 0x12c
 801ccaa:	f00e fea1 	bl	802b9f0 <memcpy>
 801ccae:	f1bb 0f00 	cmp.w	fp, #0
 801ccb2:	d058      	beq.n	801cd66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801ccb4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ccb8:	7922      	ldrb	r2, [r4, #4]
 801ccba:	2a01      	cmp	r2, #1
 801ccbc:	d13c      	bne.n	801cd38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801ccbe:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801ccc2:	1ac0      	subs	r0, r0, r3
 801ccc4:	2302      	movs	r3, #2
 801ccc6:	fb90 f0f3 	sdiv	r0, r0, r3
 801ccca:	b200      	sxth	r0, r0
 801cccc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801ccd0:	4418      	add	r0, r3
 801ccd2:	7c23      	ldrb	r3, [r4, #16]
 801ccd4:	b200      	sxth	r0, r0
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d03a      	beq.n	801cd50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801ccda:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801ccde:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801cce2:	9000      	str	r0, [sp, #0]
 801cce4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801cce8:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ccec:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ccee:	e9cd a703 	strd	sl, r7, [sp, #12]
 801ccf2:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801ccf6:	464a      	mov	r2, r9
 801ccf8:	2100      	movs	r1, #0
 801ccfa:	f7ff fc96 	bl	801c62a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801ccfe:	2800      	cmp	r0, #0
 801cd00:	d1b9      	bne.n	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cd02:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801cd06:	b2b2      	uxth	r2, r6
 801cd08:	4611      	mov	r1, r2
 801cd0a:	4413      	add	r3, r2
 801cd0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801cd10:	1a52      	subs	r2, r2, r1
 801cd12:	7c21      	ldrb	r1, [r4, #16]
 801cd14:	b21b      	sxth	r3, r3
 801cd16:	b212      	sxth	r2, r2
 801cd18:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801cd1c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801cd20:	b109      	cbz	r1, 801cd26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801cd22:	42b2      	cmp	r2, r6
 801cd24:	dba7      	blt.n	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cd26:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801cd2a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801cd2e:	440a      	add	r2, r1
 801cd30:	b212      	sxth	r2, r2
 801cd32:	4293      	cmp	r3, r2
 801cd34:	dda5      	ble.n	801cc82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801cd36:	e79e      	b.n	801cc76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801cd38:	2a02      	cmp	r2, #2
 801cd3a:	d105      	bne.n	801cd48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801cd3c:	7be2      	ldrb	r2, [r4, #15]
 801cd3e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801cd42:	1a80      	subs	r0, r0, r2
 801cd44:	1ac0      	subs	r0, r0, r3
 801cd46:	e7c0      	b.n	801ccca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801cd48:	2000      	movs	r0, #0
 801cd4a:	e7bf      	b.n	801cccc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801cd4c:	7be0      	ldrb	r0, [r4, #15]
 801cd4e:	e7bd      	b.n	801cccc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801cd50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801cd54:	e7c3      	b.n	801ccde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801cd56:	9b08      	ldr	r3, [sp, #32]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d0f7      	beq.n	801cd4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801cd5c:	2264      	movs	r2, #100	; 0x64
 801cd5e:	4639      	mov	r1, r7
 801cd60:	a84b      	add	r0, sp, #300	; 0x12c
 801cd62:	f00e fe45 	bl	802b9f0 <memcpy>
 801cd66:	2300      	movs	r3, #0
 801cd68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801cd6c:	6821      	ldr	r1, [r4, #0]
 801cd6e:	a84b      	add	r0, sp, #300	; 0x12c
 801cd70:	f7ff fbee 	bl	801c550 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801cd74:	b203      	sxth	r3, r0
 801cd76:	e79f      	b.n	801ccb8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801cd78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801cd78:	2b03      	cmp	r3, #3
 801cd7a:	d818      	bhi.n	801cdae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801cd7c:	e8df f003 	tbb	[pc, r3]
 801cd80:	130d0602 	.word	0x130d0602
 801cd84:	f9b0 2000 	ldrsh.w	r2, [r0]
 801cd88:	1850      	adds	r0, r2, r1
 801cd8a:	4770      	bx	lr
 801cd8c:	8803      	ldrh	r3, [r0, #0]
 801cd8e:	8880      	ldrh	r0, [r0, #4]
 801cd90:	4418      	add	r0, r3
 801cd92:	b200      	sxth	r0, r0
 801cd94:	1a80      	subs	r0, r0, r2
 801cd96:	3801      	subs	r0, #1
 801cd98:	4770      	bx	lr
 801cd9a:	8803      	ldrh	r3, [r0, #0]
 801cd9c:	8880      	ldrh	r0, [r0, #4]
 801cd9e:	4418      	add	r0, r3
 801cda0:	b200      	sxth	r0, r0
 801cda2:	1a40      	subs	r0, r0, r1
 801cda4:	e7f7      	b.n	801cd96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801cda6:	f9b0 0000 	ldrsh.w	r0, [r0]
 801cdaa:	4410      	add	r0, r2
 801cdac:	4770      	bx	lr
 801cdae:	2000      	movs	r0, #0
 801cdb0:	4770      	bx	lr

0801cdb2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801cdb2:	2b03      	cmp	r3, #3
 801cdb4:	d817      	bhi.n	801cde6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801cdb6:	e8df f003 	tbb	[pc, r3]
 801cdba:	0602      	.short	0x0602
 801cdbc:	1009      	.short	0x1009
 801cdbe:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801cdc2:	1850      	adds	r0, r2, r1
 801cdc4:	4770      	bx	lr
 801cdc6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801cdca:	e7fa      	b.n	801cdc2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801cdcc:	8843      	ldrh	r3, [r0, #2]
 801cdce:	88c0      	ldrh	r0, [r0, #6]
 801cdd0:	4418      	add	r0, r3
 801cdd2:	b200      	sxth	r0, r0
 801cdd4:	1a80      	subs	r0, r0, r2
 801cdd6:	3801      	subs	r0, #1
 801cdd8:	4770      	bx	lr
 801cdda:	8843      	ldrh	r3, [r0, #2]
 801cddc:	88c0      	ldrh	r0, [r0, #6]
 801cdde:	4418      	add	r0, r3
 801cde0:	b200      	sxth	r0, r0
 801cde2:	1a40      	subs	r0, r0, r1
 801cde4:	e7f7      	b.n	801cdd6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801cde6:	2000      	movs	r0, #0
 801cde8:	4770      	bx	lr
	...

0801cdec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801cdec:	4b01      	ldr	r3, [pc, #4]	; (801cdf4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801cdee:	2200      	movs	r2, #0
 801cdf0:	601a      	str	r2, [r3, #0]
 801cdf2:	4770      	bx	lr
 801cdf4:	2000b4cc 	.word	0x2000b4cc

0801cdf8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801cdf8:	4603      	mov	r3, r0
 801cdfa:	b1c8      	cbz	r0, 801ce30 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801cdfc:	0c02      	lsrs	r2, r0, #16
 801cdfe:	0412      	lsls	r2, r2, #16
 801ce00:	b9a2      	cbnz	r2, 801ce2c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ce02:	0403      	lsls	r3, r0, #16
 801ce04:	2010      	movs	r0, #16
 801ce06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ce0a:	bf04      	itt	eq
 801ce0c:	021b      	lsleq	r3, r3, #8
 801ce0e:	3008      	addeq	r0, #8
 801ce10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ce14:	bf04      	itt	eq
 801ce16:	011b      	lsleq	r3, r3, #4
 801ce18:	3004      	addeq	r0, #4
 801ce1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ce1e:	bf04      	itt	eq
 801ce20:	009b      	lsleq	r3, r3, #2
 801ce22:	3002      	addeq	r0, #2
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	db04      	blt.n	801ce32 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ce28:	3001      	adds	r0, #1
 801ce2a:	4770      	bx	lr
 801ce2c:	2000      	movs	r0, #0
 801ce2e:	e7ea      	b.n	801ce06 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ce30:	2020      	movs	r0, #32
 801ce32:	4770      	bx	lr

0801ce34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ce34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce38:	b087      	sub	sp, #28
 801ce3a:	4681      	mov	r9, r0
 801ce3c:	4698      	mov	r8, r3
 801ce3e:	4610      	mov	r0, r2
 801ce40:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ce44:	460d      	mov	r5, r1
 801ce46:	b981      	cbnz	r1, 801ce6a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ce48:	b14b      	cbz	r3, 801ce5e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ce4a:	460b      	mov	r3, r1
 801ce4c:	e9cd 4700 	strd	r4, r7, [sp]
 801ce50:	464a      	mov	r2, r9
 801ce52:	4641      	mov	r1, r8
 801ce54:	f7ff ffee 	bl	801ce34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ce58:	b007      	add	sp, #28
 801ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce5e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce62:	603b      	str	r3, [r7, #0]
 801ce64:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ce68:	e7f6      	b.n	801ce58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ce6a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ce6e:	d107      	bne.n	801ce80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ce70:	fb09 f602 	mul.w	r6, r9, r2
 801ce74:	fbb6 f0f4 	udiv	r0, r6, r4
 801ce78:	fb04 6610 	mls	r6, r4, r0, r6
 801ce7c:	603e      	str	r6, [r7, #0]
 801ce7e:	e7eb      	b.n	801ce58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ce80:	2601      	movs	r6, #1
 801ce82:	408e      	lsls	r6, r1
 801ce84:	3e01      	subs	r6, #1
 801ce86:	4016      	ands	r6, r2
 801ce88:	fa09 fb01 	lsl.w	fp, r9, r1
 801ce8c:	4630      	mov	r0, r6
 801ce8e:	fbbb f3f4 	udiv	r3, fp, r4
 801ce92:	9302      	str	r3, [sp, #8]
 801ce94:	fb0a f303 	mul.w	r3, sl, r3
 801ce98:	9303      	str	r3, [sp, #12]
 801ce9a:	f7ff ffad 	bl	801cdf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ce9e:	464a      	mov	r2, r9
 801cea0:	460b      	mov	r3, r1
 801cea2:	e9cd 4700 	strd	r4, r7, [sp]
 801cea6:	4601      	mov	r1, r0
 801cea8:	4630      	mov	r0, r6
 801ceaa:	f7ff ffc3 	bl	801ce34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ceae:	9b02      	ldr	r3, [sp, #8]
 801ceb0:	fb04 bb13 	mls	fp, r4, r3, fp
 801ceb4:	4606      	mov	r6, r0
 801ceb6:	4658      	mov	r0, fp
 801ceb8:	eb05 0108 	add.w	r1, r5, r8
 801cebc:	f7ff ff9c 	bl	801cdf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801cec0:	ab05      	add	r3, sp, #20
 801cec2:	e9cd 4300 	strd	r4, r3, [sp]
 801cec6:	465a      	mov	r2, fp
 801cec8:	4603      	mov	r3, r0
 801ceca:	4650      	mov	r0, sl
 801cecc:	f7ff ffb2 	bl	801ce34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ced0:	6839      	ldr	r1, [r7, #0]
 801ced2:	9a05      	ldr	r2, [sp, #20]
 801ced4:	9b03      	ldr	r3, [sp, #12]
 801ced6:	4411      	add	r1, r2
 801ced8:	fbb1 f2f4 	udiv	r2, r1, r4
 801cedc:	18d3      	adds	r3, r2, r3
 801cede:	441e      	add	r6, r3
 801cee0:	fb04 1412 	mls	r4, r4, r2, r1
 801cee4:	4430      	add	r0, r6
 801cee6:	603c      	str	r4, [r7, #0]
 801cee8:	e7b6      	b.n	801ce58 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ceea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ceea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ceee:	b085      	sub	sp, #20
 801cef0:	f1b0 0900 	subs.w	r9, r0, #0
 801cef4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cef6:	461d      	mov	r5, r3
 801cef8:	bfbf      	itttt	lt
 801cefa:	6823      	ldrlt	r3, [r4, #0]
 801cefc:	425b      	neglt	r3, r3
 801cefe:	f1c9 0900 	rsblt	r9, r9, #0
 801cf02:	6023      	strlt	r3, [r4, #0]
 801cf04:	bfb4      	ite	lt
 801cf06:	f04f 36ff 	movlt.w	r6, #4294967295
 801cf0a:	2601      	movge	r6, #1
 801cf0c:	2a00      	cmp	r2, #0
 801cf0e:	4617      	mov	r7, r2
 801cf10:	da04      	bge.n	801cf1c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801cf12:	6823      	ldr	r3, [r4, #0]
 801cf14:	425b      	negs	r3, r3
 801cf16:	4257      	negs	r7, r2
 801cf18:	4276      	negs	r6, r6
 801cf1a:	6023      	str	r3, [r4, #0]
 801cf1c:	2d00      	cmp	r5, #0
 801cf1e:	4638      	mov	r0, r7
 801cf20:	bfba      	itte	lt
 801cf22:	426d      	neglt	r5, r5
 801cf24:	f04f 38ff 	movlt.w	r8, #4294967295
 801cf28:	f04f 0801 	movge.w	r8, #1
 801cf2c:	f7ff ff64 	bl	801cdf8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801cf30:	ab03      	add	r3, sp, #12
 801cf32:	e9cd 5300 	strd	r5, r3, [sp]
 801cf36:	463a      	mov	r2, r7
 801cf38:	4603      	mov	r3, r0
 801cf3a:	4648      	mov	r0, r9
 801cf3c:	f7ff ff7a 	bl	801ce34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801cf40:	6823      	ldr	r3, [r4, #0]
 801cf42:	9a03      	ldr	r2, [sp, #12]
 801cf44:	4546      	cmp	r6, r8
 801cf46:	441a      	add	r2, r3
 801cf48:	fb92 f3f5 	sdiv	r3, r2, r5
 801cf4c:	4418      	add	r0, r3
 801cf4e:	bf18      	it	ne
 801cf50:	4240      	negne	r0, r0
 801cf52:	fb05 2313 	mls	r3, r5, r3, r2
 801cf56:	1c72      	adds	r2, r6, #1
 801cf58:	6023      	str	r3, [r4, #0]
 801cf5a:	d105      	bne.n	801cf68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	f1c3 0200 	rsb	r2, r3, #0
 801cf62:	db0b      	blt.n	801cf7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801cf64:	6022      	str	r2, [r4, #0]
 801cf66:	e006      	b.n	801cf76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cf68:	2e01      	cmp	r6, #1
 801cf6a:	d104      	bne.n	801cf76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	da02      	bge.n	801cf76 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801cf70:	442b      	add	r3, r5
 801cf72:	3801      	subs	r0, #1
 801cf74:	6023      	str	r3, [r4, #0]
 801cf76:	b005      	add	sp, #20
 801cf78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf7c:	3801      	subs	r0, #1
 801cf7e:	1b52      	subs	r2, r2, r5
 801cf80:	e7f0      	b.n	801cf64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801cf84 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801cf84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801cf88:	4c1c      	ldr	r4, [pc, #112]	; (801cffc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801cf8a:	6807      	ldr	r7, [r0, #0]
 801cf8c:	69a3      	ldr	r3, [r4, #24]
 801cf8e:	4605      	mov	r5, r0
 801cf90:	b92b      	cbnz	r3, 801cf9e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801cf92:	6840      	ldr	r0, [r0, #4]
 801cf94:	e9c5 7000 	strd	r7, r0, [r5]
 801cf98:	b004      	add	sp, #16
 801cf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf9e:	68a2      	ldr	r2, [r4, #8]
 801cfa0:	6820      	ldr	r0, [r4, #0]
 801cfa2:	ae04      	add	r6, sp, #16
 801cfa4:	f04f 0802 	mov.w	r8, #2
 801cfa8:	fb93 f1f8 	sdiv	r1, r3, r8
 801cfac:	440a      	add	r2, r1
 801cfae:	f846 2d04 	str.w	r2, [r6, #-4]!
 801cfb2:	69e1      	ldr	r1, [r4, #28]
 801cfb4:	9600      	str	r6, [sp, #0]
 801cfb6:	463a      	mov	r2, r7
 801cfb8:	f7ff ff97 	bl	801ceea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cfbc:	69a3      	ldr	r3, [r4, #24]
 801cfbe:	686a      	ldr	r2, [r5, #4]
 801cfc0:	6a21      	ldr	r1, [r4, #32]
 801cfc2:	9600      	str	r6, [sp, #0]
 801cfc4:	4607      	mov	r7, r0
 801cfc6:	6860      	ldr	r0, [r4, #4]
 801cfc8:	f7ff ff8f 	bl	801ceea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cfcc:	6962      	ldr	r2, [r4, #20]
 801cfce:	69a3      	ldr	r3, [r4, #24]
 801cfd0:	fb93 f8f8 	sdiv	r8, r3, r8
 801cfd4:	4442      	add	r2, r8
 801cfd6:	9203      	str	r2, [sp, #12]
 801cfd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cfda:	682a      	ldr	r2, [r5, #0]
 801cfdc:	9600      	str	r6, [sp, #0]
 801cfde:	4407      	add	r7, r0
 801cfe0:	68e0      	ldr	r0, [r4, #12]
 801cfe2:	f7ff ff82 	bl	801ceea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cfe6:	9600      	str	r6, [sp, #0]
 801cfe8:	4680      	mov	r8, r0
 801cfea:	69a3      	ldr	r3, [r4, #24]
 801cfec:	686a      	ldr	r2, [r5, #4]
 801cfee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801cff0:	6920      	ldr	r0, [r4, #16]
 801cff2:	f7ff ff7a 	bl	801ceea <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801cff6:	4440      	add	r0, r8
 801cff8:	e7cc      	b.n	801cf94 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801cffa:	bf00      	nop
 801cffc:	2000b4d0 	.word	0x2000b4d0

0801d000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801d000:	4b07      	ldr	r3, [pc, #28]	; (801d020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801d002:	781b      	ldrb	r3, [r3, #0]
 801d004:	2b01      	cmp	r3, #1
 801d006:	d109      	bne.n	801d01c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801d008:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d00c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d010:	8003      	strh	r3, [r0, #0]
 801d012:	4b04      	ldr	r3, [pc, #16]	; (801d024 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801d014:	881b      	ldrh	r3, [r3, #0]
 801d016:	3b01      	subs	r3, #1
 801d018:	1a9b      	subs	r3, r3, r2
 801d01a:	800b      	strh	r3, [r1, #0]
 801d01c:	4770      	bx	lr
 801d01e:	bf00      	nop
 801d020:	2000b4bc 	.word	0x2000b4bc
 801d024:	2000b4b8 	.word	0x2000b4b8

0801d028 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801d028:	b510      	push	{r4, lr}
 801d02a:	4b07      	ldr	r3, [pc, #28]	; (801d048 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801d02c:	781b      	ldrb	r3, [r3, #0]
 801d02e:	2b01      	cmp	r3, #1
 801d030:	d108      	bne.n	801d044 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801d032:	4b06      	ldr	r3, [pc, #24]	; (801d04c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801d034:	880c      	ldrh	r4, [r1, #0]
 801d036:	881b      	ldrh	r3, [r3, #0]
 801d038:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d03c:	3b01      	subs	r3, #1
 801d03e:	1b1b      	subs	r3, r3, r4
 801d040:	8003      	strh	r3, [r0, #0]
 801d042:	800a      	strh	r2, [r1, #0]
 801d044:	bd10      	pop	{r4, pc}
 801d046:	bf00      	nop
 801d048:	2000b4bc 	.word	0x2000b4bc
 801d04c:	2000b4b8 	.word	0x2000b4b8

0801d050 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801d050:	b510      	push	{r4, lr}
 801d052:	4b0a      	ldr	r3, [pc, #40]	; (801d07c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801d054:	781b      	ldrb	r3, [r3, #0]
 801d056:	2b01      	cmp	r3, #1
 801d058:	d10e      	bne.n	801d078 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801d05a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d05e:	8843      	ldrh	r3, [r0, #2]
 801d060:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d064:	8044      	strh	r4, [r0, #2]
 801d066:	18ca      	adds	r2, r1, r3
 801d068:	4b05      	ldr	r3, [pc, #20]	; (801d080 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801d06a:	881b      	ldrh	r3, [r3, #0]
 801d06c:	1a9b      	subs	r3, r3, r2
 801d06e:	8003      	strh	r3, [r0, #0]
 801d070:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d074:	80c3      	strh	r3, [r0, #6]
 801d076:	8081      	strh	r1, [r0, #4]
 801d078:	bd10      	pop	{r4, pc}
 801d07a:	bf00      	nop
 801d07c:	2000b4bc 	.word	0x2000b4bc
 801d080:	2000b4b8 	.word	0x2000b4b8

0801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801d084:	4b08      	ldr	r3, [pc, #32]	; (801d0a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801d086:	781b      	ldrb	r3, [r3, #0]
 801d088:	2b01      	cmp	r3, #1
 801d08a:	d10c      	bne.n	801d0a6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801d08c:	8803      	ldrh	r3, [r0, #0]
 801d08e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801d092:	8842      	ldrh	r2, [r0, #2]
 801d094:	8002      	strh	r2, [r0, #0]
 801d096:	185a      	adds	r2, r3, r1
 801d098:	4b04      	ldr	r3, [pc, #16]	; (801d0ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801d09a:	881b      	ldrh	r3, [r3, #0]
 801d09c:	1a9b      	subs	r3, r3, r2
 801d09e:	8043      	strh	r3, [r0, #2]
 801d0a0:	88c3      	ldrh	r3, [r0, #6]
 801d0a2:	8083      	strh	r3, [r0, #4]
 801d0a4:	80c1      	strh	r1, [r0, #6]
 801d0a6:	4770      	bx	lr
 801d0a8:	2000b4bc 	.word	0x2000b4bc
 801d0ac:	2000b4b8 	.word	0x2000b4b8

0801d0b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801d0b0:	b510      	push	{r4, lr}
 801d0b2:	4b07      	ldr	r3, [pc, #28]	; (801d0d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801d0b4:	781b      	ldrb	r3, [r3, #0]
 801d0b6:	2b01      	cmp	r3, #1
 801d0b8:	d108      	bne.n	801d0cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801d0ba:	f9b1 3000 	ldrsh.w	r3, [r1]
 801d0be:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d0c2:	8003      	strh	r3, [r0, #0]
 801d0c4:	8893      	ldrh	r3, [r2, #4]
 801d0c6:	3b01      	subs	r3, #1
 801d0c8:	1b1b      	subs	r3, r3, r4
 801d0ca:	800b      	strh	r3, [r1, #0]
 801d0cc:	bd10      	pop	{r4, pc}
 801d0ce:	bf00      	nop
 801d0d0:	2000b4bc 	.word	0x2000b4bc

0801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801d0d4:	b510      	push	{r4, lr}
 801d0d6:	4b0a      	ldr	r3, [pc, #40]	; (801d100 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	2b01      	cmp	r3, #1
 801d0dc:	460a      	mov	r2, r1
 801d0de:	d10d      	bne.n	801d0fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801d0e0:	8881      	ldrh	r1, [r0, #4]
 801d0e2:	8803      	ldrh	r3, [r0, #0]
 801d0e4:	440b      	add	r3, r1
 801d0e6:	4601      	mov	r1, r0
 801d0e8:	3b01      	subs	r3, #1
 801d0ea:	f821 3b02 	strh.w	r3, [r1], #2
 801d0ee:	f7ff ffdf 	bl	801d0b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801d0f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d0f6:	88c2      	ldrh	r2, [r0, #6]
 801d0f8:	8082      	strh	r2, [r0, #4]
 801d0fa:	80c3      	strh	r3, [r0, #6]
 801d0fc:	bd10      	pop	{r4, pc}
 801d0fe:	bf00      	nop
 801d100:	2000b4bc 	.word	0x2000b4bc

0801d104 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801d104:	b570      	push	{r4, r5, r6, lr}
 801d106:	4c0b      	ldr	r4, [pc, #44]	; (801d134 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801d108:	2300      	movs	r3, #0
 801d10a:	4605      	mov	r5, r0
 801d10c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801d110:	6820      	ldr	r0, [r4, #0]
 801d112:	460e      	mov	r6, r1
 801d114:	b110      	cbz	r0, 801d11c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801d116:	6803      	ldr	r3, [r0, #0]
 801d118:	695b      	ldr	r3, [r3, #20]
 801d11a:	4798      	blx	r3
 801d11c:	6026      	str	r6, [r4, #0]
 801d11e:	6833      	ldr	r3, [r6, #0]
 801d120:	4630      	mov	r0, r6
 801d122:	68db      	ldr	r3, [r3, #12]
 801d124:	4798      	blx	r3
 801d126:	682b      	ldr	r3, [r5, #0]
 801d128:	4628      	mov	r0, r5
 801d12a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d130:	4718      	bx	r3
 801d132:	bf00      	nop
 801d134:	2000b500 	.word	0x2000b500

0801d138 <_ZN8touchgfx11Application13requestRedrawEv>:
 801d138:	4b06      	ldr	r3, [pc, #24]	; (801d154 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801d13a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d13e:	4b06      	ldr	r3, [pc, #24]	; (801d158 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801d140:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801d144:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d148:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801d14c:	2100      	movs	r1, #0
 801d14e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801d152:	4770      	bx	lr
 801d154:	2000b4b8 	.word	0x2000b4b8
 801d158:	2000b4ba 	.word	0x2000b4ba

0801d15c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801d15c:	4b03      	ldr	r3, [pc, #12]	; (801d16c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801d15e:	6818      	ldr	r0, [r3, #0]
 801d160:	b110      	cbz	r0, 801d168 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801d162:	6803      	ldr	r3, [r0, #0]
 801d164:	699b      	ldr	r3, [r3, #24]
 801d166:	4718      	bx	r3
 801d168:	4770      	bx	lr
 801d16a:	bf00      	nop
 801d16c:	2000b500 	.word	0x2000b500

0801d170 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801d170:	4770      	bx	lr
	...

0801d174 <_ZN8touchgfx11Application4drawEv>:
 801d174:	b507      	push	{r0, r1, r2, lr}
 801d176:	4b09      	ldr	r3, [pc, #36]	; (801d19c <_ZN8touchgfx11Application4drawEv+0x28>)
 801d178:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d17c:	4b08      	ldr	r3, [pc, #32]	; (801d1a0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801d17e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d182:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d186:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d18a:	6803      	ldr	r3, [r0, #0]
 801d18c:	2100      	movs	r1, #0
 801d18e:	9100      	str	r1, [sp, #0]
 801d190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d192:	4669      	mov	r1, sp
 801d194:	4798      	blx	r3
 801d196:	b003      	add	sp, #12
 801d198:	f85d fb04 	ldr.w	pc, [sp], #4
 801d19c:	2000b4b8 	.word	0x2000b4b8
 801d1a0:	2000b4ba 	.word	0x2000b4ba

0801d1a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801d1a4:	4b03      	ldr	r3, [pc, #12]	; (801d1b4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801d1a6:	6818      	ldr	r0, [r3, #0]
 801d1a8:	b110      	cbz	r0, 801d1b0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801d1aa:	6803      	ldr	r3, [r0, #0]
 801d1ac:	69db      	ldr	r3, [r3, #28]
 801d1ae:	4718      	bx	r3
 801d1b0:	4770      	bx	lr
 801d1b2:	bf00      	nop
 801d1b4:	2000b500 	.word	0x2000b500

0801d1b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801d1b8:	4b03      	ldr	r3, [pc, #12]	; (801d1c8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801d1ba:	6818      	ldr	r0, [r3, #0]
 801d1bc:	b110      	cbz	r0, 801d1c4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801d1be:	6803      	ldr	r3, [r0, #0]
 801d1c0:	6a1b      	ldr	r3, [r3, #32]
 801d1c2:	4718      	bx	r3
 801d1c4:	4770      	bx	lr
 801d1c6:	bf00      	nop
 801d1c8:	2000b500 	.word	0x2000b500

0801d1cc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801d1d2:	4770      	bx	lr

0801d1d4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801d1d4:	4b03      	ldr	r3, [pc, #12]	; (801d1e4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801d1d6:	6818      	ldr	r0, [r3, #0]
 801d1d8:	b110      	cbz	r0, 801d1e0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801d1da:	6803      	ldr	r3, [r0, #0]
 801d1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1de:	4718      	bx	r3
 801d1e0:	4770      	bx	lr
 801d1e2:	bf00      	nop
 801d1e4:	2000b500 	.word	0x2000b500

0801d1e8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801d1e8:	b570      	push	{r4, r5, r6, lr}
 801d1ea:	4d32      	ldr	r5, [pc, #200]	; (801d2b4 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801d1ec:	4604      	mov	r4, r0
 801d1ee:	6828      	ldr	r0, [r5, #0]
 801d1f0:	b140      	cbz	r0, 801d204 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801d1f2:	7a03      	ldrb	r3, [r0, #8]
 801d1f4:	b933      	cbnz	r3, 801d204 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801d1f6:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801d1fa:	6803      	ldr	r3, [r0, #0]
 801d1fc:	689b      	ldr	r3, [r3, #8]
 801d1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d202:	4718      	bx	r3
 801d204:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801d208:	b97b      	cbnz	r3, 801d22a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d20a:	b170      	cbz	r0, 801d22a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d20c:	7a03      	ldrb	r3, [r0, #8]
 801d20e:	b163      	cbz	r3, 801d22a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801d210:	4b29      	ldr	r3, [pc, #164]	; (801d2b8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801d212:	6818      	ldr	r0, [r3, #0]
 801d214:	b110      	cbz	r0, 801d21c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801d216:	6803      	ldr	r3, [r0, #0]
 801d218:	691b      	ldr	r3, [r3, #16]
 801d21a:	4798      	blx	r3
 801d21c:	6828      	ldr	r0, [r5, #0]
 801d21e:	6803      	ldr	r3, [r0, #0]
 801d220:	68db      	ldr	r3, [r3, #12]
 801d222:	4798      	blx	r3
 801d224:	2301      	movs	r3, #1
 801d226:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801d22a:	2500      	movs	r5, #0
 801d22c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801d230:	42a8      	cmp	r0, r5
 801d232:	dd0c      	ble.n	801d24e <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801d234:	1963      	adds	r3, r4, r5
 801d236:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801d23a:	b132      	cbz	r2, 801d24a <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801d23c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801d240:	4413      	add	r3, r2
 801d242:	6858      	ldr	r0, [r3, #4]
 801d244:	6803      	ldr	r3, [r0, #0]
 801d246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d248:	4798      	blx	r3
 801d24a:	3501      	adds	r5, #1
 801d24c:	e7ee      	b.n	801d22c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801d24e:	2300      	movs	r3, #0
 801d250:	461a      	mov	r2, r3
 801d252:	4298      	cmp	r0, r3
 801d254:	d015      	beq.n	801d282 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801d256:	18e1      	adds	r1, r4, r3
 801d258:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801d25c:	b16d      	cbz	r5, 801d27a <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801d25e:	429a      	cmp	r2, r3
 801d260:	d00a      	beq.n	801d278 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801d262:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801d266:	4431      	add	r1, r6
 801d268:	684e      	ldr	r6, [r1, #4]
 801d26a:	b291      	uxth	r1, r2
 801d26c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d270:	604e      	str	r6, [r1, #4]
 801d272:	18a1      	adds	r1, r4, r2
 801d274:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801d278:	3201      	adds	r2, #1
 801d27a:	3301      	adds	r3, #1
 801d27c:	e7e9      	b.n	801d252 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801d27e:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801d282:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801d286:	4295      	cmp	r5, r2
 801d288:	dd0d      	ble.n	801d2a6 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801d28a:	1e6b      	subs	r3, r5, #1
 801d28c:	b29b      	uxth	r3, r3
 801d28e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801d292:	4618      	mov	r0, r3
 801d294:	3104      	adds	r1, #4
 801d296:	4285      	cmp	r5, r0
 801d298:	ddf1      	ble.n	801d27e <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801d29a:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801d29e:	f841 6c04 	str.w	r6, [r1, #-4]
 801d2a2:	3001      	adds	r0, #1
 801d2a4:	e7f7      	b.n	801d296 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801d2a6:	4b04      	ldr	r3, [pc, #16]	; (801d2b8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801d2a8:	6818      	ldr	r0, [r3, #0]
 801d2aa:	b110      	cbz	r0, 801d2b2 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801d2ac:	6803      	ldr	r3, [r0, #0]
 801d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2b0:	e7a5      	b.n	801d1fe <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801d2b2:	bd70      	pop	{r4, r5, r6, pc}
 801d2b4:	2000b504 	.word	0x2000b504
 801d2b8:	2000b500 	.word	0x2000b500

0801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801d2bc:	b510      	push	{r4, lr}
 801d2be:	f9b1 4000 	ldrsh.w	r4, [r1]
 801d2c2:	888a      	ldrh	r2, [r1, #4]
 801d2c4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d2c8:	4422      	add	r2, r4
 801d2ca:	b212      	sxth	r2, r2
 801d2cc:	4293      	cmp	r3, r2
 801d2ce:	da15      	bge.n	801d2fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d2d0:	8882      	ldrh	r2, [r0, #4]
 801d2d2:	4413      	add	r3, r2
 801d2d4:	b21b      	sxth	r3, r3
 801d2d6:	429c      	cmp	r4, r3
 801d2d8:	da10      	bge.n	801d2fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d2da:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801d2de:	88c9      	ldrh	r1, [r1, #6]
 801d2e0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801d2e4:	4419      	add	r1, r3
 801d2e6:	b209      	sxth	r1, r1
 801d2e8:	428a      	cmp	r2, r1
 801d2ea:	da07      	bge.n	801d2fc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801d2ec:	88c0      	ldrh	r0, [r0, #6]
 801d2ee:	4410      	add	r0, r2
 801d2f0:	b200      	sxth	r0, r0
 801d2f2:	4283      	cmp	r3, r0
 801d2f4:	bfac      	ite	ge
 801d2f6:	2000      	movge	r0, #0
 801d2f8:	2001      	movlt	r0, #1
 801d2fa:	bd10      	pop	{r4, pc}
 801d2fc:	2000      	movs	r0, #0
 801d2fe:	e7fc      	b.n	801d2fa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801d300 <_ZN8touchgfx4Rect10restrictToEss>:
 801d300:	f9b0 3000 	ldrsh.w	r3, [r0]
 801d304:	2b00      	cmp	r3, #0
 801d306:	b510      	push	{r4, lr}
 801d308:	da04      	bge.n	801d314 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801d30a:	8884      	ldrh	r4, [r0, #4]
 801d30c:	4423      	add	r3, r4
 801d30e:	8083      	strh	r3, [r0, #4]
 801d310:	2300      	movs	r3, #0
 801d312:	8003      	strh	r3, [r0, #0]
 801d314:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d318:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801d31c:	1b09      	subs	r1, r1, r4
 801d31e:	428b      	cmp	r3, r1
 801d320:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d324:	bfc8      	it	gt
 801d326:	8081      	strhgt	r1, [r0, #4]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	da04      	bge.n	801d336 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801d32c:	88c1      	ldrh	r1, [r0, #6]
 801d32e:	440b      	add	r3, r1
 801d330:	80c3      	strh	r3, [r0, #6]
 801d332:	2300      	movs	r3, #0
 801d334:	8043      	strh	r3, [r0, #2]
 801d336:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d33a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801d33e:	1a52      	subs	r2, r2, r1
 801d340:	4293      	cmp	r3, r2
 801d342:	bfc8      	it	gt
 801d344:	80c2      	strhgt	r2, [r0, #6]
 801d346:	bd10      	pop	{r4, pc}

0801d348 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801d348:	b510      	push	{r4, lr}
 801d34a:	4b10      	ldr	r3, [pc, #64]	; (801d38c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801d34c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d350:	4b0f      	ldr	r3, [pc, #60]	; (801d390 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801d352:	460c      	mov	r4, r1
 801d354:	4620      	mov	r0, r4
 801d356:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d35a:	f7ff ffd1 	bl	801d300 <_ZN8touchgfx4Rect10restrictToEss>
 801d35e:	4b0d      	ldr	r3, [pc, #52]	; (801d394 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801d360:	6818      	ldr	r0, [r3, #0]
 801d362:	b190      	cbz	r0, 801d38a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801d364:	6803      	ldr	r3, [r0, #0]
 801d366:	4621      	mov	r1, r4
 801d368:	689b      	ldr	r3, [r3, #8]
 801d36a:	4798      	blx	r3
 801d36c:	4b0a      	ldr	r3, [pc, #40]	; (801d398 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801d36e:	6818      	ldr	r0, [r3, #0]
 801d370:	b118      	cbz	r0, 801d37a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801d372:	6803      	ldr	r3, [r0, #0]
 801d374:	4621      	mov	r1, r4
 801d376:	689b      	ldr	r3, [r3, #8]
 801d378:	4798      	blx	r3
 801d37a:	4b08      	ldr	r3, [pc, #32]	; (801d39c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801d37c:	6818      	ldr	r0, [r3, #0]
 801d37e:	6803      	ldr	r3, [r0, #0]
 801d380:	4621      	mov	r1, r4
 801d382:	69db      	ldr	r3, [r3, #28]
 801d384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d388:	4718      	bx	r3
 801d38a:	bd10      	pop	{r4, pc}
 801d38c:	2000b4ba 	.word	0x2000b4ba
 801d390:	2000b4b8 	.word	0x2000b4b8
 801d394:	2000b500 	.word	0x2000b500
 801d398:	2000b4fc 	.word	0x2000b4fc
 801d39c:	2000b4c4 	.word	0x2000b4c4

0801d3a0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801d3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a2:	4606      	mov	r6, r0
 801d3a4:	4608      	mov	r0, r1
 801d3a6:	460f      	mov	r7, r1
 801d3a8:	f7fc fcf9 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d3ac:	b9e8      	cbnz	r0, 801d3ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d3ae:	f9b7 5000 	ldrsh.w	r5, [r7]
 801d3b2:	f9b6 4000 	ldrsh.w	r4, [r6]
 801d3b6:	42a5      	cmp	r5, r4
 801d3b8:	db17      	blt.n	801d3ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d3ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801d3be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801d3c2:	429a      	cmp	r2, r3
 801d3c4:	db11      	blt.n	801d3ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d3c6:	88b9      	ldrh	r1, [r7, #4]
 801d3c8:	440d      	add	r5, r1
 801d3ca:	88b1      	ldrh	r1, [r6, #4]
 801d3cc:	440c      	add	r4, r1
 801d3ce:	b22d      	sxth	r5, r5
 801d3d0:	b224      	sxth	r4, r4
 801d3d2:	42a5      	cmp	r5, r4
 801d3d4:	dc09      	bgt.n	801d3ea <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801d3d6:	88f8      	ldrh	r0, [r7, #6]
 801d3d8:	4410      	add	r0, r2
 801d3da:	88f2      	ldrh	r2, [r6, #6]
 801d3dc:	4413      	add	r3, r2
 801d3de:	b200      	sxth	r0, r0
 801d3e0:	b21b      	sxth	r3, r3
 801d3e2:	4298      	cmp	r0, r3
 801d3e4:	bfcc      	ite	gt
 801d3e6:	2000      	movgt	r0, #0
 801d3e8:	2001      	movle	r0, #1
 801d3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d3ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3ee:	4604      	mov	r4, r0
 801d3f0:	4608      	mov	r0, r1
 801d3f2:	460d      	mov	r5, r1
 801d3f4:	f7fc fcd3 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d3f8:	b978      	cbnz	r0, 801d41a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801d3fa:	4620      	mov	r0, r4
 801d3fc:	f7fc fccf 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d400:	f9b5 6000 	ldrsh.w	r6, [r5]
 801d404:	b150      	cbz	r0, 801d41c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801d406:	8026      	strh	r6, [r4, #0]
 801d408:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801d40c:	8063      	strh	r3, [r4, #2]
 801d40e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801d412:	80a3      	strh	r3, [r4, #4]
 801d414:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801d418:	80e3      	strh	r3, [r4, #6]
 801d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d41c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d420:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801d424:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801d428:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801d42c:	88ed      	ldrh	r5, [r5, #6]
 801d42e:	42b1      	cmp	r1, r6
 801d430:	460f      	mov	r7, r1
 801d432:	bfa8      	it	ge
 801d434:	4637      	movge	r7, r6
 801d436:	4293      	cmp	r3, r2
 801d438:	4618      	mov	r0, r3
 801d43a:	4466      	add	r6, ip
 801d43c:	bfa8      	it	ge
 801d43e:	4610      	movge	r0, r2
 801d440:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801d444:	8027      	strh	r7, [r4, #0]
 801d446:	442a      	add	r2, r5
 801d448:	88e5      	ldrh	r5, [r4, #6]
 801d44a:	8060      	strh	r0, [r4, #2]
 801d44c:	4461      	add	r1, ip
 801d44e:	442b      	add	r3, r5
 801d450:	b236      	sxth	r6, r6
 801d452:	b209      	sxth	r1, r1
 801d454:	b212      	sxth	r2, r2
 801d456:	b21b      	sxth	r3, r3
 801d458:	428e      	cmp	r6, r1
 801d45a:	bfac      	ite	ge
 801d45c:	ebc7 0106 	rsbge	r1, r7, r6
 801d460:	ebc7 0101 	rsblt	r1, r7, r1
 801d464:	429a      	cmp	r2, r3
 801d466:	bfac      	ite	ge
 801d468:	ebc0 0202 	rsbge	r2, r0, r2
 801d46c:	ebc0 0203 	rsblt	r2, r0, r3
 801d470:	80a1      	strh	r1, [r4, #4]
 801d472:	80e2      	strh	r2, [r4, #6]
 801d474:	e7d1      	b.n	801d41a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801d478 <_ZN8touchgfx11Application11getInstanceEv>:
 801d478:	4b01      	ldr	r3, [pc, #4]	; (801d480 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801d47a:	6818      	ldr	r0, [r3, #0]
 801d47c:	4770      	bx	lr
 801d47e:	bf00      	nop
 801d480:	2000b510 	.word	0x2000b510

0801d484 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801d484:	b570      	push	{r4, r5, r6, lr}
 801d486:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801d48a:	1d04      	adds	r4, r0, #4
 801d48c:	2200      	movs	r2, #0
 801d48e:	b295      	uxth	r5, r2
 801d490:	429d      	cmp	r5, r3
 801d492:	d20f      	bcs.n	801d4b4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x30>
 801d494:	f854 6b04 	ldr.w	r6, [r4], #4
 801d498:	428e      	cmp	r6, r1
 801d49a:	4615      	mov	r5, r2
 801d49c:	f102 0201 	add.w	r2, r2, #1
 801d4a0:	d1f5      	bne.n	801d48e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801d4a2:	4428      	add	r0, r5
 801d4a4:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801d4a8:	2bff      	cmp	r3, #255	; 0xff
 801d4aa:	d002      	beq.n	801d4b2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801d4b2:	bd70      	pop	{r4, r5, r6, pc}
 801d4b4:	18c2      	adds	r2, r0, r3
 801d4b6:	2b20      	cmp	r3, #32
 801d4b8:	f04f 0401 	mov.w	r4, #1
 801d4bc:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801d4c0:	bf1f      	itttt	ne
 801d4c2:	191a      	addne	r2, r3, r4
 801d4c4:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 801d4c8:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 801d4cc:	6041      	strne	r1, [r0, #4]
 801d4ce:	e7f0      	b.n	801d4b2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>

0801d4d0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801d4d0:	b570      	push	{r4, r5, r6, lr}
 801d4d2:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801d4d6:	1d04      	adds	r4, r0, #4
 801d4d8:	2300      	movs	r3, #0
 801d4da:	b29a      	uxth	r2, r3
 801d4dc:	4296      	cmp	r6, r2
 801d4de:	d90a      	bls.n	801d4f6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801d4e0:	f854 2b04 	ldr.w	r2, [r4], #4
 801d4e4:	428a      	cmp	r2, r1
 801d4e6:	d107      	bne.n	801d4f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801d4e8:	18c5      	adds	r5, r0, r3
 801d4ea:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801d4ee:	b11a      	cbz	r2, 801d4f8 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801d4f0:	3a01      	subs	r2, #1
 801d4f2:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801d4f6:	bd70      	pop	{r4, r5, r6, pc}
 801d4f8:	3301      	adds	r3, #1
 801d4fa:	e7ee      	b.n	801d4da <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801d4fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801d502:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801d506:	30a8      	adds	r0, #168	; 0xa8
 801d508:	f802 3b01 	strb.w	r3, [r2], #1
 801d50c:	4282      	cmp	r2, r0
 801d50e:	d1fb      	bne.n	801d508 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801d510:	4770      	bx	lr

0801d512 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801d512:	4603      	mov	r3, r0
 801d514:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801d518:	2200      	movs	r2, #0
 801d51a:	801a      	strh	r2, [r3, #0]
 801d51c:	805a      	strh	r2, [r3, #2]
 801d51e:	809a      	strh	r2, [r3, #4]
 801d520:	80da      	strh	r2, [r3, #6]
 801d522:	3308      	adds	r3, #8
 801d524:	428b      	cmp	r3, r1
 801d526:	d1f8      	bne.n	801d51a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801d528:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801d52c:	4770      	bx	lr
	...

0801d530 <_ZN8touchgfx11ApplicationC1Ev>:
 801d530:	b570      	push	{r4, r5, r6, lr}
 801d532:	4b19      	ldr	r3, [pc, #100]	; (801d598 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801d534:	6003      	str	r3, [r0, #0]
 801d536:	2500      	movs	r5, #0
 801d538:	4604      	mov	r4, r0
 801d53a:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801d53e:	30a8      	adds	r0, #168	; 0xa8
 801d540:	f7ff ffe7 	bl	801d512 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d544:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801d548:	f7ff ffe3 	bl	801d512 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801d54c:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801d550:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801d554:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801d558:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801d55c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801d560:	490e      	ldr	r1, [pc, #56]	; (801d59c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801d562:	480f      	ldr	r0, [pc, #60]	; (801d5a0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801d564:	4e0f      	ldr	r6, [pc, #60]	; (801d5a4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801d566:	f00e f88d 	bl	802b684 <CRC_Lock>
 801d56a:	4b0f      	ldr	r3, [pc, #60]	; (801d5a8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801d56c:	b158      	cbz	r0, 801d586 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 801d56e:	801d      	strh	r5, [r3, #0]
 801d570:	4a0e      	ldr	r2, [pc, #56]	; (801d5ac <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801d572:	2300      	movs	r3, #0
 801d574:	6013      	str	r3, [r2, #0]
 801d576:	4a0e      	ldr	r2, [pc, #56]	; (801d5b0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801d578:	6033      	str	r3, [r6, #0]
 801d57a:	4620      	mov	r0, r4
 801d57c:	6013      	str	r3, [r2, #0]
 801d57e:	f7ff ffbd 	bl	801d4fc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801d582:	4620      	mov	r0, r4
 801d584:	bd70      	pop	{r4, r5, r6, pc}
 801d586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d58a:	2002      	movs	r0, #2
 801d58c:	801a      	strh	r2, [r3, #0]
 801d58e:	6030      	str	r0, [r6, #0]
 801d590:	f001 fa16 	bl	801e9c0 <_ZN8touchgfx6Screen4drawEv>
 801d594:	e7ec      	b.n	801d570 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 801d596:	bf00      	nop
 801d598:	0802f310 	.word	0x0802f310
 801d59c:	b5e8b5cd 	.word	0xb5e8b5cd
 801d5a0:	f407a5c2 	.word	0xf407a5c2
 801d5a4:	2000b500 	.word	0x2000b500
 801d5a8:	20000310 	.word	0x20000310
 801d5ac:	2000b510 	.word	0x2000b510
 801d5b0:	2000b504 	.word	0x2000b504

0801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801d5b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801d5b8:	3b01      	subs	r3, #1
 801d5ba:	b29b      	uxth	r3, r3
 801d5bc:	428b      	cmp	r3, r1
 801d5be:	b510      	push	{r4, lr}
 801d5c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801d5c4:	d908      	bls.n	801d5d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801d5c6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801d5ca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801d5ce:	681a      	ldr	r2, [r3, #0]
 801d5d0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801d5d4:	685a      	ldr	r2, [r3, #4]
 801d5d6:	6062      	str	r2, [r4, #4]
 801d5d8:	bd10      	pop	{r4, pc}
	...

0801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e0:	4b94      	ldr	r3, [pc, #592]	; (801d834 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801d5e2:	b08f      	sub	sp, #60	; 0x3c
 801d5e4:	ac0a      	add	r4, sp, #40	; 0x28
 801d5e6:	e884 0006 	stmia.w	r4, {r1, r2}
 801d5ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d5ee:	4b92      	ldr	r3, [pc, #584]	; (801d838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801d5f0:	4683      	mov	fp, r0
 801d5f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	f7ff fe82 	bl	801d300 <_ZN8touchgfx4Rect10restrictToEss>
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7fc fbce 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801d602:	2800      	cmp	r0, #0
 801d604:	d16a      	bne.n	801d6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d606:	9403      	str	r4, [sp, #12]
 801d608:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801d60c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801d610:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801d614:	2400      	movs	r4, #0
 801d616:	9301      	str	r3, [sp, #4]
 801d618:	36a0      	adds	r6, #160	; 0xa0
 801d61a:	42a5      	cmp	r5, r4
 801d61c:	d00d      	beq.n	801d63a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801d61e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801d622:	9803      	ldr	r0, [sp, #12]
 801d624:	f7ff febc 	bl	801d3a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d628:	b128      	cbz	r0, 801d636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801d62a:	1e69      	subs	r1, r5, #1
 801d62c:	1b09      	subs	r1, r1, r4
 801d62e:	b289      	uxth	r1, r1
 801d630:	9801      	ldr	r0, [sp, #4]
 801d632:	f7ff ffbf 	bl	801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d636:	3401      	adds	r4, #1
 801d638:	e7ef      	b.n	801d61a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801d63a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801d63e:	9704      	str	r7, [sp, #16]
 801d640:	1e7b      	subs	r3, r7, #1
 801d642:	9302      	str	r3, [sp, #8]
 801d644:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801d648:	2400      	movs	r4, #0
 801d64a:	4655      	mov	r5, sl
 801d64c:	9705      	str	r7, [sp, #20]
 801d64e:	4626      	mov	r6, r4
 801d650:	9b05      	ldr	r3, [sp, #20]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d078      	beq.n	801d748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801d656:	9903      	ldr	r1, [sp, #12]
 801d658:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801d65c:	f7ff fe2e 	bl	801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d660:	b360      	cbz	r0, 801d6bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801d662:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801d666:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801d66a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801d66e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801d672:	45e6      	cmp	lr, ip
 801d674:	db35      	blt.n	801d6e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d676:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d67a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801d67e:	4472      	add	r2, lr
 801d680:	4463      	add	r3, ip
 801d682:	b212      	sxth	r2, r2
 801d684:	b21b      	sxth	r3, r3
 801d686:	429a      	cmp	r2, r3
 801d688:	dc2b      	bgt.n	801d6e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801d68a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801d68e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d692:	fa1f f288 	uxth.w	r2, r8
 801d696:	4413      	add	r3, r2
 801d698:	b29b      	uxth	r3, r3
 801d69a:	45c1      	cmp	r9, r8
 801d69c:	fa0f fe83 	sxth.w	lr, r3
 801d6a0:	fa1f fc89 	uxth.w	ip, r9
 801d6a4:	db0f      	blt.n	801d6c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801d6a6:	eba3 030c 	sub.w	r3, r3, ip
 801d6aa:	1ac9      	subs	r1, r1, r3
 801d6ac:	b209      	sxth	r1, r1
 801d6ae:	2900      	cmp	r1, #0
 801d6b0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d6b4:	dd12      	ble.n	801d6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d6b6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801d6ba:	4604      	mov	r4, r0
 801d6bc:	9b05      	ldr	r3, [sp, #20]
 801d6be:	3b01      	subs	r3, #1
 801d6c0:	9305      	str	r3, [sp, #20]
 801d6c2:	3d08      	subs	r5, #8
 801d6c4:	e7c4      	b.n	801d650 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801d6c6:	4461      	add	r1, ip
 801d6c8:	b209      	sxth	r1, r1
 801d6ca:	4571      	cmp	r1, lr
 801d6cc:	dc3a      	bgt.n	801d744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801d6ce:	eba2 020c 	sub.w	r2, r2, ip
 801d6d2:	b212      	sxth	r2, r2
 801d6d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801d6d8:	2a00      	cmp	r2, #0
 801d6da:	dcee      	bgt.n	801d6ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d6dc:	b00f      	add	sp, #60	; 0x3c
 801d6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6e2:	45c1      	cmp	r9, r8
 801d6e4:	db2e      	blt.n	801d744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801d6e6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801d6ea:	4499      	add	r9, r3
 801d6ec:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801d6f0:	4498      	add	r8, r3
 801d6f2:	fa0f f989 	sxth.w	r9, r9
 801d6f6:	fa0f f888 	sxth.w	r8, r8
 801d6fa:	45c1      	cmp	r9, r8
 801d6fc:	dc22      	bgt.n	801d744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801d6fe:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801d702:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d706:	fa1f f28c 	uxth.w	r2, ip
 801d70a:	4413      	add	r3, r2
 801d70c:	b29b      	uxth	r3, r3
 801d70e:	45e6      	cmp	lr, ip
 801d710:	fa1f f88e 	uxth.w	r8, lr
 801d714:	fa0f f983 	sxth.w	r9, r3
 801d718:	db0a      	blt.n	801d730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801d71a:	eba3 0308 	sub.w	r3, r3, r8
 801d71e:	1ac9      	subs	r1, r1, r3
 801d720:	b209      	sxth	r1, r1
 801d722:	2900      	cmp	r1, #0
 801d724:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801d728:	ddd8      	ble.n	801d6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801d72a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801d72e:	e7c4      	b.n	801d6ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801d730:	4441      	add	r1, r8
 801d732:	b209      	sxth	r1, r1
 801d734:	4549      	cmp	r1, r9
 801d736:	dc05      	bgt.n	801d744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801d738:	eba2 0208 	sub.w	r2, r2, r8
 801d73c:	b212      	sxth	r2, r2
 801d73e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801d742:	e7c9      	b.n	801d6d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801d744:	4606      	mov	r6, r0
 801d746:	e7b9      	b.n	801d6bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801d748:	2c00      	cmp	r4, #0
 801d74a:	f47f af7d 	bne.w	801d648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801d74e:	2e00      	cmp	r6, #0
 801d750:	f000 81e1 	beq.w	801db16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801d754:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801d758:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801d75c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d760:	b2b9      	uxth	r1, r7
 801d762:	9105      	str	r1, [sp, #20]
 801d764:	9805      	ldr	r0, [sp, #20]
 801d766:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801d76a:	4401      	add	r1, r0
 801d76c:	b2b3      	uxth	r3, r6
 801d76e:	b289      	uxth	r1, r1
 801d770:	441a      	add	r2, r3
 801d772:	9106      	str	r1, [sp, #24]
 801d774:	b292      	uxth	r2, r2
 801d776:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801d77a:	fa0f f882 	sxth.w	r8, r2
 801d77e:	4655      	mov	r5, sl
 801d780:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801d784:	9b04      	ldr	r3, [sp, #16]
 801d786:	2b00      	cmp	r3, #0
 801d788:	d058      	beq.n	801d83c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801d78a:	9903      	ldr	r1, [sp, #12]
 801d78c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801d790:	f7ff fd94 	bl	801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d794:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801d798:	b1d8      	cbz	r0, 801d7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801d79a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801d79e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801d7a2:	4576      	cmp	r6, lr
 801d7a4:	dc26      	bgt.n	801d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801d7a6:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801d7aa:	44f4      	add	ip, lr
 801d7ac:	fa0f fc8c 	sxth.w	ip, ip
 801d7b0:	45e0      	cmp	r8, ip
 801d7b2:	db1f      	blt.n	801d7f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801d7b4:	428f      	cmp	r7, r1
 801d7b6:	fa1f fc81 	uxth.w	ip, r1
 801d7ba:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801d7be:	dc0f      	bgt.n	801d7e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801d7c0:	9806      	ldr	r0, [sp, #24]
 801d7c2:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801d7c6:	eba0 0c0c 	sub.w	ip, r0, ip
 801d7ca:	eba1 010c 	sub.w	r1, r1, ip
 801d7ce:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	9904      	ldr	r1, [sp, #16]
 801d7d6:	3901      	subs	r1, #1
 801d7d8:	9104      	str	r1, [sp, #16]
 801d7da:	3d08      	subs	r5, #8
 801d7dc:	4604      	mov	r4, r0
 801d7de:	e7cf      	b.n	801d780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801d7e0:	4461      	add	r1, ip
 801d7e2:	b209      	sxth	r1, r1
 801d7e4:	4549      	cmp	r1, r9
 801d7e6:	dcf5      	bgt.n	801d7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801d7e8:	9905      	ldr	r1, [sp, #20]
 801d7ea:	eba1 0c0c 	sub.w	ip, r1, ip
 801d7ee:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801d7f2:	e7ee      	b.n	801d7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801d7f4:	428f      	cmp	r7, r1
 801d7f6:	dced      	bgt.n	801d7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801d7f8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801d7fc:	4461      	add	r1, ip
 801d7fe:	b209      	sxth	r1, r1
 801d800:	4589      	cmp	r9, r1
 801d802:	dbe7      	blt.n	801d7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801d804:	4576      	cmp	r6, lr
 801d806:	fa1f fc8e 	uxth.w	ip, lr
 801d80a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801d80e:	dc08      	bgt.n	801d822 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801d810:	eba2 0c0c 	sub.w	ip, r2, ip
 801d814:	eba1 010c 	sub.w	r1, r1, ip
 801d818:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801d81c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801d820:	e7d7      	b.n	801d7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801d822:	4461      	add	r1, ip
 801d824:	b209      	sxth	r1, r1
 801d826:	4588      	cmp	r8, r1
 801d828:	dbd4      	blt.n	801d7d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801d82a:	eba3 0c0c 	sub.w	ip, r3, ip
 801d82e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801d832:	e7ce      	b.n	801d7d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801d834:	2000b4ba 	.word	0x2000b4ba
 801d838:	2000b4b8 	.word	0x2000b4b8
 801d83c:	2c00      	cmp	r4, #0
 801d83e:	f000 816a 	beq.w	801db16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801d842:	9b02      	ldr	r3, [sp, #8]
 801d844:	3301      	adds	r3, #1
 801d846:	f000 8166 	beq.w	801db16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801d84a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801d84e:	4621      	mov	r1, r4
 801d850:	9803      	ldr	r0, [sp, #12]
 801d852:	f7ff fda5 	bl	801d3a0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d856:	b120      	cbz	r0, 801d862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801d858:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801d85c:	9801      	ldr	r0, [sp, #4]
 801d85e:	f7ff fea9 	bl	801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801d862:	9903      	ldr	r1, [sp, #12]
 801d864:	4620      	mov	r0, r4
 801d866:	f7ff fd29 	bl	801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d86a:	2800      	cmp	r0, #0
 801d86c:	f000 809b 	beq.w	801d9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801d870:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801d874:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801d878:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801d87c:	9309      	str	r3, [sp, #36]	; 0x24
 801d87e:	b281      	uxth	r1, r0
 801d880:	eb01 0c03 	add.w	ip, r1, r3
 801d884:	fa1f f98c 	uxth.w	r9, ip
 801d888:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801d88c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801d890:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801d894:	b2ab      	uxth	r3, r5
 801d896:	eb03 040c 	add.w	r4, r3, ip
 801d89a:	b2a4      	uxth	r4, r4
 801d89c:	9405      	str	r4, [sp, #20]
 801d89e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801d8a2:	9404      	str	r4, [sp, #16]
 801d8a4:	4285      	cmp	r5, r0
 801d8a6:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801d8aa:	f340 809a 	ble.w	801d9e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801d8ae:	1a5b      	subs	r3, r3, r1
 801d8b0:	b29b      	uxth	r3, r3
 801d8b2:	4596      	cmp	lr, r2
 801d8b4:	fa0f f589 	sxth.w	r5, r9
 801d8b8:	b21e      	sxth	r6, r3
 801d8ba:	dd2e      	ble.n	801d91a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801d8bc:	9f02      	ldr	r7, [sp, #8]
 801d8be:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801d8c2:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801d8c6:	9f04      	ldr	r7, [sp, #16]
 801d8c8:	1b7f      	subs	r7, r7, r5
 801d8ca:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801d8ce:	fa1f fe8e 	uxth.w	lr, lr
 801d8d2:	b292      	uxth	r2, r2
 801d8d4:	ebae 0102 	sub.w	r1, lr, r2
 801d8d8:	4486      	add	lr, r0
 801d8da:	442a      	add	r2, r5
 801d8dc:	b289      	uxth	r1, r1
 801d8de:	fa0f fe8e 	sxth.w	lr, lr
 801d8e2:	b212      	sxth	r2, r2
 801d8e4:	b20c      	sxth	r4, r1
 801d8e6:	ebae 0202 	sub.w	r2, lr, r2
 801d8ea:	4367      	muls	r7, r4
 801d8ec:	4372      	muls	r2, r6
 801d8ee:	4297      	cmp	r7, r2
 801d8f0:	db09      	blt.n	801d906 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801d8f2:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801d8f6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801d8fa:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d8fe:	449c      	add	ip, r3
 801d900:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d904:	e680      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d906:	4401      	add	r1, r0
 801d908:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801d90c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801d910:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d914:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d918:	e676      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d91a:	9f04      	ldr	r7, [sp, #16]
 801d91c:	42bd      	cmp	r5, r7
 801d91e:	da27      	bge.n	801d970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801d920:	9902      	ldr	r1, [sp, #8]
 801d922:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801d926:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801d92a:	eb04 010e 	add.w	r1, r4, lr
 801d92e:	fa1f f881 	uxth.w	r8, r1
 801d932:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801d936:	4411      	add	r1, r2
 801d938:	eba1 0108 	sub.w	r1, r1, r8
 801d93c:	b289      	uxth	r1, r1
 801d93e:	fa0f f988 	sxth.w	r9, r8
 801d942:	eba2 020e 	sub.w	r2, r2, lr
 801d946:	fa0f f881 	sxth.w	r8, r1
 801d94a:	1b7f      	subs	r7, r7, r5
 801d94c:	4372      	muls	r2, r6
 801d94e:	fb08 f707 	mul.w	r7, r8, r7
 801d952:	42ba      	cmp	r2, r7
 801d954:	dc06      	bgt.n	801d964 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801d956:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801d95a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801d95e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801d962:	e7ca      	b.n	801d8fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801d964:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801d968:	4421      	add	r1, r4
 801d96a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801d96e:	e64b      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d970:	9d05      	ldr	r5, [sp, #20]
 801d972:	eba9 0505 	sub.w	r5, r9, r5
 801d976:	b2ad      	uxth	r5, r5
 801d978:	2c06      	cmp	r4, #6
 801d97a:	fa0f fe85 	sxth.w	lr, r5
 801d97e:	d818      	bhi.n	801d9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801d980:	9b04      	ldr	r3, [sp, #16]
 801d982:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801d986:	1c63      	adds	r3, r4, #1
 801d988:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801d98c:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801d990:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801d994:	9b01      	ldr	r3, [sp, #4]
 801d996:	9d01      	ldr	r5, [sp, #4]
 801d998:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d99c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801d9a0:	805a      	strh	r2, [r3, #2]
 801d9a2:	809e      	strh	r6, [r3, #4]
 801d9a4:	80d9      	strh	r1, [r3, #6]
 801d9a6:	9b02      	ldr	r3, [sp, #8]
 801d9a8:	3b01      	subs	r3, #1
 801d9aa:	9302      	str	r3, [sp, #8]
 801d9ac:	f1aa 0a08 	sub.w	sl, sl, #8
 801d9b0:	e747      	b.n	801d842 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801d9b2:	9a02      	ldr	r2, [sp, #8]
 801d9b4:	45b6      	cmp	lr, r6
 801d9b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801d9ba:	db0d      	blt.n	801d9d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801d9bc:	449c      	add	ip, r3
 801d9be:	fa1f fc8c 	uxth.w	ip, ip
 801d9c2:	445a      	add	r2, fp
 801d9c4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801d9c8:	448c      	add	ip, r1
 801d9ca:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801d9ce:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801d9d2:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801d9d6:	e617      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801d9d8:	445a      	add	r2, fp
 801d9da:	44ac      	add	ip, r5
 801d9dc:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801d9e0:	e78e      	b.n	801d900 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801d9e2:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801d9e6:	fa1f f18e 	uxth.w	r1, lr
 801d9ea:	eb01 0806 	add.w	r8, r1, r6
 801d9ee:	b293      	uxth	r3, r2
 801d9f0:	fa1f f888 	uxth.w	r8, r8
 801d9f4:	9306      	str	r3, [sp, #24]
 801d9f6:	fa0f f388 	sxth.w	r3, r8
 801d9fa:	9307      	str	r3, [sp, #28]
 801d9fc:	9f06      	ldr	r7, [sp, #24]
 801d9fe:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801da02:	443b      	add	r3, r7
 801da04:	b29b      	uxth	r3, r3
 801da06:	4596      	cmp	lr, r2
 801da08:	9308      	str	r3, [sp, #32]
 801da0a:	da25      	bge.n	801da58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801da0c:	9905      	ldr	r1, [sp, #20]
 801da0e:	eba3 0308 	sub.w	r3, r3, r8
 801da12:	eba9 0401 	sub.w	r4, r9, r1
 801da16:	b2a4      	uxth	r4, r4
 801da18:	b29b      	uxth	r3, r3
 801da1a:	fa0f f984 	sxth.w	r9, r4
 801da1e:	b219      	sxth	r1, r3
 801da20:	eba2 020e 	sub.w	r2, r2, lr
 801da24:	1b40      	subs	r0, r0, r5
 801da26:	fb09 f202 	mul.w	r2, r9, r2
 801da2a:	4348      	muls	r0, r1
 801da2c:	4282      	cmp	r2, r0
 801da2e:	9a02      	ldr	r2, [sp, #8]
 801da30:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801da34:	445a      	add	r2, fp
 801da36:	dc06      	bgt.n	801da46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801da38:	9b07      	ldr	r3, [sp, #28]
 801da3a:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801da3e:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801da42:	44a4      	add	ip, r4
 801da44:	e75c      	b.n	801d900 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801da46:	9904      	ldr	r1, [sp, #16]
 801da48:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801da4c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801da50:	4433      	add	r3, r6
 801da52:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801da56:	e5d7      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801da58:	9f06      	ldr	r7, [sp, #24]
 801da5a:	9b04      	ldr	r3, [sp, #16]
 801da5c:	1bc9      	subs	r1, r1, r7
 801da5e:	fa0f f789 	sxth.w	r7, r9
 801da62:	b289      	uxth	r1, r1
 801da64:	429f      	cmp	r7, r3
 801da66:	fa0f fe81 	sxth.w	lr, r1
 801da6a:	dd22      	ble.n	801dab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801da6c:	9a05      	ldr	r2, [sp, #20]
 801da6e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801da72:	1b40      	subs	r0, r0, r5
 801da74:	eba9 0202 	sub.w	r2, r9, r2
 801da78:	9d07      	ldr	r5, [sp, #28]
 801da7a:	b292      	uxth	r2, r2
 801da7c:	eba5 0a03 	sub.w	sl, r5, r3
 801da80:	b214      	sxth	r4, r2
 801da82:	9b02      	ldr	r3, [sp, #8]
 801da84:	fb0e f000 	mul.w	r0, lr, r0
 801da88:	fb04 fa0a 	mul.w	sl, r4, sl
 801da8c:	00db      	lsls	r3, r3, #3
 801da8e:	4550      	cmp	r0, sl
 801da90:	445b      	add	r3, fp
 801da92:	db03      	blt.n	801da9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801da94:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801da98:	4494      	add	ip, r2
 801da9a:	e731      	b.n	801d900 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801da9c:	9a04      	ldr	r2, [sp, #16]
 801da9e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801daa2:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801daa6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801daaa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801daae:	4431      	add	r1, r6
 801dab0:	e75b      	b.n	801d96a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801dab2:	9b08      	ldr	r3, [sp, #32]
 801dab4:	eba3 0308 	sub.w	r3, r3, r8
 801dab8:	b29b      	uxth	r3, r3
 801daba:	2c06      	cmp	r4, #6
 801dabc:	b21d      	sxth	r5, r3
 801dabe:	d813      	bhi.n	801dae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801dac0:	9b07      	ldr	r3, [sp, #28]
 801dac2:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801dac6:	1c63      	adds	r3, r4, #1
 801dac8:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801dacc:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801dad0:	9b01      	ldr	r3, [sp, #4]
 801dad2:	9901      	ldr	r1, [sp, #4]
 801dad4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801dad8:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801dadc:	805a      	strh	r2, [r3, #2]
 801dade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dae0:	809a      	strh	r2, [r3, #4]
 801dae2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801dae6:	e75e      	b.n	801d9a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801dae8:	9802      	ldr	r0, [sp, #8]
 801daea:	4575      	cmp	r5, lr
 801daec:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801daf0:	db0d      	blt.n	801db0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801daf2:	4431      	add	r1, r6
 801daf4:	9b06      	ldr	r3, [sp, #24]
 801daf6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801dafa:	b289      	uxth	r1, r1
 801dafc:	4458      	add	r0, fp
 801dafe:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801db02:	4419      	add	r1, r3
 801db04:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801db08:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801db0c:	e57c      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801db0e:	4458      	add	r0, fp
 801db10:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801db14:	e79c      	b.n	801da50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801db16:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801db1a:	2e07      	cmp	r6, #7
 801db1c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801db20:	d812      	bhi.n	801db48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801db22:	1c75      	adds	r5, r6, #1
 801db24:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801db28:	9d01      	ldr	r5, [sp, #4]
 801db2a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801db2e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801db32:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801db36:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801db3a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801db3e:	442c      	add	r4, r5
 801db40:	8061      	strh	r1, [r4, #2]
 801db42:	80a2      	strh	r2, [r4, #4]
 801db44:	80e3      	strh	r3, [r4, #6]
 801db46:	e5c9      	b.n	801d6dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801db48:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801db4c:	3e01      	subs	r6, #1
 801db4e:	445c      	add	r4, fp
 801db50:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801db54:	f04f 37ff 	mov.w	r7, #4294967295
 801db58:	2500      	movs	r5, #0
 801db5a:	9305      	str	r3, [sp, #20]
 801db5c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801db60:	9302      	str	r3, [sp, #8]
 801db62:	1e72      	subs	r2, r6, #1
 801db64:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801db68:	9304      	str	r3, [sp, #16]
 801db6a:	4691      	mov	r9, r2
 801db6c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801db70:	f1b9 3fff 	cmp.w	r9, #4294967295
 801db74:	bf14      	ite	ne
 801db76:	9905      	ldrne	r1, [sp, #20]
 801db78:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801db7c:	6818      	ldr	r0, [r3, #0]
 801db7e:	9207      	str	r2, [sp, #28]
 801db80:	bf18      	it	ne
 801db82:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801db86:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801db8a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801db8e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801db92:	9306      	str	r3, [sp, #24]
 801db94:	fb18 f801 	smulbb	r8, r8, r1
 801db98:	6859      	ldr	r1, [r3, #4]
 801db9a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801db9e:	4671      	mov	r1, lr
 801dba0:	a80c      	add	r0, sp, #48	; 0x30
 801dba2:	f7ff fc23 	bl	801d3ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801dba6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801dbaa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801dbae:	9b04      	ldr	r3, [sp, #16]
 801dbb0:	9a02      	ldr	r2, [sp, #8]
 801dbb2:	fb10 f001 	smulbb	r0, r0, r1
 801dbb6:	fb02 8803 	mla	r8, r2, r3, r8
 801dbba:	eba0 0108 	sub.w	r1, r0, r8
 801dbbe:	f04f 0c08 	mov.w	ip, #8
 801dbc2:	fb90 f0fc 	sdiv	r0, r0, ip
 801dbc6:	4288      	cmp	r0, r1
 801dbc8:	dc20      	bgt.n	801dc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801dbca:	4551      	cmp	r1, sl
 801dbcc:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801dbd0:	da03      	bge.n	801dbda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801dbd2:	b1d9      	cbz	r1, 801dc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801dbd4:	468a      	mov	sl, r1
 801dbd6:	464f      	mov	r7, r9
 801dbd8:	4635      	mov	r5, r6
 801dbda:	f109 39ff 	add.w	r9, r9, #4294967295
 801dbde:	f119 0f02 	cmn.w	r9, #2
 801dbe2:	d1c5      	bne.n	801db70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801dbe4:	4616      	mov	r6, r2
 801dbe6:	3201      	adds	r2, #1
 801dbe8:	f1a4 0408 	sub.w	r4, r4, #8
 801dbec:	d1b6      	bne.n	801db5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801dbee:	9b01      	ldr	r3, [sp, #4]
 801dbf0:	b2ac      	uxth	r4, r5
 801dbf2:	00ed      	lsls	r5, r5, #3
 801dbf4:	1958      	adds	r0, r3, r5
 801dbf6:	1c7b      	adds	r3, r7, #1
 801dbf8:	d10b      	bne.n	801dc12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801dbfa:	4601      	mov	r1, r0
 801dbfc:	9803      	ldr	r0, [sp, #12]
 801dbfe:	f7ff fbf5 	bl	801d3ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801dc02:	4621      	mov	r1, r4
 801dc04:	9801      	ldr	r0, [sp, #4]
 801dc06:	f7ff fcd5 	bl	801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801dc0a:	e4fd      	b.n	801d608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801dc0c:	464f      	mov	r7, r9
 801dc0e:	4635      	mov	r5, r6
 801dc10:	e7ed      	b.n	801dbee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801dc12:	9b01      	ldr	r3, [sp, #4]
 801dc14:	00ff      	lsls	r7, r7, #3
 801dc16:	19d9      	adds	r1, r3, r7
 801dc18:	f7ff fbe8 	bl	801d3ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801dc1c:	9b03      	ldr	r3, [sp, #12]
 801dc1e:	cb03      	ldmia	r3!, {r0, r1}
 801dc20:	445f      	add	r7, fp
 801dc22:	445d      	add	r5, fp
 801dc24:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801dc28:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801dc2c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801dc30:	9b03      	ldr	r3, [sp, #12]
 801dc32:	6869      	ldr	r1, [r5, #4]
 801dc34:	c303      	stmia	r3!, {r0, r1}
 801dc36:	e7e4      	b.n	801dc02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

0801dc38 <_ZN8touchgfx11Application10invalidateEv>:
 801dc38:	4b09      	ldr	r3, [pc, #36]	; (801dc60 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801dc3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dc3e:	4b09      	ldr	r3, [pc, #36]	; (801dc64 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801dc40:	b082      	sub	sp, #8
 801dc42:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc46:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dc4a:	2100      	movs	r1, #0
 801dc4c:	9100      	str	r1, [sp, #0]
 801dc4e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dc52:	ab02      	add	r3, sp, #8
 801dc54:	e913 0006 	ldmdb	r3, {r1, r2}
 801dc58:	b002      	add	sp, #8
 801dc5a:	f7ff bcbf 	b.w	801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dc5e:	bf00      	nop
 801dc60:	2000b4b8 	.word	0x2000b4b8
 801dc64:	2000b4ba 	.word	0x2000b4ba

0801dc68 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc6c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801dc70:	b09b      	sub	sp, #108	; 0x6c
 801dc72:	4604      	mov	r4, r0
 801dc74:	4630      	mov	r0, r6
 801dc76:	f7fc f892 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dc7a:	4605      	mov	r5, r0
 801dc7c:	b940      	cbnz	r0, 801dc90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801dc7e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801dc82:	4620      	mov	r0, r4
 801dc84:	f7ff fcaa 	bl	801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dc88:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801dc8c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801dc90:	4bc9      	ldr	r3, [pc, #804]	; (801dfb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d03e      	beq.n	801dd16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801dc98:	4dc8      	ldr	r5, [pc, #800]	; (801dfbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801dc9a:	4628      	mov	r0, r5
 801dc9c:	f7fc f87f 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801dca0:	4606      	mov	r6, r0
 801dca2:	2800      	cmp	r0, #0
 801dca4:	d137      	bne.n	801dd16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801dca6:	4628      	mov	r0, r5
 801dca8:	f7ff f9d2 	bl	801d050 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801dcac:	6829      	ldr	r1, [r5, #0]
 801dcae:	686a      	ldr	r2, [r5, #4]
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	f7ff fc93 	bl	801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dcb6:	802e      	strh	r6, [r5, #0]
 801dcb8:	806e      	strh	r6, [r5, #2]
 801dcba:	80ae      	strh	r6, [r5, #4]
 801dcbc:	80ee      	strh	r6, [r5, #6]
 801dcbe:	ae09      	add	r6, sp, #36	; 0x24
 801dcc0:	4630      	mov	r0, r6
 801dcc2:	f7ff fc26 	bl	801d512 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801dcc6:	4abe      	ldr	r2, [pc, #760]	; (801dfc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801dcc8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801dccc:	8815      	ldrh	r5, [r2, #0]
 801dcce:	9202      	str	r2, [sp, #8]
 801dcd0:	462b      	mov	r3, r5
 801dcd2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801dcd6:	429f      	cmp	r7, r3
 801dcd8:	d924      	bls.n	801dd24 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801dcda:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801dcde:	2907      	cmp	r1, #7
 801dce0:	d816      	bhi.n	801dd10 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801dce2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801dce6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801dcea:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801dcee:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801dcf2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801dcf6:	1c4a      	adds	r2, r1, #1
 801dcf8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801dcfc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801dd00:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801dd04:	f8a2 9002 	strh.w	r9, [r2, #2]
 801dd08:	f8a2 e004 	strh.w	lr, [r2, #4]
 801dd0c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801dd10:	3301      	adds	r3, #1
 801dd12:	b29b      	uxth	r3, r3
 801dd14:	e7df      	b.n	801dcd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801dd16:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d1cf      	bne.n	801dcbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801dd1e:	b01b      	add	sp, #108	; 0x6c
 801dd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd24:	462f      	mov	r7, r5
 801dd26:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801dd2a:	42bb      	cmp	r3, r7
 801dd2c:	d90b      	bls.n	801dd46 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801dd2e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801dd32:	4620      	mov	r0, r4
 801dd34:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801dd38:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801dd3c:	3701      	adds	r7, #1
 801dd3e:	f7ff fc4d 	bl	801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801dd42:	b2bf      	uxth	r7, r7
 801dd44:	e7ef      	b.n	801dd26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801dd46:	4a9f      	ldr	r2, [pc, #636]	; (801dfc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801dd48:	6813      	ldr	r3, [r2, #0]
 801dd4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801dd4e:	2b01      	cmp	r3, #1
 801dd50:	4690      	mov	r8, r2
 801dd52:	f040 80e6 	bne.w	801df22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801dd56:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801dd5a:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801dd5e:	4629      	mov	r1, r5
 801dd60:	33aa      	adds	r3, #170	; 0xaa
 801dd62:	2500      	movs	r5, #0
 801dd64:	428f      	cmp	r7, r1
 801dd66:	f103 0308 	add.w	r3, r3, #8
 801dd6a:	dd0a      	ble.n	801dd82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801dd6c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801dd70:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801dd74:	4402      	add	r2, r0
 801dd76:	b212      	sxth	r2, r2
 801dd78:	4295      	cmp	r5, r2
 801dd7a:	bfb8      	it	lt
 801dd7c:	4615      	movlt	r5, r2
 801dd7e:	3101      	adds	r1, #1
 801dd80:	e7f0      	b.n	801dd64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801dd82:	4b91      	ldr	r3, [pc, #580]	; (801dfc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801dd84:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801dfc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801dd88:	881b      	ldrh	r3, [r3, #0]
 801dd8a:	2b0f      	cmp	r3, #15
 801dd8c:	bf88      	it	hi
 801dd8e:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801dd92:	f04f 0300 	mov.w	r3, #0
 801dd96:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801dd9a:	bf98      	it	ls
 801dd9c:	f04f 0a01 	movls.w	sl, #1
 801dda0:	46d8      	mov	r8, fp
 801dda2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801dda6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ddaa:	4438      	add	r0, r7
 801ddac:	b207      	sxth	r7, r0
 801ddae:	f8db 0000 	ldr.w	r0, [fp]
 801ddb2:	42bd      	cmp	r5, r7
 801ddb4:	6803      	ldr	r3, [r0, #0]
 801ddb6:	f340 8084 	ble.w	801dec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ddba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ddbe:	4798      	blx	r3
 801ddc0:	eb07 030a 	add.w	r3, r7, sl
 801ddc4:	4298      	cmp	r0, r3
 801ddc6:	da07      	bge.n	801ddd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801ddc8:	4285      	cmp	r5, r0
 801ddca:	dd05      	ble.n	801ddd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801ddcc:	4287      	cmp	r7, r0
 801ddce:	dd6d      	ble.n	801deac <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801ddd0:	2f00      	cmp	r7, #0
 801ddd2:	dd6b      	ble.n	801deac <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801ddd4:	4628      	mov	r0, r5
 801ddd6:	e004      	b.n	801dde2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801ddd8:	4287      	cmp	r7, r0
 801ddda:	dcfb      	bgt.n	801ddd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801dddc:	42a8      	cmp	r0, r5
 801ddde:	bfa8      	it	ge
 801dde0:	4628      	movge	r0, r5
 801dde2:	4b7a      	ldr	r3, [pc, #488]	; (801dfcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801dde4:	f8ad 7016 	strh.w	r7, [sp, #22]
 801dde8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ddec:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ddf0:	9b02      	ldr	r3, [sp, #8]
 801ddf2:	1bc0      	subs	r0, r0, r7
 801ddf4:	2200      	movs	r2, #0
 801ddf6:	881f      	ldrh	r7, [r3, #0]
 801ddf8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ddfc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801de00:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801de04:	42bb      	cmp	r3, r7
 801de06:	d9cc      	bls.n	801dda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801de08:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801de0c:	ab07      	add	r3, sp, #28
 801de0e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801de12:	6851      	ldr	r1, [r2, #4]
 801de14:	c303      	stmia	r3!, {r0, r1}
 801de16:	a905      	add	r1, sp, #20
 801de18:	a807      	add	r0, sp, #28
 801de1a:	f7ff fa4f 	bl	801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801de1e:	2800      	cmp	r0, #0
 801de20:	d04c      	beq.n	801debc <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801de22:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801de26:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801de2a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801de2e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801de32:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801de36:	9303      	str	r3, [sp, #12]
 801de38:	4686      	mov	lr, r0
 801de3a:	4290      	cmp	r0, r2
 801de3c:	4448      	add	r0, r9
 801de3e:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801de42:	bfb8      	it	lt
 801de44:	4696      	movlt	lr, r2
 801de46:	444a      	add	r2, r9
 801de48:	4299      	cmp	r1, r3
 801de4a:	b280      	uxth	r0, r0
 801de4c:	b292      	uxth	r2, r2
 801de4e:	468c      	mov	ip, r1
 801de50:	fa0f f982 	sxth.w	r9, r2
 801de54:	bfb8      	it	lt
 801de56:	469c      	movlt	ip, r3
 801de58:	b203      	sxth	r3, r0
 801de5a:	454b      	cmp	r3, r9
 801de5c:	bfb8      	it	lt
 801de5e:	4602      	movlt	r2, r0
 801de60:	eba2 020e 	sub.w	r2, r2, lr
 801de64:	f8ad 2020 	strh.w	r2, [sp, #32]
 801de68:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801de6c:	9b03      	ldr	r3, [sp, #12]
 801de6e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801de72:	4411      	add	r1, r2
 801de74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801de78:	f8ad c01e 	strh.w	ip, [sp, #30]
 801de7c:	4413      	add	r3, r2
 801de7e:	b289      	uxth	r1, r1
 801de80:	b29b      	uxth	r3, r3
 801de82:	b208      	sxth	r0, r1
 801de84:	b21a      	sxth	r2, r3
 801de86:	4290      	cmp	r0, r2
 801de88:	bfb8      	it	lt
 801de8a:	460b      	movlt	r3, r1
 801de8c:	eba3 030c 	sub.w	r3, r3, ip
 801de90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801de94:	a807      	add	r0, sp, #28
 801de96:	f7fb ff82 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801de9a:	b920      	cbnz	r0, 801dea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801de9c:	6823      	ldr	r3, [r4, #0]
 801de9e:	a907      	add	r1, sp, #28
 801dea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dea2:	4620      	mov	r0, r4
 801dea4:	4798      	blx	r3
 801dea6:	3701      	adds	r7, #1
 801dea8:	b2bf      	uxth	r7, r7
 801deaa:	e7a9      	b.n	801de00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801deac:	f8d8 0000 	ldr.w	r0, [r8]
 801deb0:	6803      	ldr	r3, [r0, #0]
 801deb2:	2101      	movs	r1, #1
 801deb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801deb8:	4798      	blx	r3
 801deba:	e772      	b.n	801dda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801debc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801dec0:	e7e8      	b.n	801de94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801dec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dec4:	4798      	blx	r3
 801dec6:	4b42      	ldr	r3, [pc, #264]	; (801dfd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801dec8:	781b      	ldrb	r3, [r3, #0]
 801deca:	2b00      	cmp	r3, #0
 801decc:	f43f af27 	beq.w	801dd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ded0:	2300      	movs	r3, #0
 801ded2:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801ded6:	9b02      	ldr	r3, [sp, #8]
 801ded8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801dedc:	881b      	ldrh	r3, [r3, #0]
 801dede:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801dee2:	429d      	cmp	r5, r3
 801dee4:	f67f af1b 	bls.w	801dd1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801dee8:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801deec:	2907      	cmp	r1, #7
 801deee:	d815      	bhi.n	801df1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801def0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801def4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801def8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801defc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801df00:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801df04:	1c4a      	adds	r2, r1, #1
 801df06:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801df0a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801df0e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801df12:	f8a2 e002 	strh.w	lr, [r2, #2]
 801df16:	f8a2 c004 	strh.w	ip, [r2, #4]
 801df1a:	80d7      	strh	r7, [r2, #6]
 801df1c:	3301      	adds	r3, #1
 801df1e:	b29b      	uxth	r3, r3
 801df20:	e7df      	b.n	801dee2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801df22:	2b02      	cmp	r3, #2
 801df24:	f040 8136 	bne.w	801e194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801df28:	4b2a      	ldr	r3, [pc, #168]	; (801dfd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	2b01      	cmp	r3, #1
 801df2e:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801df32:	f000 809c 	beq.w	801e06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801df36:	9b02      	ldr	r3, [sp, #8]
 801df38:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801df3c:	f8b3 b000 	ldrh.w	fp, [r3]
 801df40:	f10b 0b01 	add.w	fp, fp, #1
 801df44:	fa1f fb8b 	uxth.w	fp, fp
 801df48:	2a00      	cmp	r2, #0
 801df4a:	d0bc      	beq.n	801dec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801df4c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801df50:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801df54:	441d      	add	r5, r3
 801df56:	b22d      	sxth	r5, r5
 801df58:	4659      	mov	r1, fp
 801df5a:	f04f 0800 	mov.w	r8, #0
 801df5e:	b28b      	uxth	r3, r1
 801df60:	429a      	cmp	r2, r3
 801df62:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801df66:	f240 80c1 	bls.w	801e0ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801df6a:	4427      	add	r7, r4
 801df6c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801df70:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801df74:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801df78:	4563      	cmp	r3, ip
 801df7a:	4608      	mov	r0, r1
 801df7c:	f340 80a3 	ble.w	801e0c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801df80:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801df84:	4465      	add	r5, ip
 801df86:	b22d      	sxth	r5, r5
 801df88:	429d      	cmp	r5, r3
 801df8a:	bfa8      	it	ge
 801df8c:	461d      	movge	r5, r3
 801df8e:	3101      	adds	r1, #1
 801df90:	4680      	mov	r8, r0
 801df92:	e7e4      	b.n	801df5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801df94:	d10b      	bne.n	801dfae <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801df96:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801df9a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801df9e:	458c      	cmp	ip, r1
 801dfa0:	bfb4      	ite	lt
 801dfa2:	469c      	movlt	ip, r3
 801dfa4:	46bc      	movge	ip, r7
 801dfa6:	4572      	cmp	r2, lr
 801dfa8:	bfb8      	it	lt
 801dfaa:	4672      	movlt	r2, lr
 801dfac:	e088      	b.n	801e0c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801dfae:	428a      	cmp	r2, r1
 801dfb0:	bfb8      	it	lt
 801dfb2:	460a      	movlt	r2, r1
 801dfb4:	46bc      	mov	ip, r7
 801dfb6:	e083      	b.n	801e0c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801dfb8:	2000b4fc 	.word	0x2000b4fc
 801dfbc:	2000b508 	.word	0x2000b508
 801dfc0:	20000310 	.word	0x20000310
 801dfc4:	2000b4c4 	.word	0x2000b4c4
 801dfc8:	2000b4ba 	.word	0x2000b4ba
 801dfcc:	2000b4b8 	.word	0x2000b4b8
 801dfd0:	2000b4c2 	.word	0x2000b4c2
 801dfd4:	2000b4bc 	.word	0x2000b4bc
 801dfd8:	1961      	adds	r1, r4, r5
 801dfda:	ab07      	add	r3, sp, #28
 801dfdc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801dfe0:	6849      	ldr	r1, [r1, #4]
 801dfe2:	c303      	stmia	r3!, {r0, r1}
 801dfe4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801dfe8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dfec:	2b13      	cmp	r3, #19
 801dfee:	bfd8      	it	le
 801dff0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801dff4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801dff8:	440b      	add	r3, r1
 801dffa:	1a9b      	subs	r3, r3, r2
 801dffc:	a807      	add	r0, sp, #28
 801dffe:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e002:	f7ff f83f 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e006:	a807      	add	r0, sp, #28
 801e008:	f7fb fec9 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e00c:	bb78      	cbnz	r0, 801e06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801e00e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801e012:	f8d8 0000 	ldr.w	r0, [r8]
 801e016:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e01a:	f8d0 e000 	ldr.w	lr, [r0]
 801e01e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801e022:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e026:	f1bc 0f14 	cmp.w	ip, #20
 801e02a:	bfa8      	it	ge
 801e02c:	f04f 0c14 	movge.w	ip, #20
 801e030:	fa1f fc8c 	uxth.w	ip, ip
 801e034:	f8cd c000 	str.w	ip, [sp]
 801e038:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801e03c:	47d0      	blx	sl
 801e03e:	4682      	mov	sl, r0
 801e040:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e044:	a807      	add	r0, sp, #28
 801e046:	f7ff f803 	bl	801d050 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801e04a:	6823      	ldr	r3, [r4, #0]
 801e04c:	4425      	add	r5, r4
 801e04e:	4620      	mov	r0, r4
 801e050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e052:	a907      	add	r1, sp, #28
 801e054:	4798      	blx	r3
 801e056:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801e05a:	eba0 000a 	sub.w	r0, r0, sl
 801e05e:	b200      	sxth	r0, r0
 801e060:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801e064:	b918      	cbnz	r0, 801e06e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801e066:	b2b9      	uxth	r1, r7
 801e068:	4648      	mov	r0, r9
 801e06a:	f7ff faa3 	bl	801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e06e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801e072:	f1bb 0f00 	cmp.w	fp, #0
 801e076:	f43f af26 	beq.w	801dec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801e07a:	9b02      	ldr	r3, [sp, #8]
 801e07c:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801e080:	881b      	ldrh	r3, [r3, #0]
 801e082:	3301      	adds	r3, #1
 801e084:	b29b      	uxth	r3, r3
 801e086:	2700      	movs	r7, #0
 801e088:	b299      	uxth	r1, r3
 801e08a:	458b      	cmp	fp, r1
 801e08c:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 801e090:	d9a2      	bls.n	801dfd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 801e092:	4425      	add	r5, r4
 801e094:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801e098:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801e09c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801e0a0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801e0a4:	4408      	add	r0, r1
 801e0a6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801e0aa:	4471      	add	r1, lr
 801e0ac:	b200      	sxth	r0, r0
 801e0ae:	b209      	sxth	r1, r1
 801e0b0:	4288      	cmp	r0, r1
 801e0b2:	469c      	mov	ip, r3
 801e0b4:	f6bf af6e 	bge.w	801df94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801e0b8:	4586      	cmp	lr, r0
 801e0ba:	4672      	mov	r2, lr
 801e0bc:	bfb8      	it	lt
 801e0be:	4602      	movlt	r2, r0
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	4667      	mov	r7, ip
 801e0c4:	e7e0      	b.n	801e088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801e0c6:	d10c      	bne.n	801e0e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801e0c8:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801e0cc:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801e0d0:	4287      	cmp	r7, r0
 801e0d2:	bfb4      	ite	lt
 801e0d4:	4608      	movlt	r0, r1
 801e0d6:	4640      	movge	r0, r8
 801e0d8:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801e0dc:	443b      	add	r3, r7
 801e0de:	b21b      	sxth	r3, r3
 801e0e0:	e752      	b.n	801df88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801e0e2:	4565      	cmp	r5, ip
 801e0e4:	bfa8      	it	ge
 801e0e6:	4665      	movge	r5, ip
 801e0e8:	4640      	mov	r0, r8
 801e0ea:	e750      	b.n	801df8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 801e0ec:	eb09 0007 	add.w	r0, r9, r7
 801e0f0:	4427      	add	r7, r4
 801e0f2:	9203      	str	r2, [sp, #12]
 801e0f4:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801e0f8:	f1ba 0f13 	cmp.w	sl, #19
 801e0fc:	bfde      	ittt	le
 801e0fe:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801e102:	4455      	addle	r5, sl
 801e104:	b22d      	sxthle	r5, r5
 801e106:	f7fb fe4a 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e10a:	9a03      	ldr	r2, [sp, #12]
 801e10c:	2800      	cmp	r0, #0
 801e10e:	f47f af1b 	bne.w	801df48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801e112:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801e116:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e11a:	482a      	ldr	r0, [pc, #168]	; (801e1c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801e11c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801e120:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801e124:	6800      	ldr	r0, [r0, #0]
 801e126:	f8ad 101c 	strh.w	r1, [sp, #28]
 801e12a:	1aad      	subs	r5, r5, r2
 801e12c:	2d14      	cmp	r5, #20
 801e12e:	f8ad 201e 	strh.w	r2, [sp, #30]
 801e132:	f8ad 3020 	strh.w	r3, [sp, #32]
 801e136:	bfa8      	it	ge
 801e138:	2514      	movge	r5, #20
 801e13a:	f8d0 c000 	ldr.w	ip, [r0]
 801e13e:	b2ad      	uxth	r5, r5
 801e140:	fa1f fa8a 	uxth.w	sl, sl
 801e144:	4555      	cmp	r5, sl
 801e146:	bf94      	ite	ls
 801e148:	9500      	strls	r5, [sp, #0]
 801e14a:	f8cd a000 	strhi.w	sl, [sp]
 801e14e:	b292      	uxth	r2, r2
 801e150:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801e154:	b29b      	uxth	r3, r3
 801e156:	b289      	uxth	r1, r1
 801e158:	47a8      	blx	r5
 801e15a:	6823      	ldr	r3, [r4, #0]
 801e15c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801e160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e162:	a907      	add	r1, sp, #28
 801e164:	4620      	mov	r0, r4
 801e166:	4798      	blx	r3
 801e168:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801e16c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801e170:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801e174:	1a5b      	subs	r3, r3, r1
 801e176:	440a      	add	r2, r1
 801e178:	b21b      	sxth	r3, r3
 801e17a:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801e17e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801e182:	2b00      	cmp	r3, #0
 801e184:	f47f aed7 	bne.w	801df36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801e188:	fa1f f188 	uxth.w	r1, r8
 801e18c:	4648      	mov	r0, r9
 801e18e:	f7ff fa11 	bl	801d5b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e192:	e6d0      	b.n	801df36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801e194:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801e198:	42ab      	cmp	r3, r5
 801e19a:	f67f ae94 	bls.w	801dec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801e19e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801e1a2:	ab07      	add	r3, sp, #28
 801e1a4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e1a8:	6851      	ldr	r1, [r2, #4]
 801e1aa:	c303      	stmia	r3!, {r0, r1}
 801e1ac:	a807      	add	r0, sp, #28
 801e1ae:	f7fb fdf6 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 801e1b2:	b920      	cbnz	r0, 801e1be <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 801e1b4:	6823      	ldr	r3, [r4, #0]
 801e1b6:	a907      	add	r1, sp, #28
 801e1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1ba:	4620      	mov	r0, r4
 801e1bc:	4798      	blx	r3
 801e1be:	3501      	adds	r5, #1
 801e1c0:	b2ad      	uxth	r5, r5
 801e1c2:	e7e7      	b.n	801e194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801e1c4:	2000b4c4 	.word	0x2000b4c4

0801e1c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801e1c8:	4b03      	ldr	r3, [pc, #12]	; (801e1d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801e1ca:	2200      	movs	r2, #0
 801e1cc:	801a      	strh	r2, [r3, #0]
 801e1ce:	805a      	strh	r2, [r3, #2]
 801e1d0:	809a      	strh	r2, [r3, #4]
 801e1d2:	80da      	strh	r2, [r3, #6]
 801e1d4:	4770      	bx	lr
 801e1d6:	bf00      	nop
 801e1d8:	2000b508 	.word	0x2000b508

0801e1dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801e1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1e0:	4606      	mov	r6, r0
 801e1e2:	b09d      	sub	sp, #116	; 0x74
 801e1e4:	a803      	add	r0, sp, #12
 801e1e6:	4614      	mov	r4, r2
 801e1e8:	468a      	mov	sl, r1
 801e1ea:	461d      	mov	r5, r3
 801e1ec:	f000 fd62 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801e1f0:	6833      	ldr	r3, [r6, #0]
 801e1f2:	4630      	mov	r0, r6
 801e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e1f6:	4798      	blx	r3
 801e1f8:	6833      	ldr	r3, [r6, #0]
 801e1fa:	4607      	mov	r7, r0
 801e1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e1fe:	4630      	mov	r0, r6
 801e200:	4798      	blx	r3
 801e202:	462a      	mov	r2, r5
 801e204:	9000      	str	r0, [sp, #0]
 801e206:	4621      	mov	r1, r4
 801e208:	463b      	mov	r3, r7
 801e20a:	a803      	add	r0, sp, #12
 801e20c:	f000 fdad 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e210:	2500      	movs	r5, #0
 801e212:	462c      	mov	r4, r5
 801e214:	46a9      	mov	r9, r5
 801e216:	46a8      	mov	r8, r5
 801e218:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801e21c:	2300      	movs	r3, #0
 801e21e:	9302      	str	r3, [sp, #8]
 801e220:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e224:	429c      	cmp	r4, r3
 801e226:	d002      	beq.n	801e22e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801e228:	455c      	cmp	r4, fp
 801e22a:	bf18      	it	ne
 801e22c:	4625      	movne	r5, r4
 801e22e:	ab02      	add	r3, sp, #8
 801e230:	4632      	mov	r2, r6
 801e232:	4651      	mov	r1, sl
 801e234:	a803      	add	r0, sp, #12
 801e236:	f001 f89b 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e23a:	4604      	mov	r4, r0
 801e23c:	b108      	cbz	r0, 801e242 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801e23e:	280a      	cmp	r0, #10
 801e240:	d10a      	bne.n	801e258 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801e242:	45c1      	cmp	r9, r8
 801e244:	bf38      	it	cc
 801e246:	46c1      	movcc	r9, r8
 801e248:	f04f 0800 	mov.w	r8, #0
 801e24c:	2c00      	cmp	r4, #0
 801e24e:	d1e5      	bne.n	801e21c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801e250:	4648      	mov	r0, r9
 801e252:	b01d      	add	sp, #116	; 0x74
 801e254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e258:	9a02      	ldr	r2, [sp, #8]
 801e25a:	2a00      	cmp	r2, #0
 801e25c:	d0de      	beq.n	801e21c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801e25e:	7b57      	ldrb	r7, [r2, #13]
 801e260:	6833      	ldr	r3, [r6, #0]
 801e262:	8894      	ldrh	r4, [r2, #4]
 801e264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e266:	007f      	lsls	r7, r7, #1
 801e268:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801e26c:	7a97      	ldrb	r7, [r2, #10]
 801e26e:	4629      	mov	r1, r5
 801e270:	4307      	orrs	r7, r0
 801e272:	4630      	mov	r0, r6
 801e274:	4798      	blx	r3
 801e276:	4438      	add	r0, r7
 801e278:	4480      	add	r8, r0
 801e27a:	fa1f f888 	uxth.w	r8, r8
 801e27e:	e7e5      	b.n	801e24c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801e280 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801e280:	b508      	push	{r3, lr}
 801e282:	6803      	ldr	r3, [r0, #0]
 801e284:	68db      	ldr	r3, [r3, #12]
 801e286:	4798      	blx	r3
 801e288:	b128      	cbz	r0, 801e296 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801e28a:	7b43      	ldrb	r3, [r0, #13]
 801e28c:	7a80      	ldrb	r0, [r0, #10]
 801e28e:	005b      	lsls	r3, r3, #1
 801e290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e294:	4318      	orrs	r0, r3
 801e296:	bd08      	pop	{r3, pc}

0801e298 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801e298:	b40e      	push	{r1, r2, r3}
 801e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e29c:	b09e      	sub	sp, #120	; 0x78
 801e29e:	ab23      	add	r3, sp, #140	; 0x8c
 801e2a0:	4605      	mov	r5, r0
 801e2a2:	f853 4b04 	ldr.w	r4, [r3], #4
 801e2a6:	9303      	str	r3, [sp, #12]
 801e2a8:	a805      	add	r0, sp, #20
 801e2aa:	f000 fd03 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801e2ae:	682b      	ldr	r3, [r5, #0]
 801e2b0:	4628      	mov	r0, r5
 801e2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e2b4:	4798      	blx	r3
 801e2b6:	682b      	ldr	r3, [r5, #0]
 801e2b8:	4606      	mov	r6, r0
 801e2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e2bc:	4628      	mov	r0, r5
 801e2be:	4798      	blx	r3
 801e2c0:	4633      	mov	r3, r6
 801e2c2:	ae1e      	add	r6, sp, #120	; 0x78
 801e2c4:	4621      	mov	r1, r4
 801e2c6:	9000      	str	r0, [sp, #0]
 801e2c8:	9a03      	ldr	r2, [sp, #12]
 801e2ca:	2400      	movs	r4, #0
 801e2cc:	a805      	add	r0, sp, #20
 801e2ce:	f000 fd4c 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e2d2:	f846 4d68 	str.w	r4, [r6, #-104]!
 801e2d6:	462a      	mov	r2, r5
 801e2d8:	4633      	mov	r3, r6
 801e2da:	4621      	mov	r1, r4
 801e2dc:	a805      	add	r0, sp, #20
 801e2de:	f001 f847 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e2e2:	b1f0      	cbz	r0, 801e322 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801e2e4:	280a      	cmp	r0, #10
 801e2e6:	d018      	beq.n	801e31a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801e2e8:	9f04      	ldr	r7, [sp, #16]
 801e2ea:	b1b7      	cbz	r7, 801e31a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801e2ec:	7b78      	ldrb	r0, [r7, #13]
 801e2ee:	7a3b      	ldrb	r3, [r7, #8]
 801e2f0:	88aa      	ldrh	r2, [r5, #4]
 801e2f2:	00c1      	lsls	r1, r0, #3
 801e2f4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801e2f8:	4319      	orrs	r1, r3
 801e2fa:	0643      	lsls	r3, r0, #25
 801e2fc:	bf44      	itt	mi
 801e2fe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801e302:	b219      	sxthmi	r1, r3
 801e304:	0100      	lsls	r0, r0, #4
 801e306:	79fb      	ldrb	r3, [r7, #7]
 801e308:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801e30c:	4303      	orrs	r3, r0
 801e30e:	4413      	add	r3, r2
 801e310:	1a5b      	subs	r3, r3, r1
 801e312:	b29b      	uxth	r3, r3
 801e314:	42a3      	cmp	r3, r4
 801e316:	bfc8      	it	gt
 801e318:	b21c      	sxthgt	r4, r3
 801e31a:	4633      	mov	r3, r6
 801e31c:	462a      	mov	r2, r5
 801e31e:	2100      	movs	r1, #0
 801e320:	e7dc      	b.n	801e2dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801e322:	b2a0      	uxth	r0, r4
 801e324:	b01e      	add	sp, #120	; 0x78
 801e326:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e32a:	b003      	add	sp, #12
 801e32c:	4770      	bx	lr

0801e32e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801e32e:	b40e      	push	{r1, r2, r3}
 801e330:	b570      	push	{r4, r5, r6, lr}
 801e332:	b09d      	sub	sp, #116	; 0x74
 801e334:	ab21      	add	r3, sp, #132	; 0x84
 801e336:	4604      	mov	r4, r0
 801e338:	f853 5b04 	ldr.w	r5, [r3], #4
 801e33c:	9302      	str	r3, [sp, #8]
 801e33e:	a803      	add	r0, sp, #12
 801e340:	f000 fcb8 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801e344:	6823      	ldr	r3, [r4, #0]
 801e346:	4620      	mov	r0, r4
 801e348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e34a:	4798      	blx	r3
 801e34c:	6823      	ldr	r3, [r4, #0]
 801e34e:	4606      	mov	r6, r0
 801e350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e352:	4620      	mov	r0, r4
 801e354:	4798      	blx	r3
 801e356:	4633      	mov	r3, r6
 801e358:	9000      	str	r0, [sp, #0]
 801e35a:	9a02      	ldr	r2, [sp, #8]
 801e35c:	4629      	mov	r1, r5
 801e35e:	a803      	add	r0, sp, #12
 801e360:	f000 fd03 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e364:	a803      	add	r0, sp, #12
 801e366:	f001 f8d1 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e36a:	2401      	movs	r4, #1
 801e36c:	b2a3      	uxth	r3, r4
 801e36e:	b140      	cbz	r0, 801e382 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801e370:	280a      	cmp	r0, #10
 801e372:	bf08      	it	eq
 801e374:	3301      	addeq	r3, #1
 801e376:	a803      	add	r0, sp, #12
 801e378:	bf08      	it	eq
 801e37a:	b21c      	sxtheq	r4, r3
 801e37c:	f001 f8c6 	bl	801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801e380:	e7f4      	b.n	801e36c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801e382:	4618      	mov	r0, r3
 801e384:	b01d      	add	sp, #116	; 0x74
 801e386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e38a:	b003      	add	sp, #12
 801e38c:	4770      	bx	lr

0801e38e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801e38e:	b40e      	push	{r1, r2, r3}
 801e390:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e392:	b09e      	sub	sp, #120	; 0x78
 801e394:	ab23      	add	r3, sp, #140	; 0x8c
 801e396:	4604      	mov	r4, r0
 801e398:	f853 5b04 	ldr.w	r5, [r3], #4
 801e39c:	9303      	str	r3, [sp, #12]
 801e39e:	a805      	add	r0, sp, #20
 801e3a0:	f000 fc88 	bl	801ecb4 <_ZN8touchgfx12TextProviderC1Ev>
 801e3a4:	6823      	ldr	r3, [r4, #0]
 801e3a6:	4620      	mov	r0, r4
 801e3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e3aa:	4798      	blx	r3
 801e3ac:	6823      	ldr	r3, [r4, #0]
 801e3ae:	4606      	mov	r6, r0
 801e3b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e3b2:	4620      	mov	r0, r4
 801e3b4:	4798      	blx	r3
 801e3b6:	4633      	mov	r3, r6
 801e3b8:	4629      	mov	r1, r5
 801e3ba:	9000      	str	r0, [sp, #0]
 801e3bc:	9a03      	ldr	r2, [sp, #12]
 801e3be:	a805      	add	r0, sp, #20
 801e3c0:	ad1e      	add	r5, sp, #120	; 0x78
 801e3c2:	f000 fcd2 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801e3c6:	2100      	movs	r1, #0
 801e3c8:	f845 1d68 	str.w	r1, [r5, #-104]!
 801e3cc:	4622      	mov	r2, r4
 801e3ce:	462b      	mov	r3, r5
 801e3d0:	a805      	add	r0, sp, #20
 801e3d2:	f000 ffcd 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e3d6:	26ff      	movs	r6, #255	; 0xff
 801e3d8:	b1d8      	cbz	r0, 801e412 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801e3da:	280a      	cmp	r0, #10
 801e3dc:	d012      	beq.n	801e404 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801e3de:	9804      	ldr	r0, [sp, #16]
 801e3e0:	b180      	cbz	r0, 801e404 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801e3e2:	7b47      	ldrb	r7, [r0, #13]
 801e3e4:	7922      	ldrb	r2, [r4, #4]
 801e3e6:	00fb      	lsls	r3, r7, #3
 801e3e8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801e3ec:	7a03      	ldrb	r3, [r0, #8]
 801e3ee:	430b      	orrs	r3, r1
 801e3f0:	0679      	lsls	r1, r7, #25
 801e3f2:	bf44      	itt	mi
 801e3f4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801e3f8:	b21b      	sxthmi	r3, r3
 801e3fa:	1ad3      	subs	r3, r2, r3
 801e3fc:	b2db      	uxtb	r3, r3
 801e3fe:	429e      	cmp	r6, r3
 801e400:	bf28      	it	cs
 801e402:	461e      	movcs	r6, r3
 801e404:	462b      	mov	r3, r5
 801e406:	4622      	mov	r2, r4
 801e408:	2100      	movs	r1, #0
 801e40a:	a805      	add	r0, sp, #20
 801e40c:	f000 ffb0 	bl	801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801e410:	e7e2      	b.n	801e3d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801e412:	4630      	mov	r0, r6
 801e414:	b01e      	add	sp, #120	; 0x78
 801e416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801e41a:	b003      	add	sp, #12
 801e41c:	4770      	bx	lr

0801e41e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801e41e:	b513      	push	{r0, r1, r4, lr}
 801e420:	6803      	ldr	r3, [r0, #0]
 801e422:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e426:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e42a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e42e:	2400      	movs	r4, #0
 801e430:	9400      	str	r4, [sp, #0]
 801e432:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e436:	691b      	ldr	r3, [r3, #16]
 801e438:	4669      	mov	r1, sp
 801e43a:	4798      	blx	r3
 801e43c:	b002      	add	sp, #8
 801e43e:	bd10      	pop	{r4, pc}

0801e440 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801e440:	b538      	push	{r3, r4, r5, lr}
 801e442:	680b      	ldr	r3, [r1, #0]
 801e444:	460c      	mov	r4, r1
 801e446:	68db      	ldr	r3, [r3, #12]
 801e448:	4605      	mov	r5, r0
 801e44a:	4798      	blx	r3
 801e44c:	6823      	ldr	r3, [r4, #0]
 801e44e:	4620      	mov	r0, r4
 801e450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e452:	4629      	mov	r1, r5
 801e454:	4798      	blx	r3
 801e456:	4628      	mov	r0, r5
 801e458:	bd38      	pop	{r3, r4, r5, pc}

0801e45a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801e45a:	b410      	push	{r4}
 801e45c:	880a      	ldrh	r2, [r1, #0]
 801e45e:	8884      	ldrh	r4, [r0, #4]
 801e460:	4422      	add	r2, r4
 801e462:	800a      	strh	r2, [r1, #0]
 801e464:	88c4      	ldrh	r4, [r0, #6]
 801e466:	884a      	ldrh	r2, [r1, #2]
 801e468:	4422      	add	r2, r4
 801e46a:	804a      	strh	r2, [r1, #2]
 801e46c:	6940      	ldr	r0, [r0, #20]
 801e46e:	b120      	cbz	r0, 801e47a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801e470:	6803      	ldr	r3, [r0, #0]
 801e472:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e478:	4718      	bx	r3
 801e47a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e47e:	4770      	bx	lr

0801e480 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801e480:	b570      	push	{r4, r5, r6, lr}
 801e482:	8882      	ldrh	r2, [r0, #4]
 801e484:	880b      	ldrh	r3, [r1, #0]
 801e486:	4413      	add	r3, r2
 801e488:	800b      	strh	r3, [r1, #0]
 801e48a:	88c2      	ldrh	r2, [r0, #6]
 801e48c:	884b      	ldrh	r3, [r1, #2]
 801e48e:	460c      	mov	r4, r1
 801e490:	4413      	add	r3, r2
 801e492:	804b      	strh	r3, [r1, #2]
 801e494:	4605      	mov	r5, r0
 801e496:	1d01      	adds	r1, r0, #4
 801e498:	4620      	mov	r0, r4
 801e49a:	f7fb fc3d 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801e49e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	dd0b      	ble.n	801e4be <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e4a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	dd07      	ble.n	801e4be <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e4ae:	6968      	ldr	r0, [r5, #20]
 801e4b0:	b128      	cbz	r0, 801e4be <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801e4b2:	6803      	ldr	r3, [r0, #0]
 801e4b4:	4621      	mov	r1, r4
 801e4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e4bc:	4718      	bx	r3
 801e4be:	bd70      	pop	{r4, r5, r6, pc}

0801e4c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801e4c0:	b570      	push	{r4, r5, r6, lr}
 801e4c2:	8882      	ldrh	r2, [r0, #4]
 801e4c4:	880b      	ldrh	r3, [r1, #0]
 801e4c6:	4413      	add	r3, r2
 801e4c8:	800b      	strh	r3, [r1, #0]
 801e4ca:	88c2      	ldrh	r2, [r0, #6]
 801e4cc:	884b      	ldrh	r3, [r1, #2]
 801e4ce:	460c      	mov	r4, r1
 801e4d0:	4413      	add	r3, r2
 801e4d2:	804b      	strh	r3, [r1, #2]
 801e4d4:	4605      	mov	r5, r0
 801e4d6:	1d01      	adds	r1, r0, #4
 801e4d8:	4620      	mov	r0, r4
 801e4da:	f7fb fc1d 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801e4de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	dd18      	ble.n	801e518 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801e4e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	dd14      	ble.n	801e518 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801e4ee:	6968      	ldr	r0, [r5, #20]
 801e4f0:	b128      	cbz	r0, 801e4fe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801e4f2:	6803      	ldr	r3, [r0, #0]
 801e4f4:	4621      	mov	r1, r4
 801e4f6:	691b      	ldr	r3, [r3, #16]
 801e4f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e4fc:	4718      	bx	r3
 801e4fe:	4b07      	ldr	r3, [pc, #28]	; (801e51c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	3304      	adds	r3, #4
 801e504:	429d      	cmp	r5, r3
 801e506:	d107      	bne.n	801e518 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801e508:	f7fe ffb6 	bl	801d478 <_ZN8touchgfx11Application11getInstanceEv>
 801e50c:	6821      	ldr	r1, [r4, #0]
 801e50e:	6862      	ldr	r2, [r4, #4]
 801e510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e514:	f7ff b862 	b.w	801d5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e518:	bd70      	pop	{r4, r5, r6, pc}
 801e51a:	bf00      	nop
 801e51c:	2000b500 	.word	0x2000b500

0801e520 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801e520:	b570      	push	{r4, r5, r6, lr}
 801e522:	4604      	mov	r4, r0
 801e524:	4616      	mov	r6, r2
 801e526:	460d      	mov	r5, r1
 801e528:	b901      	cbnz	r1, 801e52c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801e52a:	b192      	cbz	r2, 801e552 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801e52c:	6823      	ldr	r3, [r4, #0]
 801e52e:	4620      	mov	r0, r4
 801e530:	699b      	ldr	r3, [r3, #24]
 801e532:	4798      	blx	r3
 801e534:	88e2      	ldrh	r2, [r4, #6]
 801e536:	88a1      	ldrh	r1, [r4, #4]
 801e538:	4432      	add	r2, r6
 801e53a:	4429      	add	r1, r5
 801e53c:	4620      	mov	r0, r4
 801e53e:	b212      	sxth	r2, r2
 801e540:	b209      	sxth	r1, r1
 801e542:	f7f3 fe72 	bl	801222a <_ZN8touchgfx8Drawable5setXYEss>
 801e546:	6823      	ldr	r3, [r4, #0]
 801e548:	4620      	mov	r0, r4
 801e54a:	699b      	ldr	r3, [r3, #24]
 801e54c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e550:	4718      	bx	r3
 801e552:	bd70      	pop	{r4, r5, r6, pc}

0801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801e554:	b510      	push	{r4, lr}
 801e556:	4604      	mov	r4, r0
 801e558:	4608      	mov	r0, r1
 801e55a:	2300      	movs	r3, #0
 801e55c:	8023      	strh	r3, [r4, #0]
 801e55e:	8063      	strh	r3, [r4, #2]
 801e560:	6803      	ldr	r3, [r0, #0]
 801e562:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e566:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801e56a:	80a1      	strh	r1, [r4, #4]
 801e56c:	80e2      	strh	r2, [r4, #6]
 801e56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e570:	4621      	mov	r1, r4
 801e572:	4798      	blx	r3
 801e574:	4620      	mov	r0, r4
 801e576:	bd10      	pop	{r4, pc}

0801e578 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801e578:	b530      	push	{r4, r5, lr}
 801e57a:	8083      	strh	r3, [r0, #4]
 801e57c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801e580:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801e584:	7183      	strb	r3, [r0, #6]
 801e586:	79c3      	ldrb	r3, [r0, #7]
 801e588:	6101      	str	r1, [r0, #16]
 801e58a:	f365 0306 	bfi	r3, r5, #0, #7
 801e58e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801e592:	8282      	strh	r2, [r0, #20]
 801e594:	f365 13c7 	bfi	r3, r5, #7, #1
 801e598:	71c3      	strb	r3, [r0, #7]
 801e59a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801e59e:	7203      	strb	r3, [r0, #8]
 801e5a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e5a4:	7243      	strb	r3, [r0, #9]
 801e5a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e5aa:	8143      	strh	r3, [r0, #10]
 801e5ac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801e5b0:	8183      	strh	r3, [r0, #12]
 801e5b2:	4b01      	ldr	r3, [pc, #4]	; (801e5b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801e5b4:	6003      	str	r3, [r0, #0]
 801e5b6:	bd30      	pop	{r4, r5, pc}
 801e5b8:	0802f3c4 	.word	0x0802f3c4

0801e5bc <_ZNK8touchgfx9ConstFont4findEt>:
 801e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5be:	6904      	ldr	r4, [r0, #16]
 801e5c0:	b3bc      	cbz	r4, 801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e5c2:	88a3      	ldrh	r3, [r4, #4]
 801e5c4:	8a82      	ldrh	r2, [r0, #20]
 801e5c6:	1acb      	subs	r3, r1, r3
 801e5c8:	f102 32ff 	add.w	r2, r2, #4294967295
 801e5cc:	d431      	bmi.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e5ce:	4293      	cmp	r3, r2
 801e5d0:	dd0c      	ble.n	801e5ec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801e5d2:	230e      	movs	r3, #14
 801e5d4:	fb03 4302 	mla	r3, r3, r2, r4
 801e5d8:	889b      	ldrh	r3, [r3, #4]
 801e5da:	1a5b      	subs	r3, r3, r1
 801e5dc:	1ad3      	subs	r3, r2, r3
 801e5de:	429a      	cmp	r2, r3
 801e5e0:	db27      	blt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	bfbc      	itt	lt
 801e5e6:	2302      	movlt	r3, #2
 801e5e8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801e5ec:	2500      	movs	r5, #0
 801e5ee:	260e      	movs	r6, #14
 801e5f0:	4295      	cmp	r5, r2
 801e5f2:	dc1e      	bgt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e5f4:	fb06 4003 	mla	r0, r6, r3, r4
 801e5f8:	8887      	ldrh	r7, [r0, #4]
 801e5fa:	42b9      	cmp	r1, r7
 801e5fc:	d01a      	beq.n	801e634 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801e5fe:	d20d      	bcs.n	801e61c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801e600:	1e5a      	subs	r2, r3, #1
 801e602:	4295      	cmp	r5, r2
 801e604:	dc15      	bgt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e606:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801e60a:	1a5b      	subs	r3, r3, r1
 801e60c:	1ad3      	subs	r3, r2, r3
 801e60e:	429a      	cmp	r2, r3
 801e610:	db0f      	blt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e612:	429d      	cmp	r5, r3
 801e614:	ddec      	ble.n	801e5f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e616:	1953      	adds	r3, r2, r5
 801e618:	105b      	asrs	r3, r3, #1
 801e61a:	e7e9      	b.n	801e5f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e61c:	1c5d      	adds	r5, r3, #1
 801e61e:	42aa      	cmp	r2, r5
 801e620:	db07      	blt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e622:	8a43      	ldrh	r3, [r0, #18]
 801e624:	1acb      	subs	r3, r1, r3
 801e626:	442b      	add	r3, r5
 801e628:	429d      	cmp	r5, r3
 801e62a:	dc02      	bgt.n	801e632 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801e62c:	429a      	cmp	r2, r3
 801e62e:	dadf      	bge.n	801e5f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801e630:	e7f1      	b.n	801e616 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801e632:	2000      	movs	r0, #0
 801e634:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e636 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801e636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e638:	4604      	mov	r4, r0
 801e63a:	4617      	mov	r7, r2
 801e63c:	461e      	mov	r6, r3
 801e63e:	b911      	cbnz	r1, 801e646 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801e640:	2500      	movs	r5, #0
 801e642:	4628      	mov	r0, r5
 801e644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e646:	290a      	cmp	r1, #10
 801e648:	d0fa      	beq.n	801e640 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e64a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801e64e:	4291      	cmp	r1, r2
 801e650:	d0f6      	beq.n	801e640 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e652:	f242 020b 	movw	r2, #8203	; 0x200b
 801e656:	4291      	cmp	r1, r2
 801e658:	d0f2      	beq.n	801e640 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e65a:	f7ff ffaf 	bl	801e5bc <_ZNK8touchgfx9ConstFont4findEt>
 801e65e:	4605      	mov	r5, r0
 801e660:	b950      	cbnz	r0, 801e678 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801e662:	6823      	ldr	r3, [r4, #0]
 801e664:	4620      	mov	r0, r4
 801e666:	691b      	ldr	r3, [r3, #16]
 801e668:	4798      	blx	r3
 801e66a:	4601      	mov	r1, r0
 801e66c:	4620      	mov	r0, r4
 801e66e:	f7ff ffa5 	bl	801e5bc <_ZNK8touchgfx9ConstFont4findEt>
 801e672:	4605      	mov	r5, r0
 801e674:	2800      	cmp	r0, #0
 801e676:	d0e3      	beq.n	801e640 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801e678:	6823      	ldr	r3, [r4, #0]
 801e67a:	4629      	mov	r1, r5
 801e67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e67e:	4620      	mov	r0, r4
 801e680:	4798      	blx	r3
 801e682:	6038      	str	r0, [r7, #0]
 801e684:	6823      	ldr	r3, [r4, #0]
 801e686:	4620      	mov	r0, r4
 801e688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e68a:	4798      	blx	r3
 801e68c:	7030      	strb	r0, [r6, #0]
 801e68e:	e7d8      	b.n	801e642 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801e690 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801e690:	2000      	movs	r0, #0
 801e692:	4770      	bx	lr

0801e694 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801e694:	2001      	movs	r0, #1
 801e696:	4770      	bx	lr

0801e698 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801e698:	2002      	movs	r0, #2
 801e69a:	4770      	bx	lr

0801e69c <_ZN8touchgfx12GestureEventD1Ev>:
 801e69c:	4770      	bx	lr

0801e69e <_ZN8touchgfx9DragEventD1Ev>:
 801e69e:	4770      	bx	lr

0801e6a0 <_ZN8touchgfx10ClickEventD1Ev>:
 801e6a0:	4770      	bx	lr

0801e6a2 <_ZN8touchgfx10ClickEventD0Ev>:
 801e6a2:	b510      	push	{r4, lr}
 801e6a4:	210c      	movs	r1, #12
 801e6a6:	4604      	mov	r4, r0
 801e6a8:	f00d f8f5 	bl	802b896 <_ZdlPvj>
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	bd10      	pop	{r4, pc}

0801e6b0 <_ZN8touchgfx9DragEventD0Ev>:
 801e6b0:	b510      	push	{r4, lr}
 801e6b2:	2110      	movs	r1, #16
 801e6b4:	4604      	mov	r4, r0
 801e6b6:	f00d f8ee 	bl	802b896 <_ZdlPvj>
 801e6ba:	4620      	mov	r0, r4
 801e6bc:	bd10      	pop	{r4, pc}

0801e6be <_ZN8touchgfx12GestureEventD0Ev>:
 801e6be:	b510      	push	{r4, lr}
 801e6c0:	210c      	movs	r1, #12
 801e6c2:	4604      	mov	r4, r0
 801e6c4:	f00d f8e7 	bl	802b896 <_ZdlPvj>
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	bd10      	pop	{r4, pc}

0801e6cc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801e6cc:	b530      	push	{r4, r5, lr}
 801e6ce:	460d      	mov	r5, r1
 801e6d0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e6d2:	b087      	sub	sp, #28
 801e6d4:	4604      	mov	r4, r0
 801e6d6:	b301      	cbz	r1, 801e71a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801e6d8:	a801      	add	r0, sp, #4
 801e6da:	f7ff ff3b 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e6de:	892a      	ldrh	r2, [r5, #8]
 801e6e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801e6e4:	7928      	ldrb	r0, [r5, #4]
 801e6e6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e6ea:	f88d 0010 	strb.w	r0, [sp, #16]
 801e6ee:	1ad2      	subs	r2, r2, r3
 801e6f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801e6f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e6f4:	f8ad 1012 	strh.w	r1, [sp, #18]
 801e6f8:	441a      	add	r2, r3
 801e6fa:	896b      	ldrh	r3, [r5, #10]
 801e6fc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801e700:	f8ad 2014 	strh.w	r2, [sp, #20]
 801e704:	1b5b      	subs	r3, r3, r5
 801e706:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801e708:	442b      	add	r3, r5
 801e70a:	4d05      	ldr	r5, [pc, #20]	; (801e720 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801e70c:	9503      	str	r5, [sp, #12]
 801e70e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e712:	6803      	ldr	r3, [r0, #0]
 801e714:	a903      	add	r1, sp, #12
 801e716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e718:	4798      	blx	r3
 801e71a:	b007      	add	sp, #28
 801e71c:	bd30      	pop	{r4, r5, pc}
 801e71e:	bf00      	nop
 801e720:	0802f444 	.word	0x0802f444

0801e724 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e728:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e72a:	b08a      	sub	sp, #40	; 0x28
 801e72c:	4604      	mov	r4, r0
 801e72e:	460d      	mov	r5, r1
 801e730:	b113      	cbz	r3, 801e738 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801e732:	790b      	ldrb	r3, [r1, #4]
 801e734:	2b00      	cmp	r3, #0
 801e736:	d044      	beq.n	801e7c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e738:	f104 0804 	add.w	r8, r4, #4
 801e73c:	4641      	mov	r1, r8
 801e73e:	a803      	add	r0, sp, #12
 801e740:	f7ff ff08 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e744:	792b      	ldrb	r3, [r5, #4]
 801e746:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801e74a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801e74e:	b983      	cbnz	r3, 801e772 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801e750:	892a      	ldrh	r2, [r5, #8]
 801e752:	88e9      	ldrh	r1, [r5, #6]
 801e754:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801e758:	1b92      	subs	r2, r2, r6
 801e75a:	1bc9      	subs	r1, r1, r7
 801e75c:	9301      	str	r3, [sp, #4]
 801e75e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801e762:	9300      	str	r3, [sp, #0]
 801e764:	b212      	sxth	r2, r2
 801e766:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801e76a:	b209      	sxth	r1, r1
 801e76c:	4640      	mov	r0, r8
 801e76e:	f7fb f9ef 	bl	8019b50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801e772:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e774:	b329      	cbz	r1, 801e7c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e776:	a805      	add	r0, sp, #20
 801e778:	f7ff feec 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e77c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801e780:	792b      	ldrb	r3, [r5, #4]
 801e782:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e784:	f88d 3020 	strb.w	r3, [sp, #32]
 801e788:	1abf      	subs	r7, r7, r2
 801e78a:	88ea      	ldrh	r2, [r5, #6]
 801e78c:	4417      	add	r7, r2
 801e78e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801e790:	4417      	add	r7, r2
 801e792:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e796:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801e79a:	1ab6      	subs	r6, r6, r2
 801e79c:	892a      	ldrh	r2, [r5, #8]
 801e79e:	4416      	add	r6, r2
 801e7a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801e7a2:	4416      	add	r6, r2
 801e7a4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801e7a8:	4a07      	ldr	r2, [pc, #28]	; (801e7c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801e7aa:	9207      	str	r2, [sp, #28]
 801e7ac:	2600      	movs	r6, #0
 801e7ae:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801e7b2:	6803      	ldr	r3, [r0, #0]
 801e7b4:	a907      	add	r1, sp, #28
 801e7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e7b8:	4798      	blx	r3
 801e7ba:	792b      	ldrb	r3, [r5, #4]
 801e7bc:	b10b      	cbz	r3, 801e7c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801e7be:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801e7c2:	b00a      	add	sp, #40	; 0x28
 801e7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7c8:	0802f41c 	.word	0x0802f41c

0801e7cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7d0:	460c      	mov	r4, r1
 801e7d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801e7d4:	b088      	sub	sp, #32
 801e7d6:	4605      	mov	r5, r0
 801e7d8:	2900      	cmp	r1, #0
 801e7da:	d06d      	beq.n	801e8b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801e7dc:	4668      	mov	r0, sp
 801e7de:	f7ff feb9 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e7e2:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801e7e4:	88e3      	ldrh	r3, [r4, #6]
 801e7e6:	f9bd 8000 	ldrsh.w	r8, [sp]
 801e7ea:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801e7ee:	440b      	add	r3, r1
 801e7f0:	b21b      	sxth	r3, r3
 801e7f2:	4543      	cmp	r3, r8
 801e7f4:	db31      	blt.n	801e85a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e7f6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801e7fa:	44c4      	add	ip, r8
 801e7fc:	fa0f fc8c 	sxth.w	ip, ip
 801e800:	4563      	cmp	r3, ip
 801e802:	da2a      	bge.n	801e85a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e804:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801e806:	8926      	ldrh	r6, [r4, #8]
 801e808:	4416      	add	r6, r2
 801e80a:	b236      	sxth	r6, r6
 801e80c:	42be      	cmp	r6, r7
 801e80e:	db24      	blt.n	801e85a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e810:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e814:	4438      	add	r0, r7
 801e816:	b200      	sxth	r0, r0
 801e818:	4286      	cmp	r6, r0
 801e81a:	da1e      	bge.n	801e85a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e81c:	8963      	ldrh	r3, [r4, #10]
 801e81e:	4419      	add	r1, r3
 801e820:	b209      	sxth	r1, r1
 801e822:	4541      	cmp	r1, r8
 801e824:	db08      	blt.n	801e838 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e826:	4561      	cmp	r1, ip
 801e828:	da06      	bge.n	801e838 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e82a:	89a3      	ldrh	r3, [r4, #12]
 801e82c:	441a      	add	r2, r3
 801e82e:	b212      	sxth	r2, r2
 801e830:	42ba      	cmp	r2, r7
 801e832:	db01      	blt.n	801e838 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801e834:	4282      	cmp	r2, r0
 801e836:	db10      	blt.n	801e85a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801e838:	4b21      	ldr	r3, [pc, #132]	; (801e8c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801e83a:	9304      	str	r3, [sp, #16]
 801e83c:	2302      	movs	r3, #2
 801e83e:	f88d 3014 	strb.w	r3, [sp, #20]
 801e842:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e844:	2300      	movs	r3, #0
 801e846:	f8ad 3016 	strh.w	r3, [sp, #22]
 801e84a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801e84e:	f8ad 301a 	strh.w	r3, [sp, #26]
 801e852:	6803      	ldr	r3, [r0, #0]
 801e854:	a904      	add	r1, sp, #16
 801e856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e858:	4798      	blx	r3
 801e85a:	1d29      	adds	r1, r5, #4
 801e85c:	a802      	add	r0, sp, #8
 801e85e:	f7ff fe79 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e862:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801e866:	88e0      	ldrh	r0, [r4, #6]
 801e868:	7921      	ldrb	r1, [r4, #4]
 801e86a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801e86e:	8922      	ldrh	r2, [r4, #8]
 801e870:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801e872:	f88d 1014 	strb.w	r1, [sp, #20]
 801e876:	eba3 0808 	sub.w	r8, r3, r8
 801e87a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801e87e:	1bdf      	subs	r7, r3, r7
 801e880:	b2bb      	uxth	r3, r7
 801e882:	fa1f f888 	uxth.w	r8, r8
 801e886:	8967      	ldrh	r7, [r4, #10]
 801e888:	89a4      	ldrh	r4, [r4, #12]
 801e88a:	4440      	add	r0, r8
 801e88c:	4460      	add	r0, ip
 801e88e:	441a      	add	r2, r3
 801e890:	44b8      	add	r8, r7
 801e892:	4423      	add	r3, r4
 801e894:	f8ad 0016 	strh.w	r0, [sp, #22]
 801e898:	4433      	add	r3, r6
 801e89a:	4432      	add	r2, r6
 801e89c:	44e0      	add	r8, ip
 801e89e:	4c09      	ldr	r4, [pc, #36]	; (801e8c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801e8a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e8a2:	9404      	str	r4, [sp, #16]
 801e8a4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801e8a8:	f8ad 801a 	strh.w	r8, [sp, #26]
 801e8ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e8b0:	6803      	ldr	r3, [r0, #0]
 801e8b2:	a904      	add	r1, sp, #16
 801e8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e8b6:	4798      	blx	r3
 801e8b8:	b008      	add	sp, #32
 801e8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8be:	bf00      	nop
 801e8c0:	0802f41c 	.word	0x0802f41c
 801e8c4:	0802f430 	.word	0x0802f430

0801e8c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801e8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8ca:	4604      	mov	r4, r0
 801e8cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801e8d0:	3201      	adds	r2, #1
 801e8d2:	d112      	bne.n	801e8fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801e8d4:	6803      	ldr	r3, [r0, #0]
 801e8d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801e8da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801e8de:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e8e2:	2500      	movs	r5, #0
 801e8e4:	9500      	str	r5, [sp, #0]
 801e8e6:	466d      	mov	r5, sp
 801e8e8:	4629      	mov	r1, r5
 801e8ea:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8f0:	4798      	blx	r3
 801e8f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801e8f6:	e884 0003 	stmia.w	r4, {r0, r1}
 801e8fa:	4620      	mov	r0, r4
 801e8fc:	b003      	add	sp, #12
 801e8fe:	bd30      	pop	{r4, r5, pc}

0801e900 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801e900:	b513      	push	{r0, r1, r4, lr}
 801e902:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801e906:	3301      	adds	r3, #1
 801e908:	4604      	mov	r4, r0
 801e90a:	d109      	bne.n	801e920 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801e90c:	4601      	mov	r1, r0
 801e90e:	4668      	mov	r0, sp
 801e910:	f7ff fe20 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e914:	f8bd 3000 	ldrh.w	r3, [sp]
 801e918:	8423      	strh	r3, [r4, #32]
 801e91a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e91e:	8463      	strh	r3, [r4, #34]	; 0x22
 801e920:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801e924:	b002      	add	sp, #8
 801e926:	bd10      	pop	{r4, pc}

0801e928 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801e928:	b513      	push	{r0, r1, r4, lr}
 801e92a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801e92e:	3301      	adds	r3, #1
 801e930:	4604      	mov	r4, r0
 801e932:	d109      	bne.n	801e948 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801e934:	4601      	mov	r1, r0
 801e936:	4668      	mov	r0, sp
 801e938:	f7ff fe0c 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801e93c:	f8bd 3000 	ldrh.w	r3, [sp]
 801e940:	8423      	strh	r3, [r4, #32]
 801e942:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e946:	8463      	strh	r3, [r4, #34]	; 0x22
 801e948:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801e94c:	b002      	add	sp, #8
 801e94e:	bd10      	pop	{r4, pc}

0801e950 <_ZN8touchgfx6ScreenC1Ev>:
 801e950:	b570      	push	{r4, r5, r6, lr}
 801e952:	4605      	mov	r5, r0
 801e954:	4b16      	ldr	r3, [pc, #88]	; (801e9b0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801e956:	f845 3b04 	str.w	r3, [r5], #4
 801e95a:	2300      	movs	r3, #0
 801e95c:	8103      	strh	r3, [r0, #8]
 801e95e:	8143      	strh	r3, [r0, #10]
 801e960:	8183      	strh	r3, [r0, #12]
 801e962:	81c3      	strh	r3, [r0, #14]
 801e964:	8203      	strh	r3, [r0, #16]
 801e966:	8243      	strh	r3, [r0, #18]
 801e968:	8283      	strh	r3, [r0, #20]
 801e96a:	82c3      	strh	r3, [r0, #22]
 801e96c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801e970:	6203      	str	r3, [r0, #32]
 801e972:	8483      	strh	r3, [r0, #36]	; 0x24
 801e974:	84c3      	strh	r3, [r0, #38]	; 0x26
 801e976:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801e97a:	4a0e      	ldr	r2, [pc, #56]	; (801e9b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801e97c:	6343      	str	r3, [r0, #52]	; 0x34
 801e97e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801e982:	4b0d      	ldr	r3, [pc, #52]	; (801e9b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801e984:	6042      	str	r2, [r0, #4]
 801e986:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e98a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801e98c:	4a0b      	ldr	r2, [pc, #44]	; (801e9bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801e98e:	4604      	mov	r4, r0
 801e990:	2101      	movs	r1, #1
 801e992:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801e996:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801e99a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801e99e:	4628      	mov	r0, r5
 801e9a0:	4798      	blx	r3
 801e9a2:	6863      	ldr	r3, [r4, #4]
 801e9a4:	4628      	mov	r0, r5
 801e9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9a8:	4631      	mov	r1, r6
 801e9aa:	4798      	blx	r3
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	bd70      	pop	{r4, r5, r6, pc}
 801e9b0:	0802f458 	.word	0x0802f458
 801e9b4:	0802ed08 	.word	0x0802ed08
 801e9b8:	2000b4ba 	.word	0x2000b4ba
 801e9bc:	2000b4b8 	.word	0x2000b4b8

0801e9c0 <_ZN8touchgfx6Screen4drawEv>:
 801e9c0:	b507      	push	{r0, r1, r2, lr}
 801e9c2:	4b09      	ldr	r3, [pc, #36]	; (801e9e8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801e9c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e9c8:	4b08      	ldr	r3, [pc, #32]	; (801e9ec <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801e9ca:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e9ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e9d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e9d6:	6803      	ldr	r3, [r0, #0]
 801e9d8:	2100      	movs	r1, #0
 801e9da:	9100      	str	r1, [sp, #0]
 801e9dc:	689b      	ldr	r3, [r3, #8]
 801e9de:	4669      	mov	r1, sp
 801e9e0:	4798      	blx	r3
 801e9e2:	b003      	add	sp, #12
 801e9e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e9e8:	2000b4b8 	.word	0x2000b4b8
 801e9ec:	2000b4ba 	.word	0x2000b4ba

0801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801e9f8:	2b00      	cmp	r3, #0
 801e9fa:	b089      	sub	sp, #36	; 0x24
 801e9fc:	4680      	mov	r8, r0
 801e9fe:	460c      	mov	r4, r1
 801ea00:	4615      	mov	r5, r2
 801ea02:	dd0e      	ble.n	801ea22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ea04:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	dd0a      	ble.n	801ea22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ea0c:	4628      	mov	r0, r5
 801ea0e:	f7ff ff5b 	bl	801e8c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ea12:	4621      	mov	r1, r4
 801ea14:	f7fe fc52 	bl	801d2bc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ea18:	69eb      	ldr	r3, [r5, #28]
 801ea1a:	b928      	cbnz	r0, 801ea28 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801ea1c:	461d      	mov	r5, r3
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d1f4      	bne.n	801ea0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801ea22:	b009      	add	sp, #36	; 0x24
 801ea24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea28:	ae04      	add	r6, sp, #16
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	f000 80b5 	beq.w	801eb9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ea30:	682b      	ldr	r3, [r5, #0]
 801ea32:	4629      	mov	r1, r5
 801ea34:	68db      	ldr	r3, [r3, #12]
 801ea36:	a802      	add	r0, sp, #8
 801ea38:	4798      	blx	r3
 801ea3a:	4628      	mov	r0, r5
 801ea3c:	f7ff ff60 	bl	801e900 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ea40:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801ea44:	4407      	add	r7, r0
 801ea46:	4628      	mov	r0, r5
 801ea48:	f7ff ff6e 	bl	801e928 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ea4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801ea50:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801ea54:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ea58:	4418      	add	r0, r3
 801ea5a:	4621      	mov	r1, r4
 801ea5c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ea60:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ea64:	b23f      	sxth	r7, r7
 801ea66:	4630      	mov	r0, r6
 801ea68:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ea6c:	f8ad 7010 	strh.w	r7, [sp, #16]
 801ea70:	f7fb f952 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801ea74:	4628      	mov	r0, r5
 801ea76:	f7ff ff27 	bl	801e8c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ea7a:	4602      	mov	r2, r0
 801ea7c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801ea80:	ab06      	add	r3, sp, #24
 801ea82:	e883 0003 	stmia.w	r3, {r0, r1}
 801ea86:	4611      	mov	r1, r2
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f7fb f945 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801ea8e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ea92:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ea96:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801ea9a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801ea9e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801eaa2:	4299      	cmp	r1, r3
 801eaa4:	d10b      	bne.n	801eabe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801eaa6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801eaaa:	4552      	cmp	r2, sl
 801eaac:	d107      	bne.n	801eabe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801eaae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801eab2:	455a      	cmp	r2, fp
 801eab4:	d103      	bne.n	801eabe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801eab6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801eaba:	454a      	cmp	r2, r9
 801eabc:	d06d      	beq.n	801eb9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801eabe:	f1bb 0f00 	cmp.w	fp, #0
 801eac2:	dd65      	ble.n	801eb90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801eac4:	f1b9 0f00 	cmp.w	r9, #0
 801eac8:	dd62      	ble.n	801eb90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801eaca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801eace:	fa1f f08a 	uxth.w	r0, sl
 801ead2:	4552      	cmp	r2, sl
 801ead4:	9000      	str	r0, [sp, #0]
 801ead6:	da12      	bge.n	801eafe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801ead8:	9301      	str	r3, [sp, #4]
 801eada:	9b00      	ldr	r3, [sp, #0]
 801eadc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801eae0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801eae4:	1a9a      	subs	r2, r3, r2
 801eae6:	f8ad 1010 	strh.w	r1, [sp, #16]
 801eaea:	f8ad 0014 	strh.w	r0, [sp, #20]
 801eaee:	f8ad 2016 	strh.w	r2, [sp, #22]
 801eaf2:	69ea      	ldr	r2, [r5, #28]
 801eaf4:	4631      	mov	r1, r6
 801eaf6:	4640      	mov	r0, r8
 801eaf8:	f7ff ff7a 	bl	801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eafc:	9b01      	ldr	r3, [sp, #4]
 801eafe:	f9b4 2000 	ldrsh.w	r2, [r4]
 801eb02:	429a      	cmp	r2, r3
 801eb04:	b29f      	uxth	r7, r3
 801eb06:	da0d      	bge.n	801eb24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801eb08:	f8ad 2010 	strh.w	r2, [sp, #16]
 801eb0c:	1aba      	subs	r2, r7, r2
 801eb0e:	f8ad a012 	strh.w	sl, [sp, #18]
 801eb12:	f8ad 2014 	strh.w	r2, [sp, #20]
 801eb16:	f8ad 9016 	strh.w	r9, [sp, #22]
 801eb1a:	69ea      	ldr	r2, [r5, #28]
 801eb1c:	4631      	mov	r1, r6
 801eb1e:	4640      	mov	r0, r8
 801eb20:	f7ff ff66 	bl	801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eb24:	8822      	ldrh	r2, [r4, #0]
 801eb26:	88a3      	ldrh	r3, [r4, #4]
 801eb28:	445f      	add	r7, fp
 801eb2a:	4413      	add	r3, r2
 801eb2c:	b29b      	uxth	r3, r3
 801eb2e:	b2bf      	uxth	r7, r7
 801eb30:	b23a      	sxth	r2, r7
 801eb32:	b219      	sxth	r1, r3
 801eb34:	4291      	cmp	r1, r2
 801eb36:	dd0d      	ble.n	801eb54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801eb38:	1bdb      	subs	r3, r3, r7
 801eb3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801eb3e:	f8ad a012 	strh.w	sl, [sp, #18]
 801eb42:	f8ad 3014 	strh.w	r3, [sp, #20]
 801eb46:	f8ad 9016 	strh.w	r9, [sp, #22]
 801eb4a:	69ea      	ldr	r2, [r5, #28]
 801eb4c:	4631      	mov	r1, r6
 801eb4e:	4640      	mov	r0, r8
 801eb50:	f7ff ff4e 	bl	801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eb54:	88e2      	ldrh	r2, [r4, #6]
 801eb56:	8863      	ldrh	r3, [r4, #2]
 801eb58:	4413      	add	r3, r2
 801eb5a:	9a00      	ldr	r2, [sp, #0]
 801eb5c:	444a      	add	r2, r9
 801eb5e:	b29b      	uxth	r3, r3
 801eb60:	fa1f f982 	uxth.w	r9, r2
 801eb64:	fa0f f289 	sxth.w	r2, r9
 801eb68:	b219      	sxth	r1, r3
 801eb6a:	428a      	cmp	r2, r1
 801eb6c:	da15      	bge.n	801eb9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801eb6e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801eb72:	f9b4 0000 	ldrsh.w	r0, [r4]
 801eb76:	f8ad 1014 	strh.w	r1, [sp, #20]
 801eb7a:	eba3 0309 	sub.w	r3, r3, r9
 801eb7e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801eb82:	f8ad 2012 	strh.w	r2, [sp, #18]
 801eb86:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eb8a:	69ea      	ldr	r2, [r5, #28]
 801eb8c:	4631      	mov	r1, r6
 801eb8e:	e001      	b.n	801eb94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801eb90:	69ea      	ldr	r2, [r5, #28]
 801eb92:	4621      	mov	r1, r4
 801eb94:	4640      	mov	r0, r8
 801eb96:	f7ff ff2b 	bl	801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801eb9a:	4628      	mov	r0, r5
 801eb9c:	f7ff fe94 	bl	801e8c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801eba0:	6861      	ldr	r1, [r4, #4]
 801eba2:	4602      	mov	r2, r0
 801eba4:	6820      	ldr	r0, [r4, #0]
 801eba6:	4633      	mov	r3, r6
 801eba8:	c303      	stmia	r3!, {r0, r1}
 801ebaa:	4611      	mov	r1, r2
 801ebac:	4630      	mov	r0, r6
 801ebae:	f7fb f8b3 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801ebb2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	f77f af33 	ble.w	801ea22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ebbc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	f77f af2e 	ble.w	801ea22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ebc6:	4628      	mov	r0, r5
 801ebc8:	f7ff fe9a 	bl	801e900 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ebcc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ebd0:	1a18      	subs	r0, r3, r0
 801ebd2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ebd6:	4628      	mov	r0, r5
 801ebd8:	f7ff fea6 	bl	801e928 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ebdc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ebe0:	1a18      	subs	r0, r3, r0
 801ebe2:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ebe6:	682b      	ldr	r3, [r5, #0]
 801ebe8:	4631      	mov	r1, r6
 801ebea:	689b      	ldr	r3, [r3, #8]
 801ebec:	4628      	mov	r0, r5
 801ebee:	4798      	blx	r3
 801ebf0:	e717      	b.n	801ea22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ebf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ebf2:	b570      	push	{r4, r5, r6, lr}
 801ebf4:	460c      	mov	r4, r1
 801ebf6:	b086      	sub	sp, #24
 801ebf8:	1d06      	adds	r6, r0, #4
 801ebfa:	2300      	movs	r3, #0
 801ebfc:	4631      	mov	r1, r6
 801ebfe:	4605      	mov	r5, r0
 801ec00:	a802      	add	r0, sp, #8
 801ec02:	9301      	str	r3, [sp, #4]
 801ec04:	f7ff fca6 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ec08:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ec0c:	8822      	ldrh	r2, [r4, #0]
 801ec0e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ec12:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ec16:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ec1a:	1ad2      	subs	r2, r2, r3
 801ec1c:	8863      	ldrh	r3, [r4, #2]
 801ec1e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ec22:	1a5b      	subs	r3, r3, r1
 801ec24:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801ec28:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ec2c:	aa01      	add	r2, sp, #4
 801ec2e:	a904      	add	r1, sp, #16
 801ec30:	4630      	mov	r0, r6
 801ec32:	f8ad 3012 	strh.w	r3, [sp, #18]
 801ec36:	f7fb f947 	bl	8019ec8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801ec3a:	9a01      	ldr	r2, [sp, #4]
 801ec3c:	b11a      	cbz	r2, 801ec46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801ec3e:	4621      	mov	r1, r4
 801ec40:	4628      	mov	r0, r5
 801ec42:	f7ff fed5 	bl	801e9f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ec46:	b006      	add	sp, #24
 801ec48:	bd70      	pop	{r4, r5, r6, pc}

0801ec4a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801ec4a:	b530      	push	{r4, r5, lr}
 801ec4c:	4602      	mov	r2, r0
 801ec4e:	4604      	mov	r4, r0
 801ec50:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801ec54:	b085      	sub	sp, #20
 801ec56:	460d      	mov	r5, r1
 801ec58:	6851      	ldr	r1, [r2, #4]
 801ec5a:	466b      	mov	r3, sp
 801ec5c:	c303      	stmia	r3!, {r0, r1}
 801ec5e:	4629      	mov	r1, r5
 801ec60:	4668      	mov	r0, sp
 801ec62:	f7fb f859 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 801ec66:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ec6a:	b12b      	cbz	r3, 801ec78 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801ec6c:	4669      	mov	r1, sp
 801ec6e:	4620      	mov	r0, r4
 801ec70:	f7ff ffbf 	bl	801ebf2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801ec74:	b005      	add	sp, #20
 801ec76:	bd30      	pop	{r4, r5, pc}
 801ec78:	3404      	adds	r4, #4
 801ec7a:	4621      	mov	r1, r4
 801ec7c:	a802      	add	r0, sp, #8
 801ec7e:	f7ff fc69 	bl	801e554 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ec82:	f8bd 3000 	ldrh.w	r3, [sp]
 801ec86:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ec8a:	1a9b      	subs	r3, r3, r2
 801ec8c:	f8ad 3000 	strh.w	r3, [sp]
 801ec90:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ec94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ec98:	4669      	mov	r1, sp
 801ec9a:	1a9b      	subs	r3, r3, r2
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801eca2:	f7fb f8d8 	bl	8019e56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801eca6:	e7e5      	b.n	801ec74 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801eca8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801eca8:	680a      	ldr	r2, [r1, #0]
 801ecaa:	460b      	mov	r3, r1
 801ecac:	6992      	ldr	r2, [r2, #24]
 801ecae:	1d01      	adds	r1, r0, #4
 801ecb0:	4618      	mov	r0, r3
 801ecb2:	4710      	bx	r2

0801ecb4 <_ZN8touchgfx12TextProviderC1Ev>:
 801ecb4:	b538      	push	{r3, r4, r5, lr}
 801ecb6:	2500      	movs	r5, #0
 801ecb8:	2302      	movs	r3, #2
 801ecba:	4604      	mov	r4, r0
 801ecbc:	e9c0 5500 	strd	r5, r5, [r0]
 801ecc0:	7403      	strb	r3, [r0, #16]
 801ecc2:	6145      	str	r5, [r0, #20]
 801ecc4:	7605      	strb	r5, [r0, #24]
 801ecc6:	83c5      	strh	r5, [r0, #30]
 801ecc8:	8405      	strh	r5, [r0, #32]
 801ecca:	86c5      	strh	r5, [r0, #54]	; 0x36
 801eccc:	8705      	strh	r5, [r0, #56]	; 0x38
 801ecce:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801ecd0:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801ecd4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801ecd8:	220e      	movs	r2, #14
 801ecda:	4629      	mov	r1, r5
 801ecdc:	304c      	adds	r0, #76	; 0x4c
 801ecde:	f00c fe95 	bl	802ba0c <memset>
 801ece2:	2301      	movs	r3, #1
 801ece4:	4620      	mov	r0, r4
 801ece6:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801ecea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ecee:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801ecf2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ecf6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801ecfa:	f7f7 fdbb 	bl	8016874 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ecfe:	4620      	mov	r0, r4
 801ed00:	bd38      	pop	{r3, r4, r5, pc}

0801ed02 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801ed02:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ed04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ed08:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801ed0a:	fab0 f080 	clz	r0, r0
 801ed0e:	0940      	lsrs	r0, r0, #5
 801ed10:	4770      	bx	lr

0801ed12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ed12:	b530      	push	{r4, r5, lr}
 801ed14:	2500      	movs	r5, #0
 801ed16:	2401      	movs	r4, #1
 801ed18:	6843      	ldr	r3, [r0, #4]
 801ed1a:	b913      	cbnz	r3, 801ed22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ed1c:	6803      	ldr	r3, [r0, #0]
 801ed1e:	b313      	cbz	r3, 801ed66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ed20:	6043      	str	r3, [r0, #4]
 801ed22:	7e03      	ldrb	r3, [r0, #24]
 801ed24:	b143      	cbz	r3, 801ed38 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ed26:	6943      	ldr	r3, [r0, #20]
 801ed28:	b12b      	cbz	r3, 801ed36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ed2a:	881a      	ldrh	r2, [r3, #0]
 801ed2c:	b11a      	cbz	r2, 801ed36 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ed2e:	1c9a      	adds	r2, r3, #2
 801ed30:	6142      	str	r2, [r0, #20]
 801ed32:	8818      	ldrh	r0, [r3, #0]
 801ed34:	bd30      	pop	{r4, r5, pc}
 801ed36:	7605      	strb	r5, [r0, #24]
 801ed38:	6843      	ldr	r3, [r0, #4]
 801ed3a:	8819      	ldrh	r1, [r3, #0]
 801ed3c:	b199      	cbz	r1, 801ed66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ed3e:	1c9a      	adds	r2, r3, #2
 801ed40:	2902      	cmp	r1, #2
 801ed42:	6042      	str	r2, [r0, #4]
 801ed44:	d1f5      	bne.n	801ed32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ed46:	7c03      	ldrb	r3, [r0, #16]
 801ed48:	2b01      	cmp	r3, #1
 801ed4a:	d8e5      	bhi.n	801ed18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ed4c:	1c5a      	adds	r2, r3, #1
 801ed4e:	3302      	adds	r3, #2
 801ed50:	7402      	strb	r2, [r0, #16]
 801ed52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ed56:	6143      	str	r3, [r0, #20]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d0dd      	beq.n	801ed18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ed5c:	881b      	ldrh	r3, [r3, #0]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d0da      	beq.n	801ed18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ed62:	7604      	strb	r4, [r0, #24]
 801ed64:	e7d8      	b.n	801ed18 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ed66:	2000      	movs	r0, #0
 801ed68:	e7e4      	b.n	801ed34 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ed6a:	b430      	push	{r4, r5}
 801ed6c:	6001      	str	r1, [r0, #0]
 801ed6e:	2100      	movs	r1, #0
 801ed70:	6041      	str	r1, [r0, #4]
 801ed72:	6815      	ldr	r5, [r2, #0]
 801ed74:	6085      	str	r5, [r0, #8]
 801ed76:	6852      	ldr	r2, [r2, #4]
 801ed78:	6443      	str	r3, [r0, #68]	; 0x44
 801ed7a:	9b02      	ldr	r3, [sp, #8]
 801ed7c:	60c2      	str	r2, [r0, #12]
 801ed7e:	7401      	strb	r1, [r0, #16]
 801ed80:	6141      	str	r1, [r0, #20]
 801ed82:	7601      	strb	r1, [r0, #24]
 801ed84:	8701      	strh	r1, [r0, #56]	; 0x38
 801ed86:	8401      	strh	r1, [r0, #32]
 801ed88:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ed8c:	6483      	str	r3, [r0, #72]	; 0x48
 801ed8e:	bc30      	pop	{r4, r5}
 801ed90:	f7f7 bd70 	b.w	8016874 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ed94 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801ed94:	b408      	push	{r3}
 801ed96:	b510      	push	{r4, lr}
 801ed98:	b085      	sub	sp, #20
 801ed9a:	ac07      	add	r4, sp, #28
 801ed9c:	f854 3b04 	ldr.w	r3, [r4], #4
 801eda0:	9300      	str	r3, [sp, #0]
 801eda2:	4613      	mov	r3, r2
 801eda4:	4622      	mov	r2, r4
 801eda6:	9403      	str	r4, [sp, #12]
 801eda8:	f7ff ffdf 	bl	801ed6a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801edac:	b005      	add	sp, #20
 801edae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edb2:	b001      	add	sp, #4
 801edb4:	4770      	bx	lr

0801edb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801edb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801edb8:	4605      	mov	r5, r0
 801edba:	4608      	mov	r0, r1
 801edbc:	b1e9      	cbz	r1, 801edfa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801edbe:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801edc2:	460b      	mov	r3, r1
 801edc4:	f101 0708 	add.w	r7, r1, #8
 801edc8:	4622      	mov	r2, r4
 801edca:	6818      	ldr	r0, [r3, #0]
 801edcc:	6859      	ldr	r1, [r3, #4]
 801edce:	4626      	mov	r6, r4
 801edd0:	c603      	stmia	r6!, {r0, r1}
 801edd2:	3308      	adds	r3, #8
 801edd4:	42bb      	cmp	r3, r7
 801edd6:	4634      	mov	r4, r6
 801edd8:	d1f7      	bne.n	801edca <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801edda:	6818      	ldr	r0, [r3, #0]
 801eddc:	6030      	str	r0, [r6, #0]
 801edde:	889b      	ldrh	r3, [r3, #4]
 801ede0:	80b3      	strh	r3, [r6, #4]
 801ede2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801ede6:	015b      	lsls	r3, r3, #5
 801ede8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801edec:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801edf0:	430b      	orrs	r3, r1
 801edf2:	425b      	negs	r3, r3
 801edf4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801edf8:	4610      	mov	r0, r2
 801edfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801edfc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801edfc:	b538      	push	{r3, r4, r5, lr}
 801edfe:	460c      	mov	r4, r1
 801ee00:	6811      	ldr	r1, [r2, #0]
 801ee02:	4610      	mov	r0, r2
 801ee04:	68cd      	ldr	r5, [r1, #12]
 801ee06:	4619      	mov	r1, r3
 801ee08:	47a8      	blx	r5
 801ee0a:	2800      	cmp	r0, #0
 801ee0c:	bf08      	it	eq
 801ee0e:	4620      	moveq	r0, r4
 801ee10:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ee14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ee14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee16:	4604      	mov	r4, r0
 801ee18:	4615      	mov	r5, r2
 801ee1a:	4608      	mov	r0, r1
 801ee1c:	b93a      	cbnz	r2, 801ee2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ee1e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ee22:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ee26:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ee2a:	4628      	mov	r0, r5
 801ee2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee2e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ee32:	8893      	ldrh	r3, [r2, #4]
 801ee34:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801ee38:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ee3c:	79ee      	ldrb	r6, [r5, #7]
 801ee3e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ee42:	4316      	orrs	r6, r2
 801ee44:	19da      	adds	r2, r3, r7
 801ee46:	b291      	uxth	r1, r2
 801ee48:	291d      	cmp	r1, #29
 801ee4a:	b2b7      	uxth	r7, r6
 801ee4c:	d87a      	bhi.n	801ef44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801ee4e:	2201      	movs	r2, #1
 801ee50:	408a      	lsls	r2, r1
 801ee52:	4975      	ldr	r1, [pc, #468]	; (801f028 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ee54:	420a      	tst	r2, r1
 801ee56:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801ee5a:	d12d      	bne.n	801eeb8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ee5c:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ee60:	d070      	beq.n	801ef44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801ee62:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ee66:	462b      	mov	r3, r5
 801ee68:	f105 0e08 	add.w	lr, r5, #8
 801ee6c:	4615      	mov	r5, r2
 801ee6e:	6818      	ldr	r0, [r3, #0]
 801ee70:	6859      	ldr	r1, [r3, #4]
 801ee72:	4694      	mov	ip, r2
 801ee74:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ee78:	3308      	adds	r3, #8
 801ee7a:	4573      	cmp	r3, lr
 801ee7c:	4662      	mov	r2, ip
 801ee7e:	d1f6      	bne.n	801ee6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801ee80:	6818      	ldr	r0, [r3, #0]
 801ee82:	f8cc 0000 	str.w	r0, [ip]
 801ee86:	889b      	ldrh	r3, [r3, #4]
 801ee88:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ee8c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ee90:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ee94:	b2b3      	uxth	r3, r6
 801ee96:	1aca      	subs	r2, r1, r3
 801ee98:	b292      	uxth	r2, r2
 801ee9a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801ee9e:	10d2      	asrs	r2, r2, #3
 801eea0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801eea4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801eea8:	4302      	orrs	r2, r0
 801eeaa:	1bcf      	subs	r7, r1, r7
 801eeac:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801eeb0:	1afb      	subs	r3, r7, r3
 801eeb2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801eeb6:	e7b8      	b.n	801ee2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801eeb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801eeba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801eebe:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801eec0:	f640 6333 	movw	r3, #3635	; 0xe33
 801eec4:	4299      	cmp	r1, r3
 801eec6:	d110      	bne.n	801eeea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801eec8:	6803      	ldr	r3, [r0, #0]
 801eeca:	68db      	ldr	r3, [r3, #12]
 801eecc:	4798      	blx	r3
 801eece:	7b41      	ldrb	r1, [r0, #13]
 801eed0:	00cb      	lsls	r3, r1, #3
 801eed2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801eed6:	7a03      	ldrb	r3, [r0, #8]
 801eed8:	0648      	lsls	r0, r1, #25
 801eeda:	ea43 0302 	orr.w	r3, r3, r2
 801eede:	bf44      	itt	mi
 801eee0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801eee4:	b21b      	sxthmi	r3, r3
 801eee6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801eeea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801eeee:	443b      	add	r3, r7
 801eef0:	4433      	add	r3, r6
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801eef8:	462a      	mov	r2, r5
 801eefa:	f105 0c08 	add.w	ip, r5, #8
 801eefe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ef02:	4635      	mov	r5, r6
 801ef04:	6810      	ldr	r0, [r2, #0]
 801ef06:	6851      	ldr	r1, [r2, #4]
 801ef08:	4637      	mov	r7, r6
 801ef0a:	c703      	stmia	r7!, {r0, r1}
 801ef0c:	3208      	adds	r2, #8
 801ef0e:	4562      	cmp	r2, ip
 801ef10:	463e      	mov	r6, r7
 801ef12:	d1f7      	bne.n	801ef04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801ef14:	6810      	ldr	r0, [r2, #0]
 801ef16:	6038      	str	r0, [r7, #0]
 801ef18:	8892      	ldrh	r2, [r2, #4]
 801ef1a:	80ba      	strh	r2, [r7, #4]
 801ef1c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ef20:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ef24:	10db      	asrs	r3, r3, #3
 801ef26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ef2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ef2e:	4313      	orrs	r3, r2
 801ef30:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ef34:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801ef38:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ef3c:	1a9b      	subs	r3, r3, r2
 801ef3e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ef42:	e772      	b.n	801ee2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ef44:	f023 0204 	bic.w	r2, r3, #4
 801ef48:	f640 611b 	movw	r1, #3611	; 0xe1b
 801ef4c:	428a      	cmp	r2, r1
 801ef4e:	d003      	beq.n	801ef58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801ef50:	f640 621d 	movw	r2, #3613	; 0xe1d
 801ef54:	4293      	cmp	r3, r2
 801ef56:	d120      	bne.n	801ef9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 801ef58:	3b01      	subs	r3, #1
 801ef5a:	4602      	mov	r2, r0
 801ef5c:	b29b      	uxth	r3, r3
 801ef5e:	4629      	mov	r1, r5
 801ef60:	4620      	mov	r0, r4
 801ef62:	f7ff ff4b 	bl	801edfc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ef66:	7b41      	ldrb	r1, [r0, #13]
 801ef68:	00cb      	lsls	r3, r1, #3
 801ef6a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ef6e:	7a03      	ldrb	r3, [r0, #8]
 801ef70:	0649      	lsls	r1, r1, #25
 801ef72:	ea43 0302 	orr.w	r3, r3, r2
 801ef76:	bf44      	itt	mi
 801ef78:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ef7c:	b21b      	sxthmi	r3, r3
 801ef7e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ef82:	7b6b      	ldrb	r3, [r5, #13]
 801ef84:	7aaa      	ldrb	r2, [r5, #10]
 801ef86:	005b      	lsls	r3, r3, #1
 801ef88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ef8c:	4313      	orrs	r3, r2
 801ef8e:	115a      	asrs	r2, r3, #5
 801ef90:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801ef94:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ef98:	e036      	b.n	801f008 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801ef9a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ef9e:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801efa2:	7a2a      	ldrb	r2, [r5, #8]
 801efa4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801efa8:	ea42 0201 	orr.w	r2, r2, r1
 801efac:	bf1c      	itt	ne
 801efae:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801efb2:	b212      	sxthne	r2, r2
 801efb4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801efb8:	f640 6109 	movw	r1, #3593	; 0xe09
 801efbc:	f023 0210 	bic.w	r2, r3, #16
 801efc0:	428a      	cmp	r2, r1
 801efc2:	d003      	beq.n	801efcc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801efc4:	f640 6213 	movw	r2, #3603	; 0xe13
 801efc8:	4293      	cmp	r3, r2
 801efca:	d12a      	bne.n	801f022 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801efcc:	7b6e      	ldrb	r6, [r5, #13]
 801efce:	0076      	lsls	r6, r6, #1
 801efd0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801efd4:	7aae      	ldrb	r6, [r5, #10]
 801efd6:	4316      	orrs	r6, r2
 801efd8:	f640 6213 	movw	r2, #3603	; 0xe13
 801efdc:	4293      	cmp	r3, r2
 801efde:	bf18      	it	ne
 801efe0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801efe4:	4602      	mov	r2, r0
 801efe6:	bf14      	ite	ne
 801efe8:	b29b      	uxthne	r3, r3
 801efea:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801efee:	4629      	mov	r1, r5
 801eff0:	4620      	mov	r0, r4
 801eff2:	f7ff ff03 	bl	801edfc <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801eff6:	7b43      	ldrb	r3, [r0, #13]
 801eff8:	7a82      	ldrb	r2, [r0, #10]
 801effa:	005b      	lsls	r3, r3, #1
 801effc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f000:	4313      	orrs	r3, r2
 801f002:	1af6      	subs	r6, r6, r3
 801f004:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801f008:	7b69      	ldrb	r1, [r5, #13]
 801f00a:	00cb      	lsls	r3, r1, #3
 801f00c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f010:	7a2b      	ldrb	r3, [r5, #8]
 801f012:	4313      	orrs	r3, r2
 801f014:	064a      	lsls	r2, r1, #25
 801f016:	bf44      	itt	mi
 801f018:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f01c:	b21b      	sxthmi	r3, r3
 801f01e:	1bdb      	subs	r3, r3, r7
 801f020:	e747      	b.n	801eeb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801f022:	2300      	movs	r3, #0
 801f024:	e7b6      	b.n	801ef94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801f026:	bf00      	nop
 801f028:	3fc00079 	.word	0x3fc00079

0801f02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801f02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f030:	4604      	mov	r4, r0
 801f032:	b942      	cbnz	r2, 801f046 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801f034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f038:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801f03c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801f040:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801f044:	e047      	b.n	801f0d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801f046:	7b51      	ldrb	r1, [r2, #13]
 801f048:	8893      	ldrh	r3, [r2, #4]
 801f04a:	010d      	lsls	r5, r1, #4
 801f04c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801f050:	79d5      	ldrb	r5, [r2, #7]
 801f052:	4305      	orrs	r5, r0
 801f054:	2d04      	cmp	r5, #4
 801f056:	bfcc      	ite	gt
 801f058:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801f05c:	f04f 0e01 	movle.w	lr, #1
 801f060:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801f064:	f200 80ab 	bhi.w	801f1be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801f068:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801f06c:	4283      	cmp	r3, r0
 801f06e:	d216      	bcs.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f070:	f240 605b 	movw	r0, #1627	; 0x65b
 801f074:	4283      	cmp	r3, r0
 801f076:	d859      	bhi.n	801f12c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801f078:	f240 6057 	movw	r0, #1623	; 0x657
 801f07c:	4283      	cmp	r3, r0
 801f07e:	d20e      	bcs.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f080:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801f084:	d24a      	bcs.n	801f11c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801f086:	f240 604e 	movw	r0, #1614	; 0x64e
 801f08a:	4283      	cmp	r3, r0
 801f08c:	d207      	bcs.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f08e:	f240 601a 	movw	r0, #1562	; 0x61a
 801f092:	4283      	cmp	r3, r0
 801f094:	d02a      	beq.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f096:	d821      	bhi.n	801f0dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801f098:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801f09c:	d35b      	bcc.n	801f156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f09e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801f0a2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f0a6:	f040 80d0 	bne.w	801f24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801f0aa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801f0ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f0b2:	f040 80ca 	bne.w	801f24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801f0b6:	00cb      	lsls	r3, r1, #3
 801f0b8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f0bc:	7a13      	ldrb	r3, [r2, #8]
 801f0be:	0649      	lsls	r1, r1, #25
 801f0c0:	ea43 0300 	orr.w	r3, r3, r0
 801f0c4:	bf44      	itt	mi
 801f0c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f0ca:	b21b      	sxthmi	r3, r3
 801f0cc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f0d0:	1b5d      	subs	r5, r3, r5
 801f0d2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f0d6:	4610      	mov	r0, r2
 801f0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f0dc:	f240 604b 	movw	r0, #1611	; 0x64b
 801f0e0:	4283      	cmp	r3, r0
 801f0e2:	d338      	bcc.n	801f156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f0e4:	f240 604c 	movw	r0, #1612	; 0x64c
 801f0e8:	4283      	cmp	r3, r0
 801f0ea:	d9d8      	bls.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f0ec:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801f0f0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801f0f4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f0f8:	f040 80f2 	bne.w	801f2e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801f0fc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f100:	f040 80ee 	bne.w	801f2e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801f104:	00cb      	lsls	r3, r1, #3
 801f106:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f10a:	7a13      	ldrb	r3, [r2, #8]
 801f10c:	064e      	lsls	r6, r1, #25
 801f10e:	ea43 0300 	orr.w	r3, r3, r0
 801f112:	bf44      	itt	mi
 801f114:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f118:	b21b      	sxthmi	r3, r3
 801f11a:	e7d9      	b.n	801f0d0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801f11c:	f240 6054 	movw	r0, #1620	; 0x654
 801f120:	4283      	cmp	r3, r0
 801f122:	d8e3      	bhi.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f124:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801f128:	d9e0      	bls.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f12a:	e7b8      	b.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f12c:	f240 6074 	movw	r0, #1652	; 0x674
 801f130:	4283      	cmp	r3, r0
 801f132:	d0b4      	beq.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f134:	d82d      	bhi.n	801f192 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801f136:	f240 605e 	movw	r0, #1630	; 0x65e
 801f13a:	4283      	cmp	r3, r0
 801f13c:	d804      	bhi.n	801f148 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801f13e:	f240 605d 	movw	r0, #1629	; 0x65d
 801f142:	4283      	cmp	r3, r0
 801f144:	d3d2      	bcc.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f146:	e7aa      	b.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f148:	f240 605f 	movw	r0, #1631	; 0x65f
 801f14c:	4283      	cmp	r3, r0
 801f14e:	d0cd      	beq.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f150:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801f154:	d0a3      	beq.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f156:	00cb      	lsls	r3, r1, #3
 801f158:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801f15c:	7a13      	ldrb	r3, [r2, #8]
 801f15e:	0649      	lsls	r1, r1, #25
 801f160:	ea43 0300 	orr.w	r3, r3, r0
 801f164:	bf44      	itt	mi
 801f166:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f16a:	b21b      	sxthmi	r3, r3
 801f16c:	1b5d      	subs	r5, r3, r5
 801f16e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f172:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f176:	7b53      	ldrb	r3, [r2, #13]
 801f178:	015b      	lsls	r3, r3, #5
 801f17a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f17e:	7993      	ldrb	r3, [r2, #6]
 801f180:	430b      	orrs	r3, r1
 801f182:	005b      	lsls	r3, r3, #1
 801f184:	2105      	movs	r1, #5
 801f186:	fb93 f3f1 	sdiv	r3, r3, r1
 801f18a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801f18e:	440b      	add	r3, r1
 801f190:	e756      	b.n	801f040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801f192:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801f196:	4283      	cmp	r3, r0
 801f198:	d809      	bhi.n	801f1ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801f19a:	f240 60df 	movw	r0, #1759	; 0x6df
 801f19e:	4283      	cmp	r3, r0
 801f1a0:	f4bf af7d 	bcs.w	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f1a4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801f1a8:	2b05      	cmp	r3, #5
 801f1aa:	d8d4      	bhi.n	801f156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f1ac:	e777      	b.n	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f1ae:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801f1b2:	4283      	cmp	r3, r0
 801f1b4:	d09a      	beq.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f1b6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801f1ba:	4283      	cmp	r3, r0
 801f1bc:	e7ca      	b.n	801f154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801f1be:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801f1c2:	d22b      	bcs.n	801f21c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801f1c4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801f1c8:	4283      	cmp	r3, r0
 801f1ca:	d28f      	bcs.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f1cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801f1d0:	4283      	cmp	r3, r0
 801f1d2:	d816      	bhi.n	801f202 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801f1d4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801f1d8:	4283      	cmp	r3, r0
 801f1da:	f4bf af60 	bcs.w	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f1de:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801f1e2:	4283      	cmp	r3, r0
 801f1e4:	d80a      	bhi.n	801f1fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801f1e6:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801f1ea:	4283      	cmp	r3, r0
 801f1ec:	f4bf af57 	bcs.w	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f1f0:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801f1f4:	4283      	cmp	r3, r0
 801f1f6:	f43f af79 	beq.w	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f1fa:	e7ac      	b.n	801f156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801f1fc:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801f200:	e7f8      	b.n	801f1f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801f202:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801f206:	4283      	cmp	r3, r0
 801f208:	d802      	bhi.n	801f210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801f20a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801f20e:	e798      	b.n	801f142 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801f210:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801f214:	4283      	cmp	r3, r0
 801f216:	f47f af42 	bne.w	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f21a:	e767      	b.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f21c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801f220:	4283      	cmp	r3, r0
 801f222:	f43f af63 	beq.w	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f226:	d802      	bhi.n	801f22e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801f228:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801f22c:	e7f2      	b.n	801f214 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801f22e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801f232:	4283      	cmp	r3, r0
 801f234:	d805      	bhi.n	801f242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801f236:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801f23a:	4283      	cmp	r3, r0
 801f23c:	f4ff af2f 	bcc.w	801f09e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801f240:	e754      	b.n	801f0ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801f242:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801f246:	4283      	cmp	r3, r0
 801f248:	e7af      	b.n	801f1aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801f24a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801f24e:	4617      	mov	r7, r2
 801f250:	f102 0808 	add.w	r8, r2, #8
 801f254:	4666      	mov	r6, ip
 801f256:	6838      	ldr	r0, [r7, #0]
 801f258:	6879      	ldr	r1, [r7, #4]
 801f25a:	46e6      	mov	lr, ip
 801f25c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801f260:	3708      	adds	r7, #8
 801f262:	4547      	cmp	r7, r8
 801f264:	46f4      	mov	ip, lr
 801f266:	d1f6      	bne.n	801f256 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801f268:	6838      	ldr	r0, [r7, #0]
 801f26a:	f8ce 0000 	str.w	r0, [lr]
 801f26e:	88b9      	ldrh	r1, [r7, #4]
 801f270:	f8ae 1004 	strh.w	r1, [lr, #4]
 801f274:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801f278:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f27c:	d009      	beq.n	801f292 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801f27e:	7b51      	ldrb	r1, [r2, #13]
 801f280:	7992      	ldrb	r2, [r2, #6]
 801f282:	0149      	lsls	r1, r1, #5
 801f284:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f288:	4311      	orrs	r1, r2
 801f28a:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801f28e:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801f292:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f296:	b2ad      	uxth	r5, r5
 801f298:	d00d      	beq.n	801f2b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801f29a:	442b      	add	r3, r5
 801f29c:	b29b      	uxth	r3, r3
 801f29e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801f2a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801f2a6:	10db      	asrs	r3, r3, #3
 801f2a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801f2ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f2b0:	4313      	orrs	r3, r2
 801f2b2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801f2b6:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801f2ba:	00cb      	lsls	r3, r1, #3
 801f2bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f2c0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801f2c4:	064f      	lsls	r7, r1, #25
 801f2c6:	ea43 0302 	orr.w	r3, r3, r2
 801f2ca:	bf44      	itt	mi
 801f2cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f2d0:	b21b      	sxthmi	r3, r3
 801f2d2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801f2d6:	1b5b      	subs	r3, r3, r5
 801f2d8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801f2dc:	4632      	mov	r2, r6
 801f2de:	e6fa      	b.n	801f0d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801f2e0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801f2e4:	4617      	mov	r7, r2
 801f2e6:	f102 0908 	add.w	r9, r2, #8
 801f2ea:	4666      	mov	r6, ip
 801f2ec:	6838      	ldr	r0, [r7, #0]
 801f2ee:	6879      	ldr	r1, [r7, #4]
 801f2f0:	46e0      	mov	r8, ip
 801f2f2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801f2f6:	3708      	adds	r7, #8
 801f2f8:	454f      	cmp	r7, r9
 801f2fa:	46c4      	mov	ip, r8
 801f2fc:	d1f6      	bne.n	801f2ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801f2fe:	6838      	ldr	r0, [r7, #0]
 801f300:	f8c8 0000 	str.w	r0, [r8]
 801f304:	88b9      	ldrh	r1, [r7, #4]
 801f306:	f8a8 1004 	strh.w	r1, [r8, #4]
 801f30a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801f30e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801f312:	d009      	beq.n	801f328 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801f314:	7b51      	ldrb	r1, [r2, #13]
 801f316:	7992      	ldrb	r2, [r2, #6]
 801f318:	0149      	lsls	r1, r1, #5
 801f31a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f31e:	4311      	orrs	r1, r2
 801f320:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801f324:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801f328:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801f32c:	d00e      	beq.n	801f34c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801f32e:	eba3 030e 	sub.w	r3, r3, lr
 801f332:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801f336:	b29b      	uxth	r3, r3
 801f338:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801f33c:	10db      	asrs	r3, r3, #3
 801f33e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801f342:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801f346:	4313      	orrs	r3, r2
 801f348:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801f34c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801f350:	00cb      	lsls	r3, r1, #3
 801f352:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801f356:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801f35a:	0648      	lsls	r0, r1, #25
 801f35c:	ea43 0302 	orr.w	r3, r3, r2
 801f360:	bf44      	itt	mi
 801f362:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f366:	b21b      	sxthmi	r3, r3
 801f368:	1b5d      	subs	r5, r3, r5
 801f36a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801f36e:	e7b5      	b.n	801f2dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801f370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f374:	461e      	mov	r6, r3
 801f376:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f378:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f37c:	4604      	mov	r4, r0
 801f37e:	4617      	mov	r7, r2
 801f380:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f384:	f7f7 f9d0 	bl	8016728 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f388:	4605      	mov	r5, r0
 801f38a:	b918      	cbnz	r0, 801f394 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801f38c:	6030      	str	r0, [r6, #0]
 801f38e:	4628      	mov	r0, r5
 801f390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f394:	683b      	ldr	r3, [r7, #0]
 801f396:	4601      	mov	r1, r0
 801f398:	68db      	ldr	r3, [r3, #12]
 801f39a:	4638      	mov	r0, r7
 801f39c:	4798      	blx	r3
 801f39e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801f3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f3a6:	4602      	mov	r2, r0
 801f3a8:	6030      	str	r0, [r6, #0]
 801f3aa:	d213      	bcs.n	801f3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801f3ac:	4643      	mov	r3, r8
 801f3ae:	4639      	mov	r1, r7
 801f3b0:	4620      	mov	r0, r4
 801f3b2:	f7ff fe3b 	bl	801f02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801f3b6:	6030      	str	r0, [r6, #0]
 801f3b8:	6833      	ldr	r3, [r6, #0]
 801f3ba:	b143      	cbz	r3, 801f3ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801f3bc:	7b5a      	ldrb	r2, [r3, #13]
 801f3be:	7a9b      	ldrb	r3, [r3, #10]
 801f3c0:	0052      	lsls	r2, r2, #1
 801f3c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f3c6:	4313      	orrs	r3, r2
 801f3c8:	bf0c      	ite	eq
 801f3ca:	2301      	moveq	r3, #1
 801f3cc:	2300      	movne	r3, #0
 801f3ce:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801f3d2:	e7dc      	b.n	801f38e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801f3d4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801f3d8:	b29b      	uxth	r3, r3
 801f3da:	2b7f      	cmp	r3, #127	; 0x7f
 801f3dc:	d804      	bhi.n	801f3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801f3de:	4639      	mov	r1, r7
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f7ff fd17 	bl	801ee14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f3e6:	e7e6      	b.n	801f3b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801f3e8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d0e3      	beq.n	801f3b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801f3f0:	f640 1302 	movw	r3, #2306	; 0x902
 801f3f4:	429d      	cmp	r5, r3
 801f3f6:	d1df      	bne.n	801f3b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801f3f8:	4601      	mov	r1, r0
 801f3fa:	4620      	mov	r0, r4
 801f3fc:	f7ff fcdb 	bl	801edb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f400:	e7d9      	b.n	801f3b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801f402 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801f402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f406:	461e      	mov	r6, r3
 801f408:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f40a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f40e:	4604      	mov	r4, r0
 801f410:	4617      	mov	r7, r2
 801f412:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f416:	f7f7 f987 	bl	8016728 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f41a:	4605      	mov	r5, r0
 801f41c:	b918      	cbnz	r0, 801f426 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801f41e:	6030      	str	r0, [r6, #0]
 801f420:	4628      	mov	r0, r5
 801f422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f426:	683b      	ldr	r3, [r7, #0]
 801f428:	4601      	mov	r1, r0
 801f42a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801f42e:	4638      	mov	r0, r7
 801f430:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801f434:	47c8      	blx	r9
 801f436:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801f43a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f43e:	4602      	mov	r2, r0
 801f440:	6030      	str	r0, [r6, #0]
 801f442:	d213      	bcs.n	801f46c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801f444:	4643      	mov	r3, r8
 801f446:	4639      	mov	r1, r7
 801f448:	4620      	mov	r0, r4
 801f44a:	f7ff fdef 	bl	801f02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801f44e:	6030      	str	r0, [r6, #0]
 801f450:	6833      	ldr	r3, [r6, #0]
 801f452:	b143      	cbz	r3, 801f466 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801f454:	7b5a      	ldrb	r2, [r3, #13]
 801f456:	7a9b      	ldrb	r3, [r3, #10]
 801f458:	0052      	lsls	r2, r2, #1
 801f45a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801f45e:	4313      	orrs	r3, r2
 801f460:	bf0c      	ite	eq
 801f462:	2301      	moveq	r3, #1
 801f464:	2300      	movne	r3, #0
 801f466:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801f46a:	e7d9      	b.n	801f420 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801f46c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801f470:	b29b      	uxth	r3, r3
 801f472:	2b7f      	cmp	r3, #127	; 0x7f
 801f474:	d804      	bhi.n	801f480 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801f476:	4639      	mov	r1, r7
 801f478:	4620      	mov	r0, r4
 801f47a:	f7ff fccb 	bl	801ee14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801f47e:	e7e6      	b.n	801f44e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801f480:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801f484:	2b00      	cmp	r3, #0
 801f486:	d0e3      	beq.n	801f450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801f488:	f640 1302 	movw	r3, #2306	; 0x902
 801f48c:	429d      	cmp	r5, r3
 801f48e:	d1df      	bne.n	801f450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801f490:	4601      	mov	r1, r0
 801f492:	4620      	mov	r0, r4
 801f494:	f7ff fc8f 	bl	801edb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801f498:	e7d9      	b.n	801f44e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801f49a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801f49a:	b510      	push	{r4, lr}
 801f49c:	4604      	mov	r4, r0
 801f49e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801f4a2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f4a4:	b1f1      	cbz	r1, 801f4e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801f4a6:	2b0a      	cmp	r3, #10
 801f4a8:	d02f      	beq.n	801f50a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801f4aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801f4ac:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801f4b0:	3901      	subs	r1, #1
 801f4b2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801f4b4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801f4b8:	1c51      	adds	r1, r2, #1
 801f4ba:	b289      	uxth	r1, r1
 801f4bc:	2901      	cmp	r1, #1
 801f4be:	bf84      	itt	hi
 801f4c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801f4c4:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801f4c6:	f103 0201 	add.w	r2, r3, #1
 801f4ca:	8722      	strh	r2, [r4, #56]	; 0x38
 801f4cc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f4ce:	bf98      	it	ls
 801f4d0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801f4d2:	4413      	add	r3, r2
 801f4d4:	b29b      	uxth	r3, r3
 801f4d6:	2b09      	cmp	r3, #9
 801f4d8:	bf88      	it	hi
 801f4da:	3b0a      	subhi	r3, #10
 801f4dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f4e0:	8458      	strh	r0, [r3, #34]	; 0x22
 801f4e2:	e7dc      	b.n	801f49e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801f4e4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f4e6:	2b0a      	cmp	r3, #10
 801f4e8:	d00f      	beq.n	801f50a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801f4ea:	4620      	mov	r0, r4
 801f4ec:	f7ff fc11 	bl	801ed12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f4f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801f4f2:	1c5a      	adds	r2, r3, #1
 801f4f4:	8722      	strh	r2, [r4, #56]	; 0x38
 801f4f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f4f8:	4413      	add	r3, r2
 801f4fa:	b29b      	uxth	r3, r3
 801f4fc:	2b09      	cmp	r3, #9
 801f4fe:	bf88      	it	hi
 801f500:	3b0a      	subhi	r3, #10
 801f502:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f506:	8458      	strh	r0, [r3, #34]	; 0x22
 801f508:	e7ec      	b.n	801f4e4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801f50a:	bd10      	pop	{r4, pc}

0801f50c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801f50c:	b538      	push	{r3, r4, r5, lr}
 801f50e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801f510:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801f514:	4604      	mov	r4, r0
 801f516:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801f518:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801f51a:	3a01      	subs	r2, #1
 801f51c:	8702      	strh	r2, [r0, #56]	; 0x38
 801f51e:	1c5a      	adds	r2, r3, #1
 801f520:	b292      	uxth	r2, r2
 801f522:	2a09      	cmp	r2, #9
 801f524:	bf86      	itte	hi
 801f526:	3b09      	subhi	r3, #9
 801f528:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801f52a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801f52c:	f7ff ffb5 	bl	801f49a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801f530:	8c23      	ldrh	r3, [r4, #32]
 801f532:	2b01      	cmp	r3, #1
 801f534:	bf9c      	itt	ls
 801f536:	3301      	addls	r3, #1
 801f538:	8423      	strhls	r3, [r4, #32]
 801f53a:	8be3      	ldrh	r3, [r4, #30]
 801f53c:	b90b      	cbnz	r3, 801f542 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801f53e:	2302      	movs	r3, #2
 801f540:	83e3      	strh	r3, [r4, #30]
 801f542:	8be3      	ldrh	r3, [r4, #30]
 801f544:	3b01      	subs	r3, #1
 801f546:	b29b      	uxth	r3, r3
 801f548:	83e3      	strh	r3, [r4, #30]
 801f54a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f54e:	4628      	mov	r0, r5
 801f550:	8365      	strh	r5, [r4, #26]
 801f552:	bd38      	pop	{r3, r4, r5, pc}

0801f554 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801f554:	428a      	cmp	r2, r1
 801f556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f55a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801f55c:	d931      	bls.n	801f5c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801f55e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801f560:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801f564:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801f568:	19ee      	adds	r6, r5, r7
 801f56a:	1a54      	subs	r4, r2, r1
 801f56c:	3e01      	subs	r6, #1
 801f56e:	fa1f fe84 	uxth.w	lr, r4
 801f572:	b2b4      	uxth	r4, r6
 801f574:	eba4 090e 	sub.w	r9, r4, lr
 801f578:	fa1f f989 	uxth.w	r9, r9
 801f57c:	2c09      	cmp	r4, #9
 801f57e:	4626      	mov	r6, r4
 801f580:	bf88      	it	hi
 801f582:	f1a4 060a 	subhi.w	r6, r4, #10
 801f586:	f1bc 0f00 	cmp.w	ip, #0
 801f58a:	bf08      	it	eq
 801f58c:	f04f 0c02 	moveq.w	ip, #2
 801f590:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f594:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f598:	fa1f fc8c 	uxth.w	ip, ip
 801f59c:	3c01      	subs	r4, #1
 801f59e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801f5a2:	b2a4      	uxth	r4, r4
 801f5a4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801f5a8:	454c      	cmp	r4, r9
 801f5aa:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801f5ae:	d1e5      	bne.n	801f57c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801f5b0:	eba5 050e 	sub.w	r5, r5, lr
 801f5b4:	eb0e 0408 	add.w	r4, lr, r8
 801f5b8:	8705      	strh	r5, [r0, #56]	; 0x38
 801f5ba:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801f5be:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801f5c2:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801f5c4:	1a64      	subs	r4, r4, r1
 801f5c6:	4439      	add	r1, r7
 801f5c8:	b289      	uxth	r1, r1
 801f5ca:	2909      	cmp	r1, #9
 801f5cc:	bf88      	it	hi
 801f5ce:	390a      	subhi	r1, #10
 801f5d0:	8704      	strh	r4, [r0, #56]	; 0x38
 801f5d2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801f5d4:	250a      	movs	r5, #10
 801f5d6:	b18a      	cbz	r2, 801f5fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801f5d8:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801f5da:	3a01      	subs	r2, #1
 801f5dc:	b292      	uxth	r2, r2
 801f5de:	3101      	adds	r1, #1
 801f5e0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801f5e4:	8701      	strh	r1, [r0, #56]	; 0x38
 801f5e6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801f5e8:	b901      	cbnz	r1, 801f5ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801f5ea:	86c5      	strh	r5, [r0, #54]	; 0x36
 801f5ec:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801f5ee:	3901      	subs	r1, #1
 801f5f0:	b289      	uxth	r1, r1
 801f5f2:	86c1      	strh	r1, [r0, #54]	; 0x36
 801f5f4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801f5f8:	844c      	strh	r4, [r1, #34]	; 0x22
 801f5fa:	e7ec      	b.n	801f5d6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801f5fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f600:	f7ff bf4b 	b.w	801f49a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801f604 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801f604:	b570      	push	{r4, r5, r6, lr}
 801f606:	2500      	movs	r5, #0
 801f608:	4295      	cmp	r5, r2
 801f60a:	d011      	beq.n	801f630 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801f60c:	8bc4      	ldrh	r4, [r0, #30]
 801f60e:	f831 6b02 	ldrh.w	r6, [r1], #2
 801f612:	4414      	add	r4, r2
 801f614:	3c01      	subs	r4, #1
 801f616:	1b64      	subs	r4, r4, r5
 801f618:	b2a4      	uxth	r4, r4
 801f61a:	2c01      	cmp	r4, #1
 801f61c:	bf88      	it	hi
 801f61e:	3c02      	subhi	r4, #2
 801f620:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f624:	8b64      	ldrh	r4, [r4, #26]
 801f626:	42b4      	cmp	r4, r6
 801f628:	d117      	bne.n	801f65a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801f62a:	3501      	adds	r5, #1
 801f62c:	b2ad      	uxth	r5, r5
 801f62e:	e7eb      	b.n	801f608 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801f630:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f634:	2400      	movs	r4, #0
 801f636:	4413      	add	r3, r2
 801f638:	b2a2      	uxth	r2, r4
 801f63a:	429a      	cmp	r2, r3
 801f63c:	da0f      	bge.n	801f65e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801f63e:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801f640:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801f644:	4432      	add	r2, r6
 801f646:	b292      	uxth	r2, r2
 801f648:	2a09      	cmp	r2, #9
 801f64a:	bf88      	it	hi
 801f64c:	3a0a      	subhi	r2, #10
 801f64e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801f652:	3401      	adds	r4, #1
 801f654:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801f656:	42aa      	cmp	r2, r5
 801f658:	d0ee      	beq.n	801f638 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801f65a:	2000      	movs	r0, #0
 801f65c:	bd70      	pop	{r4, r5, r6, pc}
 801f65e:	2001      	movs	r0, #1
 801f660:	e7fc      	b.n	801f65c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801f662 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801f662:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f666:	4605      	mov	r5, r0
 801f668:	4616      	mov	r6, r2
 801f66a:	1c8c      	adds	r4, r1, #2
 801f66c:	8809      	ldrh	r1, [r1, #0]
 801f66e:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801f672:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801f676:	42b3      	cmp	r3, r6
 801f678:	d124      	bne.n	801f6c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801f67a:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801f67e:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801f682:	f001 070f 	and.w	r7, r1, #15
 801f686:	f8cd 8000 	str.w	r8, [sp]
 801f68a:	464b      	mov	r3, r9
 801f68c:	4652      	mov	r2, sl
 801f68e:	4621      	mov	r1, r4
 801f690:	4628      	mov	r0, r5
 801f692:	f7ff ffb7 	bl	801f604 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801f696:	4683      	mov	fp, r0
 801f698:	b168      	cbz	r0, 801f6b6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801f69a:	eb0a 0109 	add.w	r1, sl, r9
 801f69e:	4441      	add	r1, r8
 801f6a0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801f6a4:	463a      	mov	r2, r7
 801f6a6:	4649      	mov	r1, r9
 801f6a8:	4628      	mov	r0, r5
 801f6aa:	f7ff ff53 	bl	801f554 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801f6ae:	4658      	mov	r0, fp
 801f6b0:	b003      	add	sp, #12
 801f6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6b6:	eb07 010a 	add.w	r1, r7, sl
 801f6ba:	4449      	add	r1, r9
 801f6bc:	4441      	add	r1, r8
 801f6be:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801f6c2:	e7d2      	b.n	801f66a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801f6c4:	f04f 0b00 	mov.w	fp, #0
 801f6c8:	e7f1      	b.n	801f6ae <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801f6ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801f6ca:	b570      	push	{r4, r5, r6, lr}
 801f6cc:	8810      	ldrh	r0, [r2, #0]
 801f6ce:	4298      	cmp	r0, r3
 801f6d0:	d817      	bhi.n	801f702 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f6d2:	1e48      	subs	r0, r1, #1
 801f6d4:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801f6d8:	4298      	cmp	r0, r3
 801f6da:	d312      	bcc.n	801f702 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f6dc:	2400      	movs	r4, #0
 801f6de:	428c      	cmp	r4, r1
 801f6e0:	d20f      	bcs.n	801f702 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801f6e2:	1860      	adds	r0, r4, r1
 801f6e4:	1040      	asrs	r0, r0, #1
 801f6e6:	0085      	lsls	r5, r0, #2
 801f6e8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801f6ec:	42b3      	cmp	r3, r6
 801f6ee:	d902      	bls.n	801f6f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801f6f0:	3001      	adds	r0, #1
 801f6f2:	b284      	uxth	r4, r0
 801f6f4:	e7f3      	b.n	801f6de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f6f6:	d201      	bcs.n	801f6fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801f6f8:	b281      	uxth	r1, r0
 801f6fa:	e7f0      	b.n	801f6de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801f6fc:	442a      	add	r2, r5
 801f6fe:	8850      	ldrh	r0, [r2, #2]
 801f700:	bd70      	pop	{r4, r5, r6, pc}
 801f702:	2000      	movs	r0, #0
 801f704:	e7fc      	b.n	801f700 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801f706 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801f706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f70a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801f70c:	886f      	ldrh	r7, [r5, #2]
 801f70e:	4604      	mov	r4, r0
 801f710:	087f      	lsrs	r7, r7, #1
 801f712:	260b      	movs	r6, #11
 801f714:	3e01      	subs	r6, #1
 801f716:	d013      	beq.n	801f740 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f718:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801f71a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f71e:	462a      	mov	r2, r5
 801f720:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801f724:	4639      	mov	r1, r7
 801f726:	4643      	mov	r3, r8
 801f728:	4620      	mov	r0, r4
 801f72a:	f7ff ffce 	bl	801f6ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801f72e:	b138      	cbz	r0, 801f740 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801f730:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801f734:	4642      	mov	r2, r8
 801f736:	4620      	mov	r0, r4
 801f738:	f7ff ff93 	bl	801f662 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801f73c:	2800      	cmp	r0, #0
 801f73e:	d1e9      	bne.n	801f714 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801f744:	b570      	push	{r4, r5, r6, lr}
 801f746:	694a      	ldr	r2, [r1, #20]
 801f748:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801f74a:	684b      	ldr	r3, [r1, #4]
 801f74c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801f74e:	1b54      	subs	r4, r2, r5
 801f750:	f000 8106 	beq.w	801f960 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801f754:	1b9b      	subs	r3, r3, r6
 801f756:	d003      	beq.n	801f760 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f758:	4363      	muls	r3, r4
 801f75a:	2210      	movs	r2, #16
 801f75c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f760:	680c      	ldr	r4, [r1, #0]
 801f762:	698a      	ldr	r2, [r1, #24]
 801f764:	1b65      	subs	r5, r4, r5
 801f766:	f000 80fd 	beq.w	801f964 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801f76a:	1b92      	subs	r2, r2, r6
 801f76c:	d003      	beq.n	801f776 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f76e:	436a      	muls	r2, r5
 801f770:	2410      	movs	r4, #16
 801f772:	fb92 f2f4 	sdiv	r2, r2, r4
 801f776:	1a9b      	subs	r3, r3, r2
 801f778:	ee07 3a90 	vmov	s15, r3
 801f77c:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801f9a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801f780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f788:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f78c:	460a      	mov	r2, r1
 801f78e:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801f792:	4603      	mov	r3, r0
 801f794:	f100 040c 	add.w	r4, r0, #12
 801f798:	eeb1 6a43 	vneg.f32	s12, s6
 801f79c:	edd2 7a02 	vldr	s15, [r2, #8]
 801f7a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801f7a4:	3214      	adds	r2, #20
 801f7a6:	ece3 6a01 	vstmia	r3!, {s13}
 801f7aa:	ed52 7a02 	vldr	s15, [r2, #-8]
 801f7ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f7b2:	429c      	cmp	r4, r3
 801f7b4:	edc3 7a02 	vstr	s15, [r3, #8]
 801f7b8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801f7bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f7c0:	edc3 7a05 	vstr	s15, [r3, #20]
 801f7c4:	d1ea      	bne.n	801f79c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801f7c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f7c8:	698b      	ldr	r3, [r1, #24]
 801f7ca:	edd0 4a02 	vldr	s9, [r0, #8]
 801f7ce:	edd0 3a00 	vldr	s7, [r0]
 801f7d2:	edd0 6a01 	vldr	s13, [r0, #4]
 801f7d6:	ed90 5a05 	vldr	s10, [r0, #20]
 801f7da:	ed90 2a03 	vldr	s4, [r0, #12]
 801f7de:	edd0 5a04 	vldr	s11, [r0, #16]
 801f7e2:	ed90 1a07 	vldr	s2, [r0, #28]
 801f7e6:	edd0 2a06 	vldr	s5, [r0, #24]
 801f7ea:	1a9b      	subs	r3, r3, r2
 801f7ec:	ee07 3a90 	vmov	s15, r3
 801f7f0:	684b      	ldr	r3, [r1, #4]
 801f7f2:	1a9b      	subs	r3, r3, r2
 801f7f4:	ee07 3a10 	vmov	s14, r3
 801f7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7fc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801f800:	ee67 7a84 	vmul.f32	s15, s15, s8
 801f804:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801f808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f80c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801f810:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f814:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801f818:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f81c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801f820:	ee67 7a83 	vmul.f32	s15, s15, s6
 801f824:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801f828:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f82a:	694a      	ldr	r2, [r1, #20]
 801f82c:	1b13      	subs	r3, r2, r4
 801f82e:	ee07 3a10 	vmov	s14, r3
 801f832:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f836:	680b      	ldr	r3, [r1, #0]
 801f838:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f83c:	1b1b      	subs	r3, r3, r4
 801f83e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801f842:	ee07 3a10 	vmov	s14, r3
 801f846:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f84a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f84e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801f852:	ee64 4a86 	vmul.f32	s9, s9, s12
 801f856:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801f85a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f85c:	698b      	ldr	r3, [r1, #24]
 801f85e:	1a9b      	subs	r3, r3, r2
 801f860:	ee06 3a90 	vmov	s13, r3
 801f864:	684b      	ldr	r3, [r1, #4]
 801f866:	1a9b      	subs	r3, r3, r2
 801f868:	ee07 3a10 	vmov	s14, r3
 801f86c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f874:	ee66 6a84 	vmul.f32	s13, s13, s8
 801f878:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f87c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801f880:	eee5 6a87 	vfma.f32	s13, s11, s14
 801f884:	ee66 6a83 	vmul.f32	s13, s13, s6
 801f888:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801f88c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f88e:	694a      	ldr	r2, [r1, #20]
 801f890:	1b13      	subs	r3, r2, r4
 801f892:	ee07 3a10 	vmov	s14, r3
 801f896:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f89a:	680b      	ldr	r3, [r1, #0]
 801f89c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f8a0:	1b1b      	subs	r3, r3, r4
 801f8a2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801f8a6:	ee07 3a10 	vmov	s14, r3
 801f8aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f8ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f8b2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f8b6:	edd0 5a08 	vldr	s11, [r0, #32]
 801f8ba:	ee25 5a06 	vmul.f32	s10, s10, s12
 801f8be:	ee31 1a65 	vsub.f32	s2, s2, s11
 801f8c2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801f8c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801f8c8:	698b      	ldr	r3, [r1, #24]
 801f8ca:	1a9b      	subs	r3, r3, r2
 801f8cc:	ee07 3a10 	vmov	s14, r3
 801f8d0:	684b      	ldr	r3, [r1, #4]
 801f8d2:	1a9b      	subs	r3, r3, r2
 801f8d4:	ee01 3a90 	vmov	s3, r3
 801f8d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f8dc:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801f8e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801f8e4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801f8e8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f8ec:	ee61 1a84 	vmul.f32	s3, s3, s8
 801f8f0:	eea1 7a21 	vfma.f32	s14, s2, s3
 801f8f4:	ee27 7a03 	vmul.f32	s14, s14, s6
 801f8f8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801f8fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801f8fe:	694a      	ldr	r2, [r1, #20]
 801f900:	1b13      	subs	r3, r2, r4
 801f902:	ee03 3a10 	vmov	s6, r3
 801f906:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f90a:	680b      	ldr	r3, [r1, #0]
 801f90c:	ee23 3a04 	vmul.f32	s6, s6, s8
 801f910:	1b1b      	subs	r3, r3, r4
 801f912:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801f916:	ee03 3a10 	vmov	s6, r3
 801f91a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801f91e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801f922:	eee1 5a04 	vfma.f32	s11, s2, s8
 801f926:	ee25 6a86 	vmul.f32	s12, s11, s12
 801f92a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801f92e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801f932:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801f936:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f93e:	dd13      	ble.n	801f968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801f940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f944:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801f948:	63c3      	str	r3, [r0, #60]	; 0x3c
 801f94a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801f94e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f956:	dd15      	ble.n	801f984 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801f958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f95c:	6403      	str	r3, [r0, #64]	; 0x40
 801f95e:	bd70      	pop	{r4, r5, r6, pc}
 801f960:	4623      	mov	r3, r4
 801f962:	e6fd      	b.n	801f760 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801f964:	462a      	mov	r2, r5
 801f966:	e706      	b.n	801f776 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801f968:	d502      	bpl.n	801f970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801f96a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f96e:	e7e9      	b.n	801f944 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801f970:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801f974:	eea3 2a85 	vfma.f32	s4, s7, s10
 801f978:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801f97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f980:	dade      	bge.n	801f940 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801f982:	e7f2      	b.n	801f96a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801f984:	d502      	bpl.n	801f98c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801f986:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f98a:	e7e7      	b.n	801f95c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801f98c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801f990:	eee3 4a86 	vfma.f32	s9, s7, s12
 801f994:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801f998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f99c:	dadc      	bge.n	801f958 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801f99e:	e7f2      	b.n	801f986 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801f9a0:	3d800000 	.word	0x3d800000

0801f9a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801f9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9a8:	2714      	movs	r7, #20
 801f9aa:	435f      	muls	r7, r3
 801f9ac:	eb02 0c07 	add.w	ip, r2, r7
 801f9b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f9b4:	f115 0e0f 	adds.w	lr, r5, #15
 801f9b8:	f100 80a2 	bmi.w	801fb00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801f9bc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801f9c0:	9c08      	ldr	r4, [sp, #32]
 801f9c2:	f8c0 e014 	str.w	lr, [r0, #20]
 801f9c6:	2614      	movs	r6, #20
 801f9c8:	4366      	muls	r6, r4
 801f9ca:	eb02 0806 	add.w	r8, r2, r6
 801f9ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f9d2:	f115 040f 	adds.w	r4, r5, #15
 801f9d6:	f100 809f 	bmi.w	801fb18 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801f9da:	1124      	asrs	r4, r4, #4
 801f9dc:	eba4 040e 	sub.w	r4, r4, lr
 801f9e0:	6184      	str	r4, [r0, #24]
 801f9e2:	2c00      	cmp	r4, #0
 801f9e4:	f000 808a 	beq.w	801fafc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801f9e8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801f9ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801f9f0:	5995      	ldr	r5, [r2, r6]
 801f9f2:	eba4 0809 	sub.w	r8, r4, r9
 801f9f6:	59d4      	ldr	r4, [r2, r7]
 801f9f8:	eba5 0a04 	sub.w	sl, r5, r4
 801f9fc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801fa00:	fb0e fe05 	mul.w	lr, lr, r5
 801fa04:	fb0a ee19 	mls	lr, sl, r9, lr
 801fa08:	fb08 e404 	mla	r4, r8, r4, lr
 801fa0c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801fa10:	3c01      	subs	r4, #1
 801fa12:	19a4      	adds	r4, r4, r6
 801fa14:	f100 808c 	bmi.w	801fb30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801fa18:	fb94 fef6 	sdiv	lr, r4, r6
 801fa1c:	f8c0 e000 	str.w	lr, [r0]
 801fa20:	fb06 441e 	mls	r4, r6, lr, r4
 801fa24:	6104      	str	r4, [r0, #16]
 801fa26:	2d00      	cmp	r5, #0
 801fa28:	f2c0 8095 	blt.w	801fb56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801fa2c:	fb95 f4f6 	sdiv	r4, r5, r6
 801fa30:	6044      	str	r4, [r0, #4]
 801fa32:	fb06 5514 	mls	r5, r6, r4, r5
 801fa36:	6085      	str	r5, [r0, #8]
 801fa38:	60c6      	str	r6, [r0, #12]
 801fa3a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801fa3e:	6945      	ldr	r5, [r0, #20]
 801fa40:	59d2      	ldr	r2, [r2, r7]
 801fa42:	eddf 6a4d 	vldr	s13, [pc, #308]	; 801fb78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801fa46:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801fa4a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801fa4e:	ee07 4a10 	vmov	s14, r4
 801fa52:	6804      	ldr	r4, [r0, #0]
 801fa54:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801fa58:	ee07 2a90 	vmov	s15, r2
 801fa5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fa60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801fa68:	ee27 7a26 	vmul.f32	s14, s14, s13
 801fa6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801fa70:	edd3 6a00 	vldr	s13, [r3]
 801fa74:	eee6 6a07 	vfma.f32	s13, s12, s14
 801fa78:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801fa7c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801fa80:	edc0 6a07 	vstr	s13, [r0, #28]
 801fa84:	edd0 6a01 	vldr	s13, [r0, #4]
 801fa88:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801fa8c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801fa90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801fa94:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801fa98:	ed80 6a08 	vstr	s12, [r0, #32]
 801fa9c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801fa9e:	6242      	str	r2, [r0, #36]	; 0x24
 801faa0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801faa4:	ed93 6a03 	vldr	s12, [r3, #12]
 801faa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801faac:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801fab0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801fab4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801fab8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801fabc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801fac0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801fac4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801fac8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801faca:	6302      	str	r2, [r0, #48]	; 0x30
 801facc:	ed93 6a06 	vldr	s12, [r3, #24]
 801fad0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801fad4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801fad8:	eeb0 7a46 	vmov.f32	s14, s12
 801fadc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801fae0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801fae4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801fae8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801faec:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801faf0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801faf4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801faf8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801fafa:	63c3      	str	r3, [r0, #60]	; 0x3c
 801fafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb00:	f1c5 0501 	rsb	r5, r5, #1
 801fb04:	f015 050f 	ands.w	r5, r5, #15
 801fb08:	bf18      	it	ne
 801fb0a:	2501      	movne	r5, #1
 801fb0c:	2410      	movs	r4, #16
 801fb0e:	fb9e fef4 	sdiv	lr, lr, r4
 801fb12:	ebae 0e05 	sub.w	lr, lr, r5
 801fb16:	e753      	b.n	801f9c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801fb18:	f1c5 0501 	rsb	r5, r5, #1
 801fb1c:	f015 050f 	ands.w	r5, r5, #15
 801fb20:	bf18      	it	ne
 801fb22:	2501      	movne	r5, #1
 801fb24:	f04f 0910 	mov.w	r9, #16
 801fb28:	fb94 f4f9 	sdiv	r4, r4, r9
 801fb2c:	1b64      	subs	r4, r4, r5
 801fb2e:	e755      	b.n	801f9dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801fb30:	4264      	negs	r4, r4
 801fb32:	fb94 fef6 	sdiv	lr, r4, r6
 801fb36:	f1ce 0800 	rsb	r8, lr, #0
 801fb3a:	fb06 441e 	mls	r4, r6, lr, r4
 801fb3e:	f8c0 8000 	str.w	r8, [r0]
 801fb42:	6104      	str	r4, [r0, #16]
 801fb44:	2c00      	cmp	r4, #0
 801fb46:	f43f af6e 	beq.w	801fa26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801fb4a:	ea6f 0e0e 	mvn.w	lr, lr
 801fb4e:	f8c0 e000 	str.w	lr, [r0]
 801fb52:	1b34      	subs	r4, r6, r4
 801fb54:	e766      	b.n	801fa24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801fb56:	426d      	negs	r5, r5
 801fb58:	fb95 f4f6 	sdiv	r4, r5, r6
 801fb5c:	f1c4 0e00 	rsb	lr, r4, #0
 801fb60:	fb06 5514 	mls	r5, r6, r4, r5
 801fb64:	f8c0 e004 	str.w	lr, [r0, #4]
 801fb68:	6085      	str	r5, [r0, #8]
 801fb6a:	2d00      	cmp	r5, #0
 801fb6c:	f43f af64 	beq.w	801fa38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801fb70:	43e4      	mvns	r4, r4
 801fb72:	6044      	str	r4, [r0, #4]
 801fb74:	1b75      	subs	r5, r6, r5
 801fb76:	e75e      	b.n	801fa36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801fb78:	3d800000 	.word	0x3d800000

0801fb7c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801fb7c:	b530      	push	{r4, r5, lr}
 801fb7e:	4604      	mov	r4, r0
 801fb80:	b159      	cbz	r1, 801fb9a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801fb82:	b148      	cbz	r0, 801fb98 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801fb84:	2300      	movs	r3, #0
 801fb86:	b298      	uxth	r0, r3
 801fb88:	4282      	cmp	r2, r0
 801fb8a:	d905      	bls.n	801fb98 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801fb8c:	5ccd      	ldrb	r5, [r1, r3]
 801fb8e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801fb92:	3301      	adds	r3, #1
 801fb94:	2d00      	cmp	r5, #0
 801fb96:	d1f6      	bne.n	801fb86 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801fb98:	bd30      	pop	{r4, r5, pc}
 801fb9a:	4608      	mov	r0, r1
 801fb9c:	e7fc      	b.n	801fb98 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
	...

0801fba0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801fba0:	4b01      	ldr	r3, [pc, #4]	; (801fba8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801fba2:	6018      	str	r0, [r3, #0]
 801fba4:	4770      	bx	lr
 801fba6:	bf00      	nop
 801fba8:	2000b524 	.word	0x2000b524

0801fbac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801fbac:	4b06      	ldr	r3, [pc, #24]	; (801fbc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801fbae:	881a      	ldrh	r2, [r3, #0]
 801fbb0:	4282      	cmp	r2, r0
 801fbb2:	d807      	bhi.n	801fbc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801fbb4:	4b05      	ldr	r3, [pc, #20]	; (801fbcc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801fbb6:	881b      	ldrh	r3, [r3, #0]
 801fbb8:	4413      	add	r3, r2
 801fbba:	4298      	cmp	r0, r3
 801fbbc:	bfac      	ite	ge
 801fbbe:	2000      	movge	r0, #0
 801fbc0:	2001      	movlt	r0, #1
 801fbc2:	4770      	bx	lr
 801fbc4:	2000      	movs	r0, #0
 801fbc6:	4770      	bx	lr
 801fbc8:	2000b544 	.word	0x2000b544
 801fbcc:	2000b548 	.word	0x2000b548

0801fbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801fbd0:	b508      	push	{r3, lr}
 801fbd2:	4601      	mov	r1, r0
 801fbd4:	f7ff ffea 	bl	801fbac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801fbd8:	b118      	cbz	r0, 801fbe2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801fbda:	4b02      	ldr	r3, [pc, #8]	; (801fbe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801fbe2:	bd08      	pop	{r3, pc}
 801fbe4:	2000b528 	.word	0x2000b528

0801fbe8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbea:	4c24      	ldr	r4, [pc, #144]	; (801fc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801fbec:	6823      	ldr	r3, [r4, #0]
 801fbee:	2b00      	cmp	r3, #0
 801fbf0:	d042      	beq.n	801fc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801fbf2:	4a23      	ldr	r2, [pc, #140]	; (801fc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801fbf4:	4d23      	ldr	r5, [pc, #140]	; (801fc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801fbf6:	8811      	ldrh	r1, [r2, #0]
 801fbf8:	f8b5 c000 	ldrh.w	ip, [r5]
 801fbfc:	4822      	ldr	r0, [pc, #136]	; (801fc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801fbfe:	4461      	add	r1, ip
 801fc00:	1c4a      	adds	r2, r1, #1
 801fc02:	f022 0201 	bic.w	r2, r2, #1
 801fc06:	008f      	lsls	r7, r1, #2
 801fc08:	0412      	lsls	r2, r2, #16
 801fc0a:	19de      	adds	r6, r3, r7
 801fc0c:	0c12      	lsrs	r2, r2, #16
 801fc0e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801fc12:	6006      	str	r6, [r0, #0]
 801fc14:	4e1d      	ldr	r6, [pc, #116]	; (801fc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801fc16:	19da      	adds	r2, r3, r7
 801fc18:	6032      	str	r2, [r6, #0]
 801fc1a:	220e      	movs	r2, #14
 801fc1c:	fb02 f20c 	mul.w	r2, r2, ip
 801fc20:	3203      	adds	r2, #3
 801fc22:	f022 0203 	bic.w	r2, r2, #3
 801fc26:	443a      	add	r2, r7
 801fc28:	4f19      	ldr	r7, [pc, #100]	; (801fc90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801fc2a:	4413      	add	r3, r2
 801fc2c:	603b      	str	r3, [r7, #0]
 801fc2e:	4f19      	ldr	r7, [pc, #100]	; (801fc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801fc30:	2300      	movs	r3, #0
 801fc32:	803b      	strh	r3, [r7, #0]
 801fc34:	4f18      	ldr	r7, [pc, #96]	; (801fc98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801fc36:	683f      	ldr	r7, [r7, #0]
 801fc38:	1aba      	subs	r2, r7, r2
 801fc3a:	4f18      	ldr	r7, [pc, #96]	; (801fc9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801fc3c:	603a      	str	r2, [r7, #0]
 801fc3e:	4a18      	ldr	r2, [pc, #96]	; (801fca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801fc40:	469c      	mov	ip, r3
 801fc42:	8013      	strh	r3, [r2, #0]
 801fc44:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801fc48:	428b      	cmp	r3, r1
 801fc4a:	d10d      	bne.n	801fc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801fc4c:	882d      	ldrh	r5, [r5, #0]
 801fc4e:	6830      	ldr	r0, [r6, #0]
 801fc50:	2300      	movs	r3, #0
 801fc52:	240e      	movs	r4, #14
 801fc54:	429d      	cmp	r5, r3
 801fc56:	d90f      	bls.n	801fc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801fc58:	fb04 0203 	mla	r2, r4, r3, r0
 801fc5c:	3301      	adds	r3, #1
 801fc5e:	7b11      	ldrb	r1, [r2, #12]
 801fc60:	f36f 1145 	bfc	r1, #5, #1
 801fc64:	7311      	strb	r1, [r2, #12]
 801fc66:	e7f5      	b.n	801fc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801fc68:	6822      	ldr	r2, [r4, #0]
 801fc6a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801fc6e:	6802      	ldr	r2, [r0, #0]
 801fc70:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801fc74:	3301      	adds	r3, #1
 801fc76:	e7e7      	b.n	801fc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801fc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc7a:	bf00      	nop
 801fc7c:	2000b528 	.word	0x2000b528
 801fc80:	2000b544 	.word	0x2000b544
 801fc84:	2000b548 	.word	0x2000b548
 801fc88:	2000b53c 	.word	0x2000b53c
 801fc8c:	2000b52c 	.word	0x2000b52c
 801fc90:	2000b534 	.word	0x2000b534
 801fc94:	2000b546 	.word	0x2000b546
 801fc98:	2000b530 	.word	0x2000b530
 801fc9c:	2000b540 	.word	0x2000b540
 801fca0:	2000b538 	.word	0x2000b538

0801fca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801fca4:	4b06      	ldr	r3, [pc, #24]	; (801fcc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	b943      	cbnz	r3, 801fcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801fcaa:	b139      	cbz	r1, 801fcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801fcac:	4b05      	ldr	r3, [pc, #20]	; (801fcc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801fcae:	801a      	strh	r2, [r3, #0]
 801fcb0:	4b05      	ldr	r3, [pc, #20]	; (801fcc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801fcb2:	6019      	str	r1, [r3, #0]
 801fcb4:	4b05      	ldr	r3, [pc, #20]	; (801fccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801fcb6:	6018      	str	r0, [r3, #0]
 801fcb8:	f7ff bf96 	b.w	801fbe8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801fcbc:	4770      	bx	lr
 801fcbe:	bf00      	nop
 801fcc0:	2000b534 	.word	0x2000b534
 801fcc4:	2000b548 	.word	0x2000b548
 801fcc8:	2000b530 	.word	0x2000b530
 801fccc:	2000b528 	.word	0x2000b528

0801fcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801fcd0:	b470      	push	{r4, r5, r6}
 801fcd2:	4c07      	ldr	r4, [pc, #28]	; (801fcf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801fcd4:	6826      	ldr	r6, [r4, #0]
 801fcd6:	4605      	mov	r5, r0
 801fcd8:	4610      	mov	r0, r2
 801fcda:	9a03      	ldr	r2, [sp, #12]
 801fcdc:	b936      	cbnz	r6, 801fcec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801fcde:	6025      	str	r5, [r4, #0]
 801fce0:	4c04      	ldr	r4, [pc, #16]	; (801fcf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801fce2:	8021      	strh	r1, [r4, #0]
 801fce4:	bc70      	pop	{r4, r5, r6}
 801fce6:	4619      	mov	r1, r3
 801fce8:	f7ff bfdc 	b.w	801fca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801fcec:	bc70      	pop	{r4, r5, r6}
 801fcee:	4770      	bx	lr
 801fcf0:	2000b54c 	.word	0x2000b54c
 801fcf4:	2000b544 	.word	0x2000b544

0801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801fcf8:	4a12      	ldr	r2, [pc, #72]	; (801fd44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801fcfa:	8803      	ldrh	r3, [r0, #0]
 801fcfc:	8812      	ldrh	r2, [r2, #0]
 801fcfe:	4293      	cmp	r3, r2
 801fd00:	d207      	bcs.n	801fd12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801fd02:	4a11      	ldr	r2, [pc, #68]	; (801fd48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801fd04:	6812      	ldr	r2, [r2, #0]
 801fd06:	2114      	movs	r1, #20
 801fd08:	fb01 2303 	mla	r3, r1, r3, r2
 801fd0c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801fd10:	4770      	bx	lr
 801fd12:	490e      	ldr	r1, [pc, #56]	; (801fd4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801fd14:	8809      	ldrh	r1, [r1, #0]
 801fd16:	4411      	add	r1, r2
 801fd18:	428b      	cmp	r3, r1
 801fd1a:	da04      	bge.n	801fd26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801fd1c:	1a9b      	subs	r3, r3, r2
 801fd1e:	4a0c      	ldr	r2, [pc, #48]	; (801fd50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801fd20:	210e      	movs	r1, #14
 801fd22:	6812      	ldr	r2, [r2, #0]
 801fd24:	e7f0      	b.n	801fd08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801fd26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fd2a:	4293      	cmp	r3, r2
 801fd2c:	d108      	bne.n	801fd40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801fd2e:	4b09      	ldr	r3, [pc, #36]	; (801fd54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801fd30:	781b      	ldrb	r3, [r3, #0]
 801fd32:	b91b      	cbnz	r3, 801fd3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801fd34:	4b08      	ldr	r3, [pc, #32]	; (801fd58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801fd36:	f9b3 0000 	ldrsh.w	r0, [r3]
 801fd3a:	4770      	bx	lr
 801fd3c:	4b07      	ldr	r3, [pc, #28]	; (801fd5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801fd3e:	e7fa      	b.n	801fd36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801fd40:	2000      	movs	r0, #0
 801fd42:	4770      	bx	lr
 801fd44:	2000b544 	.word	0x2000b544
 801fd48:	2000b54c 	.word	0x2000b54c
 801fd4c:	2000b548 	.word	0x2000b548
 801fd50:	2000b52c 	.word	0x2000b52c
 801fd54:	2000b4bc 	.word	0x2000b4bc
 801fd58:	2000b4be 	.word	0x2000b4be
 801fd5c:	2000b4c0 	.word	0x2000b4c0

0801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801fd60:	4a12      	ldr	r2, [pc, #72]	; (801fdac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801fd62:	8803      	ldrh	r3, [r0, #0]
 801fd64:	8812      	ldrh	r2, [r2, #0]
 801fd66:	4293      	cmp	r3, r2
 801fd68:	d207      	bcs.n	801fd7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801fd6a:	4a11      	ldr	r2, [pc, #68]	; (801fdb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801fd6c:	6812      	ldr	r2, [r2, #0]
 801fd6e:	2114      	movs	r1, #20
 801fd70:	fb01 2303 	mla	r3, r1, r3, r2
 801fd74:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801fd78:	4770      	bx	lr
 801fd7a:	490e      	ldr	r1, [pc, #56]	; (801fdb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801fd7c:	8809      	ldrh	r1, [r1, #0]
 801fd7e:	4411      	add	r1, r2
 801fd80:	428b      	cmp	r3, r1
 801fd82:	da04      	bge.n	801fd8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801fd84:	1a9b      	subs	r3, r3, r2
 801fd86:	4a0c      	ldr	r2, [pc, #48]	; (801fdb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801fd88:	210e      	movs	r1, #14
 801fd8a:	6812      	ldr	r2, [r2, #0]
 801fd8c:	e7f0      	b.n	801fd70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801fd8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fd92:	4293      	cmp	r3, r2
 801fd94:	d108      	bne.n	801fda8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801fd96:	4b09      	ldr	r3, [pc, #36]	; (801fdbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801fd98:	781b      	ldrb	r3, [r3, #0]
 801fd9a:	b91b      	cbnz	r3, 801fda4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801fd9c:	4b08      	ldr	r3, [pc, #32]	; (801fdc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801fd9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801fda2:	4770      	bx	lr
 801fda4:	4b07      	ldr	r3, [pc, #28]	; (801fdc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801fda6:	e7fa      	b.n	801fd9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801fda8:	2000      	movs	r0, #0
 801fdaa:	4770      	bx	lr
 801fdac:	2000b544 	.word	0x2000b544
 801fdb0:	2000b54c 	.word	0x2000b54c
 801fdb4:	2000b548 	.word	0x2000b548
 801fdb8:	2000b52c 	.word	0x2000b52c
 801fdbc:	2000b4bc 	.word	0x2000b4bc
 801fdc0:	2000b4c0 	.word	0x2000b4c0
 801fdc4:	2000b4be 	.word	0x2000b4be

0801fdc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801fdc8:	b510      	push	{r4, lr}
 801fdca:	4a1f      	ldr	r2, [pc, #124]	; (801fe48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801fdcc:	880b      	ldrh	r3, [r1, #0]
 801fdce:	8812      	ldrh	r2, [r2, #0]
 801fdd0:	4293      	cmp	r3, r2
 801fdd2:	d213      	bcs.n	801fdfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801fdd4:	4a1d      	ldr	r2, [pc, #116]	; (801fe4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801fdd6:	6812      	ldr	r2, [r2, #0]
 801fdd8:	2114      	movs	r1, #20
 801fdda:	fb01 2303 	mla	r3, r1, r3, r2
 801fdde:	8a1a      	ldrh	r2, [r3, #16]
 801fde0:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801fde4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801fde8:	8a5b      	ldrh	r3, [r3, #18]
 801fdea:	8004      	strh	r4, [r0, #0]
 801fdec:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fdf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fdf4:	8041      	strh	r1, [r0, #2]
 801fdf6:	8082      	strh	r2, [r0, #4]
 801fdf8:	80c3      	strh	r3, [r0, #6]
 801fdfa:	e00e      	b.n	801fe1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801fdfc:	4914      	ldr	r1, [pc, #80]	; (801fe50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801fdfe:	8809      	ldrh	r1, [r1, #0]
 801fe00:	4411      	add	r1, r2
 801fe02:	428b      	cmp	r3, r1
 801fe04:	da0a      	bge.n	801fe1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801fe06:	1a9b      	subs	r3, r3, r2
 801fe08:	4a12      	ldr	r2, [pc, #72]	; (801fe54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801fe0a:	6812      	ldr	r2, [r2, #0]
 801fe0c:	210e      	movs	r1, #14
 801fe0e:	fb01 2303 	mla	r3, r1, r3, r2
 801fe12:	681a      	ldr	r2, [r3, #0]
 801fe14:	6002      	str	r2, [r0, #0]
 801fe16:	685a      	ldr	r2, [r3, #4]
 801fe18:	6042      	str	r2, [r0, #4]
 801fe1a:	bd10      	pop	{r4, pc}
 801fe1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801fe20:	4293      	cmp	r3, r2
 801fe22:	d10b      	bne.n	801fe3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801fe24:	4b0c      	ldr	r3, [pc, #48]	; (801fe58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801fe26:	f9b3 1000 	ldrsh.w	r1, [r3]
 801fe2a:	4b0c      	ldr	r3, [pc, #48]	; (801fe5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801fe2c:	8081      	strh	r1, [r0, #4]
 801fe2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fe32:	80c2      	strh	r2, [r0, #6]
 801fe34:	2300      	movs	r3, #0
 801fe36:	8003      	strh	r3, [r0, #0]
 801fe38:	8043      	strh	r3, [r0, #2]
 801fe3a:	e7ee      	b.n	801fe1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801fe3c:	2300      	movs	r3, #0
 801fe3e:	8003      	strh	r3, [r0, #0]
 801fe40:	8043      	strh	r3, [r0, #2]
 801fe42:	8083      	strh	r3, [r0, #4]
 801fe44:	e7d8      	b.n	801fdf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801fe46:	bf00      	nop
 801fe48:	2000b544 	.word	0x2000b544
 801fe4c:	2000b54c 	.word	0x2000b54c
 801fe50:	2000b548 	.word	0x2000b548
 801fe54:	2000b52c 	.word	0x2000b52c
 801fe58:	2000b4b8 	.word	0x2000b4b8
 801fe5c:	2000b4ba 	.word	0x2000b4ba

0801fe60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801fe60:	4a17      	ldr	r2, [pc, #92]	; (801fec0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801fe62:	8803      	ldrh	r3, [r0, #0]
 801fe64:	8812      	ldrh	r2, [r2, #0]
 801fe66:	4293      	cmp	r3, r2
 801fe68:	d213      	bcs.n	801fe92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801fe6a:	4a16      	ldr	r2, [pc, #88]	; (801fec4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801fe6c:	6812      	ldr	r2, [r2, #0]
 801fe6e:	2114      	movs	r1, #20
 801fe70:	fb01 2303 	mla	r3, r1, r3, r2
 801fe74:	8a1a      	ldrh	r2, [r3, #16]
 801fe76:	8919      	ldrh	r1, [r3, #8]
 801fe78:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801fe7c:	428a      	cmp	r2, r1
 801fe7e:	db1d      	blt.n	801febc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801fe80:	8a58      	ldrh	r0, [r3, #18]
 801fe82:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801fe86:	895b      	ldrh	r3, [r3, #10]
 801fe88:	4298      	cmp	r0, r3
 801fe8a:	bfac      	ite	ge
 801fe8c:	2000      	movge	r0, #0
 801fe8e:	2001      	movlt	r0, #1
 801fe90:	4770      	bx	lr
 801fe92:	490d      	ldr	r1, [pc, #52]	; (801fec8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801fe94:	8809      	ldrh	r1, [r1, #0]
 801fe96:	4411      	add	r1, r2
 801fe98:	428b      	cmp	r3, r1
 801fe9a:	da0d      	bge.n	801feb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801fe9c:	1a9b      	subs	r3, r3, r2
 801fe9e:	4a0b      	ldr	r2, [pc, #44]	; (801fecc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801fea0:	6812      	ldr	r2, [r2, #0]
 801fea2:	210e      	movs	r1, #14
 801fea4:	fb01 2303 	mla	r3, r1, r3, r2
 801fea8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801feac:	891a      	ldrh	r2, [r3, #8]
 801feae:	4291      	cmp	r1, r2
 801feb0:	db04      	blt.n	801febc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801feb2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801feb6:	e7e6      	b.n	801fe86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801feb8:	2000      	movs	r0, #0
 801feba:	4770      	bx	lr
 801febc:	2001      	movs	r0, #1
 801febe:	4770      	bx	lr
 801fec0:	2000b544 	.word	0x2000b544
 801fec4:	2000b54c 	.word	0x2000b54c
 801fec8:	2000b548 	.word	0x2000b548
 801fecc:	2000b52c 	.word	0x2000b52c

0801fed0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801fed0:	4a12      	ldr	r2, [pc, #72]	; (801ff1c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801fed2:	8803      	ldrh	r3, [r0, #0]
 801fed4:	8811      	ldrh	r1, [r2, #0]
 801fed6:	428b      	cmp	r3, r1
 801fed8:	d20b      	bcs.n	801fef2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801feda:	4a11      	ldr	r2, [pc, #68]	; (801ff20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fedc:	6812      	ldr	r2, [r2, #0]
 801fede:	b112      	cbz	r2, 801fee6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801fee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801fee4:	b9c0      	cbnz	r0, 801ff18 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801fee6:	4a0f      	ldr	r2, [pc, #60]	; (801ff24 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801fee8:	6811      	ldr	r1, [r2, #0]
 801feea:	2214      	movs	r2, #20
 801feec:	4353      	muls	r3, r2
 801feee:	58c8      	ldr	r0, [r1, r3]
 801fef0:	4770      	bx	lr
 801fef2:	4a0d      	ldr	r2, [pc, #52]	; (801ff28 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801fef4:	8812      	ldrh	r2, [r2, #0]
 801fef6:	440a      	add	r2, r1
 801fef8:	4293      	cmp	r3, r2
 801fefa:	da04      	bge.n	801ff06 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801fefc:	4a08      	ldr	r2, [pc, #32]	; (801ff20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801fefe:	6812      	ldr	r2, [r2, #0]
 801ff00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ff04:	4770      	bx	lr
 801ff06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ff0a:	4293      	cmp	r3, r2
 801ff0c:	d103      	bne.n	801ff16 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ff0e:	4b07      	ldr	r3, [pc, #28]	; (801ff2c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ff14:	4770      	bx	lr
 801ff16:	2000      	movs	r0, #0
 801ff18:	4770      	bx	lr
 801ff1a:	bf00      	nop
 801ff1c:	2000b544 	.word	0x2000b544
 801ff20:	2000b528 	.word	0x2000b528
 801ff24:	2000b54c 	.word	0x2000b54c
 801ff28:	2000b548 	.word	0x2000b548
 801ff2c:	2000b4c4 	.word	0x2000b4c4

0801ff30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801ff30:	4b24      	ldr	r3, [pc, #144]	; (801ffc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801ff32:	8802      	ldrh	r2, [r0, #0]
 801ff34:	8818      	ldrh	r0, [r3, #0]
 801ff36:	4282      	cmp	r2, r0
 801ff38:	d221      	bcs.n	801ff7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801ff3a:	4b23      	ldr	r3, [pc, #140]	; (801ffc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801ff3c:	6819      	ldr	r1, [r3, #0]
 801ff3e:	2314      	movs	r3, #20
 801ff40:	fb03 1302 	mla	r3, r3, r2, r1
 801ff44:	6858      	ldr	r0, [r3, #4]
 801ff46:	2800      	cmp	r0, #0
 801ff48:	d03a      	beq.n	801ffc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ff4a:	4920      	ldr	r1, [pc, #128]	; (801ffcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ff4c:	6809      	ldr	r1, [r1, #0]
 801ff4e:	2900      	cmp	r1, #0
 801ff50:	d036      	beq.n	801ffc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ff52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ff56:	2900      	cmp	r1, #0
 801ff58:	d032      	beq.n	801ffc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801ff5a:	891a      	ldrh	r2, [r3, #8]
 801ff5c:	8958      	ldrh	r0, [r3, #10]
 801ff5e:	4350      	muls	r0, r2
 801ff60:	7c5a      	ldrb	r2, [r3, #17]
 801ff62:	7cdb      	ldrb	r3, [r3, #19]
 801ff64:	0952      	lsrs	r2, r2, #5
 801ff66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ff6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ff6e:	2b0b      	cmp	r3, #11
 801ff70:	bf18      	it	ne
 801ff72:	0040      	lslne	r0, r0, #1
 801ff74:	3003      	adds	r0, #3
 801ff76:	f020 0003 	bic.w	r0, r0, #3
 801ff7a:	4408      	add	r0, r1
 801ff7c:	4770      	bx	lr
 801ff7e:	4b14      	ldr	r3, [pc, #80]	; (801ffd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ff80:	881b      	ldrh	r3, [r3, #0]
 801ff82:	4403      	add	r3, r0
 801ff84:	429a      	cmp	r2, r3
 801ff86:	da1a      	bge.n	801ffbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ff88:	4b12      	ldr	r3, [pc, #72]	; (801ffd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	1a10      	subs	r0, r2, r0
 801ff8e:	210e      	movs	r1, #14
 801ff90:	fb01 3000 	mla	r0, r1, r0, r3
 801ff94:	7b03      	ldrb	r3, [r0, #12]
 801ff96:	f003 031f 	and.w	r3, r3, #31
 801ff9a:	2b0b      	cmp	r3, #11
 801ff9c:	d10b      	bne.n	801ffb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801ff9e:	8903      	ldrh	r3, [r0, #8]
 801ffa0:	8940      	ldrh	r0, [r0, #10]
 801ffa2:	4358      	muls	r0, r3
 801ffa4:	4b09      	ldr	r3, [pc, #36]	; (801ffcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ffa6:	6819      	ldr	r1, [r3, #0]
 801ffa8:	3003      	adds	r0, #3
 801ffaa:	f020 0303 	bic.w	r3, r0, #3
 801ffae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ffb2:	4418      	add	r0, r3
 801ffb4:	4770      	bx	lr
 801ffb6:	2b0d      	cmp	r3, #13
 801ffb8:	d101      	bne.n	801ffbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ffba:	300d      	adds	r0, #13
 801ffbc:	4770      	bx	lr
 801ffbe:	2000      	movs	r0, #0
 801ffc0:	4770      	bx	lr
 801ffc2:	bf00      	nop
 801ffc4:	2000b544 	.word	0x2000b544
 801ffc8:	2000b54c 	.word	0x2000b54c
 801ffcc:	2000b528 	.word	0x2000b528
 801ffd0:	2000b548 	.word	0x2000b548
 801ffd4:	2000b52c 	.word	0x2000b52c

0801ffd8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801ffd8:	b510      	push	{r4, lr}
 801ffda:	4a17      	ldr	r2, [pc, #92]	; (8020038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801ffdc:	8803      	ldrh	r3, [r0, #0]
 801ffde:	8812      	ldrh	r2, [r2, #0]
 801ffe0:	4293      	cmp	r3, r2
 801ffe2:	d20c      	bcs.n	801fffe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801ffe4:	4a15      	ldr	r2, [pc, #84]	; (802003c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801ffe6:	6812      	ldr	r2, [r2, #0]
 801ffe8:	2114      	movs	r1, #20
 801ffea:	fb01 2303 	mla	r3, r1, r3, r2
 801ffee:	7c58      	ldrb	r0, [r3, #17]
 801fff0:	0942      	lsrs	r2, r0, #5
 801fff2:	7cd8      	ldrb	r0, [r3, #19]
 801fff4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801fff8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801fffc:	bd10      	pop	{r4, pc}
 801fffe:	4910      	ldr	r1, [pc, #64]	; (8020040 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8020000:	8809      	ldrh	r1, [r1, #0]
 8020002:	4411      	add	r1, r2
 8020004:	428b      	cmp	r3, r1
 8020006:	da09      	bge.n	802001c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8020008:	1a9b      	subs	r3, r3, r2
 802000a:	4a0e      	ldr	r2, [pc, #56]	; (8020044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 802000c:	6812      	ldr	r2, [r2, #0]
 802000e:	210e      	movs	r1, #14
 8020010:	fb01 2303 	mla	r3, r1, r3, r2
 8020014:	7b18      	ldrb	r0, [r3, #12]
 8020016:	f000 001f 	and.w	r0, r0, #31
 802001a:	e7ef      	b.n	801fffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 802001c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020020:	4293      	cmp	r3, r2
 8020022:	d106      	bne.n	8020032 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8020024:	f7f1 fb84 	bl	8011730 <_ZN8touchgfx3HAL3lcdEv>
 8020028:	6803      	ldr	r3, [r0, #0]
 802002a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020030:	4718      	bx	r3
 8020032:	2000      	movs	r0, #0
 8020034:	e7e2      	b.n	801fffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8020036:	bf00      	nop
 8020038:	2000b544 	.word	0x2000b544
 802003c:	2000b54c 	.word	0x2000b54c
 8020040:	2000b548 	.word	0x2000b548
 8020044:	2000b52c 	.word	0x2000b52c

08020048 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8020048:	2010      	movs	r0, #16
 802004a:	4770      	bx	lr

0802004c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 802004c:	2000      	movs	r0, #0
 802004e:	4770      	bx	lr

08020050 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020050:	4b02      	ldr	r3, [pc, #8]	; (802005c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8020052:	8818      	ldrh	r0, [r3, #0]
 8020054:	0040      	lsls	r0, r0, #1
 8020056:	b280      	uxth	r0, r0
 8020058:	4770      	bx	lr
 802005a:	bf00      	nop
 802005c:	2000b4be 	.word	0x2000b4be

08020060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8020060:	2bff      	cmp	r3, #255	; 0xff
 8020062:	d050      	beq.n	8020106 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8020064:	2a0b      	cmp	r2, #11
 8020066:	d04a      	beq.n	80200fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8020068:	d80e      	bhi.n	8020088 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 802006a:	2a03      	cmp	r2, #3
 802006c:	d03f      	beq.n	80200ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 802006e:	d804      	bhi.n	802007a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8020070:	2a01      	cmp	r2, #1
 8020072:	d03e      	beq.n	80200f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8020074:	d93f      	bls.n	80200f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8020076:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8020078:	4770      	bx	lr
 802007a:	2a09      	cmp	r2, #9
 802007c:	d03f      	beq.n	80200fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 802007e:	d83c      	bhi.n	80200fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8020080:	2a08      	cmp	r2, #8
 8020082:	d03a      	beq.n	80200fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8020084:	2000      	movs	r0, #0
 8020086:	4770      	bx	lr
 8020088:	2a2f      	cmp	r2, #47	; 0x2f
 802008a:	d024      	beq.n	80200d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 802008c:	d80d      	bhi.n	80200aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 802008e:	2a2d      	cmp	r2, #45	; 0x2d
 8020090:	d014      	beq.n	80200bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8020092:	d826      	bhi.n	80200e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8020094:	2a2c      	cmp	r2, #44	; 0x2c
 8020096:	d1f5      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020098:	684b      	ldr	r3, [r1, #4]
 802009a:	781b      	ldrb	r3, [r3, #0]
 802009c:	2b01      	cmp	r3, #1
 802009e:	d018      	beq.n	80200d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80200a0:	d323      	bcc.n	80200ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 80200a2:	2b02      	cmp	r3, #2
 80200a4:	d1ee      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200a6:	6880      	ldr	r0, [r0, #8]
 80200a8:	4770      	bx	lr
 80200aa:	2a31      	cmp	r2, #49	; 0x31
 80200ac:	d004      	beq.n	80200b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 80200ae:	d328      	bcc.n	8020102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80200b0:	2a32      	cmp	r2, #50	; 0x32
 80200b2:	d026      	beq.n	8020102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80200b4:	2a33      	cmp	r2, #51	; 0x33
 80200b6:	d1e5      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200b8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80200ba:	4770      	bx	lr
 80200bc:	684b      	ldr	r3, [r1, #4]
 80200be:	781b      	ldrb	r3, [r3, #0]
 80200c0:	2b01      	cmp	r3, #1
 80200c2:	d004      	beq.n	80200ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80200c4:	d30b      	bcc.n	80200de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80200c6:	2b02      	cmp	r3, #2
 80200c8:	d1dc      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200ca:	6900      	ldr	r0, [r0, #16]
 80200cc:	4770      	bx	lr
 80200ce:	6a00      	ldr	r0, [r0, #32]
 80200d0:	4770      	bx	lr
 80200d2:	6980      	ldr	r0, [r0, #24]
 80200d4:	4770      	bx	lr
 80200d6:	684b      	ldr	r3, [r1, #4]
 80200d8:	781b      	ldrb	r3, [r3, #0]
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d1d2      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80200e0:	4770      	bx	lr
 80200e2:	684b      	ldr	r3, [r1, #4]
 80200e4:	781b      	ldrb	r3, [r3, #0]
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d1cc      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80200ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80200ec:	4770      	bx	lr
 80200ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80200f0:	4770      	bx	lr
 80200f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80200f4:	4770      	bx	lr
 80200f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80200f8:	4770      	bx	lr
 80200fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80200fc:	4770      	bx	lr
 80200fe:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8020100:	4770      	bx	lr
 8020102:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8020104:	4770      	bx	lr
 8020106:	2a0b      	cmp	r2, #11
 8020108:	d049      	beq.n	802019e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 802010a:	d80e      	bhi.n	802012a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 802010c:	2a03      	cmp	r2, #3
 802010e:	d040      	beq.n	8020192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8020110:	d804      	bhi.n	802011c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8020112:	2a01      	cmp	r2, #1
 8020114:	d03f      	beq.n	8020196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8020116:	d940      	bls.n	802019a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8020118:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 802011a:	4770      	bx	lr
 802011c:	2a09      	cmp	r2, #9
 802011e:	d03e      	beq.n	802019e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8020120:	d801      	bhi.n	8020126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8020122:	2a08      	cmp	r2, #8
 8020124:	d1ae      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020126:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8020128:	4770      	bx	lr
 802012a:	2a2f      	cmp	r2, #47	; 0x2f
 802012c:	d024      	beq.n	8020178 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 802012e:	d80d      	bhi.n	802014c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8020130:	2a2d      	cmp	r2, #45	; 0x2d
 8020132:	d014      	beq.n	802015e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8020134:	d826      	bhi.n	8020184 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8020136:	2a2c      	cmp	r2, #44	; 0x2c
 8020138:	d1a4      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802013a:	684b      	ldr	r3, [r1, #4]
 802013c:	781b      	ldrb	r3, [r3, #0]
 802013e:	2b01      	cmp	r3, #1
 8020140:	d018      	beq.n	8020174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8020142:	d324      	bcc.n	802018e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8020144:	2b02      	cmp	r3, #2
 8020146:	d19d      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020148:	68c0      	ldr	r0, [r0, #12]
 802014a:	4770      	bx	lr
 802014c:	2a31      	cmp	r2, #49	; 0x31
 802014e:	d004      	beq.n	802015a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8020150:	d327      	bcc.n	80201a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8020152:	2a32      	cmp	r2, #50	; 0x32
 8020154:	d025      	beq.n	80201a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8020156:	2a33      	cmp	r2, #51	; 0x33
 8020158:	d194      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802015a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 802015c:	4770      	bx	lr
 802015e:	684b      	ldr	r3, [r1, #4]
 8020160:	781b      	ldrb	r3, [r3, #0]
 8020162:	2b01      	cmp	r3, #1
 8020164:	d004      	beq.n	8020170 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8020166:	d30b      	bcc.n	8020180 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8020168:	2b02      	cmp	r3, #2
 802016a:	d18b      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802016c:	6940      	ldr	r0, [r0, #20]
 802016e:	4770      	bx	lr
 8020170:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8020172:	4770      	bx	lr
 8020174:	69c0      	ldr	r0, [r0, #28]
 8020176:	4770      	bx	lr
 8020178:	684b      	ldr	r3, [r1, #4]
 802017a:	781b      	ldrb	r3, [r3, #0]
 802017c:	2b00      	cmp	r3, #0
 802017e:	d181      	bne.n	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8020180:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8020182:	4770      	bx	lr
 8020184:	684b      	ldr	r3, [r1, #4]
 8020186:	781b      	ldrb	r3, [r3, #0]
 8020188:	2b00      	cmp	r3, #0
 802018a:	f47f af7b 	bne.w	8020084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 802018e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8020190:	4770      	bx	lr
 8020192:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8020194:	4770      	bx	lr
 8020196:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8020198:	4770      	bx	lr
 802019a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802019c:	4770      	bx	lr
 802019e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80201a0:	4770      	bx	lr
 80201a2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80201a4:	4770      	bx	lr

080201a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201aa:	b087      	sub	sp, #28
 80201ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201ae:	9205      	str	r2, [sp, #20]
 80201b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80201b4:	9202      	str	r2, [sp, #8]
 80201b6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80201ba:	9101      	str	r1, [sp, #4]
 80201bc:	6841      	ldr	r1, [r0, #4]
 80201be:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80201c2:	fb01 2404 	mla	r4, r1, r4, r2
 80201c6:	6802      	ldr	r2, [r0, #0]
 80201c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80201cc:	f8de 2000 	ldr.w	r2, [lr]
 80201d0:	9203      	str	r2, [sp, #12]
 80201d2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80201d6:	3204      	adds	r2, #4
 80201d8:	9204      	str	r2, [sp, #16]
 80201da:	9a02      	ldr	r2, [sp, #8]
 80201dc:	43d6      	mvns	r6, r2
 80201de:	b2f6      	uxtb	r6, r6
 80201e0:	9a01      	ldr	r2, [sp, #4]
 80201e2:	2a00      	cmp	r2, #0
 80201e4:	dc03      	bgt.n	80201ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80201e6:	9a05      	ldr	r2, [sp, #20]
 80201e8:	2a00      	cmp	r2, #0
 80201ea:	f340 8129 	ble.w	8020440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80201ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201f0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80201f4:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80201f8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80201fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020202:	2b00      	cmp	r3, #0
 8020204:	dd0e      	ble.n	8020224 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020206:	1408      	asrs	r0, r1, #16
 8020208:	d405      	bmi.n	8020216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802020a:	4560      	cmp	r0, ip
 802020c:	da03      	bge.n	8020216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802020e:	1410      	asrs	r0, r2, #16
 8020210:	d401      	bmi.n	8020216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020212:	42b8      	cmp	r0, r7
 8020214:	db07      	blt.n	8020226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020216:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020218:	4401      	add	r1, r0
 802021a:	9814      	ldr	r0, [sp, #80]	; 0x50
 802021c:	3b01      	subs	r3, #1
 802021e:	4402      	add	r2, r0
 8020220:	3402      	adds	r4, #2
 8020222:	e7ee      	b.n	8020202 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020224:	d071      	beq.n	802030a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020226:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020228:	1e58      	subs	r0, r3, #1
 802022a:	fb05 1500 	mla	r5, r5, r0, r1
 802022e:	142d      	asrs	r5, r5, #16
 8020230:	d45f      	bmi.n	80202f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020232:	4565      	cmp	r5, ip
 8020234:	da5d      	bge.n	80202f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020236:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020238:	fb05 2000 	mla	r0, r5, r0, r2
 802023c:	1400      	asrs	r0, r0, #16
 802023e:	d458      	bmi.n	80202f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020240:	42b8      	cmp	r0, r7
 8020242:	da56      	bge.n	80202f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8020244:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8020248:	4699      	mov	r9, r3
 802024a:	46a2      	mov	sl, r4
 802024c:	f1b9 0f00 	cmp.w	r9, #0
 8020250:	dd57      	ble.n	8020302 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8020252:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020256:	9803      	ldr	r0, [sp, #12]
 8020258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802025c:	140d      	asrs	r5, r1, #16
 802025e:	fb07 000c 	mla	r0, r7, ip, r0
 8020262:	f109 39ff 	add.w	r9, r9, #4294967295
 8020266:	5d40      	ldrb	r0, [r0, r5]
 8020268:	9d04      	ldr	r5, [sp, #16]
 802026a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 802026e:	f8ba 5000 	ldrh.w	r5, [sl]
 8020272:	122f      	asrs	r7, r5, #8
 8020274:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020278:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802027c:	fb17 f706 	smulbb	r7, r7, r6
 8020280:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8020284:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020288:	00ed      	lsls	r5, r5, #3
 802028a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802028e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8020292:	10c7      	asrs	r7, r0, #3
 8020294:	b2ed      	uxtb	r5, r5
 8020296:	00c0      	lsls	r0, r0, #3
 8020298:	fb18 f806 	smulbb	r8, r8, r6
 802029c:	fb15 f506 	smulbb	r5, r5, r6
 80202a0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80202a4:	b2c0      	uxtb	r0, r0
 80202a6:	fa1f fc8c 	uxth.w	ip, ip
 80202aa:	fb07 870b 	mla	r7, r7, fp, r8
 80202ae:	fb00 500b 	mla	r0, r0, fp, r5
 80202b2:	b280      	uxth	r0, r0
 80202b4:	b2bf      	uxth	r7, r7
 80202b6:	f10c 0501 	add.w	r5, ip, #1
 80202ba:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80202be:	f107 0801 	add.w	r8, r7, #1
 80202c2:	1c45      	adds	r5, r0, #1
 80202c4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80202c8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80202cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80202ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80202d2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80202d6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80202da:	ea45 0c0c 	orr.w	ip, r5, ip
 80202de:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80202e2:	4401      	add	r1, r0
 80202e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80202e6:	ea4c 0c08 	orr.w	ip, ip, r8
 80202ea:	f82a cb02 	strh.w	ip, [sl], #2
 80202ee:	4402      	add	r2, r0
 80202f0:	e7ac      	b.n	802024c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80202f2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80202f6:	f04f 0800 	mov.w	r8, #0
 80202fa:	eb03 0008 	add.w	r0, r3, r8
 80202fe:	2800      	cmp	r0, #0
 8020300:	dc41      	bgt.n	8020386 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8020302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020306:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802030a:	9b01      	ldr	r3, [sp, #4]
 802030c:	2b00      	cmp	r3, #0
 802030e:	f340 8097 	ble.w	8020440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8020312:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802031a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802031e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020320:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020324:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020328:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802032c:	eef0 6a62 	vmov.f32	s13, s5
 8020330:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020334:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020338:	ee77 2a62 	vsub.f32	s5, s14, s5
 802033c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8020340:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020344:	eef0 6a43 	vmov.f32	s13, s6
 8020348:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802034c:	ee12 2a90 	vmov	r2, s5
 8020350:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020354:	fb92 f3f3 	sdiv	r3, r2, r3
 8020358:	ee13 2a10 	vmov	r2, s6
 802035c:	9313      	str	r3, [sp, #76]	; 0x4c
 802035e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020360:	fb92 f3f3 	sdiv	r3, r2, r3
 8020364:	9314      	str	r3, [sp, #80]	; 0x50
 8020366:	9b01      	ldr	r3, [sp, #4]
 8020368:	9a05      	ldr	r2, [sp, #20]
 802036a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802036e:	3b01      	subs	r3, #1
 8020370:	9301      	str	r3, [sp, #4]
 8020372:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8020376:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020378:	eeb0 3a67 	vmov.f32	s6, s15
 802037c:	bf08      	it	eq
 802037e:	4613      	moveq	r3, r2
 8020380:	eef0 2a47 	vmov.f32	s5, s14
 8020384:	e72c      	b.n	80201e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020386:	140f      	asrs	r7, r1, #16
 8020388:	d453      	bmi.n	8020432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802038a:	f8de 5008 	ldr.w	r5, [lr, #8]
 802038e:	42bd      	cmp	r5, r7
 8020390:	dd4f      	ble.n	8020432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020392:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020396:	d44c      	bmi.n	8020432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8020398:	f8de 000c 	ldr.w	r0, [lr, #12]
 802039c:	4560      	cmp	r0, ip
 802039e:	dd48      	ble.n	8020432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80203a0:	9803      	ldr	r0, [sp, #12]
 80203a2:	b22d      	sxth	r5, r5
 80203a4:	fb0c 0505 	mla	r5, ip, r5, r0
 80203a8:	5de8      	ldrb	r0, [r5, r7]
 80203aa:	9d04      	ldr	r5, [sp, #16]
 80203ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80203b0:	f06f 0501 	mvn.w	r5, #1
 80203b4:	fb05 fb08 	mul.w	fp, r5, r8
 80203b8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80203bc:	f834 500b 	ldrh.w	r5, [r4, fp]
 80203c0:	122f      	asrs	r7, r5, #8
 80203c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80203c6:	fb17 f706 	smulbb	r7, r7, r6
 80203ca:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80203ce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80203d2:	00ed      	lsls	r5, r5, #3
 80203d4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80203d8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80203dc:	10c7      	asrs	r7, r0, #3
 80203de:	b2ed      	uxtb	r5, r5
 80203e0:	00c0      	lsls	r0, r0, #3
 80203e2:	fb19 f906 	smulbb	r9, r9, r6
 80203e6:	fb15 f506 	smulbb	r5, r5, r6
 80203ea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80203ee:	b2c0      	uxtb	r0, r0
 80203f0:	fa1f fc8c 	uxth.w	ip, ip
 80203f4:	fb07 970a 	mla	r7, r7, sl, r9
 80203f8:	fb00 500a 	mla	r0, r0, sl, r5
 80203fc:	b2bf      	uxth	r7, r7
 80203fe:	b280      	uxth	r0, r0
 8020400:	f10c 0501 	add.w	r5, ip, #1
 8020404:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020408:	f107 0901 	add.w	r9, r7, #1
 802040c:	1c45      	adds	r5, r0, #1
 802040e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020412:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020416:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802041a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802041e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020422:	ea45 0c0c 	orr.w	ip, r5, ip
 8020426:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802042a:	ea4c 0c09 	orr.w	ip, ip, r9
 802042e:	f824 c00b 	strh.w	ip, [r4, fp]
 8020432:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020434:	4401      	add	r1, r0
 8020436:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020438:	f108 38ff 	add.w	r8, r8, #4294967295
 802043c:	4402      	add	r2, r0
 802043e:	e75c      	b.n	80202fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8020440:	b007      	add	sp, #28
 8020442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020446 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802044a:	b085      	sub	sp, #20
 802044c:	4693      	mov	fp, r2
 802044e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020450:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8020452:	6870      	ldr	r0, [r6, #4]
 8020454:	9100      	str	r1, [sp, #0]
 8020456:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802045a:	fb00 2404 	mla	r4, r0, r4, r2
 802045e:	6832      	ldr	r2, [r6, #0]
 8020460:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020464:	682a      	ldr	r2, [r5, #0]
 8020466:	9201      	str	r2, [sp, #4]
 8020468:	686a      	ldr	r2, [r5, #4]
 802046a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802046e:	3204      	adds	r2, #4
 8020470:	9202      	str	r2, [sp, #8]
 8020472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020476:	9a00      	ldr	r2, [sp, #0]
 8020478:	2a00      	cmp	r2, #0
 802047a:	dc03      	bgt.n	8020484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802047c:	f1bb 0f00 	cmp.w	fp, #0
 8020480:	f340 80a0 	ble.w	80205c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8020484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020486:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802048a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802048e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020492:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020494:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020498:	2b00      	cmp	r3, #0
 802049a:	dd0c      	ble.n	80204b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802049c:	1406      	asrs	r6, r0, #16
 802049e:	d405      	bmi.n	80204ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204a0:	454e      	cmp	r6, r9
 80204a2:	da03      	bge.n	80204ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204a4:	1416      	asrs	r6, r2, #16
 80204a6:	d401      	bmi.n	80204ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204a8:	4546      	cmp	r6, r8
 80204aa:	db05      	blt.n	80204b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80204ac:	4470      	add	r0, lr
 80204ae:	4462      	add	r2, ip
 80204b0:	3b01      	subs	r3, #1
 80204b2:	3402      	adds	r4, #2
 80204b4:	e7f0      	b.n	8020498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80204b6:	d00f      	beq.n	80204d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80204b8:	1e5e      	subs	r6, r3, #1
 80204ba:	fb0e 0706 	mla	r7, lr, r6, r0
 80204be:	143f      	asrs	r7, r7, #16
 80204c0:	d541      	bpl.n	8020546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80204c2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80204c6:	4698      	mov	r8, r3
 80204c8:	9603      	str	r6, [sp, #12]
 80204ca:	f1b8 0f00 	cmp.w	r8, #0
 80204ce:	dc59      	bgt.n	8020584 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80204d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80204d8:	9b00      	ldr	r3, [sp, #0]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	dd72      	ble.n	80205c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80204de:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80204f4:	eeb0 6a62 	vmov.f32	s12, s5
 80204f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80204fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020500:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020504:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020508:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802050c:	eeb0 6a43 	vmov.f32	s12, s6
 8020510:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020514:	ee12 2a90 	vmov	r2, s5
 8020518:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802051c:	fb92 fef3 	sdiv	lr, r2, r3
 8020520:	ee13 2a10 	vmov	r2, s6
 8020524:	fb92 fcf3 	sdiv	ip, r2, r3
 8020528:	9b00      	ldr	r3, [sp, #0]
 802052a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802052e:	3b01      	subs	r3, #1
 8020530:	9300      	str	r3, [sp, #0]
 8020532:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020538:	eeb0 3a67 	vmov.f32	s6, s15
 802053c:	bf08      	it	eq
 802053e:	465b      	moveq	r3, fp
 8020540:	eef0 2a47 	vmov.f32	s5, s14
 8020544:	e797      	b.n	8020476 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020546:	454f      	cmp	r7, r9
 8020548:	dabb      	bge.n	80204c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802054a:	fb0c 2606 	mla	r6, ip, r6, r2
 802054e:	1436      	asrs	r6, r6, #16
 8020550:	d4b7      	bmi.n	80204c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020552:	4546      	cmp	r6, r8
 8020554:	dab5      	bge.n	80204c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020556:	461e      	mov	r6, r3
 8020558:	46a0      	mov	r8, r4
 802055a:	2e00      	cmp	r6, #0
 802055c:	ddb8      	ble.n	80204d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802055e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020562:	9901      	ldr	r1, [sp, #4]
 8020564:	1417      	asrs	r7, r2, #16
 8020566:	ea4f 4920 	mov.w	r9, r0, asr #16
 802056a:	fb0a 1707 	mla	r7, sl, r7, r1
 802056e:	9902      	ldr	r1, [sp, #8]
 8020570:	f817 7009 	ldrb.w	r7, [r7, r9]
 8020574:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020578:	f828 7b02 	strh.w	r7, [r8], #2
 802057c:	4470      	add	r0, lr
 802057e:	4462      	add	r2, ip
 8020580:	3e01      	subs	r6, #1
 8020582:	e7ea      	b.n	802055a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020584:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020588:	d417      	bmi.n	80205ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 802058a:	68ae      	ldr	r6, [r5, #8]
 802058c:	454e      	cmp	r6, r9
 802058e:	dd14      	ble.n	80205ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8020590:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020594:	d411      	bmi.n	80205ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8020596:	68ef      	ldr	r7, [r5, #12]
 8020598:	4557      	cmp	r7, sl
 802059a:	dd0e      	ble.n	80205ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 802059c:	9f01      	ldr	r7, [sp, #4]
 802059e:	b236      	sxth	r6, r6
 80205a0:	fb0a 7606 	mla	r6, sl, r6, r7
 80205a4:	9f02      	ldr	r7, [sp, #8]
 80205a6:	f816 6009 	ldrb.w	r6, [r6, r9]
 80205aa:	f06f 0101 	mvn.w	r1, #1
 80205ae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 80205b2:	fb01 f608 	mul.w	r6, r1, r8
 80205b6:	9903      	ldr	r1, [sp, #12]
 80205b8:	538f      	strh	r7, [r1, r6]
 80205ba:	4470      	add	r0, lr
 80205bc:	4462      	add	r2, ip
 80205be:	f108 38ff 	add.w	r8, r8, #4294967295
 80205c2:	e782      	b.n	80204ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205c4:	b005      	add	sp, #20
 80205c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205ce:	b087      	sub	sp, #28
 80205d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205d2:	9205      	str	r2, [sp, #20]
 80205d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80205d8:	9203      	str	r2, [sp, #12]
 80205da:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80205de:	9102      	str	r1, [sp, #8]
 80205e0:	6861      	ldr	r1, [r4, #4]
 80205e2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80205e6:	fb01 2000 	mla	r0, r1, r0, r2
 80205ea:	6822      	ldr	r2, [r4, #0]
 80205ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80205f0:	9200      	str	r2, [sp, #0]
 80205f2:	f8dc 2000 	ldr.w	r2, [ip]
 80205f6:	9204      	str	r2, [sp, #16]
 80205f8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80205fc:	3204      	adds	r2, #4
 80205fe:	9201      	str	r2, [sp, #4]
 8020600:	9a03      	ldr	r2, [sp, #12]
 8020602:	43d5      	mvns	r5, r2
 8020604:	b2ed      	uxtb	r5, r5
 8020606:	9a02      	ldr	r2, [sp, #8]
 8020608:	2a00      	cmp	r2, #0
 802060a:	dc03      	bgt.n	8020614 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802060c:	9a05      	ldr	r2, [sp, #20]
 802060e:	2a00      	cmp	r2, #0
 8020610:	f340 812c 	ble.w	802086c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020614:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020616:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 802061a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 802061e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020622:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020624:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020628:	2b00      	cmp	r3, #0
 802062a:	dd10      	ble.n	802064e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802062c:	140c      	asrs	r4, r1, #16
 802062e:	d405      	bmi.n	802063c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020630:	4574      	cmp	r4, lr
 8020632:	da03      	bge.n	802063c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020634:	1414      	asrs	r4, r2, #16
 8020636:	d401      	bmi.n	802063c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020638:	42bc      	cmp	r4, r7
 802063a:	db09      	blt.n	8020650 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802063c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802063e:	9800      	ldr	r0, [sp, #0]
 8020640:	4421      	add	r1, r4
 8020642:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020644:	3002      	adds	r0, #2
 8020646:	4422      	add	r2, r4
 8020648:	3b01      	subs	r3, #1
 802064a:	9000      	str	r0, [sp, #0]
 802064c:	e7ec      	b.n	8020628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802064e:	d071      	beq.n	8020734 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8020650:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020652:	1e5c      	subs	r4, r3, #1
 8020654:	fb06 1604 	mla	r6, r6, r4, r1
 8020658:	1436      	asrs	r6, r6, #16
 802065a:	d45d      	bmi.n	8020718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802065c:	4576      	cmp	r6, lr
 802065e:	da5b      	bge.n	8020718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020660:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8020662:	fb06 2404 	mla	r4, r6, r4, r2
 8020666:	1424      	asrs	r4, r4, #16
 8020668:	d456      	bmi.n	8020718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802066a:	42bc      	cmp	r4, r7
 802066c:	da54      	bge.n	8020718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802066e:	f8dd 9000 	ldr.w	r9, [sp]
 8020672:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8020676:	4698      	mov	r8, r3
 8020678:	f1b8 0f00 	cmp.w	r8, #0
 802067c:	dd54      	ble.n	8020728 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802067e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8020682:	9804      	ldr	r0, [sp, #16]
 8020684:	1414      	asrs	r4, r2, #16
 8020686:	fb07 0404 	mla	r4, r7, r4, r0
 802068a:	140e      	asrs	r6, r1, #16
 802068c:	9801      	ldr	r0, [sp, #4]
 802068e:	f814 e006 	ldrb.w	lr, [r4, r6]
 8020692:	f8b9 4000 	ldrh.w	r4, [r9]
 8020696:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802069a:	eb00 0b0e 	add.w	fp, r0, lr
 802069e:	1227      	asrs	r7, r4, #8
 80206a0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80206a4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80206a8:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80206ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80206ae:	fb16 f60a 	smulbb	r6, r6, sl
 80206b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80206b6:	fb07 6705 	mla	r7, r7, r5, r6
 80206ba:	10e6      	asrs	r6, r4, #3
 80206bc:	00e4      	lsls	r4, r4, #3
 80206be:	b2e4      	uxtb	r4, r4
 80206c0:	fb1b fb0a 	smulbb	fp, fp, sl
 80206c4:	fb14 f405 	smulbb	r4, r4, r5
 80206c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80206cc:	b2bf      	uxth	r7, r7
 80206ce:	fb06 b605 	mla	r6, r6, r5, fp
 80206d2:	fb0e 4e0a 	mla	lr, lr, sl, r4
 80206d6:	b2b6      	uxth	r6, r6
 80206d8:	fa1f fe8e 	uxth.w	lr, lr
 80206dc:	1c7c      	adds	r4, r7, #1
 80206de:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80206e2:	f106 0b01 	add.w	fp, r6, #1
 80206e6:	f10e 0401 	add.w	r4, lr, #1
 80206ea:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80206ee:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80206f2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80206f6:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80206fa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80206fe:	4327      	orrs	r7, r4
 8020700:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020704:	4401      	add	r1, r0
 8020706:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020708:	ea47 070b 	orr.w	r7, r7, fp
 802070c:	f829 7b02 	strh.w	r7, [r9], #2
 8020710:	4402      	add	r2, r0
 8020712:	f108 38ff 	add.w	r8, r8, #4294967295
 8020716:	e7af      	b.n	8020678 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8020718:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 802071c:	f04f 0e00 	mov.w	lr, #0
 8020720:	eb03 040e 	add.w	r4, r3, lr
 8020724:	2c00      	cmp	r4, #0
 8020726:	dc43      	bgt.n	80207b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020728:	9a00      	ldr	r2, [sp, #0]
 802072a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802072e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020732:	9300      	str	r3, [sp, #0]
 8020734:	9b02      	ldr	r3, [sp, #8]
 8020736:	2b00      	cmp	r3, #0
 8020738:	f340 8098 	ble.w	802086c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802073c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020744:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802074a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802074e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020756:	eef0 6a62 	vmov.f32	s13, s5
 802075a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802075e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020762:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020766:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 802076a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802076e:	eef0 6a43 	vmov.f32	s13, s6
 8020772:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020776:	ee12 2a90 	vmov	r2, s5
 802077a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802077e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020782:	ee13 2a10 	vmov	r2, s6
 8020786:	9313      	str	r3, [sp, #76]	; 0x4c
 8020788:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802078a:	fb92 f3f3 	sdiv	r3, r2, r3
 802078e:	9314      	str	r3, [sp, #80]	; 0x50
 8020790:	9b02      	ldr	r3, [sp, #8]
 8020792:	9a05      	ldr	r2, [sp, #20]
 8020794:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020798:	3b01      	subs	r3, #1
 802079a:	9302      	str	r3, [sp, #8]
 802079c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80207a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207a2:	eeb0 3a67 	vmov.f32	s6, s15
 80207a6:	bf08      	it	eq
 80207a8:	4613      	moveq	r3, r2
 80207aa:	eef0 2a47 	vmov.f32	s5, s14
 80207ae:	e72a      	b.n	8020606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80207b0:	140f      	asrs	r7, r1, #16
 80207b2:	d454      	bmi.n	802085e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207b4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80207b8:	42be      	cmp	r6, r7
 80207ba:	dd50      	ble.n	802085e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207bc:	ea5f 4822 	movs.w	r8, r2, asr #16
 80207c0:	d44d      	bmi.n	802085e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207c2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 80207c6:	4544      	cmp	r4, r8
 80207c8:	dd49      	ble.n	802085e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80207ca:	9c04      	ldr	r4, [sp, #16]
 80207cc:	b236      	sxth	r6, r6
 80207ce:	fb08 4606 	mla	r6, r8, r6, r4
 80207d2:	f06f 0001 	mvn.w	r0, #1
 80207d6:	f816 8007 	ldrb.w	r8, [r6, r7]
 80207da:	9c01      	ldr	r4, [sp, #4]
 80207dc:	fb00 fa0e 	mul.w	sl, r0, lr
 80207e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80207e4:	9800      	ldr	r0, [sp, #0]
 80207e6:	eb04 0b08 	add.w	fp, r4, r8
 80207ea:	f830 400a 	ldrh.w	r4, [r0, sl]
 80207ee:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80207f2:	9801      	ldr	r0, [sp, #4]
 80207f4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80207f8:	f810 8008 	ldrb.w	r8, [r0, r8]
 80207fc:	9800      	ldr	r0, [sp, #0]
 80207fe:	1227      	asrs	r7, r4, #8
 8020800:	fb16 f609 	smulbb	r6, r6, r9
 8020804:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020808:	fb07 6705 	mla	r7, r7, r5, r6
 802080c:	10e6      	asrs	r6, r4, #3
 802080e:	00e4      	lsls	r4, r4, #3
 8020810:	b2e4      	uxtb	r4, r4
 8020812:	fb1b fb09 	smulbb	fp, fp, r9
 8020816:	fb14 f405 	smulbb	r4, r4, r5
 802081a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802081e:	b2bf      	uxth	r7, r7
 8020820:	fb06 b605 	mla	r6, r6, r5, fp
 8020824:	fb08 4809 	mla	r8, r8, r9, r4
 8020828:	b2b6      	uxth	r6, r6
 802082a:	fa1f f888 	uxth.w	r8, r8
 802082e:	1c7c      	adds	r4, r7, #1
 8020830:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8020834:	f106 0b01 	add.w	fp, r6, #1
 8020838:	f108 0401 	add.w	r4, r8, #1
 802083c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8020840:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8020844:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020848:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 802084c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8020850:	4327      	orrs	r7, r4
 8020852:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020856:	ea47 070b 	orr.w	r7, r7, fp
 802085a:	f820 700a 	strh.w	r7, [r0, sl]
 802085e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020860:	4401      	add	r1, r0
 8020862:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020864:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020868:	4402      	add	r2, r0
 802086a:	e759      	b.n	8020720 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802086c:	b007      	add	sp, #28
 802086e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020878:	b085      	sub	sp, #20
 802087a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802087e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8020880:	9203      	str	r2, [sp, #12]
 8020882:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020886:	6870      	ldr	r0, [r6, #4]
 8020888:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802088a:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 802088e:	686f      	ldr	r7, [r5, #4]
 8020890:	9101      	str	r1, [sp, #4]
 8020892:	fb00 2404 	mla	r4, r0, r4, r2
 8020896:	6832      	ldr	r2, [r6, #0]
 8020898:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802089c:	682a      	ldr	r2, [r5, #0]
 802089e:	9202      	str	r2, [sp, #8]
 80208a0:	3704      	adds	r7, #4
 80208a2:	9a01      	ldr	r2, [sp, #4]
 80208a4:	2a00      	cmp	r2, #0
 80208a6:	dc03      	bgt.n	80208b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80208a8:	9a03      	ldr	r2, [sp, #12]
 80208aa:	2a00      	cmp	r2, #0
 80208ac:	f340 80cc 	ble.w	8020a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80208b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80208b6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80208ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	dd0d      	ble.n	80208e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80208c8:	1406      	asrs	r6, r0, #16
 80208ca:	d405      	bmi.n	80208d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80208cc:	454e      	cmp	r6, r9
 80208ce:	da03      	bge.n	80208d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80208d0:	1416      	asrs	r6, r2, #16
 80208d2:	d401      	bmi.n	80208d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80208d4:	4546      	cmp	r6, r8
 80208d6:	db06      	blt.n	80208e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80208d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80208da:	4460      	add	r0, ip
 80208dc:	4432      	add	r2, r6
 80208de:	3b01      	subs	r3, #1
 80208e0:	3402      	adds	r4, #2
 80208e2:	e7ef      	b.n	80208c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80208e4:	d00f      	beq.n	8020906 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80208e6:	1e5e      	subs	r6, r3, #1
 80208e8:	fb0c 0e06 	mla	lr, ip, r6, r0
 80208ec:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80208f0:	d543      	bpl.n	802097a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80208f2:	4698      	mov	r8, r3
 80208f4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80208f8:	f1b8 0f00 	cmp.w	r8, #0
 80208fc:	dc71      	bgt.n	80209e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80208fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020902:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020906:	9b01      	ldr	r3, [sp, #4]
 8020908:	2b00      	cmp	r3, #0
 802090a:	f340 809d 	ble.w	8020a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802090e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020912:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020916:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802091a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802091c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020920:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020924:	eeb0 6a62 	vmov.f32	s12, s5
 8020928:	ee61 7a27 	vmul.f32	s15, s2, s15
 802092c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020930:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020934:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020938:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802093c:	eeb0 6a43 	vmov.f32	s12, s6
 8020940:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020944:	ee12 2a90 	vmov	r2, s5
 8020948:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802094c:	fb92 fcf3 	sdiv	ip, r2, r3
 8020950:	ee13 2a10 	vmov	r2, s6
 8020954:	fb92 f3f3 	sdiv	r3, r2, r3
 8020958:	9312      	str	r3, [sp, #72]	; 0x48
 802095a:	9b01      	ldr	r3, [sp, #4]
 802095c:	9a03      	ldr	r2, [sp, #12]
 802095e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020962:	3b01      	subs	r3, #1
 8020964:	9301      	str	r3, [sp, #4]
 8020966:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802096a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802096c:	eeb0 3a67 	vmov.f32	s6, s15
 8020970:	bf08      	it	eq
 8020972:	4613      	moveq	r3, r2
 8020974:	eef0 2a47 	vmov.f32	s5, s14
 8020978:	e793      	b.n	80208a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802097a:	45ce      	cmp	lr, r9
 802097c:	dab9      	bge.n	80208f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802097e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020980:	fb01 2606 	mla	r6, r1, r6, r2
 8020984:	1436      	asrs	r6, r6, #16
 8020986:	d4b4      	bmi.n	80208f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020988:	4546      	cmp	r6, r8
 802098a:	dab2      	bge.n	80208f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802098c:	4698      	mov	r8, r3
 802098e:	46a2      	mov	sl, r4
 8020990:	f1b8 0f00 	cmp.w	r8, #0
 8020994:	ddb3      	ble.n	80208fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020996:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802099a:	9902      	ldr	r1, [sp, #8]
 802099c:	1416      	asrs	r6, r2, #16
 802099e:	fb09 1606 	mla	r6, r9, r6, r1
 80209a2:	ea4f 4e20 	mov.w	lr, r0, asr #16
 80209a6:	492a      	ldr	r1, [pc, #168]	; (8020a50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 80209a8:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80209ac:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80209b0:	eb07 0b0e 	add.w	fp, r7, lr
 80209b4:	4460      	add	r0, ip
 80209b6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80209ba:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80209be:	00f6      	lsls	r6, r6, #3
 80209c0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 80209c4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80209c8:	ea49 0606 	orr.w	r6, r9, r6
 80209cc:	f817 900e 	ldrb.w	r9, [r7, lr]
 80209d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80209d2:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 80209d6:	f82a 6b02 	strh.w	r6, [sl], #2
 80209da:	440a      	add	r2, r1
 80209dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80209e0:	e7d6      	b.n	8020990 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80209e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80209e6:	d429      	bmi.n	8020a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80209e8:	68ae      	ldr	r6, [r5, #8]
 80209ea:	454e      	cmp	r6, r9
 80209ec:	dd26      	ble.n	8020a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80209ee:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80209f2:	d423      	bmi.n	8020a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80209f4:	68e9      	ldr	r1, [r5, #12]
 80209f6:	4559      	cmp	r1, fp
 80209f8:	dd20      	ble.n	8020a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80209fa:	9902      	ldr	r1, [sp, #8]
 80209fc:	fa0f fe86 	sxth.w	lr, r6
 8020a00:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8020a04:	f06f 0101 	mvn.w	r1, #1
 8020a08:	f81e e009 	ldrb.w	lr, [lr, r9]
 8020a0c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020a10:	eb07 060e 	add.w	r6, r7, lr
 8020a14:	fb01 f908 	mul.w	r9, r1, r8
 8020a18:	f896 b002 	ldrb.w	fp, [r6, #2]
 8020a1c:	7876      	ldrb	r6, [r6, #1]
 8020a1e:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8020a22:	00f6      	lsls	r6, r6, #3
 8020a24:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8020a28:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020a2c:	ea4b 0606 	orr.w	r6, fp, r6
 8020a30:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8020a34:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8020a38:	f82a 6009 	strh.w	r6, [sl, r9]
 8020a3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a3e:	4460      	add	r0, ip
 8020a40:	440a      	add	r2, r1
 8020a42:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a46:	e757      	b.n	80208f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020a48:	b005      	add	sp, #20
 8020a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a4e:	bf00      	nop
 8020a50:	fffff800 	.word	0xfffff800

08020a54 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a58:	b087      	sub	sp, #28
 8020a5a:	468b      	mov	fp, r1
 8020a5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a5e:	9204      	str	r2, [sp, #16]
 8020a60:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020a64:	9205      	str	r2, [sp, #20]
 8020a66:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020a6a:	6841      	ldr	r1, [r0, #4]
 8020a6c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8020a70:	fb01 2404 	mla	r4, r1, r4, r2
 8020a74:	6802      	ldr	r2, [r0, #0]
 8020a76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020a7a:	f8dc 2000 	ldr.w	r2, [ip]
 8020a7e:	9201      	str	r2, [sp, #4]
 8020a80:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020a84:	3204      	adds	r2, #4
 8020a86:	9202      	str	r2, [sp, #8]
 8020a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a8c:	f1bb 0f00 	cmp.w	fp, #0
 8020a90:	dc03      	bgt.n	8020a9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8020a92:	9a04      	ldr	r2, [sp, #16]
 8020a94:	2a00      	cmp	r2, #0
 8020a96:	f340 8138 	ble.w	8020d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020a9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a9c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8020aa0:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8020aa4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020aa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020aaa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020aae:	2b00      	cmp	r3, #0
 8020ab0:	dd0e      	ble.n	8020ad0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020ab2:	1402      	asrs	r2, r0, #16
 8020ab4:	d405      	bmi.n	8020ac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ab6:	42ba      	cmp	r2, r7
 8020ab8:	da03      	bge.n	8020ac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020aba:	140a      	asrs	r2, r1, #16
 8020abc:	d401      	bmi.n	8020ac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020abe:	42b2      	cmp	r2, r6
 8020ac0:	db07      	blt.n	8020ad2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020ac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ac4:	4410      	add	r0, r2
 8020ac6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020ac8:	3b01      	subs	r3, #1
 8020aca:	4411      	add	r1, r2
 8020acc:	3402      	adds	r4, #2
 8020ace:	e7ee      	b.n	8020aae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020ad0:	d019      	beq.n	8020b06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020ad2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020ad4:	1e5a      	subs	r2, r3, #1
 8020ad6:	fb05 0502 	mla	r5, r5, r2, r0
 8020ada:	142d      	asrs	r5, r5, #16
 8020adc:	d409      	bmi.n	8020af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020ade:	42bd      	cmp	r5, r7
 8020ae0:	da07      	bge.n	8020af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020ae2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020ae4:	fb05 1202 	mla	r2, r5, r2, r1
 8020ae8:	1412      	asrs	r2, r2, #16
 8020aea:	d402      	bmi.n	8020af2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020aec:	42b2      	cmp	r2, r6
 8020aee:	f2c0 80ac 	blt.w	8020c4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8020af2:	f04f 0e00 	mov.w	lr, #0
 8020af6:	eb03 020e 	add.w	r2, r3, lr
 8020afa:	2a00      	cmp	r2, #0
 8020afc:	dc3e      	bgt.n	8020b7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020afe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020b06:	f1bb 0f00 	cmp.w	fp, #0
 8020b0a:	f340 80fe 	ble.w	8020d0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020b0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020b12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020b16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b1c:	f1bb 0b01 	subs.w	fp, fp, #1
 8020b20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020b24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b28:	eeb0 6a62 	vmov.f32	s12, s5
 8020b2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b38:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020b3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b40:	eeb0 6a43 	vmov.f32	s12, s6
 8020b44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b48:	ee12 2a90 	vmov	r2, s5
 8020b4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b54:	ee13 2a10 	vmov	r2, s6
 8020b58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020b5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b60:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b64:	9a04      	ldr	r2, [sp, #16]
 8020b66:	9314      	str	r3, [sp, #80]	; 0x50
 8020b68:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b6e:	eeb0 3a67 	vmov.f32	s6, s15
 8020b72:	bf08      	it	eq
 8020b74:	4613      	moveq	r3, r2
 8020b76:	eef0 2a47 	vmov.f32	s5, s14
 8020b7a:	e787      	b.n	8020a8c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020b7c:	1406      	asrs	r6, r0, #16
 8020b7e:	d45d      	bmi.n	8020c3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020b80:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8020b84:	42b5      	cmp	r5, r6
 8020b86:	dd59      	ble.n	8020c3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020b88:	140f      	asrs	r7, r1, #16
 8020b8a:	d457      	bmi.n	8020c3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020b8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8020b90:	42ba      	cmp	r2, r7
 8020b92:	dd53      	ble.n	8020c3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020b94:	9a01      	ldr	r2, [sp, #4]
 8020b96:	b22d      	sxth	r5, r5
 8020b98:	fb07 2505 	mla	r5, r7, r5, r2
 8020b9c:	5daa      	ldrb	r2, [r5, r6]
 8020b9e:	9d02      	ldr	r5, [sp, #8]
 8020ba0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020ba4:	0e2e      	lsrs	r6, r5, #24
 8020ba6:	d049      	beq.n	8020c3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020ba8:	f06f 0201 	mvn.w	r2, #1
 8020bac:	fb02 f20e 	mul.w	r2, r2, lr
 8020bb0:	9203      	str	r2, [sp, #12]
 8020bb2:	f834 8002 	ldrh.w	r8, [r4, r2]
 8020bb6:	9a05      	ldr	r2, [sp, #20]
 8020bb8:	4356      	muls	r6, r2
 8020bba:	1c72      	adds	r2, r6, #1
 8020bbc:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020bc0:	1212      	asrs	r2, r2, #8
 8020bc2:	fa1f f982 	uxth.w	r9, r2
 8020bc6:	ea4f 2728 	mov.w	r7, r8, asr #8
 8020bca:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020bce:	43d2      	mvns	r2, r2
 8020bd0:	b2d2      	uxtb	r2, r2
 8020bd2:	fb16 f609 	smulbb	r6, r6, r9
 8020bd6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020bda:	fb07 6702 	mla	r7, r7, r2, r6
 8020bde:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020be2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020be6:	b2ed      	uxtb	r5, r5
 8020be8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020bec:	fa5f f888 	uxtb.w	r8, r8
 8020bf0:	fb15 f509 	smulbb	r5, r5, r9
 8020bf4:	fb08 5502 	mla	r5, r8, r2, r5
 8020bf8:	b2bf      	uxth	r7, r7
 8020bfa:	fb1a fa09 	smulbb	sl, sl, r9
 8020bfe:	b2ad      	uxth	r5, r5
 8020c00:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020c04:	fb06 a602 	mla	r6, r6, r2, sl
 8020c08:	1c7a      	adds	r2, r7, #1
 8020c0a:	f105 0a01 	add.w	sl, r5, #1
 8020c0e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020c12:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020c16:	b2b6      	uxth	r6, r6
 8020c18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020c1c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020c20:	ea4a 0707 	orr.w	r7, sl, r7
 8020c24:	f106 0a01 	add.w	sl, r6, #1
 8020c28:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020c2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020c30:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020c34:	9a03      	ldr	r2, [sp, #12]
 8020c36:	ea47 070a 	orr.w	r7, r7, sl
 8020c3a:	52a7      	strh	r7, [r4, r2]
 8020c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c3e:	4410      	add	r0, r2
 8020c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c42:	f10e 3eff 	add.w	lr, lr, #4294967295
 8020c46:	4411      	add	r1, r2
 8020c48:	e755      	b.n	8020af6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020c4a:	f04f 0800 	mov.w	r8, #0
 8020c4e:	eba3 0208 	sub.w	r2, r3, r8
 8020c52:	2a00      	cmp	r2, #0
 8020c54:	f77f af53 	ble.w	8020afe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8020c58:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8020c5c:	9f01      	ldr	r7, [sp, #4]
 8020c5e:	140a      	asrs	r2, r1, #16
 8020c60:	1405      	asrs	r5, r0, #16
 8020c62:	fb06 7202 	mla	r2, r6, r2, r7
 8020c66:	5d52      	ldrb	r2, [r2, r5]
 8020c68:	9d02      	ldr	r5, [sp, #8]
 8020c6a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8020c6e:	0e2e      	lsrs	r6, r5, #24
 8020c70:	d044      	beq.n	8020cfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8020c72:	9a05      	ldr	r2, [sp, #20]
 8020c74:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020c78:	4356      	muls	r6, r2
 8020c7a:	1c72      	adds	r2, r6, #1
 8020c7c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8020c80:	1212      	asrs	r2, r2, #8
 8020c82:	fa1f f982 	uxth.w	r9, r2
 8020c86:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020c8a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020c8e:	43d2      	mvns	r2, r2
 8020c90:	b2d2      	uxtb	r2, r2
 8020c92:	fb16 f609 	smulbb	r6, r6, r9
 8020c96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020c9a:	fb07 6702 	mla	r7, r7, r2, r6
 8020c9e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020ca2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020ca6:	b2ed      	uxtb	r5, r5
 8020ca8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020cac:	fa5f fe8e 	uxtb.w	lr, lr
 8020cb0:	fb15 f509 	smulbb	r5, r5, r9
 8020cb4:	fb0e 5502 	mla	r5, lr, r2, r5
 8020cb8:	b2bf      	uxth	r7, r7
 8020cba:	fb1a fa09 	smulbb	sl, sl, r9
 8020cbe:	b2ad      	uxth	r5, r5
 8020cc0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020cc4:	fb06 a602 	mla	r6, r6, r2, sl
 8020cc8:	1c7a      	adds	r2, r7, #1
 8020cca:	f105 0a01 	add.w	sl, r5, #1
 8020cce:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020cd2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020cd6:	b2b6      	uxth	r6, r6
 8020cd8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020cdc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020ce0:	ea4a 0707 	orr.w	r7, sl, r7
 8020ce4:	f106 0a01 	add.w	sl, r6, #1
 8020ce8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020cec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020cf0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020cf4:	ea47 070a 	orr.w	r7, r7, sl
 8020cf8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020cfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020cfe:	4410      	add	r0, r2
 8020d00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d02:	f108 0801 	add.w	r8, r8, #1
 8020d06:	4411      	add	r1, r2
 8020d08:	e7a1      	b.n	8020c4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020d0a:	b007      	add	sp, #28
 8020d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d14:	b085      	sub	sp, #20
 8020d16:	468b      	mov	fp, r1
 8020d18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020d1a:	9203      	str	r2, [sp, #12]
 8020d1c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020d20:	6841      	ldr	r1, [r0, #4]
 8020d22:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020d26:	fb01 2404 	mla	r4, r1, r4, r2
 8020d2a:	6802      	ldr	r2, [r0, #0]
 8020d2c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020d30:	f8de 2000 	ldr.w	r2, [lr]
 8020d34:	9200      	str	r2, [sp, #0]
 8020d36:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020d3a:	3204      	adds	r2, #4
 8020d3c:	9201      	str	r2, [sp, #4]
 8020d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d42:	f1bb 0f00 	cmp.w	fp, #0
 8020d46:	dc03      	bgt.n	8020d50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020d48:	9a03      	ldr	r2, [sp, #12]
 8020d4a:	2a00      	cmp	r2, #0
 8020d4c:	f340 8153 	ble.w	8020ff6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020d50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d52:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020d56:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020d5a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	dd0e      	ble.n	8020d86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020d68:	1408      	asrs	r0, r1, #16
 8020d6a:	d405      	bmi.n	8020d78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d6c:	42b8      	cmp	r0, r7
 8020d6e:	da03      	bge.n	8020d78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d70:	1410      	asrs	r0, r2, #16
 8020d72:	d401      	bmi.n	8020d78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020d74:	42b0      	cmp	r0, r6
 8020d76:	db07      	blt.n	8020d88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020d78:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020d7a:	4401      	add	r1, r0
 8020d7c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020d7e:	3b01      	subs	r3, #1
 8020d80:	4402      	add	r2, r0
 8020d82:	3402      	adds	r4, #2
 8020d84:	e7ee      	b.n	8020d64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020d86:	d017      	beq.n	8020db8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020d88:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020d8a:	1e58      	subs	r0, r3, #1
 8020d8c:	fb05 1500 	mla	r5, r5, r0, r1
 8020d90:	142d      	asrs	r5, r5, #16
 8020d92:	d409      	bmi.n	8020da8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020d94:	42bd      	cmp	r5, r7
 8020d96:	da07      	bge.n	8020da8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020d98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020d9a:	fb05 2000 	mla	r0, r5, r0, r2
 8020d9e:	1400      	asrs	r0, r0, #16
 8020da0:	d402      	bmi.n	8020da8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020da2:	42b0      	cmp	r0, r6
 8020da4:	f2c0 80bc 	blt.w	8020f20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8020da8:	2600      	movs	r6, #0
 8020daa:	1998      	adds	r0, r3, r6
 8020dac:	2800      	cmp	r0, #0
 8020dae:	dc3e      	bgt.n	8020e2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020db0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020db4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020db8:	f1bb 0f00 	cmp.w	fp, #0
 8020dbc:	f340 811b 	ble.w	8020ff6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8020dc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020dc4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020dc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020dce:	f1bb 0b01 	subs.w	fp, fp, #1
 8020dd2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020dd6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020dda:	eeb0 6a62 	vmov.f32	s12, s5
 8020dde:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020de2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020de6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dea:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020dee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020df2:	eeb0 6a43 	vmov.f32	s12, s6
 8020df6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020dfa:	ee12 2a90 	vmov	r2, s5
 8020dfe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e06:	ee13 2a10 	vmov	r2, s6
 8020e0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020e0e:	9311      	str	r3, [sp, #68]	; 0x44
 8020e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e16:	9a03      	ldr	r2, [sp, #12]
 8020e18:	9312      	str	r3, [sp, #72]	; 0x48
 8020e1a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e20:	eeb0 3a67 	vmov.f32	s6, s15
 8020e24:	bf08      	it	eq
 8020e26:	4613      	moveq	r3, r2
 8020e28:	eef0 2a47 	vmov.f32	s5, s14
 8020e2c:	e789      	b.n	8020d42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020e2e:	140f      	asrs	r7, r1, #16
 8020e30:	d426      	bmi.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e32:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020e36:	42bd      	cmp	r5, r7
 8020e38:	dd22      	ble.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e3a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020e3e:	d41f      	bmi.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e40:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020e44:	4560      	cmp	r0, ip
 8020e46:	dd1b      	ble.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e48:	9800      	ldr	r0, [sp, #0]
 8020e4a:	b22d      	sxth	r5, r5
 8020e4c:	fb0c 0505 	mla	r5, ip, r5, r0
 8020e50:	5de8      	ldrb	r0, [r5, r7]
 8020e52:	9d01      	ldr	r5, [sp, #4]
 8020e54:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020e58:	0e07      	lsrs	r7, r0, #24
 8020e5a:	2fff      	cmp	r7, #255	; 0xff
 8020e5c:	d116      	bne.n	8020e8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020e5e:	f06f 0501 	mvn.w	r5, #1
 8020e62:	fb05 f706 	mul.w	r7, r5, r6
 8020e66:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020e6a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020e6e:	0945      	lsrs	r5, r0, #5
 8020e70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e74:	ea4c 0505 	orr.w	r5, ip, r5
 8020e78:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020e7c:	4305      	orrs	r5, r0
 8020e7e:	53e5      	strh	r5, [r4, r7]
 8020e80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e82:	4401      	add	r1, r0
 8020e84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e86:	3e01      	subs	r6, #1
 8020e88:	4402      	add	r2, r0
 8020e8a:	e78e      	b.n	8020daa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020e8c:	b2fd      	uxtb	r5, r7
 8020e8e:	2f00      	cmp	r7, #0
 8020e90:	d0f6      	beq.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e92:	f06f 0701 	mvn.w	r7, #1
 8020e96:	4377      	muls	r7, r6
 8020e98:	fa1f f985 	uxth.w	r9, r5
 8020e9c:	f834 8007 	ldrh.w	r8, [r4, r7]
 8020ea0:	9702      	str	r7, [sp, #8]
 8020ea2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020ea6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020eaa:	43ed      	mvns	r5, r5
 8020eac:	b2ed      	uxtb	r5, r5
 8020eae:	fb17 f709 	smulbb	r7, r7, r9
 8020eb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020eb6:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020eba:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020ebe:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8020ec2:	b2c0      	uxtb	r0, r0
 8020ec4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020ec8:	fa5f f888 	uxtb.w	r8, r8
 8020ecc:	fb10 f009 	smulbb	r0, r0, r9
 8020ed0:	fb08 0005 	mla	r0, r8, r5, r0
 8020ed4:	b280      	uxth	r0, r0
 8020ed6:	fa1f fc8c 	uxth.w	ip, ip
 8020eda:	fb1a fa09 	smulbb	sl, sl, r9
 8020ede:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020ee2:	fb07 a705 	mla	r7, r7, r5, sl
 8020ee6:	f100 0a01 	add.w	sl, r0, #1
 8020eea:	f10c 0501 	add.w	r5, ip, #1
 8020eee:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020ef2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020ef6:	b2bf      	uxth	r7, r7
 8020ef8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020efc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020f00:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020f04:	f107 0a01 	add.w	sl, r7, #1
 8020f08:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020f0c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f10:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f14:	9802      	ldr	r0, [sp, #8]
 8020f16:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020f1a:	f824 c000 	strh.w	ip, [r4, r0]
 8020f1e:	e7af      	b.n	8020e80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020f20:	f04f 0800 	mov.w	r8, #0
 8020f24:	eba3 0008 	sub.w	r0, r3, r8
 8020f28:	2800      	cmp	r0, #0
 8020f2a:	f77f af41 	ble.w	8020db0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020f2e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020f32:	9f00      	ldr	r7, [sp, #0]
 8020f34:	1410      	asrs	r0, r2, #16
 8020f36:	140d      	asrs	r5, r1, #16
 8020f38:	fb06 7000 	mla	r0, r6, r0, r7
 8020f3c:	5d40      	ldrb	r0, [r0, r5]
 8020f3e:	9d01      	ldr	r5, [sp, #4]
 8020f40:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020f44:	0e2e      	lsrs	r6, r5, #24
 8020f46:	2eff      	cmp	r6, #255	; 0xff
 8020f48:	d112      	bne.n	8020f70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8020f4a:	482c      	ldr	r0, [pc, #176]	; (8020ffc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8020f4c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020f50:	0968      	lsrs	r0, r5, #5
 8020f52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f56:	4330      	orrs	r0, r6
 8020f58:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020f5c:	4328      	orrs	r0, r5
 8020f5e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020f62:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f64:	4401      	add	r1, r0
 8020f66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020f68:	f108 0801 	add.w	r8, r8, #1
 8020f6c:	4402      	add	r2, r0
 8020f6e:	e7d9      	b.n	8020f24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020f70:	b2f0      	uxtb	r0, r6
 8020f72:	2e00      	cmp	r6, #0
 8020f74:	d0f5      	beq.n	8020f62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020f76:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020f7a:	fa1f f980 	uxth.w	r9, r0
 8020f7e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020f82:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020f86:	43c0      	mvns	r0, r0
 8020f88:	b2c0      	uxtb	r0, r0
 8020f8a:	fb16 f609 	smulbb	r6, r6, r9
 8020f8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020f92:	fb07 6700 	mla	r7, r7, r0, r6
 8020f96:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020f9a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020f9e:	b2ed      	uxtb	r5, r5
 8020fa0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020fa4:	fa5f fc8c 	uxtb.w	ip, ip
 8020fa8:	fb15 f509 	smulbb	r5, r5, r9
 8020fac:	fb0c 5500 	mla	r5, ip, r0, r5
 8020fb0:	b2bf      	uxth	r7, r7
 8020fb2:	fb1a fa09 	smulbb	sl, sl, r9
 8020fb6:	b2ad      	uxth	r5, r5
 8020fb8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fbc:	fb06 a600 	mla	r6, r6, r0, sl
 8020fc0:	1c78      	adds	r0, r7, #1
 8020fc2:	f105 0a01 	add.w	sl, r5, #1
 8020fc6:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020fca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020fce:	b2b6      	uxth	r6, r6
 8020fd0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020fd4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020fd8:	ea4a 0707 	orr.w	r7, sl, r7
 8020fdc:	f106 0a01 	add.w	sl, r6, #1
 8020fe0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020fe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020fe8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020fec:	ea47 070a 	orr.w	r7, r7, sl
 8020ff0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020ff4:	e7b5      	b.n	8020f62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020ff6:	b005      	add	sp, #20
 8020ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ffc:	fffff800 	.word	0xfffff800

08021000 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021004:	b087      	sub	sp, #28
 8021006:	468b      	mov	fp, r1
 8021008:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802100a:	9204      	str	r2, [sp, #16]
 802100c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021010:	9205      	str	r2, [sp, #20]
 8021012:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8021016:	6861      	ldr	r1, [r4, #4]
 8021018:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 802101c:	fb01 2000 	mla	r0, r1, r0, r2
 8021020:	6822      	ldr	r2, [r4, #0]
 8021022:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021026:	f8de 2000 	ldr.w	r2, [lr]
 802102a:	9201      	str	r2, [sp, #4]
 802102c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8021030:	9202      	str	r2, [sp, #8]
 8021032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021036:	f1bb 0f00 	cmp.w	fp, #0
 802103a:	dc03      	bgt.n	8021044 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802103c:	9a04      	ldr	r2, [sp, #16]
 802103e:	2a00      	cmp	r2, #0
 8021040:	f340 8142 	ble.w	80212c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8021044:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021046:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802104a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 802104e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021054:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021058:	2b00      	cmp	r3, #0
 802105a:	dd0e      	ble.n	802107a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802105c:	140c      	asrs	r4, r1, #16
 802105e:	d405      	bmi.n	802106c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021060:	42bc      	cmp	r4, r7
 8021062:	da03      	bge.n	802106c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021064:	1414      	asrs	r4, r2, #16
 8021066:	d401      	bmi.n	802106c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8021068:	42b4      	cmp	r4, r6
 802106a:	db07      	blt.n	802107c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802106c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802106e:	4421      	add	r1, r4
 8021070:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021072:	3b01      	subs	r3, #1
 8021074:	4422      	add	r2, r4
 8021076:	3002      	adds	r0, #2
 8021078:	e7ee      	b.n	8021058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802107a:	d019      	beq.n	80210b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802107c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802107e:	1e5c      	subs	r4, r3, #1
 8021080:	fb05 1504 	mla	r5, r5, r4, r1
 8021084:	142d      	asrs	r5, r5, #16
 8021086:	d409      	bmi.n	802109c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021088:	42bd      	cmp	r5, r7
 802108a:	da07      	bge.n	802109c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802108c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802108e:	fb05 2404 	mla	r4, r5, r4, r2
 8021092:	1424      	asrs	r4, r4, #16
 8021094:	d402      	bmi.n	802109c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8021096:	42b4      	cmp	r4, r6
 8021098:	f2c0 80b1 	blt.w	80211fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802109c:	f04f 0800 	mov.w	r8, #0
 80210a0:	eb03 0408 	add.w	r4, r3, r8
 80210a4:	2c00      	cmp	r4, #0
 80210a6:	dc3e      	bgt.n	8021126 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80210a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80210ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210b0:	f1bb 0f00 	cmp.w	fp, #0
 80210b4:	f340 8108 	ble.w	80212c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80210b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80210bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80210c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80210c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80210ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80210ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80210d2:	eeb0 6a62 	vmov.f32	s12, s5
 80210d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80210da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80210de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80210e2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80210e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80210ea:	eeb0 6a43 	vmov.f32	s12, s6
 80210ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80210f2:	ee12 2a90 	vmov	r2, s5
 80210f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80210fe:	ee13 2a10 	vmov	r2, s6
 8021102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021106:	9313      	str	r3, [sp, #76]	; 0x4c
 8021108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802110a:	fb92 f3f3 	sdiv	r3, r2, r3
 802110e:	9a04      	ldr	r2, [sp, #16]
 8021110:	9314      	str	r3, [sp, #80]	; 0x50
 8021112:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021116:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021118:	eeb0 3a67 	vmov.f32	s6, s15
 802111c:	bf08      	it	eq
 802111e:	4613      	moveq	r3, r2
 8021120:	eef0 2a47 	vmov.f32	s5, s14
 8021124:	e787      	b.n	8021036 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021126:	140e      	asrs	r6, r1, #16
 8021128:	d462      	bmi.n	80211f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802112a:	f8de 5008 	ldr.w	r5, [lr, #8]
 802112e:	42b5      	cmp	r5, r6
 8021130:	dd5e      	ble.n	80211f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021132:	1417      	asrs	r7, r2, #16
 8021134:	d45c      	bmi.n	80211f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021136:	f8de 400c 	ldr.w	r4, [lr, #12]
 802113a:	42bc      	cmp	r4, r7
 802113c:	dd58      	ble.n	80211f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802113e:	b22d      	sxth	r5, r5
 8021140:	fb07 6505 	mla	r5, r7, r5, r6
 8021144:	9c02      	ldr	r4, [sp, #8]
 8021146:	5d66      	ldrb	r6, [r4, r5]
 8021148:	2e00      	cmp	r6, #0
 802114a:	d051      	beq.n	80211f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802114c:	9c01      	ldr	r4, [sp, #4]
 802114e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8021152:	f06f 0401 	mvn.w	r4, #1
 8021156:	fb04 f408 	mul.w	r4, r4, r8
 802115a:	9403      	str	r4, [sp, #12]
 802115c:	5b05      	ldrh	r5, [r0, r4]
 802115e:	9c05      	ldr	r4, [sp, #20]
 8021160:	4366      	muls	r6, r4
 8021162:	1c74      	adds	r4, r6, #1
 8021164:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8021168:	1224      	asrs	r4, r4, #8
 802116a:	b2a7      	uxth	r7, r4
 802116c:	122e      	asrs	r6, r5, #8
 802116e:	43e4      	mvns	r4, r4
 8021170:	b2e4      	uxtb	r4, r4
 8021172:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8021176:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802117a:	fb16 f604 	smulbb	r6, r6, r4
 802117e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8021182:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021186:	00ed      	lsls	r5, r5, #3
 8021188:	fb0c 6c07 	mla	ip, ip, r7, r6
 802118c:	b2ed      	uxtb	r5, r5
 802118e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8021192:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8021196:	fb15 f504 	smulbb	r5, r5, r4
 802119a:	fa5f f989 	uxtb.w	r9, r9
 802119e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80211a2:	fb09 5507 	mla	r5, r9, r7, r5
 80211a6:	fb1a fa04 	smulbb	sl, sl, r4
 80211aa:	fa1f fc8c 	uxth.w	ip, ip
 80211ae:	b2ad      	uxth	r5, r5
 80211b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80211b4:	fb06 a607 	mla	r6, r6, r7, sl
 80211b8:	f10c 0401 	add.w	r4, ip, #1
 80211bc:	f105 0a01 	add.w	sl, r5, #1
 80211c0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80211c4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80211c8:	b2b6      	uxth	r6, r6
 80211ca:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80211ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80211d2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80211d6:	f106 0a01 	add.w	sl, r6, #1
 80211da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80211de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80211e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80211e6:	9c03      	ldr	r4, [sp, #12]
 80211e8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80211ec:	f820 c004 	strh.w	ip, [r0, r4]
 80211f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80211f2:	4421      	add	r1, r4
 80211f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80211f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80211fa:	4422      	add	r2, r4
 80211fc:	e750      	b.n	80210a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80211fe:	f04f 0900 	mov.w	r9, #0
 8021202:	eba3 0409 	sub.w	r4, r3, r9
 8021206:	2c00      	cmp	r4, #0
 8021208:	f77f af4e 	ble.w	80210a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802120c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8021210:	140d      	asrs	r5, r1, #16
 8021212:	1414      	asrs	r4, r2, #16
 8021214:	fb06 5404 	mla	r4, r6, r4, r5
 8021218:	9d02      	ldr	r5, [sp, #8]
 802121a:	5d2e      	ldrb	r6, [r5, r4]
 802121c:	2e00      	cmp	r6, #0
 802121e:	d04c      	beq.n	80212ba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8021220:	9d01      	ldr	r5, [sp, #4]
 8021222:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8021226:	9c05      	ldr	r4, [sp, #20]
 8021228:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802122c:	4366      	muls	r6, r4
 802122e:	1c74      	adds	r4, r6, #1
 8021230:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8021234:	1224      	asrs	r4, r4, #8
 8021236:	b2a7      	uxth	r7, r4
 8021238:	122e      	asrs	r6, r5, #8
 802123a:	43e4      	mvns	r4, r4
 802123c:	b2e4      	uxtb	r4, r4
 802123e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8021242:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021246:	fb16 f604 	smulbb	r6, r6, r4
 802124a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802124e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021252:	00ed      	lsls	r5, r5, #3
 8021254:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021258:	b2ed      	uxtb	r5, r5
 802125a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802125e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021262:	fb15 f504 	smulbb	r5, r5, r4
 8021266:	fa5f f888 	uxtb.w	r8, r8
 802126a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802126e:	fb08 5507 	mla	r5, r8, r7, r5
 8021272:	fb1a fa04 	smulbb	sl, sl, r4
 8021276:	fa1f fc8c 	uxth.w	ip, ip
 802127a:	b2ad      	uxth	r5, r5
 802127c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021280:	fb06 a607 	mla	r6, r6, r7, sl
 8021284:	f10c 0401 	add.w	r4, ip, #1
 8021288:	f105 0a01 	add.w	sl, r5, #1
 802128c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8021290:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021294:	b2b6      	uxth	r6, r6
 8021296:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802129a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802129e:	ea4a 0c0c 	orr.w	ip, sl, ip
 80212a2:	f106 0a01 	add.w	sl, r6, #1
 80212a6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80212aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80212ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80212b2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80212b6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80212ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212bc:	4421      	add	r1, r4
 80212be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80212c0:	f109 0901 	add.w	r9, r9, #1
 80212c4:	4422      	add	r2, r4
 80212c6:	e79c      	b.n	8021202 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 80212c8:	b007      	add	sp, #28
 80212ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080212ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80212ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d2:	b085      	sub	sp, #20
 80212d4:	468b      	mov	fp, r1
 80212d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80212d8:	9203      	str	r2, [sp, #12]
 80212da:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 80212de:	6861      	ldr	r1, [r4, #4]
 80212e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80212e4:	fb01 2000 	mla	r0, r1, r0, r2
 80212e8:	6822      	ldr	r2, [r4, #0]
 80212ea:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80212ee:	f8d8 2000 	ldr.w	r2, [r8]
 80212f2:	9200      	str	r2, [sp, #0]
 80212f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80212f8:	9201      	str	r2, [sp, #4]
 80212fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80212fe:	f1bb 0f00 	cmp.w	fp, #0
 8021302:	dc03      	bgt.n	802130c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021304:	9a03      	ldr	r2, [sp, #12]
 8021306:	2a00      	cmp	r2, #0
 8021308:	f340 8146 	ble.w	8021598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802130c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802130e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8021312:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021316:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802131a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802131c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021320:	2b00      	cmp	r3, #0
 8021322:	dd0e      	ble.n	8021342 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021324:	140c      	asrs	r4, r1, #16
 8021326:	d405      	bmi.n	8021334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021328:	42bc      	cmp	r4, r7
 802132a:	da03      	bge.n	8021334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802132c:	1414      	asrs	r4, r2, #16
 802132e:	d401      	bmi.n	8021334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021330:	42b4      	cmp	r4, r6
 8021332:	db07      	blt.n	8021344 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021334:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021336:	4421      	add	r1, r4
 8021338:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802133a:	3b01      	subs	r3, #1
 802133c:	4422      	add	r2, r4
 802133e:	3002      	adds	r0, #2
 8021340:	e7ee      	b.n	8021320 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021342:	d017      	beq.n	8021374 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021344:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021346:	1e5c      	subs	r4, r3, #1
 8021348:	fb05 1504 	mla	r5, r5, r4, r1
 802134c:	142d      	asrs	r5, r5, #16
 802134e:	d409      	bmi.n	8021364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021350:	42bd      	cmp	r5, r7
 8021352:	da07      	bge.n	8021364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021354:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021356:	fb05 2404 	mla	r4, r5, r4, r2
 802135a:	1424      	asrs	r4, r4, #16
 802135c:	d402      	bmi.n	8021364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802135e:	42b4      	cmp	r4, r6
 8021360:	f2c0 80b3 	blt.w	80214ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021364:	2600      	movs	r6, #0
 8021366:	199c      	adds	r4, r3, r6
 8021368:	2c00      	cmp	r4, #0
 802136a:	dc3e      	bgt.n	80213ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802136c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021370:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021374:	f1bb 0f00 	cmp.w	fp, #0
 8021378:	f340 810e 	ble.w	8021598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802137c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021380:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021384:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802138a:	f1bb 0b01 	subs.w	fp, fp, #1
 802138e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021392:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021396:	eeb0 6a62 	vmov.f32	s12, s5
 802139a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802139e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80213a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80213a6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80213aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80213ae:	eeb0 6a43 	vmov.f32	s12, s6
 80213b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80213b6:	ee12 2a90 	vmov	r2, s5
 80213ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80213be:	fb92 f3f3 	sdiv	r3, r2, r3
 80213c2:	ee13 2a10 	vmov	r2, s6
 80213c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80213ca:	9311      	str	r3, [sp, #68]	; 0x44
 80213cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80213d2:	9a03      	ldr	r2, [sp, #12]
 80213d4:	9312      	str	r3, [sp, #72]	; 0x48
 80213d6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80213da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80213dc:	eeb0 3a67 	vmov.f32	s6, s15
 80213e0:	bf08      	it	eq
 80213e2:	4613      	moveq	r3, r2
 80213e4:	eef0 2a47 	vmov.f32	s5, s14
 80213e8:	e789      	b.n	80212fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80213ea:	140f      	asrs	r7, r1, #16
 80213ec:	d418      	bmi.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80213f2:	42bd      	cmp	r5, r7
 80213f4:	dd14      	ble.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213f6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80213fa:	d411      	bmi.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80213fc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8021400:	4564      	cmp	r4, ip
 8021402:	dd0d      	ble.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021404:	b22d      	sxth	r5, r5
 8021406:	fb0c 7505 	mla	r5, ip, r5, r7
 802140a:	9c01      	ldr	r4, [sp, #4]
 802140c:	5d64      	ldrb	r4, [r4, r5]
 802140e:	2cff      	cmp	r4, #255	; 0xff
 8021410:	d10c      	bne.n	802142c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8021412:	9c00      	ldr	r4, [sp, #0]
 8021414:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8021418:	f06f 0401 	mvn.w	r4, #1
 802141c:	4374      	muls	r4, r6
 802141e:	5305      	strh	r5, [r0, r4]
 8021420:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021422:	4421      	add	r1, r4
 8021424:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021426:	3e01      	subs	r6, #1
 8021428:	4422      	add	r2, r4
 802142a:	e79c      	b.n	8021366 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802142c:	2c00      	cmp	r4, #0
 802142e:	d0f7      	beq.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8021430:	9f00      	ldr	r7, [sp, #0]
 8021432:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8021436:	f06f 0501 	mvn.w	r5, #1
 802143a:	4375      	muls	r5, r6
 802143c:	9502      	str	r5, [sp, #8]
 802143e:	5b45      	ldrh	r5, [r0, r5]
 8021440:	fa1f fc84 	uxth.w	ip, r4
 8021444:	122f      	asrs	r7, r5, #8
 8021446:	43e4      	mvns	r4, r4
 8021448:	b2e4      	uxtb	r4, r4
 802144a:	ea4f 2e29 	mov.w	lr, r9, asr #8
 802144e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021452:	fb17 f704 	smulbb	r7, r7, r4
 8021456:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802145a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802145e:	00ed      	lsls	r5, r5, #3
 8021460:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8021464:	b2ed      	uxtb	r5, r5
 8021466:	ea4f 07e9 	mov.w	r7, r9, asr #3
 802146a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802146e:	fb15 f504 	smulbb	r5, r5, r4
 8021472:	fa5f f989 	uxtb.w	r9, r9
 8021476:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802147a:	fb09 550c 	mla	r5, r9, ip, r5
 802147e:	fb1a fa04 	smulbb	sl, sl, r4
 8021482:	fa1f fe8e 	uxth.w	lr, lr
 8021486:	b2ad      	uxth	r5, r5
 8021488:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802148c:	fb07 a70c 	mla	r7, r7, ip, sl
 8021490:	f10e 0401 	add.w	r4, lr, #1
 8021494:	f105 0a01 	add.w	sl, r5, #1
 8021498:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 802149c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80214a0:	b2bf      	uxth	r7, r7
 80214a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80214a6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80214aa:	ea4a 0e0e 	orr.w	lr, sl, lr
 80214ae:	f107 0a01 	add.w	sl, r7, #1
 80214b2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80214b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80214ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80214be:	9c02      	ldr	r4, [sp, #8]
 80214c0:	ea4e 0e0a 	orr.w	lr, lr, sl
 80214c4:	f820 e004 	strh.w	lr, [r0, r4]
 80214c8:	e7aa      	b.n	8021420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80214ca:	f04f 0900 	mov.w	r9, #0
 80214ce:	eba3 0409 	sub.w	r4, r3, r9
 80214d2:	2c00      	cmp	r4, #0
 80214d4:	f77f af4a 	ble.w	802136c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80214d8:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80214dc:	1414      	asrs	r4, r2, #16
 80214de:	140d      	asrs	r5, r1, #16
 80214e0:	fb06 5504 	mla	r5, r6, r4, r5
 80214e4:	9c01      	ldr	r4, [sp, #4]
 80214e6:	5d64      	ldrb	r4, [r4, r5]
 80214e8:	2cff      	cmp	r4, #255	; 0xff
 80214ea:	d10b      	bne.n	8021504 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80214ec:	9c00      	ldr	r4, [sp, #0]
 80214ee:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80214f2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80214f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80214f8:	4421      	add	r1, r4
 80214fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80214fc:	f109 0901 	add.w	r9, r9, #1
 8021500:	4422      	add	r2, r4
 8021502:	e7e4      	b.n	80214ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021504:	2c00      	cmp	r4, #0
 8021506:	d0f6      	beq.n	80214f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021508:	9e00      	ldr	r6, [sp, #0]
 802150a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802150e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8021512:	b2a7      	uxth	r7, r4
 8021514:	122e      	asrs	r6, r5, #8
 8021516:	43e4      	mvns	r4, r4
 8021518:	b2e4      	uxtb	r4, r4
 802151a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802151e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021522:	fb16 f604 	smulbb	r6, r6, r4
 8021526:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802152a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802152e:	00ed      	lsls	r5, r5, #3
 8021530:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021534:	b2ed      	uxtb	r5, r5
 8021536:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802153a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802153e:	fb15 f504 	smulbb	r5, r5, r4
 8021542:	fa5f fe8e 	uxtb.w	lr, lr
 8021546:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 802154a:	fb0e 5507 	mla	r5, lr, r7, r5
 802154e:	fb1a fa04 	smulbb	sl, sl, r4
 8021552:	fa1f fc8c 	uxth.w	ip, ip
 8021556:	b2ad      	uxth	r5, r5
 8021558:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802155c:	fb06 a607 	mla	r6, r6, r7, sl
 8021560:	f10c 0401 	add.w	r4, ip, #1
 8021564:	f105 0a01 	add.w	sl, r5, #1
 8021568:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802156c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021570:	b2b6      	uxth	r6, r6
 8021572:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021576:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802157a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802157e:	f106 0a01 	add.w	sl, r6, #1
 8021582:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021586:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802158a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802158e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021592:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8021596:	e7ae      	b.n	80214f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8021598:	b005      	add	sp, #20
 802159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802159e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802159e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215a2:	b085      	sub	sp, #20
 80215a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80215a6:	9203      	str	r2, [sp, #12]
 80215a8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80215ac:	9201      	str	r2, [sp, #4]
 80215ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80215b2:	9100      	str	r1, [sp, #0]
 80215b4:	6841      	ldr	r1, [r0, #4]
 80215b6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80215ba:	fb01 2404 	mla	r4, r1, r4, r2
 80215be:	6802      	ldr	r2, [r0, #0]
 80215c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80215c4:	f8de 2000 	ldr.w	r2, [lr]
 80215c8:	9202      	str	r2, [sp, #8]
 80215ca:	9a01      	ldr	r2, [sp, #4]
 80215cc:	43d6      	mvns	r6, r2
 80215ce:	b2f6      	uxtb	r6, r6
 80215d0:	9a00      	ldr	r2, [sp, #0]
 80215d2:	2a00      	cmp	r2, #0
 80215d4:	dc03      	bgt.n	80215de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80215d6:	9a03      	ldr	r2, [sp, #12]
 80215d8:	2a00      	cmp	r2, #0
 80215da:	f340 8124 	ble.w	8021826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80215de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80215e0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80215e4:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80215e8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80215ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80215ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	dd0e      	ble.n	8021614 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80215f6:	1408      	asrs	r0, r1, #16
 80215f8:	d405      	bmi.n	8021606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80215fa:	4560      	cmp	r0, ip
 80215fc:	da03      	bge.n	8021606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80215fe:	1410      	asrs	r0, r2, #16
 8021600:	d401      	bmi.n	8021606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021602:	42b8      	cmp	r0, r7
 8021604:	db07      	blt.n	8021616 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021606:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021608:	4401      	add	r1, r0
 802160a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802160c:	3b01      	subs	r3, #1
 802160e:	4402      	add	r2, r0
 8021610:	3402      	adds	r4, #2
 8021612:	e7ee      	b.n	80215f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8021614:	d06e      	beq.n	80216f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021616:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021618:	1e58      	subs	r0, r3, #1
 802161a:	fb05 1500 	mla	r5, r5, r0, r1
 802161e:	142d      	asrs	r5, r5, #16
 8021620:	d45c      	bmi.n	80216dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021622:	4565      	cmp	r5, ip
 8021624:	da5a      	bge.n	80216dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021626:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021628:	fb05 2000 	mla	r0, r5, r0, r2
 802162c:	1400      	asrs	r0, r0, #16
 802162e:	d455      	bmi.n	80216dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021630:	42b8      	cmp	r0, r7
 8021632:	da53      	bge.n	80216dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021634:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8021638:	4699      	mov	r9, r3
 802163a:	46a2      	mov	sl, r4
 802163c:	f1b9 0f00 	cmp.w	r9, #0
 8021640:	dd54      	ble.n	80216ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021642:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021646:	140d      	asrs	r5, r1, #16
 8021648:	1410      	asrs	r0, r2, #16
 802164a:	fb07 5000 	mla	r0, r7, r0, r5
 802164e:	9d02      	ldr	r5, [sp, #8]
 8021650:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021654:	f8ba 5000 	ldrh.w	r5, [sl]
 8021658:	122f      	asrs	r7, r5, #8
 802165a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802165e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021662:	fb17 f706 	smulbb	r7, r7, r6
 8021666:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802166a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802166e:	00ed      	lsls	r5, r5, #3
 8021670:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8021674:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8021678:	10c7      	asrs	r7, r0, #3
 802167a:	b2ed      	uxtb	r5, r5
 802167c:	00c0      	lsls	r0, r0, #3
 802167e:	fb18 f806 	smulbb	r8, r8, r6
 8021682:	fb15 f506 	smulbb	r5, r5, r6
 8021686:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802168a:	b2c0      	uxtb	r0, r0
 802168c:	fa1f fc8c 	uxth.w	ip, ip
 8021690:	fb07 870b 	mla	r7, r7, fp, r8
 8021694:	fb00 500b 	mla	r0, r0, fp, r5
 8021698:	b280      	uxth	r0, r0
 802169a:	b2bf      	uxth	r7, r7
 802169c:	f10c 0501 	add.w	r5, ip, #1
 80216a0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80216a4:	f107 0801 	add.w	r8, r7, #1
 80216a8:	1c45      	adds	r5, r0, #1
 80216aa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80216ae:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 80216b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80216b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80216b8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80216bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80216c0:	ea45 0c0c 	orr.w	ip, r5, ip
 80216c4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80216c8:	4401      	add	r1, r0
 80216ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80216cc:	ea4c 0c08 	orr.w	ip, ip, r8
 80216d0:	f82a cb02 	strh.w	ip, [sl], #2
 80216d4:	4402      	add	r2, r0
 80216d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80216da:	e7af      	b.n	802163c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80216dc:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80216e0:	f04f 0800 	mov.w	r8, #0
 80216e4:	eb03 0008 	add.w	r0, r3, r8
 80216e8:	2800      	cmp	r0, #0
 80216ea:	dc41      	bgt.n	8021770 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80216ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80216f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80216f4:	9b00      	ldr	r3, [sp, #0]
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	f340 8095 	ble.w	8021826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80216fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021704:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802170a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802170e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021712:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021716:	eef0 6a62 	vmov.f32	s13, s5
 802171a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802171e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021722:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021726:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 802172a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802172e:	eef0 6a43 	vmov.f32	s13, s6
 8021732:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021736:	ee12 2a90 	vmov	r2, s5
 802173a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802173e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021742:	ee13 2a10 	vmov	r2, s6
 8021746:	9311      	str	r3, [sp, #68]	; 0x44
 8021748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802174a:	fb92 f3f3 	sdiv	r3, r2, r3
 802174e:	9312      	str	r3, [sp, #72]	; 0x48
 8021750:	9b00      	ldr	r3, [sp, #0]
 8021752:	9a03      	ldr	r2, [sp, #12]
 8021754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021758:	3b01      	subs	r3, #1
 802175a:	9300      	str	r3, [sp, #0]
 802175c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8021760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021762:	eeb0 3a67 	vmov.f32	s6, s15
 8021766:	bf08      	it	eq
 8021768:	4613      	moveq	r3, r2
 802176a:	eef0 2a47 	vmov.f32	s5, s14
 802176e:	e72f      	b.n	80215d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8021770:	140f      	asrs	r7, r1, #16
 8021772:	d451      	bmi.n	8021818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021774:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021778:	42bd      	cmp	r5, r7
 802177a:	dd4d      	ble.n	8021818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802177c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021780:	d44a      	bmi.n	8021818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021782:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021786:	4560      	cmp	r0, ip
 8021788:	dd46      	ble.n	8021818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802178a:	b22d      	sxth	r5, r5
 802178c:	fb0c 7505 	mla	r5, ip, r5, r7
 8021790:	9802      	ldr	r0, [sp, #8]
 8021792:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8021796:	f06f 0501 	mvn.w	r5, #1
 802179a:	fb05 fb08 	mul.w	fp, r5, r8
 802179e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80217a2:	f834 500b 	ldrh.w	r5, [r4, fp]
 80217a6:	122f      	asrs	r7, r5, #8
 80217a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80217ac:	fb17 f706 	smulbb	r7, r7, r6
 80217b0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80217b4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80217b8:	00ed      	lsls	r5, r5, #3
 80217ba:	fb0c 7c0a 	mla	ip, ip, sl, r7
 80217be:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80217c2:	10c7      	asrs	r7, r0, #3
 80217c4:	b2ed      	uxtb	r5, r5
 80217c6:	00c0      	lsls	r0, r0, #3
 80217c8:	fb19 f906 	smulbb	r9, r9, r6
 80217cc:	fb15 f506 	smulbb	r5, r5, r6
 80217d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80217d4:	b2c0      	uxtb	r0, r0
 80217d6:	fa1f fc8c 	uxth.w	ip, ip
 80217da:	fb07 970a 	mla	r7, r7, sl, r9
 80217de:	fb00 500a 	mla	r0, r0, sl, r5
 80217e2:	b2bf      	uxth	r7, r7
 80217e4:	b280      	uxth	r0, r0
 80217e6:	f10c 0501 	add.w	r5, ip, #1
 80217ea:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80217ee:	f107 0901 	add.w	r9, r7, #1
 80217f2:	1c45      	adds	r5, r0, #1
 80217f4:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80217f8:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80217fc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021800:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021804:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021808:	ea45 0c0c 	orr.w	ip, r5, ip
 802180c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021810:	ea4c 0c09 	orr.w	ip, ip, r9
 8021814:	f824 c00b 	strh.w	ip, [r4, fp]
 8021818:	9811      	ldr	r0, [sp, #68]	; 0x44
 802181a:	4401      	add	r1, r0
 802181c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802181e:	f108 38ff 	add.w	r8, r8, #4294967295
 8021822:	4402      	add	r2, r0
 8021824:	e75e      	b.n	80216e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8021826:	b005      	add	sp, #20
 8021828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802182c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021830:	b085      	sub	sp, #20
 8021832:	4693      	mov	fp, r2
 8021834:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021836:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021838:	6870      	ldr	r0, [r6, #4]
 802183a:	9101      	str	r1, [sp, #4]
 802183c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021840:	fb00 2404 	mla	r4, r0, r4, r2
 8021844:	6832      	ldr	r2, [r6, #0]
 8021846:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 802184a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802184e:	682a      	ldr	r2, [r5, #0]
 8021850:	9202      	str	r2, [sp, #8]
 8021852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021856:	9a01      	ldr	r2, [sp, #4]
 8021858:	2a00      	cmp	r2, #0
 802185a:	dc03      	bgt.n	8021864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802185c:	f1bb 0f00 	cmp.w	fp, #0
 8021860:	f340 809a 	ble.w	8021998 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8021864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021866:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802186a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802186e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021872:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021874:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021878:	2b00      	cmp	r3, #0
 802187a:	dd0c      	ble.n	8021896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802187c:	1406      	asrs	r6, r0, #16
 802187e:	d405      	bmi.n	802188c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021880:	454e      	cmp	r6, r9
 8021882:	da03      	bge.n	802188c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021884:	1416      	asrs	r6, r2, #16
 8021886:	d401      	bmi.n	802188c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021888:	4546      	cmp	r6, r8
 802188a:	db05      	blt.n	8021898 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802188c:	4470      	add	r0, lr
 802188e:	4462      	add	r2, ip
 8021890:	3b01      	subs	r3, #1
 8021892:	3402      	adds	r4, #2
 8021894:	e7f0      	b.n	8021878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021896:	d00f      	beq.n	80218b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021898:	1e5e      	subs	r6, r3, #1
 802189a:	fb0e 0706 	mla	r7, lr, r6, r0
 802189e:	143f      	asrs	r7, r7, #16
 80218a0:	d541      	bpl.n	8021926 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 80218a2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 80218a6:	4698      	mov	r8, r3
 80218a8:	9603      	str	r6, [sp, #12]
 80218aa:	f1b8 0f00 	cmp.w	r8, #0
 80218ae:	dc56      	bgt.n	802195e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80218b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80218b8:	9b01      	ldr	r3, [sp, #4]
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	dd6c      	ble.n	8021998 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80218be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80218c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80218c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80218ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80218d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80218d4:	eeb0 6a62 	vmov.f32	s12, s5
 80218d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80218dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80218e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80218e4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80218e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80218ec:	eeb0 6a43 	vmov.f32	s12, s6
 80218f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80218f4:	ee12 2a90 	vmov	r2, s5
 80218f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218fc:	fb92 fef3 	sdiv	lr, r2, r3
 8021900:	ee13 2a10 	vmov	r2, s6
 8021904:	fb92 fcf3 	sdiv	ip, r2, r3
 8021908:	9b01      	ldr	r3, [sp, #4]
 802190a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802190e:	3b01      	subs	r3, #1
 8021910:	9301      	str	r3, [sp, #4]
 8021912:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021918:	eeb0 3a67 	vmov.f32	s6, s15
 802191c:	bf08      	it	eq
 802191e:	465b      	moveq	r3, fp
 8021920:	eef0 2a47 	vmov.f32	s5, s14
 8021924:	e797      	b.n	8021856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021926:	454f      	cmp	r7, r9
 8021928:	dabb      	bge.n	80218a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802192a:	fb0c 2606 	mla	r6, ip, r6, r2
 802192e:	1436      	asrs	r6, r6, #16
 8021930:	d4b7      	bmi.n	80218a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021932:	4546      	cmp	r6, r8
 8021934:	dab5      	bge.n	80218a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021936:	461e      	mov	r6, r3
 8021938:	46a0      	mov	r8, r4
 802193a:	2e00      	cmp	r6, #0
 802193c:	ddb8      	ble.n	80218b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802193e:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8021942:	9902      	ldr	r1, [sp, #8]
 8021944:	1417      	asrs	r7, r2, #16
 8021946:	ea4f 4920 	mov.w	r9, r0, asr #16
 802194a:	fb0a 9707 	mla	r7, sl, r7, r9
 802194e:	4470      	add	r0, lr
 8021950:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021954:	f828 7b02 	strh.w	r7, [r8], #2
 8021958:	4462      	add	r2, ip
 802195a:	3e01      	subs	r6, #1
 802195c:	e7ed      	b.n	802193a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802195e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021962:	d414      	bmi.n	802198e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021964:	68ae      	ldr	r6, [r5, #8]
 8021966:	454e      	cmp	r6, r9
 8021968:	dd11      	ble.n	802198e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802196a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802196e:	d40e      	bmi.n	802198e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021970:	68ef      	ldr	r7, [r5, #12]
 8021972:	4557      	cmp	r7, sl
 8021974:	dd0b      	ble.n	802198e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8021976:	b236      	sxth	r6, r6
 8021978:	fb0a 9606 	mla	r6, sl, r6, r9
 802197c:	9f02      	ldr	r7, [sp, #8]
 802197e:	f06f 0101 	mvn.w	r1, #1
 8021982:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8021986:	fb01 f608 	mul.w	r6, r1, r8
 802198a:	9903      	ldr	r1, [sp, #12]
 802198c:	538f      	strh	r7, [r1, r6]
 802198e:	4470      	add	r0, lr
 8021990:	4462      	add	r2, ip
 8021992:	f108 38ff 	add.w	r8, r8, #4294967295
 8021996:	e788      	b.n	80218aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021998:	b005      	add	sp, #20
 802199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802199e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802199e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219a2:	b087      	sub	sp, #28
 80219a4:	468b      	mov	fp, r1
 80219a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80219a8:	9203      	str	r2, [sp, #12]
 80219aa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80219ae:	9204      	str	r2, [sp, #16]
 80219b0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80219b4:	6841      	ldr	r1, [r0, #4]
 80219b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80219ba:	fb01 2505 	mla	r5, r1, r5, r2
 80219be:	6802      	ldr	r2, [r0, #0]
 80219c0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80219c4:	f8d9 2000 	ldr.w	r2, [r9]
 80219c8:	9201      	str	r2, [sp, #4]
 80219ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80219ce:	f1bb 0f00 	cmp.w	fp, #0
 80219d2:	dc03      	bgt.n	80219dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80219d4:	9a03      	ldr	r2, [sp, #12]
 80219d6:	2a00      	cmp	r2, #0
 80219d8:	f340 8159 	ble.w	8021c8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 80219dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80219de:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 80219e2:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80219e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80219ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80219ec:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	dd0e      	ble.n	8021a12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80219f4:	1402      	asrs	r2, r0, #16
 80219f6:	d405      	bmi.n	8021a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80219f8:	42ba      	cmp	r2, r7
 80219fa:	da03      	bge.n	8021a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80219fc:	140a      	asrs	r2, r1, #16
 80219fe:	d401      	bmi.n	8021a04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021a00:	42b2      	cmp	r2, r6
 8021a02:	db07      	blt.n	8021a14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021a04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021a06:	4410      	add	r0, r2
 8021a08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021a0a:	3b01      	subs	r3, #1
 8021a0c:	4411      	add	r1, r2
 8021a0e:	3502      	adds	r5, #2
 8021a10:	e7ee      	b.n	80219f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021a12:	d017      	beq.n	8021a44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021a14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021a16:	1e5a      	subs	r2, r3, #1
 8021a18:	fb04 0402 	mla	r4, r4, r2, r0
 8021a1c:	1424      	asrs	r4, r4, #16
 8021a1e:	d409      	bmi.n	8021a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a20:	42bc      	cmp	r4, r7
 8021a22:	da07      	bge.n	8021a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021a26:	fb04 1202 	mla	r2, r4, r2, r1
 8021a2a:	1412      	asrs	r2, r2, #16
 8021a2c:	d402      	bmi.n	8021a34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021a2e:	42b2      	cmp	r2, r6
 8021a30:	f2c0 80bf 	blt.w	8021bb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8021a34:	2700      	movs	r7, #0
 8021a36:	19da      	adds	r2, r3, r7
 8021a38:	2a00      	cmp	r2, #0
 8021a3a:	dc3e      	bgt.n	8021aba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021a3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021a40:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8021a44:	f1bb 0f00 	cmp.w	fp, #0
 8021a48:	f340 8121 	ble.w	8021c8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8021a4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021a54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8021a5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021a62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021a66:	eeb0 6a62 	vmov.f32	s12, s5
 8021a6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021a6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021a72:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021a76:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021a7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021a7e:	eeb0 6a43 	vmov.f32	s12, s6
 8021a82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021a86:	ee12 2a90 	vmov	r2, s5
 8021a8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021a8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a92:	ee13 2a10 	vmov	r2, s6
 8021a96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021a9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8021a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021aa2:	9a03      	ldr	r2, [sp, #12]
 8021aa4:	9314      	str	r3, [sp, #80]	; 0x50
 8021aa6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021aac:	eeb0 3a67 	vmov.f32	s6, s15
 8021ab0:	bf08      	it	eq
 8021ab2:	4613      	moveq	r3, r2
 8021ab4:	eef0 2a47 	vmov.f32	s5, s14
 8021ab8:	e789      	b.n	80219ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021aba:	1406      	asrs	r6, r0, #16
 8021abc:	d42d      	bmi.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021abe:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8021ac2:	42b4      	cmp	r4, r6
 8021ac4:	dd29      	ble.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021ac6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8021aca:	d426      	bmi.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021acc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021ad0:	4562      	cmp	r2, ip
 8021ad2:	dd22      	ble.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021ad4:	b224      	sxth	r4, r4
 8021ad6:	9a01      	ldr	r2, [sp, #4]
 8021ad8:	fb0c 6404 	mla	r4, ip, r4, r6
 8021adc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8021ae0:	0e22      	lsrs	r2, r4, #24
 8021ae2:	d01a      	beq.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021ae4:	9e04      	ldr	r6, [sp, #16]
 8021ae6:	4372      	muls	r2, r6
 8021ae8:	1c56      	adds	r6, r2, #1
 8021aea:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021aee:	1212      	asrs	r2, r2, #8
 8021af0:	0a26      	lsrs	r6, r4, #8
 8021af2:	2aff      	cmp	r2, #255	; 0xff
 8021af4:	9605      	str	r6, [sp, #20]
 8021af6:	d116      	bne.n	8021b26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8021af8:	f06f 0201 	mvn.w	r2, #1
 8021afc:	fb02 fc07 	mul.w	ip, r2, r7
 8021b00:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021b04:	0962      	lsrs	r2, r4, #5
 8021b06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b0a:	f026 0607 	bic.w	r6, r6, #7
 8021b0e:	4316      	orrs	r6, r2
 8021b10:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021b14:	4326      	orrs	r6, r4
 8021b16:	f825 600c 	strh.w	r6, [r5, ip]
 8021b1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021b1c:	4410      	add	r0, r2
 8021b1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b20:	3f01      	subs	r7, #1
 8021b22:	4411      	add	r1, r2
 8021b24:	e787      	b.n	8021a36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021b26:	f06f 0601 	mvn.w	r6, #1
 8021b2a:	437e      	muls	r6, r7
 8021b2c:	fa1f fa82 	uxth.w	sl, r2
 8021b30:	f835 8006 	ldrh.w	r8, [r5, r6]
 8021b34:	9602      	str	r6, [sp, #8]
 8021b36:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021b3a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8021b3e:	43d2      	mvns	r2, r2
 8021b40:	b2d2      	uxtb	r2, r2
 8021b42:	fb1c fc0a 	smulbb	ip, ip, sl
 8021b46:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021b4a:	fb0e ce02 	mla	lr, lr, r2, ip
 8021b4e:	b2e4      	uxtb	r4, r4
 8021b50:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021b54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021b58:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021b5c:	fa5f f888 	uxtb.w	r8, r8
 8021b60:	fb14 f40a 	smulbb	r4, r4, sl
 8021b64:	fb08 4402 	mla	r4, r8, r2, r4
 8021b68:	fa1f fe8e 	uxth.w	lr, lr
 8021b6c:	fb16 f60a 	smulbb	r6, r6, sl
 8021b70:	b2a4      	uxth	r4, r4
 8021b72:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021b76:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021b7a:	f10e 0201 	add.w	r2, lr, #1
 8021b7e:	1c66      	adds	r6, r4, #1
 8021b80:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021b84:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021b88:	fa1f fc8c 	uxth.w	ip, ip
 8021b8c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021b90:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8021b94:	ea46 0e0e 	orr.w	lr, r6, lr
 8021b98:	f10c 0601 	add.w	r6, ip, #1
 8021b9c:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021ba0:	0976      	lsrs	r6, r6, #5
 8021ba2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021ba6:	9a02      	ldr	r2, [sp, #8]
 8021ba8:	ea4e 0e06 	orr.w	lr, lr, r6
 8021bac:	f825 e002 	strh.w	lr, [r5, r2]
 8021bb0:	e7b3      	b.n	8021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8021bb2:	f04f 0800 	mov.w	r8, #0
 8021bb6:	eba3 0208 	sub.w	r2, r3, r8
 8021bba:	2a00      	cmp	r2, #0
 8021bbc:	f77f af3e 	ble.w	8021a3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8021bc0:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8021bc4:	1404      	asrs	r4, r0, #16
 8021bc6:	140a      	asrs	r2, r1, #16
 8021bc8:	fb06 4202 	mla	r2, r6, r2, r4
 8021bcc:	9c01      	ldr	r4, [sp, #4]
 8021bce:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8021bd2:	0e22      	lsrs	r2, r4, #24
 8021bd4:	d016      	beq.n	8021c04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021bd6:	9e04      	ldr	r6, [sp, #16]
 8021bd8:	4372      	muls	r2, r6
 8021bda:	1c56      	adds	r6, r2, #1
 8021bdc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021be0:	1212      	asrs	r2, r2, #8
 8021be2:	2aff      	cmp	r2, #255	; 0xff
 8021be4:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8021be8:	d113      	bne.n	8021c12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8021bea:	0962      	lsrs	r2, r4, #5
 8021bec:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021bf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021bf4:	f026 0607 	bic.w	r6, r6, #7
 8021bf8:	4316      	orrs	r6, r2
 8021bfa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021bfe:	4326      	orrs	r6, r4
 8021c00:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8021c04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c06:	4410      	add	r0, r2
 8021c08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c0a:	f108 0801 	add.w	r8, r8, #1
 8021c0e:	4411      	add	r1, r2
 8021c10:	e7d1      	b.n	8021bb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8021c12:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8021c16:	fa1f fa82 	uxth.w	sl, r2
 8021c1a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021c1e:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8021c22:	43d2      	mvns	r2, r2
 8021c24:	b2d2      	uxtb	r2, r2
 8021c26:	fb17 f70a 	smulbb	r7, r7, sl
 8021c2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021c2e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8021c32:	b2e4      	uxtb	r4, r4
 8021c34:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021c38:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021c3c:	fa5f fe8e 	uxtb.w	lr, lr
 8021c40:	fb14 f40a 	smulbb	r4, r4, sl
 8021c44:	fb0e 4402 	mla	r4, lr, r2, r4
 8021c48:	b2f6      	uxtb	r6, r6
 8021c4a:	fa1f fc8c 	uxth.w	ip, ip
 8021c4e:	fb16 f60a 	smulbb	r6, r6, sl
 8021c52:	b2a4      	uxth	r4, r4
 8021c54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021c58:	fb07 6702 	mla	r7, r7, r2, r6
 8021c5c:	f10c 0201 	add.w	r2, ip, #1
 8021c60:	1c66      	adds	r6, r4, #1
 8021c62:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021c66:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8021c6a:	b2bf      	uxth	r7, r7
 8021c6c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021c70:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021c74:	ea46 0c0c 	orr.w	ip, r6, ip
 8021c78:	1c7e      	adds	r6, r7, #1
 8021c7a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021c7e:	0976      	lsrs	r6, r6, #5
 8021c80:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021c84:	ea4c 0c06 	orr.w	ip, ip, r6
 8021c88:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8021c8c:	e7ba      	b.n	8021c04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8021c8e:	b007      	add	sp, #28
 8021c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c98:	b085      	sub	sp, #20
 8021c9a:	468b      	mov	fp, r1
 8021c9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021c9e:	9203      	str	r2, [sp, #12]
 8021ca0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021ca4:	6841      	ldr	r1, [r0, #4]
 8021ca6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8021caa:	fb01 2404 	mla	r4, r1, r4, r2
 8021cae:	6802      	ldr	r2, [r0, #0]
 8021cb0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021cb4:	f8d8 2000 	ldr.w	r2, [r8]
 8021cb8:	9201      	str	r2, [sp, #4]
 8021cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021cbe:	f1bb 0f00 	cmp.w	fp, #0
 8021cc2:	dc03      	bgt.n	8021ccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8021cc4:	9a03      	ldr	r2, [sp, #12]
 8021cc6:	2a00      	cmp	r2, #0
 8021cc8:	f340 814f 	ble.w	8021f6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021ccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021cce:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8021cd2:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8021cd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021cda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021cdc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021ce0:	2b00      	cmp	r3, #0
 8021ce2:	dd0e      	ble.n	8021d02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8021ce4:	1408      	asrs	r0, r1, #16
 8021ce6:	d405      	bmi.n	8021cf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021ce8:	42b8      	cmp	r0, r7
 8021cea:	da03      	bge.n	8021cf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021cec:	1410      	asrs	r0, r2, #16
 8021cee:	d401      	bmi.n	8021cf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8021cf0:	42b0      	cmp	r0, r6
 8021cf2:	db07      	blt.n	8021d04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021cf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021cf6:	4401      	add	r1, r0
 8021cf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021cfa:	3b01      	subs	r3, #1
 8021cfc:	4402      	add	r2, r0
 8021cfe:	3402      	adds	r4, #2
 8021d00:	e7ee      	b.n	8021ce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021d02:	d017      	beq.n	8021d34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021d04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021d06:	1e58      	subs	r0, r3, #1
 8021d08:	fb05 1500 	mla	r5, r5, r0, r1
 8021d0c:	142d      	asrs	r5, r5, #16
 8021d0e:	d409      	bmi.n	8021d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d10:	42bd      	cmp	r5, r7
 8021d12:	da07      	bge.n	8021d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d14:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021d16:	fb05 2000 	mla	r0, r5, r0, r2
 8021d1a:	1400      	asrs	r0, r0, #16
 8021d1c:	d402      	bmi.n	8021d24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021d1e:	42b0      	cmp	r0, r6
 8021d20:	f2c0 80ba 	blt.w	8021e98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021d24:	2600      	movs	r6, #0
 8021d26:	1998      	adds	r0, r3, r6
 8021d28:	2800      	cmp	r0, #0
 8021d2a:	dc3e      	bgt.n	8021daa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021d2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021d34:	f1bb 0f00 	cmp.w	fp, #0
 8021d38:	f340 8117 	ble.w	8021f6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8021d3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d4a:	f1bb 0b01 	subs.w	fp, fp, #1
 8021d4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d56:	eeb0 6a62 	vmov.f32	s12, s5
 8021d5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d62:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d66:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021d6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d6e:	eeb0 6a43 	vmov.f32	s12, s6
 8021d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d76:	ee12 2a90 	vmov	r2, s5
 8021d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d82:	ee13 2a10 	vmov	r2, s6
 8021d86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d8a:	9311      	str	r3, [sp, #68]	; 0x44
 8021d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d92:	9a03      	ldr	r2, [sp, #12]
 8021d94:	9312      	str	r3, [sp, #72]	; 0x48
 8021d96:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021d9c:	eeb0 3a67 	vmov.f32	s6, s15
 8021da0:	bf08      	it	eq
 8021da2:	4613      	moveq	r3, r2
 8021da4:	eef0 2a47 	vmov.f32	s5, s14
 8021da8:	e789      	b.n	8021cbe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8021daa:	140f      	asrs	r7, r1, #16
 8021dac:	d424      	bmi.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dae:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8021db2:	42bd      	cmp	r5, r7
 8021db4:	dd20      	ble.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021db6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021dba:	d41d      	bmi.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dbc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8021dc0:	4560      	cmp	r0, ip
 8021dc2:	dd19      	ble.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021dc4:	b22d      	sxth	r5, r5
 8021dc6:	fb0c 7505 	mla	r5, ip, r5, r7
 8021dca:	9801      	ldr	r0, [sp, #4]
 8021dcc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8021dd0:	0e07      	lsrs	r7, r0, #24
 8021dd2:	2fff      	cmp	r7, #255	; 0xff
 8021dd4:	d116      	bne.n	8021e04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8021dd6:	f06f 0501 	mvn.w	r5, #1
 8021dda:	fb05 f706 	mul.w	r7, r5, r6
 8021dde:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8021de2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8021de6:	0945      	lsrs	r5, r0, #5
 8021de8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021dec:	ea4c 0505 	orr.w	r5, ip, r5
 8021df0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8021df4:	4305      	orrs	r5, r0
 8021df6:	53e5      	strh	r5, [r4, r7]
 8021df8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021dfa:	4401      	add	r1, r0
 8021dfc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021dfe:	3e01      	subs	r6, #1
 8021e00:	4402      	add	r2, r0
 8021e02:	e790      	b.n	8021d26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e04:	b2fd      	uxtb	r5, r7
 8021e06:	2f00      	cmp	r7, #0
 8021e08:	d0f6      	beq.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021e0a:	f06f 0701 	mvn.w	r7, #1
 8021e0e:	4377      	muls	r7, r6
 8021e10:	fa1f f985 	uxth.w	r9, r5
 8021e14:	f834 e007 	ldrh.w	lr, [r4, r7]
 8021e18:	9702      	str	r7, [sp, #8]
 8021e1a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021e1e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8021e22:	43ed      	mvns	r5, r5
 8021e24:	b2ed      	uxtb	r5, r5
 8021e26:	fb17 f709 	smulbb	r7, r7, r9
 8021e2a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021e2e:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021e32:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8021e36:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021e3a:	b2c0      	uxtb	r0, r0
 8021e3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021e40:	fa5f fe8e 	uxtb.w	lr, lr
 8021e44:	fb10 f009 	smulbb	r0, r0, r9
 8021e48:	fb0e 0005 	mla	r0, lr, r5, r0
 8021e4c:	b280      	uxth	r0, r0
 8021e4e:	fa1f fc8c 	uxth.w	ip, ip
 8021e52:	fb1a fa09 	smulbb	sl, sl, r9
 8021e56:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021e5a:	fb07 a705 	mla	r7, r7, r5, sl
 8021e5e:	f100 0a01 	add.w	sl, r0, #1
 8021e62:	f10c 0501 	add.w	r5, ip, #1
 8021e66:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021e6a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021e6e:	b2bf      	uxth	r7, r7
 8021e70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021e74:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021e78:	ea4a 0c0c 	orr.w	ip, sl, ip
 8021e7c:	f107 0a01 	add.w	sl, r7, #1
 8021e80:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021e84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021e88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021e8c:	9802      	ldr	r0, [sp, #8]
 8021e8e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021e92:	f824 c000 	strh.w	ip, [r4, r0]
 8021e96:	e7af      	b.n	8021df8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021e98:	f04f 0e00 	mov.w	lr, #0
 8021e9c:	eba3 000e 	sub.w	r0, r3, lr
 8021ea0:	2800      	cmp	r0, #0
 8021ea2:	f77f af43 	ble.w	8021d2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021ea6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8021eaa:	140d      	asrs	r5, r1, #16
 8021eac:	1410      	asrs	r0, r2, #16
 8021eae:	fb06 5000 	mla	r0, r6, r0, r5
 8021eb2:	9d01      	ldr	r5, [sp, #4]
 8021eb4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021eb8:	0e2e      	lsrs	r6, r5, #24
 8021eba:	2eff      	cmp	r6, #255	; 0xff
 8021ebc:	d112      	bne.n	8021ee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021ebe:	482c      	ldr	r0, [pc, #176]	; (8021f70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021ec0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021ec4:	0968      	lsrs	r0, r5, #5
 8021ec6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021eca:	4330      	orrs	r0, r6
 8021ecc:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021ed0:	4328      	orrs	r0, r5
 8021ed2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021ed6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021ed8:	4401      	add	r1, r0
 8021eda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021edc:	f10e 0e01 	add.w	lr, lr, #1
 8021ee0:	4402      	add	r2, r0
 8021ee2:	e7db      	b.n	8021e9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021ee4:	b2f0      	uxtb	r0, r6
 8021ee6:	2e00      	cmp	r6, #0
 8021ee8:	d0f5      	beq.n	8021ed6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021eea:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021eee:	fa1f f980 	uxth.w	r9, r0
 8021ef2:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021ef6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021efa:	43c0      	mvns	r0, r0
 8021efc:	b2c0      	uxtb	r0, r0
 8021efe:	fb16 f609 	smulbb	r6, r6, r9
 8021f02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021f06:	fb07 6700 	mla	r7, r7, r0, r6
 8021f0a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021f0e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021f12:	b2ed      	uxtb	r5, r5
 8021f14:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021f18:	fa5f fc8c 	uxtb.w	ip, ip
 8021f1c:	fb15 f509 	smulbb	r5, r5, r9
 8021f20:	fb0c 5500 	mla	r5, ip, r0, r5
 8021f24:	b2bf      	uxth	r7, r7
 8021f26:	fb1a fa09 	smulbb	sl, sl, r9
 8021f2a:	b2ad      	uxth	r5, r5
 8021f2c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021f30:	fb06 a600 	mla	r6, r6, r0, sl
 8021f34:	1c78      	adds	r0, r7, #1
 8021f36:	f105 0a01 	add.w	sl, r5, #1
 8021f3a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021f3e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021f42:	b2b6      	uxth	r6, r6
 8021f44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021f48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021f4c:	ea4a 0707 	orr.w	r7, sl, r7
 8021f50:	f106 0a01 	add.w	sl, r6, #1
 8021f54:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021f58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021f5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021f60:	ea47 070a 	orr.w	r7, r7, sl
 8021f64:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021f68:	e7b5      	b.n	8021ed6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8021f6a:	b005      	add	sp, #20
 8021f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f70:	fffff800 	.word	0xfffff800

08021f74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f78:	b087      	sub	sp, #28
 8021f7a:	468b      	mov	fp, r1
 8021f7c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021f7e:	9203      	str	r2, [sp, #12]
 8021f80:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021f84:	9204      	str	r2, [sp, #16]
 8021f86:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021f8a:	6841      	ldr	r1, [r0, #4]
 8021f8c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021f90:	fb01 2404 	mla	r4, r1, r4, r2
 8021f94:	6802      	ldr	r2, [r0, #0]
 8021f96:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021f9a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021f9e:	3201      	adds	r2, #1
 8021fa0:	f022 0201 	bic.w	r2, r2, #1
 8021fa4:	9200      	str	r2, [sp, #0]
 8021fa6:	f8d9 2000 	ldr.w	r2, [r9]
 8021faa:	9201      	str	r2, [sp, #4]
 8021fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021fb0:	f1bb 0f00 	cmp.w	fp, #0
 8021fb4:	dc03      	bgt.n	8021fbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021fb6:	9a03      	ldr	r2, [sp, #12]
 8021fb8:	2a00      	cmp	r2, #0
 8021fba:	f340 8169 	ble.w	8022290 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021fbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021fc0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021fc4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021fc8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021fce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	dd0e      	ble.n	8021ff4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021fd6:	1402      	asrs	r2, r0, #16
 8021fd8:	d405      	bmi.n	8021fe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fda:	42ba      	cmp	r2, r7
 8021fdc:	da03      	bge.n	8021fe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fde:	140a      	asrs	r2, r1, #16
 8021fe0:	d401      	bmi.n	8021fe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fe2:	42b2      	cmp	r2, r6
 8021fe4:	db07      	blt.n	8021ff6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021fe8:	4410      	add	r0, r2
 8021fea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021fec:	3b01      	subs	r3, #1
 8021fee:	4411      	add	r1, r2
 8021ff0:	3402      	adds	r4, #2
 8021ff2:	e7ee      	b.n	8021fd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021ff4:	d017      	beq.n	8022026 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021ff6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021ff8:	1e5a      	subs	r2, r3, #1
 8021ffa:	fb05 0502 	mla	r5, r5, r2, r0
 8021ffe:	142d      	asrs	r5, r5, #16
 8022000:	d409      	bmi.n	8022016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8022002:	42bd      	cmp	r5, r7
 8022004:	da07      	bge.n	8022016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8022006:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022008:	fb05 1202 	mla	r2, r5, r2, r1
 802200c:	1412      	asrs	r2, r2, #16
 802200e:	d402      	bmi.n	8022016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8022010:	42b2      	cmp	r2, r6
 8022012:	f2c0 80c7 	blt.w	80221a4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8022016:	2700      	movs	r7, #0
 8022018:	19da      	adds	r2, r3, r7
 802201a:	2a00      	cmp	r2, #0
 802201c:	dc3e      	bgt.n	802209c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802201e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022022:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022026:	f1bb 0f00 	cmp.w	fp, #0
 802202a:	f340 8131 	ble.w	8022290 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802202e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022032:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022036:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802203a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802203c:	f1bb 0b01 	subs.w	fp, fp, #1
 8022040:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022044:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022048:	eeb0 6a62 	vmov.f32	s12, s5
 802204c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022050:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022054:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022058:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802205c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022060:	eeb0 6a43 	vmov.f32	s12, s6
 8022064:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022068:	ee12 2a90 	vmov	r2, s5
 802206c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022070:	fb92 f3f3 	sdiv	r3, r2, r3
 8022074:	ee13 2a10 	vmov	r2, s6
 8022078:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802207c:	9313      	str	r3, [sp, #76]	; 0x4c
 802207e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022080:	fb92 f3f3 	sdiv	r3, r2, r3
 8022084:	9a03      	ldr	r2, [sp, #12]
 8022086:	9314      	str	r3, [sp, #80]	; 0x50
 8022088:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802208c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802208e:	eeb0 3a67 	vmov.f32	s6, s15
 8022092:	bf08      	it	eq
 8022094:	4613      	moveq	r3, r2
 8022096:	eef0 2a47 	vmov.f32	s5, s14
 802209a:	e789      	b.n	8021fb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802209c:	1405      	asrs	r5, r0, #16
 802209e:	d435      	bmi.n	802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220a0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80220a4:	42aa      	cmp	r2, r5
 80220a6:	dd31      	ble.n	802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220a8:	140e      	asrs	r6, r1, #16
 80220aa:	d42f      	bmi.n	802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220ac:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80220b0:	42b2      	cmp	r2, r6
 80220b2:	dd2b      	ble.n	802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220b4:	9a00      	ldr	r2, [sp, #0]
 80220b6:	fb06 5502 	mla	r5, r6, r2, r5
 80220ba:	086a      	lsrs	r2, r5, #1
 80220bc:	9e01      	ldr	r6, [sp, #4]
 80220be:	5cb2      	ldrb	r2, [r6, r2]
 80220c0:	07ee      	lsls	r6, r5, #31
 80220c2:	bf54      	ite	pl
 80220c4:	f002 020f 	andpl.w	r2, r2, #15
 80220c8:	1112      	asrmi	r2, r2, #4
 80220ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80220ce:	b2d2      	uxtb	r2, r2
 80220d0:	b1e2      	cbz	r2, 802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80220d2:	9d04      	ldr	r5, [sp, #16]
 80220d4:	436a      	muls	r2, r5
 80220d6:	1c55      	adds	r5, r2, #1
 80220d8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80220dc:	4d6e      	ldr	r5, [pc, #440]	; (8022298 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80220de:	682d      	ldr	r5, [r5, #0]
 80220e0:	1212      	asrs	r2, r2, #8
 80220e2:	0a2e      	lsrs	r6, r5, #8
 80220e4:	2aff      	cmp	r2, #255	; 0xff
 80220e6:	9605      	str	r6, [sp, #20]
 80220e8:	d116      	bne.n	8022118 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80220ea:	f06f 0201 	mvn.w	r2, #1
 80220ee:	fb02 fc07 	mul.w	ip, r2, r7
 80220f2:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80220f6:	096a      	lsrs	r2, r5, #5
 80220f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220fc:	f026 0607 	bic.w	r6, r6, #7
 8022100:	4316      	orrs	r6, r2
 8022102:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8022106:	432e      	orrs	r6, r5
 8022108:	f824 600c 	strh.w	r6, [r4, ip]
 802210c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802210e:	4410      	add	r0, r2
 8022110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022112:	3f01      	subs	r7, #1
 8022114:	4411      	add	r1, r2
 8022116:	e77f      	b.n	8022018 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8022118:	f06f 0601 	mvn.w	r6, #1
 802211c:	437e      	muls	r6, r7
 802211e:	fa1f fa82 	uxth.w	sl, r2
 8022122:	f834 8006 	ldrh.w	r8, [r4, r6]
 8022126:	9602      	str	r6, [sp, #8]
 8022128:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802212c:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8022130:	43d2      	mvns	r2, r2
 8022132:	b2d2      	uxtb	r2, r2
 8022134:	fb1c fc0a 	smulbb	ip, ip, sl
 8022138:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802213c:	fb0e ce02 	mla	lr, lr, r2, ip
 8022140:	b2ed      	uxtb	r5, r5
 8022142:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8022146:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802214a:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802214e:	fa5f f888 	uxtb.w	r8, r8
 8022152:	fb15 f50a 	smulbb	r5, r5, sl
 8022156:	fb08 5502 	mla	r5, r8, r2, r5
 802215a:	fa1f fe8e 	uxth.w	lr, lr
 802215e:	fb16 f60a 	smulbb	r6, r6, sl
 8022162:	b2ad      	uxth	r5, r5
 8022164:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022168:	fb0c 6c02 	mla	ip, ip, r2, r6
 802216c:	f10e 0201 	add.w	r2, lr, #1
 8022170:	1c6e      	adds	r6, r5, #1
 8022172:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8022176:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802217a:	fa1f fc8c 	uxth.w	ip, ip
 802217e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022182:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8022186:	ea46 0e0e 	orr.w	lr, r6, lr
 802218a:	f10c 0601 	add.w	r6, ip, #1
 802218e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8022192:	0976      	lsrs	r6, r6, #5
 8022194:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022198:	9a02      	ldr	r2, [sp, #8]
 802219a:	ea4e 0e06 	orr.w	lr, lr, r6
 802219e:	f824 e002 	strh.w	lr, [r4, r2]
 80221a2:	e7b3      	b.n	802210c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80221a4:	f04f 0800 	mov.w	r8, #0
 80221a8:	eba3 0208 	sub.w	r2, r3, r8
 80221ac:	2a00      	cmp	r2, #0
 80221ae:	f77f af36 	ble.w	802201e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80221b2:	9e00      	ldr	r6, [sp, #0]
 80221b4:	1402      	asrs	r2, r0, #16
 80221b6:	140d      	asrs	r5, r1, #16
 80221b8:	fb06 2505 	mla	r5, r6, r5, r2
 80221bc:	086a      	lsrs	r2, r5, #1
 80221be:	9e01      	ldr	r6, [sp, #4]
 80221c0:	5cb2      	ldrb	r2, [r6, r2]
 80221c2:	07ed      	lsls	r5, r5, #31
 80221c4:	bf54      	ite	pl
 80221c6:	f002 020f 	andpl.w	r2, r2, #15
 80221ca:	1112      	asrmi	r2, r2, #4
 80221cc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80221d0:	b2d2      	uxtb	r2, r2
 80221d2:	b1c2      	cbz	r2, 8022206 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80221d4:	9d04      	ldr	r5, [sp, #16]
 80221d6:	436a      	muls	r2, r5
 80221d8:	1c55      	adds	r5, r2, #1
 80221da:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80221de:	4d2e      	ldr	r5, [pc, #184]	; (8022298 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80221e0:	1212      	asrs	r2, r2, #8
 80221e2:	682e      	ldr	r6, [r5, #0]
 80221e4:	2aff      	cmp	r2, #255	; 0xff
 80221e6:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80221ea:	d113      	bne.n	8022214 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80221ec:	0972      	lsrs	r2, r6, #5
 80221ee:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80221f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80221f6:	f025 0507 	bic.w	r5, r5, #7
 80221fa:	4315      	orrs	r5, r2
 80221fc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022200:	4335      	orrs	r5, r6
 8022202:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8022206:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022208:	4410      	add	r0, r2
 802220a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802220c:	f108 0801 	add.w	r8, r8, #1
 8022210:	4411      	add	r1, r2
 8022212:	e7c9      	b.n	80221a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8022214:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8022218:	fa1f fa82 	uxth.w	sl, r2
 802221c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022220:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8022224:	43d2      	mvns	r2, r2
 8022226:	b2d2      	uxtb	r2, r2
 8022228:	fb17 f70a 	smulbb	r7, r7, sl
 802222c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022230:	fb0c 7c02 	mla	ip, ip, r2, r7
 8022234:	b2f6      	uxtb	r6, r6
 8022236:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802223a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802223e:	fa5f fe8e 	uxtb.w	lr, lr
 8022242:	fb16 f60a 	smulbb	r6, r6, sl
 8022246:	fb0e 6602 	mla	r6, lr, r2, r6
 802224a:	b2ed      	uxtb	r5, r5
 802224c:	fa1f fc8c 	uxth.w	ip, ip
 8022250:	fb15 f50a 	smulbb	r5, r5, sl
 8022254:	b2b6      	uxth	r6, r6
 8022256:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802225a:	fb07 5702 	mla	r7, r7, r2, r5
 802225e:	f10c 0201 	add.w	r2, ip, #1
 8022262:	1c75      	adds	r5, r6, #1
 8022264:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022268:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 802226c:	b2bf      	uxth	r7, r7
 802226e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022272:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022276:	ea45 0c0c 	orr.w	ip, r5, ip
 802227a:	1c7d      	adds	r5, r7, #1
 802227c:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8022280:	096d      	lsrs	r5, r5, #5
 8022282:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022286:	ea4c 0c05 	orr.w	ip, ip, r5
 802228a:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 802228e:	e7ba      	b.n	8022206 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8022290:	b007      	add	sp, #28
 8022292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022296:	bf00      	nop
 8022298:	2000b4cc 	.word	0x2000b4cc

0802229c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222a0:	b087      	sub	sp, #28
 80222a2:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80225b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80222a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80222a8:	9205      	str	r2, [sp, #20]
 80222aa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80222ae:	9101      	str	r1, [sp, #4]
 80222b0:	6841      	ldr	r1, [r0, #4]
 80222b2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80222b6:	fb01 2404 	mla	r4, r1, r4, r2
 80222ba:	6802      	ldr	r2, [r0, #0]
 80222bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80222c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80222c4:	3201      	adds	r2, #1
 80222c6:	f022 0201 	bic.w	r2, r2, #1
 80222ca:	9202      	str	r2, [sp, #8]
 80222cc:	f8db 2000 	ldr.w	r2, [fp]
 80222d0:	9203      	str	r2, [sp, #12]
 80222d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80222d6:	9a01      	ldr	r2, [sp, #4]
 80222d8:	2a00      	cmp	r2, #0
 80222da:	dc03      	bgt.n	80222e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80222dc:	9a05      	ldr	r2, [sp, #20]
 80222de:	2a00      	cmp	r2, #0
 80222e0:	f340 8162 	ble.w	80225a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80222e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80222e6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80222ea:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80222ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80222f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80222f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	dd0e      	ble.n	802231a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80222fc:	1402      	asrs	r2, r0, #16
 80222fe:	d405      	bmi.n	802230c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022300:	42ba      	cmp	r2, r7
 8022302:	da03      	bge.n	802230c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022304:	140a      	asrs	r2, r1, #16
 8022306:	d401      	bmi.n	802230c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022308:	42b2      	cmp	r2, r6
 802230a:	db07      	blt.n	802231c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802230c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802230e:	4410      	add	r0, r2
 8022310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022312:	3b01      	subs	r3, #1
 8022314:	4411      	add	r1, r2
 8022316:	3402      	adds	r4, #2
 8022318:	e7ee      	b.n	80222f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802231a:	d017      	beq.n	802234c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802231c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802231e:	1e5a      	subs	r2, r3, #1
 8022320:	fb05 0502 	mla	r5, r5, r2, r0
 8022324:	142d      	asrs	r5, r5, #16
 8022326:	d409      	bmi.n	802233c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022328:	42bd      	cmp	r5, r7
 802232a:	da07      	bge.n	802233c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802232c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802232e:	fb05 1202 	mla	r2, r5, r2, r1
 8022332:	1412      	asrs	r2, r2, #16
 8022334:	d402      	bmi.n	802233c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022336:	42b2      	cmp	r2, r6
 8022338:	f2c0 80c3 	blt.w	80224c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802233c:	2500      	movs	r5, #0
 802233e:	195a      	adds	r2, r3, r5
 8022340:	2a00      	cmp	r2, #0
 8022342:	dc3f      	bgt.n	80223c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8022344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022348:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802234c:	9b01      	ldr	r3, [sp, #4]
 802234e:	2b00      	cmp	r3, #0
 8022350:	f340 812a 	ble.w	80225a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8022354:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022358:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802235c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022360:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022362:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022366:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802236a:	eeb0 6a62 	vmov.f32	s12, s5
 802236e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022372:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022376:	ee77 2a62 	vsub.f32	s5, s14, s5
 802237a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802237e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022382:	eeb0 6a43 	vmov.f32	s12, s6
 8022386:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802238a:	ee12 2a90 	vmov	r2, s5
 802238e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022392:	fb92 f3f3 	sdiv	r3, r2, r3
 8022396:	ee13 2a10 	vmov	r2, s6
 802239a:	9313      	str	r3, [sp, #76]	; 0x4c
 802239c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802239e:	fb92 f3f3 	sdiv	r3, r2, r3
 80223a2:	9314      	str	r3, [sp, #80]	; 0x50
 80223a4:	9b01      	ldr	r3, [sp, #4]
 80223a6:	9a05      	ldr	r2, [sp, #20]
 80223a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223ac:	3b01      	subs	r3, #1
 80223ae:	9301      	str	r3, [sp, #4]
 80223b0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80223b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223b6:	eeb0 3a67 	vmov.f32	s6, s15
 80223ba:	bf08      	it	eq
 80223bc:	4613      	moveq	r3, r2
 80223be:	eef0 2a47 	vmov.f32	s5, s14
 80223c2:	e788      	b.n	80222d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80223c4:	1406      	asrs	r6, r0, #16
 80223c6:	d42c      	bmi.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80223c8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80223cc:	42b2      	cmp	r2, r6
 80223ce:	dd28      	ble.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80223d0:	140f      	asrs	r7, r1, #16
 80223d2:	d426      	bmi.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80223d4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80223d8:	42ba      	cmp	r2, r7
 80223da:	dd22      	ble.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80223dc:	9a02      	ldr	r2, [sp, #8]
 80223de:	fb07 6602 	mla	r6, r7, r2, r6
 80223e2:	0872      	lsrs	r2, r6, #1
 80223e4:	9f03      	ldr	r7, [sp, #12]
 80223e6:	5cba      	ldrb	r2, [r7, r2]
 80223e8:	07f6      	lsls	r6, r6, #31
 80223ea:	bf54      	ite	pl
 80223ec:	f002 020f 	andpl.w	r2, r2, #15
 80223f0:	1112      	asrmi	r2, r2, #4
 80223f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80223f6:	b2d2      	uxtb	r2, r2
 80223f8:	2aff      	cmp	r2, #255	; 0xff
 80223fa:	d118      	bne.n	802242e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80223fc:	f8d8 2000 	ldr.w	r2, [r8]
 8022400:	f06f 0601 	mvn.w	r6, #1
 8022404:	fb06 f705 	mul.w	r7, r6, r5
 8022408:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 802240c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8022410:	0956      	lsrs	r6, r2, #5
 8022412:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022416:	ea4c 0606 	orr.w	r6, ip, r6
 802241a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802241e:	4316      	orrs	r6, r2
 8022420:	53e6      	strh	r6, [r4, r7]
 8022422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022424:	4410      	add	r0, r2
 8022426:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022428:	3d01      	subs	r5, #1
 802242a:	4411      	add	r1, r2
 802242c:	e787      	b.n	802233e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802242e:	2a00      	cmp	r2, #0
 8022430:	d0f7      	beq.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022432:	f06f 0601 	mvn.w	r6, #1
 8022436:	436e      	muls	r6, r5
 8022438:	f8d8 c000 	ldr.w	ip, [r8]
 802243c:	f834 e006 	ldrh.w	lr, [r4, r6]
 8022440:	9604      	str	r6, [sp, #16]
 8022442:	fa1f f982 	uxth.w	r9, r2
 8022446:	ea4f 272e 	mov.w	r7, lr, asr #8
 802244a:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802244e:	43d2      	mvns	r2, r2
 8022450:	b2d2      	uxtb	r2, r2
 8022452:	fb16 f609 	smulbb	r6, r6, r9
 8022456:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802245a:	fb07 6702 	mla	r7, r7, r2, r6
 802245e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8022462:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022466:	fa5f fc8c 	uxtb.w	ip, ip
 802246a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802246e:	fa5f fe8e 	uxtb.w	lr, lr
 8022472:	fb1c fc09 	smulbb	ip, ip, r9
 8022476:	fb0e cc02 	mla	ip, lr, r2, ip
 802247a:	b2bf      	uxth	r7, r7
 802247c:	fb1a fa09 	smulbb	sl, sl, r9
 8022480:	fa1f fc8c 	uxth.w	ip, ip
 8022484:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022488:	fb06 a602 	mla	r6, r6, r2, sl
 802248c:	1c7a      	adds	r2, r7, #1
 802248e:	f10c 0a01 	add.w	sl, ip, #1
 8022492:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022496:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802249a:	b2b6      	uxth	r6, r6
 802249c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80224a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80224a4:	ea4a 0707 	orr.w	r7, sl, r7
 80224a8:	f106 0a01 	add.w	sl, r6, #1
 80224ac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80224b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80224b4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80224b8:	9a04      	ldr	r2, [sp, #16]
 80224ba:	ea47 070a 	orr.w	r7, r7, sl
 80224be:	52a7      	strh	r7, [r4, r2]
 80224c0:	e7af      	b.n	8022422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80224c2:	f04f 0e00 	mov.w	lr, #0
 80224c6:	eba3 020e 	sub.w	r2, r3, lr
 80224ca:	2a00      	cmp	r2, #0
 80224cc:	f77f af3a 	ble.w	8022344 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80224d0:	9e02      	ldr	r6, [sp, #8]
 80224d2:	1402      	asrs	r2, r0, #16
 80224d4:	140d      	asrs	r5, r1, #16
 80224d6:	fb06 2505 	mla	r5, r6, r5, r2
 80224da:	086a      	lsrs	r2, r5, #1
 80224dc:	9e03      	ldr	r6, [sp, #12]
 80224de:	5cb2      	ldrb	r2, [r6, r2]
 80224e0:	07ed      	lsls	r5, r5, #31
 80224e2:	bf54      	ite	pl
 80224e4:	f002 020f 	andpl.w	r2, r2, #15
 80224e8:	1112      	asrmi	r2, r2, #4
 80224ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80224ee:	b2d2      	uxtb	r2, r2
 80224f0:	2aff      	cmp	r2, #255	; 0xff
 80224f2:	d115      	bne.n	8022520 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80224f4:	f8d8 5000 	ldr.w	r5, [r8]
 80224f8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80224fc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8022500:	096a      	lsrs	r2, r5, #5
 8022502:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022506:	4332      	orrs	r2, r6
 8022508:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802250c:	432a      	orrs	r2, r5
 802250e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8022512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022514:	4410      	add	r0, r2
 8022516:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022518:	f10e 0e01 	add.w	lr, lr, #1
 802251c:	4411      	add	r1, r2
 802251e:	e7d2      	b.n	80224c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022520:	2a00      	cmp	r2, #0
 8022522:	d0f6      	beq.n	8022512 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8022524:	f8d8 7000 	ldr.w	r7, [r8]
 8022528:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802252c:	fa1f f982 	uxth.w	r9, r2
 8022530:	ea4f 262c 	mov.w	r6, ip, asr #8
 8022534:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8022538:	43d2      	mvns	r2, r2
 802253a:	b2d2      	uxtb	r2, r2
 802253c:	fb15 f509 	smulbb	r5, r5, r9
 8022540:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022544:	fb06 5602 	mla	r6, r6, r2, r5
 8022548:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802254c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022550:	b2ff      	uxtb	r7, r7
 8022552:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022556:	fa5f fc8c 	uxtb.w	ip, ip
 802255a:	fb17 f709 	smulbb	r7, r7, r9
 802255e:	fb0c 7702 	mla	r7, ip, r2, r7
 8022562:	b2b6      	uxth	r6, r6
 8022564:	fb1a fa09 	smulbb	sl, sl, r9
 8022568:	b2bf      	uxth	r7, r7
 802256a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802256e:	fb05 a502 	mla	r5, r5, r2, sl
 8022572:	1c72      	adds	r2, r6, #1
 8022574:	f107 0a01 	add.w	sl, r7, #1
 8022578:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802257c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022580:	b2ad      	uxth	r5, r5
 8022582:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022586:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802258a:	ea4a 0606 	orr.w	r6, sl, r6
 802258e:	f105 0a01 	add.w	sl, r5, #1
 8022592:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022596:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802259a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802259e:	ea46 060a 	orr.w	r6, r6, sl
 80225a2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80225a6:	e7b4      	b.n	8022512 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80225a8:	b007      	add	sp, #28
 80225aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225ae:	bf00      	nop
 80225b0:	2000b4cc 	.word	0x2000b4cc

080225b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80225b4:	4770      	bx	lr

080225b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80225b6:	4770      	bx	lr

080225b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80225b8:	4770      	bx	lr

080225ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80225ba:	4770      	bx	lr

080225bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80225bc:	4770      	bx	lr

080225be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80225be:	4770      	bx	lr

080225c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80225c0:	4770      	bx	lr

080225c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80225c2:	4770      	bx	lr

080225c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80225c4:	4770      	bx	lr

080225c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80225c6:	4770      	bx	lr

080225c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80225c8:	4770      	bx	lr

080225ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80225ca:	4770      	bx	lr

080225cc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80225cc:	4770      	bx	lr

080225ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80225ce:	4770      	bx	lr

080225d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80225d0:	4770      	bx	lr

080225d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80225d2:	4770      	bx	lr

080225d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80225d4:	4770      	bx	lr

080225d6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80225d6:	4770      	bx	lr

080225d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80225d8:	4770      	bx	lr

080225da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80225da:	4770      	bx	lr

080225dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80225dc:	4770      	bx	lr

080225de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80225de:	4770      	bx	lr

080225e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80225e0:	4770      	bx	lr

080225e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80225e2:	4770      	bx	lr

080225e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80225e4:	4770      	bx	lr

080225e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80225e6:	4770      	bx	lr

080225e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80225e8:	4770      	bx	lr

080225ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80225ea:	4770      	bx	lr

080225ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80225ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80225f0:	b088      	sub	sp, #32
 80225f2:	ac08      	add	r4, sp, #32
 80225f4:	4606      	mov	r6, r0
 80225f6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80225fa:	4620      	mov	r0, r4
 80225fc:	4688      	mov	r8, r1
 80225fe:	4691      	mov	r9, r2
 8022600:	f7fd fc66 	bl	801fed0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022604:	6833      	ldr	r3, [r6, #0]
 8022606:	4605      	mov	r5, r0
 8022608:	4620      	mov	r0, r4
 802260a:	699f      	ldr	r7, [r3, #24]
 802260c:	f7fd fb74 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022610:	4682      	mov	sl, r0
 8022612:	4620      	mov	r0, r4
 8022614:	f7fd fba4 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022618:	9500      	str	r5, [sp, #0]
 802261a:	e9cd a001 	strd	sl, r0, [sp, #4]
 802261e:	464b      	mov	r3, r9
 8022620:	a806      	add	r0, sp, #24
 8022622:	4642      	mov	r2, r8
 8022624:	4631      	mov	r1, r6
 8022626:	47b8      	blx	r7
 8022628:	4628      	mov	r0, r5
 802262a:	b008      	add	sp, #32
 802262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08022630 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8022630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022634:	2300      	movs	r3, #0
 8022636:	9300      	str	r3, [sp, #0]
 8022638:	4b3d      	ldr	r3, [pc, #244]	; (8022730 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 802263a:	781b      	ldrb	r3, [r3, #0]
 802263c:	2b00      	cmp	r3, #0
 802263e:	d137      	bne.n	80226b0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8022640:	4a3c      	ldr	r2, [pc, #240]	; (8022734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8022642:	f9b2 2000 	ldrsh.w	r2, [r2]
 8022646:	f8ad 2004 	strh.w	r2, [sp, #4]
 802264a:	2b00      	cmp	r3, #0
 802264c:	d132      	bne.n	80226b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802264e:	4b3a      	ldr	r3, [pc, #232]	; (8022738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8022650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022654:	6808      	ldr	r0, [r1, #0]
 8022656:	6849      	ldr	r1, [r1, #4]
 8022658:	f8ad 3006 	strh.w	r3, [sp, #6]
 802265c:	ac02      	add	r4, sp, #8
 802265e:	ab02      	add	r3, sp, #8
 8022660:	c303      	stmia	r3!, {r0, r1}
 8022662:	4669      	mov	r1, sp
 8022664:	4620      	mov	r0, r4
 8022666:	f7fa fd35 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802266a:	4668      	mov	r0, sp
 802266c:	f7fa fd0a 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022670:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8022674:	f8bd 2000 	ldrh.w	r2, [sp]
 8022678:	4d30      	ldr	r5, [pc, #192]	; (802273c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802267a:	4413      	add	r3, r2
 802267c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8022680:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022684:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8022688:	6828      	ldr	r0, [r5, #0]
 802268a:	4413      	add	r3, r2
 802268c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022690:	6803      	ldr	r3, [r0, #0]
 8022692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022694:	4798      	blx	r3
 8022696:	f010 0f01 	tst.w	r0, #1
 802269a:	462f      	mov	r7, r5
 802269c:	d00c      	beq.n	80226b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802269e:	6828      	ldr	r0, [r5, #0]
 80226a0:	6803      	ldr	r3, [r0, #0]
 80226a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80226a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80226a8:	4798      	blx	r3
 80226aa:	b004      	add	sp, #16
 80226ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80226b0:	4a21      	ldr	r2, [pc, #132]	; (8022738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80226b2:	e7c6      	b.n	8022642 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80226b4:	4b1f      	ldr	r3, [pc, #124]	; (8022734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80226b6:	e7cb      	b.n	8022650 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80226b8:	6838      	ldr	r0, [r7, #0]
 80226ba:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80226be:	6803      	ldr	r3, [r0, #0]
 80226c0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80226c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c6:	4798      	blx	r3
 80226c8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80226cc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80226d0:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80226d4:	fb16 3602 	smlabb	r6, r6, r2, r3
 80226d8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80226dc:	6838      	ldr	r0, [r7, #0]
 80226de:	6803      	ldr	r3, [r0, #0]
 80226e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226e2:	4798      	blx	r3
 80226e4:	4a13      	ldr	r2, [pc, #76]	; (8022734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80226e6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80226ea:	8813      	ldrh	r3, [r2, #0]
 80226ec:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80226f0:	fb03 1404 	mla	r4, r3, r4, r1
 80226f4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80226f8:	435d      	muls	r5, r3
 80226fa:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80226fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8022702:	4691      	mov	r9, r2
 8022704:	6838      	ldr	r0, [r7, #0]
 8022706:	42ac      	cmp	r4, r5
 8022708:	6803      	ldr	r3, [r0, #0]
 802270a:	d20e      	bcs.n	802272a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 802270c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8022710:	4632      	mov	r2, r6
 8022712:	4643      	mov	r3, r8
 8022714:	4621      	mov	r1, r4
 8022716:	47d0      	blx	sl
 8022718:	f8b9 3000 	ldrh.w	r3, [r9]
 802271c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8022720:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8022724:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8022728:	e7ec      	b.n	8022704 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 802272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802272c:	4798      	blx	r3
 802272e:	e7bc      	b.n	80226aa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8022730:	2000b4bc 	.word	0x2000b4bc
 8022734:	2000b4be 	.word	0x2000b4be
 8022738:	2000b4c0 	.word	0x2000b4c0
 802273c:	2000b4c4 	.word	0x2000b4c4

08022740 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022744:	b08b      	sub	sp, #44	; 0x2c
 8022746:	460f      	mov	r7, r1
 8022748:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 802274c:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8022750:	4616      	mov	r6, r2
 8022752:	f1bb 0f00 	cmp.w	fp, #0
 8022756:	d049      	beq.n	80227ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022758:	6810      	ldr	r0, [r2, #0]
 802275a:	6851      	ldr	r1, [r2, #4]
 802275c:	ad06      	add	r5, sp, #24
 802275e:	c503      	stmia	r5!, {r0, r1}
 8022760:	6818      	ldr	r0, [r3, #0]
 8022762:	6859      	ldr	r1, [r3, #4]
 8022764:	ad08      	add	r5, sp, #32
 8022766:	c503      	stmia	r5!, {r0, r1}
 8022768:	a806      	add	r0, sp, #24
 802276a:	f7fa fc8b 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802276e:	4631      	mov	r1, r6
 8022770:	a808      	add	r0, sp, #32
 8022772:	f7fa fcaf 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022776:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802277a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802277e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8022782:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8022786:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802278a:	fb16 2103 	smlabb	r1, r6, r3, r2
 802278e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8022792:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8022796:	4f5f      	ldr	r7, [pc, #380]	; (8022914 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8022798:	440a      	add	r2, r1
 802279a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802279e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80227a2:	6838      	ldr	r0, [r7, #0]
 80227a4:	4413      	add	r3, r2
 80227a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80227aa:	6803      	ldr	r3, [r0, #0]
 80227ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227ae:	4798      	blx	r3
 80227b0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80227b4:	46b9      	mov	r9, r7
 80227b6:	d01c      	beq.n	80227f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80227b8:	f010 0f04 	tst.w	r0, #4
 80227bc:	d01d      	beq.n	80227fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80227be:	f8d9 0000 	ldr.w	r0, [r9]
 80227c2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80227c6:	6801      	ldr	r1, [r0, #0]
 80227c8:	f8cd b00c 	str.w	fp, [sp, #12]
 80227cc:	2700      	movs	r7, #0
 80227ce:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80227d2:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80227d6:	9402      	str	r4, [sp, #8]
 80227d8:	b2ad      	uxth	r5, r5
 80227da:	fa1f f488 	uxth.w	r4, r8
 80227de:	9501      	str	r5, [sp, #4]
 80227e0:	9400      	str	r4, [sp, #0]
 80227e2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80227e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80227e8:	4631      	mov	r1, r6
 80227ea:	47a0      	blx	r4
 80227ec:	b00b      	add	sp, #44	; 0x2c
 80227ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227f2:	b914      	cbnz	r4, 80227fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80227f4:	f010 0f01 	tst.w	r0, #1
 80227f8:	e7e0      	b.n	80227bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80227fa:	f8d9 0000 	ldr.w	r0, [r9]
 80227fe:	6803      	ldr	r3, [r0, #0]
 8022800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022802:	4798      	blx	r3
 8022804:	4b44      	ldr	r3, [pc, #272]	; (8022918 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8022806:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802280a:	881a      	ldrh	r2, [r3, #0]
 802280c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8022810:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8022814:	fb02 1404 	mla	r4, r2, r4, r1
 8022818:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802281c:	469a      	mov	sl, r3
 802281e:	fb05 f502 	mul.w	r5, r5, r2
 8022822:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8022826:	d059      	beq.n	80228dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8022828:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 802282c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8022830:	fa1f f28b 	uxth.w	r2, fp
 8022834:	fa1f f989 	uxth.w	r9, r9
 8022838:	469e      	mov	lr, r3
 802283a:	42ac      	cmp	r4, r5
 802283c:	d264      	bcs.n	8022908 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802283e:	eb04 0a07 	add.w	sl, r4, r7
 8022842:	4554      	cmp	r4, sl
 8022844:	d23d      	bcs.n	80228c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8022846:	8821      	ldrh	r1, [r4, #0]
 8022848:	f836 3b02 	ldrh.w	r3, [r6], #2
 802284c:	1208      	asrs	r0, r1, #8
 802284e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022852:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022856:	fb10 f009 	smulbb	r0, r0, r9
 802285a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802285e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022862:	00c9      	lsls	r1, r1, #3
 8022864:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022868:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802286c:	10d8      	asrs	r0, r3, #3
 802286e:	b2c9      	uxtb	r1, r1
 8022870:	00db      	lsls	r3, r3, #3
 8022872:	fa1f fc8c 	uxth.w	ip, ip
 8022876:	fb1b fb09 	smulbb	fp, fp, r9
 802287a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802287e:	b2db      	uxtb	r3, r3
 8022880:	fb11 f109 	smulbb	r1, r1, r9
 8022884:	fb00 b002 	mla	r0, r0, r2, fp
 8022888:	fb03 1302 	mla	r3, r3, r2, r1
 802288c:	f10c 0b01 	add.w	fp, ip, #1
 8022890:	b29b      	uxth	r3, r3
 8022892:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022896:	b280      	uxth	r0, r0
 8022898:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 802289c:	f103 0c01 	add.w	ip, r3, #1
 80228a0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80228a4:	1c43      	adds	r3, r0, #1
 80228a6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80228aa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80228ae:	0940      	lsrs	r0, r0, #5
 80228b0:	ea4c 0c0b 	orr.w	ip, ip, fp
 80228b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80228b8:	ea4c 0c00 	orr.w	ip, ip, r0
 80228bc:	f824 cb02 	strh.w	ip, [r4], #2
 80228c0:	e7bf      	b.n	8022842 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80228c2:	f8be 3000 	ldrh.w	r3, [lr]
 80228c6:	eba3 0308 	sub.w	r3, r3, r8
 80228ca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80228ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80228d2:	eba3 0308 	sub.w	r3, r3, r8
 80228d6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80228da:	e7ae      	b.n	802283a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80228dc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80228e0:	f8d9 0000 	ldr.w	r0, [r9]
 80228e4:	42ac      	cmp	r4, r5
 80228e6:	6803      	ldr	r3, [r0, #0]
 80228e8:	d20e      	bcs.n	8022908 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80228ea:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80228ee:	4632      	mov	r2, r6
 80228f0:	463b      	mov	r3, r7
 80228f2:	4621      	mov	r1, r4
 80228f4:	47c0      	blx	r8
 80228f6:	f8ba 3000 	ldrh.w	r3, [sl]
 80228fa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80228fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022902:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8022906:	e7eb      	b.n	80228e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8022908:	4b02      	ldr	r3, [pc, #8]	; (8022914 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802290a:	6818      	ldr	r0, [r3, #0]
 802290c:	6803      	ldr	r3, [r0, #0]
 802290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022910:	4798      	blx	r3
 8022912:	e76b      	b.n	80227ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022914:	2000b4c4 	.word	0x2000b4c4
 8022918:	2000b4be 	.word	0x2000b4be

0802291c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802291c:	b510      	push	{r4, lr}
 802291e:	2104      	movs	r1, #4
 8022920:	4604      	mov	r4, r0
 8022922:	f008 ffb8 	bl	802b896 <_ZdlPvj>
 8022926:	4620      	mov	r0, r4
 8022928:	bd10      	pop	{r4, pc}

0802292a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802292a:	b510      	push	{r4, lr}
 802292c:	2104      	movs	r1, #4
 802292e:	4604      	mov	r4, r0
 8022930:	f008 ffb1 	bl	802b896 <_ZdlPvj>
 8022934:	4620      	mov	r0, r4
 8022936:	bd10      	pop	{r4, pc}

08022938 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022938:	b510      	push	{r4, lr}
 802293a:	2104      	movs	r1, #4
 802293c:	4604      	mov	r4, r0
 802293e:	f008 ffaa 	bl	802b896 <_ZdlPvj>
 8022942:	4620      	mov	r0, r4
 8022944:	bd10      	pop	{r4, pc}

08022946 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022946:	b510      	push	{r4, lr}
 8022948:	2104      	movs	r1, #4
 802294a:	4604      	mov	r4, r0
 802294c:	f008 ffa3 	bl	802b896 <_ZdlPvj>
 8022950:	4620      	mov	r0, r4
 8022952:	bd10      	pop	{r4, pc}

08022954 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022954:	b510      	push	{r4, lr}
 8022956:	2104      	movs	r1, #4
 8022958:	4604      	mov	r4, r0
 802295a:	f008 ff9c 	bl	802b896 <_ZdlPvj>
 802295e:	4620      	mov	r0, r4
 8022960:	bd10      	pop	{r4, pc}

08022962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022962:	b510      	push	{r4, lr}
 8022964:	2104      	movs	r1, #4
 8022966:	4604      	mov	r4, r0
 8022968:	f008 ff95 	bl	802b896 <_ZdlPvj>
 802296c:	4620      	mov	r0, r4
 802296e:	bd10      	pop	{r4, pc}

08022970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022970:	b510      	push	{r4, lr}
 8022972:	2104      	movs	r1, #4
 8022974:	4604      	mov	r4, r0
 8022976:	f008 ff8e 	bl	802b896 <_ZdlPvj>
 802297a:	4620      	mov	r0, r4
 802297c:	bd10      	pop	{r4, pc}

0802297e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802297e:	b510      	push	{r4, lr}
 8022980:	2104      	movs	r1, #4
 8022982:	4604      	mov	r4, r0
 8022984:	f008 ff87 	bl	802b896 <_ZdlPvj>
 8022988:	4620      	mov	r0, r4
 802298a:	bd10      	pop	{r4, pc}

0802298c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802298c:	b510      	push	{r4, lr}
 802298e:	2104      	movs	r1, #4
 8022990:	4604      	mov	r4, r0
 8022992:	f008 ff80 	bl	802b896 <_ZdlPvj>
 8022996:	4620      	mov	r0, r4
 8022998:	bd10      	pop	{r4, pc}

0802299a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802299a:	b510      	push	{r4, lr}
 802299c:	2104      	movs	r1, #4
 802299e:	4604      	mov	r4, r0
 80229a0:	f008 ff79 	bl	802b896 <_ZdlPvj>
 80229a4:	4620      	mov	r0, r4
 80229a6:	bd10      	pop	{r4, pc}

080229a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80229a8:	b510      	push	{r4, lr}
 80229aa:	2104      	movs	r1, #4
 80229ac:	4604      	mov	r4, r0
 80229ae:	f008 ff72 	bl	802b896 <_ZdlPvj>
 80229b2:	4620      	mov	r0, r4
 80229b4:	bd10      	pop	{r4, pc}

080229b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80229b6:	b510      	push	{r4, lr}
 80229b8:	2104      	movs	r1, #4
 80229ba:	4604      	mov	r4, r0
 80229bc:	f008 ff6b 	bl	802b896 <_ZdlPvj>
 80229c0:	4620      	mov	r0, r4
 80229c2:	bd10      	pop	{r4, pc}

080229c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80229c4:	b510      	push	{r4, lr}
 80229c6:	2104      	movs	r1, #4
 80229c8:	4604      	mov	r4, r0
 80229ca:	f008 ff64 	bl	802b896 <_ZdlPvj>
 80229ce:	4620      	mov	r0, r4
 80229d0:	bd10      	pop	{r4, pc}

080229d2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80229d2:	b510      	push	{r4, lr}
 80229d4:	2104      	movs	r1, #4
 80229d6:	4604      	mov	r4, r0
 80229d8:	f008 ff5d 	bl	802b896 <_ZdlPvj>
 80229dc:	4620      	mov	r0, r4
 80229de:	bd10      	pop	{r4, pc}

080229e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80229e0:	b510      	push	{r4, lr}
 80229e2:	2104      	movs	r1, #4
 80229e4:	4604      	mov	r4, r0
 80229e6:	f008 ff56 	bl	802b896 <_ZdlPvj>
 80229ea:	4620      	mov	r0, r4
 80229ec:	bd10      	pop	{r4, pc}

080229ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80229ee:	b510      	push	{r4, lr}
 80229f0:	2104      	movs	r1, #4
 80229f2:	4604      	mov	r4, r0
 80229f4:	f008 ff4f 	bl	802b896 <_ZdlPvj>
 80229f8:	4620      	mov	r0, r4
 80229fa:	bd10      	pop	{r4, pc}

080229fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80229fc:	b510      	push	{r4, lr}
 80229fe:	2104      	movs	r1, #4
 8022a00:	4604      	mov	r4, r0
 8022a02:	f008 ff48 	bl	802b896 <_ZdlPvj>
 8022a06:	4620      	mov	r0, r4
 8022a08:	bd10      	pop	{r4, pc}

08022a0a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8022a0a:	b510      	push	{r4, lr}
 8022a0c:	2104      	movs	r1, #4
 8022a0e:	4604      	mov	r4, r0
 8022a10:	f008 ff41 	bl	802b896 <_ZdlPvj>
 8022a14:	4620      	mov	r0, r4
 8022a16:	bd10      	pop	{r4, pc}

08022a18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022a18:	b510      	push	{r4, lr}
 8022a1a:	2104      	movs	r1, #4
 8022a1c:	4604      	mov	r4, r0
 8022a1e:	f008 ff3a 	bl	802b896 <_ZdlPvj>
 8022a22:	4620      	mov	r0, r4
 8022a24:	bd10      	pop	{r4, pc}

08022a26 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022a26:	b510      	push	{r4, lr}
 8022a28:	2104      	movs	r1, #4
 8022a2a:	4604      	mov	r4, r0
 8022a2c:	f008 ff33 	bl	802b896 <_ZdlPvj>
 8022a30:	4620      	mov	r0, r4
 8022a32:	bd10      	pop	{r4, pc}

08022a34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022a34:	b510      	push	{r4, lr}
 8022a36:	2104      	movs	r1, #4
 8022a38:	4604      	mov	r4, r0
 8022a3a:	f008 ff2c 	bl	802b896 <_ZdlPvj>
 8022a3e:	4620      	mov	r0, r4
 8022a40:	bd10      	pop	{r4, pc}

08022a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022a42:	b510      	push	{r4, lr}
 8022a44:	2104      	movs	r1, #4
 8022a46:	4604      	mov	r4, r0
 8022a48:	f008 ff25 	bl	802b896 <_ZdlPvj>
 8022a4c:	4620      	mov	r0, r4
 8022a4e:	bd10      	pop	{r4, pc}

08022a50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022a50:	b510      	push	{r4, lr}
 8022a52:	2104      	movs	r1, #4
 8022a54:	4604      	mov	r4, r0
 8022a56:	f008 ff1e 	bl	802b896 <_ZdlPvj>
 8022a5a:	4620      	mov	r0, r4
 8022a5c:	bd10      	pop	{r4, pc}

08022a5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022a5e:	b510      	push	{r4, lr}
 8022a60:	2104      	movs	r1, #4
 8022a62:	4604      	mov	r4, r0
 8022a64:	f008 ff17 	bl	802b896 <_ZdlPvj>
 8022a68:	4620      	mov	r0, r4
 8022a6a:	bd10      	pop	{r4, pc}

08022a6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8022a6c:	b510      	push	{r4, lr}
 8022a6e:	2104      	movs	r1, #4
 8022a70:	4604      	mov	r4, r0
 8022a72:	f008 ff10 	bl	802b896 <_ZdlPvj>
 8022a76:	4620      	mov	r0, r4
 8022a78:	bd10      	pop	{r4, pc}

08022a7a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8022a7a:	b510      	push	{r4, lr}
 8022a7c:	2104      	movs	r1, #4
 8022a7e:	4604      	mov	r4, r0
 8022a80:	f008 ff09 	bl	802b896 <_ZdlPvj>
 8022a84:	4620      	mov	r0, r4
 8022a86:	bd10      	pop	{r4, pc}

08022a88 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022a88:	b510      	push	{r4, lr}
 8022a8a:	2104      	movs	r1, #4
 8022a8c:	4604      	mov	r4, r0
 8022a8e:	f008 ff02 	bl	802b896 <_ZdlPvj>
 8022a92:	4620      	mov	r0, r4
 8022a94:	bd10      	pop	{r4, pc}

08022a96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8022a96:	b510      	push	{r4, lr}
 8022a98:	2104      	movs	r1, #4
 8022a9a:	4604      	mov	r4, r0
 8022a9c:	f008 fefb 	bl	802b896 <_ZdlPvj>
 8022aa0:	4620      	mov	r0, r4
 8022aa2:	bd10      	pop	{r4, pc}

08022aa4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8022aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aa8:	b091      	sub	sp, #68	; 0x44
 8022aaa:	469b      	mov	fp, r3
 8022aac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8022ab0:	4616      	mov	r6, r2
 8022ab2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8022ab6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022aba:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8022abe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022ac2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022ac6:	4604      	mov	r4, r0
 8022ac8:	460d      	mov	r5, r1
 8022aca:	4640      	mov	r0, r8
 8022acc:	4659      	mov	r1, fp
 8022ace:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022ad2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8022ad6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8022ada:	f7f7 f91d 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8022ade:	4631      	mov	r1, r6
 8022ae0:	4640      	mov	r0, r8
 8022ae2:	f7f7 f919 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8022ae6:	4b74      	ldr	r3, [pc, #464]	; (8022cb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8022ae8:	8818      	ldrh	r0, [r3, #0]
 8022aea:	4b74      	ldr	r3, [pc, #464]	; (8022cbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8022aec:	8819      	ldrh	r1, [r3, #0]
 8022aee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	b202      	sxth	r2, r0
 8022af6:	b20e      	sxth	r6, r1
 8022af8:	da07      	bge.n	8022b0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8022afa:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8022afe:	4463      	add	r3, ip
 8022b00:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022b04:	2300      	movs	r3, #0
 8022b06:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8022b0a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022b0e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022b12:	1ad2      	subs	r2, r2, r3
 8022b14:	4594      	cmp	ip, r2
 8022b16:	bfc4      	itt	gt
 8022b18:	1ac2      	subgt	r2, r0, r3
 8022b1a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8022b1e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022b22:	2a00      	cmp	r2, #0
 8022b24:	da07      	bge.n	8022b36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8022b26:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8022b2a:	4462      	add	r2, ip
 8022b2c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8022b30:	2200      	movs	r2, #0
 8022b32:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8022b36:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8022b3a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8022b3e:	eba6 060a 	sub.w	r6, r6, sl
 8022b42:	42b2      	cmp	r2, r6
 8022b44:	bfc4      	itt	gt
 8022b46:	eba1 020a 	subgt.w	r2, r1, sl
 8022b4a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8022b4e:	4a5c      	ldr	r2, [pc, #368]	; (8022cc0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8022b50:	7812      	ldrb	r2, [r2, #0]
 8022b52:	b9a2      	cbnz	r2, 8022b7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8022b54:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8022b58:	4286      	cmp	r6, r0
 8022b5a:	4640      	mov	r0, r8
 8022b5c:	9303      	str	r3, [sp, #12]
 8022b5e:	bf14      	ite	ne
 8022b60:	2600      	movne	r6, #0
 8022b62:	2601      	moveq	r6, #1
 8022b64:	f7f7 f91b 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b68:	9b03      	ldr	r3, [sp, #12]
 8022b6a:	b160      	cbz	r0, 8022b86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	8023      	strh	r3, [r4, #0]
 8022b70:	8063      	strh	r3, [r4, #2]
 8022b72:	80a3      	strh	r3, [r4, #4]
 8022b74:	4620      	mov	r0, r4
 8022b76:	80e3      	strh	r3, [r4, #6]
 8022b78:	b011      	add	sp, #68	; 0x44
 8022b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022b82:	428e      	cmp	r6, r1
 8022b84:	e7e9      	b.n	8022b5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8022b86:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022b8a:	9205      	str	r2, [sp, #20]
 8022b8c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8022b90:	9206      	str	r2, [sp, #24]
 8022b92:	f8bb 2000 	ldrh.w	r2, [fp]
 8022b96:	900e      	str	r0, [sp, #56]	; 0x38
 8022b98:	1a9b      	subs	r3, r3, r2
 8022b9a:	b21b      	sxth	r3, r3
 8022b9c:	9303      	str	r3, [sp, #12]
 8022b9e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022ba2:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8022ba6:	ebaa 0a03 	sub.w	sl, sl, r3
 8022baa:	fa0f f38a 	sxth.w	r3, sl
 8022bae:	9304      	str	r3, [sp, #16]
 8022bb0:	9b03      	ldr	r3, [sp, #12]
 8022bb2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8022bb6:	9b04      	ldr	r3, [sp, #16]
 8022bb8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022bbc:	9b05      	ldr	r3, [sp, #20]
 8022bbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8022bc2:	a90e      	add	r1, sp, #56	; 0x38
 8022bc4:	9b06      	ldr	r3, [sp, #24]
 8022bc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022bca:	a80c      	add	r0, sp, #48	; 0x30
 8022bcc:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8022bd0:	f7fa fa80 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bd4:	4640      	mov	r0, r8
 8022bd6:	f7fa fa55 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bda:	a80e      	add	r0, sp, #56	; 0x38
 8022bdc:	f7fa fa52 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022be0:	4b38      	ldr	r3, [pc, #224]	; (8022cc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022be2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022be6:	881b      	ldrh	r3, [r3, #0]
 8022be8:	9307      	str	r3, [sp, #28]
 8022bea:	682b      	ldr	r3, [r5, #0]
 8022bec:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8022cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bf2:	4628      	mov	r0, r5
 8022bf4:	4798      	blx	r3
 8022bf6:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8022bfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8022bfe:	4681      	mov	r9, r0
 8022c00:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8022c04:	f8db 0000 	ldr.w	r0, [fp]
 8022c08:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8022c0a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022c0e:	6803      	ldr	r3, [r0, #0]
 8022c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c12:	4798      	blx	r3
 8022c14:	4607      	mov	r7, r0
 8022c16:	f8db 0000 	ldr.w	r0, [fp]
 8022c1a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8022c1e:	6803      	ldr	r3, [r0, #0]
 8022c20:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022c24:	9109      	str	r1, [sp, #36]	; 0x24
 8022c26:	9208      	str	r2, [sp, #32]
 8022c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c2a:	4798      	blx	r3
 8022c2c:	f010 0f01 	tst.w	r0, #1
 8022c30:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022c34:	d012      	beq.n	8022c5c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8022c36:	f8db 0000 	ldr.w	r0, [fp]
 8022c3a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8022c3e:	6803      	ldr	r3, [r0, #0]
 8022c40:	9200      	str	r2, [sp, #0]
 8022c42:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8022c44:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022c48:	462b      	mov	r3, r5
 8022c4a:	47b0      	blx	r6
 8022c4c:	9b03      	ldr	r3, [sp, #12]
 8022c4e:	8023      	strh	r3, [r4, #0]
 8022c50:	9b04      	ldr	r3, [sp, #16]
 8022c52:	8063      	strh	r3, [r4, #2]
 8022c54:	9b05      	ldr	r3, [sp, #20]
 8022c56:	80a3      	strh	r3, [r4, #4]
 8022c58:	9b06      	ldr	r3, [sp, #24]
 8022c5a:	e78b      	b.n	8022b74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8022c5c:	fb09 f202 	mul.w	r2, r9, r2
 8022c60:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022c64:	440f      	add	r7, r1
 8022c66:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8022c6a:	b166      	cbz	r6, 8022c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022c6c:	9a07      	ldr	r2, [sp, #28]
 8022c6e:	4592      	cmp	sl, r2
 8022c70:	d109      	bne.n	8022c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022c72:	f8db 0000 	ldr.w	r0, [fp]
 8022c76:	6802      	ldr	r2, [r0, #0]
 8022c78:	fb09 f303 	mul.w	r3, r9, r3
 8022c7c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8022c7e:	4629      	mov	r1, r5
 8022c80:	463a      	mov	r2, r7
 8022c82:	47b0      	blx	r6
 8022c84:	e7e2      	b.n	8022c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022c86:	fb0a f303 	mul.w	r3, sl, r3
 8022c8a:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8022cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022c8e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8022c92:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8022c96:	4545      	cmp	r5, r8
 8022c98:	d2d8      	bcs.n	8022c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022c9a:	f8db 0000 	ldr.w	r0, [fp]
 8022c9e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022ca2:	6802      	ldr	r2, [r0, #0]
 8022ca4:	4629      	mov	r1, r5
 8022ca6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8022caa:	005b      	lsls	r3, r3, #1
 8022cac:	463a      	mov	r2, r7
 8022cae:	47d0      	blx	sl
 8022cb0:	444f      	add	r7, r9
 8022cb2:	4435      	add	r5, r6
 8022cb4:	e7ef      	b.n	8022c96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8022cb6:	bf00      	nop
 8022cb8:	2000b4b8 	.word	0x2000b4b8
 8022cbc:	2000b4ba 	.word	0x2000b4ba
 8022cc0:	2000b4bc 	.word	0x2000b4bc
 8022cc4:	2000b4be 	.word	0x2000b4be
 8022cc8:	2000b4c4 	.word	0x2000b4c4

08022ccc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cce:	4606      	mov	r6, r0
 8022cd0:	b087      	sub	sp, #28
 8022cd2:	460c      	mov	r4, r1
 8022cd4:	4617      	mov	r7, r2
 8022cd6:	461d      	mov	r5, r3
 8022cd8:	b333      	cbz	r3, 8022d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022cda:	4608      	mov	r0, r1
 8022cdc:	f7f7 f85f 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022ce0:	bb10      	cbnz	r0, 8022d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022ce2:	6820      	ldr	r0, [r4, #0]
 8022ce4:	6861      	ldr	r1, [r4, #4]
 8022ce6:	4c1c      	ldr	r4, [pc, #112]	; (8022d58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022ce8:	ab04      	add	r3, sp, #16
 8022cea:	c303      	stmia	r3!, {r0, r1}
 8022cec:	a804      	add	r0, sp, #16
 8022cee:	f7fa f9c9 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022cf2:	6820      	ldr	r0, [r4, #0]
 8022cf4:	6803      	ldr	r3, [r0, #0]
 8022cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022cf8:	4798      	blx	r3
 8022cfa:	2dff      	cmp	r5, #255	; 0xff
 8022cfc:	d016      	beq.n	8022d2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8022cfe:	f010 0f08 	tst.w	r0, #8
 8022d02:	6820      	ldr	r0, [r4, #0]
 8022d04:	d015      	beq.n	8022d32 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022d06:	2400      	movs	r4, #0
 8022d08:	6801      	ldr	r1, [r0, #0]
 8022d0a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022d0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022d12:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022d16:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022d1a:	9401      	str	r4, [sp, #4]
 8022d1c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022d20:	9400      	str	r4, [sp, #0]
 8022d22:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8022d24:	4639      	mov	r1, r7
 8022d26:	47a0      	blx	r4
 8022d28:	b007      	add	sp, #28
 8022d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d2c:	f010 0f02 	tst.w	r0, #2
 8022d30:	e7e7      	b.n	8022d02 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022d32:	6803      	ldr	r3, [r0, #0]
 8022d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d36:	4798      	blx	r3
 8022d38:	4b08      	ldr	r3, [pc, #32]	; (8022d5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022d3a:	881a      	ldrh	r2, [r3, #0]
 8022d3c:	6833      	ldr	r3, [r6, #0]
 8022d3e:	e9cd 7500 	strd	r7, r5, [sp]
 8022d42:	4601      	mov	r1, r0
 8022d44:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8022d46:	4630      	mov	r0, r6
 8022d48:	ab04      	add	r3, sp, #16
 8022d4a:	47a8      	blx	r5
 8022d4c:	6820      	ldr	r0, [r4, #0]
 8022d4e:	6803      	ldr	r3, [r0, #0]
 8022d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d52:	4798      	blx	r3
 8022d54:	e7e8      	b.n	8022d28 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022d56:	bf00      	nop
 8022d58:	2000b4c4 	.word	0x2000b4c4
 8022d5c:	2000b4be 	.word	0x2000b4be

08022d60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d64:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8022d68:	9e08      	ldr	r6, [sp, #32]
 8022d6a:	4688      	mov	r8, r1
 8022d6c:	4614      	mov	r4, r2
 8022d6e:	461d      	mov	r5, r3
 8022d70:	2f00      	cmp	r7, #0
 8022d72:	f000 80a9 	beq.w	8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022d76:	4618      	mov	r0, r3
 8022d78:	f7f7 f811 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022d7c:	2800      	cmp	r0, #0
 8022d7e:	f040 80a3 	bne.w	8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022d82:	f9b5 1000 	ldrsh.w	r1, [r5]
 8022d86:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8022d8a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022d8e:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022d92:	fb04 1303 	mla	r3, r4, r3, r1
 8022d96:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8022d9a:	4365      	muls	r5, r4
 8022d9c:	2fff      	cmp	r7, #255	; 0xff
 8022d9e:	eba4 0200 	sub.w	r2, r4, r0
 8022da2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022da6:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022daa:	d04a      	beq.n	8022e42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8022dac:	b2bc      	uxth	r4, r7
 8022dae:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8022db2:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022db6:	fa5f f788 	uxtb.w	r7, r8
 8022dba:	b2f3      	uxtb	r3, r6
 8022dbc:	0040      	lsls	r0, r0, #1
 8022dbe:	fb0e fe04 	mul.w	lr, lr, r4
 8022dc2:	4367      	muls	r7, r4
 8022dc4:	4363      	muls	r3, r4
 8022dc6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022dca:	fa1f fc8c 	uxth.w	ip, ip
 8022dce:	42a9      	cmp	r1, r5
 8022dd0:	d27a      	bcs.n	8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022dd2:	eb01 0900 	add.w	r9, r1, r0
 8022dd6:	4549      	cmp	r1, r9
 8022dd8:	d231      	bcs.n	8022e3e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8022dda:	880a      	ldrh	r2, [r1, #0]
 8022ddc:	1214      	asrs	r4, r2, #8
 8022dde:	10d6      	asrs	r6, r2, #3
 8022de0:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022de4:	00d2      	lsls	r2, r2, #3
 8022de6:	b2d2      	uxtb	r2, r2
 8022de8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022dec:	fb14 f40c 	smulbb	r4, r4, ip
 8022df0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022df4:	4474      	add	r4, lr
 8022df6:	fb12 f20c 	smulbb	r2, r2, ip
 8022dfa:	b2a4      	uxth	r4, r4
 8022dfc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022e00:	441a      	add	r2, r3
 8022e02:	b292      	uxth	r2, r2
 8022e04:	f104 0a01 	add.w	sl, r4, #1
 8022e08:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022e0c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022e10:	fb16 f60c 	smulbb	r6, r6, ip
 8022e14:	f102 0a01 	add.w	sl, r2, #1
 8022e18:	443e      	add	r6, r7
 8022e1a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022e1e:	b2b6      	uxth	r6, r6
 8022e20:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022e24:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022e28:	4322      	orrs	r2, r4
 8022e2a:	1c74      	adds	r4, r6, #1
 8022e2c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022e30:	0976      	lsrs	r6, r6, #5
 8022e32:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022e36:	4332      	orrs	r2, r6
 8022e38:	f821 2b02 	strh.w	r2, [r1], #2
 8022e3c:	e7cb      	b.n	8022dd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8022e3e:	4441      	add	r1, r8
 8022e40:	e7c5      	b.n	8022dce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022e42:	4f22      	ldr	r7, [pc, #136]	; (8022ecc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8022e44:	0973      	lsrs	r3, r6, #5
 8022e46:	ea08 0707 	and.w	r7, r8, r7
 8022e4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e4e:	433b      	orrs	r3, r7
 8022e50:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022e54:	4333      	orrs	r3, r6
 8022e56:	07e7      	lsls	r7, r4, #31
 8022e58:	b29b      	uxth	r3, r3
 8022e5a:	d50b      	bpl.n	8022e74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8022e5c:	0040      	lsls	r0, r0, #1
 8022e5e:	0052      	lsls	r2, r2, #1
 8022e60:	42a9      	cmp	r1, r5
 8022e62:	d231      	bcs.n	8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022e64:	180c      	adds	r4, r1, r0
 8022e66:	42a1      	cmp	r1, r4
 8022e68:	d202      	bcs.n	8022e70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8022e6a:	f821 3b02 	strh.w	r3, [r1], #2
 8022e6e:	e7fa      	b.n	8022e66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8022e70:	4411      	add	r1, r2
 8022e72:	e7f5      	b.n	8022e60 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8022e74:	078e      	lsls	r6, r1, #30
 8022e76:	d008      	beq.n	8022e8a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022e78:	0066      	lsls	r6, r4, #1
 8022e7a:	460a      	mov	r2, r1
 8022e7c:	42aa      	cmp	r2, r5
 8022e7e:	d202      	bcs.n	8022e86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8022e80:	8013      	strh	r3, [r2, #0]
 8022e82:	4432      	add	r2, r6
 8022e84:	e7fa      	b.n	8022e7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8022e86:	3102      	adds	r1, #2
 8022e88:	3801      	subs	r0, #1
 8022e8a:	07c2      	lsls	r2, r0, #31
 8022e8c:	d50b      	bpl.n	8022ea6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022e8e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8022e92:	3a01      	subs	r2, #1
 8022e94:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8022e98:	0066      	lsls	r6, r4, #1
 8022e9a:	42aa      	cmp	r2, r5
 8022e9c:	d202      	bcs.n	8022ea4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8022e9e:	8013      	strh	r3, [r2, #0]
 8022ea0:	4432      	add	r2, r6
 8022ea2:	e7fa      	b.n	8022e9a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8022ea4:	3801      	subs	r0, #1
 8022ea6:	b178      	cbz	r0, 8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022ea8:	1040      	asrs	r0, r0, #1
 8022eaa:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022eae:	0080      	lsls	r0, r0, #2
 8022eb0:	0064      	lsls	r4, r4, #1
 8022eb2:	42a9      	cmp	r1, r5
 8022eb4:	d208      	bcs.n	8022ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022eb6:	180e      	adds	r6, r1, r0
 8022eb8:	460a      	mov	r2, r1
 8022eba:	42b2      	cmp	r2, r6
 8022ebc:	d202      	bcs.n	8022ec4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8022ebe:	f842 3b04 	str.w	r3, [r2], #4
 8022ec2:	e7fa      	b.n	8022eba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8022ec4:	4421      	add	r1, r4
 8022ec6:	e7f4      	b.n	8022eb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8022ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ecc:	00fff800 	.word	0x00fff800

08022ed0 <_ZN8touchgfx8LCD16bppC1Ev>:
 8022ed0:	2200      	movs	r2, #0
 8022ed2:	4910      	ldr	r1, [pc, #64]	; (8022f14 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8022ed4:	6042      	str	r2, [r0, #4]
 8022ed6:	6001      	str	r1, [r0, #0]
 8022ed8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8022edc:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8022ee0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022ee4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022ee8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8022eec:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8022ef0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8022ef4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8022ef8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8022efc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8022f00:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8022f04:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8022f08:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8022f0c:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8022f10:	4770      	bx	lr
 8022f12:	bf00      	nop
 8022f14:	0802f6bc 	.word	0x0802f6bc

08022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f1c:	460d      	mov	r5, r1
 8022f1e:	b08d      	sub	sp, #52	; 0x34
 8022f20:	4604      	mov	r4, r0
 8022f22:	6808      	ldr	r0, [r1, #0]
 8022f24:	6849      	ldr	r1, [r1, #4]
 8022f26:	4699      	mov	r9, r3
 8022f28:	ab08      	add	r3, sp, #32
 8022f2a:	c303      	stmia	r3!, {r0, r1}
 8022f2c:	6810      	ldr	r0, [r2, #0]
 8022f2e:	6851      	ldr	r1, [r2, #4]
 8022f30:	ab0a      	add	r3, sp, #40	; 0x28
 8022f32:	c303      	stmia	r3!, {r0, r1}
 8022f34:	a808      	add	r0, sp, #32
 8022f36:	f7fa f8a5 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f3a:	4629      	mov	r1, r5
 8022f3c:	a80a      	add	r0, sp, #40	; 0x28
 8022f3e:	f7fa f8c9 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f42:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022f46:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022f4a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022f4e:	4d63      	ldr	r5, [pc, #396]	; (80230dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022f50:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022f54:	6828      	ldr	r0, [r5, #0]
 8022f56:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022f5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022f62:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022f66:	440a      	add	r2, r1
 8022f68:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022f6c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022f70:	4413      	add	r3, r2
 8022f72:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022f76:	6803      	ldr	r3, [r0, #0]
 8022f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f7a:	4798      	blx	r3
 8022f7c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022f80:	d119      	bne.n	8022fb6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022f82:	f010 0f20 	tst.w	r0, #32
 8022f86:	6828      	ldr	r0, [r5, #0]
 8022f88:	d018      	beq.n	8022fbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022f8a:	2500      	movs	r5, #0
 8022f8c:	6801      	ldr	r1, [r0, #0]
 8022f8e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022f92:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022f96:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022f9a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8022f9e:	9502      	str	r5, [sp, #8]
 8022fa0:	b2b6      	uxth	r6, r6
 8022fa2:	fa1f f588 	uxth.w	r5, r8
 8022fa6:	9601      	str	r6, [sp, #4]
 8022fa8:	9500      	str	r5, [sp, #0]
 8022faa:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022fac:	4621      	mov	r1, r4
 8022fae:	47a8      	blx	r5
 8022fb0:	b00d      	add	sp, #52	; 0x34
 8022fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022fba:	e7e4      	b.n	8022f86 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022fbc:	6803      	ldr	r3, [r0, #0]
 8022fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022fc0:	4798      	blx	r3
 8022fc2:	4947      	ldr	r1, [pc, #284]	; (80230e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022fc4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022fc8:	880b      	ldrh	r3, [r1, #0]
 8022fca:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8022fce:	fb03 5202 	mla	r2, r3, r2, r5
 8022fd2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fd6:	4373      	muls	r3, r6
 8022fd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022fdc:	9307      	str	r3, [sp, #28]
 8022fde:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022fe2:	9306      	str	r3, [sp, #24]
 8022fe4:	468a      	mov	sl, r1
 8022fe6:	9b07      	ldr	r3, [sp, #28]
 8022fe8:	4298      	cmp	r0, r3
 8022fea:	d270      	bcs.n	80230ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022fec:	9b06      	ldr	r3, [sp, #24]
 8022fee:	4621      	mov	r1, r4
 8022ff0:	eb00 0b03 	add.w	fp, r0, r3
 8022ff4:	4558      	cmp	r0, fp
 8022ff6:	d25d      	bcs.n	80230b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022ff8:	f851 4b04 	ldr.w	r4, [r1], #4
 8022ffc:	0e23      	lsrs	r3, r4, #24
 8022ffe:	d014      	beq.n	802302a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8023000:	2bff      	cmp	r3, #255	; 0xff
 8023002:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8023006:	d112      	bne.n	802302e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8023008:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802300c:	d10f      	bne.n	802302e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802300e:	0963      	lsrs	r3, r4, #5
 8023010:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8023014:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023018:	f02c 0c07 	bic.w	ip, ip, #7
 802301c:	ea43 0c0c 	orr.w	ip, r3, ip
 8023020:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8023024:	ea4c 0404 	orr.w	r4, ip, r4
 8023028:	8004      	strh	r4, [r0, #0]
 802302a:	3002      	adds	r0, #2
 802302c:	e7e2      	b.n	8022ff4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802302e:	fb09 f303 	mul.w	r3, r9, r3
 8023032:	8807      	ldrh	r7, [r0, #0]
 8023034:	1c5a      	adds	r2, r3, #1
 8023036:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802303a:	1212      	asrs	r2, r2, #8
 802303c:	123e      	asrs	r6, r7, #8
 802303e:	b293      	uxth	r3, r2
 8023040:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8023044:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023048:	43d2      	mvns	r2, r2
 802304a:	b2d2      	uxtb	r2, r2
 802304c:	10fd      	asrs	r5, r7, #3
 802304e:	fb1e fe03 	smulbb	lr, lr, r3
 8023052:	00ff      	lsls	r7, r7, #3
 8023054:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023058:	fb06 e602 	mla	r6, r6, r2, lr
 802305c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023060:	b2ff      	uxtb	r7, r7
 8023062:	fa5f fc8c 	uxtb.w	ip, ip
 8023066:	b2e4      	uxtb	r4, r4
 8023068:	b2b6      	uxth	r6, r6
 802306a:	fb1c fc03 	smulbb	ip, ip, r3
 802306e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023072:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8023076:	fb14 f403 	smulbb	r4, r4, r3
 802307a:	fb05 c502 	mla	r5, r5, r2, ip
 802307e:	f106 0e01 	add.w	lr, r6, #1
 8023082:	fb07 4702 	mla	r7, r7, r2, r4
 8023086:	b2ad      	uxth	r5, r5
 8023088:	b2bf      	uxth	r7, r7
 802308a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802308e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8023092:	f105 0c01 	add.w	ip, r5, #1
 8023096:	1c7e      	adds	r6, r7, #1
 8023098:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802309c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80230a0:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80230a4:	096d      	lsrs	r5, r5, #5
 80230a6:	ea46 060e 	orr.w	r6, r6, lr
 80230aa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80230ae:	432e      	orrs	r6, r5
 80230b0:	8006      	strh	r6, [r0, #0]
 80230b2:	e7ba      	b.n	802302a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80230b4:	f8ba 3000 	ldrh.w	r3, [sl]
 80230b8:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80230bc:	eba3 0308 	sub.w	r3, r3, r8
 80230c0:	eba4 0408 	sub.w	r4, r4, r8
 80230c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80230c8:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80230cc:	e78b      	b.n	8022fe6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80230ce:	4b03      	ldr	r3, [pc, #12]	; (80230dc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80230d0:	6818      	ldr	r0, [r3, #0]
 80230d2:	6803      	ldr	r3, [r0, #0]
 80230d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80230d6:	4798      	blx	r3
 80230d8:	e76a      	b.n	8022fb0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80230da:	bf00      	nop
 80230dc:	2000b4c4 	.word	0x2000b4c4
 80230e0:	2000b4be 	.word	0x2000b4be

080230e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80230e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80230e8:	460c      	mov	r4, r1
 80230ea:	b085      	sub	sp, #20
 80230ec:	6810      	ldr	r0, [r2, #0]
 80230ee:	6851      	ldr	r1, [r2, #4]
 80230f0:	466d      	mov	r5, sp
 80230f2:	c503      	stmia	r5!, {r0, r1}
 80230f4:	6818      	ldr	r0, [r3, #0]
 80230f6:	6859      	ldr	r1, [r3, #4]
 80230f8:	4616      	mov	r6, r2
 80230fa:	c503      	stmia	r5!, {r0, r1}
 80230fc:	4668      	mov	r0, sp
 80230fe:	f7f9 ffc1 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023102:	4631      	mov	r1, r6
 8023104:	a802      	add	r0, sp, #8
 8023106:	f7f9 ffe5 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802310a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802310e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8023112:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8023116:	4d28      	ldr	r5, [pc, #160]	; (80231b8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8023118:	4e28      	ldr	r6, [pc, #160]	; (80231bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802311a:	6828      	ldr	r0, [r5, #0]
 802311c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8023120:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8023124:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023128:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802312c:	f8bd 1000 	ldrh.w	r1, [sp]
 8023130:	440a      	add	r2, r1
 8023132:	f8ad 2008 	strh.w	r2, [sp, #8]
 8023136:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802313a:	4413      	add	r3, r2
 802313c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8023140:	6803      	ldr	r3, [r0, #0]
 8023142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023144:	4798      	blx	r3
 8023146:	8833      	ldrh	r3, [r6, #0]
 8023148:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802314c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023150:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80231c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8023154:	fb03 1202 	mla	r2, r3, r2, r1
 8023158:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802315c:	fb08 f303 	mul.w	r3, r8, r3
 8023160:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023164:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8023168:	4298      	cmp	r0, r3
 802316a:	d21d      	bcs.n	80231a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 802316c:	eb00 080c 	add.w	r8, r0, ip
 8023170:	4540      	cmp	r0, r8
 8023172:	d20f      	bcs.n	8023194 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8023174:	f854 1b04 	ldr.w	r1, [r4], #4
 8023178:	ea4f 1951 	mov.w	r9, r1, lsr #5
 802317c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8023180:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8023184:	ea42 0209 	orr.w	r2, r2, r9
 8023188:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802318c:	430a      	orrs	r2, r1
 802318e:	f820 2b02 	strh.w	r2, [r0], #2
 8023192:	e7ed      	b.n	8023170 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8023194:	8832      	ldrh	r2, [r6, #0]
 8023196:	1bd2      	subs	r2, r2, r7
 8023198:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802319c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80231a0:	1bd2      	subs	r2, r2, r7
 80231a2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80231a6:	e7df      	b.n	8023168 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80231a8:	6828      	ldr	r0, [r5, #0]
 80231aa:	6803      	ldr	r3, [r0, #0]
 80231ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80231ae:	4798      	blx	r3
 80231b0:	b005      	add	sp, #20
 80231b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80231b6:	bf00      	nop
 80231b8:	2000b4c4 	.word	0x2000b4c4
 80231bc:	2000b4be 	.word	0x2000b4be
 80231c0:	fffff800 	.word	0xfffff800

080231c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80231c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80231c8:	460e      	mov	r6, r1
 80231ca:	b08e      	sub	sp, #56	; 0x38
 80231cc:	4604      	mov	r4, r0
 80231ce:	6808      	ldr	r0, [r1, #0]
 80231d0:	6849      	ldr	r1, [r1, #4]
 80231d2:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80233ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80231d6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80233b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80231da:	461d      	mov	r5, r3
 80231dc:	ab0a      	add	r3, sp, #40	; 0x28
 80231de:	c303      	stmia	r3!, {r0, r1}
 80231e0:	6810      	ldr	r0, [r2, #0]
 80231e2:	6851      	ldr	r1, [r2, #4]
 80231e4:	ab0c      	add	r3, sp, #48	; 0x30
 80231e6:	c303      	stmia	r3!, {r0, r1}
 80231e8:	a80a      	add	r0, sp, #40	; 0x28
 80231ea:	f7f9 ff4b 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80231ee:	4631      	mov	r1, r6
 80231f0:	a80c      	add	r0, sp, #48	; 0x30
 80231f2:	f7f9 ff6f 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80231f6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80231fa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80231fe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023202:	f8d8 0000 	ldr.w	r0, [r8]
 8023206:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 802320a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802320e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023212:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023216:	440c      	add	r4, r1
 8023218:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 802321c:	440a      	add	r2, r1
 802321e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8023222:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8023226:	4413      	add	r3, r2
 8023228:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802322c:	6803      	ldr	r3, [r0, #0]
 802322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023230:	4798      	blx	r3
 8023232:	2dff      	cmp	r5, #255	; 0xff
 8023234:	d124      	bne.n	8023280 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8023236:	f010 0f01 	tst.w	r0, #1
 802323a:	f8d8 0000 	ldr.w	r0, [r8]
 802323e:	d022      	beq.n	8023286 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8023240:	2100      	movs	r1, #0
 8023242:	f8d0 c000 	ldr.w	ip, [r0]
 8023246:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802324a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802324e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8023252:	f04f 0e01 	mov.w	lr, #1
 8023256:	f8cd e018 	str.w	lr, [sp, #24]
 802325a:	f8b9 e000 	ldrh.w	lr, [r9]
 802325e:	9503      	str	r5, [sp, #12]
 8023260:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8023264:	b2b6      	uxth	r6, r6
 8023266:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802326a:	9102      	str	r1, [sp, #8]
 802326c:	b2bf      	uxth	r7, r7
 802326e:	9601      	str	r6, [sp, #4]
 8023270:	9700      	str	r7, [sp, #0]
 8023272:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8023276:	4621      	mov	r1, r4
 8023278:	47a8      	blx	r5
 802327a:	b00e      	add	sp, #56	; 0x38
 802327c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023280:	f010 0f04 	tst.w	r0, #4
 8023284:	e7d9      	b.n	802323a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8023286:	6803      	ldr	r3, [r0, #0]
 8023288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802328a:	4798      	blx	r3
 802328c:	f8b9 3000 	ldrh.w	r3, [r9]
 8023290:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8023294:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8023298:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 802329c:	fb03 1202 	mla	r2, r3, r2, r1
 80232a0:	ebac 0c07 	sub.w	ip, ip, r7
 80232a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80232a8:	435e      	muls	r6, r3
 80232aa:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80232ae:	2dff      	cmp	r5, #255	; 0xff
 80232b0:	eba3 0707 	sub.w	r7, r3, r7
 80232b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80232b8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80232bc:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80232c0:	d049      	beq.n	8023356 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80232c2:	43eb      	mvns	r3, r5
 80232c4:	fa1f f985 	uxth.w	r9, r5
 80232c8:	b2db      	uxtb	r3, r3
 80232ca:	42b0      	cmp	r0, r6
 80232cc:	d266      	bcs.n	802339c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80232ce:	eb00 0a0e 	add.w	sl, r0, lr
 80232d2:	4550      	cmp	r0, sl
 80232d4:	4621      	mov	r1, r4
 80232d6:	f104 0403 	add.w	r4, r4, #3
 80232da:	d25b      	bcs.n	8023394 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80232dc:	8802      	ldrh	r2, [r0, #0]
 80232de:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80232e2:	ea4f 2822 	mov.w	r8, r2, asr #8
 80232e6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80232ea:	fb11 f109 	smulbb	r1, r1, r9
 80232ee:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80232f2:	10d5      	asrs	r5, r2, #3
 80232f4:	fb08 1803 	mla	r8, r8, r3, r1
 80232f8:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80232fc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023300:	fb11 f109 	smulbb	r1, r1, r9
 8023304:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023308:	fb05 1503 	mla	r5, r5, r3, r1
 802330c:	00d2      	lsls	r2, r2, #3
 802330e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023312:	b2d2      	uxtb	r2, r2
 8023314:	fb11 f109 	smulbb	r1, r1, r9
 8023318:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802331c:	fa1f f888 	uxth.w	r8, r8
 8023320:	fb02 1203 	mla	r2, r2, r3, r1
 8023324:	b292      	uxth	r2, r2
 8023326:	f108 0101 	add.w	r1, r8, #1
 802332a:	b2ad      	uxth	r5, r5
 802332c:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023330:	1c51      	adds	r1, r2, #1
 8023332:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023336:	1c69      	adds	r1, r5, #1
 8023338:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802333c:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8023340:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023344:	096d      	lsrs	r5, r5, #5
 8023346:	ea42 0208 	orr.w	r2, r2, r8
 802334a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802334e:	432a      	orrs	r2, r5
 8023350:	f820 2b02 	strh.w	r2, [r0], #2
 8023354:	e7bd      	b.n	80232d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8023356:	4a14      	ldr	r2, [pc, #80]	; (80233a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8023358:	42b0      	cmp	r0, r6
 802335a:	d21f      	bcs.n	802339c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802335c:	eb00 050e 	add.w	r5, r0, lr
 8023360:	42a8      	cmp	r0, r5
 8023362:	4621      	mov	r1, r4
 8023364:	f104 0403 	add.w	r4, r4, #3
 8023368:	d210      	bcs.n	802338c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802336a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802336e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023372:	00db      	lsls	r3, r3, #3
 8023374:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8023378:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802337c:	430b      	orrs	r3, r1
 802337e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023382:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8023386:	f820 3b02 	strh.w	r3, [r0], #2
 802338a:	e7e9      	b.n	8023360 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 802338c:	4438      	add	r0, r7
 802338e:	eb01 040c 	add.w	r4, r1, ip
 8023392:	e7e1      	b.n	8023358 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8023394:	4438      	add	r0, r7
 8023396:	eb01 040c 	add.w	r4, r1, ip
 802339a:	e796      	b.n	80232ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 802339c:	4b03      	ldr	r3, [pc, #12]	; (80233ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802339e:	6818      	ldr	r0, [r3, #0]
 80233a0:	6803      	ldr	r3, [r0, #0]
 80233a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80233a4:	4798      	blx	r3
 80233a6:	e768      	b.n	802327a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80233a8:	fffff800 	.word	0xfffff800
 80233ac:	2000b4c4 	.word	0x2000b4c4
 80233b0:	2000b4be 	.word	0x2000b4be

080233b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80233b4:	b4f0      	push	{r4, r5, r6, r7}
 80233b6:	4616      	mov	r6, r2
 80233b8:	2e01      	cmp	r6, #1
 80233ba:	461c      	mov	r4, r3
 80233bc:	460d      	mov	r5, r1
 80233be:	9a04      	ldr	r2, [sp, #16]
 80233c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80233c4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80233c8:	d012      	beq.n	80233f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80233ca:	d303      	bcc.n	80233d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80233cc:	2e02      	cmp	r6, #2
 80233ce:	d00a      	beq.n	80233e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80233d0:	bcf0      	pop	{r4, r5, r6, r7}
 80233d2:	4770      	bx	lr
 80233d4:	6805      	ldr	r5, [r0, #0]
 80233d6:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80233da:	68ed      	ldr	r5, [r5, #12]
 80233dc:	4613      	mov	r3, r2
 80233de:	46ac      	mov	ip, r5
 80233e0:	4622      	mov	r2, r4
 80233e2:	bcf0      	pop	{r4, r5, r6, r7}
 80233e4:	4760      	bx	ip
 80233e6:	4621      	mov	r1, r4
 80233e8:	4628      	mov	r0, r5
 80233ea:	bcf0      	pop	{r4, r5, r6, r7}
 80233ec:	f7ff bd94 	b.w	8022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80233f0:	4621      	mov	r1, r4
 80233f2:	4628      	mov	r0, r5
 80233f4:	bcf0      	pop	{r4, r5, r6, r7}
 80233f6:	f7ff bee5 	b.w	80231c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080233fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80233fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023400:	4681      	mov	r9, r0
 8023402:	b093      	sub	sp, #76	; 0x4c
 8023404:	6810      	ldr	r0, [r2, #0]
 8023406:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 802340a:	4f6d      	ldr	r7, [pc, #436]	; (80235c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802340c:	4688      	mov	r8, r1
 802340e:	6851      	ldr	r1, [r2, #4]
 8023410:	ac0e      	add	r4, sp, #56	; 0x38
 8023412:	c403      	stmia	r4!, {r0, r1}
 8023414:	6818      	ldr	r0, [r3, #0]
 8023416:	6859      	ldr	r1, [r3, #4]
 8023418:	ac10      	add	r4, sp, #64	; 0x40
 802341a:	4616      	mov	r6, r2
 802341c:	c403      	stmia	r4!, {r0, r1}
 802341e:	a80e      	add	r0, sp, #56	; 0x38
 8023420:	f7f9 fe30 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023424:	4631      	mov	r1, r6
 8023426:	a810      	add	r0, sp, #64	; 0x40
 8023428:	f7f9 fe54 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802342c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023430:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8023434:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8023438:	4e62      	ldr	r6, [pc, #392]	; (80235c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802343a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 802343e:	6830      	ldr	r0, [r6, #0]
 8023440:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8023444:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023448:	4489      	add	r9, r1
 802344a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802344e:	440a      	add	r2, r1
 8023450:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023454:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023458:	4413      	add	r3, r2
 802345a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802345e:	6803      	ldr	r3, [r0, #0]
 8023460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023462:	4798      	blx	r3
 8023464:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023468:	6830      	ldr	r0, [r6, #0]
 802346a:	d01d      	beq.n	80234a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802346c:	2200      	movs	r2, #0
 802346e:	6801      	ldr	r1, [r0, #0]
 8023470:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8023474:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8023478:	220b      	movs	r2, #11
 802347a:	9207      	str	r2, [sp, #28]
 802347c:	883a      	ldrh	r2, [r7, #0]
 802347e:	9206      	str	r2, [sp, #24]
 8023480:	2201      	movs	r2, #1
 8023482:	e9cd a204 	strd	sl, r2, [sp, #16]
 8023486:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802348a:	9203      	str	r2, [sp, #12]
 802348c:	b2a4      	uxth	r4, r4
 802348e:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8023492:	9200      	str	r2, [sp, #0]
 8023494:	b2ad      	uxth	r5, r5
 8023496:	9502      	str	r5, [sp, #8]
 8023498:	9401      	str	r4, [sp, #4]
 802349a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802349c:	4642      	mov	r2, r8
 802349e:	4649      	mov	r1, r9
 80234a0:	47a0      	blx	r4
 80234a2:	b013      	add	sp, #76	; 0x4c
 80234a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234a8:	6803      	ldr	r3, [r0, #0]
 80234aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234ac:	4798      	blx	r3
 80234ae:	883b      	ldrh	r3, [r7, #0]
 80234b0:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80234b4:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80234b8:	fb03 1202 	mla	r2, r3, r2, r1
 80234bc:	435d      	muls	r5, r3
 80234be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80234c2:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80234c6:	920c      	str	r2, [sp, #48]	; 0x30
 80234c8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80234cc:	1b12      	subs	r2, r2, r4
 80234ce:	920d      	str	r2, [sp, #52]	; 0x34
 80234d0:	0062      	lsls	r2, r4, #1
 80234d2:	1b1c      	subs	r4, r3, r4
 80234d4:	0063      	lsls	r3, r4, #1
 80234d6:	920a      	str	r2, [sp, #40]	; 0x28
 80234d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80234da:	f04f 0e04 	mov.w	lr, #4
 80234de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80234e0:	4298      	cmp	r0, r3
 80234e2:	d266      	bcs.n	80235b2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80234e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80234e6:	eb00 0b03 	add.w	fp, r0, r3
 80234ea:	4558      	cmp	r0, fp
 80234ec:	d25c      	bcs.n	80235a8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80234ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80234f2:	fb1e e303 	smlabb	r3, lr, r3, lr
 80234f6:	f858 2003 	ldr.w	r2, [r8, r3]
 80234fa:	0e11      	lsrs	r1, r2, #24
 80234fc:	d012      	beq.n	8023524 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80234fe:	29ff      	cmp	r1, #255	; 0xff
 8023500:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8023504:	d110      	bne.n	8023528 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8023506:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802350a:	d10d      	bne.n	8023528 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802350c:	0953      	lsrs	r3, r2, #5
 802350e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8023512:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023516:	f027 0707 	bic.w	r7, r7, #7
 802351a:	431f      	orrs	r7, r3
 802351c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023520:	433a      	orrs	r2, r7
 8023522:	8002      	strh	r2, [r0, #0]
 8023524:	3002      	adds	r0, #2
 8023526:	e7e0      	b.n	80234ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8023528:	fb0a f101 	mul.w	r1, sl, r1
 802352c:	8806      	ldrh	r6, [r0, #0]
 802352e:	1c4b      	adds	r3, r1, #1
 8023530:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023534:	1235      	asrs	r5, r6, #8
 8023536:	10f4      	asrs	r4, r6, #3
 8023538:	121b      	asrs	r3, r3, #8
 802353a:	00f6      	lsls	r6, r6, #3
 802353c:	b299      	uxth	r1, r3
 802353e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023542:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023546:	b2f6      	uxtb	r6, r6
 8023548:	43db      	mvns	r3, r3
 802354a:	b2d2      	uxtb	r2, r2
 802354c:	b2db      	uxtb	r3, r3
 802354e:	fb1c fc01 	smulbb	ip, ip, r1
 8023552:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023556:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802355a:	fb12 f201 	smulbb	r2, r2, r1
 802355e:	fb05 c503 	mla	r5, r5, r3, ip
 8023562:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8023566:	b2ff      	uxtb	r7, r7
 8023568:	fb06 2203 	mla	r2, r6, r3, r2
 802356c:	b2ad      	uxth	r5, r5
 802356e:	fb17 f701 	smulbb	r7, r7, r1
 8023572:	b292      	uxth	r2, r2
 8023574:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8023578:	fb04 7403 	mla	r4, r4, r3, r7
 802357c:	f105 0c01 	add.w	ip, r5, #1
 8023580:	1c57      	adds	r7, r2, #1
 8023582:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8023586:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802358a:	b2a4      	uxth	r4, r4
 802358c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023590:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8023594:	433d      	orrs	r5, r7
 8023596:	1c67      	adds	r7, r4, #1
 8023598:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 802359c:	0964      	lsrs	r4, r4, #5
 802359e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80235a2:	4325      	orrs	r5, r4
 80235a4:	8005      	strh	r5, [r0, #0]
 80235a6:	e7bd      	b.n	8023524 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80235a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80235aa:	4418      	add	r0, r3
 80235ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235ae:	4499      	add	r9, r3
 80235b0:	e795      	b.n	80234de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80235b2:	4b04      	ldr	r3, [pc, #16]	; (80235c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80235b4:	6818      	ldr	r0, [r3, #0]
 80235b6:	6803      	ldr	r3, [r0, #0]
 80235b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235ba:	4798      	blx	r3
 80235bc:	e771      	b.n	80234a2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80235be:	bf00      	nop
 80235c0:	2000b4be 	.word	0x2000b4be
 80235c4:	2000b4c4 	.word	0x2000b4c4

080235c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80235c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235cc:	b087      	sub	sp, #28
 80235ce:	4680      	mov	r8, r0
 80235d0:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80235d4:	460d      	mov	r5, r1
 80235d6:	4614      	mov	r4, r2
 80235d8:	2e00      	cmp	r6, #0
 80235da:	f000 80b9 	beq.w	8023750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80235de:	6810      	ldr	r0, [r2, #0]
 80235e0:	6851      	ldr	r1, [r2, #4]
 80235e2:	af02      	add	r7, sp, #8
 80235e4:	c703      	stmia	r7!, {r0, r1}
 80235e6:	6818      	ldr	r0, [r3, #0]
 80235e8:	6859      	ldr	r1, [r3, #4]
 80235ea:	af04      	add	r7, sp, #16
 80235ec:	c703      	stmia	r7!, {r0, r1}
 80235ee:	a802      	add	r0, sp, #8
 80235f0:	f7f9 fd48 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235f4:	4621      	mov	r1, r4
 80235f6:	a804      	add	r0, sp, #16
 80235f8:	f7f9 fd6c 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023600:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023604:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8023608:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 802360c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023610:	eb08 0401 	add.w	r4, r8, r1
 8023614:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023618:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 802361c:	440a      	add	r2, r1
 802361e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023622:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023626:	4413      	add	r3, r2
 8023628:	f8ad 3012 	strh.w	r3, [sp, #18]
 802362c:	4b4a      	ldr	r3, [pc, #296]	; (8023758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802362e:	6818      	ldr	r0, [r3, #0]
 8023630:	6803      	ldr	r3, [r0, #0]
 8023632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023634:	4798      	blx	r3
 8023636:	4b49      	ldr	r3, [pc, #292]	; (802375c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8023638:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802363c:	881a      	ldrh	r2, [r3, #0]
 802363e:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023642:	2eff      	cmp	r6, #255	; 0xff
 8023644:	fb02 c101 	mla	r1, r2, r1, ip
 8023648:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802364c:	fb02 f207 	mul.w	r2, r2, r7
 8023650:	f105 0104 	add.w	r1, r5, #4
 8023654:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8023658:	461d      	mov	r5, r3
 802365a:	d05a      	beq.n	8023712 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 802365c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023660:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023664:	b2b6      	uxth	r6, r6
 8023666:	fa1f fe8e 	uxth.w	lr, lr
 802366a:	9301      	str	r3, [sp, #4]
 802366c:	4282      	cmp	r2, r0
 802366e:	d96a      	bls.n	8023746 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8023670:	eb00 0b0a 	add.w	fp, r0, sl
 8023674:	4583      	cmp	fp, r0
 8023676:	d940      	bls.n	80236fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8023678:	f814 3b01 	ldrb.w	r3, [r4], #1
 802367c:	8805      	ldrh	r5, [r0, #0]
 802367e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023682:	122f      	asrs	r7, r5, #8
 8023684:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023688:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802368c:	fb17 f70e 	smulbb	r7, r7, lr
 8023690:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023694:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023698:	00ed      	lsls	r5, r5, #3
 802369a:	fb0c 7c06 	mla	ip, ip, r6, r7
 802369e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80236a2:	10df      	asrs	r7, r3, #3
 80236a4:	b2ed      	uxtb	r5, r5
 80236a6:	00db      	lsls	r3, r3, #3
 80236a8:	fa1f fc8c 	uxth.w	ip, ip
 80236ac:	fb19 f90e 	smulbb	r9, r9, lr
 80236b0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80236b4:	b2db      	uxtb	r3, r3
 80236b6:	fb15 f50e 	smulbb	r5, r5, lr
 80236ba:	fb07 9706 	mla	r7, r7, r6, r9
 80236be:	fb03 5306 	mla	r3, r3, r6, r5
 80236c2:	f10c 0901 	add.w	r9, ip, #1
 80236c6:	b29b      	uxth	r3, r3
 80236c8:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80236cc:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80236d0:	f103 0c01 	add.w	ip, r3, #1
 80236d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80236d8:	b2bf      	uxth	r7, r7
 80236da:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80236de:	ea4c 0c09 	orr.w	ip, ip, r9
 80236e2:	f107 0901 	add.w	r9, r7, #1
 80236e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80236ea:	097f      	lsrs	r7, r7, #5
 80236ec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80236f0:	ea4c 0c07 	orr.w	ip, ip, r7
 80236f4:	f820 cb02 	strh.w	ip, [r0], #2
 80236f8:	e7bc      	b.n	8023674 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80236fa:	9b01      	ldr	r3, [sp, #4]
 80236fc:	881b      	ldrh	r3, [r3, #0]
 80236fe:	eba3 0308 	sub.w	r3, r3, r8
 8023702:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023706:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802370a:	eba3 0308 	sub.w	r3, r3, r8
 802370e:	441c      	add	r4, r3
 8023710:	e7ac      	b.n	802366c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8023712:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023716:	4282      	cmp	r2, r0
 8023718:	d915      	bls.n	8023746 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802371a:	eb00 060a 	add.w	r6, r0, sl
 802371e:	4286      	cmp	r6, r0
 8023720:	d906      	bls.n	8023730 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8023722:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023726:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802372a:	f820 3b02 	strh.w	r3, [r0], #2
 802372e:	e7f6      	b.n	802371e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8023730:	882b      	ldrh	r3, [r5, #0]
 8023732:	eba3 0308 	sub.w	r3, r3, r8
 8023736:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802373a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802373e:	eba3 0308 	sub.w	r3, r3, r8
 8023742:	441c      	add	r4, r3
 8023744:	e7e7      	b.n	8023716 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8023746:	4b04      	ldr	r3, [pc, #16]	; (8023758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8023748:	6818      	ldr	r0, [r3, #0]
 802374a:	6803      	ldr	r3, [r0, #0]
 802374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802374e:	4798      	blx	r3
 8023750:	b007      	add	sp, #28
 8023752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023756:	bf00      	nop
 8023758:	2000b4c4 	.word	0x2000b4c4
 802375c:	2000b4be 	.word	0x2000b4be

08023760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023764:	b091      	sub	sp, #68	; 0x44
 8023766:	4680      	mov	r8, r0
 8023768:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 802376c:	460f      	mov	r7, r1
 802376e:	4614      	mov	r4, r2
 8023770:	2d00      	cmp	r5, #0
 8023772:	d051      	beq.n	8023818 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8023774:	6810      	ldr	r0, [r2, #0]
 8023776:	6851      	ldr	r1, [r2, #4]
 8023778:	f8df 9200 	ldr.w	r9, [pc, #512]	; 802397c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802377c:	ae0c      	add	r6, sp, #48	; 0x30
 802377e:	c603      	stmia	r6!, {r0, r1}
 8023780:	6818      	ldr	r0, [r3, #0]
 8023782:	6859      	ldr	r1, [r3, #4]
 8023784:	ae0e      	add	r6, sp, #56	; 0x38
 8023786:	c603      	stmia	r6!, {r0, r1}
 8023788:	a80c      	add	r0, sp, #48	; 0x30
 802378a:	f7f9 fc7b 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802378e:	4621      	mov	r1, r4
 8023790:	a80e      	add	r0, sp, #56	; 0x38
 8023792:	f7f9 fc9f 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023796:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802379a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802379e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80237a2:	f8d9 0000 	ldr.w	r0, [r9]
 80237a6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80237aa:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80237ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80237b2:	eb08 0401 	add.w	r4, r8, r1
 80237b6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80237ba:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8023980 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80237be:	440a      	add	r2, r1
 80237c0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80237c4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80237c8:	4413      	add	r3, r2
 80237ca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80237ce:	6803      	ldr	r3, [r0, #0]
 80237d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237d2:	4798      	blx	r3
 80237d4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80237d8:	f8d9 0000 	ldr.w	r0, [r9]
 80237dc:	d01f      	beq.n	802381e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80237de:	2200      	movs	r2, #0
 80237e0:	6801      	ldr	r1, [r0, #0]
 80237e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80237e6:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80237ea:	220b      	movs	r2, #11
 80237ec:	9207      	str	r2, [sp, #28]
 80237ee:	f8b8 2000 	ldrh.w	r2, [r8]
 80237f2:	9206      	str	r2, [sp, #24]
 80237f4:	2201      	movs	r2, #1
 80237f6:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80237fa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80237fe:	9203      	str	r2, [sp, #12]
 8023800:	fa1f f28a 	uxth.w	r2, sl
 8023804:	9202      	str	r2, [sp, #8]
 8023806:	b2b6      	uxth	r6, r6
 8023808:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802380c:	9200      	str	r2, [sp, #0]
 802380e:	9601      	str	r6, [sp, #4]
 8023810:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023812:	463a      	mov	r2, r7
 8023814:	4621      	mov	r1, r4
 8023816:	47a8      	blx	r5
 8023818:	b011      	add	sp, #68	; 0x44
 802381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802381e:	6803      	ldr	r3, [r0, #0]
 8023820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023822:	4798      	blx	r3
 8023824:	f8b8 2000 	ldrh.w	r2, [r8]
 8023828:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802382c:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023830:	2dff      	cmp	r5, #255	; 0xff
 8023832:	fb02 1303 	mla	r3, r2, r3, r1
 8023836:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802383a:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802383e:	fb0a fa02 	mul.w	sl, sl, r2
 8023842:	d062      	beq.n	802390a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023844:	ea6f 0c05 	mvn.w	ip, r5
 8023848:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 802384c:	930a      	str	r3, [sp, #40]	; 0x28
 802384e:	b2ad      	uxth	r5, r5
 8023850:	fa5f fc8c 	uxtb.w	ip, ip
 8023854:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8023858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802385a:	4298      	cmp	r0, r3
 802385c:	f080 8085 	bcs.w	802396a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023860:	eb00 0b09 	add.w	fp, r0, r9
 8023864:	4558      	cmp	r0, fp
 8023866:	d246      	bcs.n	80238f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8023868:	f814 eb01 	ldrb.w	lr, [r4], #1
 802386c:	2303      	movs	r3, #3
 802386e:	2204      	movs	r2, #4
 8023870:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023874:	eb07 0a0e 	add.w	sl, r7, lr
 8023878:	8803      	ldrh	r3, [r0, #0]
 802387a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802387e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023882:	1219      	asrs	r1, r3, #8
 8023884:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023888:	fb18 f805 	smulbb	r8, r8, r5
 802388c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023890:	10da      	asrs	r2, r3, #3
 8023892:	fb01 810c 	mla	r1, r1, ip, r8
 8023896:	00db      	lsls	r3, r3, #3
 8023898:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802389c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80238a0:	b2db      	uxtb	r3, r3
 80238a2:	fb18 f805 	smulbb	r8, r8, r5
 80238a6:	fb1e fe05 	smulbb	lr, lr, r5
 80238aa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80238ae:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80238b2:	b289      	uxth	r1, r1
 80238b4:	fb02 820c 	mla	r2, r2, ip, r8
 80238b8:	fb03 e30c 	mla	r3, r3, ip, lr
 80238bc:	b292      	uxth	r2, r2
 80238be:	b29b      	uxth	r3, r3
 80238c0:	f101 0801 	add.w	r8, r1, #1
 80238c4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80238c8:	f103 0e01 	add.w	lr, r3, #1
 80238cc:	f102 0801 	add.w	r8, r2, #1
 80238d0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80238d4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80238d8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80238dc:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80238e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80238e4:	ea4e 0101 	orr.w	r1, lr, r1
 80238e8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80238ec:	ea41 0108 	orr.w	r1, r1, r8
 80238f0:	f820 1b02 	strh.w	r1, [r0], #2
 80238f4:	e7b6      	b.n	8023864 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80238f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80238f8:	881b      	ldrh	r3, [r3, #0]
 80238fa:	1b9b      	subs	r3, r3, r6
 80238fc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023900:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023904:	1b9b      	subs	r3, r3, r6
 8023906:	441c      	add	r4, r3
 8023908:	e7a6      	b.n	8023858 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 802390a:	491b      	ldr	r1, [pc, #108]	; (8023978 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 802390c:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023910:	2203      	movs	r2, #3
 8023912:	2504      	movs	r5, #4
 8023914:	4550      	cmp	r0, sl
 8023916:	d228      	bcs.n	802396a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023918:	eb00 0c09 	add.w	ip, r0, r9
 802391c:	4560      	cmp	r0, ip
 802391e:	4623      	mov	r3, r4
 8023920:	d219      	bcs.n	8023956 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8023922:	f893 e000 	ldrb.w	lr, [r3]
 8023926:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 802392a:	eb07 0b0e 	add.w	fp, r7, lr
 802392e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023932:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023936:	f89b b001 	ldrb.w	fp, [fp, #1]
 802393a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802393e:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023942:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023946:	ea43 030b 	orr.w	r3, r3, fp
 802394a:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802394e:	3401      	adds	r4, #1
 8023950:	f820 3b02 	strh.w	r3, [r0], #2
 8023954:	e7e2      	b.n	802391c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8023956:	f8b8 3000 	ldrh.w	r3, [r8]
 802395a:	1b9b      	subs	r3, r3, r6
 802395c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023960:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023964:	1b9b      	subs	r3, r3, r6
 8023966:	441c      	add	r4, r3
 8023968:	e7d4      	b.n	8023914 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802396a:	4b04      	ldr	r3, [pc, #16]	; (802397c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 802396c:	6818      	ldr	r0, [r3, #0]
 802396e:	6803      	ldr	r3, [r0, #0]
 8023970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023972:	4798      	blx	r3
 8023974:	e750      	b.n	8023818 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8023976:	bf00      	nop
 8023978:	fffff800 	.word	0xfffff800
 802397c:	2000b4c4 	.word	0x2000b4c4
 8023980:	2000b4be 	.word	0x2000b4be

08023984 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023984:	b430      	push	{r4, r5}
 8023986:	780d      	ldrb	r5, [r1, #0]
 8023988:	f89d 4008 	ldrb.w	r4, [sp, #8]
 802398c:	2d01      	cmp	r5, #1
 802398e:	d00a      	beq.n	80239a6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8023990:	d305      	bcc.n	802399e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8023992:	2d02      	cmp	r5, #2
 8023994:	d10b      	bne.n	80239ae <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8023996:	9402      	str	r4, [sp, #8]
 8023998:	bc30      	pop	{r4, r5}
 802399a:	f7ff be15 	b.w	80235c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802399e:	9402      	str	r4, [sp, #8]
 80239a0:	bc30      	pop	{r4, r5}
 80239a2:	f7ff bd2b 	b.w	80233fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80239a6:	9402      	str	r4, [sp, #8]
 80239a8:	bc30      	pop	{r4, r5}
 80239aa:	f7ff bed9 	b.w	8023760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80239ae:	bc30      	pop	{r4, r5}
 80239b0:	4770      	bx	lr
	...

080239b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80239b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239b8:	4604      	mov	r4, r0
 80239ba:	b087      	sub	sp, #28
 80239bc:	6810      	ldr	r0, [r2, #0]
 80239be:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80239c2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023bfc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80239c6:	460e      	mov	r6, r1
 80239c8:	6851      	ldr	r1, [r2, #4]
 80239ca:	ad02      	add	r5, sp, #8
 80239cc:	c503      	stmia	r5!, {r0, r1}
 80239ce:	6818      	ldr	r0, [r3, #0]
 80239d0:	6859      	ldr	r1, [r3, #4]
 80239d2:	ad04      	add	r5, sp, #16
 80239d4:	4617      	mov	r7, r2
 80239d6:	c503      	stmia	r5!, {r0, r1}
 80239d8:	a802      	add	r0, sp, #8
 80239da:	f7f9 fb53 	bl	801d084 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239de:	4639      	mov	r1, r7
 80239e0:	a804      	add	r0, sp, #16
 80239e2:	f7f9 fb77 	bl	801d0d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239e6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80239ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80239ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80239f2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80239f6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80239fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80239fe:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8023a02:	440e      	add	r6, r1
 8023a04:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023a08:	440a      	add	r2, r1
 8023a0a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023a0e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023a12:	4413      	add	r3, r2
 8023a14:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023a18:	4b77      	ldr	r3, [pc, #476]	; (8023bf8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023a1a:	6818      	ldr	r0, [r3, #0]
 8023a1c:	6803      	ldr	r3, [r0, #0]
 8023a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a20:	4798      	blx	r3
 8023a22:	f8b9 b000 	ldrh.w	fp, [r9]
 8023a26:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a2a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a2e:	fb0b 2303 	mla	r3, fp, r3, r2
 8023a32:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023a36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023a3a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023a3e:	fb05 f50b 	mul.w	r5, r5, fp
 8023a42:	9300      	str	r3, [sp, #0]
 8023a44:	d069      	beq.n	8023b1a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023a46:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023a4a:	4558      	cmp	r0, fp
 8023a4c:	f080 80cc 	bcs.w	8023be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023a50:	9b00      	ldr	r3, [sp, #0]
 8023a52:	18c3      	adds	r3, r0, r3
 8023a54:	9301      	str	r3, [sp, #4]
 8023a56:	4631      	mov	r1, r6
 8023a58:	9b01      	ldr	r3, [sp, #4]
 8023a5a:	4298      	cmp	r0, r3
 8023a5c:	d24f      	bcs.n	8023afe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8023a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a62:	2a00      	cmp	r2, #0
 8023a64:	d048      	beq.n	8023af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023a66:	fb0a f202 	mul.w	r2, sl, r2
 8023a6a:	1c53      	adds	r3, r2, #1
 8023a6c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023a70:	121b      	asrs	r3, r3, #8
 8023a72:	d041      	beq.n	8023af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023a74:	8802      	ldrh	r2, [r0, #0]
 8023a76:	f8b4 c000 	ldrh.w	ip, [r4]
 8023a7a:	b29e      	uxth	r6, r3
 8023a7c:	1215      	asrs	r5, r2, #8
 8023a7e:	43db      	mvns	r3, r3
 8023a80:	b2db      	uxtb	r3, r3
 8023a82:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023a86:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023a8a:	fb15 f503 	smulbb	r5, r5, r3
 8023a8e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023a92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023a96:	00d2      	lsls	r2, r2, #3
 8023a98:	fb07 5706 	mla	r7, r7, r6, r5
 8023a9c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023aa0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023aa4:	b2d2      	uxtb	r2, r2
 8023aa6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023aaa:	b2bf      	uxth	r7, r7
 8023aac:	fb1e fe03 	smulbb	lr, lr, r3
 8023ab0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023ab4:	fa5f fc8c 	uxtb.w	ip, ip
 8023ab8:	fb12 f203 	smulbb	r2, r2, r3
 8023abc:	fb05 e506 	mla	r5, r5, r6, lr
 8023ac0:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023ac4:	f107 0e01 	add.w	lr, r7, #1
 8023ac8:	fa1f fc8c 	uxth.w	ip, ip
 8023acc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023ad0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023ad4:	f10c 0701 	add.w	r7, ip, #1
 8023ad8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023adc:	b2ad      	uxth	r5, r5
 8023ade:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ae2:	ea47 070e 	orr.w	r7, r7, lr
 8023ae6:	f105 0e01 	add.w	lr, r5, #1
 8023aea:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8023aee:	096d      	lsrs	r5, r5, #5
 8023af0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023af4:	432f      	orrs	r7, r5
 8023af6:	8007      	strh	r7, [r0, #0]
 8023af8:	3002      	adds	r0, #2
 8023afa:	3402      	adds	r4, #2
 8023afc:	e7ac      	b.n	8023a58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8023afe:	f8b9 3000 	ldrh.w	r3, [r9]
 8023b02:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023b06:	eba3 0308 	sub.w	r3, r3, r8
 8023b0a:	eba6 0608 	sub.w	r6, r6, r8
 8023b0e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023b12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023b16:	440e      	add	r6, r1
 8023b18:	e797      	b.n	8023a4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023b1a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8023b1e:	42a8      	cmp	r0, r5
 8023b20:	d262      	bcs.n	8023be8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023b22:	9b00      	ldr	r3, [sp, #0]
 8023b24:	4631      	mov	r1, r6
 8023b26:	eb00 0b03 	add.w	fp, r0, r3
 8023b2a:	4558      	cmp	r0, fp
 8023b2c:	d24e      	bcs.n	8023bcc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8023b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023b32:	b12b      	cbz	r3, 8023b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023b34:	2bff      	cmp	r3, #255	; 0xff
 8023b36:	f8b4 e000 	ldrh.w	lr, [r4]
 8023b3a:	d104      	bne.n	8023b46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023b3c:	f8a0 e000 	strh.w	lr, [r0]
 8023b40:	3002      	adds	r0, #2
 8023b42:	3402      	adds	r4, #2
 8023b44:	e7f1      	b.n	8023b2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023b46:	8802      	ldrh	r2, [r0, #0]
 8023b48:	b29f      	uxth	r7, r3
 8023b4a:	1216      	asrs	r6, r2, #8
 8023b4c:	43db      	mvns	r3, r3
 8023b4e:	b2db      	uxtb	r3, r3
 8023b50:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023b54:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023b58:	fb16 f603 	smulbb	r6, r6, r3
 8023b5c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023b60:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023b64:	00d2      	lsls	r2, r2, #3
 8023b66:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023b6a:	b2d2      	uxtb	r2, r2
 8023b6c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023b70:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8023b74:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023b78:	fb1a fa03 	smulbb	sl, sl, r3
 8023b7c:	fa1f fc8c 	uxth.w	ip, ip
 8023b80:	fb12 f303 	smulbb	r3, r2, r3
 8023b84:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023b88:	fa5f fe8e 	uxtb.w	lr, lr
 8023b8c:	fb06 a607 	mla	r6, r6, r7, sl
 8023b90:	f10c 0201 	add.w	r2, ip, #1
 8023b94:	fb0e 3307 	mla	r3, lr, r7, r3
 8023b98:	b2b6      	uxth	r6, r6
 8023b9a:	b29b      	uxth	r3, r3
 8023b9c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023ba0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8023ba4:	f106 0a01 	add.w	sl, r6, #1
 8023ba8:	f103 0c01 	add.w	ip, r3, #1
 8023bac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023bb0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023bb4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023bb8:	0976      	lsrs	r6, r6, #5
 8023bba:	ea4c 0c02 	orr.w	ip, ip, r2
 8023bbe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023bc2:	ea4c 0c06 	orr.w	ip, ip, r6
 8023bc6:	f8a0 c000 	strh.w	ip, [r0]
 8023bca:	e7b9      	b.n	8023b40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023bcc:	f8b9 3000 	ldrh.w	r3, [r9]
 8023bd0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023bd4:	eba3 0308 	sub.w	r3, r3, r8
 8023bd8:	eba6 0608 	sub.w	r6, r6, r8
 8023bdc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023be0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023be4:	440e      	add	r6, r1
 8023be6:	e79a      	b.n	8023b1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023be8:	4b03      	ldr	r3, [pc, #12]	; (8023bf8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023bea:	6818      	ldr	r0, [r3, #0]
 8023bec:	6803      	ldr	r3, [r0, #0]
 8023bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bf0:	4798      	blx	r3
 8023bf2:	b007      	add	sp, #28
 8023bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bf8:	2000b4c4 	.word	0x2000b4c4
 8023bfc:	2000b4be 	.word	0x2000b4be

08023c00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c04:	b089      	sub	sp, #36	; 0x24
 8023c06:	4682      	mov	sl, r0
 8023c08:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8023c0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023c0e:	460f      	mov	r7, r1
 8023c10:	4691      	mov	r9, r2
 8023c12:	4698      	mov	r8, r3
 8023c14:	2e00      	cmp	r6, #0
 8023c16:	d036      	beq.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023c18:	4608      	mov	r0, r1
 8023c1a:	f7fc f86d 	bl	801fcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023c1e:	4605      	mov	r5, r0
 8023c20:	4638      	mov	r0, r7
 8023c22:	f7fc f89d 	bl	801fd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023c26:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023c2a:	4638      	mov	r0, r7
 8023c2c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023c30:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023c34:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023c38:	f7fc f94a 	bl	801fed0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023c3c:	4605      	mov	r5, r0
 8023c3e:	4638      	mov	r0, r7
 8023c40:	f7fc f976 	bl	801ff30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023c44:	4681      	mov	r9, r0
 8023c46:	4638      	mov	r0, r7
 8023c48:	f7fc f9c6 	bl	801ffd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023c4c:	280b      	cmp	r0, #11
 8023c4e:	d81a      	bhi.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023c50:	e8df f000 	tbb	[pc, r0]
 8023c54:	1906aebd 	.word	0x1906aebd
 8023c58:	19191919 	.word	0x19191919
 8023c5c:	b5191919 	.word	0xb5191919
 8023c60:	4bb0      	ldr	r3, [pc, #704]	; (8023f24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8023c62:	6818      	ldr	r0, [r3, #0]
 8023c64:	6803      	ldr	r3, [r0, #0]
 8023c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c68:	4798      	blx	r3
 8023c6a:	2eff      	cmp	r6, #255	; 0xff
 8023c6c:	d121      	bne.n	8023cb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8023c6e:	0683      	lsls	r3, r0, #26
 8023c70:	d41f      	bmi.n	8023cb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8023c72:	4638      	mov	r0, r7
 8023c74:	f7fc f8f4 	bl	801fe60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023c78:	b940      	cbnz	r0, 8023c8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8023c7a:	4623      	mov	r3, r4
 8023c7c:	aa02      	add	r2, sp, #8
 8023c7e:	4629      	mov	r1, r5
 8023c80:	4650      	mov	r0, sl
 8023c82:	f7ff fa2f 	bl	80230e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023c86:	b009      	add	sp, #36	; 0x24
 8023c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c8c:	f10d 0818 	add.w	r8, sp, #24
 8023c90:	4639      	mov	r1, r7
 8023c92:	4640      	mov	r0, r8
 8023c94:	f7fc f898 	bl	801fdc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023c98:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023c9c:	af04      	add	r7, sp, #16
 8023c9e:	e887 0003 	stmia.w	r7, {r0, r1}
 8023ca2:	4638      	mov	r0, r7
 8023ca4:	4621      	mov	r1, r4
 8023ca6:	f7f6 f837 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8023caa:	4638      	mov	r0, r7
 8023cac:	f7f6 f877 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8023cb0:	b130      	cbz	r0, 8023cc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8023cb2:	4633      	mov	r3, r6
 8023cb4:	4622      	mov	r2, r4
 8023cb6:	a902      	add	r1, sp, #8
 8023cb8:	4628      	mov	r0, r5
 8023cba:	f7ff f92d 	bl	8022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023cbe:	e7e2      	b.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023cc0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023cc4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023cc8:	4293      	cmp	r3, r2
 8023cca:	dd12      	ble.n	8023cf2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8023ccc:	1a9b      	subs	r3, r3, r2
 8023cce:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023cd2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023cd6:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023cda:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023cde:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023ce2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023ce6:	4642      	mov	r2, r8
 8023ce8:	4633      	mov	r3, r6
 8023cea:	a902      	add	r1, sp, #8
 8023cec:	4628      	mov	r0, r5
 8023cee:	f7ff f913 	bl	8022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023cf2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023cf6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023cfa:	4293      	cmp	r3, r2
 8023cfc:	dd12      	ble.n	8023d24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8023cfe:	1a9b      	subs	r3, r3, r2
 8023d00:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023d04:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023d08:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023d0c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023d10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d14:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023d18:	23ff      	movs	r3, #255	; 0xff
 8023d1a:	4642      	mov	r2, r8
 8023d1c:	a902      	add	r1, sp, #8
 8023d1e:	4628      	mov	r0, r5
 8023d20:	f7ff f8fa 	bl	8022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d24:	463b      	mov	r3, r7
 8023d26:	aa02      	add	r2, sp, #8
 8023d28:	4629      	mov	r1, r5
 8023d2a:	4650      	mov	r0, sl
 8023d2c:	f7ff f9da 	bl	80230e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023d30:	88a2      	ldrh	r2, [r4, #4]
 8023d32:	8823      	ldrh	r3, [r4, #0]
 8023d34:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023d38:	4413      	add	r3, r2
 8023d3a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023d3e:	440a      	add	r2, r1
 8023d40:	b29b      	uxth	r3, r3
 8023d42:	b292      	uxth	r2, r2
 8023d44:	b211      	sxth	r1, r2
 8023d46:	b218      	sxth	r0, r3
 8023d48:	4288      	cmp	r0, r1
 8023d4a:	dd12      	ble.n	8023d72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8023d4c:	1a9b      	subs	r3, r3, r2
 8023d4e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023d52:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023d56:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023d5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d5e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023d62:	23ff      	movs	r3, #255	; 0xff
 8023d64:	4642      	mov	r2, r8
 8023d66:	a902      	add	r1, sp, #8
 8023d68:	4628      	mov	r0, r5
 8023d6a:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023d6e:	f7ff f8d3 	bl	8022f18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023d72:	88e2      	ldrh	r2, [r4, #6]
 8023d74:	8863      	ldrh	r3, [r4, #2]
 8023d76:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023d7a:	4413      	add	r3, r2
 8023d7c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023d80:	440a      	add	r2, r1
 8023d82:	b29b      	uxth	r3, r3
 8023d84:	b292      	uxth	r2, r2
 8023d86:	b211      	sxth	r1, r2
 8023d88:	b218      	sxth	r0, r3
 8023d8a:	4288      	cmp	r0, r1
 8023d8c:	f77f af7b 	ble.w	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023d90:	1a9b      	subs	r3, r3, r2
 8023d92:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023d96:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023d9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d9e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023da2:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023da6:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023daa:	23ff      	movs	r3, #255	; 0xff
 8023dac:	4642      	mov	r2, r8
 8023dae:	e782      	b.n	8023cb6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8023db0:	4633      	mov	r3, r6
 8023db2:	4622      	mov	r2, r4
 8023db4:	a902      	add	r1, sp, #8
 8023db6:	4628      	mov	r0, r5
 8023db8:	f7ff fa04 	bl	80231c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023dbc:	e763      	b.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023dbe:	9600      	str	r6, [sp, #0]
 8023dc0:	4623      	mov	r3, r4
 8023dc2:	aa02      	add	r2, sp, #8
 8023dc4:	4649      	mov	r1, r9
 8023dc6:	4628      	mov	r0, r5
 8023dc8:	f7ff fddc 	bl	8023984 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023dcc:	e75b      	b.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023dce:	4638      	mov	r0, r7
 8023dd0:	f7fc f846 	bl	801fe60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023dd4:	b950      	cbnz	r0, 8023dec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8023dd6:	e9cd 6000 	strd	r6, r0, [sp]
 8023dda:	f8da 3000 	ldr.w	r3, [sl]
 8023dde:	aa02      	add	r2, sp, #8
 8023de0:	68de      	ldr	r6, [r3, #12]
 8023de2:	4629      	mov	r1, r5
 8023de4:	4623      	mov	r3, r4
 8023de6:	4650      	mov	r0, sl
 8023de8:	47b0      	blx	r6
 8023dea:	e74c      	b.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023dec:	f10d 0818 	add.w	r8, sp, #24
 8023df0:	4639      	mov	r1, r7
 8023df2:	4640      	mov	r0, r8
 8023df4:	f7fb ffe8 	bl	801fdc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023df8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023dfc:	af04      	add	r7, sp, #16
 8023dfe:	e887 0003 	stmia.w	r7, {r0, r1}
 8023e02:	4638      	mov	r0, r7
 8023e04:	4621      	mov	r1, r4
 8023e06:	f7f5 ff87 	bl	8019d18 <_ZN8touchgfx4RectaNERKS0_>
 8023e0a:	4638      	mov	r0, r7
 8023e0c:	f7f5 ffc7 	bl	8019d9e <_ZNK8touchgfx4Rect7isEmptyEv>
 8023e10:	b138      	cbz	r0, 8023e22 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8023e12:	9600      	str	r6, [sp, #0]
 8023e14:	4623      	mov	r3, r4
 8023e16:	aa02      	add	r2, sp, #8
 8023e18:	4649      	mov	r1, r9
 8023e1a:	4628      	mov	r0, r5
 8023e1c:	f7ff fdca 	bl	80239b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023e20:	e731      	b.n	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023e22:	e9cd 6000 	strd	r6, r0, [sp]
 8023e26:	f8da 3000 	ldr.w	r3, [sl]
 8023e2a:	aa02      	add	r2, sp, #8
 8023e2c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023e30:	4629      	mov	r1, r5
 8023e32:	463b      	mov	r3, r7
 8023e34:	4650      	mov	r0, sl
 8023e36:	47d8      	blx	fp
 8023e38:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023e3c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023e40:	4293      	cmp	r3, r2
 8023e42:	dd13      	ble.n	8023e6c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8023e44:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023e48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023e4c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023e50:	1a9b      	subs	r3, r3, r2
 8023e52:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023e56:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023e5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023e5e:	9600      	str	r6, [sp, #0]
 8023e60:	4643      	mov	r3, r8
 8023e62:	aa02      	add	r2, sp, #8
 8023e64:	4649      	mov	r1, r9
 8023e66:	4628      	mov	r0, r5
 8023e68:	f7ff fda4 	bl	80239b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023e6c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023e70:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023e74:	4293      	cmp	r3, r2
 8023e76:	dd13      	ble.n	8023ea0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8023e78:	1a9b      	subs	r3, r3, r2
 8023e7a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023e7e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023e82:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023e86:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023e8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023e8e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023e92:	9600      	str	r6, [sp, #0]
 8023e94:	4643      	mov	r3, r8
 8023e96:	aa02      	add	r2, sp, #8
 8023e98:	4649      	mov	r1, r9
 8023e9a:	4628      	mov	r0, r5
 8023e9c:	f7ff fd8a 	bl	80239b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023ea0:	88a2      	ldrh	r2, [r4, #4]
 8023ea2:	8823      	ldrh	r3, [r4, #0]
 8023ea4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023ea8:	4413      	add	r3, r2
 8023eaa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023eae:	440a      	add	r2, r1
 8023eb0:	b29b      	uxth	r3, r3
 8023eb2:	b292      	uxth	r2, r2
 8023eb4:	b211      	sxth	r1, r2
 8023eb6:	b218      	sxth	r0, r3
 8023eb8:	4288      	cmp	r0, r1
 8023eba:	dd13      	ble.n	8023ee4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8023ebc:	1a9b      	subs	r3, r3, r2
 8023ebe:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023ec2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023ec6:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023eca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023ece:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023ed2:	9600      	str	r6, [sp, #0]
 8023ed4:	4643      	mov	r3, r8
 8023ed6:	aa02      	add	r2, sp, #8
 8023ed8:	4649      	mov	r1, r9
 8023eda:	4628      	mov	r0, r5
 8023edc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023ee0:	f7ff fd68 	bl	80239b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023ee4:	88e2      	ldrh	r2, [r4, #6]
 8023ee6:	8863      	ldrh	r3, [r4, #2]
 8023ee8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023eec:	4413      	add	r3, r2
 8023eee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023ef2:	440a      	add	r2, r1
 8023ef4:	b29b      	uxth	r3, r3
 8023ef6:	b292      	uxth	r2, r2
 8023ef8:	b211      	sxth	r1, r2
 8023efa:	b218      	sxth	r0, r3
 8023efc:	4288      	cmp	r0, r1
 8023efe:	f77f aec2 	ble.w	8023c86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8023f02:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023f06:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023f0a:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023f0e:	1a9b      	subs	r3, r3, r2
 8023f10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023f14:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023f18:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023f1c:	9600      	str	r6, [sp, #0]
 8023f1e:	4643      	mov	r3, r8
 8023f20:	e779      	b.n	8023e16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8023f22:	bf00      	nop
 8023f24:	2000b4c4 	.word	0x2000b4c4

08023f28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023f28:	b180      	cbz	r0, 8023f4c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8023f2a:	2903      	cmp	r1, #3
 8023f2c:	d81c      	bhi.n	8023f68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023f2e:	e8df f001 	tbb	[pc, r1]
 8023f32:	1d02      	.short	0x1d02
 8023f34:	1f08      	.short	0x1f08
 8023f36:	4b10      	ldr	r3, [pc, #64]	; (8023f78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023f38:	8818      	ldrh	r0, [r3, #0]
 8023f3a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023f3e:	4240      	negs	r0, r0
 8023f40:	4770      	bx	lr
 8023f42:	4b0d      	ldr	r3, [pc, #52]	; (8023f78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023f44:	8818      	ldrh	r0, [r3, #0]
 8023f46:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023f4a:	4770      	bx	lr
 8023f4c:	2903      	cmp	r1, #3
 8023f4e:	d80b      	bhi.n	8023f68 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023f50:	a301      	add	r3, pc, #4	; (adr r3, 8023f58 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023f52:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023f56:	bf00      	nop
 8023f58:	08023f6d 	.word	0x08023f6d
 8023f5c:	08023f43 	.word	0x08023f43
 8023f60:	08023f71 	.word	0x08023f71
 8023f64:	08023f37 	.word	0x08023f37
 8023f68:	2000      	movs	r0, #0
 8023f6a:	4770      	bx	lr
 8023f6c:	2001      	movs	r0, #1
 8023f6e:	4770      	bx	lr
 8023f70:	f04f 30ff 	mov.w	r0, #4294967295
 8023f74:	4770      	bx	lr
 8023f76:	bf00      	nop
 8023f78:	2000b4be 	.word	0x2000b4be

08023f7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023f7c:	b180      	cbz	r0, 8023fa0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8023f7e:	2903      	cmp	r1, #3
 8023f80:	d81c      	bhi.n	8023fbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023f82:	e8df f001 	tbb	[pc, r1]
 8023f86:	021d      	.short	0x021d
 8023f88:	071f      	.short	0x071f
 8023f8a:	4b10      	ldr	r3, [pc, #64]	; (8023fcc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023f8c:	8818      	ldrh	r0, [r3, #0]
 8023f8e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023f92:	4770      	bx	lr
 8023f94:	4b0d      	ldr	r3, [pc, #52]	; (8023fcc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023f96:	8818      	ldrh	r0, [r3, #0]
 8023f98:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023f9c:	4240      	negs	r0, r0
 8023f9e:	4770      	bx	lr
 8023fa0:	2903      	cmp	r1, #3
 8023fa2:	d80b      	bhi.n	8023fbc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023fa4:	a301      	add	r3, pc, #4	; (adr r3, 8023fac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8023fa6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023faa:	bf00      	nop
 8023fac:	08023f8b 	.word	0x08023f8b
 8023fb0:	08023fc5 	.word	0x08023fc5
 8023fb4:	08023f95 	.word	0x08023f95
 8023fb8:	08023fc1 	.word	0x08023fc1
 8023fbc:	2000      	movs	r0, #0
 8023fbe:	4770      	bx	lr
 8023fc0:	2001      	movs	r0, #1
 8023fc2:	4770      	bx	lr
 8023fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8023fc8:	4770      	bx	lr
 8023fca:	bf00      	nop
 8023fcc:	2000b4be 	.word	0x2000b4be

08023fd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fd4:	b099      	sub	sp, #100	; 0x64
 8023fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8023fd8:	a914      	add	r1, sp, #80	; 0x50
 8023fda:	e881 000c 	stmia.w	r1, {r2, r3}
 8023fde:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8023fe2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023fe6:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023fea:	9309      	str	r3, [sp, #36]	; 0x24
 8023fec:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023ff0:	9310      	str	r3, [sp, #64]	; 0x40
 8023ff2:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8023ff6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8023ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8023ffc:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8024000:	798f      	ldrb	r7, [r1, #6]
 8024002:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8024006:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 802400a:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 802400e:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8024012:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8024016:	431f      	orrs	r7, r3
 8024018:	f000 8195 	beq.w	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802401c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8024020:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8024024:	f891 9007 	ldrb.w	r9, [r1, #7]
 8024028:	ea59 0903 	orrs.w	r9, r9, r3
 802402c:	f000 818b 	beq.w	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8024030:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8024034:	b29b      	uxth	r3, r3
 8024036:	2d00      	cmp	r5, #0
 8024038:	f000 812e 	beq.w	8024298 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 802403c:	1aed      	subs	r5, r5, r3
 802403e:	b2ad      	uxth	r5, r5
 8024040:	042b      	lsls	r3, r5, #16
 8024042:	d502      	bpl.n	802404a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8024044:	1b64      	subs	r4, r4, r5
 8024046:	b224      	sxth	r4, r4
 8024048:	2500      	movs	r5, #0
 802404a:	f9b2 1000 	ldrsh.w	r1, [r2]
 802404e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8024052:	428c      	cmp	r4, r1
 8024054:	b28b      	uxth	r3, r1
 8024056:	bfbf      	itttt	lt
 8024058:	18ed      	addlt	r5, r5, r3
 802405a:	1b2c      	sublt	r4, r5, r4
 802405c:	b2a5      	uxthlt	r5, r4
 802405e:	460c      	movlt	r4, r1
 8024060:	8891      	ldrh	r1, [r2, #4]
 8024062:	440b      	add	r3, r1
 8024064:	b21b      	sxth	r3, r3
 8024066:	930f      	str	r3, [sp, #60]	; 0x3c
 8024068:	88d3      	ldrh	r3, [r2, #6]
 802406a:	8852      	ldrh	r2, [r2, #2]
 802406c:	4413      	add	r3, r2
 802406e:	b21b      	sxth	r3, r3
 8024070:	930d      	str	r3, [sp, #52]	; 0x34
 8024072:	4bbe      	ldr	r3, [pc, #760]	; (802436c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8024074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024076:	f893 b000 	ldrb.w	fp, [r3]
 802407a:	f10b 3cff 	add.w	ip, fp, #4294967295
 802407e:	f1dc 0300 	rsbs	r3, ip, #0
 8024082:	eb43 030c 	adc.w	r3, r3, ip
 8024086:	930e      	str	r3, [sp, #56]	; 0x38
 8024088:	4621      	mov	r1, r4
 802408a:	4653      	mov	r3, sl
 802408c:	a814      	add	r0, sp, #80	; 0x50
 802408e:	f7f8 fe73 	bl	801cd78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8024092:	4621      	mov	r1, r4
 8024094:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8024098:	4653      	mov	r3, sl
 802409a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802409c:	a814      	add	r0, sp, #80	; 0x50
 802409e:	f7f8 fe88 	bl	801cdb2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80240a2:	a918      	add	r1, sp, #96	; 0x60
 80240a4:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80240a8:	a817      	add	r0, sp, #92	; 0x5c
 80240aa:	f7f8 ffa9 	bl	801d000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80240ae:	f1ba 0f00 	cmp.w	sl, #0
 80240b2:	f040 80f4 	bne.w	802429e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80240b6:	f1bb 0f01 	cmp.w	fp, #1
 80240ba:	f040 80f8 	bne.w	80242ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80240be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80240c0:	2b00      	cmp	r3, #0
 80240c2:	f040 8145 	bne.w	8024350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80240c6:	b2ba      	uxth	r2, r7
 80240c8:	b905      	cbnz	r5, 80240cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80240ca:	b16e      	cbz	r6, 80240e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80240cc:	fb06 5302 	mla	r3, r6, r2, r5
 80240d0:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80240d2:	fb08 f303 	mul.w	r3, r8, r3
 80240d6:	4631      	mov	r1, r6
 80240d8:	f003 0607 	and.w	r6, r3, #7
 80240dc:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80240e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80240e2:	eba9 0301 	sub.w	r3, r9, r1
 80240e6:	930a      	str	r3, [sp, #40]	; 0x28
 80240e8:	4651      	mov	r1, sl
 80240ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80240ec:	f7ff ff1c 	bl	8023f28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80240f0:	4681      	mov	r9, r0
 80240f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80240f4:	f7ff ff42 	bl	8023f7c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80240f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80240fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80240fc:	eba3 0a01 	sub.w	sl, r3, r1
 8024100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024102:	459a      	cmp	sl, r3
 8024104:	bfa8      	it	ge
 8024106:	469a      	movge	sl, r3
 8024108:	f1ba 0f00 	cmp.w	sl, #0
 802410c:	4683      	mov	fp, r0
 802410e:	f340 811a 	ble.w	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8024112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024114:	1b64      	subs	r4, r4, r5
 8024116:	1b1c      	subs	r4, r3, r4
 8024118:	42bc      	cmp	r4, r7
 802411a:	bfd4      	ite	le
 802411c:	ebc5 0504 	rsble	r5, r5, r4
 8024120:	ebc5 0507 	rsbgt	r5, r5, r7
 8024124:	2d00      	cmp	r5, #0
 8024126:	f340 810e 	ble.w	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802412a:	1b52      	subs	r2, r2, r5
 802412c:	fb08 f302 	mul.w	r3, r8, r2
 8024130:	930f      	str	r3, [sp, #60]	; 0x3c
 8024132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024134:	2b00      	cmp	r3, #0
 8024136:	f040 8116 	bne.w	8024366 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 802413a:	4b8d      	ldr	r3, [pc, #564]	; (8024370 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 802413c:	6818      	ldr	r0, [r3, #0]
 802413e:	6803      	ldr	r3, [r0, #0]
 8024140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024142:	4798      	blx	r3
 8024144:	2301      	movs	r3, #1
 8024146:	fa03 f308 	lsl.w	r3, r3, r8
 802414a:	4a8a      	ldr	r2, [pc, #552]	; (8024374 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802414c:	3b01      	subs	r3, #1
 802414e:	b2db      	uxtb	r3, r3
 8024150:	8811      	ldrh	r1, [r2, #0]
 8024152:	930e      	str	r3, [sp, #56]	; 0x38
 8024154:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8024158:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 802415c:	fb01 2303 	mla	r3, r1, r3, r2
 8024160:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024164:	930a      	str	r3, [sp, #40]	; 0x28
 8024166:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024168:	f3c3 4307 	ubfx	r3, r3, #16, #8
 802416c:	9313      	str	r3, [sp, #76]	; 0x4c
 802416e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024170:	0a19      	lsrs	r1, r3, #8
 8024172:	b2cb      	uxtb	r3, r1
 8024174:	9312      	str	r3, [sp, #72]	; 0x48
 8024176:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024178:	b2db      	uxtb	r3, r3
 802417a:	9311      	str	r3, [sp, #68]	; 0x44
 802417c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802417e:	095a      	lsrs	r2, r3, #5
 8024180:	4b7d      	ldr	r3, [pc, #500]	; (8024378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8024182:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024186:	400b      	ands	r3, r1
 8024188:	4313      	orrs	r3, r2
 802418a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802418c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024190:	4313      	orrs	r3, r2
 8024192:	b29b      	uxth	r3, r3
 8024194:	9310      	str	r3, [sp, #64]	; 0x40
 8024196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024198:	781a      	ldrb	r2, [r3, #0]
 802419a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802419e:	4132      	asrs	r2, r6
 80241a0:	fb05 b919 	mls	r9, r5, r9, fp
 80241a4:	fb03 fb05 	mul.w	fp, r3, r5
 80241a8:	b2d2      	uxtb	r2, r2
 80241aa:	930d      	str	r3, [sp, #52]	; 0x34
 80241ac:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80241b0:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80241b4:	f0c0 80f5 	bcc.w	80243a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80241b8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80241bc:	46ae      	mov	lr, r5
 80241be:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80241c2:	f0c0 80dd 	bcc.w	8024380 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80241c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80241c8:	4013      	ands	r3, r2
 80241ca:	d055      	beq.n	8024278 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80241cc:	20ff      	movs	r0, #255	; 0xff
 80241ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80241d0:	fb90 f1f1 	sdiv	r1, r0, r1
 80241d4:	434b      	muls	r3, r1
 80241d6:	2bfe      	cmp	r3, #254	; 0xfe
 80241d8:	dd03      	ble.n	80241e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80241da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80241dc:	4281      	cmp	r1, r0
 80241de:	f000 80cd 	beq.w	802437c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80241e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80241e4:	f8bc 4000 	ldrh.w	r4, [ip]
 80241e8:	fb11 f303 	smulbb	r3, r1, r3
 80241ec:	b29b      	uxth	r3, r3
 80241ee:	1c59      	adds	r1, r3, #1
 80241f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80241f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80241f8:	b29f      	uxth	r7, r3
 80241fa:	43db      	mvns	r3, r3
 80241fc:	b2db      	uxtb	r3, r3
 80241fe:	9309      	str	r3, [sp, #36]	; 0x24
 8024200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024202:	1220      	asrs	r0, r4, #8
 8024204:	fb13 f907 	smulbb	r9, r3, r7
 8024208:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802420c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802420e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024212:	fb00 9003 	mla	r0, r0, r3, r9
 8024216:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024218:	10e1      	asrs	r1, r4, #3
 802421a:	fb13 f907 	smulbb	r9, r3, r7
 802421e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024224:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8024228:	fb01 9103 	mla	r1, r1, r3, r9
 802422c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802422e:	00e4      	lsls	r4, r4, #3
 8024230:	fb13 f707 	smulbb	r7, r3, r7
 8024234:	b2e4      	uxtb	r4, r4
 8024236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024238:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802423c:	fb04 7403 	mla	r4, r4, r3, r7
 8024240:	b280      	uxth	r0, r0
 8024242:	b2a4      	uxth	r4, r4
 8024244:	1c43      	adds	r3, r0, #1
 8024246:	f104 0901 	add.w	r9, r4, #1
 802424a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802424e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8024252:	b289      	uxth	r1, r1
 8024254:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8024258:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802425c:	ea49 0000 	orr.w	r0, r9, r0
 8024260:	f101 0901 	add.w	r9, r1, #1
 8024264:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8024268:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802426c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024270:	ea40 0009 	orr.w	r0, r0, r9
 8024274:	f8ac 0000 	strh.w	r0, [ip]
 8024278:	4446      	add	r6, r8
 802427a:	b2b6      	uxth	r6, r6
 802427c:	2e07      	cmp	r6, #7
 802427e:	bf81      	itttt	hi
 8024280:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8024282:	785a      	ldrbhi	r2, [r3, #1]
 8024284:	3301      	addhi	r3, #1
 8024286:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8024288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802428a:	bf9a      	itte	ls
 802428c:	fa42 f208 	asrls.w	r2, r2, r8
 8024290:	b2d2      	uxtbls	r2, r2
 8024292:	2600      	movhi	r6, #0
 8024294:	449c      	add	ip, r3
 8024296:	e792      	b.n	80241be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8024298:	441c      	add	r4, r3
 802429a:	b224      	sxth	r4, r4
 802429c:	e6d5      	b.n	802404a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802429e:	f1ba 0f01 	cmp.w	sl, #1
 80242a2:	f47f af0c 	bne.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242a6:	f1bb 0f01 	cmp.w	fp, #1
 80242aa:	f47f af08 	bne.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242ae:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8024370 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80242b2:	f8db 0000 	ldr.w	r0, [fp]
 80242b6:	6803      	ldr	r3, [r0, #0]
 80242b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80242ba:	4798      	blx	r3
 80242bc:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80242c0:	465a      	mov	r2, fp
 80242c2:	d006      	beq.n	80242d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80242c4:	f1b8 0f04 	cmp.w	r8, #4
 80242c8:	d140      	bne.n	802434c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80242ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80242cc:	3300      	adds	r3, #0
 80242ce:	bf18      	it	ne
 80242d0:	2301      	movne	r3, #1
 80242d2:	0580      	lsls	r0, r0, #22
 80242d4:	d56e      	bpl.n	80243b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80242d6:	f1b8 0f08 	cmp.w	r8, #8
 80242da:	d16b      	bne.n	80243b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80242dc:	2b00      	cmp	r3, #0
 80242de:	bf0c      	ite	eq
 80242e0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80242e4:	f44f 7180 	movne.w	r1, #256	; 0x100
 80242e8:	2d00      	cmp	r5, #0
 80242ea:	f47f aee8 	bne.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242ee:	2e00      	cmp	r6, #0
 80242f0:	f47f aee5 	bne.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80242f6:	19e3      	adds	r3, r4, r7
 80242f8:	4283      	cmp	r3, r0
 80242fa:	f73f aee0 	bgt.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024300:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024302:	444b      	add	r3, r9
 8024304:	4283      	cmp	r3, r0
 8024306:	f73f aeda 	bgt.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802430a:	6810      	ldr	r0, [r2, #0]
 802430c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8024310:	6804      	ldr	r4, [r0, #0]
 8024312:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8024316:	b2bf      	uxth	r7, r7
 8024318:	f1b8 0f08 	cmp.w	r8, #8
 802431c:	f04f 0500 	mov.w	r5, #0
 8024320:	bf18      	it	ne
 8024322:	3701      	addne	r7, #1
 8024324:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024328:	990c      	ldr	r1, [sp, #48]	; 0x30
 802432a:	9104      	str	r1, [sp, #16]
 802432c:	bf18      	it	ne
 802432e:	f027 0701 	bicne.w	r7, r7, #1
 8024332:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024334:	bf18      	it	ne
 8024336:	b2bf      	uxthne	r7, r7
 8024338:	e9cd 7102 	strd	r7, r1, [sp, #8]
 802433c:	e9cd 7900 	strd	r7, r9, [sp]
 8024340:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024342:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8024344:	47a0      	blx	r4
 8024346:	b019      	add	sp, #100	; 0x64
 8024348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802434c:	2300      	movs	r3, #0
 802434e:	e7c0      	b.n	80242d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8024350:	2208      	movs	r2, #8
 8024352:	fb92 f3f8 	sdiv	r3, r2, r8
 8024356:	1e5a      	subs	r2, r3, #1
 8024358:	443a      	add	r2, r7
 802435a:	fb92 f2f3 	sdiv	r2, r2, r3
 802435e:	fb12 f203 	smulbb	r2, r2, r3
 8024362:	b292      	uxth	r2, r2
 8024364:	e6b0      	b.n	80240c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8024366:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024368:	e6ec      	b.n	8024144 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802436a:	bf00      	nop
 802436c:	2000b4bc 	.word	0x2000b4bc
 8024370:	2000b4c4 	.word	0x2000b4c4
 8024374:	2000b4be 	.word	0x2000b4be
 8024378:	00fff800 	.word	0x00fff800
 802437c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802437e:	e779      	b.n	8024274 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8024380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024382:	b153      	cbz	r3, 802439a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8024384:	441e      	add	r6, r3
 8024386:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024388:	b2b6      	uxth	r6, r6
 802438a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802438e:	f006 0607 	and.w	r6, r6, #7
 8024392:	781a      	ldrb	r2, [r3, #0]
 8024394:	9328      	str	r3, [sp, #160]	; 0xa0
 8024396:	4132      	asrs	r2, r6
 8024398:	b2d2      	uxtb	r2, r2
 802439a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802439c:	445b      	add	r3, fp
 802439e:	930a      	str	r3, [sp, #40]	; 0x28
 80243a0:	e706      	b.n	80241b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80243a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80243a4:	2b00      	cmp	r3, #0
 80243a6:	d1ce      	bne.n	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80243a8:	4b05      	ldr	r3, [pc, #20]	; (80243c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80243aa:	6818      	ldr	r0, [r3, #0]
 80243ac:	6803      	ldr	r3, [r0, #0]
 80243ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80243b0:	4798      	blx	r3
 80243b2:	e7c8      	b.n	8024346 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	f43f ae82 	beq.w	80240be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80243ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80243be:	e793      	b.n	80242e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80243c0:	2000b4c4 	.word	0x2000b4c4

080243c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80243c4:	b538      	push	{r3, r4, r5, lr}
 80243c6:	4c15      	ldr	r4, [pc, #84]	; (802441c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80243c8:	7823      	ldrb	r3, [r4, #0]
 80243ca:	f3bf 8f5b 	dmb	ish
 80243ce:	07da      	lsls	r2, r3, #31
 80243d0:	4605      	mov	r5, r0
 80243d2:	d40b      	bmi.n	80243ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80243d4:	4620      	mov	r0, r4
 80243d6:	f007 fa60 	bl	802b89a <__cxa_guard_acquire>
 80243da:	b138      	cbz	r0, 80243ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80243dc:	4620      	mov	r0, r4
 80243de:	f007 fa68 	bl	802b8b2 <__cxa_guard_release>
 80243e2:	4a0f      	ldr	r2, [pc, #60]	; (8024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80243e4:	490f      	ldr	r1, [pc, #60]	; (8024424 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80243e6:	4810      	ldr	r0, [pc, #64]	; (8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80243e8:	f007 fa50 	bl	802b88c <__aeabi_atexit>
 80243ec:	4c0f      	ldr	r4, [pc, #60]	; (802442c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80243ee:	7823      	ldrb	r3, [r4, #0]
 80243f0:	f3bf 8f5b 	dmb	ish
 80243f4:	07db      	lsls	r3, r3, #31
 80243f6:	d40b      	bmi.n	8024410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80243f8:	4620      	mov	r0, r4
 80243fa:	f007 fa4e 	bl	802b89a <__cxa_guard_acquire>
 80243fe:	b138      	cbz	r0, 8024410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8024400:	4620      	mov	r0, r4
 8024402:	f007 fa56 	bl	802b8b2 <__cxa_guard_release>
 8024406:	4a06      	ldr	r2, [pc, #24]	; (8024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8024408:	4909      	ldr	r1, [pc, #36]	; (8024430 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802440a:	480a      	ldr	r0, [pc, #40]	; (8024434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802440c:	f007 fa3e 	bl	802b88c <__aeabi_atexit>
 8024410:	4b05      	ldr	r3, [pc, #20]	; (8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8024412:	612b      	str	r3, [r5, #16]
 8024414:	4b07      	ldr	r3, [pc, #28]	; (8024434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8024416:	616b      	str	r3, [r5, #20]
 8024418:	bd38      	pop	{r3, r4, r5, pc}
 802441a:	bf00      	nop
 802441c:	2000b590 	.word	0x2000b590
 8024420:	20000000 	.word	0x20000000
 8024424:	080225e7 	.word	0x080225e7
 8024428:	20000354 	.word	0x20000354
 802442c:	2000b594 	.word	0x2000b594
 8024430:	080225e5 	.word	0x080225e5
 8024434:	20000358 	.word	0x20000358

08024438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024438:	b538      	push	{r3, r4, r5, lr}
 802443a:	4c15      	ldr	r4, [pc, #84]	; (8024490 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802443c:	7823      	ldrb	r3, [r4, #0]
 802443e:	f3bf 8f5b 	dmb	ish
 8024442:	07da      	lsls	r2, r3, #31
 8024444:	4605      	mov	r5, r0
 8024446:	d40b      	bmi.n	8024460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024448:	4620      	mov	r0, r4
 802444a:	f007 fa26 	bl	802b89a <__cxa_guard_acquire>
 802444e:	b138      	cbz	r0, 8024460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024450:	4620      	mov	r0, r4
 8024452:	f007 fa2e 	bl	802b8b2 <__cxa_guard_release>
 8024456:	4a0f      	ldr	r2, [pc, #60]	; (8024494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024458:	490f      	ldr	r1, [pc, #60]	; (8024498 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802445a:	4810      	ldr	r0, [pc, #64]	; (802449c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802445c:	f007 fa16 	bl	802b88c <__aeabi_atexit>
 8024460:	4c0f      	ldr	r4, [pc, #60]	; (80244a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8024462:	7823      	ldrb	r3, [r4, #0]
 8024464:	f3bf 8f5b 	dmb	ish
 8024468:	07db      	lsls	r3, r3, #31
 802446a:	d40b      	bmi.n	8024484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802446c:	4620      	mov	r0, r4
 802446e:	f007 fa14 	bl	802b89a <__cxa_guard_acquire>
 8024472:	b138      	cbz	r0, 8024484 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024474:	4620      	mov	r0, r4
 8024476:	f007 fa1c 	bl	802b8b2 <__cxa_guard_release>
 802447a:	4a06      	ldr	r2, [pc, #24]	; (8024494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802447c:	4909      	ldr	r1, [pc, #36]	; (80244a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802447e:	480a      	ldr	r0, [pc, #40]	; (80244a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024480:	f007 fa04 	bl	802b88c <__aeabi_atexit>
 8024484:	4b05      	ldr	r3, [pc, #20]	; (802449c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024486:	60ab      	str	r3, [r5, #8]
 8024488:	4b07      	ldr	r3, [pc, #28]	; (80244a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802448a:	60eb      	str	r3, [r5, #12]
 802448c:	bd38      	pop	{r3, r4, r5, pc}
 802448e:	bf00      	nop
 8024490:	2000b568 	.word	0x2000b568
 8024494:	20000000 	.word	0x20000000
 8024498:	080225eb 	.word	0x080225eb
 802449c:	2000032c 	.word	0x2000032c
 80244a0:	2000b56c 	.word	0x2000b56c
 80244a4:	080225e9 	.word	0x080225e9
 80244a8:	20000330 	.word	0x20000330

080244ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80244ac:	b510      	push	{r4, lr}
 80244ae:	4604      	mov	r4, r0
 80244b0:	f7ff ff88 	bl	80243c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80244b4:	4620      	mov	r0, r4
 80244b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244ba:	f7ff bfbd 	b.w	8024438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080244c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80244c0:	b538      	push	{r3, r4, r5, lr}
 80244c2:	4c15      	ldr	r4, [pc, #84]	; (8024518 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80244c4:	7823      	ldrb	r3, [r4, #0]
 80244c6:	f3bf 8f5b 	dmb	ish
 80244ca:	07da      	lsls	r2, r3, #31
 80244cc:	4605      	mov	r5, r0
 80244ce:	d40b      	bmi.n	80244e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80244d0:	4620      	mov	r0, r4
 80244d2:	f007 f9e2 	bl	802b89a <__cxa_guard_acquire>
 80244d6:	b138      	cbz	r0, 80244e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80244d8:	4620      	mov	r0, r4
 80244da:	f007 f9ea 	bl	802b8b2 <__cxa_guard_release>
 80244de:	4a0f      	ldr	r2, [pc, #60]	; (802451c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80244e0:	490f      	ldr	r1, [pc, #60]	; (8024520 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80244e2:	4810      	ldr	r0, [pc, #64]	; (8024524 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80244e4:	f007 f9d2 	bl	802b88c <__aeabi_atexit>
 80244e8:	4c0f      	ldr	r4, [pc, #60]	; (8024528 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80244ea:	7823      	ldrb	r3, [r4, #0]
 80244ec:	f3bf 8f5b 	dmb	ish
 80244f0:	07db      	lsls	r3, r3, #31
 80244f2:	d40b      	bmi.n	802450c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80244f4:	4620      	mov	r0, r4
 80244f6:	f007 f9d0 	bl	802b89a <__cxa_guard_acquire>
 80244fa:	b138      	cbz	r0, 802450c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80244fc:	4620      	mov	r0, r4
 80244fe:	f007 f9d8 	bl	802b8b2 <__cxa_guard_release>
 8024502:	4a06      	ldr	r2, [pc, #24]	; (802451c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8024504:	4909      	ldr	r1, [pc, #36]	; (802452c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024506:	480a      	ldr	r0, [pc, #40]	; (8024530 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024508:	f007 f9c0 	bl	802b88c <__aeabi_atexit>
 802450c:	4b05      	ldr	r3, [pc, #20]	; (8024524 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802450e:	622b      	str	r3, [r5, #32]
 8024510:	4b07      	ldr	r3, [pc, #28]	; (8024530 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8024512:	626b      	str	r3, [r5, #36]	; 0x24
 8024514:	bd38      	pop	{r3, r4, r5, pc}
 8024516:	bf00      	nop
 8024518:	2000b598 	.word	0x2000b598
 802451c:	20000000 	.word	0x20000000
 8024520:	080225df 	.word	0x080225df
 8024524:	2000035c 	.word	0x2000035c
 8024528:	2000b59c 	.word	0x2000b59c
 802452c:	080225dd 	.word	0x080225dd
 8024530:	20000360 	.word	0x20000360

08024534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024534:	b538      	push	{r3, r4, r5, lr}
 8024536:	4c15      	ldr	r4, [pc, #84]	; (802458c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024538:	7823      	ldrb	r3, [r4, #0]
 802453a:	f3bf 8f5b 	dmb	ish
 802453e:	07da      	lsls	r2, r3, #31
 8024540:	4605      	mov	r5, r0
 8024542:	d40b      	bmi.n	802455c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024544:	4620      	mov	r0, r4
 8024546:	f007 f9a8 	bl	802b89a <__cxa_guard_acquire>
 802454a:	b138      	cbz	r0, 802455c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802454c:	4620      	mov	r0, r4
 802454e:	f007 f9b0 	bl	802b8b2 <__cxa_guard_release>
 8024552:	4a0f      	ldr	r2, [pc, #60]	; (8024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024554:	490f      	ldr	r1, [pc, #60]	; (8024594 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024556:	4810      	ldr	r0, [pc, #64]	; (8024598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024558:	f007 f998 	bl	802b88c <__aeabi_atexit>
 802455c:	4c0f      	ldr	r4, [pc, #60]	; (802459c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802455e:	7823      	ldrb	r3, [r4, #0]
 8024560:	f3bf 8f5b 	dmb	ish
 8024564:	07db      	lsls	r3, r3, #31
 8024566:	d40b      	bmi.n	8024580 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024568:	4620      	mov	r0, r4
 802456a:	f007 f996 	bl	802b89a <__cxa_guard_acquire>
 802456e:	b138      	cbz	r0, 8024580 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024570:	4620      	mov	r0, r4
 8024572:	f007 f99e 	bl	802b8b2 <__cxa_guard_release>
 8024576:	4a06      	ldr	r2, [pc, #24]	; (8024590 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024578:	4909      	ldr	r1, [pc, #36]	; (80245a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802457a:	480a      	ldr	r0, [pc, #40]	; (80245a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802457c:	f007 f986 	bl	802b88c <__aeabi_atexit>
 8024580:	4b05      	ldr	r3, [pc, #20]	; (8024598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024582:	61ab      	str	r3, [r5, #24]
 8024584:	4b07      	ldr	r3, [pc, #28]	; (80245a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024586:	61eb      	str	r3, [r5, #28]
 8024588:	bd38      	pop	{r3, r4, r5, pc}
 802458a:	bf00      	nop
 802458c:	2000b570 	.word	0x2000b570
 8024590:	20000000 	.word	0x20000000
 8024594:	080225e3 	.word	0x080225e3
 8024598:	20000334 	.word	0x20000334
 802459c:	2000b574 	.word	0x2000b574
 80245a0:	080225e1 	.word	0x080225e1
 80245a4:	20000338 	.word	0x20000338

080245a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80245a8:	b510      	push	{r4, lr}
 80245aa:	4604      	mov	r4, r0
 80245ac:	f7ff ff88 	bl	80244c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80245b0:	4620      	mov	r0, r4
 80245b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245b6:	f7ff bfbd 	b.w	8024534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080245bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80245bc:	b538      	push	{r3, r4, r5, lr}
 80245be:	4c15      	ldr	r4, [pc, #84]	; (8024614 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80245c0:	7823      	ldrb	r3, [r4, #0]
 80245c2:	f3bf 8f5b 	dmb	ish
 80245c6:	07da      	lsls	r2, r3, #31
 80245c8:	4605      	mov	r5, r0
 80245ca:	d40b      	bmi.n	80245e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80245cc:	4620      	mov	r0, r4
 80245ce:	f007 f964 	bl	802b89a <__cxa_guard_acquire>
 80245d2:	b138      	cbz	r0, 80245e4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80245d4:	4620      	mov	r0, r4
 80245d6:	f007 f96c 	bl	802b8b2 <__cxa_guard_release>
 80245da:	4a0f      	ldr	r2, [pc, #60]	; (8024618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80245dc:	490f      	ldr	r1, [pc, #60]	; (802461c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80245de:	4810      	ldr	r0, [pc, #64]	; (8024620 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80245e0:	f007 f954 	bl	802b88c <__aeabi_atexit>
 80245e4:	4c0f      	ldr	r4, [pc, #60]	; (8024624 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80245e6:	7823      	ldrb	r3, [r4, #0]
 80245e8:	f3bf 8f5b 	dmb	ish
 80245ec:	07db      	lsls	r3, r3, #31
 80245ee:	d40b      	bmi.n	8024608 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80245f0:	4620      	mov	r0, r4
 80245f2:	f007 f952 	bl	802b89a <__cxa_guard_acquire>
 80245f6:	b138      	cbz	r0, 8024608 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80245f8:	4620      	mov	r0, r4
 80245fa:	f007 f95a 	bl	802b8b2 <__cxa_guard_release>
 80245fe:	4a06      	ldr	r2, [pc, #24]	; (8024618 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024600:	4909      	ldr	r1, [pc, #36]	; (8024628 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024602:	480a      	ldr	r0, [pc, #40]	; (802462c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024604:	f007 f942 	bl	802b88c <__aeabi_atexit>
 8024608:	4b05      	ldr	r3, [pc, #20]	; (8024620 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802460a:	632b      	str	r3, [r5, #48]	; 0x30
 802460c:	4b07      	ldr	r3, [pc, #28]	; (802462c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802460e:	636b      	str	r3, [r5, #52]	; 0x34
 8024610:	bd38      	pop	{r3, r4, r5, pc}
 8024612:	bf00      	nop
 8024614:	2000b5a8 	.word	0x2000b5a8
 8024618:	20000000 	.word	0x20000000
 802461c:	080225d7 	.word	0x080225d7
 8024620:	2000036c 	.word	0x2000036c
 8024624:	2000b5ac 	.word	0x2000b5ac
 8024628:	080225d5 	.word	0x080225d5
 802462c:	20000370 	.word	0x20000370

08024630 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024630:	b538      	push	{r3, r4, r5, lr}
 8024632:	4c15      	ldr	r4, [pc, #84]	; (8024688 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024634:	7823      	ldrb	r3, [r4, #0]
 8024636:	f3bf 8f5b 	dmb	ish
 802463a:	07da      	lsls	r2, r3, #31
 802463c:	4605      	mov	r5, r0
 802463e:	d40b      	bmi.n	8024658 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024640:	4620      	mov	r0, r4
 8024642:	f007 f92a 	bl	802b89a <__cxa_guard_acquire>
 8024646:	b138      	cbz	r0, 8024658 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024648:	4620      	mov	r0, r4
 802464a:	f007 f932 	bl	802b8b2 <__cxa_guard_release>
 802464e:	4a0f      	ldr	r2, [pc, #60]	; (802468c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024650:	490f      	ldr	r1, [pc, #60]	; (8024690 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024652:	4810      	ldr	r0, [pc, #64]	; (8024694 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024654:	f007 f91a 	bl	802b88c <__aeabi_atexit>
 8024658:	4c0f      	ldr	r4, [pc, #60]	; (8024698 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802465a:	7823      	ldrb	r3, [r4, #0]
 802465c:	f3bf 8f5b 	dmb	ish
 8024660:	07db      	lsls	r3, r3, #31
 8024662:	d40b      	bmi.n	802467c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024664:	4620      	mov	r0, r4
 8024666:	f007 f918 	bl	802b89a <__cxa_guard_acquire>
 802466a:	b138      	cbz	r0, 802467c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802466c:	4620      	mov	r0, r4
 802466e:	f007 f920 	bl	802b8b2 <__cxa_guard_release>
 8024672:	4a06      	ldr	r2, [pc, #24]	; (802468c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024674:	4909      	ldr	r1, [pc, #36]	; (802469c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024676:	480a      	ldr	r0, [pc, #40]	; (80246a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024678:	f007 f908 	bl	802b88c <__aeabi_atexit>
 802467c:	4b05      	ldr	r3, [pc, #20]	; (8024694 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802467e:	62ab      	str	r3, [r5, #40]	; 0x28
 8024680:	4b07      	ldr	r3, [pc, #28]	; (80246a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024682:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024684:	bd38      	pop	{r3, r4, r5, pc}
 8024686:	bf00      	nop
 8024688:	2000b578 	.word	0x2000b578
 802468c:	20000000 	.word	0x20000000
 8024690:	080225db 	.word	0x080225db
 8024694:	2000033c 	.word	0x2000033c
 8024698:	2000b57c 	.word	0x2000b57c
 802469c:	080225d9 	.word	0x080225d9
 80246a0:	20000340 	.word	0x20000340

080246a4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80246a4:	b510      	push	{r4, lr}
 80246a6:	4604      	mov	r4, r0
 80246a8:	f7ff ff88 	bl	80245bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80246ac:	4620      	mov	r0, r4
 80246ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80246b2:	f7ff bfbd 	b.w	8024630 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080246b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80246b8:	b538      	push	{r3, r4, r5, lr}
 80246ba:	4c15      	ldr	r4, [pc, #84]	; (8024710 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80246bc:	7823      	ldrb	r3, [r4, #0]
 80246be:	f3bf 8f5b 	dmb	ish
 80246c2:	07da      	lsls	r2, r3, #31
 80246c4:	4605      	mov	r5, r0
 80246c6:	d40b      	bmi.n	80246e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80246c8:	4620      	mov	r0, r4
 80246ca:	f007 f8e6 	bl	802b89a <__cxa_guard_acquire>
 80246ce:	b138      	cbz	r0, 80246e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80246d0:	4620      	mov	r0, r4
 80246d2:	f007 f8ee 	bl	802b8b2 <__cxa_guard_release>
 80246d6:	4a0f      	ldr	r2, [pc, #60]	; (8024714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80246d8:	490f      	ldr	r1, [pc, #60]	; (8024718 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80246da:	4810      	ldr	r0, [pc, #64]	; (802471c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80246dc:	f007 f8d6 	bl	802b88c <__aeabi_atexit>
 80246e0:	4c0f      	ldr	r4, [pc, #60]	; (8024720 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80246e2:	7823      	ldrb	r3, [r4, #0]
 80246e4:	f3bf 8f5b 	dmb	ish
 80246e8:	07db      	lsls	r3, r3, #31
 80246ea:	d40b      	bmi.n	8024704 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80246ec:	4620      	mov	r0, r4
 80246ee:	f007 f8d4 	bl	802b89a <__cxa_guard_acquire>
 80246f2:	b138      	cbz	r0, 8024704 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80246f4:	4620      	mov	r0, r4
 80246f6:	f007 f8dc 	bl	802b8b2 <__cxa_guard_release>
 80246fa:	4a06      	ldr	r2, [pc, #24]	; (8024714 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80246fc:	4909      	ldr	r1, [pc, #36]	; (8024724 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80246fe:	480a      	ldr	r0, [pc, #40]	; (8024728 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024700:	f007 f8c4 	bl	802b88c <__aeabi_atexit>
 8024704:	4b05      	ldr	r3, [pc, #20]	; (802471c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024706:	652b      	str	r3, [r5, #80]	; 0x50
 8024708:	4b07      	ldr	r3, [pc, #28]	; (8024728 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802470a:	656b      	str	r3, [r5, #84]	; 0x54
 802470c:	bd38      	pop	{r3, r4, r5, pc}
 802470e:	bf00      	nop
 8024710:	2000b5b0 	.word	0x2000b5b0
 8024714:	20000000 	.word	0x20000000
 8024718:	080225c7 	.word	0x080225c7
 802471c:	20000374 	.word	0x20000374
 8024720:	2000b5b4 	.word	0x2000b5b4
 8024724:	080225c5 	.word	0x080225c5
 8024728:	20000378 	.word	0x20000378

0802472c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802472c:	b538      	push	{r3, r4, r5, lr}
 802472e:	4c15      	ldr	r4, [pc, #84]	; (8024784 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024730:	7823      	ldrb	r3, [r4, #0]
 8024732:	f3bf 8f5b 	dmb	ish
 8024736:	07da      	lsls	r2, r3, #31
 8024738:	4605      	mov	r5, r0
 802473a:	d40b      	bmi.n	8024754 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802473c:	4620      	mov	r0, r4
 802473e:	f007 f8ac 	bl	802b89a <__cxa_guard_acquire>
 8024742:	b138      	cbz	r0, 8024754 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024744:	4620      	mov	r0, r4
 8024746:	f007 f8b4 	bl	802b8b2 <__cxa_guard_release>
 802474a:	4a0f      	ldr	r2, [pc, #60]	; (8024788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802474c:	490f      	ldr	r1, [pc, #60]	; (802478c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802474e:	4810      	ldr	r0, [pc, #64]	; (8024790 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024750:	f007 f89c 	bl	802b88c <__aeabi_atexit>
 8024754:	4c0f      	ldr	r4, [pc, #60]	; (8024794 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024756:	7823      	ldrb	r3, [r4, #0]
 8024758:	f3bf 8f5b 	dmb	ish
 802475c:	07db      	lsls	r3, r3, #31
 802475e:	d40b      	bmi.n	8024778 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024760:	4620      	mov	r0, r4
 8024762:	f007 f89a 	bl	802b89a <__cxa_guard_acquire>
 8024766:	b138      	cbz	r0, 8024778 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024768:	4620      	mov	r0, r4
 802476a:	f007 f8a2 	bl	802b8b2 <__cxa_guard_release>
 802476e:	4a06      	ldr	r2, [pc, #24]	; (8024788 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024770:	4909      	ldr	r1, [pc, #36]	; (8024798 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8024772:	480a      	ldr	r0, [pc, #40]	; (802479c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024774:	f007 f88a 	bl	802b88c <__aeabi_atexit>
 8024778:	4b05      	ldr	r3, [pc, #20]	; (8024790 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802477a:	64ab      	str	r3, [r5, #72]	; 0x48
 802477c:	4b07      	ldr	r3, [pc, #28]	; (802479c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802477e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024780:	bd38      	pop	{r3, r4, r5, pc}
 8024782:	bf00      	nop
 8024784:	2000b5b8 	.word	0x2000b5b8
 8024788:	20000000 	.word	0x20000000
 802478c:	080225cb 	.word	0x080225cb
 8024790:	2000037c 	.word	0x2000037c
 8024794:	2000b5bc 	.word	0x2000b5bc
 8024798:	080225c9 	.word	0x080225c9
 802479c:	20000380 	.word	0x20000380

080247a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80247a0:	b538      	push	{r3, r4, r5, lr}
 80247a2:	4c15      	ldr	r4, [pc, #84]	; (80247f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80247a4:	7823      	ldrb	r3, [r4, #0]
 80247a6:	f3bf 8f5b 	dmb	ish
 80247aa:	07da      	lsls	r2, r3, #31
 80247ac:	4605      	mov	r5, r0
 80247ae:	d40b      	bmi.n	80247c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80247b0:	4620      	mov	r0, r4
 80247b2:	f007 f872 	bl	802b89a <__cxa_guard_acquire>
 80247b6:	b138      	cbz	r0, 80247c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80247b8:	4620      	mov	r0, r4
 80247ba:	f007 f87a 	bl	802b8b2 <__cxa_guard_release>
 80247be:	4a0f      	ldr	r2, [pc, #60]	; (80247fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80247c0:	490f      	ldr	r1, [pc, #60]	; (8024800 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80247c2:	4810      	ldr	r0, [pc, #64]	; (8024804 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80247c4:	f007 f862 	bl	802b88c <__aeabi_atexit>
 80247c8:	4c0f      	ldr	r4, [pc, #60]	; (8024808 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80247ca:	7823      	ldrb	r3, [r4, #0]
 80247cc:	f3bf 8f5b 	dmb	ish
 80247d0:	07db      	lsls	r3, r3, #31
 80247d2:	d40b      	bmi.n	80247ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80247d4:	4620      	mov	r0, r4
 80247d6:	f007 f860 	bl	802b89a <__cxa_guard_acquire>
 80247da:	b138      	cbz	r0, 80247ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80247dc:	4620      	mov	r0, r4
 80247de:	f007 f868 	bl	802b8b2 <__cxa_guard_release>
 80247e2:	4a06      	ldr	r2, [pc, #24]	; (80247fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80247e4:	4909      	ldr	r1, [pc, #36]	; (802480c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80247e6:	480a      	ldr	r0, [pc, #40]	; (8024810 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80247e8:	f007 f850 	bl	802b88c <__aeabi_atexit>
 80247ec:	4b05      	ldr	r3, [pc, #20]	; (8024804 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80247ee:	642b      	str	r3, [r5, #64]	; 0x40
 80247f0:	4b07      	ldr	r3, [pc, #28]	; (8024810 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80247f2:	646b      	str	r3, [r5, #68]	; 0x44
 80247f4:	bd38      	pop	{r3, r4, r5, pc}
 80247f6:	bf00      	nop
 80247f8:	2000b580 	.word	0x2000b580
 80247fc:	20000000 	.word	0x20000000
 8024800:	080225cf 	.word	0x080225cf
 8024804:	20000344 	.word	0x20000344
 8024808:	2000b584 	.word	0x2000b584
 802480c:	080225cd 	.word	0x080225cd
 8024810:	20000348 	.word	0x20000348

08024814 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024814:	b538      	push	{r3, r4, r5, lr}
 8024816:	4c15      	ldr	r4, [pc, #84]	; (802486c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024818:	7823      	ldrb	r3, [r4, #0]
 802481a:	f3bf 8f5b 	dmb	ish
 802481e:	07da      	lsls	r2, r3, #31
 8024820:	4605      	mov	r5, r0
 8024822:	d40b      	bmi.n	802483c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024824:	4620      	mov	r0, r4
 8024826:	f007 f838 	bl	802b89a <__cxa_guard_acquire>
 802482a:	b138      	cbz	r0, 802483c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802482c:	4620      	mov	r0, r4
 802482e:	f007 f840 	bl	802b8b2 <__cxa_guard_release>
 8024832:	4a0f      	ldr	r2, [pc, #60]	; (8024870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024834:	490f      	ldr	r1, [pc, #60]	; (8024874 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024836:	4810      	ldr	r0, [pc, #64]	; (8024878 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024838:	f007 f828 	bl	802b88c <__aeabi_atexit>
 802483c:	4c0f      	ldr	r4, [pc, #60]	; (802487c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802483e:	7823      	ldrb	r3, [r4, #0]
 8024840:	f3bf 8f5b 	dmb	ish
 8024844:	07db      	lsls	r3, r3, #31
 8024846:	d40b      	bmi.n	8024860 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024848:	4620      	mov	r0, r4
 802484a:	f007 f826 	bl	802b89a <__cxa_guard_acquire>
 802484e:	b138      	cbz	r0, 8024860 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024850:	4620      	mov	r0, r4
 8024852:	f007 f82e 	bl	802b8b2 <__cxa_guard_release>
 8024856:	4a06      	ldr	r2, [pc, #24]	; (8024870 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024858:	4909      	ldr	r1, [pc, #36]	; (8024880 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802485a:	480a      	ldr	r0, [pc, #40]	; (8024884 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802485c:	f007 f816 	bl	802b88c <__aeabi_atexit>
 8024860:	4b05      	ldr	r3, [pc, #20]	; (8024878 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024862:	63ab      	str	r3, [r5, #56]	; 0x38
 8024864:	4b07      	ldr	r3, [pc, #28]	; (8024884 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024866:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024868:	bd38      	pop	{r3, r4, r5, pc}
 802486a:	bf00      	nop
 802486c:	2000b5a0 	.word	0x2000b5a0
 8024870:	20000000 	.word	0x20000000
 8024874:	080225d3 	.word	0x080225d3
 8024878:	20000364 	.word	0x20000364
 802487c:	2000b5a4 	.word	0x2000b5a4
 8024880:	080225d1 	.word	0x080225d1
 8024884:	20000368 	.word	0x20000368

08024888 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024888:	b510      	push	{r4, lr}
 802488a:	4604      	mov	r4, r0
 802488c:	f7ff ff14 	bl	80246b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8024890:	4620      	mov	r0, r4
 8024892:	f7ff ff85 	bl	80247a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024896:	4620      	mov	r0, r4
 8024898:	f7ff ff48 	bl	802472c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802489c:	4620      	mov	r0, r4
 802489e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80248a2:	f7ff bfb7 	b.w	8024814 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080248a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80248a8:	b538      	push	{r3, r4, r5, lr}
 80248aa:	4c15      	ldr	r4, [pc, #84]	; (8024900 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80248ac:	7823      	ldrb	r3, [r4, #0]
 80248ae:	f3bf 8f5b 	dmb	ish
 80248b2:	07da      	lsls	r2, r3, #31
 80248b4:	4605      	mov	r5, r0
 80248b6:	d40b      	bmi.n	80248d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80248b8:	4620      	mov	r0, r4
 80248ba:	f006 ffee 	bl	802b89a <__cxa_guard_acquire>
 80248be:	b138      	cbz	r0, 80248d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80248c0:	4620      	mov	r0, r4
 80248c2:	f006 fff6 	bl	802b8b2 <__cxa_guard_release>
 80248c6:	4a0f      	ldr	r2, [pc, #60]	; (8024904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80248c8:	490f      	ldr	r1, [pc, #60]	; (8024908 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80248ca:	4810      	ldr	r0, [pc, #64]	; (802490c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80248cc:	f006 ffde 	bl	802b88c <__aeabi_atexit>
 80248d0:	4c0f      	ldr	r4, [pc, #60]	; (8024910 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80248d2:	7823      	ldrb	r3, [r4, #0]
 80248d4:	f3bf 8f5b 	dmb	ish
 80248d8:	07db      	lsls	r3, r3, #31
 80248da:	d40b      	bmi.n	80248f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80248dc:	4620      	mov	r0, r4
 80248de:	f006 ffdc 	bl	802b89a <__cxa_guard_acquire>
 80248e2:	b138      	cbz	r0, 80248f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80248e4:	4620      	mov	r0, r4
 80248e6:	f006 ffe4 	bl	802b8b2 <__cxa_guard_release>
 80248ea:	4a06      	ldr	r2, [pc, #24]	; (8024904 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80248ec:	4909      	ldr	r1, [pc, #36]	; (8024914 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80248ee:	480a      	ldr	r0, [pc, #40]	; (8024918 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80248f0:	f006 ffcc 	bl	802b88c <__aeabi_atexit>
 80248f4:	4b05      	ldr	r3, [pc, #20]	; (802490c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80248f6:	662b      	str	r3, [r5, #96]	; 0x60
 80248f8:	4b07      	ldr	r3, [pc, #28]	; (8024918 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80248fa:	666b      	str	r3, [r5, #100]	; 0x64
 80248fc:	bd38      	pop	{r3, r4, r5, pc}
 80248fe:	bf00      	nop
 8024900:	2000b588 	.word	0x2000b588
 8024904:	20000000 	.word	0x20000000
 8024908:	080225bf 	.word	0x080225bf
 802490c:	2000034c 	.word	0x2000034c
 8024910:	2000b58c 	.word	0x2000b58c
 8024914:	080225bd 	.word	0x080225bd
 8024918:	20000350 	.word	0x20000350

0802491c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802491c:	b538      	push	{r3, r4, r5, lr}
 802491e:	4c15      	ldr	r4, [pc, #84]	; (8024974 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024920:	7823      	ldrb	r3, [r4, #0]
 8024922:	f3bf 8f5b 	dmb	ish
 8024926:	07da      	lsls	r2, r3, #31
 8024928:	4605      	mov	r5, r0
 802492a:	d40b      	bmi.n	8024944 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802492c:	4620      	mov	r0, r4
 802492e:	f006 ffb4 	bl	802b89a <__cxa_guard_acquire>
 8024932:	b138      	cbz	r0, 8024944 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024934:	4620      	mov	r0, r4
 8024936:	f006 ffbc 	bl	802b8b2 <__cxa_guard_release>
 802493a:	4a0f      	ldr	r2, [pc, #60]	; (8024978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802493c:	490f      	ldr	r1, [pc, #60]	; (802497c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802493e:	4810      	ldr	r0, [pc, #64]	; (8024980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024940:	f006 ffa4 	bl	802b88c <__aeabi_atexit>
 8024944:	4c0f      	ldr	r4, [pc, #60]	; (8024984 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024946:	7823      	ldrb	r3, [r4, #0]
 8024948:	f3bf 8f5b 	dmb	ish
 802494c:	07db      	lsls	r3, r3, #31
 802494e:	d40b      	bmi.n	8024968 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024950:	4620      	mov	r0, r4
 8024952:	f006 ffa2 	bl	802b89a <__cxa_guard_acquire>
 8024956:	b138      	cbz	r0, 8024968 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024958:	4620      	mov	r0, r4
 802495a:	f006 ffaa 	bl	802b8b2 <__cxa_guard_release>
 802495e:	4a06      	ldr	r2, [pc, #24]	; (8024978 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024960:	4909      	ldr	r1, [pc, #36]	; (8024988 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024962:	480a      	ldr	r0, [pc, #40]	; (802498c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024964:	f006 ff92 	bl	802b88c <__aeabi_atexit>
 8024968:	4b05      	ldr	r3, [pc, #20]	; (8024980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802496a:	65ab      	str	r3, [r5, #88]	; 0x58
 802496c:	4b07      	ldr	r3, [pc, #28]	; (802498c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802496e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8024970:	bd38      	pop	{r3, r4, r5, pc}
 8024972:	bf00      	nop
 8024974:	2000b560 	.word	0x2000b560
 8024978:	20000000 	.word	0x20000000
 802497c:	080225c3 	.word	0x080225c3
 8024980:	20000324 	.word	0x20000324
 8024984:	2000b564 	.word	0x2000b564
 8024988:	080225c1 	.word	0x080225c1
 802498c:	20000328 	.word	0x20000328

08024990 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8024990:	b510      	push	{r4, lr}
 8024992:	4604      	mov	r4, r0
 8024994:	f7ff ff88 	bl	80248a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024998:	4620      	mov	r0, r4
 802499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802499e:	f7ff bfbd 	b.w	802491c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080249a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80249a4:	b538      	push	{r3, r4, r5, lr}
 80249a6:	4c15      	ldr	r4, [pc, #84]	; (80249fc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80249a8:	7823      	ldrb	r3, [r4, #0]
 80249aa:	f3bf 8f5b 	dmb	ish
 80249ae:	07da      	lsls	r2, r3, #31
 80249b0:	4605      	mov	r5, r0
 80249b2:	d40b      	bmi.n	80249cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80249b4:	4620      	mov	r0, r4
 80249b6:	f006 ff70 	bl	802b89a <__cxa_guard_acquire>
 80249ba:	b138      	cbz	r0, 80249cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80249bc:	4620      	mov	r0, r4
 80249be:	f006 ff78 	bl	802b8b2 <__cxa_guard_release>
 80249c2:	4a0f      	ldr	r2, [pc, #60]	; (8024a00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80249c4:	490f      	ldr	r1, [pc, #60]	; (8024a04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80249c6:	4810      	ldr	r0, [pc, #64]	; (8024a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80249c8:	f006 ff60 	bl	802b88c <__aeabi_atexit>
 80249cc:	4c0f      	ldr	r4, [pc, #60]	; (8024a0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80249ce:	7823      	ldrb	r3, [r4, #0]
 80249d0:	f3bf 8f5b 	dmb	ish
 80249d4:	07db      	lsls	r3, r3, #31
 80249d6:	d40b      	bmi.n	80249f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80249d8:	4620      	mov	r0, r4
 80249da:	f006 ff5e 	bl	802b89a <__cxa_guard_acquire>
 80249de:	b138      	cbz	r0, 80249f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80249e0:	4620      	mov	r0, r4
 80249e2:	f006 ff66 	bl	802b8b2 <__cxa_guard_release>
 80249e6:	4a06      	ldr	r2, [pc, #24]	; (8024a00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80249e8:	4909      	ldr	r1, [pc, #36]	; (8024a10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80249ea:	480a      	ldr	r0, [pc, #40]	; (8024a14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80249ec:	f006 ff4e 	bl	802b88c <__aeabi_atexit>
 80249f0:	4b05      	ldr	r3, [pc, #20]	; (8024a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80249f2:	672b      	str	r3, [r5, #112]	; 0x70
 80249f4:	4b07      	ldr	r3, [pc, #28]	; (8024a14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80249f6:	676b      	str	r3, [r5, #116]	; 0x74
 80249f8:	bd38      	pop	{r3, r4, r5, pc}
 80249fa:	bf00      	nop
 80249fc:	2000b558 	.word	0x2000b558
 8024a00:	20000000 	.word	0x20000000
 8024a04:	080225b7 	.word	0x080225b7
 8024a08:	2000031c 	.word	0x2000031c
 8024a0c:	2000b55c 	.word	0x2000b55c
 8024a10:	080225b5 	.word	0x080225b5
 8024a14:	20000320 	.word	0x20000320

08024a18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024a18:	b538      	push	{r3, r4, r5, lr}
 8024a1a:	4c15      	ldr	r4, [pc, #84]	; (8024a70 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024a1c:	7823      	ldrb	r3, [r4, #0]
 8024a1e:	f3bf 8f5b 	dmb	ish
 8024a22:	07da      	lsls	r2, r3, #31
 8024a24:	4605      	mov	r5, r0
 8024a26:	d40b      	bmi.n	8024a40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024a28:	4620      	mov	r0, r4
 8024a2a:	f006 ff36 	bl	802b89a <__cxa_guard_acquire>
 8024a2e:	b138      	cbz	r0, 8024a40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024a30:	4620      	mov	r0, r4
 8024a32:	f006 ff3e 	bl	802b8b2 <__cxa_guard_release>
 8024a36:	4a0f      	ldr	r2, [pc, #60]	; (8024a74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024a38:	490f      	ldr	r1, [pc, #60]	; (8024a78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024a3a:	4810      	ldr	r0, [pc, #64]	; (8024a7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024a3c:	f006 ff26 	bl	802b88c <__aeabi_atexit>
 8024a40:	4c0f      	ldr	r4, [pc, #60]	; (8024a80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024a42:	7823      	ldrb	r3, [r4, #0]
 8024a44:	f3bf 8f5b 	dmb	ish
 8024a48:	07db      	lsls	r3, r3, #31
 8024a4a:	d40b      	bmi.n	8024a64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	f006 ff24 	bl	802b89a <__cxa_guard_acquire>
 8024a52:	b138      	cbz	r0, 8024a64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024a54:	4620      	mov	r0, r4
 8024a56:	f006 ff2c 	bl	802b8b2 <__cxa_guard_release>
 8024a5a:	4a06      	ldr	r2, [pc, #24]	; (8024a74 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024a5c:	4909      	ldr	r1, [pc, #36]	; (8024a84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024a5e:	480a      	ldr	r0, [pc, #40]	; (8024a88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024a60:	f006 ff14 	bl	802b88c <__aeabi_atexit>
 8024a64:	4b05      	ldr	r3, [pc, #20]	; (8024a7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024a66:	66ab      	str	r3, [r5, #104]	; 0x68
 8024a68:	4b07      	ldr	r3, [pc, #28]	; (8024a88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024a6a:	66eb      	str	r3, [r5, #108]	; 0x6c
 8024a6c:	bd38      	pop	{r3, r4, r5, pc}
 8024a6e:	bf00      	nop
 8024a70:	2000b550 	.word	0x2000b550
 8024a74:	20000000 	.word	0x20000000
 8024a78:	080225bb 	.word	0x080225bb
 8024a7c:	20000314 	.word	0x20000314
 8024a80:	2000b554 	.word	0x2000b554
 8024a84:	080225b9 	.word	0x080225b9
 8024a88:	20000318 	.word	0x20000318

08024a8c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024a8c:	b510      	push	{r4, lr}
 8024a8e:	4604      	mov	r4, r0
 8024a90:	f7ff ff88 	bl	80249a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024a94:	4620      	mov	r0, r4
 8024a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a9a:	f7ff bfbd 	b.w	8024a18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08024a9e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8024a9e:	b510      	push	{r4, lr}
 8024aa0:	4604      	mov	r4, r0
 8024aa2:	f7ff fff3 	bl	8024a8c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024aa6:	4620      	mov	r0, r4
 8024aa8:	f7ff ff72 	bl	8024990 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024aac:	4620      	mov	r0, r4
 8024aae:	f7ff fdf9 	bl	80246a4 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8024ab2:	4620      	mov	r0, r4
 8024ab4:	f7ff fcfa 	bl	80244ac <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024ab8:	4620      	mov	r0, r4
 8024aba:	f7ff fd75 	bl	80245a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8024abe:	4620      	mov	r0, r4
 8024ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ac4:	f7ff bee0 	b.w	8024888 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024ac8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024acc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8024ad0:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8024ad4:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8024ad8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8024adc:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024ae0:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8024ae4:	8808      	ldrh	r0, [r1, #0]
 8024ae6:	fb05 4c0e 	mla	ip, r5, lr, r4
 8024aea:	2d00      	cmp	r5, #0
 8024aec:	eb02 0a0c 	add.w	sl, r2, ip
 8024af0:	f2c0 80b0 	blt.w	8024c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024af4:	45ab      	cmp	fp, r5
 8024af6:	f340 80ad 	ble.w	8024c54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024afa:	2c00      	cmp	r4, #0
 8024afc:	f2c0 80a8 	blt.w	8024c50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024b00:	45a6      	cmp	lr, r4
 8024b02:	f340 80a5 	ble.w	8024c50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024b06:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024b0a:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8024b0e:	1c62      	adds	r2, r4, #1
 8024b10:	f100 80a3 	bmi.w	8024c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b14:	4596      	cmp	lr, r2
 8024b16:	f340 80a0 	ble.w	8024c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b1a:	f1b9 0f00 	cmp.w	r9, #0
 8024b1e:	f000 809c 	beq.w	8024c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b22:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024b26:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024b2a:	3501      	adds	r5, #1
 8024b2c:	f100 8099 	bmi.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b30:	45ab      	cmp	fp, r5
 8024b32:	f340 8096 	ble.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b36:	2f00      	cmp	r7, #0
 8024b38:	f000 8093 	beq.w	8024c62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b3c:	2c00      	cmp	r4, #0
 8024b3e:	f2c0 808e 	blt.w	8024c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024b42:	45a6      	cmp	lr, r4
 8024b44:	f340 808b 	ble.w	8024c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024b48:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8024b4c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8024b50:	3401      	adds	r4, #1
 8024b52:	f100 8089 	bmi.w	8024c68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b56:	45a6      	cmp	lr, r4
 8024b58:	f340 8086 	ble.w	8024c68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b5c:	f1b9 0f00 	cmp.w	r9, #0
 8024b60:	f000 8082 	beq.w	8024c68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b64:	44d6      	add	lr, sl
 8024b66:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024b6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024b6e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024b72:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024b76:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8024b7a:	fb19 fe07 	smulbb	lr, r9, r7
 8024b7e:	ea44 0808 	orr.w	r8, r4, r8
 8024b82:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024b86:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024b8a:	f1c7 0210 	rsb	r2, r7, #16
 8024b8e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024b92:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024b96:	ea44 0c0c 	orr.w	ip, r4, ip
 8024b9a:	eba2 0209 	sub.w	r2, r2, r9
 8024b9e:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8024ba2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8024ba6:	fb04 f40c 	mul.w	r4, r4, ip
 8024baa:	fb02 4808 	mla	r8, r2, r8, r4
 8024bae:	041a      	lsls	r2, r3, #16
 8024bb0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024bb4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024bb8:	4313      	orrs	r3, r2
 8024bba:	042a      	lsls	r2, r5, #16
 8024bbc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024bc0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024bc4:	fb0e 8303 	mla	r3, lr, r3, r8
 8024bc8:	432a      	orrs	r2, r5
 8024bca:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024bce:	fb07 3202 	mla	r2, r7, r2, r3
 8024bd2:	0d53      	lsrs	r3, r2, #21
 8024bd4:	0952      	lsrs	r2, r2, #5
 8024bd6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024bda:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024bde:	431a      	orrs	r2, r3
 8024be0:	b293      	uxth	r3, r2
 8024be2:	b2b4      	uxth	r4, r6
 8024be4:	1202      	asrs	r2, r0, #8
 8024be6:	43f6      	mvns	r6, r6
 8024be8:	b2f6      	uxtb	r6, r6
 8024bea:	121d      	asrs	r5, r3, #8
 8024bec:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024bf0:	fb12 f206 	smulbb	r2, r2, r6
 8024bf4:	10c7      	asrs	r7, r0, #3
 8024bf6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024bfa:	00c0      	lsls	r0, r0, #3
 8024bfc:	fb05 2504 	mla	r5, r5, r4, r2
 8024c00:	b2c0      	uxtb	r0, r0
 8024c02:	10da      	asrs	r2, r3, #3
 8024c04:	00db      	lsls	r3, r3, #3
 8024c06:	b2db      	uxtb	r3, r3
 8024c08:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024c0c:	fb10 f006 	smulbb	r0, r0, r6
 8024c10:	b2ad      	uxth	r5, r5
 8024c12:	fb03 0004 	mla	r0, r3, r4, r0
 8024c16:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024c1a:	fb17 f706 	smulbb	r7, r7, r6
 8024c1e:	b280      	uxth	r0, r0
 8024c20:	1c6b      	adds	r3, r5, #1
 8024c22:	fb02 7204 	mla	r2, r2, r4, r7
 8024c26:	b292      	uxth	r2, r2
 8024c28:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024c2c:	1c43      	adds	r3, r0, #1
 8024c2e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024c32:	1c50      	adds	r0, r2, #1
 8024c34:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024c38:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024c3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024c40:	0952      	lsrs	r2, r2, #5
 8024c42:	432b      	orrs	r3, r5
 8024c44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024c48:	4313      	orrs	r3, r2
 8024c4a:	800b      	strh	r3, [r1, #0]
 8024c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c50:	4680      	mov	r8, r0
 8024c52:	e75c      	b.n	8024b0e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024c54:	4684      	mov	ip, r0
 8024c56:	4680      	mov	r8, r0
 8024c58:	e767      	b.n	8024b2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024c5a:	4684      	mov	ip, r0
 8024c5c:	e765      	b.n	8024b2a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024c5e:	4605      	mov	r5, r0
 8024c60:	e776      	b.n	8024b50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8024c62:	4603      	mov	r3, r0
 8024c64:	4605      	mov	r5, r0
 8024c66:	e782      	b.n	8024b6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024c68:	4603      	mov	r3, r0
 8024c6a:	e780      	b.n	8024b6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08024c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c70:	b099      	sub	sp, #100	; 0x64
 8024c72:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8024c76:	9215      	str	r2, [sp, #84]	; 0x54
 8024c78:	9309      	str	r3, [sp, #36]	; 0x24
 8024c7a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8024c7c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8024c80:	930d      	str	r3, [sp, #52]	; 0x34
 8024c82:	910c      	str	r1, [sp, #48]	; 0x30
 8024c84:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8024c88:	9016      	str	r0, [sp, #88]	; 0x58
 8024c8a:	6850      	ldr	r0, [r2, #4]
 8024c8c:	6812      	ldr	r2, [r2, #0]
 8024c8e:	fb00 1303 	mla	r3, r0, r3, r1
 8024c92:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024c96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024c98:	681b      	ldr	r3, [r3, #0]
 8024c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024c9e:	685e      	ldr	r6, [r3, #4]
 8024ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ca2:	43db      	mvns	r3, r3
 8024ca4:	b2db      	uxtb	r3, r3
 8024ca6:	3604      	adds	r6, #4
 8024ca8:	930a      	str	r3, [sp, #40]	; 0x28
 8024caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024cac:	2b00      	cmp	r3, #0
 8024cae:	dc03      	bgt.n	8024cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024cb2:	2b00      	cmp	r3, #0
 8024cb4:	f340 8225 	ble.w	8025102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024cb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024cba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cc2:	1e48      	subs	r0, r1, #1
 8024cc4:	1e57      	subs	r7, r2, #1
 8024cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024cc8:	2b00      	cmp	r3, #0
 8024cca:	f340 80e3 	ble.w	8024e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024cce:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024cd2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024cd6:	d406      	bmi.n	8024ce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cd8:	4584      	cmp	ip, r0
 8024cda:	da04      	bge.n	8024ce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	db02      	blt.n	8024ce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024ce0:	42bb      	cmp	r3, r7
 8024ce2:	f2c0 80d8 	blt.w	8024e96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024ce6:	f11c 0c01 	adds.w	ip, ip, #1
 8024cea:	f100 80c9 	bmi.w	8024e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cee:	4561      	cmp	r1, ip
 8024cf0:	f2c0 80c6 	blt.w	8024e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cf4:	3301      	adds	r3, #1
 8024cf6:	f100 80c3 	bmi.w	8024e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cfa:	429a      	cmp	r2, r3
 8024cfc:	f2c0 80c0 	blt.w	8024e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024d00:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024d04:	4647      	mov	r7, r8
 8024d06:	f1bb 0f00 	cmp.w	fp, #0
 8024d0a:	f340 80e3 	ble.w	8024ed4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024d0e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024d10:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d12:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024d16:	689b      	ldr	r3, [r3, #8]
 8024d18:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024d1c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d20:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024d24:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d28:	f100 8121 	bmi.w	8024f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d2c:	f103 39ff 	add.w	r9, r3, #4294967295
 8024d30:	454a      	cmp	r2, r9
 8024d32:	f280 811c 	bge.w	8024f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d36:	f1bc 0f00 	cmp.w	ip, #0
 8024d3a:	f2c0 8118 	blt.w	8024f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d3e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024d42:	45cc      	cmp	ip, r9
 8024d44:	f280 8113 	bge.w	8024f6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d48:	b21b      	sxth	r3, r3
 8024d4a:	fb0c 2203 	mla	r2, ip, r3, r2
 8024d4e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024d50:	eb04 0902 	add.w	r9, r4, r2
 8024d54:	5ca2      	ldrb	r2, [r4, r2]
 8024d56:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024d5a:	2800      	cmp	r0, #0
 8024d5c:	f000 80fe 	beq.w	8024f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8024d60:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024d64:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024d68:	9211      	str	r2, [sp, #68]	; 0x44
 8024d6a:	b151      	cbz	r1, 8024d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024d6c:	eb09 0203 	add.w	r2, r9, r3
 8024d70:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024d74:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d7a:	7853      	ldrb	r3, [r2, #1]
 8024d7c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d80:	9312      	str	r3, [sp, #72]	; 0x48
 8024d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024d84:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024d86:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024d8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024d8e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8024d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024d98:	041b      	lsls	r3, r3, #16
 8024d9a:	fb10 f201 	smulbb	r2, r0, r1
 8024d9e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024da2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024da6:	10d2      	asrs	r2, r2, #3
 8024da8:	4323      	orrs	r3, r4
 8024daa:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024dae:	4353      	muls	r3, r2
 8024db0:	fb09 330c 	mla	r3, r9, ip, r3
 8024db4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024db8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024dbc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024dc0:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024dc4:	f1c1 0c10 	rsb	ip, r1, #16
 8024dc8:	ebac 0c00 	sub.w	ip, ip, r0
 8024dcc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024dd0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024dd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024dd8:	0418      	lsls	r0, r3, #16
 8024dda:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8024dde:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024de2:	4318      	orrs	r0, r3
 8024de4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024de8:	fb02 c200 	mla	r2, r2, r0, ip
 8024dec:	0d53      	lsrs	r3, r2, #21
 8024dee:	0952      	lsrs	r2, r2, #5
 8024df0:	8838      	ldrh	r0, [r7, #0]
 8024df2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024df6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024dfa:	431a      	orrs	r2, r3
 8024dfc:	b292      	uxth	r2, r2
 8024dfe:	1201      	asrs	r1, r0, #8
 8024e00:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8024e04:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024e08:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024e0c:	fb11 f104 	smulbb	r1, r1, r4
 8024e10:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024e14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024e18:	00c0      	lsls	r0, r0, #3
 8024e1a:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024e1e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8024e22:	10d1      	asrs	r1, r2, #3
 8024e24:	b2c0      	uxtb	r0, r0
 8024e26:	00d2      	lsls	r2, r2, #3
 8024e28:	b2d2      	uxtb	r2, r2
 8024e2a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8024e2e:	fb1e fe04 	smulbb	lr, lr, r4
 8024e32:	fb10 f004 	smulbb	r0, r0, r4
 8024e36:	fa1f fc8c 	uxth.w	ip, ip
 8024e3a:	fb01 e103 	mla	r1, r1, r3, lr
 8024e3e:	fb02 0303 	mla	r3, r2, r3, r0
 8024e42:	b29a      	uxth	r2, r3
 8024e44:	f10c 0301 	add.w	r3, ip, #1
 8024e48:	b289      	uxth	r1, r1
 8024e4a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024e4e:	1c53      	adds	r3, r2, #1
 8024e50:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024e54:	1c4a      	adds	r2, r1, #1
 8024e56:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024e5a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8024e5e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024e62:	0949      	lsrs	r1, r1, #5
 8024e64:	ea43 030c 	orr.w	r3, r3, ip
 8024e68:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024e6c:	430b      	orrs	r3, r1
 8024e6e:	803b      	strh	r3, [r7, #0]
 8024e70:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024e72:	449a      	add	sl, r3
 8024e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024e76:	3702      	adds	r7, #2
 8024e78:	441d      	add	r5, r3
 8024e7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e7e:	e742      	b.n	8024d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024e80:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024e82:	449a      	add	sl, r3
 8024e84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024e86:	441d      	add	r5, r3
 8024e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e8a:	3b01      	subs	r3, #1
 8024e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8024e8e:	f108 0802 	add.w	r8, r8, #2
 8024e92:	e718      	b.n	8024cc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024e94:	d023      	beq.n	8024ede <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e98:	9825      	ldr	r0, [sp, #148]	; 0x94
 8024e9a:	3b01      	subs	r3, #1
 8024e9c:	fb00 a003 	mla	r0, r0, r3, sl
 8024ea0:	1400      	asrs	r0, r0, #16
 8024ea2:	f53f af2d 	bmi.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ea6:	3901      	subs	r1, #1
 8024ea8:	4288      	cmp	r0, r1
 8024eaa:	f6bf af29 	bge.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024eae:	9926      	ldr	r1, [sp, #152]	; 0x98
 8024eb0:	fb01 5303 	mla	r3, r1, r3, r5
 8024eb4:	141b      	asrs	r3, r3, #16
 8024eb6:	f53f af23 	bmi.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024eba:	3a01      	subs	r2, #1
 8024ebc:	4293      	cmp	r3, r2
 8024ebe:	f6bf af1f 	bge.w	8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ec2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024ec6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8024eca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8024ece:	f1be 0f00 	cmp.w	lr, #0
 8024ed2:	dc6c      	bgt.n	8024fae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ed6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024eda:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024ee0:	2b00      	cmp	r3, #0
 8024ee2:	f340 810e 	ble.w	8025102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024ee6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024eea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024eee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024ef4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024ef8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024efc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024f00:	eef0 6a62 	vmov.f32	s13, s5
 8024f04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f10:	ee16 aa90 	vmov	sl, s13
 8024f14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f18:	eef0 6a43 	vmov.f32	s13, s6
 8024f1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f20:	ee12 2a90 	vmov	r2, s5
 8024f24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f2c:	ee13 2a10 	vmov	r2, s6
 8024f30:	9325      	str	r3, [sp, #148]	; 0x94
 8024f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f38:	9326      	str	r3, [sp, #152]	; 0x98
 8024f3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8024f3e:	3b01      	subs	r3, #1
 8024f40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f44:	930c      	str	r3, [sp, #48]	; 0x30
 8024f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024f48:	bf08      	it	eq
 8024f4a:	4613      	moveq	r3, r2
 8024f4c:	ee16 5a90 	vmov	r5, s13
 8024f50:	9309      	str	r3, [sp, #36]	; 0x24
 8024f52:	eeb0 3a67 	vmov.f32	s6, s15
 8024f56:	eef0 2a47 	vmov.f32	s5, s14
 8024f5a:	e6a6      	b.n	8024caa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024f5c:	2900      	cmp	r1, #0
 8024f5e:	f43f af10 	beq.w	8024d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f62:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024f66:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f6c:	e709      	b.n	8024d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f6e:	f112 0901 	adds.w	r9, r2, #1
 8024f72:	f53f af7d 	bmi.w	8024e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f76:	454b      	cmp	r3, r9
 8024f78:	f6ff af7a 	blt.w	8024e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f7c:	f11c 0901 	adds.w	r9, ip, #1
 8024f80:	f53f af76 	bmi.w	8024e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f84:	45ce      	cmp	lr, r9
 8024f86:	f6ff af73 	blt.w	8024e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f8a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024f8c:	9202      	str	r2, [sp, #8]
 8024f8e:	b21b      	sxth	r3, r3
 8024f90:	fa0f f28e 	sxth.w	r2, lr
 8024f94:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024f98:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024f9c:	9201      	str	r2, [sp, #4]
 8024f9e:	9300      	str	r3, [sp, #0]
 8024fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fa2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024fa4:	4633      	mov	r3, r6
 8024fa6:	4639      	mov	r1, r7
 8024fa8:	f7ff fd8e 	bl	8024ac8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024fac:	e760      	b.n	8024e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024fae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024fb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024fb6:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024fba:	1429      	asrs	r1, r5, #16
 8024fbc:	fb03 2101 	mla	r1, r3, r1, r2
 8024fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024fc2:	440a      	add	r2, r1
 8024fc4:	5c61      	ldrb	r1, [r4, r1]
 8024fc6:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024fca:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024fce:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024fd2:	f1bc 0f00 	cmp.w	ip, #0
 8024fd6:	f000 808c 	beq.w	80250f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8024fda:	7857      	ldrb	r7, [r2, #1]
 8024fdc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024fe0:	9413      	str	r4, [sp, #76]	; 0x4c
 8024fe2:	b140      	cbz	r0, 8024ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024fe4:	18d7      	adds	r7, r2, r3
 8024fe6:	5cd3      	ldrb	r3, [r2, r3]
 8024fe8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024fec:	9310      	str	r3, [sp, #64]	; 0x40
 8024fee:	787b      	ldrb	r3, [r7, #1]
 8024ff0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024ff4:	9314      	str	r3, [sp, #80]	; 0x50
 8024ff6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024ff8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024ffa:	fb1c f200 	smulbb	r2, ip, r0
 8024ffe:	041f      	lsls	r7, r3, #16
 8025000:	10d2      	asrs	r2, r2, #3
 8025002:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025006:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802500a:	431f      	orrs	r7, r3
 802500c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8025010:	9317      	str	r3, [sp, #92]	; 0x5c
 8025012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025014:	041b      	lsls	r3, r3, #16
 8025016:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 802501a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802501e:	ea43 030b 	orr.w	r3, r3, fp
 8025022:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025024:	4353      	muls	r3, r2
 8025026:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802502a:	fb04 3707 	mla	r7, r4, r7, r3
 802502e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025032:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8025036:	ea43 0b01 	orr.w	fp, r3, r1
 802503a:	f1c0 0110 	rsb	r1, r0, #16
 802503e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025040:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025042:	eba1 0c0c 	sub.w	ip, r1, ip
 8025046:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802504a:	fb0c 770b 	mla	r7, ip, fp, r7
 802504e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025052:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8025056:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802505a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802505e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025062:	fb02 770c 	mla	r7, r2, ip, r7
 8025066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025068:	0d79      	lsrs	r1, r7, #21
 802506a:	097f      	lsrs	r7, r7, #5
 802506c:	8812      	ldrh	r2, [r2, #0]
 802506e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025072:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025076:	430f      	orrs	r7, r1
 8025078:	b2bb      	uxth	r3, r7
 802507a:	1211      	asrs	r1, r2, #8
 802507c:	1218      	asrs	r0, r3, #8
 802507e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025082:	fb11 f104 	smulbb	r1, r1, r4
 8025086:	10d7      	asrs	r7, r2, #3
 8025088:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802508c:	00d2      	lsls	r2, r2, #3
 802508e:	fb00 1009 	mla	r0, r0, r9, r1
 8025092:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025096:	10d9      	asrs	r1, r3, #3
 8025098:	b2d2      	uxtb	r2, r2
 802509a:	00db      	lsls	r3, r3, #3
 802509c:	fb17 f704 	smulbb	r7, r7, r4
 80250a0:	fb12 f204 	smulbb	r2, r2, r4
 80250a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80250a8:	b2db      	uxtb	r3, r3
 80250aa:	b280      	uxth	r0, r0
 80250ac:	fb01 7109 	mla	r1, r1, r9, r7
 80250b0:	fb03 2309 	mla	r3, r3, r9, r2
 80250b4:	b29b      	uxth	r3, r3
 80250b6:	b289      	uxth	r1, r1
 80250b8:	1c42      	adds	r2, r0, #1
 80250ba:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80250be:	1c4f      	adds	r7, r1, #1
 80250c0:	1c5a      	adds	r2, r3, #1
 80250c2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80250c6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80250ca:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80250ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80250d2:	0949      	lsrs	r1, r1, #5
 80250d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80250d6:	4310      	orrs	r0, r2
 80250d8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80250dc:	4308      	orrs	r0, r1
 80250de:	f823 0b02 	strh.w	r0, [r3], #2
 80250e2:	930e      	str	r3, [sp, #56]	; 0x38
 80250e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80250e6:	449a      	add	sl, r3
 80250e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80250ea:	f10e 3eff 	add.w	lr, lr, #4294967295
 80250ee:	441d      	add	r5, r3
 80250f0:	e6ed      	b.n	8024ece <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80250f2:	2800      	cmp	r0, #0
 80250f4:	f43f af7f 	beq.w	8024ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80250f8:	5cd3      	ldrb	r3, [r2, r3]
 80250fa:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80250fe:	9310      	str	r3, [sp, #64]	; 0x40
 8025100:	e779      	b.n	8024ff6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025102:	b019      	add	sp, #100	; 0x64
 8025104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802510c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8025110:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8025114:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8025118:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802511c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8025120:	8808      	ldrh	r0, [r1, #0]
 8025122:	fb08 470e 	mla	r7, r8, lr, r4
 8025126:	f1b8 0f00 	cmp.w	r8, #0
 802512a:	eb02 0907 	add.w	r9, r2, r7
 802512e:	db67      	blt.n	8025200 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8025130:	45c2      	cmp	sl, r8
 8025132:	dd65      	ble.n	8025200 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8025134:	2c00      	cmp	r4, #0
 8025136:	db61      	blt.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8025138:	45a6      	cmp	lr, r4
 802513a:	dd5f      	ble.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 802513c:	5dd2      	ldrb	r2, [r2, r7]
 802513e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8025142:	1c62      	adds	r2, r4, #1
 8025144:	d45f      	bmi.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8025146:	4596      	cmp	lr, r2
 8025148:	dd5d      	ble.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802514a:	2d00      	cmp	r5, #0
 802514c:	d05b      	beq.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802514e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025152:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8025156:	f118 0801 	adds.w	r8, r8, #1
 802515a:	d458      	bmi.n	802520e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802515c:	45c2      	cmp	sl, r8
 802515e:	dd56      	ble.n	802520e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025160:	2e00      	cmp	r6, #0
 8025162:	d054      	beq.n	802520e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025164:	2c00      	cmp	r4, #0
 8025166:	db50      	blt.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8025168:	45a6      	cmp	lr, r4
 802516a:	dd4e      	ble.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802516c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8025170:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8025174:	3401      	adds	r4, #1
 8025176:	d407      	bmi.n	8025188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8025178:	45a6      	cmp	lr, r4
 802517a:	dd05      	ble.n	8025188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802517c:	b125      	cbz	r5, 8025188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802517e:	44ce      	add	lr, r9
 8025180:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025184:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8025188:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802518c:	fb15 f406 	smulbb	r4, r5, r6
 8025190:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025194:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025198:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802519c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80251a0:	ea43 0c0c 	orr.w	ip, r3, ip
 80251a4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80251a8:	f1c6 0310 	rsb	r3, r6, #16
 80251ac:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80251b0:	1b5b      	subs	r3, r3, r5
 80251b2:	ea4e 0707 	orr.w	r7, lr, r7
 80251b6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80251ba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80251be:	437d      	muls	r5, r7
 80251c0:	fb03 5c0c 	mla	ip, r3, ip, r5
 80251c4:	0403      	lsls	r3, r0, #16
 80251c6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80251ca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80251ce:	4318      	orrs	r0, r3
 80251d0:	0413      	lsls	r3, r2, #16
 80251d2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80251d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80251da:	4313      	orrs	r3, r2
 80251dc:	fb04 c000 	mla	r0, r4, r0, ip
 80251e0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80251e4:	fb06 0003 	mla	r0, r6, r3, r0
 80251e8:	0d43      	lsrs	r3, r0, #21
 80251ea:	0940      	lsrs	r0, r0, #5
 80251ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80251f0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80251f4:	4318      	orrs	r0, r3
 80251f6:	8008      	strh	r0, [r1, #0]
 80251f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251fc:	4684      	mov	ip, r0
 80251fe:	e7a0      	b.n	8025142 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8025200:	4607      	mov	r7, r0
 8025202:	4684      	mov	ip, r0
 8025204:	e7a7      	b.n	8025156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8025206:	4607      	mov	r7, r0
 8025208:	e7a5      	b.n	8025156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802520a:	4602      	mov	r2, r0
 802520c:	e7b2      	b.n	8025174 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802520e:	4602      	mov	r2, r0
 8025210:	e7ba      	b.n	8025188 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08025212 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025216:	b093      	sub	sp, #76	; 0x4c
 8025218:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802521c:	920f      	str	r2, [sp, #60]	; 0x3c
 802521e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025220:	9108      	str	r1, [sp, #32]
 8025222:	9306      	str	r3, [sp, #24]
 8025224:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025228:	9010      	str	r0, [sp, #64]	; 0x40
 802522a:	6850      	ldr	r0, [r2, #4]
 802522c:	6812      	ldr	r2, [r2, #0]
 802522e:	fb00 1303 	mla	r3, r0, r3, r1
 8025232:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	9307      	str	r3, [sp, #28]
 802523c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802523e:	685f      	ldr	r7, [r3, #4]
 8025240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025244:	3704      	adds	r7, #4
 8025246:	9b08      	ldr	r3, [sp, #32]
 8025248:	2b00      	cmp	r3, #0
 802524a:	dc03      	bgt.n	8025254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802524c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802524e:	2b00      	cmp	r3, #0
 8025250:	f340 81b2 	ble.w	80255b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025254:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025256:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802525a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802525e:	1e48      	subs	r0, r1, #1
 8025260:	f102 3cff 	add.w	ip, r2, #4294967295
 8025264:	9b06      	ldr	r3, [sp, #24]
 8025266:	2b00      	cmp	r3, #0
 8025268:	f340 80a9 	ble.w	80253be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802526c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025270:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025274:	d406      	bmi.n	8025284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025276:	4586      	cmp	lr, r0
 8025278:	da04      	bge.n	8025284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802527a:	2b00      	cmp	r3, #0
 802527c:	db02      	blt.n	8025284 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802527e:	4563      	cmp	r3, ip
 8025280:	f2c0 809e 	blt.w	80253c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025284:	f11e 0e01 	adds.w	lr, lr, #1
 8025288:	f100 808f 	bmi.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802528c:	4571      	cmp	r1, lr
 802528e:	f2c0 808c 	blt.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025292:	3301      	adds	r3, #1
 8025294:	f100 8089 	bmi.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025298:	429a      	cmp	r2, r3
 802529a:	f2c0 8086 	blt.w	80253aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802529e:	f8dd b018 	ldr.w	fp, [sp, #24]
 80252a2:	46c8      	mov	r8, r9
 80252a4:	f1bb 0f00 	cmp.w	fp, #0
 80252a8:	f340 80a6 	ble.w	80253f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80252ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80252ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80252b0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80252b4:	689b      	ldr	r3, [r3, #8]
 80252b6:	1422      	asrs	r2, r4, #16
 80252b8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80252bc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80252c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80252c4:	f100 80e3 	bmi.w	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252c8:	f103 3aff 	add.w	sl, r3, #4294967295
 80252cc:	4552      	cmp	r2, sl
 80252ce:	f280 80de 	bge.w	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252d2:	f1bc 0f00 	cmp.w	ip, #0
 80252d6:	f2c0 80da 	blt.w	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80252de:	45d4      	cmp	ip, sl
 80252e0:	f280 80d5 	bge.w	802548e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252e4:	b21b      	sxth	r3, r3
 80252e6:	fb0c 2203 	mla	r2, ip, r3, r2
 80252ea:	9d07      	ldr	r5, [sp, #28]
 80252ec:	eb05 0a02 	add.w	sl, r5, r2
 80252f0:	5caa      	ldrb	r2, [r5, r2]
 80252f2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80252f6:	2800      	cmp	r0, #0
 80252f8:	f000 80c0 	beq.w	802547c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80252fc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8025300:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025304:	920b      	str	r2, [sp, #44]	; 0x2c
 8025306:	b151      	cbz	r1, 802531e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025308:	eb0a 0203 	add.w	r2, sl, r3
 802530c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025310:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025314:	9309      	str	r3, [sp, #36]	; 0x24
 8025316:	7853      	ldrb	r3, [r2, #1]
 8025318:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802531c:	930c      	str	r3, [sp, #48]	; 0x30
 802531e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025322:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025326:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802532a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802532e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025334:	041b      	lsls	r3, r3, #16
 8025336:	fb10 f201 	smulbb	r2, r0, r1
 802533a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802533e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025342:	10d2      	asrs	r2, r2, #3
 8025344:	432b      	orrs	r3, r5
 8025346:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802534a:	4353      	muls	r3, r2
 802534c:	fb0a 330c 	mla	r3, sl, ip, r3
 8025350:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025354:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025358:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802535c:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025360:	f1c1 0c10 	rsb	ip, r1, #16
 8025364:	ebac 0c00 	sub.w	ip, ip, r0
 8025368:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802536c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025372:	0418      	lsls	r0, r3, #16
 8025374:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025378:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802537c:	4318      	orrs	r0, r3
 802537e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025382:	fb02 c200 	mla	r2, r2, r0, ip
 8025386:	0d53      	lsrs	r3, r2, #21
 8025388:	0952      	lsrs	r2, r2, #5
 802538a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802538e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025392:	431a      	orrs	r2, r3
 8025394:	f8a8 2000 	strh.w	r2, [r8]
 8025398:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802539a:	441c      	add	r4, r3
 802539c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802539e:	f108 0802 	add.w	r8, r8, #2
 80253a2:	441e      	add	r6, r3
 80253a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80253a8:	e77c      	b.n	80252a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80253aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80253ac:	441c      	add	r4, r3
 80253ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80253b0:	441e      	add	r6, r3
 80253b2:	9b06      	ldr	r3, [sp, #24]
 80253b4:	3b01      	subs	r3, #1
 80253b6:	9306      	str	r3, [sp, #24]
 80253b8:	f109 0902 	add.w	r9, r9, #2
 80253bc:	e752      	b.n	8025264 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80253be:	d020      	beq.n	8025402 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80253c0:	9b06      	ldr	r3, [sp, #24]
 80253c2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80253c4:	3b01      	subs	r3, #1
 80253c6:	fb00 4003 	mla	r0, r0, r3, r4
 80253ca:	1400      	asrs	r0, r0, #16
 80253cc:	f53f af67 	bmi.w	802529e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253d0:	3901      	subs	r1, #1
 80253d2:	4288      	cmp	r0, r1
 80253d4:	f6bf af63 	bge.w	802529e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80253da:	fb01 6303 	mla	r3, r1, r3, r6
 80253de:	141b      	asrs	r3, r3, #16
 80253e0:	f53f af5d 	bmi.w	802529e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253e4:	3a01      	subs	r2, #1
 80253e6:	4293      	cmp	r3, r2
 80253e8:	f6bf af59 	bge.w	802529e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80253f0:	46ca      	mov	sl, r9
 80253f2:	f1b8 0f00 	cmp.w	r8, #0
 80253f6:	dc67      	bgt.n	80254c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80253f8:	9b06      	ldr	r3, [sp, #24]
 80253fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80253fe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8025402:	9b08      	ldr	r3, [sp, #32]
 8025404:	2b00      	cmp	r3, #0
 8025406:	f340 80d7 	ble.w	80255b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802540a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802540e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025412:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025416:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025418:	ee31 1a05 	vadd.f32	s2, s2, s10
 802541c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025420:	eeb0 6a62 	vmov.f32	s12, s5
 8025424:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802542c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025430:	ee16 4a10 	vmov	r4, s12
 8025434:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025438:	eeb0 6a43 	vmov.f32	s12, s6
 802543c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025440:	ee12 2a90 	vmov	r2, s5
 8025444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025448:	fb92 f3f3 	sdiv	r3, r2, r3
 802544c:	ee13 2a10 	vmov	r2, s6
 8025450:	931f      	str	r3, [sp, #124]	; 0x7c
 8025452:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025454:	fb92 f3f3 	sdiv	r3, r2, r3
 8025458:	9320      	str	r3, [sp, #128]	; 0x80
 802545a:	9b08      	ldr	r3, [sp, #32]
 802545c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802545e:	3b01      	subs	r3, #1
 8025460:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025464:	9308      	str	r3, [sp, #32]
 8025466:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025468:	bf08      	it	eq
 802546a:	4613      	moveq	r3, r2
 802546c:	ee16 6a10 	vmov	r6, s12
 8025470:	9306      	str	r3, [sp, #24]
 8025472:	eeb0 3a67 	vmov.f32	s6, s15
 8025476:	eef0 2a47 	vmov.f32	s5, s14
 802547a:	e6e4      	b.n	8025246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802547c:	2900      	cmp	r1, #0
 802547e:	f43f af4e 	beq.w	802531e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025482:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025486:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802548a:	9309      	str	r3, [sp, #36]	; 0x24
 802548c:	e747      	b.n	802531e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802548e:	f112 0a01 	adds.w	sl, r2, #1
 8025492:	d481      	bmi.n	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025494:	4553      	cmp	r3, sl
 8025496:	f6ff af7f 	blt.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802549a:	f11c 0a01 	adds.w	sl, ip, #1
 802549e:	f53f af7b 	bmi.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80254a2:	45d6      	cmp	lr, sl
 80254a4:	f6ff af78 	blt.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80254a8:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80254ac:	b21b      	sxth	r3, r3
 80254ae:	fa0f f28e 	sxth.w	r2, lr
 80254b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80254b6:	9201      	str	r2, [sp, #4]
 80254b8:	9300      	str	r3, [sp, #0]
 80254ba:	9a07      	ldr	r2, [sp, #28]
 80254bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80254be:	463b      	mov	r3, r7
 80254c0:	4641      	mov	r1, r8
 80254c2:	f7ff fe21 	bl	8025108 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80254c6:	e767      	b.n	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80254c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254ca:	9d07      	ldr	r5, [sp, #28]
 80254cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80254d0:	1422      	asrs	r2, r4, #16
 80254d2:	1431      	asrs	r1, r6, #16
 80254d4:	fb03 2101 	mla	r1, r3, r1, r2
 80254d8:	9a07      	ldr	r2, [sp, #28]
 80254da:	440a      	add	r2, r1
 80254dc:	5c69      	ldrb	r1, [r5, r1]
 80254de:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80254e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80254e6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80254ea:	f1be 0f00 	cmp.w	lr, #0
 80254ee:	d05c      	beq.n	80255aa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80254f0:	f892 c001 	ldrb.w	ip, [r2, #1]
 80254f4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80254f8:	950d      	str	r5, [sp, #52]	; 0x34
 80254fa:	b150      	cbz	r0, 8025512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80254fc:	eb02 0c03 	add.w	ip, r2, r3
 8025500:	5cd3      	ldrb	r3, [r2, r3]
 8025502:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025506:	930a      	str	r3, [sp, #40]	; 0x28
 8025508:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802550c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025510:	930e      	str	r3, [sp, #56]	; 0x38
 8025512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025514:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025516:	fb1e f200 	smulbb	r2, lr, r0
 802551a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802551e:	10d2      	asrs	r2, r2, #3
 8025520:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025524:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025528:	ea4c 0c03 	orr.w	ip, ip, r3
 802552c:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8025530:	9311      	str	r3, [sp, #68]	; 0x44
 8025532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025534:	041b      	lsls	r3, r3, #16
 8025536:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 802553a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802553e:	ea43 030b 	orr.w	r3, r3, fp
 8025542:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025544:	4353      	muls	r3, r2
 8025546:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802554a:	fb05 3c0c 	mla	ip, r5, ip, r3
 802554e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025552:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8025556:	ea43 0b01 	orr.w	fp, r3, r1
 802555a:	f1c0 0110 	rsb	r1, r0, #16
 802555e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025560:	eba1 0e0e 	sub.w	lr, r1, lr
 8025564:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8025568:	fb0e cc0b 	mla	ip, lr, fp, ip
 802556c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8025570:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8025574:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025578:	ea4b 0e0e 	orr.w	lr, fp, lr
 802557c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025580:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025584:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8025588:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802558c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025590:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025594:	ea43 0c0c 	orr.w	ip, r3, ip
 8025598:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802559a:	f82a cb02 	strh.w	ip, [sl], #2
 802559e:	441c      	add	r4, r3
 80255a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80255a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80255a6:	441e      	add	r6, r3
 80255a8:	e723      	b.n	80253f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80255aa:	2800      	cmp	r0, #0
 80255ac:	d0b1      	beq.n	8025512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80255ae:	5cd3      	ldrb	r3, [r2, r3]
 80255b0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80255b4:	930a      	str	r3, [sp, #40]	; 0x28
 80255b6:	e7ac      	b.n	8025512 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80255b8:	b013      	add	sp, #76	; 0x4c
 80255ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80255be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255c2:	880d      	ldrh	r5, [r1, #0]
 80255c4:	b087      	sub	sp, #28
 80255c6:	10ef      	asrs	r7, r5, #3
 80255c8:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80255cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80255d0:	00ed      	lsls	r5, r5, #3
 80255d2:	9701      	str	r7, [sp, #4]
 80255d4:	b2ed      	uxtb	r5, r5
 80255d6:	9502      	str	r5, [sp, #8]
 80255d8:	9d01      	ldr	r5, [sp, #4]
 80255da:	9103      	str	r1, [sp, #12]
 80255dc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80255e0:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80255e4:	9902      	ldr	r1, [sp, #8]
 80255e6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80255ea:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80255ee:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80255f2:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80255f6:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80255fa:	022d      	lsls	r5, r5, #8
 80255fc:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8025600:	fb06 0709 	mla	r7, r6, r9, r0
 8025604:	430d      	orrs	r5, r1
 8025606:	2e00      	cmp	r6, #0
 8025608:	eb02 0c07 	add.w	ip, r2, r7
 802560c:	9505      	str	r5, [sp, #20]
 802560e:	f2c0 80b6 	blt.w	802577e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025612:	45b3      	cmp	fp, r6
 8025614:	f340 80b3 	ble.w	802577e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025618:	2800      	cmp	r0, #0
 802561a:	f2c0 80ae 	blt.w	802577a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802561e:	4581      	cmp	r9, r0
 8025620:	f340 80ab 	ble.w	802577a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8025624:	5dd7      	ldrb	r7, [r2, r7]
 8025626:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802562a:	441f      	add	r7, r3
 802562c:	1c42      	adds	r2, r0, #1
 802562e:	f100 80a9 	bmi.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025632:	4591      	cmp	r9, r2
 8025634:	f340 80a6 	ble.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025638:	2c00      	cmp	r4, #0
 802563a:	f000 80a3 	beq.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802563e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025646:	441d      	add	r5, r3
 8025648:	3601      	adds	r6, #1
 802564a:	f100 809f 	bmi.w	802578c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802564e:	45b3      	cmp	fp, r6
 8025650:	f340 809c 	ble.w	802578c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025654:	f1be 0f00 	cmp.w	lr, #0
 8025658:	f000 8098 	beq.w	802578c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802565c:	2800      	cmp	r0, #0
 802565e:	f2c0 8093 	blt.w	8025788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8025662:	4581      	cmp	r9, r0
 8025664:	f340 8090 	ble.w	8025788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8025668:	f81c 6009 	ldrb.w	r6, [ip, r9]
 802566c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025670:	441e      	add	r6, r3
 8025672:	3001      	adds	r0, #1
 8025674:	f100 808d 	bmi.w	8025792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025678:	4581      	cmp	r9, r0
 802567a:	f340 808a 	ble.w	8025792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802567e:	2c00      	cmp	r4, #0
 8025680:	f000 8087 	beq.w	8025792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025684:	44e1      	add	r9, ip
 8025686:	f899 2001 	ldrb.w	r2, [r9, #1]
 802568a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802568e:	4413      	add	r3, r2
 8025690:	b2a4      	uxth	r4, r4
 8025692:	fa1f fe8e 	uxth.w	lr, lr
 8025696:	fb04 fb0e 	mul.w	fp, r4, lr
 802569a:	0124      	lsls	r4, r4, #4
 802569c:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80256a0:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80256a4:	eba4 040b 	sub.w	r4, r4, fp
 80256a8:	fa1f f08e 	uxth.w	r0, lr
 80256ac:	b2a2      	uxth	r2, r4
 80256ae:	78ac      	ldrb	r4, [r5, #2]
 80256b0:	f897 c002 	ldrb.w	ip, [r7, #2]
 80256b4:	9901      	ldr	r1, [sp, #4]
 80256b6:	eba9 0900 	sub.w	r9, r9, r0
 80256ba:	fa1f f989 	uxth.w	r9, r9
 80256be:	4354      	muls	r4, r2
 80256c0:	fb09 440c 	mla	r4, r9, ip, r4
 80256c4:	f896 c002 	ldrb.w	ip, [r6, #2]
 80256c8:	fb00 440c 	mla	r4, r0, ip, r4
 80256cc:	f893 c002 	ldrb.w	ip, [r3, #2]
 80256d0:	fa1f fe88 	uxth.w	lr, r8
 80256d4:	ea6f 0808 	mvn.w	r8, r8
 80256d8:	fa5f f888 	uxtb.w	r8, r8
 80256dc:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80256e0:	fb1a fa08 	smulbb	sl, sl, r8
 80256e4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80256e8:	fb0c ac0e 	mla	ip, ip, lr, sl
 80256ec:	f895 a001 	ldrb.w	sl, [r5, #1]
 80256f0:	787c      	ldrb	r4, [r7, #1]
 80256f2:	782d      	ldrb	r5, [r5, #0]
 80256f4:	783f      	ldrb	r7, [r7, #0]
 80256f6:	fb02 fa0a 	mul.w	sl, r2, sl
 80256fa:	fb09 aa04 	mla	sl, r9, r4, sl
 80256fe:	7874      	ldrb	r4, [r6, #1]
 8025700:	436a      	muls	r2, r5
 8025702:	7835      	ldrb	r5, [r6, #0]
 8025704:	fb00 aa04 	mla	sl, r0, r4, sl
 8025708:	fb09 2207 	mla	r2, r9, r7, r2
 802570c:	785c      	ldrb	r4, [r3, #1]
 802570e:	781b      	ldrb	r3, [r3, #0]
 8025710:	fb00 2005 	mla	r0, r0, r5, r2
 8025714:	fb0b a404 	mla	r4, fp, r4, sl
 8025718:	fb0b 0b03 	mla	fp, fp, r3, r0
 802571c:	9b02      	ldr	r3, [sp, #8]
 802571e:	fb11 fa08 	smulbb	sl, r1, r8
 8025722:	fa1f fc8c 	uxth.w	ip, ip
 8025726:	fb13 f808 	smulbb	r8, r3, r8
 802572a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802572e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025732:	fb04 a40e 	mla	r4, r4, lr, sl
 8025736:	f10c 0301 	add.w	r3, ip, #1
 802573a:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802573e:	fa1f fe8e 	uxth.w	lr, lr
 8025742:	b2a4      	uxth	r4, r4
 8025744:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025748:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 802574c:	f104 0a01 	add.w	sl, r4, #1
 8025750:	f10e 0c01 	add.w	ip, lr, #1
 8025754:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025758:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 802575c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025760:	0964      	lsrs	r4, r4, #5
 8025762:	ea4c 0c03 	orr.w	ip, ip, r3
 8025766:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802576a:	9b03      	ldr	r3, [sp, #12]
 802576c:	ea4c 0c04 	orr.w	ip, ip, r4
 8025770:	f8a3 c000 	strh.w	ip, [r3]
 8025774:	b007      	add	sp, #28
 8025776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802577a:	af05      	add	r7, sp, #20
 802577c:	e756      	b.n	802562c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802577e:	ad05      	add	r5, sp, #20
 8025780:	462f      	mov	r7, r5
 8025782:	e761      	b.n	8025648 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025784:	ad05      	add	r5, sp, #20
 8025786:	e75f      	b.n	8025648 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025788:	ae05      	add	r6, sp, #20
 802578a:	e772      	b.n	8025672 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802578c:	ab05      	add	r3, sp, #20
 802578e:	461e      	mov	r6, r3
 8025790:	e77e      	b.n	8025690 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8025792:	ab05      	add	r3, sp, #20
 8025794:	e77c      	b.n	8025690 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08025796 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802579a:	b095      	sub	sp, #84	; 0x54
 802579c:	9212      	str	r2, [sp, #72]	; 0x48
 802579e:	9309      	str	r3, [sp, #36]	; 0x24
 80257a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80257a2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80257a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80257a8:	910e      	str	r1, [sp, #56]	; 0x38
 80257aa:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80257ae:	9013      	str	r0, [sp, #76]	; 0x4c
 80257b0:	6850      	ldr	r0, [r2, #4]
 80257b2:	6812      	ldr	r2, [r2, #0]
 80257b4:	fb00 1303 	mla	r3, r0, r3, r1
 80257b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80257bc:	930a      	str	r3, [sp, #40]	; 0x28
 80257be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80257c0:	681b      	ldr	r3, [r3, #0]
 80257c2:	930d      	str	r3, [sp, #52]	; 0x34
 80257c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80257c6:	685c      	ldr	r4, [r3, #4]
 80257c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80257ca:	43db      	mvns	r3, r3
 80257cc:	b2db      	uxtb	r3, r3
 80257ce:	3404      	adds	r4, #4
 80257d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80257d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80257d4:	2b00      	cmp	r3, #0
 80257d6:	dc03      	bgt.n	80257e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80257d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80257da:	2b00      	cmp	r3, #0
 80257dc:	f340 8255 	ble.w	8025c8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80257e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80257e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257ea:	1e48      	subs	r0, r1, #1
 80257ec:	1e55      	subs	r5, r2, #1
 80257ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	f340 80f9 	ble.w	80259e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80257f6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80257f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80257fa:	1436      	asrs	r6, r6, #16
 80257fc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025800:	d406      	bmi.n	8025810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025802:	4286      	cmp	r6, r0
 8025804:	da04      	bge.n	8025810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025806:	2b00      	cmp	r3, #0
 8025808:	db02      	blt.n	8025810 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802580a:	42ab      	cmp	r3, r5
 802580c:	f2c0 80ed 	blt.w	80259ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8025810:	3601      	adds	r6, #1
 8025812:	f100 80da 	bmi.w	80259ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025816:	42b1      	cmp	r1, r6
 8025818:	f2c0 80d7 	blt.w	80259ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802581c:	3301      	adds	r3, #1
 802581e:	f100 80d4 	bmi.w	80259ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025822:	429a      	cmp	r2, r3
 8025824:	f2c0 80d1 	blt.w	80259ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802582a:	9311      	str	r3, [sp, #68]	; 0x44
 802582c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802582e:	930c      	str	r3, [sp, #48]	; 0x30
 8025830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025832:	2b00      	cmp	r3, #0
 8025834:	f340 80fa 	ble.w	8025a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025838:	9826      	ldr	r0, [sp, #152]	; 0x98
 802583a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802583c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802583e:	68c6      	ldr	r6, [r0, #12]
 8025840:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025842:	141d      	asrs	r5, r3, #16
 8025844:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025848:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802584a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802584c:	1400      	asrs	r0, r0, #16
 802584e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025852:	6892      	ldr	r2, [r2, #8]
 8025854:	f100 813e 	bmi.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025858:	1e57      	subs	r7, r2, #1
 802585a:	42b8      	cmp	r0, r7
 802585c:	f280 813a 	bge.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025860:	2d00      	cmp	r5, #0
 8025862:	f2c0 8137 	blt.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025866:	1e77      	subs	r7, r6, #1
 8025868:	42bd      	cmp	r5, r7
 802586a:	f280 8133 	bge.w	8025ad4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802586e:	b212      	sxth	r2, r2
 8025870:	fb05 0002 	mla	r0, r5, r2, r0
 8025874:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025876:	f815 a000 	ldrb.w	sl, [r5, r0]
 802587a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802587e:	182e      	adds	r6, r5, r0
 8025880:	eb04 050a 	add.w	r5, r4, sl
 8025884:	2b00      	cmp	r3, #0
 8025886:	f000 8117 	beq.w	8025ab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802588a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802588e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025892:	44a4      	add	ip, r4
 8025894:	2900      	cmp	r1, #0
 8025896:	f000 8117 	beq.w	8025ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802589a:	18b0      	adds	r0, r6, r2
 802589c:	5cb2      	ldrb	r2, [r6, r2]
 802589e:	7840      	ldrb	r0, [r0, #1]
 80258a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80258a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80258a8:	4422      	add	r2, r4
 80258aa:	4420      	add	r0, r4
 80258ac:	b29b      	uxth	r3, r3
 80258ae:	b289      	uxth	r1, r1
 80258b0:	fb03 f901 	mul.w	r9, r3, r1
 80258b4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80258b8:	011b      	lsls	r3, r3, #4
 80258ba:	b289      	uxth	r1, r1
 80258bc:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80258c0:	f895 b002 	ldrb.w	fp, [r5, #2]
 80258c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80258c6:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80258ca:	f8b6 e000 	ldrh.w	lr, [r6]
 80258ce:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80258d2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80258d6:	eba3 0309 	sub.w	r3, r3, r9
 80258da:	b29b      	uxth	r3, r3
 80258dc:	eba8 0801 	sub.w	r8, r8, r1
 80258e0:	fa1f f888 	uxth.w	r8, r8
 80258e4:	435f      	muls	r7, r3
 80258e6:	fb08 770b 	mla	r7, r8, fp, r7
 80258ea:	f892 b002 	ldrb.w	fp, [r2, #2]
 80258ee:	9310      	str	r3, [sp, #64]	; 0x40
 80258f0:	fb01 770b 	mla	r7, r1, fp, r7
 80258f4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80258f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258fa:	fb09 770b 	mla	r7, r9, fp, r7
 80258fe:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025902:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025906:	fb1b fb03 	smulbb	fp, fp, r3
 802590a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802590e:	fb07 b706 	mla	r7, r7, r6, fp
 8025912:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025914:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025918:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802591c:	f89c c000 	ldrb.w	ip, [ip]
 8025920:	435d      	muls	r5, r3
 8025922:	fb08 550b 	mla	r5, r8, fp, r5
 8025926:	f892 b001 	ldrb.w	fp, [r2, #1]
 802592a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802592c:	fb01 550b 	mla	r5, r1, fp, r5
 8025930:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025934:	fb09 550b 	mla	r5, r9, fp, r5
 8025938:	ea4f 0bee 	mov.w	fp, lr, asr #3
 802593c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025940:	fb1b fb03 	smulbb	fp, fp, r3
 8025944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025946:	fb03 f30c 	mul.w	r3, r3, ip
 802594a:	f892 c000 	ldrb.w	ip, [r2]
 802594e:	fb08 330a 	mla	r3, r8, sl, r3
 8025952:	fb01 330c 	mla	r3, r1, ip, r3
 8025956:	f890 c000 	ldrb.w	ip, [r0]
 802595a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802595e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025964:	fa5f fe8e 	uxtb.w	lr, lr
 8025968:	b2bf      	uxth	r7, r7
 802596a:	fb1e fe03 	smulbb	lr, lr, r3
 802596e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025972:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025976:	fb05 b506 	mla	r5, r5, r6, fp
 802597a:	1c7b      	adds	r3, r7, #1
 802597c:	fb0c e606 	mla	r6, ip, r6, lr
 8025980:	b2ad      	uxth	r5, r5
 8025982:	b2b6      	uxth	r6, r6
 8025984:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025988:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 802598c:	f105 0b01 	add.w	fp, r5, #1
 8025990:	1c77      	adds	r7, r6, #1
 8025992:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025996:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802599a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802599e:	096d      	lsrs	r5, r5, #5
 80259a0:	431f      	orrs	r7, r3
 80259a2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80259a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80259a8:	433d      	orrs	r5, r7
 80259aa:	801d      	strh	r5, [r3, #0]
 80259ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80259ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80259b0:	3302      	adds	r3, #2
 80259b2:	930c      	str	r3, [sp, #48]	; 0x30
 80259b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80259b6:	4413      	add	r3, r2
 80259b8:	931f      	str	r3, [sp, #124]	; 0x7c
 80259ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80259bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259be:	4413      	add	r3, r2
 80259c0:	9320      	str	r3, [sp, #128]	; 0x80
 80259c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80259c4:	3b01      	subs	r3, #1
 80259c6:	9311      	str	r3, [sp, #68]	; 0x44
 80259c8:	e732      	b.n	8025830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80259ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80259cc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80259ce:	4433      	add	r3, r6
 80259d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80259d2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80259d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259d6:	4433      	add	r3, r6
 80259d8:	9320      	str	r3, [sp, #128]	; 0x80
 80259da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259dc:	3b01      	subs	r3, #1
 80259de:	9309      	str	r3, [sp, #36]	; 0x24
 80259e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80259e2:	3302      	adds	r3, #2
 80259e4:	930a      	str	r3, [sp, #40]	; 0x28
 80259e6:	e702      	b.n	80257ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80259e8:	d027      	beq.n	8025a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80259ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259ec:	9821      	ldr	r0, [sp, #132]	; 0x84
 80259ee:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80259f0:	3b01      	subs	r3, #1
 80259f2:	fb00 5003 	mla	r0, r0, r3, r5
 80259f6:	1400      	asrs	r0, r0, #16
 80259f8:	f53f af16 	bmi.w	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80259fc:	3901      	subs	r1, #1
 80259fe:	4288      	cmp	r0, r1
 8025a00:	f6bf af12 	bge.w	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a04:	9922      	ldr	r1, [sp, #136]	; 0x88
 8025a06:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025a08:	fb01 0303 	mla	r3, r1, r3, r0
 8025a0c:	141b      	asrs	r3, r3, #16
 8025a0e:	f53f af0b 	bmi.w	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a12:	3a01      	subs	r2, #1
 8025a14:	4293      	cmp	r3, r2
 8025a16:	f6bf af07 	bge.w	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a1c:	9311      	str	r3, [sp, #68]	; 0x44
 8025a1e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025a24:	930c      	str	r3, [sp, #48]	; 0x30
 8025a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	dc70      	bgt.n	8025b0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8025a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025a34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a38:	930a      	str	r3, [sp, #40]	; 0x28
 8025a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a3c:	2b00      	cmp	r3, #0
 8025a3e:	f340 8124 	ble.w	8025c8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025a42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025a4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025a4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025a50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025a54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025a58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025a5c:	eef0 6a62 	vmov.f32	s13, s5
 8025a60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a68:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a6c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8025a70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a74:	eef0 6a43 	vmov.f32	s13, s6
 8025a78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a7c:	ee12 2a90 	vmov	r2, s5
 8025a80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a88:	ee13 2a10 	vmov	r2, s6
 8025a8c:	9321      	str	r3, [sp, #132]	; 0x84
 8025a8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025a90:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a94:	9322      	str	r3, [sp, #136]	; 0x88
 8025a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025a98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025a9a:	3b01      	subs	r3, #1
 8025a9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8025aa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025aa4:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8025aa8:	bf08      	it	eq
 8025aaa:	4613      	moveq	r3, r2
 8025aac:	9309      	str	r3, [sp, #36]	; 0x24
 8025aae:	eeb0 3a67 	vmov.f32	s6, s15
 8025ab2:	eef0 2a47 	vmov.f32	s5, s14
 8025ab6:	e68c      	b.n	80257d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025ab8:	b149      	cbz	r1, 8025ace <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8025aba:	5cb2      	ldrb	r2, [r6, r2]
 8025abc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ac0:	4422      	add	r2, r4
 8025ac2:	4628      	mov	r0, r5
 8025ac4:	46ac      	mov	ip, r5
 8025ac6:	e6f1      	b.n	80258ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025ac8:	4628      	mov	r0, r5
 8025aca:	462a      	mov	r2, r5
 8025acc:	e6ee      	b.n	80258ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025ace:	4628      	mov	r0, r5
 8025ad0:	462a      	mov	r2, r5
 8025ad2:	e7f7      	b.n	8025ac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025ad4:	1c47      	adds	r7, r0, #1
 8025ad6:	f53f af69 	bmi.w	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ada:	42ba      	cmp	r2, r7
 8025adc:	f6ff af66 	blt.w	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ae0:	1c6f      	adds	r7, r5, #1
 8025ae2:	f53f af63 	bmi.w	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ae6:	42be      	cmp	r6, r7
 8025ae8:	f6ff af60 	blt.w	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025aec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025aee:	9002      	str	r0, [sp, #8]
 8025af0:	b236      	sxth	r6, r6
 8025af2:	b212      	sxth	r2, r2
 8025af4:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8025af8:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025afc:	9200      	str	r2, [sp, #0]
 8025afe:	9601      	str	r6, [sp, #4]
 8025b00:	4623      	mov	r3, r4
 8025b02:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8025b06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025b08:	f7ff fd59 	bl	80255be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025b0c:	e74e      	b.n	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025b10:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025b12:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8025b14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025b16:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025b1a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025b1c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025b20:	142d      	asrs	r5, r5, #16
 8025b22:	1400      	asrs	r0, r0, #16
 8025b24:	fb02 5000 	mla	r0, r2, r0, r5
 8025b28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025b2a:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025b2e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025b32:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025b36:	182e      	adds	r6, r5, r0
 8025b38:	eb04 0509 	add.w	r5, r4, r9
 8025b3c:	2b00      	cmp	r3, #0
 8025b3e:	f000 8096 	beq.w	8025c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025b42:	7877      	ldrb	r7, [r6, #1]
 8025b44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025b48:	4427      	add	r7, r4
 8025b4a:	2900      	cmp	r1, #0
 8025b4c:	f000 8097 	beq.w	8025c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8025b50:	18b0      	adds	r0, r6, r2
 8025b52:	5cb2      	ldrb	r2, [r6, r2]
 8025b54:	7840      	ldrb	r0, [r0, #1]
 8025b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b5e:	4422      	add	r2, r4
 8025b60:	4420      	add	r0, r4
 8025b62:	b29b      	uxth	r3, r3
 8025b64:	b289      	uxth	r1, r1
 8025b66:	fb03 f801 	mul.w	r8, r3, r1
 8025b6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025b6c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025b70:	f8b6 c000 	ldrh.w	ip, [r6]
 8025b74:	78be      	ldrb	r6, [r7, #2]
 8025b76:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025b7a:	011b      	lsls	r3, r3, #4
 8025b7c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025b80:	b289      	uxth	r1, r1
 8025b82:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025b86:	eba3 0308 	sub.w	r3, r3, r8
 8025b8a:	b29b      	uxth	r3, r3
 8025b8c:	ebae 0e01 	sub.w	lr, lr, r1
 8025b90:	fa1f fe8e 	uxth.w	lr, lr
 8025b94:	435e      	muls	r6, r3
 8025b96:	fb0e 660b 	mla	r6, lr, fp, r6
 8025b9a:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025b9e:	9310      	str	r3, [sp, #64]	; 0x40
 8025ba0:	fb01 660b 	mla	r6, r1, fp, r6
 8025ba4:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025baa:	fb08 660b 	mla	r6, r8, fp, r6
 8025bae:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025bb2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025bb6:	fb1b fb03 	smulbb	fp, fp, r3
 8025bba:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025bbe:	fb06 b60a 	mla	r6, r6, sl, fp
 8025bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025bc4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025bc8:	787d      	ldrb	r5, [r7, #1]
 8025bca:	783f      	ldrb	r7, [r7, #0]
 8025bcc:	435d      	muls	r5, r3
 8025bce:	fb0e 550b 	mla	r5, lr, fp, r5
 8025bd2:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025bd8:	fb01 550b 	mla	r5, r1, fp, r5
 8025bdc:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025be0:	fb08 550b 	mla	r5, r8, fp, r5
 8025be4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8025be8:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025bec:	fb1b fb03 	smulbb	fp, fp, r3
 8025bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025bf2:	437b      	muls	r3, r7
 8025bf4:	7817      	ldrb	r7, [r2, #0]
 8025bf6:	fb0e 3309 	mla	r3, lr, r9, r3
 8025bfa:	fb01 3307 	mla	r3, r1, r7, r3
 8025bfe:	7807      	ldrb	r7, [r0, #0]
 8025c00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025c04:	fb08 3707 	mla	r7, r8, r7, r3
 8025c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025c0a:	fa5f fc8c 	uxtb.w	ip, ip
 8025c0e:	fb1c fc03 	smulbb	ip, ip, r3
 8025c12:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025c16:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025c1a:	fb05 b50a 	mla	r5, r5, sl, fp
 8025c1e:	fb07 c70a 	mla	r7, r7, sl, ip
 8025c22:	b2b6      	uxth	r6, r6
 8025c24:	b2ad      	uxth	r5, r5
 8025c26:	b2bf      	uxth	r7, r7
 8025c28:	1c73      	adds	r3, r6, #1
 8025c2a:	1c7a      	adds	r2, r7, #1
 8025c2c:	f105 0b01 	add.w	fp, r5, #1
 8025c30:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025c34:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025c38:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025c3c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c40:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8025c44:	096d      	lsrs	r5, r5, #5
 8025c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c48:	4316      	orrs	r6, r2
 8025c4a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025c4e:	432e      	orrs	r6, r5
 8025c50:	f823 6b02 	strh.w	r6, [r3], #2
 8025c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025c56:	930c      	str	r3, [sp, #48]	; 0x30
 8025c58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025c5a:	4413      	add	r3, r2
 8025c5c:	931f      	str	r3, [sp, #124]	; 0x7c
 8025c5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025c60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c62:	4413      	add	r3, r2
 8025c64:	9320      	str	r3, [sp, #128]	; 0x80
 8025c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025c68:	3b01      	subs	r3, #1
 8025c6a:	9311      	str	r3, [sp, #68]	; 0x44
 8025c6c:	e6db      	b.n	8025a26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025c6e:	b149      	cbz	r1, 8025c84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025c70:	5cb2      	ldrb	r2, [r6, r2]
 8025c72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c76:	4422      	add	r2, r4
 8025c78:	4628      	mov	r0, r5
 8025c7a:	462f      	mov	r7, r5
 8025c7c:	e771      	b.n	8025b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025c7e:	4628      	mov	r0, r5
 8025c80:	462a      	mov	r2, r5
 8025c82:	e76e      	b.n	8025b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025c84:	4628      	mov	r0, r5
 8025c86:	462a      	mov	r2, r5
 8025c88:	e7f7      	b.n	8025c7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025c8a:	b015      	add	sp, #84	; 0x54
 8025c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c94:	880f      	ldrh	r7, [r1, #0]
 8025c96:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8025c9a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8025c9e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025ca2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8025ca6:	023c      	lsls	r4, r7, #8
 8025ca8:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8025cac:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8025cb0:	017c      	lsls	r4, r7, #5
 8025cb2:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8025cb6:	00ff      	lsls	r7, r7, #3
 8025cb8:	ea4b 0404 	orr.w	r4, fp, r4
 8025cbc:	b2ff      	uxtb	r7, r7
 8025cbe:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025cc2:	4327      	orrs	r7, r4
 8025cc4:	2d00      	cmp	r5, #0
 8025cc6:	eb02 080a 	add.w	r8, r2, sl
 8025cca:	9701      	str	r7, [sp, #4]
 8025ccc:	db7e      	blt.n	8025dcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025cce:	45a9      	cmp	r9, r5
 8025cd0:	dd7c      	ble.n	8025dcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025cd2:	f1bc 0f00 	cmp.w	ip, #0
 8025cd6:	db77      	blt.n	8025dc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025cd8:	45e6      	cmp	lr, ip
 8025cda:	dd75      	ble.n	8025dc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025cdc:	f812 700a 	ldrb.w	r7, [r2, sl]
 8025ce0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025ce4:	441f      	add	r7, r3
 8025ce6:	f11c 0201 	adds.w	r2, ip, #1
 8025cea:	d472      	bmi.n	8025dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025cec:	4596      	cmp	lr, r2
 8025cee:	dd70      	ble.n	8025dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025cf0:	2800      	cmp	r0, #0
 8025cf2:	d06e      	beq.n	8025dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025cf4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025cf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025cfc:	441c      	add	r4, r3
 8025cfe:	3501      	adds	r5, #1
 8025d00:	d46b      	bmi.n	8025dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025d02:	45a9      	cmp	r9, r5
 8025d04:	dd69      	ble.n	8025dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025d06:	2e00      	cmp	r6, #0
 8025d08:	d067      	beq.n	8025dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025d0a:	f1bc 0f00 	cmp.w	ip, #0
 8025d0e:	db62      	blt.n	8025dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025d10:	45e6      	cmp	lr, ip
 8025d12:	dd60      	ble.n	8025dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025d14:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025d1c:	441d      	add	r5, r3
 8025d1e:	f11c 0201 	adds.w	r2, ip, #1
 8025d22:	d45d      	bmi.n	8025de0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d24:	4596      	cmp	lr, r2
 8025d26:	dd5b      	ble.n	8025de0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d28:	2800      	cmp	r0, #0
 8025d2a:	d059      	beq.n	8025de0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d2c:	44c6      	add	lr, r8
 8025d2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025d32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d36:	4413      	add	r3, r2
 8025d38:	b280      	uxth	r0, r0
 8025d3a:	b2b2      	uxth	r2, r6
 8025d3c:	fb00 f602 	mul.w	r6, r0, r2
 8025d40:	0100      	lsls	r0, r0, #4
 8025d42:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025d46:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8025d4a:	1b80      	subs	r0, r0, r6
 8025d4c:	fa1f fc82 	uxth.w	ip, r2
 8025d50:	b282      	uxth	r2, r0
 8025d52:	78a0      	ldrb	r0, [r4, #2]
 8025d54:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025d58:	f897 9000 	ldrb.w	r9, [r7]
 8025d5c:	787f      	ldrb	r7, [r7, #1]
 8025d5e:	eba8 080c 	sub.w	r8, r8, ip
 8025d62:	fa1f f888 	uxth.w	r8, r8
 8025d66:	4350      	muls	r0, r2
 8025d68:	fb08 0e0e 	mla	lr, r8, lr, r0
 8025d6c:	78a8      	ldrb	r0, [r5, #2]
 8025d6e:	fb0c e000 	mla	r0, ip, r0, lr
 8025d72:	f893 e002 	ldrb.w	lr, [r3, #2]
 8025d76:	fb06 0e0e 	mla	lr, r6, lr, r0
 8025d7a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8025d7e:	f894 e000 	ldrb.w	lr, [r4]
 8025d82:	fb02 fe0e 	mul.w	lr, r2, lr
 8025d86:	fb08 e909 	mla	r9, r8, r9, lr
 8025d8a:	f895 e000 	ldrb.w	lr, [r5]
 8025d8e:	fb0c 990e 	mla	r9, ip, lr, r9
 8025d92:	f893 e000 	ldrb.w	lr, [r3]
 8025d96:	785b      	ldrb	r3, [r3, #1]
 8025d98:	fb06 9e0e 	mla	lr, r6, lr, r9
 8025d9c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025da0:	ea4e 0e00 	orr.w	lr, lr, r0
 8025da4:	7860      	ldrb	r0, [r4, #1]
 8025da6:	4350      	muls	r0, r2
 8025da8:	786a      	ldrb	r2, [r5, #1]
 8025daa:	fb08 0007 	mla	r0, r8, r7, r0
 8025dae:	fb0c 0202 	mla	r2, ip, r2, r0
 8025db2:	fb06 2303 	mla	r3, r6, r3, r2
 8025db6:	095b      	lsrs	r3, r3, #5
 8025db8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025dbc:	ea4e 0303 	orr.w	r3, lr, r3
 8025dc0:	800b      	strh	r3, [r1, #0]
 8025dc2:	b003      	add	sp, #12
 8025dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dc8:	af01      	add	r7, sp, #4
 8025dca:	e78c      	b.n	8025ce6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8025dcc:	ac01      	add	r4, sp, #4
 8025dce:	4627      	mov	r7, r4
 8025dd0:	e795      	b.n	8025cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025dd2:	ac01      	add	r4, sp, #4
 8025dd4:	e793      	b.n	8025cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025dd6:	ad01      	add	r5, sp, #4
 8025dd8:	e7a1      	b.n	8025d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8025dda:	ab01      	add	r3, sp, #4
 8025ddc:	461d      	mov	r5, r3
 8025dde:	e7ab      	b.n	8025d38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8025de0:	ab01      	add	r3, sp, #4
 8025de2:	e7a9      	b.n	8025d38 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08025de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025de8:	b08f      	sub	sp, #60	; 0x3c
 8025dea:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8025dee:	920c      	str	r2, [sp, #48]	; 0x30
 8025df0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8025df2:	910a      	str	r1, [sp, #40]	; 0x28
 8025df4:	9306      	str	r3, [sp, #24]
 8025df6:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8025dfa:	900d      	str	r0, [sp, #52]	; 0x34
 8025dfc:	6850      	ldr	r0, [r2, #4]
 8025dfe:	6812      	ldr	r2, [r2, #0]
 8025e00:	fb00 1303 	mla	r3, r0, r3, r1
 8025e04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025e08:	9307      	str	r3, [sp, #28]
 8025e0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	9308      	str	r3, [sp, #32]
 8025e10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e12:	685c      	ldr	r4, [r3, #4]
 8025e14:	3404      	adds	r4, #4
 8025e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	dc03      	bgt.n	8025e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8025e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e1e:	2b00      	cmp	r3, #0
 8025e20:	f340 81d6 	ble.w	80261d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025e24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e2e:	1e48      	subs	r0, r1, #1
 8025e30:	1e56      	subs	r6, r2, #1
 8025e32:	9b06      	ldr	r3, [sp, #24]
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	f340 80b7 	ble.w	8025fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8025e3a:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025e3e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025e42:	d406      	bmi.n	8025e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e44:	4287      	cmp	r7, r0
 8025e46:	da04      	bge.n	8025e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	db02      	blt.n	8025e52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e4c:	42b3      	cmp	r3, r6
 8025e4e:	f2c0 80ac 	blt.w	8025faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025e52:	3701      	adds	r7, #1
 8025e54:	f100 809d 	bmi.w	8025f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e58:	42b9      	cmp	r1, r7
 8025e5a:	f2c0 809a 	blt.w	8025f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e5e:	3301      	adds	r3, #1
 8025e60:	f100 8097 	bmi.w	8025f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e64:	429a      	cmp	r2, r3
 8025e66:	f2c0 8094 	blt.w	8025f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e6a:	9b06      	ldr	r3, [sp, #24]
 8025e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8025e6e:	9b07      	ldr	r3, [sp, #28]
 8025e70:	9309      	str	r3, [sp, #36]	; 0x24
 8025e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	f340 80b5 	ble.w	8025fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025e7a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025e7e:	68c7      	ldr	r7, [r0, #12]
 8025e80:	6892      	ldr	r2, [r2, #8]
 8025e82:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025e86:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025e8a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025e8e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025e92:	f100 80fb 	bmi.w	802608c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025e96:	f102 3cff 	add.w	ip, r2, #4294967295
 8025e9a:	4560      	cmp	r0, ip
 8025e9c:	f280 80f6 	bge.w	802608c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025ea0:	2e00      	cmp	r6, #0
 8025ea2:	f2c0 80f3 	blt.w	802608c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025ea6:	f107 3cff 	add.w	ip, r7, #4294967295
 8025eaa:	4566      	cmp	r6, ip
 8025eac:	f280 80ee 	bge.w	802608c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025eb0:	b212      	sxth	r2, r2
 8025eb2:	fb06 0002 	mla	r0, r6, r2, r0
 8025eb6:	9e08      	ldr	r6, [sp, #32]
 8025eb8:	1837      	adds	r7, r6, r0
 8025eba:	5c30      	ldrb	r0, [r6, r0]
 8025ebc:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025ec0:	eb04 0c08 	add.w	ip, r4, r8
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	f000 80d3 	beq.w	8026070 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025eca:	787e      	ldrb	r6, [r7, #1]
 8025ecc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025ed0:	4426      	add	r6, r4
 8025ed2:	2900      	cmp	r1, #0
 8025ed4:	f000 80d4 	beq.w	8026080 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025ed8:	18b8      	adds	r0, r7, r2
 8025eda:	5cba      	ldrb	r2, [r7, r2]
 8025edc:	7840      	ldrb	r0, [r0, #1]
 8025ede:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ee2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025ee6:	4422      	add	r2, r4
 8025ee8:	4420      	add	r0, r4
 8025eea:	b29b      	uxth	r3, r3
 8025eec:	b289      	uxth	r1, r1
 8025eee:	fb03 f901 	mul.w	r9, r3, r1
 8025ef2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025ef6:	011b      	lsls	r3, r3, #4
 8025ef8:	b289      	uxth	r1, r1
 8025efa:	78b7      	ldrb	r7, [r6, #2]
 8025efc:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025f00:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025f04:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025f08:	eba3 0309 	sub.w	r3, r3, r9
 8025f0c:	b29b      	uxth	r3, r3
 8025f0e:	ebae 0e01 	sub.w	lr, lr, r1
 8025f12:	fa1f fe8e 	uxth.w	lr, lr
 8025f16:	435f      	muls	r7, r3
 8025f18:	fb0e 770a 	mla	r7, lr, sl, r7
 8025f1c:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025f20:	fb01 770a 	mla	r7, r1, sl, r7
 8025f24:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025f28:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025f2c:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025f30:	f896 8000 	ldrb.w	r8, [r6]
 8025f34:	7876      	ldrb	r6, [r6, #1]
 8025f36:	fb03 f808 	mul.w	r8, r3, r8
 8025f3a:	fb0e 8807 	mla	r8, lr, r7, r8
 8025f3e:	7817      	ldrb	r7, [r2, #0]
 8025f40:	fb01 8807 	mla	r8, r1, r7, r8
 8025f44:	7807      	ldrb	r7, [r0, #0]
 8025f46:	fb09 8707 	mla	r7, r9, r7, r8
 8025f4a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8025f4e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025f52:	ea47 070a 	orr.w	r7, r7, sl
 8025f56:	4373      	muls	r3, r6
 8025f58:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025f5c:	fb0e 330c 	mla	r3, lr, ip, r3
 8025f60:	fb01 310a 	mla	r1, r1, sl, r3
 8025f64:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f6a:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025f6e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025f72:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025f76:	ea47 070a 	orr.w	r7, r7, sl
 8025f7a:	801f      	strh	r7, [r3, #0]
 8025f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f7e:	3302      	adds	r3, #2
 8025f80:	9309      	str	r3, [sp, #36]	; 0x24
 8025f82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025f84:	449b      	add	fp, r3
 8025f86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025f88:	441d      	add	r5, r3
 8025f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f8c:	3b01      	subs	r3, #1
 8025f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025f90:	e76f      	b.n	8025e72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025f92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025f94:	449b      	add	fp, r3
 8025f96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025f98:	441d      	add	r5, r3
 8025f9a:	9b06      	ldr	r3, [sp, #24]
 8025f9c:	3b01      	subs	r3, #1
 8025f9e:	9306      	str	r3, [sp, #24]
 8025fa0:	9b07      	ldr	r3, [sp, #28]
 8025fa2:	3302      	adds	r3, #2
 8025fa4:	9307      	str	r3, [sp, #28]
 8025fa6:	e744      	b.n	8025e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025fa8:	d023      	beq.n	8025ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025faa:	9b06      	ldr	r3, [sp, #24]
 8025fac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025fae:	3b01      	subs	r3, #1
 8025fb0:	fb00 b003 	mla	r0, r0, r3, fp
 8025fb4:	1400      	asrs	r0, r0, #16
 8025fb6:	f53f af58 	bmi.w	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fba:	3901      	subs	r1, #1
 8025fbc:	4288      	cmp	r0, r1
 8025fbe:	f6bf af54 	bge.w	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025fc4:	fb01 5303 	mla	r3, r1, r3, r5
 8025fc8:	141b      	asrs	r3, r3, #16
 8025fca:	f53f af4e 	bmi.w	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fce:	3a01      	subs	r2, #1
 8025fd0:	4293      	cmp	r3, r2
 8025fd2:	f6bf af4a 	bge.w	8025e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fd6:	9b06      	ldr	r3, [sp, #24]
 8025fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8025fda:	9b07      	ldr	r3, [sp, #28]
 8025fdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8025fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	dc70      	bgt.n	80260c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025fe4:	9b06      	ldr	r3, [sp, #24]
 8025fe6:	9a07      	ldr	r2, [sp, #28]
 8025fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025fec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025ff0:	9307      	str	r3, [sp, #28]
 8025ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	f340 80eb 	ble.w	80261d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025ffa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026002:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026006:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026008:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802600c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026010:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026014:	eef0 6a62 	vmov.f32	s13, s5
 8026018:	ee61 7a27 	vmul.f32	s15, s2, s15
 802601c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026020:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026024:	ee16 ba90 	vmov	fp, s13
 8026028:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802602c:	eef0 6a43 	vmov.f32	s13, s6
 8026030:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026034:	ee12 2a90 	vmov	r2, s5
 8026038:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802603c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026040:	ee13 2a10 	vmov	r2, s6
 8026044:	931b      	str	r3, [sp, #108]	; 0x6c
 8026046:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026048:	fb92 f3f3 	sdiv	r3, r2, r3
 802604c:	931c      	str	r3, [sp, #112]	; 0x70
 802604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026052:	3b01      	subs	r3, #1
 8026054:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026058:	930a      	str	r3, [sp, #40]	; 0x28
 802605a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802605c:	bf08      	it	eq
 802605e:	4613      	moveq	r3, r2
 8026060:	ee16 5a90 	vmov	r5, s13
 8026064:	9306      	str	r3, [sp, #24]
 8026066:	eeb0 3a67 	vmov.f32	s6, s15
 802606a:	eef0 2a47 	vmov.f32	s5, s14
 802606e:	e6d2      	b.n	8025e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8026070:	b149      	cbz	r1, 8026086 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026072:	5cba      	ldrb	r2, [r7, r2]
 8026074:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026078:	4422      	add	r2, r4
 802607a:	4660      	mov	r0, ip
 802607c:	4666      	mov	r6, ip
 802607e:	e734      	b.n	8025eea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8026080:	4660      	mov	r0, ip
 8026082:	4662      	mov	r2, ip
 8026084:	e731      	b.n	8025eea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8026086:	4660      	mov	r0, ip
 8026088:	4662      	mov	r2, ip
 802608a:	e7f7      	b.n	802607c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802608c:	f110 0c01 	adds.w	ip, r0, #1
 8026090:	f53f af74 	bmi.w	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026094:	4562      	cmp	r2, ip
 8026096:	f6ff af71 	blt.w	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802609a:	f116 0c01 	adds.w	ip, r6, #1
 802609e:	f53f af6d 	bmi.w	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80260a2:	4567      	cmp	r7, ip
 80260a4:	f6ff af6a 	blt.w	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80260a8:	b23f      	sxth	r7, r7
 80260aa:	b212      	sxth	r2, r2
 80260ac:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80260b0:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80260b4:	9200      	str	r2, [sp, #0]
 80260b6:	9701      	str	r7, [sp, #4]
 80260b8:	4623      	mov	r3, r4
 80260ba:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80260be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260c0:	f7ff fde6 	bl	8025c90 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80260c4:	e75a      	b.n	8025f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80260c6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80260c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80260cc:	ea4f 462b 	mov.w	r6, fp, asr #16
 80260d0:	1428      	asrs	r0, r5, #16
 80260d2:	fb02 6000 	mla	r0, r2, r0, r6
 80260d6:	9e08      	ldr	r6, [sp, #32]
 80260d8:	f816 8000 	ldrb.w	r8, [r6, r0]
 80260dc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80260e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80260e4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80260e8:	1837      	adds	r7, r6, r0
 80260ea:	eb04 0c08 	add.w	ip, r4, r8
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	d060      	beq.n	80261b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80260f2:	787e      	ldrb	r6, [r7, #1]
 80260f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80260f8:	4426      	add	r6, r4
 80260fa:	2900      	cmp	r1, #0
 80260fc:	d062      	beq.n	80261c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80260fe:	18b8      	adds	r0, r7, r2
 8026100:	5cba      	ldrb	r2, [r7, r2]
 8026102:	7840      	ldrb	r0, [r0, #1]
 8026104:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026108:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802610c:	4422      	add	r2, r4
 802610e:	4420      	add	r0, r4
 8026110:	b29b      	uxth	r3, r3
 8026112:	b289      	uxth	r1, r1
 8026114:	fb03 f901 	mul.w	r9, r3, r1
 8026118:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802611c:	011b      	lsls	r3, r3, #4
 802611e:	b289      	uxth	r1, r1
 8026120:	78b7      	ldrb	r7, [r6, #2]
 8026122:	f89c a002 	ldrb.w	sl, [ip, #2]
 8026126:	f89c c001 	ldrb.w	ip, [ip, #1]
 802612a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802612e:	eba3 0309 	sub.w	r3, r3, r9
 8026132:	b29b      	uxth	r3, r3
 8026134:	ebae 0e01 	sub.w	lr, lr, r1
 8026138:	fa1f fe8e 	uxth.w	lr, lr
 802613c:	435f      	muls	r7, r3
 802613e:	fb0e 770a 	mla	r7, lr, sl, r7
 8026142:	f892 a002 	ldrb.w	sl, [r2, #2]
 8026146:	fb01 770a 	mla	r7, r1, sl, r7
 802614a:	f890 a002 	ldrb.w	sl, [r0, #2]
 802614e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8026152:	f814 7008 	ldrb.w	r7, [r4, r8]
 8026156:	f896 8000 	ldrb.w	r8, [r6]
 802615a:	7876      	ldrb	r6, [r6, #1]
 802615c:	fb03 f808 	mul.w	r8, r3, r8
 8026160:	fb0e 8807 	mla	r8, lr, r7, r8
 8026164:	7817      	ldrb	r7, [r2, #0]
 8026166:	fb01 8807 	mla	r8, r1, r7, r8
 802616a:	7807      	ldrb	r7, [r0, #0]
 802616c:	fb09 8707 	mla	r7, r9, r7, r8
 8026170:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8026174:	4373      	muls	r3, r6
 8026176:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802617a:	7856      	ldrb	r6, [r2, #1]
 802617c:	ea47 070a 	orr.w	r7, r7, sl
 8026180:	fb0e 330c 	mla	r3, lr, ip, r3
 8026184:	f890 a001 	ldrb.w	sl, [r0, #1]
 8026188:	fb01 3306 	mla	r3, r1, r6, r3
 802618c:	fb09 3a0a 	mla	sl, r9, sl, r3
 8026190:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8026194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026196:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802619a:	ea47 070a 	orr.w	r7, r7, sl
 802619e:	f823 7b02 	strh.w	r7, [r3], #2
 80261a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80261a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80261a6:	449b      	add	fp, r3
 80261a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80261aa:	441d      	add	r5, r3
 80261ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261ae:	3b01      	subs	r3, #1
 80261b0:	9309      	str	r3, [sp, #36]	; 0x24
 80261b2:	e714      	b.n	8025fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80261b4:	b149      	cbz	r1, 80261ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80261b6:	5cba      	ldrb	r2, [r7, r2]
 80261b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261bc:	4422      	add	r2, r4
 80261be:	4660      	mov	r0, ip
 80261c0:	4666      	mov	r6, ip
 80261c2:	e7a5      	b.n	8026110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80261c4:	4660      	mov	r0, ip
 80261c6:	4662      	mov	r2, ip
 80261c8:	e7a2      	b.n	8026110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80261ca:	4660      	mov	r0, ip
 80261cc:	4662      	mov	r2, ip
 80261ce:	e7f7      	b.n	80261c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 80261d0:	b00f      	add	sp, #60	; 0x3c
 80261d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080261d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80261d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261da:	b085      	sub	sp, #20
 80261dc:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80261e0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80261e4:	9102      	str	r1, [sp, #8]
 80261e6:	2c00      	cmp	r4, #0
 80261e8:	fb04 710c 	mla	r1, r4, ip, r7
 80261ec:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80261f0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80261f4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80261f8:	eb02 0e01 	add.w	lr, r2, r1
 80261fc:	f2c0 8122 	blt.w	8026444 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8026200:	45a0      	cmp	r8, r4
 8026202:	f340 811f 	ble.w	8026444 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8026206:	2f00      	cmp	r7, #0
 8026208:	f2c0 811a 	blt.w	8026440 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802620c:	45bc      	cmp	ip, r7
 802620e:	f340 8117 	ble.w	8026440 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8026212:	5c52      	ldrb	r2, [r2, r1]
 8026214:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026218:	1c7a      	adds	r2, r7, #1
 802621a:	f100 8116 	bmi.w	802644a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802621e:	4594      	cmp	ip, r2
 8026220:	f340 8113 	ble.w	802644a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8026224:	2e00      	cmp	r6, #0
 8026226:	f000 8112 	beq.w	802644e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 802622a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802622e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026232:	3401      	adds	r4, #1
 8026234:	f100 810f 	bmi.w	8026456 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8026238:	45a0      	cmp	r8, r4
 802623a:	f340 810c 	ble.w	8026456 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802623e:	2800      	cmp	r0, #0
 8026240:	f000 810c 	beq.w	802645c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8026244:	2f00      	cmp	r7, #0
 8026246:	f2c0 8104 	blt.w	8026452 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802624a:	45bc      	cmp	ip, r7
 802624c:	f340 8101 	ble.w	8026452 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8026250:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8026254:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8026258:	3701      	adds	r7, #1
 802625a:	f100 8102 	bmi.w	8026462 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802625e:	45bc      	cmp	ip, r7
 8026260:	f340 80ff 	ble.w	8026462 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8026264:	2e00      	cmp	r6, #0
 8026266:	f000 80fe 	beq.w	8026466 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 802626a:	44f4      	add	ip, lr
 802626c:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8026270:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026274:	b2b6      	uxth	r6, r6
 8026276:	b280      	uxth	r0, r0
 8026278:	fb00 fe06 	mul.w	lr, r0, r6
 802627c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026280:	0136      	lsls	r6, r6, #4
 8026282:	eba6 070e 	sub.w	r7, r6, lr
 8026286:	b280      	uxth	r0, r0
 8026288:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802628c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026290:	b2bf      	uxth	r7, r7
 8026292:	1a1b      	subs	r3, r3, r0
 8026294:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026298:	b29b      	uxth	r3, r3
 802629a:	fb0a f607 	mul.w	r6, sl, r7
 802629e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80262a2:	fb0b 6603 	mla	r6, fp, r3, r6
 80262a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80262aa:	fb00 6609 	mla	r6, r0, r9, r6
 80262ae:	fb0e 6608 	mla	r6, lr, r8, r6
 80262b2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80262b6:	9600      	str	r6, [sp, #0]
 80262b8:	2e00      	cmp	r6, #0
 80262ba:	f000 80be 	beq.w	802643a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80262be:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80262c2:	fb0b fc0c 	mul.w	ip, fp, ip
 80262c6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80262ca:	fb0b f505 	mul.w	r5, fp, r5
 80262ce:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80262d2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80262d6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80262da:	44dc      	add	ip, fp
 80262dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262e0:	9501      	str	r5, [sp, #4]
 80262e2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80262e6:	9503      	str	r5, [sp, #12]
 80262e8:	9d01      	ldr	r5, [sp, #4]
 80262ea:	9e02      	ldr	r6, [sp, #8]
 80262ec:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80262f0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80262f4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80262f8:	fb0a fc0c 	mul.w	ip, sl, ip
 80262fc:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026300:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026304:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026308:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802630c:	4465      	add	r5, ip
 802630e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026312:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026316:	fb09 fc0c 	mul.w	ip, r9, ip
 802631a:	fb09 f904 	mul.w	r9, r9, r4
 802631e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026322:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026326:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802632a:	fb08 f404 	mul.w	r4, r8, r4
 802632e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026332:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026336:	fb08 f802 	mul.w	r8, r8, r2
 802633a:	fb0a fa01 	mul.w	sl, sl, r1
 802633e:	0a22      	lsrs	r2, r4, #8
 8026340:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026344:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026348:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802634c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026350:	4414      	add	r4, r2
 8026352:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026356:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802635a:	0a2d      	lsrs	r5, r5, #8
 802635c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026360:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026364:	9a03      	ldr	r2, [sp, #12]
 8026366:	8836      	ldrh	r6, [r6, #0]
 8026368:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802636c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026370:	437d      	muls	r5, r7
 8026372:	4461      	add	r1, ip
 8026374:	0a24      	lsrs	r4, r4, #8
 8026376:	fb02 5503 	mla	r5, r2, r3, r5
 802637a:	0a09      	lsrs	r1, r1, #8
 802637c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026380:	fb04 540e 	mla	r4, r4, lr, r5
 8026384:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026388:	fb01 4100 	mla	r1, r1, r0, r4
 802638c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026390:	0a09      	lsrs	r1, r1, #8
 8026392:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026396:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802639a:	fb07 f70a 	mul.w	r7, r7, sl
 802639e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263a2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80263a6:	fb03 7101 	mla	r1, r3, r1, r7
 80263aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80263ae:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80263b2:	fb0e 1e08 	mla	lr, lr, r8, r1
 80263b6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80263ba:	fb00 e101 	mla	r1, r0, r1, lr
 80263be:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80263c2:	9a00      	ldr	r2, [sp, #0]
 80263c4:	b287      	uxth	r7, r0
 80263c6:	437a      	muls	r2, r7
 80263c8:	0a09      	lsrs	r1, r1, #8
 80263ca:	1c53      	adds	r3, r2, #1
 80263cc:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80263d0:	4321      	orrs	r1, r4
 80263d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80263d6:	1235      	asrs	r5, r6, #8
 80263d8:	0c0a      	lsrs	r2, r1, #16
 80263da:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80263de:	b2db      	uxtb	r3, r3
 80263e0:	fb12 f207 	smulbb	r2, r2, r7
 80263e4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80263e8:	fb05 2503 	mla	r5, r5, r3, r2
 80263ec:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80263f0:	10f2      	asrs	r2, r6, #3
 80263f2:	b2c8      	uxtb	r0, r1
 80263f4:	00f6      	lsls	r6, r6, #3
 80263f6:	fb14 f407 	smulbb	r4, r4, r7
 80263fa:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80263fe:	b2f6      	uxtb	r6, r6
 8026400:	fb10 f007 	smulbb	r0, r0, r7
 8026404:	fb02 4203 	mla	r2, r2, r3, r4
 8026408:	b2ad      	uxth	r5, r5
 802640a:	fb06 0303 	mla	r3, r6, r3, r0
 802640e:	b299      	uxth	r1, r3
 8026410:	b294      	uxth	r4, r2
 8026412:	1c6b      	adds	r3, r5, #1
 8026414:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026418:	1c62      	adds	r2, r4, #1
 802641a:	1c4b      	adds	r3, r1, #1
 802641c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026420:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026424:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026428:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802642c:	0952      	lsrs	r2, r2, #5
 802642e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026432:	432b      	orrs	r3, r5
 8026434:	4313      	orrs	r3, r2
 8026436:	9a02      	ldr	r2, [sp, #8]
 8026438:	8013      	strh	r3, [r2, #0]
 802643a:	b005      	add	sp, #20
 802643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026440:	2500      	movs	r5, #0
 8026442:	e6e9      	b.n	8026218 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8026444:	2100      	movs	r1, #0
 8026446:	460d      	mov	r5, r1
 8026448:	e6f3      	b.n	8026232 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802644a:	2100      	movs	r1, #0
 802644c:	e6f1      	b.n	8026232 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802644e:	4631      	mov	r1, r6
 8026450:	e6ef      	b.n	8026232 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8026452:	2400      	movs	r4, #0
 8026454:	e700      	b.n	8026258 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026456:	2200      	movs	r2, #0
 8026458:	4614      	mov	r4, r2
 802645a:	e70b      	b.n	8026274 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802645c:	4602      	mov	r2, r0
 802645e:	4604      	mov	r4, r0
 8026460:	e708      	b.n	8026274 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026462:	2200      	movs	r2, #0
 8026464:	e706      	b.n	8026274 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026466:	4632      	mov	r2, r6
 8026468:	e704      	b.n	8026274 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0802646a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802646a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802646e:	b09f      	sub	sp, #124	; 0x7c
 8026470:	921b      	str	r2, [sp, #108]	; 0x6c
 8026472:	9309      	str	r3, [sp, #36]	; 0x24
 8026474:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026476:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802647a:	931c      	str	r3, [sp, #112]	; 0x70
 802647c:	9119      	str	r1, [sp, #100]	; 0x64
 802647e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026482:	901d      	str	r0, [sp, #116]	; 0x74
 8026484:	6850      	ldr	r0, [r2, #4]
 8026486:	6812      	ldr	r2, [r2, #0]
 8026488:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802648a:	fb00 1303 	mla	r3, r0, r3, r1
 802648e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026492:	930c      	str	r3, [sp, #48]	; 0x30
 8026494:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026496:	681b      	ldr	r3, [r3, #0]
 8026498:	9312      	str	r3, [sp, #72]	; 0x48
 802649a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802649c:	685e      	ldr	r6, [r3, #4]
 802649e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80264a2:	930d      	str	r3, [sp, #52]	; 0x34
 80264a4:	3604      	adds	r6, #4
 80264a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80264a8:	2b00      	cmp	r3, #0
 80264aa:	dc03      	bgt.n	80264b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80264ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80264ae:	2b00      	cmp	r3, #0
 80264b0:	f340 8388 	ble.w	8026bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80264b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264be:	1e48      	subs	r0, r1, #1
 80264c0:	1e57      	subs	r7, r2, #1
 80264c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264c4:	2b00      	cmp	r3, #0
 80264c6:	f340 8195 	ble.w	80267f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80264ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80264cc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80264d0:	ea4f 4325 	mov.w	r3, r5, asr #16
 80264d4:	d406      	bmi.n	80264e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80264d6:	4584      	cmp	ip, r0
 80264d8:	da04      	bge.n	80264e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80264da:	2b00      	cmp	r3, #0
 80264dc:	db02      	blt.n	80264e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80264de:	42bb      	cmp	r3, r7
 80264e0:	f2c0 8189 	blt.w	80267f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80264e4:	f11c 0c01 	adds.w	ip, ip, #1
 80264e8:	f100 8177 	bmi.w	80267da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80264ec:	4561      	cmp	r1, ip
 80264ee:	f2c0 8174 	blt.w	80267da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80264f2:	3301      	adds	r3, #1
 80264f4:	f100 8171 	bmi.w	80267da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80264f8:	429a      	cmp	r2, r3
 80264fa:	f2c0 816e 	blt.w	80267da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80264fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026500:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026502:	931a      	str	r3, [sp, #104]	; 0x68
 8026504:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026506:	2b00      	cmp	r3, #0
 8026508:	f340 8193 	ble.w	8026832 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 802650c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802650e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026512:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026514:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026518:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802651a:	141b      	asrs	r3, r3, #16
 802651c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026520:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026524:	f100 81d6 	bmi.w	80268d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8026528:	f100 38ff 	add.w	r8, r0, #4294967295
 802652c:	4543      	cmp	r3, r8
 802652e:	f280 81d1 	bge.w	80268d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8026532:	f1bc 0f00 	cmp.w	ip, #0
 8026536:	f2c0 81cd 	blt.w	80268d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802653a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802653e:	45c4      	cmp	ip, r8
 8026540:	f280 81c8 	bge.w	80268d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8026544:	b200      	sxth	r0, r0
 8026546:	fb0c 3300 	mla	r3, ip, r0, r3
 802654a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802654c:	eb04 0803 	add.w	r8, r4, r3
 8026550:	5ce3      	ldrb	r3, [r4, r3]
 8026552:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026556:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802655a:	2a00      	cmp	r2, #0
 802655c:	f000 81af 	beq.w	80268be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026560:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026564:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026568:	940e      	str	r4, [sp, #56]	; 0x38
 802656a:	0e24      	lsrs	r4, r4, #24
 802656c:	9415      	str	r4, [sp, #84]	; 0x54
 802656e:	b179      	cbz	r1, 8026590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8026570:	eb08 0c00 	add.w	ip, r8, r0
 8026574:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026578:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802657c:	900a      	str	r0, [sp, #40]	; 0x28
 802657e:	0e00      	lsrs	r0, r0, #24
 8026580:	9013      	str	r0, [sp, #76]	; 0x4c
 8026582:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026586:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802658a:	900f      	str	r0, [sp, #60]	; 0x3c
 802658c:	0e00      	lsrs	r0, r0, #24
 802658e:	9016      	str	r0, [sp, #88]	; 0x58
 8026590:	b292      	uxth	r2, r2
 8026592:	b289      	uxth	r1, r1
 8026594:	fb02 f901 	mul.w	r9, r2, r1
 8026598:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802659c:	0112      	lsls	r2, r2, #4
 802659e:	eba2 0809 	sub.w	r8, r2, r9
 80265a2:	b289      	uxth	r1, r1
 80265a4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80265a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80265aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80265ac:	fa1f f888 	uxth.w	r8, r8
 80265b0:	1a52      	subs	r2, r2, r1
 80265b2:	b292      	uxth	r2, r2
 80265b4:	fb08 f000 	mul.w	r0, r8, r0
 80265b8:	fb02 000e 	mla	r0, r2, lr, r0
 80265bc:	fb01 0004 	mla	r0, r1, r4, r0
 80265c0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80265c2:	fb09 0004 	mla	r0, r9, r4, r0
 80265c6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80265ca:	2800      	cmp	r0, #0
 80265cc:	f000 80fa 	beq.w	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80265d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80265d4:	d01b      	beq.n	802660e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80265d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80265da:	fb0e fa0a 	mul.w	sl, lr, sl
 80265de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80265e2:	fb0e fe03 	mul.w	lr, lr, r3
 80265e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80265ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80265ee:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80265f2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80265f6:	4453      	add	r3, sl
 80265f8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80265fc:	0a1b      	lsrs	r3, r3, #8
 80265fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026602:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026606:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802660a:	ea43 030c 	orr.w	r3, r3, ip
 802660e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026610:	2cff      	cmp	r4, #255	; 0xff
 8026612:	d021      	beq.n	8026658 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026614:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026616:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802661a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802661c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026620:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026622:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026626:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026628:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802662c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026630:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026634:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026638:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802663c:	44de      	add	lr, fp
 802663e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802664a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802664e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026652:	ea4e 040a 	orr.w	r4, lr, sl
 8026656:	940e      	str	r4, [sp, #56]	; 0x38
 8026658:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802665a:	2cff      	cmp	r4, #255	; 0xff
 802665c:	d021      	beq.n	80266a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802665e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026660:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026664:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026666:	fb04 fb0b 	mul.w	fp, r4, fp
 802666a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802666c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026672:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026676:	fb04 fa0a 	mul.w	sl, r4, sl
 802667a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802667e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026682:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026686:	44de      	add	lr, fp
 8026688:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802668c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026690:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026694:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026698:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802669c:	ea4e 040a 	orr.w	r4, lr, sl
 80266a0:	940a      	str	r4, [sp, #40]	; 0x28
 80266a2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266a4:	2cff      	cmp	r4, #255	; 0xff
 80266a6:	d021      	beq.n	80266ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80266a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80266aa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80266ae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266b0:	fb04 fb0b 	mul.w	fp, r4, fp
 80266b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80266b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80266ba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80266bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266c0:	fb04 fa0a 	mul.w	sl, r4, sl
 80266c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80266cc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80266d0:	44de      	add	lr, fp
 80266d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80266e2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80266e6:	ea4e 040a 	orr.w	r4, lr, sl
 80266ea:	940f      	str	r4, [sp, #60]	; 0x3c
 80266ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80266ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80266f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80266f4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80266f8:	fb08 fc0c 	mul.w	ip, r8, ip
 80266fc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026700:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026704:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026706:	fb01 cc0e 	mla	ip, r1, lr, ip
 802670a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802670e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026710:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026714:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026718:	fb08 f80e 	mul.w	r8, r8, lr
 802671c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026720:	fb02 8303 	mla	r3, r2, r3, r8
 8026724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026726:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026728:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802672c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802672e:	fb01 330a 	mla	r3, r1, sl, r3
 8026732:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8026736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026738:	fb09 3901 	mla	r9, r9, r1, r3
 802673c:	4342      	muls	r2, r0
 802673e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026742:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026746:	883b      	ldrh	r3, [r7, #0]
 8026748:	1c50      	adds	r0, r2, #1
 802674a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802674e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026752:	ea4c 0c09 	orr.w	ip, ip, r9
 8026756:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802675a:	1219      	asrs	r1, r3, #8
 802675c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026760:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026764:	b2c0      	uxtb	r0, r0
 8026766:	fb12 f204 	smulbb	r2, r2, r4
 802676a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802676e:	fb01 2100 	mla	r1, r1, r0, r2
 8026772:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026776:	10da      	asrs	r2, r3, #3
 8026778:	fa5f fc8c 	uxtb.w	ip, ip
 802677c:	00db      	lsls	r3, r3, #3
 802677e:	fb1c fc04 	smulbb	ip, ip, r4
 8026782:	b2db      	uxtb	r3, r3
 8026784:	b289      	uxth	r1, r1
 8026786:	fb03 c300 	mla	r3, r3, r0, ip
 802678a:	fa1f fc83 	uxth.w	ip, r3
 802678e:	1c4b      	adds	r3, r1, #1
 8026790:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026794:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026798:	fb1e fe04 	smulbb	lr, lr, r4
 802679c:	f10c 0301 	add.w	r3, ip, #1
 80267a0:	fb02 e200 	mla	r2, r2, r0, lr
 80267a4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80267a8:	b292      	uxth	r2, r2
 80267aa:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80267ae:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80267b2:	430b      	orrs	r3, r1
 80267b4:	1c51      	adds	r1, r2, #1
 80267b6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80267ba:	0952      	lsrs	r2, r2, #5
 80267bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80267c0:	4313      	orrs	r3, r2
 80267c2:	803b      	strh	r3, [r7, #0]
 80267c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80267c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80267c8:	441a      	add	r2, r3
 80267ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80267cc:	9229      	str	r2, [sp, #164]	; 0xa4
 80267ce:	441d      	add	r5, r3
 80267d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80267d2:	3b01      	subs	r3, #1
 80267d4:	3702      	adds	r7, #2
 80267d6:	931a      	str	r3, [sp, #104]	; 0x68
 80267d8:	e694      	b.n	8026504 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80267da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80267dc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80267de:	441c      	add	r4, r3
 80267e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80267e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80267e4:	441d      	add	r5, r3
 80267e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267e8:	3b01      	subs	r3, #1
 80267ea:	9309      	str	r3, [sp, #36]	; 0x24
 80267ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80267ee:	3302      	adds	r3, #2
 80267f0:	930c      	str	r3, [sp, #48]	; 0x30
 80267f2:	e666      	b.n	80264c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80267f4:	d024      	beq.n	8026840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 80267f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267f8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80267fa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80267fc:	3b01      	subs	r3, #1
 80267fe:	fb00 4003 	mla	r0, r0, r3, r4
 8026802:	1400      	asrs	r0, r0, #16
 8026804:	f53f ae7b 	bmi.w	80264fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026808:	3901      	subs	r1, #1
 802680a:	4288      	cmp	r0, r1
 802680c:	f6bf ae77 	bge.w	80264fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026810:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026812:	fb01 5303 	mla	r3, r1, r3, r5
 8026816:	141b      	asrs	r3, r3, #16
 8026818:	f53f ae71 	bmi.w	80264fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802681c:	3a01      	subs	r2, #1
 802681e:	4293      	cmp	r3, r2
 8026820:	f6bf ae6d 	bge.w	80264fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026824:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026828:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802682c:	f1bb 0f00 	cmp.w	fp, #0
 8026830:	dc70      	bgt.n	8026914 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8026832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026834:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802683a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802683e:	930c      	str	r3, [sp, #48]	; 0x30
 8026840:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026842:	2b00      	cmp	r3, #0
 8026844:	f340 81be 	ble.w	8026bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8026848:	ee30 0a04 	vadd.f32	s0, s0, s8
 802684c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026850:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026854:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026856:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802685a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802685e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026862:	eef0 6a62 	vmov.f32	s13, s5
 8026866:	ee61 7a27 	vmul.f32	s15, s2, s15
 802686a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802686e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026872:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802687a:	eef0 6a43 	vmov.f32	s13, s6
 802687e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026882:	ee12 2a90 	vmov	r2, s5
 8026886:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802688a:	fb92 f3f3 	sdiv	r3, r2, r3
 802688e:	ee13 2a10 	vmov	r2, s6
 8026892:	932b      	str	r3, [sp, #172]	; 0xac
 8026894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026896:	fb92 f3f3 	sdiv	r3, r2, r3
 802689a:	932c      	str	r3, [sp, #176]	; 0xb0
 802689c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802689e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80268a0:	3b01      	subs	r3, #1
 80268a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268a6:	9319      	str	r3, [sp, #100]	; 0x64
 80268a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80268aa:	bf08      	it	eq
 80268ac:	4613      	moveq	r3, r2
 80268ae:	ee16 5a90 	vmov	r5, s13
 80268b2:	9309      	str	r3, [sp, #36]	; 0x24
 80268b4:	eeb0 3a67 	vmov.f32	s6, s15
 80268b8:	eef0 2a47 	vmov.f32	s5, s14
 80268bc:	e5f3      	b.n	80264a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80268be:	2900      	cmp	r1, #0
 80268c0:	f43f ae66 	beq.w	8026590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80268c4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80268c8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80268cc:	900a      	str	r0, [sp, #40]	; 0x28
 80268ce:	0e00      	lsrs	r0, r0, #24
 80268d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80268d2:	e65d      	b.n	8026590 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80268d4:	f113 0801 	adds.w	r8, r3, #1
 80268d8:	f53f af74 	bmi.w	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80268dc:	4540      	cmp	r0, r8
 80268de:	f6ff af71 	blt.w	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80268e2:	f11c 0801 	adds.w	r8, ip, #1
 80268e6:	f53f af6d 	bmi.w	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80268ea:	45c6      	cmp	lr, r8
 80268ec:	f6ff af6a 	blt.w	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80268f0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80268f2:	9302      	str	r3, [sp, #8]
 80268f4:	b200      	sxth	r0, r0
 80268f6:	fa0f f38e 	sxth.w	r3, lr
 80268fa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80268fe:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026902:	9301      	str	r3, [sp, #4]
 8026904:	9000      	str	r0, [sp, #0]
 8026906:	4633      	mov	r3, r6
 8026908:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802690a:	981d      	ldr	r0, [sp, #116]	; 0x74
 802690c:	4639      	mov	r1, r7
 802690e:	f7ff fc62 	bl	80261d6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8026912:	e757      	b.n	80267c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026914:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026916:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026918:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802691c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802691e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026922:	1427      	asrs	r7, r4, #16
 8026924:	142b      	asrs	r3, r5, #16
 8026926:	fb01 7303 	mla	r3, r1, r3, r7
 802692a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802692c:	18e7      	adds	r7, r4, r3
 802692e:	5ce3      	ldrb	r3, [r4, r3]
 8026930:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026934:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026938:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802693c:	2a00      	cmp	r2, #0
 802693e:	f000 8137 	beq.w	8026bb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 8026942:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026946:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802694a:	9410      	str	r4, [sp, #64]	; 0x40
 802694c:	0e24      	lsrs	r4, r4, #24
 802694e:	9417      	str	r4, [sp, #92]	; 0x5c
 8026950:	b170      	cbz	r0, 8026970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8026952:	eb07 0e01 	add.w	lr, r7, r1
 8026956:	5c79      	ldrb	r1, [r7, r1]
 8026958:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802695c:	910b      	str	r1, [sp, #44]	; 0x2c
 802695e:	0e09      	lsrs	r1, r1, #24
 8026960:	9114      	str	r1, [sp, #80]	; 0x50
 8026962:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026966:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802696a:	9111      	str	r1, [sp, #68]	; 0x44
 802696c:	0e09      	lsrs	r1, r1, #24
 802696e:	9118      	str	r1, [sp, #96]	; 0x60
 8026970:	b292      	uxth	r2, r2
 8026972:	b280      	uxth	r0, r0
 8026974:	fb02 f800 	mul.w	r8, r2, r0
 8026978:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802697c:	0112      	lsls	r2, r2, #4
 802697e:	eba2 0e08 	sub.w	lr, r2, r8
 8026982:	b280      	uxth	r0, r0
 8026984:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026988:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802698a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802698c:	fa1f fe8e 	uxth.w	lr, lr
 8026990:	1a12      	subs	r2, r2, r0
 8026992:	b292      	uxth	r2, r2
 8026994:	fb0e f101 	mul.w	r1, lr, r1
 8026998:	fb02 110c 	mla	r1, r2, ip, r1
 802699c:	fb00 1104 	mla	r1, r0, r4, r1
 80269a0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80269a2:	fb08 1104 	mla	r1, r8, r4, r1
 80269a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269aa:	2900      	cmp	r1, #0
 80269ac:	f000 80f5 	beq.w	8026b9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80269b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80269b4:	d019      	beq.n	80269ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80269b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80269ba:	fb0c fa0a 	mul.w	sl, ip, sl
 80269be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80269c2:	fb0c fc03 	mul.w	ip, ip, r3
 80269c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80269ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269ce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80269d2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80269d6:	4453      	add	r3, sl
 80269d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80269dc:	0a1b      	lsrs	r3, r3, #8
 80269de:	0a3f      	lsrs	r7, r7, #8
 80269e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80269e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80269e8:	433b      	orrs	r3, r7
 80269ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80269ec:	2cff      	cmp	r4, #255	; 0xff
 80269ee:	d020      	beq.n	8026a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80269f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80269f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80269f6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80269f8:	4367      	muls	r7, r4
 80269fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80269fc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a00:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026a02:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a06:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a0a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a12:	44bc      	add	ip, r7
 8026a14:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a2c:	ea4c 040a 	orr.w	r4, ip, sl
 8026a30:	9410      	str	r4, [sp, #64]	; 0x40
 8026a32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a34:	2cff      	cmp	r4, #255	; 0xff
 8026a36:	d020      	beq.n	8026a7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8026a38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a3a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026a3e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a40:	4367      	muls	r7, r4
 8026a42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a48:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026a4a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a52:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a5a:	44bc      	add	ip, r7
 8026a5c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026a60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026a70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026a74:	ea4c 040a 	orr.w	r4, ip, sl
 8026a78:	940b      	str	r4, [sp, #44]	; 0x2c
 8026a7a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026a7c:	2cff      	cmp	r4, #255	; 0xff
 8026a7e:	d020      	beq.n	8026ac2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8026a80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026a82:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026a86:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026a88:	4367      	muls	r7, r4
 8026a8a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026a8c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026a90:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026a92:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a96:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a9a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026a9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026aa2:	44bc      	add	ip, r7
 8026aa4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026aa8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026aac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ab0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ab4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ab8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026abc:	ea4c 040a 	orr.w	r4, ip, sl
 8026ac0:	9411      	str	r4, [sp, #68]	; 0x44
 8026ac2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026ac4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026ac8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026aca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026ace:	fb0e f707 	mul.w	r7, lr, r7
 8026ad2:	fb02 770c 	mla	r7, r2, ip, r7
 8026ad6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026ada:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026adc:	fb00 770c 	mla	r7, r0, ip, r7
 8026ae0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026ae4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026ae6:	fb08 770c 	mla	r7, r8, ip, r7
 8026aea:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026aee:	fb0e fe0c 	mul.w	lr, lr, ip
 8026af2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026af6:	fb02 e303 	mla	r3, r2, r3, lr
 8026afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026afc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026afe:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026b02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026b04:	fb00 330a 	mla	r3, r0, sl, r3
 8026b08:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8026b0c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026b12:	f8b9 0000 	ldrh.w	r0, [r9]
 8026b16:	434b      	muls	r3, r1
 8026b18:	0a3f      	lsrs	r7, r7, #8
 8026b1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b1e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026b22:	1c59      	adds	r1, r3, #1
 8026b24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026b28:	ea47 070c 	orr.w	r7, r7, ip
 8026b2c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026b30:	1202      	asrs	r2, r0, #8
 8026b32:	0c3b      	lsrs	r3, r7, #16
 8026b34:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026b38:	b2c9      	uxtb	r1, r1
 8026b3a:	fb13 f304 	smulbb	r3, r3, r4
 8026b3e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026b42:	fb02 3201 	mla	r2, r2, r1, r3
 8026b46:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026b4a:	10c3      	asrs	r3, r0, #3
 8026b4c:	b2ff      	uxtb	r7, r7
 8026b4e:	00c0      	lsls	r0, r0, #3
 8026b50:	b292      	uxth	r2, r2
 8026b52:	fb1c fc04 	smulbb	ip, ip, r4
 8026b56:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026b5a:	b2c0      	uxtb	r0, r0
 8026b5c:	fb17 f704 	smulbb	r7, r7, r4
 8026b60:	fb03 c301 	mla	r3, r3, r1, ip
 8026b64:	fb00 7001 	mla	r0, r0, r1, r7
 8026b68:	f102 0c01 	add.w	ip, r2, #1
 8026b6c:	b280      	uxth	r0, r0
 8026b6e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026b72:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8026b76:	1c42      	adds	r2, r0, #1
 8026b78:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026b7c:	b29b      	uxth	r3, r3
 8026b7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026b82:	ea42 020c 	orr.w	r2, r2, ip
 8026b86:	f103 0c01 	add.w	ip, r3, #1
 8026b8a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026b8e:	095b      	lsrs	r3, r3, #5
 8026b90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b94:	431a      	orrs	r2, r3
 8026b96:	f8a9 2000 	strh.w	r2, [r9]
 8026b9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026b9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026b9e:	441a      	add	r2, r3
 8026ba0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026ba2:	9229      	str	r2, [sp, #164]	; 0xa4
 8026ba4:	f109 0902 	add.w	r9, r9, #2
 8026ba8:	441d      	add	r5, r3
 8026baa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026bae:	e63d      	b.n	802682c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8026bb0:	2800      	cmp	r0, #0
 8026bb2:	f43f aedd 	beq.w	8026970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8026bb6:	5c79      	ldrb	r1, [r7, r1]
 8026bb8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026bbc:	910b      	str	r1, [sp, #44]	; 0x2c
 8026bbe:	0e09      	lsrs	r1, r1, #24
 8026bc0:	9114      	str	r1, [sp, #80]	; 0x50
 8026bc2:	e6d5      	b.n	8026970 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8026bc4:	b01f      	add	sp, #124	; 0x7c
 8026bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bce:	b089      	sub	sp, #36	; 0x24
 8026bd0:	9101      	str	r1, [sp, #4]
 8026bd2:	9801      	ldr	r0, [sp, #4]
 8026bd4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8026bd8:	8800      	ldrh	r0, [r0, #0]
 8026bda:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8026bde:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8026be2:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8026be6:	1206      	asrs	r6, r0, #8
 8026be8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8026bec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8026bf0:	9602      	str	r6, [sp, #8]
 8026bf2:	10c6      	asrs	r6, r0, #3
 8026bf4:	00c0      	lsls	r0, r0, #3
 8026bf6:	b2c0      	uxtb	r0, r0
 8026bf8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026bfc:	9004      	str	r0, [sp, #16]
 8026bfe:	2f00      	cmp	r7, #0
 8026c00:	fb07 100c 	mla	r0, r7, ip, r1
 8026c04:	9603      	str	r6, [sp, #12]
 8026c06:	eb02 0e00 	add.w	lr, r2, r0
 8026c0a:	f2c0 810a 	blt.w	8026e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026c0e:	45b8      	cmp	r8, r7
 8026c10:	f340 8107 	ble.w	8026e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026c14:	2900      	cmp	r1, #0
 8026c16:	f2c0 8102 	blt.w	8026e1e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026c1a:	458c      	cmp	ip, r1
 8026c1c:	f340 80ff 	ble.w	8026e1e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026c20:	5c12      	ldrb	r2, [r2, r0]
 8026c22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026c26:	1c4a      	adds	r2, r1, #1
 8026c28:	f100 80fe 	bmi.w	8026e28 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026c2c:	4594      	cmp	ip, r2
 8026c2e:	f340 80fb 	ble.w	8026e28 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026c32:	2d00      	cmp	r5, #0
 8026c34:	f000 80fa 	beq.w	8026e2c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026c38:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026c3c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8026c40:	3701      	adds	r7, #1
 8026c42:	f100 80f7 	bmi.w	8026e34 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026c46:	45b8      	cmp	r8, r7
 8026c48:	f340 80f4 	ble.w	8026e34 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026c4c:	2c00      	cmp	r4, #0
 8026c4e:	f000 80f4 	beq.w	8026e3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8026c52:	2900      	cmp	r1, #0
 8026c54:	eb0e 020c 	add.w	r2, lr, ip
 8026c58:	f2c0 80ea 	blt.w	8026e30 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026c5c:	458c      	cmp	ip, r1
 8026c5e:	f340 80e7 	ble.w	8026e30 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026c62:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026c66:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026c6a:	3101      	adds	r1, #1
 8026c6c:	f100 80e8 	bmi.w	8026e40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026c70:	458c      	cmp	ip, r1
 8026c72:	f340 80e5 	ble.w	8026e40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026c76:	2d00      	cmp	r5, #0
 8026c78:	f000 80e4 	beq.w	8026e44 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026c7c:	7852      	ldrb	r2, [r2, #1]
 8026c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026c82:	0e0b      	lsrs	r3, r1, #24
 8026c84:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026c88:	9300      	str	r3, [sp, #0]
 8026c8a:	b2a4      	uxth	r4, r4
 8026c8c:	b2ab      	uxth	r3, r5
 8026c8e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8026c92:	fb03 f904 	mul.w	r9, r3, r4
 8026c96:	fb0a f505 	mul.w	r5, sl, r5
 8026c9a:	011b      	lsls	r3, r3, #4
 8026c9c:	eba3 0e09 	sub.w	lr, r3, r9
 8026ca0:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8026ca4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8026ca8:	0a28      	lsrs	r0, r5, #8
 8026caa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026cae:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8026cb2:	4405      	add	r5, r0
 8026cb4:	0a2d      	lsrs	r5, r5, #8
 8026cb6:	fb0a f303 	mul.w	r3, sl, r3
 8026cba:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8026cbe:	9005      	str	r0, [sp, #20]
 8026cc0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8026cc4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026cc8:	0a1b      	lsrs	r3, r3, #8
 8026cca:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026cce:	9306      	str	r3, [sp, #24]
 8026cd0:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8026cd4:	fb0b f303 	mul.w	r3, fp, r3
 8026cd8:	0a1d      	lsrs	r5, r3, #8
 8026cda:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026cde:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8026ce2:	fb0b f606 	mul.w	r6, fp, r6
 8026ce6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8026cea:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8026cee:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026cf2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026cf6:	fb08 f707 	mul.w	r7, r8, r7
 8026cfa:	441d      	add	r5, r3
 8026cfc:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8026d00:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8026d04:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8026d08:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026d0c:	fb08 fc0c 	mul.w	ip, r8, ip
 8026d10:	0a1b      	lsrs	r3, r3, #8
 8026d12:	9307      	str	r3, [sp, #28]
 8026d14:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8026d18:	0e0b      	lsrs	r3, r1, #24
 8026d1a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8026d1e:	435f      	muls	r7, r3
 8026d20:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026d24:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026d28:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8026d2c:	4460      	add	r0, ip
 8026d2e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026d32:	b2a4      	uxth	r4, r4
 8026d34:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026d38:	0a2d      	lsrs	r5, r5, #8
 8026d3a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026d3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d42:	fa1f fe8e 	uxth.w	lr, lr
 8026d46:	4359      	muls	r1, r3
 8026d48:	1b12      	subs	r2, r2, r4
 8026d4a:	9b05      	ldr	r3, [sp, #20]
 8026d4c:	44bc      	add	ip, r7
 8026d4e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026d52:	b292      	uxth	r2, r2
 8026d54:	fb05 f50e 	mul.w	r5, r5, lr
 8026d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d5c:	fb03 5502 	mla	r5, r3, r2, r5
 8026d60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026d64:	9b06      	ldr	r3, [sp, #24]
 8026d66:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8026d6a:	0a36      	lsrs	r6, r6, #8
 8026d6c:	0a00      	lsrs	r0, r0, #8
 8026d6e:	fb0c 5509 	mla	r5, ip, r9, r5
 8026d72:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026d76:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8026d7a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026d7e:	fb00 5504 	mla	r5, r0, r4, r5
 8026d82:	fb0e f606 	mul.w	r6, lr, r6
 8026d86:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8026d8a:	0a09      	lsrs	r1, r1, #8
 8026d8c:	9b07      	ldr	r3, [sp, #28]
 8026d8e:	fb02 6000 	mla	r0, r2, r0, r6
 8026d92:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026d96:	fb09 0001 	mla	r0, r9, r1, r0
 8026d9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d9e:	fb0e fe0b 	mul.w	lr, lr, fp
 8026da2:	fb04 0003 	mla	r0, r4, r3, r0
 8026da6:	fb02 e20a 	mla	r2, r2, sl, lr
 8026daa:	9b00      	ldr	r3, [sp, #0]
 8026dac:	fb04 2408 	mla	r4, r4, r8, r2
 8026db0:	fb09 4903 	mla	r9, r9, r3, r4
 8026db4:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026db8:	9b02      	ldr	r3, [sp, #8]
 8026dba:	9a04      	ldr	r2, [sp, #16]
 8026dbc:	fa5f f989 	uxtb.w	r9, r9
 8026dc0:	fb03 f109 	mul.w	r1, r3, r9
 8026dc4:	9b03      	ldr	r3, [sp, #12]
 8026dc6:	0a2d      	lsrs	r5, r5, #8
 8026dc8:	0a00      	lsrs	r0, r0, #8
 8026dca:	fb03 f309 	mul.w	r3, r3, r9
 8026dce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026dd2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026dd6:	4305      	orrs	r5, r0
 8026dd8:	fb02 f909 	mul.w	r9, r2, r9
 8026ddc:	1c58      	adds	r0, r3, #1
 8026dde:	1c4a      	adds	r2, r1, #1
 8026de0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026de4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026de8:	0a2b      	lsrs	r3, r5, #8
 8026dea:	0c2a      	lsrs	r2, r5, #16
 8026dec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026df0:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026df4:	00db      	lsls	r3, r3, #3
 8026df6:	0212      	lsls	r2, r2, #8
 8026df8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026dfc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026e00:	4313      	orrs	r3, r2
 8026e02:	f109 0201 	add.w	r2, r9, #1
 8026e06:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026e0a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8026e0e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8026e12:	431d      	orrs	r5, r3
 8026e14:	9b01      	ldr	r3, [sp, #4]
 8026e16:	801d      	strh	r5, [r3, #0]
 8026e18:	b009      	add	sp, #36	; 0x24
 8026e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e1e:	2000      	movs	r0, #0
 8026e20:	e701      	b.n	8026c26 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8026e22:	2600      	movs	r6, #0
 8026e24:	4630      	mov	r0, r6
 8026e26:	e70b      	b.n	8026c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e28:	2600      	movs	r6, #0
 8026e2a:	e709      	b.n	8026c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e2c:	462e      	mov	r6, r5
 8026e2e:	e707      	b.n	8026c40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e30:	2700      	movs	r7, #0
 8026e32:	e71a      	b.n	8026c6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8026e34:	2100      	movs	r1, #0
 8026e36:	460f      	mov	r7, r1
 8026e38:	e723      	b.n	8026c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e3a:	4621      	mov	r1, r4
 8026e3c:	4627      	mov	r7, r4
 8026e3e:	e720      	b.n	8026c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e40:	2100      	movs	r1, #0
 8026e42:	e71e      	b.n	8026c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e44:	4629      	mov	r1, r5
 8026e46:	e71c      	b.n	8026c82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08026e48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e4c:	b09b      	sub	sp, #108	; 0x6c
 8026e4e:	9218      	str	r2, [sp, #96]	; 0x60
 8026e50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026e52:	9116      	str	r1, [sp, #88]	; 0x58
 8026e54:	9307      	str	r3, [sp, #28]
 8026e56:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026e5a:	9019      	str	r0, [sp, #100]	; 0x64
 8026e5c:	6850      	ldr	r0, [r2, #4]
 8026e5e:	6812      	ldr	r2, [r2, #0]
 8026e60:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8026e62:	fb00 1303 	mla	r3, r0, r3, r1
 8026e66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8026e6c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e6e:	681b      	ldr	r3, [r3, #0]
 8026e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e74:	685e      	ldr	r6, [r3, #4]
 8026e76:	3604      	adds	r6, #4
 8026e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026e7a:	2b00      	cmp	r3, #0
 8026e7c:	dc03      	bgt.n	8026e86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026e7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026e80:	2b00      	cmp	r3, #0
 8026e82:	f340 8373 	ble.w	802756c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026e86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026e88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026e90:	1e48      	subs	r0, r1, #1
 8026e92:	1e57      	subs	r7, r2, #1
 8026e94:	9b07      	ldr	r3, [sp, #28]
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	f340 8190 	ble.w	80271bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026e9c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8026e9e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026ea2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026ea6:	d406      	bmi.n	8026eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026ea8:	4584      	cmp	ip, r0
 8026eaa:	da04      	bge.n	8026eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026eac:	2b00      	cmp	r3, #0
 8026eae:	db02      	blt.n	8026eb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026eb0:	42bb      	cmp	r3, r7
 8026eb2:	f2c0 8184 	blt.w	80271be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8026eb6:	f11c 0c01 	adds.w	ip, ip, #1
 8026eba:	f100 8172 	bmi.w	80271a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026ebe:	4561      	cmp	r1, ip
 8026ec0:	f2c0 816f 	blt.w	80271a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026ec4:	3301      	adds	r3, #1
 8026ec6:	f100 816c 	bmi.w	80271a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026eca:	429a      	cmp	r2, r3
 8026ecc:	f2c0 8169 	blt.w	80271a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026ed0:	9b07      	ldr	r3, [sp, #28]
 8026ed2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026ed4:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ed6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ed8:	2b00      	cmp	r3, #0
 8026eda:	f340 818e 	ble.w	80271fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8026ede:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026ee0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ee4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026ee6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026eea:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026eec:	141b      	asrs	r3, r3, #16
 8026eee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026ef2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ef6:	f100 81d1 	bmi.w	802729c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026efa:	f101 38ff 	add.w	r8, r1, #4294967295
 8026efe:	4543      	cmp	r3, r8
 8026f00:	f280 81cc 	bge.w	802729c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026f04:	f1bc 0f00 	cmp.w	ip, #0
 8026f08:	f2c0 81c8 	blt.w	802729c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026f0c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026f10:	45c4      	cmp	ip, r8
 8026f12:	f280 81c3 	bge.w	802729c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8026f16:	b209      	sxth	r1, r1
 8026f18:	fb0c 3301 	mla	r3, ip, r1, r3
 8026f1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026f1e:	eb04 0803 	add.w	r8, r4, r3
 8026f22:	5ce3      	ldrb	r3, [r4, r3]
 8026f24:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026f28:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026f2c:	2a00      	cmp	r2, #0
 8026f2e:	f000 81aa 	beq.w	8027286 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8026f32:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026f36:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026f3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8026f3c:	0e24      	lsrs	r4, r4, #24
 8026f3e:	9412      	str	r4, [sp, #72]	; 0x48
 8026f40:	b178      	cbz	r0, 8026f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8026f42:	eb08 0c01 	add.w	ip, r8, r1
 8026f46:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026f4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f4e:	9108      	str	r1, [sp, #32]
 8026f50:	0e09      	lsrs	r1, r1, #24
 8026f52:	9110      	str	r1, [sp, #64]	; 0x40
 8026f54:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026f58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f5c:	910c      	str	r1, [sp, #48]	; 0x30
 8026f5e:	0e09      	lsrs	r1, r1, #24
 8026f60:	9113      	str	r1, [sp, #76]	; 0x4c
 8026f62:	b292      	uxth	r2, r2
 8026f64:	b280      	uxth	r0, r0
 8026f66:	fb02 f900 	mul.w	r9, r2, r0
 8026f6a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026f6e:	0112      	lsls	r2, r2, #4
 8026f70:	eba2 0809 	sub.w	r8, r2, r9
 8026f74:	b280      	uxth	r0, r0
 8026f76:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026f7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026f7c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f7e:	fa1f f888 	uxth.w	r8, r8
 8026f82:	1a12      	subs	r2, r2, r0
 8026f84:	b292      	uxth	r2, r2
 8026f86:	fb08 f101 	mul.w	r1, r8, r1
 8026f8a:	fb02 110e 	mla	r1, r2, lr, r1
 8026f8e:	fb00 1104 	mla	r1, r0, r4, r1
 8026f92:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026f94:	fb09 1104 	mla	r1, r9, r4, r1
 8026f98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f9c:	2900      	cmp	r1, #0
 8026f9e:	f000 80f5 	beq.w	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8026fa2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026fa6:	d01b      	beq.n	8026fe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026fa8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026fac:	fb0e fa0a 	mul.w	sl, lr, sl
 8026fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026fb4:	fb0e fe03 	mul.w	lr, lr, r3
 8026fb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026fbc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026fc0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026fc4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026fc8:	4453      	add	r3, sl
 8026fca:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026fce:	0a1b      	lsrs	r3, r3, #8
 8026fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026fd8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026fdc:	ea43 030c 	orr.w	r3, r3, ip
 8026fe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026fe2:	2cff      	cmp	r4, #255	; 0xff
 8026fe4:	d021      	beq.n	802702a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026fe8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026fec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026fee:	fb04 fb0b 	mul.w	fp, r4, fp
 8026ff2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026ff4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026ff8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ffa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ffe:	fb04 fa0a 	mul.w	sl, r4, sl
 8027002:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027006:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802700a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802700e:	44de      	add	lr, fp
 8027010:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027014:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027018:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802701c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027020:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027024:	ea4e 040a 	orr.w	r4, lr, sl
 8027028:	940b      	str	r4, [sp, #44]	; 0x2c
 802702a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802702c:	2cff      	cmp	r4, #255	; 0xff
 802702e:	d021      	beq.n	8027074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8027030:	9c08      	ldr	r4, [sp, #32]
 8027032:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027036:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027038:	fb04 fb0b 	mul.w	fp, r4, fp
 802703c:	9c08      	ldr	r4, [sp, #32]
 802703e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027042:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027044:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027048:	fb04 fa0a 	mul.w	sl, r4, sl
 802704c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027050:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027054:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027058:	44de      	add	lr, fp
 802705a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802705e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027062:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027066:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802706a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802706e:	ea4e 040a 	orr.w	r4, lr, sl
 8027072:	9408      	str	r4, [sp, #32]
 8027074:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027076:	2cff      	cmp	r4, #255	; 0xff
 8027078:	d021      	beq.n	80270be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802707a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802707c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027080:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027082:	fb04 fb0b 	mul.w	fp, r4, fp
 8027086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027088:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802708c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802708e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027092:	fb04 fa0a 	mul.w	sl, r4, sl
 8027096:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802709a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802709e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80270a2:	44de      	add	lr, fp
 80270a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80270b4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80270b8:	ea4e 040a 	orr.w	r4, lr, sl
 80270bc:	940c      	str	r4, [sp, #48]	; 0x30
 80270be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80270c4:	9c08      	ldr	r4, [sp, #32]
 80270c6:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80270ca:	fb08 fc0c 	mul.w	ip, r8, ip
 80270ce:	fb02 cc0e 	mla	ip, r2, lr, ip
 80270d2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80270d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80270d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80270dc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80270e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80270e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80270e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80270ea:	fb08 f80e 	mul.w	r8, r8, lr
 80270ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80270f2:	fb02 8303 	mla	r3, r2, r3, r8
 80270f6:	9a08      	ldr	r2, [sp, #32]
 80270f8:	f8b7 8000 	ldrh.w	r8, [r7]
 80270fc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027102:	fb00 330a 	mla	r3, r0, sl, r3
 8027106:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802710a:	fb09 3900 	mla	r9, r9, r0, r3
 802710e:	43c9      	mvns	r1, r1
 8027110:	ea4f 2228 	mov.w	r2, r8, asr #8
 8027114:	fa5f fe81 	uxtb.w	lr, r1
 8027118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802711c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027120:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027124:	fb02 f20e 	mul.w	r2, r2, lr
 8027128:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802712c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027130:	ea4c 0c09 	orr.w	ip, ip, r9
 8027134:	1c53      	adds	r3, r2, #1
 8027136:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802713a:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802713e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8027142:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027146:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802714a:	4a63      	ldr	r2, [pc, #396]	; (80272d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802714c:	fb00 f00e 	mul.w	r0, r0, lr
 8027150:	b2db      	uxtb	r3, r3
 8027152:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8027156:	1c43      	adds	r3, r0, #1
 8027158:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802715c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027160:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8027164:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027168:	b2c9      	uxtb	r1, r1
 802716a:	00db      	lsls	r3, r3, #3
 802716c:	fb01 f10e 	mul.w	r1, r1, lr
 8027170:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027174:	4313      	orrs	r3, r2
 8027176:	1c4a      	adds	r2, r1, #1
 8027178:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802717c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027180:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8027184:	ea4c 0c03 	orr.w	ip, ip, r3
 8027188:	f8a7 c000 	strh.w	ip, [r7]
 802718c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802718e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027190:	441a      	add	r2, r3
 8027192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027194:	9225      	str	r2, [sp, #148]	; 0x94
 8027196:	441d      	add	r5, r3
 8027198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802719a:	3b01      	subs	r3, #1
 802719c:	3702      	adds	r7, #2
 802719e:	9317      	str	r3, [sp, #92]	; 0x5c
 80271a0:	e699      	b.n	8026ed6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80271a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80271a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80271a6:	441c      	add	r4, r3
 80271a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271aa:	9425      	str	r4, [sp, #148]	; 0x94
 80271ac:	441d      	add	r5, r3
 80271ae:	9b07      	ldr	r3, [sp, #28]
 80271b0:	3b01      	subs	r3, #1
 80271b2:	9307      	str	r3, [sp, #28]
 80271b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271b6:	3302      	adds	r3, #2
 80271b8:	930a      	str	r3, [sp, #40]	; 0x28
 80271ba:	e66b      	b.n	8026e94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80271bc:	d024      	beq.n	8027208 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80271be:	9b07      	ldr	r3, [sp, #28]
 80271c0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80271c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80271c4:	3b01      	subs	r3, #1
 80271c6:	fb00 4003 	mla	r0, r0, r3, r4
 80271ca:	1400      	asrs	r0, r0, #16
 80271cc:	f53f ae80 	bmi.w	8026ed0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271d0:	3901      	subs	r1, #1
 80271d2:	4288      	cmp	r0, r1
 80271d4:	f6bf ae7c 	bge.w	8026ed0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271d8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80271da:	fb01 5303 	mla	r3, r1, r3, r5
 80271de:	141b      	asrs	r3, r3, #16
 80271e0:	f53f ae76 	bmi.w	8026ed0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271e4:	3a01      	subs	r2, #1
 80271e6:	4293      	cmp	r3, r2
 80271e8:	f6bf ae72 	bge.w	8026ed0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80271ec:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80271f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80271f4:	f1bb 0f00 	cmp.w	fp, #0
 80271f8:	dc70      	bgt.n	80272dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80271fa:	9b07      	ldr	r3, [sp, #28]
 80271fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027202:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027206:	930a      	str	r3, [sp, #40]	; 0x28
 8027208:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802720a:	2b00      	cmp	r3, #0
 802720c:	f340 81ae 	ble.w	802756c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8027210:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027218:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802721c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802721e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027222:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027226:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802722a:	eef0 6a62 	vmov.f32	s13, s5
 802722e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027232:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027236:	ee77 2a62 	vsub.f32	s5, s14, s5
 802723a:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802723e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027242:	eef0 6a43 	vmov.f32	s13, s6
 8027246:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802724a:	ee12 2a90 	vmov	r2, s5
 802724e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027252:	fb92 f3f3 	sdiv	r3, r2, r3
 8027256:	ee13 2a10 	vmov	r2, s6
 802725a:	9327      	str	r3, [sp, #156]	; 0x9c
 802725c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802725e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027262:	9328      	str	r3, [sp, #160]	; 0xa0
 8027264:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027266:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027268:	3b01      	subs	r3, #1
 802726a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802726e:	9316      	str	r3, [sp, #88]	; 0x58
 8027270:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027272:	bf08      	it	eq
 8027274:	4613      	moveq	r3, r2
 8027276:	ee16 5a90 	vmov	r5, s13
 802727a:	9307      	str	r3, [sp, #28]
 802727c:	eeb0 3a67 	vmov.f32	s6, s15
 8027280:	eef0 2a47 	vmov.f32	s5, s14
 8027284:	e5f8      	b.n	8026e78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8027286:	2800      	cmp	r0, #0
 8027288:	f43f ae6b 	beq.w	8026f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 802728c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8027290:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027294:	9108      	str	r1, [sp, #32]
 8027296:	0e09      	lsrs	r1, r1, #24
 8027298:	9110      	str	r1, [sp, #64]	; 0x40
 802729a:	e662      	b.n	8026f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 802729c:	f113 0801 	adds.w	r8, r3, #1
 80272a0:	f53f af74 	bmi.w	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80272a4:	4541      	cmp	r1, r8
 80272a6:	f6ff af71 	blt.w	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80272aa:	f11c 0801 	adds.w	r8, ip, #1
 80272ae:	f53f af6d 	bmi.w	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80272b2:	45c6      	cmp	lr, r8
 80272b4:	f6ff af6a 	blt.w	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80272b8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80272bc:	b209      	sxth	r1, r1
 80272be:	fa0f f38e 	sxth.w	r3, lr
 80272c2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80272c6:	9301      	str	r3, [sp, #4]
 80272c8:	9100      	str	r1, [sp, #0]
 80272ca:	4633      	mov	r3, r6
 80272cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80272ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80272d0:	4639      	mov	r1, r7
 80272d2:	f7ff fc7a 	bl	8026bca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80272d6:	e759      	b.n	802718c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80272d8:	fffff800 	.word	0xfffff800
 80272dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80272de:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80272e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80272e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272ea:	1427      	asrs	r7, r4, #16
 80272ec:	142b      	asrs	r3, r5, #16
 80272ee:	fb01 7303 	mla	r3, r1, r3, r7
 80272f2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80272f4:	18e7      	adds	r7, r4, r3
 80272f6:	5ce3      	ldrb	r3, [r4, r3]
 80272f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80272fc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027300:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027304:	2a00      	cmp	r2, #0
 8027306:	f000 8127 	beq.w	8027558 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802730a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802730e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8027312:	940d      	str	r4, [sp, #52]	; 0x34
 8027314:	0e24      	lsrs	r4, r4, #24
 8027316:	9414      	str	r4, [sp, #80]	; 0x50
 8027318:	b170      	cbz	r0, 8027338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802731a:	eb07 0e01 	add.w	lr, r7, r1
 802731e:	5c79      	ldrb	r1, [r7, r1]
 8027320:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027324:	9109      	str	r1, [sp, #36]	; 0x24
 8027326:	0e09      	lsrs	r1, r1, #24
 8027328:	9111      	str	r1, [sp, #68]	; 0x44
 802732a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802732e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027332:	910e      	str	r1, [sp, #56]	; 0x38
 8027334:	0e09      	lsrs	r1, r1, #24
 8027336:	9115      	str	r1, [sp, #84]	; 0x54
 8027338:	b292      	uxth	r2, r2
 802733a:	b280      	uxth	r0, r0
 802733c:	fb02 f800 	mul.w	r8, r2, r0
 8027340:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027344:	0112      	lsls	r2, r2, #4
 8027346:	eba2 0e08 	sub.w	lr, r2, r8
 802734a:	b280      	uxth	r0, r0
 802734c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027352:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027354:	fa1f fe8e 	uxth.w	lr, lr
 8027358:	1a09      	subs	r1, r1, r0
 802735a:	b289      	uxth	r1, r1
 802735c:	fb0e f202 	mul.w	r2, lr, r2
 8027360:	fb01 220c 	mla	r2, r1, ip, r2
 8027364:	fb00 2204 	mla	r2, r0, r4, r2
 8027368:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802736a:	fb08 2204 	mla	r2, r8, r4, r2
 802736e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027372:	2a00      	cmp	r2, #0
 8027374:	f000 80e5 	beq.w	8027542 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027378:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802737c:	d019      	beq.n	80273b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802737e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027382:	fb0c fa0a 	mul.w	sl, ip, sl
 8027386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802738a:	fb0c fc03 	mul.w	ip, ip, r3
 802738e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027392:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027396:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802739a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802739e:	4453      	add	r3, sl
 80273a0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80273a4:	0a1b      	lsrs	r3, r3, #8
 80273a6:	0a3f      	lsrs	r7, r7, #8
 80273a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80273ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80273b0:	433b      	orrs	r3, r7
 80273b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80273b4:	2cff      	cmp	r4, #255	; 0xff
 80273b6:	d020      	beq.n	80273fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80273b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80273ba:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80273be:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80273c0:	4367      	muls	r7, r4
 80273c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80273c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80273c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80273ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80273ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80273d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80273d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273da:	44bc      	add	ip, r7
 80273dc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80273e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80273f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80273f4:	ea4c 040a 	orr.w	r4, ip, sl
 80273f8:	940d      	str	r4, [sp, #52]	; 0x34
 80273fa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80273fc:	2cff      	cmp	r4, #255	; 0xff
 80273fe:	d020      	beq.n	8027442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8027400:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027402:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027406:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027408:	4367      	muls	r7, r4
 802740a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802740c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027410:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027412:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027416:	fb04 fa0a 	mul.w	sl, r4, sl
 802741a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802741e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027422:	44bc      	add	ip, r7
 8027424:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027428:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802742c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027430:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027434:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027438:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802743c:	ea4c 040a 	orr.w	r4, ip, sl
 8027440:	9409      	str	r4, [sp, #36]	; 0x24
 8027442:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027444:	2cff      	cmp	r4, #255	; 0xff
 8027446:	d020      	beq.n	802748a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8027448:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802744a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802744e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027450:	4367      	muls	r7, r4
 8027452:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027454:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027458:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802745a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802745e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027462:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027466:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802746a:	44bc      	add	ip, r7
 802746c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027470:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027474:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027478:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802747c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027480:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027484:	ea4c 040a 	orr.w	r4, ip, sl
 8027488:	940e      	str	r4, [sp, #56]	; 0x38
 802748a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802748c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027490:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027492:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027496:	fb0e f707 	mul.w	r7, lr, r7
 802749a:	fb01 770c 	mla	r7, r1, ip, r7
 802749e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80274a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80274a4:	fb00 770c 	mla	r7, r0, ip, r7
 80274a8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80274ac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80274ae:	fb08 770c 	mla	r7, r8, ip, r7
 80274b2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80274b6:	fb0e fe0c 	mul.w	lr, lr, ip
 80274ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80274be:	fb01 e303 	mla	r3, r1, r3, lr
 80274c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80274c4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80274c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80274ca:	fb00 330a 	mla	r3, r0, sl, r3
 80274ce:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80274d2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80274d6:	f8b9 3000 	ldrh.w	r3, [r9]
 80274da:	43d2      	mvns	r2, r2
 80274dc:	1218      	asrs	r0, r3, #8
 80274de:	b2d2      	uxtb	r2, r2
 80274e0:	10d9      	asrs	r1, r3, #3
 80274e2:	0a3f      	lsrs	r7, r7, #8
 80274e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274e8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80274ec:	00db      	lsls	r3, r3, #3
 80274ee:	4350      	muls	r0, r2
 80274f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80274f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80274f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80274fc:	b2db      	uxtb	r3, r3
 80274fe:	ea47 070c 	orr.w	r7, r7, ip
 8027502:	4351      	muls	r1, r2
 8027504:	4353      	muls	r3, r2
 8027506:	1c42      	adds	r2, r0, #1
 8027508:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802750c:	0c3a      	lsrs	r2, r7, #16
 802750e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027512:	4a18      	ldr	r2, [pc, #96]	; (8027574 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8027514:	b2c0      	uxtb	r0, r0
 8027516:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802751a:	1c4a      	adds	r2, r1, #1
 802751c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027520:	0a3a      	lsrs	r2, r7, #8
 8027522:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027526:	00c9      	lsls	r1, r1, #3
 8027528:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802752c:	4301      	orrs	r1, r0
 802752e:	1c58      	adds	r0, r3, #1
 8027530:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027534:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027538:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802753c:	4308      	orrs	r0, r1
 802753e:	f8a9 0000 	strh.w	r0, [r9]
 8027542:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027544:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027546:	441a      	add	r2, r3
 8027548:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802754a:	9225      	str	r2, [sp, #148]	; 0x94
 802754c:	f109 0902 	add.w	r9, r9, #2
 8027550:	441d      	add	r5, r3
 8027552:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027556:	e64d      	b.n	80271f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8027558:	2800      	cmp	r0, #0
 802755a:	f43f aeed 	beq.w	8027338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802755e:	5c79      	ldrb	r1, [r7, r1]
 8027560:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027564:	9109      	str	r1, [sp, #36]	; 0x24
 8027566:	0e09      	lsrs	r1, r1, #24
 8027568:	9111      	str	r1, [sp, #68]	; 0x44
 802756a:	e6e5      	b.n	8027338 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802756c:	b01b      	add	sp, #108	; 0x6c
 802756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027572:	bf00      	nop
 8027574:	fffff800 	.word	0xfffff800

08027578 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802757c:	b085      	sub	sp, #20
 802757e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8027582:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027586:	9103      	str	r1, [sp, #12]
 8027588:	fb00 7406 	mla	r4, r0, r6, r7
 802758c:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8027590:	2800      	cmp	r0, #0
 8027592:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8027596:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802759a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802759e:	9501      	str	r5, [sp, #4]
 80275a0:	eb03 0904 	add.w	r9, r3, r4
 80275a4:	f2c0 8150 	blt.w	8027848 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80275a8:	4583      	cmp	fp, r0
 80275aa:	f340 814d 	ble.w	8027848 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80275ae:	2f00      	cmp	r7, #0
 80275b0:	f2c0 8146 	blt.w	8027840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80275b4:	42be      	cmp	r6, r7
 80275b6:	f340 8143 	ble.w	8027840 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80275ba:	f813 c004 	ldrb.w	ip, [r3, r4]
 80275be:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80275c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80275c6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80275ca:	4355      	muls	r5, r2
 80275cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275d0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80275d4:	fb0c f203 	mul.w	r2, ip, r3
 80275d8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80275dc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80275e0:	441d      	add	r5, r3
 80275e2:	f102 0320 	add.w	r3, r2, #32
 80275e6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275ea:	0a1b      	lsrs	r3, r3, #8
 80275ec:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80275f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80275f4:	431c      	orrs	r4, r3
 80275f6:	1c7b      	adds	r3, r7, #1
 80275f8:	f100 812b 	bmi.w	8027852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80275fc:	429e      	cmp	r6, r3
 80275fe:	f340 8128 	ble.w	8027852 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8027602:	2900      	cmp	r1, #0
 8027604:	f000 8128 	beq.w	8027858 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8027608:	9a01      	ldr	r2, [sp, #4]
 802760a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802760e:	8855      	ldrh	r5, [r2, #2]
 8027610:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027614:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8027618:	fb08 f802 	mul.w	r8, r8, r2
 802761c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027620:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027624:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8027628:	435d      	muls	r5, r3
 802762a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802762e:	44d0      	add	r8, sl
 8027630:	f105 0a20 	add.w	sl, r5, #32
 8027634:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027638:	0a2d      	lsrs	r5, r5, #8
 802763a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802763e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027642:	432a      	orrs	r2, r5
 8027644:	3001      	adds	r0, #1
 8027646:	f100 810d 	bmi.w	8027864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802764a:	4583      	cmp	fp, r0
 802764c:	f340 810a 	ble.w	8027864 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027650:	f1be 0f00 	cmp.w	lr, #0
 8027654:	f000 810b 	beq.w	802786e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8027658:	2f00      	cmp	r7, #0
 802765a:	f2c0 8100 	blt.w	802785e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802765e:	42be      	cmp	r6, r7
 8027660:	f340 80fd 	ble.w	802785e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8027664:	9801      	ldr	r0, [sp, #4]
 8027666:	f819 5006 	ldrb.w	r5, [r9, r6]
 802766a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802766e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027672:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8027676:	fb0a fa00 	mul.w	sl, sl, r0
 802767a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802767e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027682:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8027686:	fb05 f808 	mul.w	r8, r5, r8
 802768a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802768e:	4482      	add	sl, r0
 8027690:	f108 0020 	add.w	r0, r8, #32
 8027694:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027698:	0a00      	lsrs	r0, r0, #8
 802769a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802769e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80276a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80276a6:	3701      	adds	r7, #1
 80276a8:	f100 80e6 	bmi.w	8027878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80276ac:	42be      	cmp	r6, r7
 80276ae:	f340 80e3 	ble.w	8027878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80276b2:	2900      	cmp	r1, #0
 80276b4:	f000 80e3 	beq.w	802787e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80276b8:	3601      	adds	r6, #1
 80276ba:	9801      	ldr	r0, [sp, #4]
 80276bc:	f819 7006 	ldrb.w	r7, [r9, r6]
 80276c0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80276c4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80276c8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80276cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80276d0:	fb09 f906 	mul.w	r9, r9, r6
 80276d4:	fb07 f800 	mul.w	r8, r7, r0
 80276d8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80276dc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80276e0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80276e4:	44d1      	add	r9, sl
 80276e6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80276ea:	f108 0020 	add.w	r0, r8, #32
 80276ee:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80276f2:	0a00      	lsrs	r0, r0, #8
 80276f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80276f8:	4330      	orrs	r0, r6
 80276fa:	b28e      	uxth	r6, r1
 80276fc:	fa1f f98e 	uxth.w	r9, lr
 8027700:	fb06 f809 	mul.w	r8, r6, r9
 8027704:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027708:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802770c:	0136      	lsls	r6, r6, #4
 802770e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027712:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8027716:	9601      	str	r6, [sp, #4]
 8027718:	ea4a 0404 	orr.w	r4, sl, r4
 802771c:	fa1f f689 	uxth.w	r6, r9
 8027720:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027724:	fb11 f90e 	smulbb	r9, r1, lr
 8027728:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802772c:	9602      	str	r6, [sp, #8]
 802772e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027732:	4626      	mov	r6, r4
 8027734:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027738:	f1ce 0410 	rsb	r4, lr, #16
 802773c:	1a64      	subs	r4, r4, r1
 802773e:	ea4a 0202 	orr.w	r2, sl, r2
 8027742:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027746:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802774a:	434a      	muls	r2, r1
 802774c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027750:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027754:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027758:	fb04 2406 	mla	r4, r4, r6, r2
 802775c:	ea4a 0000 	orr.w	r0, sl, r0
 8027760:	fb09 4200 	mla	r2, r9, r0, r4
 8027764:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8027768:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802776c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027770:	ea44 0b0b 	orr.w	fp, r4, fp
 8027774:	9c01      	ldr	r4, [sp, #4]
 8027776:	9e02      	ldr	r6, [sp, #8]
 8027778:	9903      	ldr	r1, [sp, #12]
 802777a:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 802777e:	1ba4      	subs	r4, r4, r6
 8027780:	9e01      	ldr	r6, [sp, #4]
 8027782:	8808      	ldrh	r0, [r1, #0]
 8027784:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8027788:	eba6 0608 	sub.w	r6, r6, r8
 802778c:	b2b6      	uxth	r6, r6
 802778e:	b2a4      	uxth	r4, r4
 8027790:	4373      	muls	r3, r6
 8027792:	fb0c 3304 	mla	r3, ip, r4, r3
 8027796:	9c02      	ldr	r4, [sp, #8]
 8027798:	fb04 3505 	mla	r5, r4, r5, r3
 802779c:	fb08 5707 	mla	r7, r8, r7, r5
 80277a0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80277a4:	b289      	uxth	r1, r1
 80277a6:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80277aa:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80277ae:	434f      	muls	r7, r1
 80277b0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80277b4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80277b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80277bc:	1c7b      	adds	r3, r7, #1
 80277be:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80277c2:	ea42 0e0e 	orr.w	lr, r2, lr
 80277c6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80277ca:	fa1f f28e 	uxth.w	r2, lr
 80277ce:	1203      	asrs	r3, r0, #8
 80277d0:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80277d4:	b2ff      	uxtb	r7, r7
 80277d6:	1215      	asrs	r5, r2, #8
 80277d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80277dc:	fb13 f307 	smulbb	r3, r3, r7
 80277e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80277e4:	fb05 3501 	mla	r5, r5, r1, r3
 80277e8:	10c3      	asrs	r3, r0, #3
 80277ea:	10d4      	asrs	r4, r2, #3
 80277ec:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80277f0:	fb13 f307 	smulbb	r3, r3, r7
 80277f4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80277f8:	fb04 3401 	mla	r4, r4, r1, r3
 80277fc:	00c3      	lsls	r3, r0, #3
 80277fe:	00d2      	lsls	r2, r2, #3
 8027800:	b2db      	uxtb	r3, r3
 8027802:	fb13 f307 	smulbb	r3, r3, r7
 8027806:	b2d2      	uxtb	r2, r2
 8027808:	fb02 3101 	mla	r1, r2, r1, r3
 802780c:	b2ad      	uxth	r5, r5
 802780e:	b289      	uxth	r1, r1
 8027810:	b2a4      	uxth	r4, r4
 8027812:	1c6b      	adds	r3, r5, #1
 8027814:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027818:	1c62      	adds	r2, r4, #1
 802781a:	1c4b      	adds	r3, r1, #1
 802781c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027820:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027824:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027828:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802782c:	0964      	lsrs	r4, r4, #5
 802782e:	432b      	orrs	r3, r5
 8027830:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8027834:	9a03      	ldr	r2, [sp, #12]
 8027836:	4323      	orrs	r3, r4
 8027838:	8013      	strh	r3, [r2, #0]
 802783a:	b005      	add	sp, #20
 802783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027840:	f04f 0c00 	mov.w	ip, #0
 8027844:	4664      	mov	r4, ip
 8027846:	e6d6      	b.n	80275f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8027848:	2300      	movs	r3, #0
 802784a:	469c      	mov	ip, r3
 802784c:	461a      	mov	r2, r3
 802784e:	461c      	mov	r4, r3
 8027850:	e6f8      	b.n	8027644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027852:	2300      	movs	r3, #0
 8027854:	461a      	mov	r2, r3
 8027856:	e6f5      	b.n	8027644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027858:	460b      	mov	r3, r1
 802785a:	460a      	mov	r2, r1
 802785c:	e6f2      	b.n	8027644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802785e:	2500      	movs	r5, #0
 8027860:	46ab      	mov	fp, r5
 8027862:	e720      	b.n	80276a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8027864:	2700      	movs	r7, #0
 8027866:	463d      	mov	r5, r7
 8027868:	4638      	mov	r0, r7
 802786a:	46bb      	mov	fp, r7
 802786c:	e745      	b.n	80276fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802786e:	4677      	mov	r7, lr
 8027870:	4675      	mov	r5, lr
 8027872:	4670      	mov	r0, lr
 8027874:	46f3      	mov	fp, lr
 8027876:	e740      	b.n	80276fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027878:	2700      	movs	r7, #0
 802787a:	4638      	mov	r0, r7
 802787c:	e73d      	b.n	80276fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802787e:	460f      	mov	r7, r1
 8027880:	4608      	mov	r0, r1
 8027882:	e73a      	b.n	80276fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08027884 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027888:	b097      	sub	sp, #92	; 0x5c
 802788a:	9214      	str	r2, [sp, #80]	; 0x50
 802788c:	9308      	str	r3, [sp, #32]
 802788e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027890:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027894:	9312      	str	r3, [sp, #72]	; 0x48
 8027896:	9111      	str	r1, [sp, #68]	; 0x44
 8027898:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802789c:	9015      	str	r0, [sp, #84]	; 0x54
 802789e:	6850      	ldr	r0, [r2, #4]
 80278a0:	6812      	ldr	r2, [r2, #0]
 80278a2:	fb00 1303 	mla	r3, r0, r3, r1
 80278a6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80278aa:	9309      	str	r3, [sp, #36]	; 0x24
 80278ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80278ae:	681b      	ldr	r3, [r3, #0]
 80278b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80278b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80278b4:	685b      	ldr	r3, [r3, #4]
 80278b6:	930c      	str	r3, [sp, #48]	; 0x30
 80278b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80278bc:	930a      	str	r3, [sp, #40]	; 0x28
 80278be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	dc03      	bgt.n	80278cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80278c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	f340 83cb 	ble.w	8028062 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80278cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80278ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80278d6:	1e48      	subs	r0, r1, #1
 80278d8:	1e55      	subs	r5, r2, #1
 80278da:	9b08      	ldr	r3, [sp, #32]
 80278dc:	2b00      	cmp	r3, #0
 80278de:	f340 81a3 	ble.w	8027c28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80278e2:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80278e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80278e6:	1436      	asrs	r6, r6, #16
 80278e8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80278ec:	d406      	bmi.n	80278fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278ee:	4286      	cmp	r6, r0
 80278f0:	da04      	bge.n	80278fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278f2:	2b00      	cmp	r3, #0
 80278f4:	db02      	blt.n	80278fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278f6:	42ab      	cmp	r3, r5
 80278f8:	f2c0 8197 	blt.w	8027c2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80278fc:	3601      	adds	r6, #1
 80278fe:	f100 8184 	bmi.w	8027c0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027902:	42b1      	cmp	r1, r6
 8027904:	f2c0 8181 	blt.w	8027c0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027908:	3301      	adds	r3, #1
 802790a:	f100 817e 	bmi.w	8027c0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802790e:	429a      	cmp	r2, r3
 8027910:	f2c0 817b 	blt.w	8027c0a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027914:	9b08      	ldr	r3, [sp, #32]
 8027916:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027918:	9313      	str	r3, [sp, #76]	; 0x4c
 802791a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802791e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027920:	2b00      	cmp	r3, #0
 8027922:	f340 81a4 	ble.w	8027c6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8027926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027928:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802792a:	1418      	asrs	r0, r3, #16
 802792c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802792e:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027932:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027934:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027938:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802793a:	142d      	asrs	r5, r5, #16
 802793c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027940:	f100 81f8 	bmi.w	8027d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027944:	f102 3eff 	add.w	lr, r2, #4294967295
 8027948:	4575      	cmp	r5, lr
 802794a:	f280 81f3 	bge.w	8027d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802794e:	2800      	cmp	r0, #0
 8027950:	f2c0 81f0 	blt.w	8027d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027954:	f103 3eff 	add.w	lr, r3, #4294967295
 8027958:	4570      	cmp	r0, lr
 802795a:	f280 81eb 	bge.w	8027d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027960:	b212      	sxth	r2, r2
 8027962:	fb00 5002 	mla	r0, r0, r2, r5
 8027966:	fa1f fe81 	uxth.w	lr, r1
 802796a:	eb03 0a00 	add.w	sl, r3, r0
 802796e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027972:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027976:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802797a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802797e:	b29b      	uxth	r3, r3
 8027980:	f1bc 0f00 	cmp.w	ip, #0
 8027984:	f000 81b9 	beq.w	8027cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027988:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802798c:	940d      	str	r4, [sp, #52]	; 0x34
 802798e:	eb0a 0b02 	add.w	fp, sl, r2
 8027992:	fa1f fa8c 	uxth.w	sl, ip
 8027996:	fb0a fe0e 	mul.w	lr, sl, lr
 802799a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802799e:	fa1f fa8a 	uxth.w	sl, sl
 80279a2:	eba5 050e 	sub.w	r5, r5, lr
 80279a6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80279aa:	940e      	str	r4, [sp, #56]	; 0x38
 80279ac:	eba3 030a 	sub.w	r3, r3, sl
 80279b0:	b2ad      	uxth	r5, r5
 80279b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80279b4:	b29b      	uxth	r3, r3
 80279b6:	fb08 f505 	mul.w	r5, r8, r5
 80279ba:	fb09 5303 	mla	r3, r9, r3, r5
 80279be:	fb0a 3304 	mla	r3, sl, r4, r3
 80279c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80279c4:	fb0e 3304 	mla	r3, lr, r4, r3
 80279c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80279cc:	2b00      	cmp	r3, #0
 80279ce:	f000 810f 	beq.w	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80279d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80279d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80279d8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80279dc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80279e0:	f000 8190 	beq.w	8027d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80279e4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80279e8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80279ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80279f0:	fb09 f000 	mul.w	r0, r9, r0
 80279f4:	fb0a fe0e 	mul.w	lr, sl, lr
 80279f8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80279fc:	f100 0b20 	add.w	fp, r0, #32
 8027a00:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027a04:	44ce      	add	lr, r9
 8027a06:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027a0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a0e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027a12:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027a16:	ea4e 0909 	orr.w	r9, lr, r9
 8027a1a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027a1e:	8868      	ldrh	r0, [r5, #2]
 8027a20:	d019      	beq.n	8027a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8027a22:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027a26:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027a2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a2e:	fb08 f800 	mul.w	r8, r8, r0
 8027a32:	fb0a fe0e 	mul.w	lr, sl, lr
 8027a36:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027a3a:	f108 0b20 	add.w	fp, r8, #32
 8027a3e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027a42:	4486      	add	lr, r0
 8027a44:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027a48:	0a00      	lsrs	r0, r0, #8
 8027a4a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027a4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027a52:	ea4e 0000 	orr.w	r0, lr, r0
 8027a56:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027a5a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027a5e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027a62:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027a66:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027a6e:	ea4e 0909 	orr.w	r9, lr, r9
 8027a72:	ea4a 0000 	orr.w	r0, sl, r0
 8027a76:	f1bc 0f00 	cmp.w	ip, #0
 8027a7a:	f000 8145 	beq.w	8027d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8027a7e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8027a82:	3a01      	subs	r2, #1
 8027a84:	0052      	lsls	r2, r2, #1
 8027a86:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a88:	3202      	adds	r2, #2
 8027a8a:	2cff      	cmp	r4, #255	; 0xff
 8027a8c:	eb05 0e02 	add.w	lr, r5, r2
 8027a90:	5aaa      	ldrh	r2, [r5, r2]
 8027a92:	d018      	beq.n	8027ac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027a94:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027a98:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a9c:	fb04 fa02 	mul.w	sl, r4, r2
 8027aa0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027aa4:	fb08 f805 	mul.w	r8, r8, r5
 8027aa8:	f10a 0520 	add.w	r5, sl, #32
 8027aac:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027ab0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027ab4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027ab8:	4442      	add	r2, r8
 8027aba:	0a2d      	lsrs	r5, r5, #8
 8027abc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027ac0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027ac4:	432a      	orrs	r2, r5
 8027ac6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027ac8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027acc:	2cff      	cmp	r4, #255	; 0xff
 8027ace:	d01a      	beq.n	8027b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8027ad0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8027ad4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027ad8:	fb04 fa05 	mul.w	sl, r4, r5
 8027adc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ae0:	fb08 f80e 	mul.w	r8, r8, lr
 8027ae4:	f10a 0e20 	add.w	lr, sl, #32
 8027ae8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027aec:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027af0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027af4:	4445      	add	r5, r8
 8027af6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027afa:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027afe:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8027b02:	ea45 050e 	orr.w	r5, r5, lr
 8027b06:	fb1c fe01 	smulbb	lr, ip, r1
 8027b0a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027b0e:	f1cc 0810 	rsb	r8, ip, #16
 8027b12:	eba8 0801 	sub.w	r8, r8, r1
 8027b16:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027b1a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027b1e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027b22:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027b26:	4341      	muls	r1, r0
 8027b28:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027b2c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027b30:	ea4a 0202 	orr.w	r2, sl, r2
 8027b34:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027b38:	fb09 1108 	mla	r1, r9, r8, r1
 8027b3c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027b40:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027b44:	fb0c 1102 	mla	r1, ip, r2, r1
 8027b48:	ea4b 0505 	orr.w	r5, fp, r5
 8027b4c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027b50:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027b54:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027b58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b5c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027b60:	ea42 0e0e 	orr.w	lr, r2, lr
 8027b64:	fa1f f28e 	uxth.w	r2, lr
 8027b68:	2bff      	cmp	r3, #255	; 0xff
 8027b6a:	d103      	bne.n	8027b74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8027b6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027b6e:	29ff      	cmp	r1, #255	; 0xff
 8027b70:	f000 80de 	beq.w	8027d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027b74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027b76:	8838      	ldrh	r0, [r7, #0]
 8027b78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027b7a:	434b      	muls	r3, r1
 8027b7c:	f103 0c01 	add.w	ip, r3, #1
 8027b80:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027b84:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027b88:	fa5f fc83 	uxtb.w	ip, r3
 8027b8c:	1203      	asrs	r3, r0, #8
 8027b8e:	1215      	asrs	r5, r2, #8
 8027b90:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027b94:	fb13 f30c 	smulbb	r3, r3, ip
 8027b98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027b9c:	fb05 3501 	mla	r5, r5, r1, r3
 8027ba0:	10c3      	asrs	r3, r0, #3
 8027ba2:	10d1      	asrs	r1, r2, #3
 8027ba4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027ba8:	fb13 f30c 	smulbb	r3, r3, ip
 8027bac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027bb0:	fb01 3104 	mla	r1, r1, r4, r3
 8027bb4:	00c3      	lsls	r3, r0, #3
 8027bb6:	00d2      	lsls	r2, r2, #3
 8027bb8:	b2db      	uxtb	r3, r3
 8027bba:	b2d2      	uxtb	r2, r2
 8027bbc:	fb13 f30c 	smulbb	r3, r3, ip
 8027bc0:	b2ad      	uxth	r5, r5
 8027bc2:	fb02 3304 	mla	r3, r2, r4, r3
 8027bc6:	b29a      	uxth	r2, r3
 8027bc8:	1c6b      	adds	r3, r5, #1
 8027bca:	b289      	uxth	r1, r1
 8027bcc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027bd0:	1c53      	adds	r3, r2, #1
 8027bd2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027bd6:	1c4a      	adds	r2, r1, #1
 8027bd8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027bdc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027be0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027be4:	0949      	lsrs	r1, r1, #5
 8027be6:	432b      	orrs	r3, r5
 8027be8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027bec:	430b      	orrs	r3, r1
 8027bee:	803b      	strh	r3, [r7, #0]
 8027bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027bf2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027bf4:	4413      	add	r3, r2
 8027bf6:	9321      	str	r3, [sp, #132]	; 0x84
 8027bf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8027bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027bfc:	441a      	add	r2, r3
 8027bfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027c00:	9222      	str	r2, [sp, #136]	; 0x88
 8027c02:	3b01      	subs	r3, #1
 8027c04:	3702      	adds	r7, #2
 8027c06:	9313      	str	r3, [sp, #76]	; 0x4c
 8027c08:	e689      	b.n	802791e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027c0c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8027c0e:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8027c10:	4433      	add	r3, r6
 8027c12:	9321      	str	r3, [sp, #132]	; 0x84
 8027c14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027c16:	441c      	add	r4, r3
 8027c18:	9b08      	ldr	r3, [sp, #32]
 8027c1a:	9422      	str	r4, [sp, #136]	; 0x88
 8027c1c:	3b01      	subs	r3, #1
 8027c1e:	9308      	str	r3, [sp, #32]
 8027c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c22:	3302      	adds	r3, #2
 8027c24:	9309      	str	r3, [sp, #36]	; 0x24
 8027c26:	e658      	b.n	80278da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027c28:	d028      	beq.n	8027c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027c2a:	9b08      	ldr	r3, [sp, #32]
 8027c2c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027c2e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8027c30:	3b01      	subs	r3, #1
 8027c32:	fb00 5003 	mla	r0, r0, r3, r5
 8027c36:	1400      	asrs	r0, r0, #16
 8027c38:	f53f ae6c 	bmi.w	8027914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c3c:	3901      	subs	r1, #1
 8027c3e:	4288      	cmp	r0, r1
 8027c40:	f6bf ae68 	bge.w	8027914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c44:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027c46:	9822      	ldr	r0, [sp, #136]	; 0x88
 8027c48:	fb01 0303 	mla	r3, r1, r3, r0
 8027c4c:	141b      	asrs	r3, r3, #16
 8027c4e:	f53f ae61 	bmi.w	8027914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c52:	3a01      	subs	r2, #1
 8027c54:	4293      	cmp	r3, r2
 8027c56:	f6bf ae5d 	bge.w	8027914 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c5a:	9b08      	ldr	r3, [sp, #32]
 8027c5c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8027c62:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	f300 8082 	bgt.w	8027d72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8027c6e:	9b08      	ldr	r3, [sp, #32]
 8027c70:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c76:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8027c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	f340 81ef 	ble.w	8028062 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027c84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027c88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027c8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027c90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027c92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027c96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027c9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027c9e:	eef0 6a62 	vmov.f32	s13, s5
 8027ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027ca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027caa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027cae:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8027cb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027cb6:	eef0 6a43 	vmov.f32	s13, s6
 8027cba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027cbe:	ee12 2a90 	vmov	r2, s5
 8027cc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cca:	ee13 2a10 	vmov	r2, s6
 8027cce:	9323      	str	r3, [sp, #140]	; 0x8c
 8027cd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cd6:	9324      	str	r3, [sp, #144]	; 0x90
 8027cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027cdc:	3b01      	subs	r3, #1
 8027cde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8027ce4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ce6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8027cea:	bf08      	it	eq
 8027cec:	4613      	moveq	r3, r2
 8027cee:	9308      	str	r3, [sp, #32]
 8027cf0:	eeb0 3a67 	vmov.f32	s6, s15
 8027cf4:	eef0 2a47 	vmov.f32	s5, s14
 8027cf8:	e5e1      	b.n	80278be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027cfa:	fb08 f505 	mul.w	r5, r8, r5
 8027cfe:	fb09 5303 	mla	r3, r9, r3, r5
 8027d02:	e661      	b.n	80279c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027d04:	4681      	mov	r9, r0
 8027d06:	e688      	b.n	8027a1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8027d08:	f1c1 0210 	rsb	r2, r1, #16
 8027d0c:	4341      	muls	r1, r0
 8027d0e:	fb09 1902 	mla	r9, r9, r2, r1
 8027d12:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027d16:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027d1a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027d1e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d22:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027d26:	ea42 0909 	orr.w	r9, r2, r9
 8027d2a:	fa1f f289 	uxth.w	r2, r9
 8027d2e:	e71b      	b.n	8027b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027d30:	803a      	strh	r2, [r7, #0]
 8027d32:	e75d      	b.n	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d34:	f115 0e01 	adds.w	lr, r5, #1
 8027d38:	f53f af5a 	bmi.w	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d3c:	4572      	cmp	r2, lr
 8027d3e:	f6ff af57 	blt.w	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d42:	f110 0e01 	adds.w	lr, r0, #1
 8027d46:	f53f af53 	bmi.w	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d4a:	4573      	cmp	r3, lr
 8027d4c:	f6ff af50 	blt.w	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d50:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027d52:	9502      	str	r5, [sp, #8]
 8027d54:	b21b      	sxth	r3, r3
 8027d56:	b212      	sxth	r2, r2
 8027d58:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027d5c:	9301      	str	r3, [sp, #4]
 8027d5e:	9200      	str	r2, [sp, #0]
 8027d60:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027d64:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027d68:	4639      	mov	r1, r7
 8027d6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027d6c:	f7ff fc04 	bl	8027578 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027d70:	e73e      	b.n	8027bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027d74:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027d7a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027d80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027d86:	141f      	asrs	r7, r3, #16
 8027d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027d8a:	141b      	asrs	r3, r3, #16
 8027d8c:	fb01 3707 	mla	r7, r1, r7, r3
 8027d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027d92:	fa1f fc82 	uxth.w	ip, r2
 8027d96:	eb03 0a07 	add.w	sl, r3, r7
 8027d9a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027d9e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027da2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027da6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027daa:	b29b      	uxth	r3, r3
 8027dac:	2d00      	cmp	r5, #0
 8027dae:	f000 813d 	beq.w	802802c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027db2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027db6:	940f      	str	r4, [sp, #60]	; 0x3c
 8027db8:	eb0a 0b01 	add.w	fp, sl, r1
 8027dbc:	fa1f fa85 	uxth.w	sl, r5
 8027dc0:	fb0a fc0c 	mul.w	ip, sl, ip
 8027dc4:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027dc8:	fa1f fa8a 	uxth.w	sl, sl
 8027dcc:	eba0 000c 	sub.w	r0, r0, ip
 8027dd0:	eba3 030a 	sub.w	r3, r3, sl
 8027dd4:	b280      	uxth	r0, r0
 8027dd6:	fb08 f000 	mul.w	r0, r8, r0
 8027dda:	b29b      	uxth	r3, r3
 8027ddc:	fb09 0303 	mla	r3, r9, r3, r0
 8027de0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027de2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027de6:	9410      	str	r4, [sp, #64]	; 0x40
 8027de8:	fb0a 3300 	mla	r3, sl, r0, r3
 8027dec:	fb0c 3304 	mla	r3, ip, r4, r3
 8027df0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027df4:	2b00      	cmp	r3, #0
 8027df6:	f000 810b 	beq.w	8028010 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8027dfa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8027dfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027dfe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027e02:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027e06:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027e0a:	f000 8114 	beq.w	8028036 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8027e0e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027e12:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027e16:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e1a:	fb09 f707 	mul.w	r7, r9, r7
 8027e1e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027e22:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027e26:	f107 0b20 	add.w	fp, r7, #32
 8027e2a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027e2e:	44cc      	add	ip, r9
 8027e30:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027e34:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027e38:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027e3c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027e40:	ea4c 0909 	orr.w	r9, ip, r9
 8027e44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027e48:	8847      	ldrh	r7, [r0, #2]
 8027e4a:	d019      	beq.n	8027e80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8027e4c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027e50:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027e54:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e58:	fb08 f807 	mul.w	r8, r8, r7
 8027e5c:	fb0a fc0c 	mul.w	ip, sl, ip
 8027e60:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027e64:	f108 0b20 	add.w	fp, r8, #32
 8027e68:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027e6c:	44bc      	add	ip, r7
 8027e6e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027e72:	0a3f      	lsrs	r7, r7, #8
 8027e74:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027e78:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e7c:	ea4c 0707 	orr.w	r7, ip, r7
 8027e80:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027e84:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027e88:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027e8c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027e90:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e94:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027e98:	ea4c 0909 	orr.w	r9, ip, r9
 8027e9c:	ea4a 0707 	orr.w	r7, sl, r7
 8027ea0:	2d00      	cmp	r5, #0
 8027ea2:	f000 80ca 	beq.w	802803a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8027ea6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027eaa:	3901      	subs	r1, #1
 8027eac:	0049      	lsls	r1, r1, #1
 8027eae:	3102      	adds	r1, #2
 8027eb0:	eb00 0c01 	add.w	ip, r0, r1
 8027eb4:	5a41      	ldrh	r1, [r0, r1]
 8027eb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027eb8:	28ff      	cmp	r0, #255	; 0xff
 8027eba:	d019      	beq.n	8027ef0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8027ebc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027ebe:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027ec2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027ec6:	fb04 fa01 	mul.w	sl, r4, r1
 8027eca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027ece:	fb08 f800 	mul.w	r8, r8, r0
 8027ed2:	f10a 0020 	add.w	r0, sl, #32
 8027ed6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027eda:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027ede:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027ee2:	4441      	add	r1, r8
 8027ee4:	0a00      	lsrs	r0, r0, #8
 8027ee6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027eea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027eee:	4301      	orrs	r1, r0
 8027ef0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027ef2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027ef6:	2cff      	cmp	r4, #255	; 0xff
 8027ef8:	d01a      	beq.n	8027f30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8027efa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027efe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027f02:	fb04 fa00 	mul.w	sl, r4, r0
 8027f06:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027f0a:	fb08 f80c 	mul.w	r8, r8, ip
 8027f0e:	f10a 0c20 	add.w	ip, sl, #32
 8027f12:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027f16:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027f1a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027f1e:	4440      	add	r0, r8
 8027f20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027f24:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027f28:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027f2c:	ea40 000c 	orr.w	r0, r0, ip
 8027f30:	fb15 fc02 	smulbb	ip, r5, r2
 8027f34:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027f38:	f1c5 0810 	rsb	r8, r5, #16
 8027f3c:	eba8 0802 	sub.w	r8, r8, r2
 8027f40:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027f44:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027f48:	437a      	muls	r2, r7
 8027f4a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027f4e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027f52:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027f56:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027f5a:	fb09 2208 	mla	r2, r9, r8, r2
 8027f5e:	ea4a 0101 	orr.w	r1, sl, r1
 8027f62:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027f66:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027f6a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027f6e:	fb05 2201 	mla	r2, r5, r1, r2
 8027f72:	ea4b 0000 	orr.w	r0, fp, r0
 8027f76:	fb0c 2200 	mla	r2, ip, r0, r2
 8027f7a:	0d57      	lsrs	r7, r2, #21
 8027f7c:	0952      	lsrs	r2, r2, #5
 8027f7e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027f82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027f86:	433a      	orrs	r2, r7
 8027f88:	2bff      	cmp	r3, #255	; 0xff
 8027f8a:	b292      	uxth	r2, r2
 8027f8c:	d102      	bne.n	8027f94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027f8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027f90:	29ff      	cmp	r1, #255	; 0xff
 8027f92:	d063      	beq.n	802805c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8027f94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027f96:	f8be 1000 	ldrh.w	r1, [lr]
 8027f9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027f9c:	4343      	muls	r3, r0
 8027f9e:	1c58      	adds	r0, r3, #1
 8027fa0:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027fa4:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027fa8:	1208      	asrs	r0, r1, #8
 8027faa:	b2db      	uxtb	r3, r3
 8027fac:	1215      	asrs	r5, r2, #8
 8027fae:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027fb2:	fb10 f003 	smulbb	r0, r0, r3
 8027fb6:	10cf      	asrs	r7, r1, #3
 8027fb8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027fbc:	00c9      	lsls	r1, r1, #3
 8027fbe:	fb05 0504 	mla	r5, r5, r4, r0
 8027fc2:	b2c9      	uxtb	r1, r1
 8027fc4:	10d0      	asrs	r0, r2, #3
 8027fc6:	00d2      	lsls	r2, r2, #3
 8027fc8:	fb11 f103 	smulbb	r1, r1, r3
 8027fcc:	b2d2      	uxtb	r2, r2
 8027fce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8027fd2:	fb02 1204 	mla	r2, r2, r4, r1
 8027fd6:	fb17 f703 	smulbb	r7, r7, r3
 8027fda:	b2ad      	uxth	r5, r5
 8027fdc:	b292      	uxth	r2, r2
 8027fde:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027fe2:	fb00 7004 	mla	r0, r0, r4, r7
 8027fe6:	1c6b      	adds	r3, r5, #1
 8027fe8:	1c57      	adds	r7, r2, #1
 8027fea:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027fee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027ff2:	b280      	uxth	r0, r0
 8027ff4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027ff8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027ffc:	433d      	orrs	r5, r7
 8027ffe:	1c47      	adds	r7, r0, #1
 8028000:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8028004:	097f      	lsrs	r7, r7, #5
 8028006:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802800a:	433d      	orrs	r5, r7
 802800c:	f8ae 5000 	strh.w	r5, [lr]
 8028010:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028012:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8028014:	4413      	add	r3, r2
 8028016:	9321      	str	r3, [sp, #132]	; 0x84
 8028018:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802801a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802801c:	441a      	add	r2, r3
 802801e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028020:	9222      	str	r2, [sp, #136]	; 0x88
 8028022:	3b01      	subs	r3, #1
 8028024:	f10e 0e02 	add.w	lr, lr, #2
 8028028:	9313      	str	r3, [sp, #76]	; 0x4c
 802802a:	e61c      	b.n	8027c66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802802c:	fb08 f000 	mul.w	r0, r8, r0
 8028030:	fb09 0303 	mla	r3, r9, r3, r0
 8028034:	e6dc      	b.n	8027df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8028036:	46b9      	mov	r9, r7
 8028038:	e704      	b.n	8027e44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 802803a:	f1c2 0110 	rsb	r1, r2, #16
 802803e:	437a      	muls	r2, r7
 8028040:	fb09 2901 	mla	r9, r9, r1, r2
 8028044:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028048:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802804c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028050:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028054:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028058:	4302      	orrs	r2, r0
 802805a:	e795      	b.n	8027f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 802805c:	f8ae 2000 	strh.w	r2, [lr]
 8028060:	e7d6      	b.n	8028010 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8028062:	b017      	add	sp, #92	; 0x5c
 8028064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8028068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802806c:	b085      	sub	sp, #20
 802806e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8028072:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8028076:	9103      	str	r1, [sp, #12]
 8028078:	fb00 7406 	mla	r4, r0, r6, r7
 802807c:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8028080:	2800      	cmp	r0, #0
 8028082:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8028086:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802808a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802808e:	9501      	str	r5, [sp, #4]
 8028090:	eb02 0904 	add.w	r9, r2, r4
 8028094:	f2c0 8141 	blt.w	802831a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8028098:	4583      	cmp	fp, r0
 802809a:	f340 813e 	ble.w	802831a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802809e:	2f00      	cmp	r7, #0
 80280a0:	f2c0 8137 	blt.w	8028312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80280a4:	42be      	cmp	r6, r7
 80280a6:	f340 8134 	ble.w	8028312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80280aa:	f812 c004 	ldrb.w	ip, [r2, r4]
 80280ae:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80280b2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80280b6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80280ba:	4355      	muls	r5, r2
 80280bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280c0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80280c4:	fb0c f203 	mul.w	r2, ip, r3
 80280c8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80280cc:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80280d0:	441d      	add	r5, r3
 80280d2:	f102 0320 	add.w	r3, r2, #32
 80280d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80280da:	0a1b      	lsrs	r3, r3, #8
 80280dc:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80280e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80280e4:	431c      	orrs	r4, r3
 80280e6:	1c7b      	adds	r3, r7, #1
 80280e8:	f100 811c 	bmi.w	8028324 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80280ec:	429e      	cmp	r6, r3
 80280ee:	f340 8119 	ble.w	8028324 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80280f2:	2900      	cmp	r1, #0
 80280f4:	f000 8119 	beq.w	802832a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80280f8:	9a01      	ldr	r2, [sp, #4]
 80280fa:	f899 3001 	ldrb.w	r3, [r9, #1]
 80280fe:	8855      	ldrh	r5, [r2, #2]
 8028100:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8028104:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8028108:	fb08 f802 	mul.w	r8, r8, r2
 802810c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028110:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8028114:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8028118:	435d      	muls	r5, r3
 802811a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802811e:	44d0      	add	r8, sl
 8028120:	f105 0a20 	add.w	sl, r5, #32
 8028124:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8028128:	0a2d      	lsrs	r5, r5, #8
 802812a:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802812e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028132:	432a      	orrs	r2, r5
 8028134:	3001      	adds	r0, #1
 8028136:	f100 80fe 	bmi.w	8028336 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802813a:	4583      	cmp	fp, r0
 802813c:	f340 80fb 	ble.w	8028336 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8028140:	f1be 0f00 	cmp.w	lr, #0
 8028144:	f000 80fc 	beq.w	8028340 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8028148:	2f00      	cmp	r7, #0
 802814a:	f2c0 80f1 	blt.w	8028330 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802814e:	42be      	cmp	r6, r7
 8028150:	f340 80ee 	ble.w	8028330 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8028154:	9801      	ldr	r0, [sp, #4]
 8028156:	f819 5006 	ldrb.w	r5, [r9, r6]
 802815a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802815e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8028162:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8028166:	fb0a fa00 	mul.w	sl, sl, r0
 802816a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802816e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8028172:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8028176:	fb05 f808 	mul.w	r8, r5, r8
 802817a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802817e:	4482      	add	sl, r0
 8028180:	f108 0020 	add.w	r0, r8, #32
 8028184:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8028188:	0a00      	lsrs	r0, r0, #8
 802818a:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802818e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028192:	ea4b 0b00 	orr.w	fp, fp, r0
 8028196:	3701      	adds	r7, #1
 8028198:	f100 80d7 	bmi.w	802834a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802819c:	42be      	cmp	r6, r7
 802819e:	f340 80d4 	ble.w	802834a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80281a2:	2900      	cmp	r1, #0
 80281a4:	f000 80d4 	beq.w	8028350 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80281a8:	3601      	adds	r6, #1
 80281aa:	9801      	ldr	r0, [sp, #4]
 80281ac:	f819 7006 	ldrb.w	r7, [r9, r6]
 80281b0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80281b4:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80281b8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80281bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80281c0:	fb09 f906 	mul.w	r9, r9, r6
 80281c4:	fb07 f800 	mul.w	r8, r7, r0
 80281c8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80281cc:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80281d0:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80281d4:	44d1      	add	r9, sl
 80281d6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80281da:	f108 0020 	add.w	r0, r8, #32
 80281de:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80281e2:	0a00      	lsrs	r0, r0, #8
 80281e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80281e8:	4330      	orrs	r0, r6
 80281ea:	b28e      	uxth	r6, r1
 80281ec:	fa1f f98e 	uxth.w	r9, lr
 80281f0:	fb06 f809 	mul.w	r8, r6, r9
 80281f4:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80281f8:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80281fc:	0136      	lsls	r6, r6, #4
 80281fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028202:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8028206:	9601      	str	r6, [sp, #4]
 8028208:	ea4a 0404 	orr.w	r4, sl, r4
 802820c:	fa1f f689 	uxth.w	r6, r9
 8028210:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028214:	fb11 f90e 	smulbb	r9, r1, lr
 8028218:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802821c:	9602      	str	r6, [sp, #8]
 802821e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028222:	4626      	mov	r6, r4
 8028224:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028228:	f1ce 0410 	rsb	r4, lr, #16
 802822c:	1a64      	subs	r4, r4, r1
 802822e:	ea4a 0202 	orr.w	r2, sl, r2
 8028232:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8028236:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802823a:	434a      	muls	r2, r1
 802823c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028240:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028244:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028248:	fb04 2406 	mla	r4, r4, r6, r2
 802824c:	ea4a 0000 	orr.w	r0, sl, r0
 8028250:	fb09 4200 	mla	r2, r9, r0, r4
 8028254:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8028258:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802825c:	9801      	ldr	r0, [sp, #4]
 802825e:	9903      	ldr	r1, [sp, #12]
 8028260:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028264:	ea44 0b0b 	orr.w	fp, r4, fp
 8028268:	9c02      	ldr	r4, [sp, #8]
 802826a:	8809      	ldrh	r1, [r1, #0]
 802826c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8028270:	1b00      	subs	r0, r0, r4
 8028272:	9c01      	ldr	r4, [sp, #4]
 8028274:	eba4 0608 	sub.w	r6, r4, r8
 8028278:	b2b6      	uxth	r6, r6
 802827a:	b280      	uxth	r0, r0
 802827c:	4373      	muls	r3, r6
 802827e:	fb0c 3300 	mla	r3, ip, r0, r3
 8028282:	9802      	ldr	r0, [sp, #8]
 8028284:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028288:	fb00 3505 	mla	r5, r0, r5, r3
 802828c:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8028290:	fb08 5707 	mla	r7, r8, r7, r5
 8028294:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028298:	120b      	asrs	r3, r1, #8
 802829a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802829e:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80282a2:	b2ff      	uxtb	r7, r7
 80282a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80282a8:	10c8      	asrs	r0, r1, #3
 80282aa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80282ae:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80282b2:	00c9      	lsls	r1, r1, #3
 80282b4:	437b      	muls	r3, r7
 80282b6:	ea42 0e0e 	orr.w	lr, r2, lr
 80282ba:	b2c9      	uxtb	r1, r1
 80282bc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80282c0:	fa1f f28e 	uxth.w	r2, lr
 80282c4:	4378      	muls	r0, r7
 80282c6:	434f      	muls	r7, r1
 80282c8:	1c59      	adds	r1, r3, #1
 80282ca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80282ce:	1213      	asrs	r3, r2, #8
 80282d0:	f023 0307 	bic.w	r3, r3, #7
 80282d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80282d8:	1c41      	adds	r1, r0, #1
 80282da:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80282de:	10d1      	asrs	r1, r2, #3
 80282e0:	f021 0103 	bic.w	r1, r1, #3
 80282e4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80282e8:	021b      	lsls	r3, r3, #8
 80282ea:	00c9      	lsls	r1, r1, #3
 80282ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80282f0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80282f4:	430b      	orrs	r3, r1
 80282f6:	1c79      	adds	r1, r7, #1
 80282f8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80282fc:	00d2      	lsls	r2, r2, #3
 80282fe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8028302:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028306:	431a      	orrs	r2, r3
 8028308:	9b03      	ldr	r3, [sp, #12]
 802830a:	801a      	strh	r2, [r3, #0]
 802830c:	b005      	add	sp, #20
 802830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028312:	f04f 0c00 	mov.w	ip, #0
 8028316:	4664      	mov	r4, ip
 8028318:	e6e5      	b.n	80280e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 802831a:	2300      	movs	r3, #0
 802831c:	469c      	mov	ip, r3
 802831e:	461a      	mov	r2, r3
 8028320:	461c      	mov	r4, r3
 8028322:	e707      	b.n	8028134 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028324:	2300      	movs	r3, #0
 8028326:	461a      	mov	r2, r3
 8028328:	e704      	b.n	8028134 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802832a:	460b      	mov	r3, r1
 802832c:	460a      	mov	r2, r1
 802832e:	e701      	b.n	8028134 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028330:	2500      	movs	r5, #0
 8028332:	46ab      	mov	fp, r5
 8028334:	e72f      	b.n	8028196 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8028336:	2700      	movs	r7, #0
 8028338:	463d      	mov	r5, r7
 802833a:	4638      	mov	r0, r7
 802833c:	46bb      	mov	fp, r7
 802833e:	e754      	b.n	80281ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028340:	4677      	mov	r7, lr
 8028342:	4675      	mov	r5, lr
 8028344:	4670      	mov	r0, lr
 8028346:	46f3      	mov	fp, lr
 8028348:	e74f      	b.n	80281ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802834a:	2700      	movs	r7, #0
 802834c:	4638      	mov	r0, r7
 802834e:	e74c      	b.n	80281ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028350:	460f      	mov	r7, r1
 8028352:	4608      	mov	r0, r1
 8028354:	e749      	b.n	80281ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08028358 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802835c:	b093      	sub	sp, #76	; 0x4c
 802835e:	9210      	str	r2, [sp, #64]	; 0x40
 8028360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028362:	910e      	str	r1, [sp, #56]	; 0x38
 8028364:	9306      	str	r3, [sp, #24]
 8028366:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802836a:	9011      	str	r0, [sp, #68]	; 0x44
 802836c:	6850      	ldr	r0, [r2, #4]
 802836e:	6812      	ldr	r2, [r2, #0]
 8028370:	fb00 1303 	mla	r3, r0, r3, r1
 8028374:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028378:	9307      	str	r3, [sp, #28]
 802837a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802837c:	681b      	ldr	r3, [r3, #0]
 802837e:	9308      	str	r3, [sp, #32]
 8028380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028382:	685b      	ldr	r3, [r3, #4]
 8028384:	9309      	str	r3, [sp, #36]	; 0x24
 8028386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028388:	2b00      	cmp	r3, #0
 802838a:	dc03      	bgt.n	8028394 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802838c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802838e:	2b00      	cmp	r3, #0
 8028390:	f340 83b4 	ble.w	8028afc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8028394:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028396:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802839a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802839e:	1e48      	subs	r0, r1, #1
 80283a0:	1e55      	subs	r5, r2, #1
 80283a2:	9b06      	ldr	r3, [sp, #24]
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	f340 8163 	ble.w	8028670 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80283aa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80283ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80283ae:	1436      	asrs	r6, r6, #16
 80283b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80283b4:	d406      	bmi.n	80283c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283b6:	4286      	cmp	r6, r0
 80283b8:	da04      	bge.n	80283c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	db02      	blt.n	80283c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283be:	42ab      	cmp	r3, r5
 80283c0:	f2c0 8157 	blt.w	8028672 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80283c4:	3601      	adds	r6, #1
 80283c6:	f100 8144 	bmi.w	8028652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283ca:	42b1      	cmp	r1, r6
 80283cc:	f2c0 8141 	blt.w	8028652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283d0:	3301      	adds	r3, #1
 80283d2:	f100 813e 	bmi.w	8028652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283d6:	429a      	cmp	r2, r3
 80283d8:	f2c0 813b 	blt.w	8028652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283dc:	9b06      	ldr	r3, [sp, #24]
 80283de:	9f07      	ldr	r7, [sp, #28]
 80283e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80283e2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80283e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80283e8:	2b00      	cmp	r3, #0
 80283ea:	f340 8164 	ble.w	80286b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80283ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80283f0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80283f2:	1418      	asrs	r0, r3, #16
 80283f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80283f6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80283fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80283fc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8028400:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028402:	142d      	asrs	r5, r5, #16
 8028404:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028408:	f100 81ee 	bmi.w	80287e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802840c:	f102 3eff 	add.w	lr, r2, #4294967295
 8028410:	4575      	cmp	r5, lr
 8028412:	f280 81e9 	bge.w	80287e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028416:	2800      	cmp	r0, #0
 8028418:	f2c0 81e6 	blt.w	80287e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802841c:	f103 3eff 	add.w	lr, r3, #4294967295
 8028420:	4570      	cmp	r0, lr
 8028422:	f280 81e1 	bge.w	80287e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028428:	b212      	sxth	r2, r2
 802842a:	fb00 5002 	mla	r0, r0, r2, r5
 802842e:	fa1f fe81 	uxth.w	lr, r1
 8028432:	eb03 0a00 	add.w	sl, r3, r0
 8028436:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802843a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802843e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028442:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8028446:	b29b      	uxth	r3, r3
 8028448:	f1bc 0f00 	cmp.w	ip, #0
 802844c:	f000 8179 	beq.w	8028742 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8028450:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028454:	940a      	str	r4, [sp, #40]	; 0x28
 8028456:	eb0a 0b02 	add.w	fp, sl, r2
 802845a:	fa1f fa8c 	uxth.w	sl, ip
 802845e:	fb0a fe0e 	mul.w	lr, sl, lr
 8028462:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028466:	fa1f fa8a 	uxth.w	sl, sl
 802846a:	eba5 050e 	sub.w	r5, r5, lr
 802846e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028472:	940b      	str	r4, [sp, #44]	; 0x2c
 8028474:	eba3 030a 	sub.w	r3, r3, sl
 8028478:	b2ad      	uxth	r5, r5
 802847a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802847c:	b29b      	uxth	r3, r3
 802847e:	fb08 f505 	mul.w	r5, r8, r5
 8028482:	fb09 5303 	mla	r3, r9, r3, r5
 8028486:	fb0a 3304 	mla	r3, sl, r4, r3
 802848a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802848c:	fb0e 3304 	mla	r3, lr, r4, r3
 8028490:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028494:	2b00      	cmp	r3, #0
 8028496:	f000 80cf 	beq.w	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802849a:	9c08      	ldr	r4, [sp, #32]
 802849c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80284a0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80284a4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80284a8:	f000 8150 	beq.w	802874c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80284ac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80284b0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80284b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80284b8:	fb09 f000 	mul.w	r0, r9, r0
 80284bc:	fb0a fe0e 	mul.w	lr, sl, lr
 80284c0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80284c4:	f100 0b20 	add.w	fp, r0, #32
 80284c8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80284cc:	44ce      	add	lr, r9
 80284ce:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80284d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284d6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80284da:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80284de:	ea4e 0909 	orr.w	r9, lr, r9
 80284e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80284e6:	8868      	ldrh	r0, [r5, #2]
 80284e8:	d019      	beq.n	802851e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80284ea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80284ee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80284f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80284f6:	fb08 f800 	mul.w	r8, r8, r0
 80284fa:	fb0a fe0e 	mul.w	lr, sl, lr
 80284fe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8028502:	f108 0b20 	add.w	fp, r8, #32
 8028506:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802850a:	4486      	add	lr, r0
 802850c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028510:	0a00      	lsrs	r0, r0, #8
 8028512:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028516:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802851a:	ea4e 0000 	orr.w	r0, lr, r0
 802851e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028522:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028526:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802852a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802852e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028532:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028536:	ea4e 0909 	orr.w	r9, lr, r9
 802853a:	ea4a 0000 	orr.w	r0, sl, r0
 802853e:	f1bc 0f00 	cmp.w	ip, #0
 8028542:	f000 8105 	beq.w	8028750 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028546:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802854a:	3a01      	subs	r2, #1
 802854c:	0052      	lsls	r2, r2, #1
 802854e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028550:	3202      	adds	r2, #2
 8028552:	2cff      	cmp	r4, #255	; 0xff
 8028554:	eb05 0e02 	add.w	lr, r5, r2
 8028558:	5aaa      	ldrh	r2, [r5, r2]
 802855a:	d018      	beq.n	802858e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802855c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028560:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028564:	fb04 fa02 	mul.w	sl, r4, r2
 8028568:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802856c:	fb08 f805 	mul.w	r8, r8, r5
 8028570:	f10a 0520 	add.w	r5, sl, #32
 8028574:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028578:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802857c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028580:	4442      	add	r2, r8
 8028582:	0a2d      	lsrs	r5, r5, #8
 8028584:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028588:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802858c:	432a      	orrs	r2, r5
 802858e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028590:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028594:	2cff      	cmp	r4, #255	; 0xff
 8028596:	d01a      	beq.n	80285ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8028598:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802859c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80285a0:	fb04 fa05 	mul.w	sl, r4, r5
 80285a4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80285a8:	fb08 f80e 	mul.w	r8, r8, lr
 80285ac:	f10a 0e20 	add.w	lr, sl, #32
 80285b0:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80285b4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80285b8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80285bc:	4445      	add	r5, r8
 80285be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285c2:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80285c6:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80285ca:	ea45 050e 	orr.w	r5, r5, lr
 80285ce:	fb1c fe01 	smulbb	lr, ip, r1
 80285d2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80285d6:	f1cc 0810 	rsb	r8, ip, #16
 80285da:	eba8 0801 	sub.w	r8, r8, r1
 80285de:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80285e2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80285e6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80285ea:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80285ee:	4341      	muls	r1, r0
 80285f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80285f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80285f8:	ea4a 0202 	orr.w	r2, sl, r2
 80285fc:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028600:	fb09 1108 	mla	r1, r9, r8, r1
 8028604:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028608:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802860c:	fb0c 1102 	mla	r1, ip, r2, r1
 8028610:	ea4b 0505 	orr.w	r5, fp, r5
 8028614:	fb0e 1e05 	mla	lr, lr, r5, r1
 8028618:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802861c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028620:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028624:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028628:	ea42 0e0e 	orr.w	lr, r2, lr
 802862c:	fa1f f28e 	uxth.w	r2, lr
 8028630:	2bff      	cmp	r3, #255	; 0xff
 8028632:	f040 80a1 	bne.w	8028778 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8028636:	803a      	strh	r2, [r7, #0]
 8028638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802863a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802863c:	4413      	add	r3, r2
 802863e:	931d      	str	r3, [sp, #116]	; 0x74
 8028640:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028642:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028644:	441a      	add	r2, r3
 8028646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028648:	921e      	str	r2, [sp, #120]	; 0x78
 802864a:	3b01      	subs	r3, #1
 802864c:	3702      	adds	r7, #2
 802864e:	930f      	str	r3, [sp, #60]	; 0x3c
 8028650:	e6c9      	b.n	80283e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028652:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028654:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8028656:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8028658:	4433      	add	r3, r6
 802865a:	931d      	str	r3, [sp, #116]	; 0x74
 802865c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802865e:	441c      	add	r4, r3
 8028660:	9b06      	ldr	r3, [sp, #24]
 8028662:	941e      	str	r4, [sp, #120]	; 0x78
 8028664:	3b01      	subs	r3, #1
 8028666:	9306      	str	r3, [sp, #24]
 8028668:	9b07      	ldr	r3, [sp, #28]
 802866a:	3302      	adds	r3, #2
 802866c:	9307      	str	r3, [sp, #28]
 802866e:	e698      	b.n	80283a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028670:	d028      	beq.n	80286c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8028672:	9b06      	ldr	r3, [sp, #24]
 8028674:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028676:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8028678:	3b01      	subs	r3, #1
 802867a:	fb00 5003 	mla	r0, r0, r3, r5
 802867e:	1400      	asrs	r0, r0, #16
 8028680:	f53f aeac 	bmi.w	80283dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028684:	3901      	subs	r1, #1
 8028686:	4288      	cmp	r0, r1
 8028688:	f6bf aea8 	bge.w	80283dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802868c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802868e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8028690:	fb01 0303 	mla	r3, r1, r3, r0
 8028694:	141b      	asrs	r3, r3, #16
 8028696:	f53f aea1 	bmi.w	80283dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802869a:	3a01      	subs	r2, #1
 802869c:	4293      	cmp	r3, r2
 802869e:	f6bf ae9d 	bge.w	80283dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80286a2:	9b06      	ldr	r3, [sp, #24]
 80286a4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80286a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80286aa:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80286ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	f300 80b6 	bgt.w	8028822 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80286b6:	9b06      	ldr	r3, [sp, #24]
 80286b8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80286bc:	9b07      	ldr	r3, [sp, #28]
 80286be:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80286c2:	9307      	str	r3, [sp, #28]
 80286c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80286c6:	2b00      	cmp	r3, #0
 80286c8:	f340 8218 	ble.w	8028afc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80286cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80286d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80286d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80286d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80286da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80286de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80286e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80286e6:	eef0 6a62 	vmov.f32	s13, s5
 80286ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80286ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80286f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80286f6:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80286fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80286fe:	eef0 6a43 	vmov.f32	s13, s6
 8028702:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028706:	ee12 2a90 	vmov	r2, s5
 802870a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802870e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028712:	ee13 2a10 	vmov	r2, s6
 8028716:	931f      	str	r3, [sp, #124]	; 0x7c
 8028718:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802871a:	fb92 f3f3 	sdiv	r3, r2, r3
 802871e:	9320      	str	r3, [sp, #128]	; 0x80
 8028720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028722:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028724:	3b01      	subs	r3, #1
 8028726:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802872a:	930e      	str	r3, [sp, #56]	; 0x38
 802872c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802872e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8028732:	bf08      	it	eq
 8028734:	4613      	moveq	r3, r2
 8028736:	9306      	str	r3, [sp, #24]
 8028738:	eeb0 3a67 	vmov.f32	s6, s15
 802873c:	eef0 2a47 	vmov.f32	s5, s14
 8028740:	e621      	b.n	8028386 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028742:	fb08 f505 	mul.w	r5, r8, r5
 8028746:	fb09 5303 	mla	r3, r9, r3, r5
 802874a:	e6a1      	b.n	8028490 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802874c:	4681      	mov	r9, r0
 802874e:	e6c8      	b.n	80284e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028750:	f1c1 0210 	rsb	r2, r1, #16
 8028754:	4341      	muls	r1, r0
 8028756:	fb09 1902 	mla	r9, r9, r2, r1
 802875a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802875e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8028762:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028766:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802876a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802876e:	ea42 0909 	orr.w	r9, r2, r9
 8028772:	fa1f f289 	uxth.w	r2, r9
 8028776:	e75b      	b.n	8028630 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028778:	f8b7 c000 	ldrh.w	ip, [r7]
 802877c:	43db      	mvns	r3, r3
 802877e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028782:	fa5f fe83 	uxtb.w	lr, r3
 8028786:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802878a:	fb00 f00e 	mul.w	r0, r0, lr
 802878e:	1c41      	adds	r1, r0, #1
 8028790:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028794:	1211      	asrs	r1, r2, #8
 8028796:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802879a:	f021 0107 	bic.w	r1, r1, #7
 802879e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80287a2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80287a6:	48d7      	ldr	r0, [pc, #860]	; (8028b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80287a8:	fb05 f50e 	mul.w	r5, r5, lr
 80287ac:	b2c9      	uxtb	r1, r1
 80287ae:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80287b2:	1c69      	adds	r1, r5, #1
 80287b4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80287b8:	10d1      	asrs	r1, r2, #3
 80287ba:	f021 0103 	bic.w	r1, r1, #3
 80287be:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80287c2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80287c6:	b2db      	uxtb	r3, r3
 80287c8:	00c9      	lsls	r1, r1, #3
 80287ca:	fb03 f30e 	mul.w	r3, r3, lr
 80287ce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80287d2:	4301      	orrs	r1, r0
 80287d4:	1c58      	adds	r0, r3, #1
 80287d6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80287da:	00d2      	lsls	r2, r2, #3
 80287dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80287e0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80287e4:	430a      	orrs	r2, r1
 80287e6:	e726      	b.n	8028636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 80287e8:	f115 0e01 	adds.w	lr, r5, #1
 80287ec:	f53f af24 	bmi.w	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287f0:	4572      	cmp	r2, lr
 80287f2:	f6ff af21 	blt.w	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287f6:	f110 0e01 	adds.w	lr, r0, #1
 80287fa:	f53f af1d 	bmi.w	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287fe:	4573      	cmp	r3, lr
 8028800:	f6ff af1a 	blt.w	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028804:	b21b      	sxth	r3, r3
 8028806:	b212      	sxth	r2, r2
 8028808:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802880c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028810:	9301      	str	r3, [sp, #4]
 8028812:	9200      	str	r2, [sp, #0]
 8028814:	4639      	mov	r1, r7
 8028816:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802881a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802881c:	f7ff fc24 	bl	8028068 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028820:	e70a      	b.n	8028638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028822:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028824:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028828:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802882a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802882e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028830:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028834:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028836:	141f      	asrs	r7, r3, #16
 8028838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802883a:	141b      	asrs	r3, r3, #16
 802883c:	fb01 3707 	mla	r7, r1, r7, r3
 8028840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028842:	fa1f fc82 	uxth.w	ip, r2
 8028846:	eb03 0a07 	add.w	sl, r3, r7
 802884a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802884e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028852:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028856:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802885a:	b29b      	uxth	r3, r3
 802885c:	2d00      	cmp	r5, #0
 802885e:	f000 80fe 	beq.w	8028a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8028862:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028866:	940c      	str	r4, [sp, #48]	; 0x30
 8028868:	eb0a 0b01 	add.w	fp, sl, r1
 802886c:	fa1f fa85 	uxth.w	sl, r5
 8028870:	fb0a fc0c 	mul.w	ip, sl, ip
 8028874:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028878:	fa1f fa8a 	uxth.w	sl, sl
 802887c:	eba0 000c 	sub.w	r0, r0, ip
 8028880:	eba3 030a 	sub.w	r3, r3, sl
 8028884:	b280      	uxth	r0, r0
 8028886:	fb08 f000 	mul.w	r0, r8, r0
 802888a:	b29b      	uxth	r3, r3
 802888c:	fb09 0303 	mla	r3, r9, r3, r0
 8028890:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028892:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028896:	940d      	str	r4, [sp, #52]	; 0x34
 8028898:	fb0a 3300 	mla	r3, sl, r0, r3
 802889c:	fb0c 3304 	mla	r3, ip, r4, r3
 80288a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	f000 80cc 	beq.w	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80288aa:	9808      	ldr	r0, [sp, #32]
 80288ac:	9c08      	ldr	r4, [sp, #32]
 80288ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80288b2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80288b6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80288ba:	f000 80d5 	beq.w	8028a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80288be:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80288c2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80288c6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80288ca:	fb09 f707 	mul.w	r7, r9, r7
 80288ce:	fb0a fc0c 	mul.w	ip, sl, ip
 80288d2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80288d6:	f107 0b20 	add.w	fp, r7, #32
 80288da:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80288de:	44cc      	add	ip, r9
 80288e0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80288e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80288e8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80288ec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80288f0:	ea4c 0909 	orr.w	r9, ip, r9
 80288f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80288f8:	8847      	ldrh	r7, [r0, #2]
 80288fa:	d019      	beq.n	8028930 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 80288fc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028900:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028904:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028908:	fb08 f807 	mul.w	r8, r8, r7
 802890c:	fb0a fc0c 	mul.w	ip, sl, ip
 8028910:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028914:	f108 0b20 	add.w	fp, r8, #32
 8028918:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802891c:	44bc      	add	ip, r7
 802891e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028922:	0a3f      	lsrs	r7, r7, #8
 8028924:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028928:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802892c:	ea4c 0707 	orr.w	r7, ip, r7
 8028930:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028934:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028938:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802893c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028940:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028944:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028948:	ea4c 0909 	orr.w	r9, ip, r9
 802894c:	ea4a 0707 	orr.w	r7, sl, r7
 8028950:	2d00      	cmp	r5, #0
 8028952:	f000 808b 	beq.w	8028a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8028956:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802895a:	3901      	subs	r1, #1
 802895c:	0049      	lsls	r1, r1, #1
 802895e:	3102      	adds	r1, #2
 8028960:	eb00 0c01 	add.w	ip, r0, r1
 8028964:	5a41      	ldrh	r1, [r0, r1]
 8028966:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028968:	28ff      	cmp	r0, #255	; 0xff
 802896a:	d019      	beq.n	80289a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 802896c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802896e:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028972:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028976:	fb04 fa01 	mul.w	sl, r4, r1
 802897a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802897e:	fb08 f800 	mul.w	r8, r8, r0
 8028982:	f10a 0020 	add.w	r0, sl, #32
 8028986:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802898a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802898e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028992:	4441      	add	r1, r8
 8028994:	0a00      	lsrs	r0, r0, #8
 8028996:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802899a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802899e:	4301      	orrs	r1, r0
 80289a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80289a2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80289a6:	2cff      	cmp	r4, #255	; 0xff
 80289a8:	d01a      	beq.n	80289e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80289aa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80289ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80289b2:	fb04 fa00 	mul.w	sl, r4, r0
 80289b6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80289ba:	fb08 f80c 	mul.w	r8, r8, ip
 80289be:	f10a 0c20 	add.w	ip, sl, #32
 80289c2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80289c6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80289ca:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80289ce:	4440      	add	r0, r8
 80289d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289d4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80289d8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80289dc:	ea40 000c 	orr.w	r0, r0, ip
 80289e0:	fb15 fc02 	smulbb	ip, r5, r2
 80289e4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80289e8:	f1c5 0810 	rsb	r8, r5, #16
 80289ec:	eba8 0802 	sub.w	r8, r8, r2
 80289f0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80289f4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80289f8:	437a      	muls	r2, r7
 80289fa:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80289fe:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028a06:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028a0a:	fb09 2208 	mla	r2, r9, r8, r2
 8028a0e:	ea4a 0101 	orr.w	r1, sl, r1
 8028a12:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028a16:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028a1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028a1e:	fb05 2201 	mla	r2, r5, r1, r2
 8028a22:	ea4b 0000 	orr.w	r0, fp, r0
 8028a26:	fb0c 2200 	mla	r2, ip, r0, r2
 8028a2a:	0d57      	lsrs	r7, r2, #21
 8028a2c:	0952      	lsrs	r2, r2, #5
 8028a2e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028a32:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028a36:	433a      	orrs	r2, r7
 8028a38:	2bff      	cmp	r3, #255	; 0xff
 8028a3a:	b292      	uxth	r2, r2
 8028a3c:	d127      	bne.n	8028a8e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8028a3e:	f8ae 2000 	strh.w	r2, [lr]
 8028a42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028a44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028a46:	4413      	add	r3, r2
 8028a48:	931d      	str	r3, [sp, #116]	; 0x74
 8028a4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028a4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028a4e:	441a      	add	r2, r3
 8028a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028a52:	921e      	str	r2, [sp, #120]	; 0x78
 8028a54:	3b01      	subs	r3, #1
 8028a56:	f10e 0e02 	add.w	lr, lr, #2
 8028a5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028a5c:	e627      	b.n	80286ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a5e:	fb08 f000 	mul.w	r0, r8, r0
 8028a62:	fb09 0303 	mla	r3, r9, r3, r0
 8028a66:	e71b      	b.n	80288a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8028a68:	46b9      	mov	r9, r7
 8028a6a:	e743      	b.n	80288f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8028a6c:	f1c2 0110 	rsb	r1, r2, #16
 8028a70:	437a      	muls	r2, r7
 8028a72:	fb09 2901 	mla	r9, r9, r1, r2
 8028a76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028a7a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028a7e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028a82:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028a86:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028a8a:	4302      	orrs	r2, r0
 8028a8c:	e7d4      	b.n	8028a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8028a8e:	f8be 7000 	ldrh.w	r7, [lr]
 8028a92:	4c1c      	ldr	r4, [pc, #112]	; (8028b04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8028a94:	43db      	mvns	r3, r3
 8028a96:	1238      	asrs	r0, r7, #8
 8028a98:	fa5f fc83 	uxtb.w	ip, r3
 8028a9c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028aa0:	10fd      	asrs	r5, r7, #3
 8028aa2:	fb00 f00c 	mul.w	r0, r0, ip
 8028aa6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028aaa:	fb05 f10c 	mul.w	r1, r5, ip
 8028aae:	1c45      	adds	r5, r0, #1
 8028ab0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028ab4:	1215      	asrs	r5, r2, #8
 8028ab6:	f025 0507 	bic.w	r5, r5, #7
 8028aba:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028abe:	1c4d      	adds	r5, r1, #1
 8028ac0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028ac4:	10d1      	asrs	r1, r2, #3
 8028ac6:	f021 0103 	bic.w	r1, r1, #3
 8028aca:	00fb      	lsls	r3, r7, #3
 8028acc:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028ad0:	b2db      	uxtb	r3, r3
 8028ad2:	b2c0      	uxtb	r0, r0
 8028ad4:	00c9      	lsls	r1, r1, #3
 8028ad6:	fb03 f30c 	mul.w	r3, r3, ip
 8028ada:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028ade:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028ae2:	4308      	orrs	r0, r1
 8028ae4:	1c59      	adds	r1, r3, #1
 8028ae6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028aea:	00d2      	lsls	r2, r2, #3
 8028aec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028af0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028af4:	4318      	orrs	r0, r3
 8028af6:	f8ae 0000 	strh.w	r0, [lr]
 8028afa:	e7a2      	b.n	8028a42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8028afc:	b013      	add	sp, #76	; 0x4c
 8028afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b02:	bf00      	nop
 8028b04:	fffff800 	.word	0xfffff800

08028b08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028b0c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8028b10:	fb05 4c03 	mla	ip, r5, r3, r4
 8028b14:	2d00      	cmp	r5, #0
 8028b16:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028b1a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8028b1e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028b22:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8028b26:	8808      	ldrh	r0, [r1, #0]
 8028b28:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8028b2c:	f2c0 80a7 	blt.w	8028c7e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028b30:	45aa      	cmp	sl, r5
 8028b32:	f340 80a4 	ble.w	8028c7e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028b36:	2c00      	cmp	r4, #0
 8028b38:	f2c0 809f 	blt.w	8028c7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028b3c:	42a3      	cmp	r3, r4
 8028b3e:	f340 809c 	ble.w	8028c7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028b42:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8028b46:	1c62      	adds	r2, r4, #1
 8028b48:	f100 809c 	bmi.w	8028c84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b4c:	4293      	cmp	r3, r2
 8028b4e:	f340 8099 	ble.w	8028c84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b52:	f1b9 0f00 	cmp.w	r9, #0
 8028b56:	f000 8095 	beq.w	8028c84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b5a:	f8be c002 	ldrh.w	ip, [lr, #2]
 8028b5e:	3501      	adds	r5, #1
 8028b60:	f100 8094 	bmi.w	8028c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b64:	45aa      	cmp	sl, r5
 8028b66:	f340 8091 	ble.w	8028c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b6a:	2f00      	cmp	r7, #0
 8028b6c:	f000 808e 	beq.w	8028c8c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b70:	2c00      	cmp	r4, #0
 8028b72:	f2c0 8089 	blt.w	8028c88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028b76:	42a3      	cmp	r3, r4
 8028b78:	f340 8086 	ble.w	8028c88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028b7c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8028b80:	3401      	adds	r4, #1
 8028b82:	f100 8086 	bmi.w	8028c92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b86:	42a3      	cmp	r3, r4
 8028b88:	f340 8083 	ble.w	8028c92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b8c:	f1b9 0f00 	cmp.w	r9, #0
 8028b90:	d07f      	beq.n	8028c92 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b92:	3301      	adds	r3, #1
 8028b94:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8028b98:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8028b9c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028ba0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8028ba4:	fb19 fe07 	smulbb	lr, r9, r7
 8028ba8:	ea44 0808 	orr.w	r8, r4, r8
 8028bac:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8028bb0:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8028bb4:	f1c7 0210 	rsb	r2, r7, #16
 8028bb8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028bbc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028bc0:	ea44 0c0c 	orr.w	ip, r4, ip
 8028bc4:	eba2 0209 	sub.w	r2, r2, r9
 8028bc8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8028bcc:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8028bd0:	fb04 f40c 	mul.w	r4, r4, ip
 8028bd4:	fb02 4808 	mla	r8, r2, r8, r4
 8028bd8:	041a      	lsls	r2, r3, #16
 8028bda:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028bde:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028be2:	4313      	orrs	r3, r2
 8028be4:	042a      	lsls	r2, r5, #16
 8028be6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028bea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028bee:	fb0e 8303 	mla	r3, lr, r3, r8
 8028bf2:	432a      	orrs	r2, r5
 8028bf4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8028bf8:	fb07 3202 	mla	r2, r7, r2, r3
 8028bfc:	0d53      	lsrs	r3, r2, #21
 8028bfe:	0952      	lsrs	r2, r2, #5
 8028c00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028c04:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028c08:	431a      	orrs	r2, r3
 8028c0a:	b293      	uxth	r3, r2
 8028c0c:	b2b4      	uxth	r4, r6
 8028c0e:	1202      	asrs	r2, r0, #8
 8028c10:	43f6      	mvns	r6, r6
 8028c12:	b2f6      	uxtb	r6, r6
 8028c14:	121d      	asrs	r5, r3, #8
 8028c16:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028c1a:	fb12 f206 	smulbb	r2, r2, r6
 8028c1e:	10c7      	asrs	r7, r0, #3
 8028c20:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028c24:	00c0      	lsls	r0, r0, #3
 8028c26:	fb05 2504 	mla	r5, r5, r4, r2
 8028c2a:	b2c0      	uxtb	r0, r0
 8028c2c:	10da      	asrs	r2, r3, #3
 8028c2e:	00db      	lsls	r3, r3, #3
 8028c30:	b2db      	uxtb	r3, r3
 8028c32:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8028c36:	fb10 f006 	smulbb	r0, r0, r6
 8028c3a:	b2ad      	uxth	r5, r5
 8028c3c:	fb03 0004 	mla	r0, r3, r4, r0
 8028c40:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c44:	fb17 f706 	smulbb	r7, r7, r6
 8028c48:	b280      	uxth	r0, r0
 8028c4a:	1c6b      	adds	r3, r5, #1
 8028c4c:	fb02 7204 	mla	r2, r2, r4, r7
 8028c50:	b292      	uxth	r2, r2
 8028c52:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028c56:	1c43      	adds	r3, r0, #1
 8028c58:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028c5c:	1c50      	adds	r0, r2, #1
 8028c5e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028c62:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028c66:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c6a:	0952      	lsrs	r2, r2, #5
 8028c6c:	432b      	orrs	r3, r5
 8028c6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c72:	4313      	orrs	r3, r2
 8028c74:	800b      	strh	r3, [r1, #0]
 8028c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028c7a:	4680      	mov	r8, r0
 8028c7c:	e763      	b.n	8028b46 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8028c7e:	4684      	mov	ip, r0
 8028c80:	4680      	mov	r8, r0
 8028c82:	e76c      	b.n	8028b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028c84:	4684      	mov	ip, r0
 8028c86:	e76a      	b.n	8028b5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028c88:	4605      	mov	r5, r0
 8028c8a:	e779      	b.n	8028b80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028c8c:	4603      	mov	r3, r0
 8028c8e:	4605      	mov	r5, r0
 8028c90:	e782      	b.n	8028b98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8028c92:	4603      	mov	r3, r0
 8028c94:	e780      	b.n	8028b98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08028c96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c9a:	b093      	sub	sp, #76	; 0x4c
 8028c9c:	461d      	mov	r5, r3
 8028c9e:	9210      	str	r2, [sp, #64]	; 0x40
 8028ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028ca2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8028ca6:	920b      	str	r2, [sp, #44]	; 0x2c
 8028ca8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8028cac:	910a      	str	r1, [sp, #40]	; 0x28
 8028cae:	6859      	ldr	r1, [r3, #4]
 8028cb0:	681b      	ldr	r3, [r3, #0]
 8028cb2:	9011      	str	r0, [sp, #68]	; 0x44
 8028cb4:	fb01 2707 	mla	r7, r1, r7, r2
 8028cb8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028cbc:	9307      	str	r3, [sp, #28]
 8028cbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028cc0:	681b      	ldr	r3, [r3, #0]
 8028cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8028cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028cc6:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8028cca:	43db      	mvns	r3, r3
 8028ccc:	b2db      	uxtb	r3, r3
 8028cce:	9308      	str	r3, [sp, #32]
 8028cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028cd2:	2b00      	cmp	r3, #0
 8028cd4:	dc03      	bgt.n	8028cde <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	f340 8203 	ble.w	80290e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028ce0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ce4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ce8:	1e48      	subs	r0, r1, #1
 8028cea:	f102 3cff 	add.w	ip, r2, #4294967295
 8028cee:	2d00      	cmp	r5, #0
 8028cf0:	f340 80da 	ble.w	8028ea8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028cf4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028cf8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028cfc:	d406      	bmi.n	8028d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028cfe:	4586      	cmp	lr, r0
 8028d00:	da04      	bge.n	8028d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	db02      	blt.n	8028d0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028d06:	4563      	cmp	r3, ip
 8028d08:	f2c0 80cf 	blt.w	8028eaa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8028d0c:	f11e 0e01 	adds.w	lr, lr, #1
 8028d10:	f100 80c1 	bmi.w	8028e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d14:	4571      	cmp	r1, lr
 8028d16:	f2c0 80be 	blt.w	8028e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d1a:	3301      	adds	r3, #1
 8028d1c:	f100 80bb 	bmi.w	8028e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d20:	429a      	cmp	r2, r3
 8028d22:	f2c0 80b8 	blt.w	8028e96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d26:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028d2a:	46a9      	mov	r9, r5
 8028d2c:	f1b9 0f00 	cmp.w	r9, #0
 8028d30:	f340 80d8 	ble.w	8028ee4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028d34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028d36:	1421      	asrs	r1, r4, #16
 8028d38:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028d3c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028d40:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028d44:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028d48:	f100 8111 	bmi.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d4c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028d50:	4551      	cmp	r1, sl
 8028d52:	f280 810c 	bge.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d56:	2800      	cmp	r0, #0
 8028d58:	f2c0 8109 	blt.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8028d60:	4550      	cmp	r0, sl
 8028d62:	f280 8104 	bge.w	8028f6e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d66:	fa0f f38e 	sxth.w	r3, lr
 8028d6a:	fb00 1103 	mla	r1, r0, r3, r1
 8028d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028d70:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028d74:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028d78:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028d7c:	f1bc 0f00 	cmp.w	ip, #0
 8028d80:	d007      	beq.n	8028d92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8028d82:	005b      	lsls	r3, r3, #1
 8028d84:	eb0a 0003 	add.w	r0, sl, r3
 8028d88:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8028d8e:	8843      	ldrh	r3, [r0, #2]
 8028d90:	930d      	str	r3, [sp, #52]	; 0x34
 8028d92:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028d96:	fb12 f30c 	smulbb	r3, r2, ip
 8028d9a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028d9e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028da2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028da6:	10db      	asrs	r3, r3, #3
 8028da8:	ea40 000e 	orr.w	r0, r0, lr
 8028dac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028db0:	f1cc 0e10 	rsb	lr, ip, #16
 8028db4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028db8:	ebae 0e02 	sub.w	lr, lr, r2
 8028dbc:	ea4a 0101 	orr.w	r1, sl, r1
 8028dc0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028dc4:	4351      	muls	r1, r2
 8028dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028dc8:	9f08      	ldr	r7, [sp, #32]
 8028dca:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028dce:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028dd2:	0410      	lsls	r0, r2, #16
 8028dd4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028dd8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028ddc:	4310      	orrs	r0, r2
 8028dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028de2:	0412      	lsls	r2, r2, #16
 8028de4:	fb03 e000 	mla	r0, r3, r0, lr
 8028de8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028dec:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028df0:	ea42 020e 	orr.w	r2, r2, lr
 8028df4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028df8:	fb03 0302 	mla	r3, r3, r2, r0
 8028dfc:	0d5a      	lsrs	r2, r3, #21
 8028dfe:	095b      	lsrs	r3, r3, #5
 8028e00:	f8b8 0000 	ldrh.w	r0, [r8]
 8028e04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028e08:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028e0c:	4313      	orrs	r3, r2
 8028e0e:	b29b      	uxth	r3, r3
 8028e10:	1201      	asrs	r1, r0, #8
 8028e12:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028e16:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028e1a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028e1e:	fb11 f107 	smulbb	r1, r1, r7
 8028e22:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028e26:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028e2a:	00c0      	lsls	r0, r0, #3
 8028e2c:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028e30:	b2c0      	uxtb	r0, r0
 8028e32:	10d9      	asrs	r1, r3, #3
 8028e34:	00db      	lsls	r3, r3, #3
 8028e36:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028e3a:	b2db      	uxtb	r3, r3
 8028e3c:	fb10 f007 	smulbb	r0, r0, r7
 8028e40:	fa1f fc8c 	uxth.w	ip, ip
 8028e44:	fb03 0302 	mla	r3, r3, r2, r0
 8028e48:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028e4c:	fb1e fe07 	smulbb	lr, lr, r7
 8028e50:	fb01 e102 	mla	r1, r1, r2, lr
 8028e54:	b29a      	uxth	r2, r3
 8028e56:	f10c 0301 	add.w	r3, ip, #1
 8028e5a:	b289      	uxth	r1, r1
 8028e5c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028e60:	1c53      	adds	r3, r2, #1
 8028e62:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028e66:	1c4a      	adds	r2, r1, #1
 8028e68:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028e6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8028e70:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028e74:	0949      	lsrs	r1, r1, #5
 8028e76:	ea43 030c 	orr.w	r3, r3, ip
 8028e7a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028e7e:	430b      	orrs	r3, r1
 8028e80:	f8a8 3000 	strh.w	r3, [r8]
 8028e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028e86:	441c      	add	r4, r3
 8028e88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028e8a:	f108 0802 	add.w	r8, r8, #2
 8028e8e:	441e      	add	r6, r3
 8028e90:	f109 39ff 	add.w	r9, r9, #4294967295
 8028e94:	e74a      	b.n	8028d2c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028e96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028e98:	441c      	add	r4, r3
 8028e9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028e9c:	441e      	add	r6, r3
 8028e9e:	9b07      	ldr	r3, [sp, #28]
 8028ea0:	3302      	adds	r3, #2
 8028ea2:	3d01      	subs	r5, #1
 8028ea4:	9307      	str	r3, [sp, #28]
 8028ea6:	e722      	b.n	8028cee <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028ea8:	d022      	beq.n	8028ef0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028eaa:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028eac:	1e6b      	subs	r3, r5, #1
 8028eae:	fb00 4003 	mla	r0, r0, r3, r4
 8028eb2:	1400      	asrs	r0, r0, #16
 8028eb4:	f53f af37 	bmi.w	8028d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028eb8:	3901      	subs	r1, #1
 8028eba:	4288      	cmp	r0, r1
 8028ebc:	f6bf af33 	bge.w	8028d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ec0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028ec2:	fb01 6303 	mla	r3, r1, r3, r6
 8028ec6:	141b      	asrs	r3, r3, #16
 8028ec8:	f53f af2d 	bmi.w	8028d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ecc:	3a01      	subs	r2, #1
 8028ece:	4293      	cmp	r3, r2
 8028ed0:	f6bf af29 	bge.w	8028d26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ed4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028ed8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028edc:	46a8      	mov	r8, r5
 8028ede:	f1b8 0f00 	cmp.w	r8, #0
 8028ee2:	dc5e      	bgt.n	8028fa2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028ee4:	9b07      	ldr	r3, [sp, #28]
 8028ee6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028eea:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028eee:	9307      	str	r3, [sp, #28]
 8028ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028ef2:	2b00      	cmp	r3, #0
 8028ef4:	f340 80f6 	ble.w	80290e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028ef8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028f00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f06:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f0a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f12:	eef0 6a62 	vmov.f32	s13, s5
 8028f16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f22:	ee16 4a90 	vmov	r4, s13
 8028f26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f2a:	eef0 6a43 	vmov.f32	s13, s6
 8028f2e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f32:	ee12 2a90 	vmov	r2, s5
 8028f36:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f3e:	ee13 2a10 	vmov	r2, s6
 8028f42:	931f      	str	r3, [sp, #124]	; 0x7c
 8028f44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f4a:	9320      	str	r3, [sp, #128]	; 0x80
 8028f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028f50:	3b01      	subs	r3, #1
 8028f52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f56:	930a      	str	r3, [sp, #40]	; 0x28
 8028f58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028f5a:	ee16 6a90 	vmov	r6, s13
 8028f5e:	bf14      	ite	ne
 8028f60:	461d      	movne	r5, r3
 8028f62:	4615      	moveq	r5, r2
 8028f64:	eeb0 3a67 	vmov.f32	s6, s15
 8028f68:	eef0 2a47 	vmov.f32	s5, s14
 8028f6c:	e6b0      	b.n	8028cd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028f6e:	f111 0a01 	adds.w	sl, r1, #1
 8028f72:	d487      	bmi.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f74:	45d6      	cmp	lr, sl
 8028f76:	db85      	blt.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f78:	f110 0a01 	adds.w	sl, r0, #1
 8028f7c:	d482      	bmi.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f7e:	4553      	cmp	r3, sl
 8028f80:	db80      	blt.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8028f84:	9101      	str	r1, [sp, #4]
 8028f86:	b21b      	sxth	r3, r3
 8028f88:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028f8c:	9300      	str	r3, [sp, #0]
 8028f8e:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028f92:	fa0f f38e 	sxth.w	r3, lr
 8028f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028f9a:	4641      	mov	r1, r8
 8028f9c:	f7ff fdb4 	bl	8028b08 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028fa0:	e770      	b.n	8028e84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028fa4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028fa6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028faa:	1430      	asrs	r0, r6, #16
 8028fac:	1423      	asrs	r3, r4, #16
 8028fae:	fb01 3000 	mla	r0, r1, r0, r3
 8028fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fb4:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028fb8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028fbc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028fc0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028fc4:	8858      	ldrh	r0, [r3, #2]
 8028fc6:	f1be 0f00 	cmp.w	lr, #0
 8028fca:	d00b      	beq.n	8028fe4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028fcc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028fd0:	3901      	subs	r1, #1
 8028fd2:	0049      	lsls	r1, r1, #1
 8028fd4:	3102      	adds	r1, #2
 8028fd6:	eb03 0b01 	add.w	fp, r3, r1
 8028fda:	5a5b      	ldrh	r3, [r3, r1]
 8028fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8028fde:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8028fe4:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028fe8:	fb12 f30e 	smulbb	r3, r2, lr
 8028fec:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028ff0:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028ff4:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028ff8:	10db      	asrs	r3, r3, #3
 8028ffa:	ea41 010c 	orr.w	r1, r1, ip
 8028ffe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029002:	f1ce 0c10 	rsb	ip, lr, #16
 8029006:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802900a:	ebac 0c02 	sub.w	ip, ip, r2
 802900e:	ea4b 0000 	orr.w	r0, fp, r0
 8029012:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029016:	4350      	muls	r0, r2
 8029018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802901a:	9f08      	ldr	r7, [sp, #32]
 802901c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029020:	fb0c 0c01 	mla	ip, ip, r1, r0
 8029024:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029028:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802902c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802902e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8029030:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029034:	0412      	lsls	r2, r2, #16
 8029036:	ea4b 0101 	orr.w	r1, fp, r1
 802903a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802903e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029042:	fb03 c101 	mla	r1, r3, r1, ip
 8029046:	4302      	orrs	r2, r0
 8029048:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802904c:	fb03 1202 	mla	r2, r3, r2, r1
 8029050:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8029054:	0952      	lsrs	r2, r2, #5
 8029056:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802905a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802905e:	f8b9 2000 	ldrh.w	r2, [r9]
 8029062:	ea4b 0303 	orr.w	r3, fp, r3
 8029066:	b29b      	uxth	r3, r3
 8029068:	1211      	asrs	r1, r2, #8
 802906a:	1218      	asrs	r0, r3, #8
 802906c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029070:	fb11 f107 	smulbb	r1, r1, r7
 8029074:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8029078:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802907c:	00d2      	lsls	r2, r2, #3
 802907e:	fb00 100a 	mla	r0, r0, sl, r1
 8029082:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8029086:	10d9      	asrs	r1, r3, #3
 8029088:	b2d2      	uxtb	r2, r2
 802908a:	00db      	lsls	r3, r3, #3
 802908c:	fb1c fc07 	smulbb	ip, ip, r7
 8029090:	fb12 f207 	smulbb	r2, r2, r7
 8029094:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029098:	b2db      	uxtb	r3, r3
 802909a:	b280      	uxth	r0, r0
 802909c:	fb01 c10a 	mla	r1, r1, sl, ip
 80290a0:	fb03 230a 	mla	r3, r3, sl, r2
 80290a4:	b29b      	uxth	r3, r3
 80290a6:	b289      	uxth	r1, r1
 80290a8:	1c42      	adds	r2, r0, #1
 80290aa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80290ae:	f101 0c01 	add.w	ip, r1, #1
 80290b2:	1c5a      	adds	r2, r3, #1
 80290b4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80290b8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80290bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80290be:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80290c2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80290c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80290ca:	4310      	orrs	r0, r2
 80290cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80290d0:	441c      	add	r4, r3
 80290d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80290d4:	ea40 000c 	orr.w	r0, r0, ip
 80290d8:	f829 0b02 	strh.w	r0, [r9], #2
 80290dc:	441e      	add	r6, r3
 80290de:	f108 38ff 	add.w	r8, r8, #4294967295
 80290e2:	e6fc      	b.n	8028ede <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80290e4:	b013      	add	sp, #76	; 0x4c
 80290e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080290ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80290ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80290ee:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80290f2:	fb0e 4703 	mla	r7, lr, r3, r4
 80290f6:	f1be 0f00 	cmp.w	lr, #0
 80290fa:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80290fe:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8029102:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8029106:	8808      	ldrh	r0, [r1, #0]
 8029108:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802910c:	db60      	blt.n	80291d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802910e:	45f1      	cmp	r9, lr
 8029110:	dd5e      	ble.n	80291d0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8029112:	2c00      	cmp	r4, #0
 8029114:	db5a      	blt.n	80291cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8029116:	42a3      	cmp	r3, r4
 8029118:	dd58      	ble.n	80291cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802911a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802911e:	1c62      	adds	r2, r4, #1
 8029120:	d459      	bmi.n	80291d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8029122:	4293      	cmp	r3, r2
 8029124:	dd57      	ble.n	80291d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8029126:	2d00      	cmp	r5, #0
 8029128:	d055      	beq.n	80291d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802912a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802912e:	f11e 0e01 	adds.w	lr, lr, #1
 8029132:	d454      	bmi.n	80291de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029134:	45f1      	cmp	r9, lr
 8029136:	dd52      	ble.n	80291de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029138:	2e00      	cmp	r6, #0
 802913a:	d050      	beq.n	80291de <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802913c:	2c00      	cmp	r4, #0
 802913e:	db4c      	blt.n	80291da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8029140:	42a3      	cmp	r3, r4
 8029142:	dd4a      	ble.n	80291da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8029144:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8029148:	3401      	adds	r4, #1
 802914a:	d405      	bmi.n	8029158 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802914c:	42a3      	cmp	r3, r4
 802914e:	dd03      	ble.n	8029158 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029150:	b115      	cbz	r5, 8029158 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029152:	3301      	adds	r3, #1
 8029154:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8029158:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802915c:	fb15 f406 	smulbb	r4, r5, r6
 8029160:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8029164:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8029168:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802916c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8029170:	ea43 0c0c 	orr.w	ip, r3, ip
 8029174:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029178:	f1c6 0310 	rsb	r3, r6, #16
 802917c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8029180:	1b5b      	subs	r3, r3, r5
 8029182:	ea4e 0707 	orr.w	r7, lr, r7
 8029186:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802918a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802918e:	437d      	muls	r5, r7
 8029190:	fb03 5c0c 	mla	ip, r3, ip, r5
 8029194:	0403      	lsls	r3, r0, #16
 8029196:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802919a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802919e:	4318      	orrs	r0, r3
 80291a0:	0413      	lsls	r3, r2, #16
 80291a2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80291a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80291aa:	4313      	orrs	r3, r2
 80291ac:	fb04 c000 	mla	r0, r4, r0, ip
 80291b0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80291b4:	fb06 0003 	mla	r0, r6, r3, r0
 80291b8:	0d43      	lsrs	r3, r0, #21
 80291ba:	0940      	lsrs	r0, r0, #5
 80291bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80291c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80291c4:	4318      	orrs	r0, r3
 80291c6:	8008      	strh	r0, [r1, #0]
 80291c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80291cc:	4684      	mov	ip, r0
 80291ce:	e7a6      	b.n	802911e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80291d0:	4607      	mov	r7, r0
 80291d2:	4684      	mov	ip, r0
 80291d4:	e7ab      	b.n	802912e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80291d6:	4607      	mov	r7, r0
 80291d8:	e7a9      	b.n	802912e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80291da:	4602      	mov	r2, r0
 80291dc:	e7b4      	b.n	8029148 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80291de:	4602      	mov	r2, r0
 80291e0:	e7ba      	b.n	8029158 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080291e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80291e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291e6:	b08f      	sub	sp, #60	; 0x3c
 80291e8:	461d      	mov	r5, r3
 80291ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80291ec:	920c      	str	r2, [sp, #48]	; 0x30
 80291ee:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80291f2:	9107      	str	r1, [sp, #28]
 80291f4:	6859      	ldr	r1, [r3, #4]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	900d      	str	r0, [sp, #52]	; 0x34
 80291fa:	fb01 2707 	mla	r7, r1, r7, r2
 80291fe:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029202:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029204:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8029208:	f8d3 8000 	ldr.w	r8, [r3]
 802920c:	9b07      	ldr	r3, [sp, #28]
 802920e:	2b00      	cmp	r3, #0
 8029210:	dc03      	bgt.n	802921a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029214:	2b00      	cmp	r3, #0
 8029216:	f340 8181 	ble.w	802951c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802921a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802921c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029220:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029224:	1e48      	subs	r0, r1, #1
 8029226:	f102 3cff 	add.w	ip, r2, #4294967295
 802922a:	2d00      	cmp	r5, #0
 802922c:	f340 809b 	ble.w	8029366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8029230:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029234:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029238:	d406      	bmi.n	8029248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802923a:	4586      	cmp	lr, r0
 802923c:	da04      	bge.n	8029248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802923e:	2b00      	cmp	r3, #0
 8029240:	db02      	blt.n	8029248 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029242:	4563      	cmp	r3, ip
 8029244:	f2c0 8090 	blt.w	8029368 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8029248:	f11e 0e01 	adds.w	lr, lr, #1
 802924c:	f100 8084 	bmi.w	8029358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029250:	4571      	cmp	r1, lr
 8029252:	f2c0 8081 	blt.w	8029358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029256:	3301      	adds	r3, #1
 8029258:	d47e      	bmi.n	8029358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802925a:	429a      	cmp	r2, r3
 802925c:	db7c      	blt.n	8029358 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802925e:	46aa      	mov	sl, r5
 8029260:	46b9      	mov	r9, r7
 8029262:	f1ba 0f00 	cmp.w	sl, #0
 8029266:	f340 8099 	ble.w	802939c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802926a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802926c:	1421      	asrs	r1, r4, #16
 802926e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029272:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029276:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802927a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802927e:	f100 80d0 	bmi.w	8029422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8029282:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029286:	4559      	cmp	r1, fp
 8029288:	f280 80cb 	bge.w	8029422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802928c:	2800      	cmp	r0, #0
 802928e:	f2c0 80c8 	blt.w	8029422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8029292:	f103 3bff 	add.w	fp, r3, #4294967295
 8029296:	4558      	cmp	r0, fp
 8029298:	f280 80c3 	bge.w	8029422 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802929c:	fa0f fe8e 	sxth.w	lr, lr
 80292a0:	fb00 110e 	mla	r1, r0, lr, r1
 80292a4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80292a8:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80292ac:	8841      	ldrh	r1, [r0, #2]
 80292ae:	f1bc 0f00 	cmp.w	ip, #0
 80292b2:	d00b      	beq.n	80292cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80292b4:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80292b8:	3b01      	subs	r3, #1
 80292ba:	005b      	lsls	r3, r3, #1
 80292bc:	3302      	adds	r3, #2
 80292be:	eb00 0e03 	add.w	lr, r0, r3
 80292c2:	5ac3      	ldrh	r3, [r0, r3]
 80292c4:	9308      	str	r3, [sp, #32]
 80292c6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80292ca:	9309      	str	r3, [sp, #36]	; 0x24
 80292cc:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80292d0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80292d4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80292d8:	ea40 000b 	orr.w	r0, r0, fp
 80292dc:	fb12 f30c 	smulbb	r3, r2, ip
 80292e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80292e4:	10db      	asrs	r3, r3, #3
 80292e6:	f1cc 0e10 	rsb	lr, ip, #16
 80292ea:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80292ee:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80292f2:	ebae 0e02 	sub.w	lr, lr, r2
 80292f6:	ea4b 0101 	orr.w	r1, fp, r1
 80292fa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80292fe:	4351      	muls	r1, r2
 8029300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029302:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029306:	fb0e 1e00 	mla	lr, lr, r0, r1
 802930a:	0410      	lsls	r0, r2, #16
 802930c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029310:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029314:	4310      	orrs	r0, r2
 8029316:	9a08      	ldr	r2, [sp, #32]
 8029318:	9908      	ldr	r1, [sp, #32]
 802931a:	0412      	lsls	r2, r2, #16
 802931c:	fb03 e000 	mla	r0, r3, r0, lr
 8029320:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029324:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029328:	ea42 020e 	orr.w	r2, r2, lr
 802932c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029330:	fb03 0302 	mla	r3, r3, r2, r0
 8029334:	0d5a      	lsrs	r2, r3, #21
 8029336:	095b      	lsrs	r3, r3, #5
 8029338:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802933c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029340:	4313      	orrs	r3, r2
 8029342:	f8a9 3000 	strh.w	r3, [r9]
 8029346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029348:	441c      	add	r4, r3
 802934a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802934c:	f109 0902 	add.w	r9, r9, #2
 8029350:	441e      	add	r6, r3
 8029352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029356:	e784      	b.n	8029262 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029358:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802935a:	441c      	add	r4, r3
 802935c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802935e:	3d01      	subs	r5, #1
 8029360:	441e      	add	r6, r3
 8029362:	3702      	adds	r7, #2
 8029364:	e761      	b.n	802922a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029366:	d01d      	beq.n	80293a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029368:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802936a:	1e6b      	subs	r3, r5, #1
 802936c:	fb00 4003 	mla	r0, r0, r3, r4
 8029370:	1400      	asrs	r0, r0, #16
 8029372:	f53f af74 	bmi.w	802925e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029376:	3901      	subs	r1, #1
 8029378:	4288      	cmp	r0, r1
 802937a:	f6bf af70 	bge.w	802925e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802937e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029380:	fb01 6303 	mla	r3, r1, r3, r6
 8029384:	141b      	asrs	r3, r3, #16
 8029386:	f53f af6a 	bmi.w	802925e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802938a:	3a01      	subs	r2, #1
 802938c:	4293      	cmp	r3, r2
 802938e:	f6bf af66 	bge.w	802925e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029392:	46a9      	mov	r9, r5
 8029394:	46ba      	mov	sl, r7
 8029396:	f1b9 0f00 	cmp.w	r9, #0
 802939a:	dc5a      	bgt.n	8029452 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 802939c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80293a0:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80293a4:	9b07      	ldr	r3, [sp, #28]
 80293a6:	2b00      	cmp	r3, #0
 80293a8:	f340 80b8 	ble.w	802951c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80293ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80293b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80293b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80293b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80293ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80293be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80293c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80293c6:	eef0 6a62 	vmov.f32	s13, s5
 80293ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80293ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80293d6:	ee16 4a90 	vmov	r4, s13
 80293da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80293de:	eef0 6a43 	vmov.f32	s13, s6
 80293e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80293e6:	ee12 2a90 	vmov	r2, s5
 80293ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80293ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80293f2:	ee13 2a10 	vmov	r2, s6
 80293f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80293f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80293fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80293fe:	931c      	str	r3, [sp, #112]	; 0x70
 8029400:	9b07      	ldr	r3, [sp, #28]
 8029402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029404:	3b01      	subs	r3, #1
 8029406:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802940a:	9307      	str	r3, [sp, #28]
 802940c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802940e:	ee16 6a90 	vmov	r6, s13
 8029412:	bf14      	ite	ne
 8029414:	461d      	movne	r5, r3
 8029416:	4615      	moveq	r5, r2
 8029418:	eeb0 3a67 	vmov.f32	s6, s15
 802941c:	eef0 2a47 	vmov.f32	s5, s14
 8029420:	e6f4      	b.n	802920c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8029422:	f111 0b01 	adds.w	fp, r1, #1
 8029426:	d48e      	bmi.n	8029346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029428:	45de      	cmp	lr, fp
 802942a:	db8c      	blt.n	8029346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802942c:	f110 0b01 	adds.w	fp, r0, #1
 8029430:	d489      	bmi.n	8029346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029432:	455b      	cmp	r3, fp
 8029434:	db87      	blt.n	8029346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029436:	b21b      	sxth	r3, r3
 8029438:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802943c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8029440:	9300      	str	r3, [sp, #0]
 8029442:	4642      	mov	r2, r8
 8029444:	fa0f f38e 	sxth.w	r3, lr
 8029448:	4649      	mov	r1, r9
 802944a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802944c:	f7ff fe4d 	bl	80290ea <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8029450:	e779      	b.n	8029346 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029452:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029454:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029458:	1420      	asrs	r0, r4, #16
 802945a:	1431      	asrs	r1, r6, #16
 802945c:	fb03 0101 	mla	r1, r3, r1, r0
 8029460:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029464:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029468:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802946c:	8841      	ldrh	r1, [r0, #2]
 802946e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029472:	f1be 0f00 	cmp.w	lr, #0
 8029476:	d00b      	beq.n	8029490 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8029478:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802947c:	3b01      	subs	r3, #1
 802947e:	005b      	lsls	r3, r3, #1
 8029480:	3302      	adds	r3, #2
 8029482:	eb00 0b03 	add.w	fp, r0, r3
 8029486:	5ac3      	ldrh	r3, [r0, r3]
 8029488:	930a      	str	r3, [sp, #40]	; 0x28
 802948a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802948e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029490:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029494:	fb12 f30e 	smulbb	r3, r2, lr
 8029498:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802949c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80294a0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80294a4:	10db      	asrs	r3, r3, #3
 80294a6:	ea40 000c 	orr.w	r0, r0, ip
 80294aa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80294ae:	f1ce 0c10 	rsb	ip, lr, #16
 80294b2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80294b6:	ebac 0c02 	sub.w	ip, ip, r2
 80294ba:	ea4b 0101 	orr.w	r1, fp, r1
 80294be:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80294c2:	4351      	muls	r1, r2
 80294c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80294c6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80294ca:	fb0c 1c00 	mla	ip, ip, r0, r1
 80294ce:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80294d2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80294d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80294d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80294da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80294de:	0412      	lsls	r2, r2, #16
 80294e0:	ea4b 0000 	orr.w	r0, fp, r0
 80294e4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80294e8:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80294ec:	fb03 c000 	mla	r0, r3, r0, ip
 80294f0:	ea42 0b0b 	orr.w	fp, r2, fp
 80294f4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80294f8:	fb03 000b 	mla	r0, r3, fp, r0
 80294fc:	0d43      	lsrs	r3, r0, #21
 80294fe:	0940      	lsrs	r0, r0, #5
 8029500:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029504:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029508:	4318      	orrs	r0, r3
 802950a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802950c:	f82a 0b02 	strh.w	r0, [sl], #2
 8029510:	441c      	add	r4, r3
 8029512:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029514:	f109 39ff 	add.w	r9, r9, #4294967295
 8029518:	441e      	add	r6, r3
 802951a:	e73c      	b.n	8029396 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802951c:	b00f      	add	sp, #60	; 0x3c
 802951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029522 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8029522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029526:	b085      	sub	sp, #20
 8029528:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802952c:	9102      	str	r1, [sp, #8]
 802952e:	2c00      	cmp	r4, #0
 8029530:	fb04 7103 	mla	r1, r4, r3, r7
 8029534:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8029538:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802953c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8029540:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029544:	f2c0 811b 	blt.w	802977e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029548:	45a6      	cmp	lr, r4
 802954a:	f340 8118 	ble.w	802977e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802954e:	2f00      	cmp	r7, #0
 8029550:	f2c0 8113 	blt.w	802977a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8029554:	42bb      	cmp	r3, r7
 8029556:	f340 8110 	ble.w	802977a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802955a:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802955e:	1c7a      	adds	r2, r7, #1
 8029560:	f100 8110 	bmi.w	8029784 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8029564:	4293      	cmp	r3, r2
 8029566:	f340 810d 	ble.w	8029784 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802956a:	2e00      	cmp	r6, #0
 802956c:	f000 810c 	beq.w	8029788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8029570:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029574:	3401      	adds	r4, #1
 8029576:	f100 810b 	bmi.w	8029790 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802957a:	45a6      	cmp	lr, r4
 802957c:	f340 8108 	ble.w	8029790 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8029580:	2800      	cmp	r0, #0
 8029582:	f000 8108 	beq.w	8029796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8029586:	2f00      	cmp	r7, #0
 8029588:	f2c0 8100 	blt.w	802978c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802958c:	42bb      	cmp	r3, r7
 802958e:	f340 80fd 	ble.w	802978c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8029592:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029596:	3701      	adds	r7, #1
 8029598:	f100 8100 	bmi.w	802979c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802959c:	42bb      	cmp	r3, r7
 802959e:	f340 80fd 	ble.w	802979c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80295a2:	2e00      	cmp	r6, #0
 80295a4:	f000 80fc 	beq.w	80297a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80295a8:	3301      	adds	r3, #1
 80295aa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80295ae:	b2b6      	uxth	r6, r6
 80295b0:	b280      	uxth	r0, r0
 80295b2:	fb00 fe06 	mul.w	lr, r0, r6
 80295b6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80295ba:	0136      	lsls	r6, r6, #4
 80295bc:	eba6 070e 	sub.w	r7, r6, lr
 80295c0:	b280      	uxth	r0, r0
 80295c2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80295c6:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80295ca:	b2bf      	uxth	r7, r7
 80295cc:	1a1b      	subs	r3, r3, r0
 80295ce:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80295d2:	b29b      	uxth	r3, r3
 80295d4:	fb0a f607 	mul.w	r6, sl, r7
 80295d8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80295dc:	fb0b 6603 	mla	r6, fp, r3, r6
 80295e0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80295e4:	fb00 6609 	mla	r6, r0, r9, r6
 80295e8:	fb0e 6608 	mla	r6, lr, r8, r6
 80295ec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80295f0:	9600      	str	r6, [sp, #0]
 80295f2:	2e00      	cmp	r6, #0
 80295f4:	f000 80be 	beq.w	8029774 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80295f8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80295fc:	fb0b fc0c 	mul.w	ip, fp, ip
 8029600:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029604:	fb0b f505 	mul.w	r5, fp, r5
 8029608:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802960c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8029610:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029614:	44dc      	add	ip, fp
 8029616:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802961a:	9501      	str	r5, [sp, #4]
 802961c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8029620:	9503      	str	r5, [sp, #12]
 8029622:	9d01      	ldr	r5, [sp, #4]
 8029624:	9e02      	ldr	r6, [sp, #8]
 8029626:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802962a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802962e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8029632:	fb0a fc0c 	mul.w	ip, sl, ip
 8029636:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802963a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802963e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8029642:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029646:	4465      	add	r5, ip
 8029648:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802964c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029650:	fb09 fc0c 	mul.w	ip, r9, ip
 8029654:	fb09 f904 	mul.w	r9, r9, r4
 8029658:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802965c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029660:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8029664:	fb08 f404 	mul.w	r4, r8, r4
 8029668:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802966c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029670:	fb08 f802 	mul.w	r8, r8, r2
 8029674:	fb0a fa01 	mul.w	sl, sl, r1
 8029678:	0a22      	lsrs	r2, r4, #8
 802967a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802967e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029682:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8029686:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802968a:	4414      	add	r4, r2
 802968c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8029690:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8029694:	0a2d      	lsrs	r5, r5, #8
 8029696:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802969a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802969e:	9a03      	ldr	r2, [sp, #12]
 80296a0:	8836      	ldrh	r6, [r6, #0]
 80296a2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80296a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80296aa:	437d      	muls	r5, r7
 80296ac:	4461      	add	r1, ip
 80296ae:	0a24      	lsrs	r4, r4, #8
 80296b0:	fb02 5503 	mla	r5, r2, r3, r5
 80296b4:	0a09      	lsrs	r1, r1, #8
 80296b6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80296ba:	fb04 540e 	mla	r4, r4, lr, r5
 80296be:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80296c2:	fb01 4100 	mla	r1, r1, r0, r4
 80296c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80296ca:	0a09      	lsrs	r1, r1, #8
 80296cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80296d0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80296d4:	fb07 f70a 	mul.w	r7, r7, sl
 80296d8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80296dc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80296e0:	fb03 7101 	mla	r1, r3, r1, r7
 80296e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80296e8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80296ec:	fb0e 1e08 	mla	lr, lr, r8, r1
 80296f0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80296f4:	fb00 e101 	mla	r1, r0, r1, lr
 80296f8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80296fc:	9a00      	ldr	r2, [sp, #0]
 80296fe:	b287      	uxth	r7, r0
 8029700:	437a      	muls	r2, r7
 8029702:	0a09      	lsrs	r1, r1, #8
 8029704:	1c53      	adds	r3, r2, #1
 8029706:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802970a:	4321      	orrs	r1, r4
 802970c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029710:	1235      	asrs	r5, r6, #8
 8029712:	0c0a      	lsrs	r2, r1, #16
 8029714:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029718:	b2db      	uxtb	r3, r3
 802971a:	fb12 f207 	smulbb	r2, r2, r7
 802971e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029722:	fb05 2503 	mla	r5, r5, r3, r2
 8029726:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802972a:	10f2      	asrs	r2, r6, #3
 802972c:	b2c8      	uxtb	r0, r1
 802972e:	00f6      	lsls	r6, r6, #3
 8029730:	fb14 f407 	smulbb	r4, r4, r7
 8029734:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029738:	b2f6      	uxtb	r6, r6
 802973a:	fb10 f007 	smulbb	r0, r0, r7
 802973e:	fb02 4203 	mla	r2, r2, r3, r4
 8029742:	b2ad      	uxth	r5, r5
 8029744:	fb06 0303 	mla	r3, r6, r3, r0
 8029748:	b299      	uxth	r1, r3
 802974a:	b294      	uxth	r4, r2
 802974c:	1c6b      	adds	r3, r5, #1
 802974e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029752:	1c62      	adds	r2, r4, #1
 8029754:	1c4b      	adds	r3, r1, #1
 8029756:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802975a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802975e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029762:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029766:	0952      	lsrs	r2, r2, #5
 8029768:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802976c:	432b      	orrs	r3, r5
 802976e:	4313      	orrs	r3, r2
 8029770:	9a02      	ldr	r2, [sp, #8]
 8029772:	8013      	strh	r3, [r2, #0]
 8029774:	b005      	add	sp, #20
 8029776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802977a:	2500      	movs	r5, #0
 802977c:	e6ef      	b.n	802955e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802977e:	2100      	movs	r1, #0
 8029780:	460d      	mov	r5, r1
 8029782:	e6f7      	b.n	8029574 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029784:	2100      	movs	r1, #0
 8029786:	e6f5      	b.n	8029574 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029788:	4631      	mov	r1, r6
 802978a:	e6f3      	b.n	8029574 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802978c:	2400      	movs	r4, #0
 802978e:	e702      	b.n	8029596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8029790:	2200      	movs	r2, #0
 8029792:	4614      	mov	r4, r2
 8029794:	e70b      	b.n	80295ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029796:	4602      	mov	r2, r0
 8029798:	4604      	mov	r4, r0
 802979a:	e708      	b.n	80295ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802979c:	2200      	movs	r2, #0
 802979e:	e706      	b.n	80295ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80297a0:	4632      	mov	r2, r6
 80297a2:	e704      	b.n	80295ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080297a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80297a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297a8:	b09d      	sub	sp, #116	; 0x74
 80297aa:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80297ae:	9219      	str	r2, [sp, #100]	; 0x64
 80297b0:	9307      	str	r3, [sp, #28]
 80297b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80297b4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80297b8:	931a      	str	r3, [sp, #104]	; 0x68
 80297ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80297bc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80297c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80297c2:	6850      	ldr	r0, [r2, #4]
 80297c4:	6812      	ldr	r2, [r2, #0]
 80297c6:	fb00 1303 	mla	r3, r0, r3, r1
 80297ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80297ce:	930a      	str	r3, [sp, #40]	; 0x28
 80297d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80297d2:	681b      	ldr	r3, [r3, #0]
 80297d4:	9310      	str	r3, [sp, #64]	; 0x40
 80297d6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80297da:	930b      	str	r3, [sp, #44]	; 0x2c
 80297dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80297de:	2b00      	cmp	r3, #0
 80297e0:	dc03      	bgt.n	80297ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80297e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80297e4:	2b00      	cmp	r3, #0
 80297e6:	f340 8375 	ble.w	8029ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80297ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80297ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80297f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80297f4:	1e48      	subs	r0, r1, #1
 80297f6:	1e57      	subs	r7, r2, #1
 80297f8:	9b07      	ldr	r3, [sp, #28]
 80297fa:	2b00      	cmp	r3, #0
 80297fc:	f340 818e 	ble.w	8029b1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8029800:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029804:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029808:	d406      	bmi.n	8029818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802980a:	4584      	cmp	ip, r0
 802980c:	da04      	bge.n	8029818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802980e:	2b00      	cmp	r3, #0
 8029810:	db02      	blt.n	8029818 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029812:	42bb      	cmp	r3, r7
 8029814:	f2c0 8183 	blt.w	8029b1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8029818:	f11c 0c01 	adds.w	ip, ip, #1
 802981c:	f100 8173 	bmi.w	8029b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029820:	4561      	cmp	r1, ip
 8029822:	f2c0 8170 	blt.w	8029b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029826:	3301      	adds	r3, #1
 8029828:	f100 816d 	bmi.w	8029b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802982c:	429a      	cmp	r2, r3
 802982e:	f2c0 816a 	blt.w	8029b06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029832:	9b07      	ldr	r3, [sp, #28]
 8029834:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029836:	9318      	str	r3, [sp, #96]	; 0x60
 8029838:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802983a:	2b00      	cmp	r3, #0
 802983c:	f340 818c 	ble.w	8029b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8029840:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8029842:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029844:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029848:	689b      	ldr	r3, [r3, #8]
 802984a:	1422      	asrs	r2, r4, #16
 802984c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029850:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029854:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029858:	f100 81cd 	bmi.w	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802985c:	f103 38ff 	add.w	r8, r3, #4294967295
 8029860:	4542      	cmp	r2, r8
 8029862:	f280 81c8 	bge.w	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029866:	f1bc 0f00 	cmp.w	ip, #0
 802986a:	f2c0 81c4 	blt.w	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802986e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029872:	45c4      	cmp	ip, r8
 8029874:	f280 81bf 	bge.w	8029bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029878:	b21b      	sxth	r3, r3
 802987a:	fb0c 2203 	mla	r2, ip, r3, r2
 802987e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029880:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029884:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029888:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802988c:	2800      	cmp	r0, #0
 802988e:	f000 81a9 	beq.w	8029be4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8029892:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029896:	950c      	str	r5, [sp, #48]	; 0x30
 8029898:	0e2d      	lsrs	r5, r5, #24
 802989a:	9513      	str	r5, [sp, #76]	; 0x4c
 802989c:	b181      	cbz	r1, 80298c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802989e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80298a2:	3b01      	subs	r3, #1
 80298a4:	009b      	lsls	r3, r3, #2
 80298a6:	3304      	adds	r3, #4
 80298a8:	eb08 0c03 	add.w	ip, r8, r3
 80298ac:	f858 3003 	ldr.w	r3, [r8, r3]
 80298b0:	9308      	str	r3, [sp, #32]
 80298b2:	0e1b      	lsrs	r3, r3, #24
 80298b4:	9311      	str	r3, [sp, #68]	; 0x44
 80298b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80298ba:	930d      	str	r3, [sp, #52]	; 0x34
 80298bc:	0e1b      	lsrs	r3, r3, #24
 80298be:	9314      	str	r3, [sp, #80]	; 0x50
 80298c0:	b280      	uxth	r0, r0
 80298c2:	b289      	uxth	r1, r1
 80298c4:	fb00 f901 	mul.w	r9, r0, r1
 80298c8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80298cc:	0100      	lsls	r0, r0, #4
 80298ce:	eba0 0809 	sub.w	r8, r0, r9
 80298d2:	b289      	uxth	r1, r1
 80298d4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80298d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80298da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80298dc:	fa1f f888 	uxth.w	r8, r8
 80298e0:	1a5b      	subs	r3, r3, r1
 80298e2:	b29b      	uxth	r3, r3
 80298e4:	fb08 f000 	mul.w	r0, r8, r0
 80298e8:	fb03 000e 	mla	r0, r3, lr, r0
 80298ec:	fb01 0005 	mla	r0, r1, r5, r0
 80298f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80298f2:	fb09 0005 	mla	r0, r9, r5, r0
 80298f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80298fa:	2800      	cmp	r0, #0
 80298fc:	f000 80fa 	beq.w	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029900:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029904:	d01b      	beq.n	802993e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029906:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802990a:	fb0e fa0a 	mul.w	sl, lr, sl
 802990e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029912:	fb0e fe02 	mul.w	lr, lr, r2
 8029916:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802991a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802991e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029922:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029926:	4452      	add	r2, sl
 8029928:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802992c:	0a12      	lsrs	r2, r2, #8
 802992e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029932:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029936:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802993a:	ea42 020c 	orr.w	r2, r2, ip
 802993e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029940:	2dff      	cmp	r5, #255	; 0xff
 8029942:	d021      	beq.n	8029988 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029944:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029946:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802994a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802994c:	fb05 fb0b 	mul.w	fp, r5, fp
 8029950:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029952:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029956:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029958:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802995c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029960:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029964:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029968:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802996c:	44de      	add	lr, fp
 802996e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029972:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029976:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802997a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802997e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029982:	ea4e 050a 	orr.w	r5, lr, sl
 8029986:	950c      	str	r5, [sp, #48]	; 0x30
 8029988:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802998a:	2dff      	cmp	r5, #255	; 0xff
 802998c:	d021      	beq.n	80299d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802998e:	9d08      	ldr	r5, [sp, #32]
 8029990:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029994:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029996:	fb05 fb0b 	mul.w	fp, r5, fp
 802999a:	9d08      	ldr	r5, [sp, #32]
 802999c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80299a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80299a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80299a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80299aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80299ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80299b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80299b6:	44de      	add	lr, fp
 80299b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80299bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80299c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80299c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80299c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80299cc:	ea4e 050a 	orr.w	r5, lr, sl
 80299d0:	9508      	str	r5, [sp, #32]
 80299d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80299d4:	2dff      	cmp	r5, #255	; 0xff
 80299d6:	d021      	beq.n	8029a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80299d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80299da:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80299de:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80299e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80299e4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80299e6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80299ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80299ec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80299f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80299f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80299f8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80299fc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029a00:	44de      	add	lr, fp
 8029a02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029a06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029a0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029a0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029a12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029a16:	ea4e 050a 	orr.w	r5, lr, sl
 8029a1a:	950d      	str	r5, [sp, #52]	; 0x34
 8029a1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029a1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029a22:	9d08      	ldr	r5, [sp, #32]
 8029a24:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8029a28:	fb08 fc0c 	mul.w	ip, r8, ip
 8029a2c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029a30:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029a34:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029a36:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029a3a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029a40:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029a44:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029a48:	fb08 f80e 	mul.w	r8, r8, lr
 8029a4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029a50:	fb03 8202 	mla	r2, r3, r2, r8
 8029a54:	9b08      	ldr	r3, [sp, #32]
 8029a56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029a58:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8029a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029a5e:	fb01 220a 	mla	r2, r1, sl, r2
 8029a62:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8029a66:	fb09 2901 	mla	r9, r9, r1, r2
 8029a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029a6c:	883b      	ldrh	r3, [r7, #0]
 8029a6e:	4342      	muls	r2, r0
 8029a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a74:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a78:	1c50      	adds	r0, r2, #1
 8029a7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029a7e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029a82:	ea4c 0c09 	orr.w	ip, ip, r9
 8029a86:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029a8a:	1219      	asrs	r1, r3, #8
 8029a8c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029a90:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029a94:	b2c0      	uxtb	r0, r0
 8029a96:	fb12 f205 	smulbb	r2, r2, r5
 8029a9a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029a9e:	fb01 2100 	mla	r1, r1, r0, r2
 8029aa2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029aa6:	10da      	asrs	r2, r3, #3
 8029aa8:	fa5f fc8c 	uxtb.w	ip, ip
 8029aac:	00db      	lsls	r3, r3, #3
 8029aae:	fb1c fc05 	smulbb	ip, ip, r5
 8029ab2:	b2db      	uxtb	r3, r3
 8029ab4:	b289      	uxth	r1, r1
 8029ab6:	fb03 c300 	mla	r3, r3, r0, ip
 8029aba:	fa1f fc83 	uxth.w	ip, r3
 8029abe:	1c4b      	adds	r3, r1, #1
 8029ac0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029ac4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029ac8:	fb1e fe05 	smulbb	lr, lr, r5
 8029acc:	f10c 0301 	add.w	r3, ip, #1
 8029ad0:	fb02 e200 	mla	r2, r2, r0, lr
 8029ad4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029ad8:	b292      	uxth	r2, r2
 8029ada:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029ade:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029ae2:	430b      	orrs	r3, r1
 8029ae4:	1c51      	adds	r1, r2, #1
 8029ae6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029aea:	0952      	lsrs	r2, r2, #5
 8029aec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029af0:	4313      	orrs	r3, r2
 8029af2:	803b      	strh	r3, [r7, #0]
 8029af4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029af6:	441c      	add	r4, r3
 8029af8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029afa:	441e      	add	r6, r3
 8029afc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029afe:	3b01      	subs	r3, #1
 8029b00:	3702      	adds	r7, #2
 8029b02:	9318      	str	r3, [sp, #96]	; 0x60
 8029b04:	e698      	b.n	8029838 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029b06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029b08:	441c      	add	r4, r3
 8029b0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029b0c:	441e      	add	r6, r3
 8029b0e:	9b07      	ldr	r3, [sp, #28]
 8029b10:	3b01      	subs	r3, #1
 8029b12:	9307      	str	r3, [sp, #28]
 8029b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029b16:	3302      	adds	r3, #2
 8029b18:	930a      	str	r3, [sp, #40]	; 0x28
 8029b1a:	e66d      	b.n	80297f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8029b1c:	d023      	beq.n	8029b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8029b1e:	9b07      	ldr	r3, [sp, #28]
 8029b20:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8029b22:	3b01      	subs	r3, #1
 8029b24:	fb00 4003 	mla	r0, r0, r3, r4
 8029b28:	1400      	asrs	r0, r0, #16
 8029b2a:	f53f ae82 	bmi.w	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b2e:	3901      	subs	r1, #1
 8029b30:	4288      	cmp	r0, r1
 8029b32:	f6bf ae7e 	bge.w	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b36:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8029b38:	fb01 6303 	mla	r3, r1, r3, r6
 8029b3c:	141b      	asrs	r3, r3, #16
 8029b3e:	f53f ae78 	bmi.w	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b42:	3a01      	subs	r2, #1
 8029b44:	4293      	cmp	r3, r2
 8029b46:	f6bf ae74 	bge.w	8029832 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b4a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029b4e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029b52:	f1bb 0f00 	cmp.w	fp, #0
 8029b56:	dc6c      	bgt.n	8029c32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029b58:	9b07      	ldr	r3, [sp, #28]
 8029b5a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029b60:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029b64:	930a      	str	r3, [sp, #40]	; 0x28
 8029b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029b68:	2b00      	cmp	r3, #0
 8029b6a:	f340 81b3 	ble.w	8029ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029b6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029b72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029b7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029b7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029b80:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029b84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029b88:	eef0 6a62 	vmov.f32	s13, s5
 8029b8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029b90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029b98:	ee16 4a90 	vmov	r4, s13
 8029b9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029ba0:	eef0 6a43 	vmov.f32	s13, s6
 8029ba4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029ba8:	ee12 2a90 	vmov	r2, s5
 8029bac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bb4:	ee13 2a10 	vmov	r2, s6
 8029bb8:	9329      	str	r3, [sp, #164]	; 0xa4
 8029bba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bc0:	932a      	str	r3, [sp, #168]	; 0xa8
 8029bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029bc4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8029bc6:	3b01      	subs	r3, #1
 8029bc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029bcc:	9317      	str	r3, [sp, #92]	; 0x5c
 8029bce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8029bd0:	bf08      	it	eq
 8029bd2:	4613      	moveq	r3, r2
 8029bd4:	ee16 6a90 	vmov	r6, s13
 8029bd8:	9307      	str	r3, [sp, #28]
 8029bda:	eeb0 3a67 	vmov.f32	s6, s15
 8029bde:	eef0 2a47 	vmov.f32	s5, s14
 8029be2:	e5fb      	b.n	80297dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029be4:	2900      	cmp	r1, #0
 8029be6:	f43f ae6b 	beq.w	80298c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029bea:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029bee:	9308      	str	r3, [sp, #32]
 8029bf0:	0e1b      	lsrs	r3, r3, #24
 8029bf2:	9311      	str	r3, [sp, #68]	; 0x44
 8029bf4:	e664      	b.n	80298c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029bf6:	f112 0801 	adds.w	r8, r2, #1
 8029bfa:	f53f af7b 	bmi.w	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029bfe:	4543      	cmp	r3, r8
 8029c00:	f6ff af78 	blt.w	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c04:	f11c 0801 	adds.w	r8, ip, #1
 8029c08:	f53f af74 	bmi.w	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c0c:	45c6      	cmp	lr, r8
 8029c0e:	f6ff af71 	blt.w	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c12:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029c14:	9201      	str	r2, [sp, #4]
 8029c16:	fa0f f28e 	sxth.w	r2, lr
 8029c1a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029c1e:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029c22:	9200      	str	r2, [sp, #0]
 8029c24:	b21b      	sxth	r3, r3
 8029c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029c28:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029c2a:	4639      	mov	r1, r7
 8029c2c:	f7ff fc79 	bl	8029522 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029c30:	e760      	b.n	8029af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029c34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029c36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029c3a:	1427      	asrs	r7, r4, #16
 8029c3c:	1433      	asrs	r3, r6, #16
 8029c3e:	fb01 7303 	mla	r3, r1, r3, r7
 8029c42:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029c46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029c4a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029c4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029c52:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029c56:	2a00      	cmp	r2, #0
 8029c58:	f000 8133 	beq.w	8029ec2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029c5c:	687d      	ldr	r5, [r7, #4]
 8029c5e:	950e      	str	r5, [sp, #56]	; 0x38
 8029c60:	0e2d      	lsrs	r5, r5, #24
 8029c62:	9515      	str	r5, [sp, #84]	; 0x54
 8029c64:	b178      	cbz	r0, 8029c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029c66:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8029c6a:	3901      	subs	r1, #1
 8029c6c:	0089      	lsls	r1, r1, #2
 8029c6e:	3104      	adds	r1, #4
 8029c70:	eb07 0e01 	add.w	lr, r7, r1
 8029c74:	5879      	ldr	r1, [r7, r1]
 8029c76:	9109      	str	r1, [sp, #36]	; 0x24
 8029c78:	0e09      	lsrs	r1, r1, #24
 8029c7a:	9112      	str	r1, [sp, #72]	; 0x48
 8029c7c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029c80:	910f      	str	r1, [sp, #60]	; 0x3c
 8029c82:	0e09      	lsrs	r1, r1, #24
 8029c84:	9116      	str	r1, [sp, #88]	; 0x58
 8029c86:	b292      	uxth	r2, r2
 8029c88:	b280      	uxth	r0, r0
 8029c8a:	fb02 f800 	mul.w	r8, r2, r0
 8029c8e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029c92:	0112      	lsls	r2, r2, #4
 8029c94:	eba2 0e08 	sub.w	lr, r2, r8
 8029c98:	b280      	uxth	r0, r0
 8029c9a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8029c9e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8029ca0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029ca2:	fa1f fe8e 	uxth.w	lr, lr
 8029ca6:	1a12      	subs	r2, r2, r0
 8029ca8:	b292      	uxth	r2, r2
 8029caa:	fb0e f101 	mul.w	r1, lr, r1
 8029cae:	fb02 110c 	mla	r1, r2, ip, r1
 8029cb2:	fb00 1105 	mla	r1, r0, r5, r1
 8029cb6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029cb8:	fb08 1105 	mla	r1, r8, r5, r1
 8029cbc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029cc0:	2900      	cmp	r1, #0
 8029cc2:	f000 80f5 	beq.w	8029eb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8029cc6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029cca:	d019      	beq.n	8029d00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8029ccc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029cd0:	fb0c fa0a 	mul.w	sl, ip, sl
 8029cd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029cd8:	fb0c fc03 	mul.w	ip, ip, r3
 8029cdc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029ce0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029ce4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029ce8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029cec:	4453      	add	r3, sl
 8029cee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029cf2:	0a1b      	lsrs	r3, r3, #8
 8029cf4:	0a3f      	lsrs	r7, r7, #8
 8029cf6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029cfa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029cfe:	433b      	orrs	r3, r7
 8029d00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029d02:	2dff      	cmp	r5, #255	; 0xff
 8029d04:	d020      	beq.n	8029d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8029d06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d08:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029d0e:	436f      	muls	r7, r5
 8029d10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d12:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d16:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029d18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d1c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d20:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029d24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d28:	44bc      	add	ip, r7
 8029d2a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029d2e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d42:	ea4c 050a 	orr.w	r5, ip, sl
 8029d46:	950e      	str	r5, [sp, #56]	; 0x38
 8029d48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d4a:	2dff      	cmp	r5, #255	; 0xff
 8029d4c:	d020      	beq.n	8029d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029d4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d50:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d56:	436f      	muls	r7, r5
 8029d58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d5a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029d5e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029d60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d64:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d68:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029d6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d70:	44bc      	add	ip, r7
 8029d72:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029d76:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029d86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029d8a:	ea4c 050a 	orr.w	r5, ip, sl
 8029d8e:	9509      	str	r5, [sp, #36]	; 0x24
 8029d90:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d92:	2dff      	cmp	r5, #255	; 0xff
 8029d94:	d020      	beq.n	8029dd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8029d96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029d98:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029d9e:	436f      	muls	r7, r5
 8029da0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029da2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029da6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8029da8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029dac:	fb05 fa0a 	mul.w	sl, r5, sl
 8029db0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029db4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029db8:	44bc      	add	ip, r7
 8029dba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029dbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029dc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029dc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029dca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029dce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029dd2:	ea4c 050a 	orr.w	r5, ip, sl
 8029dd6:	950f      	str	r5, [sp, #60]	; 0x3c
 8029dd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029dda:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029dde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029de0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029de4:	fb0e f707 	mul.w	r7, lr, r7
 8029de8:	fb02 770c 	mla	r7, r2, ip, r7
 8029dec:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029df0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029df2:	fb00 770c 	mla	r7, r0, ip, r7
 8029df6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029dfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029dfc:	fb08 770c 	mla	r7, r8, ip, r7
 8029e00:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029e04:	fb0e fe0c 	mul.w	lr, lr, ip
 8029e08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029e0c:	fb02 e303 	mla	r3, r2, r3, lr
 8029e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029e12:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029e14:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8029e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029e1a:	fb00 330a 	mla	r3, r0, sl, r3
 8029e1e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029e22:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029e28:	f8b9 0000 	ldrh.w	r0, [r9]
 8029e2c:	4359      	muls	r1, r3
 8029e2e:	0a3f      	lsrs	r7, r7, #8
 8029e30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029e34:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029e38:	1c4b      	adds	r3, r1, #1
 8029e3a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029e3e:	ea47 070c 	orr.w	r7, r7, ip
 8029e42:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029e46:	1202      	asrs	r2, r0, #8
 8029e48:	0c3b      	lsrs	r3, r7, #16
 8029e4a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029e4e:	b2c9      	uxtb	r1, r1
 8029e50:	fb13 f305 	smulbb	r3, r3, r5
 8029e54:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8029e58:	fb02 3201 	mla	r2, r2, r1, r3
 8029e5c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029e60:	10c3      	asrs	r3, r0, #3
 8029e62:	b2ff      	uxtb	r7, r7
 8029e64:	00c0      	lsls	r0, r0, #3
 8029e66:	b2c0      	uxtb	r0, r0
 8029e68:	fb17 f705 	smulbb	r7, r7, r5
 8029e6c:	fb00 7001 	mla	r0, r0, r1, r7
 8029e70:	b292      	uxth	r2, r2
 8029e72:	fb1c fc05 	smulbb	ip, ip, r5
 8029e76:	b280      	uxth	r0, r0
 8029e78:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029e7c:	fb03 c301 	mla	r3, r3, r1, ip
 8029e80:	1c51      	adds	r1, r2, #1
 8029e82:	f100 0c01 	add.w	ip, r0, #1
 8029e86:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029e8a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029e8e:	b29b      	uxth	r3, r3
 8029e90:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029e94:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8029e98:	ea4c 0202 	orr.w	r2, ip, r2
 8029e9c:	f103 0c01 	add.w	ip, r3, #1
 8029ea0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029ea4:	095b      	lsrs	r3, r3, #5
 8029ea6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029eaa:	431a      	orrs	r2, r3
 8029eac:	f8a9 2000 	strh.w	r2, [r9]
 8029eb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8029eb2:	441c      	add	r4, r3
 8029eb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8029eb6:	f109 0902 	add.w	r9, r9, #2
 8029eba:	441e      	add	r6, r3
 8029ebc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029ec0:	e647      	b.n	8029b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8029ec2:	2800      	cmp	r0, #0
 8029ec4:	f43f aedf 	beq.w	8029c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029ec8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8029ece:	0e09      	lsrs	r1, r1, #24
 8029ed0:	9112      	str	r1, [sp, #72]	; 0x48
 8029ed2:	e6d8      	b.n	8029c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029ed4:	b01d      	add	sp, #116	; 0x74
 8029ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029eda <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029eda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ede:	b085      	sub	sp, #20
 8029ee0:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8029ee4:	9102      	str	r1, [sp, #8]
 8029ee6:	2c00      	cmp	r4, #0
 8029ee8:	fb04 7103 	mla	r1, r4, r3, r7
 8029eec:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8029ef0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8029ef4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8029ef8:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029efc:	f2c0 810c 	blt.w	802a118 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029f00:	45a6      	cmp	lr, r4
 8029f02:	f340 8109 	ble.w	802a118 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029f06:	2f00      	cmp	r7, #0
 8029f08:	f2c0 8104 	blt.w	802a114 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029f0c:	42bb      	cmp	r3, r7
 8029f0e:	f340 8101 	ble.w	802a114 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029f12:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029f16:	1c7a      	adds	r2, r7, #1
 8029f18:	f100 8101 	bmi.w	802a11e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029f1c:	4293      	cmp	r3, r2
 8029f1e:	f340 80fe 	ble.w	802a11e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029f22:	2e00      	cmp	r6, #0
 8029f24:	f000 80fd 	beq.w	802a122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029f28:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029f2c:	3401      	adds	r4, #1
 8029f2e:	f100 80fc 	bmi.w	802a12a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029f32:	45a6      	cmp	lr, r4
 8029f34:	f340 80f9 	ble.w	802a12a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029f38:	2800      	cmp	r0, #0
 8029f3a:	f000 80f9 	beq.w	802a130 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8029f3e:	2f00      	cmp	r7, #0
 8029f40:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8029f44:	f2c0 80ef 	blt.w	802a126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029f48:	42bb      	cmp	r3, r7
 8029f4a:	f340 80ec 	ble.w	802a126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029f4e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029f52:	3701      	adds	r7, #1
 8029f54:	f100 80ef 	bmi.w	802a136 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029f58:	42bb      	cmp	r3, r7
 8029f5a:	f340 80ec 	ble.w	802a136 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029f5e:	2e00      	cmp	r6, #0
 8029f60:	f000 80eb 	beq.w	802a13a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8029f64:	6852      	ldr	r2, [r2, #4]
 8029f66:	b2b6      	uxth	r6, r6
 8029f68:	b280      	uxth	r0, r0
 8029f6a:	fb00 fe06 	mul.w	lr, r0, r6
 8029f6e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029f72:	0136      	lsls	r6, r6, #4
 8029f74:	eba6 070e 	sub.w	r7, r6, lr
 8029f78:	b280      	uxth	r0, r0
 8029f7a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8029f7e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029f82:	b2bf      	uxth	r7, r7
 8029f84:	1a1b      	subs	r3, r3, r0
 8029f86:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029f8a:	b29b      	uxth	r3, r3
 8029f8c:	fb07 f60a 	mul.w	r6, r7, sl
 8029f90:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029f94:	fb0b 6603 	mla	r6, fp, r3, r6
 8029f98:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029f9c:	fb00 6609 	mla	r6, r0, r9, r6
 8029fa0:	fb0e 6608 	mla	r6, lr, r8, r6
 8029fa4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029fa8:	9600      	str	r6, [sp, #0]
 8029faa:	2e00      	cmp	r6, #0
 8029fac:	f000 80af 	beq.w	802a10e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8029fb0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029fb4:	fb0b fc0c 	mul.w	ip, fp, ip
 8029fb8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029fbc:	fb0b f505 	mul.w	r5, fp, r5
 8029fc0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029fc4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8029fc8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029fcc:	44dc      	add	ip, fp
 8029fce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029fd2:	9501      	str	r5, [sp, #4]
 8029fd4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8029fd8:	9503      	str	r5, [sp, #12]
 8029fda:	9d01      	ldr	r5, [sp, #4]
 8029fdc:	9e02      	ldr	r6, [sp, #8]
 8029fde:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8029fe2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029fe6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8029fea:	fb0a fc0c 	mul.w	ip, sl, ip
 8029fee:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029ff2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8029ff6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8029ffa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029ffe:	4465      	add	r5, ip
 802a000:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802a004:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a008:	fb09 fc0c 	mul.w	ip, r9, ip
 802a00c:	fb09 f904 	mul.w	r9, r9, r4
 802a010:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802a014:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802a018:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802a01c:	fb08 f404 	mul.w	r4, r8, r4
 802a020:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802a024:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a028:	fb08 f802 	mul.w	r8, r8, r2
 802a02c:	fb0a fa01 	mul.w	sl, sl, r1
 802a030:	0a22      	lsrs	r2, r4, #8
 802a032:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802a036:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a03a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802a03e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802a042:	4414      	add	r4, r2
 802a044:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802a048:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802a04c:	0a2d      	lsrs	r5, r5, #8
 802a04e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802a052:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802a056:	9a03      	ldr	r2, [sp, #12]
 802a058:	8836      	ldrh	r6, [r6, #0]
 802a05a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802a05e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802a062:	437d      	muls	r5, r7
 802a064:	4461      	add	r1, ip
 802a066:	0a24      	lsrs	r4, r4, #8
 802a068:	fb02 5503 	mla	r5, r2, r3, r5
 802a06c:	0a09      	lsrs	r1, r1, #8
 802a06e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a072:	fb04 540e 	mla	r4, r4, lr, r5
 802a076:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802a07a:	fb01 4100 	mla	r1, r1, r0, r4
 802a07e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a082:	0a09      	lsrs	r1, r1, #8
 802a084:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a088:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802a08c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a090:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802a094:	fb07 f70a 	mul.w	r7, r7, sl
 802a098:	fb03 7101 	mla	r1, r3, r1, r7
 802a09c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a0a0:	9b00      	ldr	r3, [sp, #0]
 802a0a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a0a6:	fb0e 1e08 	mla	lr, lr, r8, r1
 802a0aa:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802a0ae:	fb00 e101 	mla	r1, r0, r1, lr
 802a0b2:	43da      	mvns	r2, r3
 802a0b4:	1233      	asrs	r3, r6, #8
 802a0b6:	b2d2      	uxtb	r2, r2
 802a0b8:	10f0      	asrs	r0, r6, #3
 802a0ba:	0a09      	lsrs	r1, r1, #8
 802a0bc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a0c0:	00f6      	lsls	r6, r6, #3
 802a0c2:	4353      	muls	r3, r2
 802a0c4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802a0c8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a0cc:	b2f6      	uxtb	r6, r6
 802a0ce:	4321      	orrs	r1, r4
 802a0d0:	4350      	muls	r0, r2
 802a0d2:	4356      	muls	r6, r2
 802a0d4:	1c5a      	adds	r2, r3, #1
 802a0d6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a0da:	0c0b      	lsrs	r3, r1, #16
 802a0dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a0e0:	1c42      	adds	r2, r0, #1
 802a0e2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a0e6:	0a0a      	lsrs	r2, r1, #8
 802a0e8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a0ec:	021b      	lsls	r3, r3, #8
 802a0ee:	00d2      	lsls	r2, r2, #3
 802a0f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a0f4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a0f8:	4313      	orrs	r3, r2
 802a0fa:	1c72      	adds	r2, r6, #1
 802a0fc:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802a100:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802a104:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a108:	4319      	orrs	r1, r3
 802a10a:	9b02      	ldr	r3, [sp, #8]
 802a10c:	8019      	strh	r1, [r3, #0]
 802a10e:	b005      	add	sp, #20
 802a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a114:	2500      	movs	r5, #0
 802a116:	e6fe      	b.n	8029f16 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802a118:	2100      	movs	r1, #0
 802a11a:	460d      	mov	r5, r1
 802a11c:	e706      	b.n	8029f2c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a11e:	2100      	movs	r1, #0
 802a120:	e704      	b.n	8029f2c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a122:	4631      	mov	r1, r6
 802a124:	e702      	b.n	8029f2c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a126:	2400      	movs	r4, #0
 802a128:	e713      	b.n	8029f52 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802a12a:	2200      	movs	r2, #0
 802a12c:	4614      	mov	r4, r2
 802a12e:	e71a      	b.n	8029f66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a130:	4602      	mov	r2, r0
 802a132:	4604      	mov	r4, r0
 802a134:	e717      	b.n	8029f66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a136:	2200      	movs	r2, #0
 802a138:	e715      	b.n	8029f66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a13a:	4632      	mov	r2, r6
 802a13c:	e713      	b.n	8029f66 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802a140 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a144:	b09b      	sub	sp, #108	; 0x6c
 802a146:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802a14a:	9218      	str	r2, [sp, #96]	; 0x60
 802a14c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a14e:	9116      	str	r1, [sp, #88]	; 0x58
 802a150:	9307      	str	r3, [sp, #28]
 802a152:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a156:	9019      	str	r0, [sp, #100]	; 0x64
 802a158:	6850      	ldr	r0, [r2, #4]
 802a15a:	6812      	ldr	r2, [r2, #0]
 802a15c:	fb00 1303 	mla	r3, r0, r3, r1
 802a160:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a164:	930a      	str	r3, [sp, #40]	; 0x28
 802a166:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a168:	681b      	ldr	r3, [r3, #0]
 802a16a:	930f      	str	r3, [sp, #60]	; 0x3c
 802a16c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a16e:	2b00      	cmp	r3, #0
 802a170:	dc03      	bgt.n	802a17a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a172:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a174:	2b00      	cmp	r3, #0
 802a176:	f340 8386 	ble.w	802a886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802a17a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a17c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a180:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a184:	1e48      	subs	r0, r1, #1
 802a186:	1e57      	subs	r7, r2, #1
 802a188:	9b07      	ldr	r3, [sp, #28]
 802a18a:	2b00      	cmp	r3, #0
 802a18c:	f340 8166 	ble.w	802a45c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a190:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a194:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a198:	d406      	bmi.n	802a1a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a19a:	4584      	cmp	ip, r0
 802a19c:	da04      	bge.n	802a1a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	db02      	blt.n	802a1a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a1a2:	42bb      	cmp	r3, r7
 802a1a4:	f2c0 815b 	blt.w	802a45e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802a1a8:	f11c 0c01 	adds.w	ip, ip, #1
 802a1ac:	f100 814b 	bmi.w	802a446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1b0:	4561      	cmp	r1, ip
 802a1b2:	f2c0 8148 	blt.w	802a446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1b6:	3301      	adds	r3, #1
 802a1b8:	f100 8145 	bmi.w	802a446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1bc:	429a      	cmp	r2, r3
 802a1be:	f2c0 8142 	blt.w	802a446 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1c2:	9b07      	ldr	r3, [sp, #28]
 802a1c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a1c6:	9317      	str	r3, [sp, #92]	; 0x5c
 802a1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a1ca:	2b00      	cmp	r3, #0
 802a1cc:	f340 8165 	ble.w	802a49a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802a1d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802a1d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a1d4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a1d8:	689b      	ldr	r3, [r3, #8]
 802a1da:	1422      	asrs	r2, r4, #16
 802a1dc:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a1e0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a1e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a1e8:	f100 81d5 	bmi.w	802a596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1ec:	f103 38ff 	add.w	r8, r3, #4294967295
 802a1f0:	4542      	cmp	r2, r8
 802a1f2:	f280 81d0 	bge.w	802a596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1f6:	f1bc 0f00 	cmp.w	ip, #0
 802a1fa:	f2c0 81cc 	blt.w	802a596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1fe:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a202:	45c4      	cmp	ip, r8
 802a204:	f280 81c7 	bge.w	802a596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a208:	b21b      	sxth	r3, r3
 802a20a:	fb0c 2203 	mla	r2, ip, r3, r2
 802a20e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a210:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a214:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a218:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a21c:	2900      	cmp	r1, #0
 802a21e:	f000 8182 	beq.w	802a526 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802a222:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a226:	950b      	str	r5, [sp, #44]	; 0x2c
 802a228:	0e2d      	lsrs	r5, r5, #24
 802a22a:	9512      	str	r5, [sp, #72]	; 0x48
 802a22c:	b180      	cbz	r0, 802a250 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a22e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a232:	3b01      	subs	r3, #1
 802a234:	009b      	lsls	r3, r3, #2
 802a236:	3304      	adds	r3, #4
 802a238:	eb08 0c03 	add.w	ip, r8, r3
 802a23c:	f858 3003 	ldr.w	r3, [r8, r3]
 802a240:	9308      	str	r3, [sp, #32]
 802a242:	0e1b      	lsrs	r3, r3, #24
 802a244:	9310      	str	r3, [sp, #64]	; 0x40
 802a246:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a24a:	930c      	str	r3, [sp, #48]	; 0x30
 802a24c:	0e1b      	lsrs	r3, r3, #24
 802a24e:	9313      	str	r3, [sp, #76]	; 0x4c
 802a250:	b289      	uxth	r1, r1
 802a252:	b280      	uxth	r0, r0
 802a254:	fb01 f900 	mul.w	r9, r1, r0
 802a258:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a25c:	0109      	lsls	r1, r1, #4
 802a25e:	eba1 0809 	sub.w	r8, r1, r9
 802a262:	b280      	uxth	r0, r0
 802a264:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a268:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a26a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a26c:	fa1f f888 	uxth.w	r8, r8
 802a270:	1a09      	subs	r1, r1, r0
 802a272:	b289      	uxth	r1, r1
 802a274:	fb08 f303 	mul.w	r3, r8, r3
 802a278:	fb01 330e 	mla	r3, r1, lr, r3
 802a27c:	fb00 3305 	mla	r3, r0, r5, r3
 802a280:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a282:	fb09 3305 	mla	r3, r9, r5, r3
 802a286:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a28a:	2b00      	cmp	r3, #0
 802a28c:	f000 80d2 	beq.w	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a290:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a294:	d01b      	beq.n	802a2ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802a296:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a29a:	fb0e fa0a 	mul.w	sl, lr, sl
 802a29e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a2a2:	fb0e fe02 	mul.w	lr, lr, r2
 802a2a6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a2aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a2b2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a2b6:	4452      	add	r2, sl
 802a2b8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a2bc:	0a12      	lsrs	r2, r2, #8
 802a2be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a2c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a2c6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a2ca:	ea42 020c 	orr.w	r2, r2, ip
 802a2ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2d0:	2dff      	cmp	r5, #255	; 0xff
 802a2d2:	d021      	beq.n	802a318 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802a2d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a2d6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a2da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2dc:	fb05 fb0b 	mul.w	fp, r5, fp
 802a2e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a2e2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a2e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2ec:	fb05 fa0a 	mul.w	sl, r5, sl
 802a2f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a2f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a2f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a2fc:	44de      	add	lr, fp
 802a2fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a302:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a306:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a30a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a30e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a312:	ea4e 050a 	orr.w	r5, lr, sl
 802a316:	950b      	str	r5, [sp, #44]	; 0x2c
 802a318:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a31a:	2dff      	cmp	r5, #255	; 0xff
 802a31c:	d021      	beq.n	802a362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802a31e:	9d08      	ldr	r5, [sp, #32]
 802a320:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a324:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a326:	fb05 fb0b 	mul.w	fp, r5, fp
 802a32a:	9d08      	ldr	r5, [sp, #32]
 802a32c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a330:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a332:	fb05 fa0e 	mul.w	sl, r5, lr
 802a336:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a33a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a33e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a342:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a346:	44de      	add	lr, fp
 802a348:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a34c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a350:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a354:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a358:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a35c:	ea4e 050a 	orr.w	r5, lr, sl
 802a360:	9508      	str	r5, [sp, #32]
 802a362:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a364:	2dff      	cmp	r5, #255	; 0xff
 802a366:	d021      	beq.n	802a3ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802a368:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a36a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a36e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a370:	fb05 fb0b 	mul.w	fp, r5, fp
 802a374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a376:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a37a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a37c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a380:	fb05 fa0a 	mul.w	sl, r5, sl
 802a384:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a388:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a38c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a390:	44de      	add	lr, fp
 802a392:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a396:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a39a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a39e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a3a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a3a6:	ea4e 050a 	orr.w	r5, lr, sl
 802a3aa:	950c      	str	r5, [sp, #48]	; 0x30
 802a3ac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a3ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a3b2:	9d08      	ldr	r5, [sp, #32]
 802a3b4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a3b8:	fb08 fc0c 	mul.w	ip, r8, ip
 802a3bc:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a3c0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a3c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a3c6:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a3ca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a3ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a3d0:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a3d4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a3d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a3dc:	fb08 f80e 	mul.w	r8, r8, lr
 802a3e0:	fb01 8202 	mla	r2, r1, r2, r8
 802a3e4:	9908      	ldr	r1, [sp, #32]
 802a3e6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a3ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a3ec:	fb00 220a 	mla	r2, r0, sl, r2
 802a3f0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a3f4:	fb09 2900 	mla	r9, r9, r0, r2
 802a3f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a3fc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a400:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a404:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a408:	ea4c 0c09 	orr.w	ip, ip, r9
 802a40c:	2bff      	cmp	r3, #255	; 0xff
 802a40e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a412:	f040 8091 	bne.w	802a538 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802a416:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a41a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a41e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a422:	f022 0207 	bic.w	r2, r2, #7
 802a426:	431a      	orrs	r2, r3
 802a428:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a42c:	ea4c 0c02 	orr.w	ip, ip, r2
 802a430:	f8a7 c000 	strh.w	ip, [r7]
 802a434:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a436:	441c      	add	r4, r3
 802a438:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a43a:	441e      	add	r6, r3
 802a43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a43e:	3b01      	subs	r3, #1
 802a440:	3702      	adds	r7, #2
 802a442:	9317      	str	r3, [sp, #92]	; 0x5c
 802a444:	e6c0      	b.n	802a1c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802a446:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a448:	441c      	add	r4, r3
 802a44a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a44c:	441e      	add	r6, r3
 802a44e:	9b07      	ldr	r3, [sp, #28]
 802a450:	3b01      	subs	r3, #1
 802a452:	9307      	str	r3, [sp, #28]
 802a454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a456:	3302      	adds	r3, #2
 802a458:	930a      	str	r3, [sp, #40]	; 0x28
 802a45a:	e695      	b.n	802a188 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a45c:	d024      	beq.n	802a4a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802a45e:	9b07      	ldr	r3, [sp, #28]
 802a460:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802a462:	3b01      	subs	r3, #1
 802a464:	fb00 4003 	mla	r0, r0, r3, r4
 802a468:	1400      	asrs	r0, r0, #16
 802a46a:	f53f aeaa 	bmi.w	802a1c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a46e:	3901      	subs	r1, #1
 802a470:	4288      	cmp	r0, r1
 802a472:	f6bf aea6 	bge.w	802a1c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a476:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a478:	fb01 6303 	mla	r3, r1, r3, r6
 802a47c:	141b      	asrs	r3, r3, #16
 802a47e:	f53f aea0 	bmi.w	802a1c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a482:	3a01      	subs	r2, #1
 802a484:	4293      	cmp	r3, r2
 802a486:	f6bf ae9c 	bge.w	802a1c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a48a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a48e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a492:	f1bb 0f00 	cmp.w	fp, #0
 802a496:	f300 809a 	bgt.w	802a5ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802a49a:	9b07      	ldr	r3, [sp, #28]
 802a49c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a4a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a4a2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 802a4a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a4aa:	2b00      	cmp	r3, #0
 802a4ac:	f340 81eb 	ble.w	802a886 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802a4b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a4b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a4b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a4bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a4be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a4c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a4c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a4ca:	eef0 6a62 	vmov.f32	s13, s5
 802a4ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a4d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a4da:	ee16 4a90 	vmov	r4, s13
 802a4de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a4e2:	eef0 6a43 	vmov.f32	s13, s6
 802a4e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a4ea:	ee12 2a90 	vmov	r2, s5
 802a4ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a4f2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4f6:	ee13 2a10 	vmov	r2, s6
 802a4fa:	9327      	str	r3, [sp, #156]	; 0x9c
 802a4fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a4fe:	fb92 f3f3 	sdiv	r3, r2, r3
 802a502:	9328      	str	r3, [sp, #160]	; 0xa0
 802a504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802a508:	3b01      	subs	r3, #1
 802a50a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a50e:	9316      	str	r3, [sp, #88]	; 0x58
 802a510:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a512:	bf08      	it	eq
 802a514:	4613      	moveq	r3, r2
 802a516:	ee16 6a90 	vmov	r6, s13
 802a51a:	9307      	str	r3, [sp, #28]
 802a51c:	eeb0 3a67 	vmov.f32	s6, s15
 802a520:	eef0 2a47 	vmov.f32	s5, s14
 802a524:	e622      	b.n	802a16c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a526:	2800      	cmp	r0, #0
 802a528:	f43f ae92 	beq.w	802a250 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a52c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a530:	9308      	str	r3, [sp, #32]
 802a532:	0e1b      	lsrs	r3, r3, #24
 802a534:	9310      	str	r3, [sp, #64]	; 0x40
 802a536:	e68b      	b.n	802a250 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a538:	8839      	ldrh	r1, [r7, #0]
 802a53a:	4dd4      	ldr	r5, [pc, #848]	; (802a88c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802a53c:	43db      	mvns	r3, r3
 802a53e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a542:	fa5f f883 	uxtb.w	r8, r3
 802a546:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802a54a:	fb0e fe08 	mul.w	lr, lr, r8
 802a54e:	10c8      	asrs	r0, r1, #3
 802a550:	00cb      	lsls	r3, r1, #3
 802a552:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a556:	f10e 0101 	add.w	r1, lr, #1
 802a55a:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a55e:	fb00 f008 	mul.w	r0, r0, r8
 802a562:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a566:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a56a:	f100 0e01 	add.w	lr, r0, #1
 802a56e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a572:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a576:	b2db      	uxtb	r3, r3
 802a578:	b2c9      	uxtb	r1, r1
 802a57a:	00d2      	lsls	r2, r2, #3
 802a57c:	fb03 f308 	mul.w	r3, r3, r8
 802a580:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a584:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a588:	430a      	orrs	r2, r1
 802a58a:	1c59      	adds	r1, r3, #1
 802a58c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a590:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a594:	e748      	b.n	802a428 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802a596:	f112 0801 	adds.w	r8, r2, #1
 802a59a:	f53f af4b 	bmi.w	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a59e:	4543      	cmp	r3, r8
 802a5a0:	f6ff af48 	blt.w	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5a4:	f11c 0801 	adds.w	r8, ip, #1
 802a5a8:	f53f af44 	bmi.w	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5ac:	45c6      	cmp	lr, r8
 802a5ae:	f6ff af41 	blt.w	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5b2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a5b6:	fa0f f28e 	sxth.w	r2, lr
 802a5ba:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a5be:	9200      	str	r2, [sp, #0]
 802a5c0:	b21b      	sxth	r3, r3
 802a5c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a5c4:	9819      	ldr	r0, [sp, #100]	; 0x64
 802a5c6:	4639      	mov	r1, r7
 802a5c8:	f7ff fc87 	bl	8029eda <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a5cc:	e732      	b.n	802a434 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a5d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a5d2:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a5d6:	1421      	asrs	r1, r4, #16
 802a5d8:	1433      	asrs	r3, r6, #16
 802a5da:	fb07 1303 	mla	r3, r7, r3, r1
 802a5de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a5e0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a5e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a5e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a5ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a5f0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a5f4:	2a00      	cmp	r2, #0
 802a5f6:	f000 8107 	beq.w	802a808 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 802a5fa:	684d      	ldr	r5, [r1, #4]
 802a5fc:	950d      	str	r5, [sp, #52]	; 0x34
 802a5fe:	0e2d      	lsrs	r5, r5, #24
 802a600:	9514      	str	r5, [sp, #80]	; 0x50
 802a602:	b178      	cbz	r0, 802a624 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a604:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802a608:	3f01      	subs	r7, #1
 802a60a:	00bf      	lsls	r7, r7, #2
 802a60c:	3704      	adds	r7, #4
 802a60e:	eb01 0e07 	add.w	lr, r1, r7
 802a612:	59c9      	ldr	r1, [r1, r7]
 802a614:	9109      	str	r1, [sp, #36]	; 0x24
 802a616:	0e09      	lsrs	r1, r1, #24
 802a618:	9111      	str	r1, [sp, #68]	; 0x44
 802a61a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a61e:	910e      	str	r1, [sp, #56]	; 0x38
 802a620:	0e09      	lsrs	r1, r1, #24
 802a622:	9115      	str	r1, [sp, #84]	; 0x54
 802a624:	b292      	uxth	r2, r2
 802a626:	b280      	uxth	r0, r0
 802a628:	fb02 f900 	mul.w	r9, r2, r0
 802a62c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a630:	0112      	lsls	r2, r2, #4
 802a632:	eba2 0e09 	sub.w	lr, r2, r9
 802a636:	b280      	uxth	r0, r0
 802a638:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802a63c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a63e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a640:	fa1f fe8e 	uxth.w	lr, lr
 802a644:	1a09      	subs	r1, r1, r0
 802a646:	b289      	uxth	r1, r1
 802a648:	fb0e f202 	mul.w	r2, lr, r2
 802a64c:	fb01 220c 	mla	r2, r1, ip, r2
 802a650:	fb00 2205 	mla	r2, r0, r5, r2
 802a654:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a656:	fb09 2205 	mla	r2, r9, r5, r2
 802a65a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a65e:	2a00      	cmp	r2, #0
 802a660:	f000 80c9 	beq.w	802a7f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802a664:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a668:	d019      	beq.n	802a69e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802a66a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a66e:	fb0c fa0a 	mul.w	sl, ip, sl
 802a672:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a676:	fb0c fc03 	mul.w	ip, ip, r3
 802a67a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a67e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a682:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a686:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a68a:	4453      	add	r3, sl
 802a68c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a690:	0a1b      	lsrs	r3, r3, #8
 802a692:	0a3f      	lsrs	r7, r7, #8
 802a694:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a698:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a69c:	433b      	orrs	r3, r7
 802a69e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6a0:	2dff      	cmp	r5, #255	; 0xff
 802a6a2:	d020      	beq.n	802a6e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802a6a4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6a6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a6aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6ac:	436f      	muls	r7, r5
 802a6ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a6b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a6b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802a6b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6ba:	fb05 fa0a 	mul.w	sl, r5, sl
 802a6be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a6c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6c6:	44bc      	add	ip, r7
 802a6c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a6cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a6dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a6e0:	ea4c 050a 	orr.w	r5, ip, sl
 802a6e4:	950d      	str	r5, [sp, #52]	; 0x34
 802a6e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6e8:	2dff      	cmp	r5, #255	; 0xff
 802a6ea:	d020      	beq.n	802a72e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802a6ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a6ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a6f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6f4:	436f      	muls	r7, r5
 802a6f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a6f8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a6fc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802a6fe:	fb05 fa0c 	mul.w	sl, r5, ip
 802a702:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a706:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a70a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a70e:	44bc      	add	ip, r7
 802a710:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a714:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a718:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a71c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a720:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a724:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a728:	ea4c 050a 	orr.w	r5, ip, sl
 802a72c:	9509      	str	r5, [sp, #36]	; 0x24
 802a72e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a730:	2dff      	cmp	r5, #255	; 0xff
 802a732:	d020      	beq.n	802a776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802a734:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a736:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a73a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a73c:	436f      	muls	r7, r5
 802a73e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a740:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a744:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a746:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a74a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a74e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a752:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a756:	44bc      	add	ip, r7
 802a758:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a75c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a760:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a764:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a768:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a76c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a770:	ea4c 050a 	orr.w	r5, ip, sl
 802a774:	950e      	str	r5, [sp, #56]	; 0x38
 802a776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a778:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a77c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a77e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a782:	fb0e f707 	mul.w	r7, lr, r7
 802a786:	fb01 770c 	mla	r7, r1, ip, r7
 802a78a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a78e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a790:	fb00 770c 	mla	r7, r0, ip, r7
 802a794:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a798:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802a79a:	fb09 770c 	mla	r7, r9, ip, r7
 802a79e:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a7a2:	fb0e fe0c 	mul.w	lr, lr, ip
 802a7a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a7aa:	fb01 e303 	mla	r3, r1, r3, lr
 802a7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a7b0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a7b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 802a7b6:	fb00 330a 	mla	r3, r0, sl, r3
 802a7ba:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802a7be:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a7c2:	0a3f      	lsrs	r7, r7, #8
 802a7c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a7c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a7cc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a7d0:	ea47 070c 	orr.w	r7, r7, ip
 802a7d4:	2aff      	cmp	r2, #255	; 0xff
 802a7d6:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a7da:	d11e      	bne.n	802a81a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802a7dc:	097a      	lsrs	r2, r7, #5
 802a7de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802a7e2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a7e6:	f023 0307 	bic.w	r3, r3, #7
 802a7ea:	4313      	orrs	r3, r2
 802a7ec:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a7f0:	431f      	orrs	r7, r3
 802a7f2:	f8a8 7000 	strh.w	r7, [r8]
 802a7f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a7f8:	441c      	add	r4, r3
 802a7fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a7fc:	f108 0802 	add.w	r8, r8, #2
 802a800:	441e      	add	r6, r3
 802a802:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a806:	e644      	b.n	802a492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802a808:	2800      	cmp	r0, #0
 802a80a:	f43f af0b 	beq.w	802a624 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a80e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a812:	9109      	str	r1, [sp, #36]	; 0x24
 802a814:	0e09      	lsrs	r1, r1, #24
 802a816:	9111      	str	r1, [sp, #68]	; 0x44
 802a818:	e704      	b.n	802a624 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a81a:	f8b8 1000 	ldrh.w	r1, [r8]
 802a81e:	43d2      	mvns	r2, r2
 802a820:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a824:	fa5f fe82 	uxtb.w	lr, r2
 802a828:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a82c:	fb0c fc0e 	mul.w	ip, ip, lr
 802a830:	10c8      	asrs	r0, r1, #3
 802a832:	00ca      	lsls	r2, r1, #3
 802a834:	f10c 0101 	add.w	r1, ip, #1
 802a838:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a83c:	0c39      	lsrs	r1, r7, #16
 802a83e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a842:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a846:	4911      	ldr	r1, [pc, #68]	; (802a88c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802a848:	fb00 f00e 	mul.w	r0, r0, lr
 802a84c:	fa5f fc8c 	uxtb.w	ip, ip
 802a850:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a854:	b2d2      	uxtb	r2, r2
 802a856:	1c41      	adds	r1, r0, #1
 802a858:	fb02 f20e 	mul.w	r2, r2, lr
 802a85c:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a860:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a864:	1c51      	adds	r1, r2, #1
 802a866:	00c0      	lsls	r0, r0, #3
 802a868:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a86c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a870:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a874:	ea4c 0c00 	orr.w	ip, ip, r0
 802a878:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a87c:	ea47 0c0c 	orr.w	ip, r7, ip
 802a880:	f8a8 c000 	strh.w	ip, [r8]
 802a884:	e7b7      	b.n	802a7f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802a886:	b01b      	add	sp, #108	; 0x6c
 802a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a88c:	fffff800 	.word	0xfffff800

0802a890 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a894:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802a898:	2d00      	cmp	r5, #0
 802a89a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a89e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a8a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a8a6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802a8aa:	fb05 0e03 	mla	lr, r5, r3, r0
 802a8ae:	f2c0 808c 	blt.w	802a9ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a8b2:	45a9      	cmp	r9, r5
 802a8b4:	f340 8089 	ble.w	802a9ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a8b8:	2800      	cmp	r0, #0
 802a8ba:	f2c0 8084 	blt.w	802a9c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a8be:	4580      	cmp	r8, r0
 802a8c0:	f340 8081 	ble.w	802a9c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a8c4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a8c8:	f01e 0f01 	tst.w	lr, #1
 802a8cc:	5d16      	ldrb	r6, [r2, r4]
 802a8ce:	bf0c      	ite	eq
 802a8d0:	f006 060f 	andeq.w	r6, r6, #15
 802a8d4:	1136      	asrne	r6, r6, #4
 802a8d6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a8da:	b2f6      	uxtb	r6, r6
 802a8dc:	1c44      	adds	r4, r0, #1
 802a8de:	d477      	bmi.n	802a9d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a8e0:	45a0      	cmp	r8, r4
 802a8e2:	dd75      	ble.n	802a9d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a8e4:	2f00      	cmp	r7, #0
 802a8e6:	d075      	beq.n	802a9d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802a8e8:	f10e 0a01 	add.w	sl, lr, #1
 802a8ec:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a8f0:	f01a 0f01 	tst.w	sl, #1
 802a8f4:	5d14      	ldrb	r4, [r2, r4]
 802a8f6:	bf0c      	ite	eq
 802a8f8:	f004 040f 	andeq.w	r4, r4, #15
 802a8fc:	1124      	asrne	r4, r4, #4
 802a8fe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a902:	b2e4      	uxtb	r4, r4
 802a904:	3501      	adds	r5, #1
 802a906:	d469      	bmi.n	802a9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a908:	45a9      	cmp	r9, r5
 802a90a:	dd67      	ble.n	802a9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a90c:	f1bc 0f00 	cmp.w	ip, #0
 802a910:	d067      	beq.n	802a9e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802a912:	2800      	cmp	r0, #0
 802a914:	db60      	blt.n	802a9d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a916:	4580      	cmp	r8, r0
 802a918:	dd5e      	ble.n	802a9d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a91a:	eb03 090e 	add.w	r9, r3, lr
 802a91e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a922:	f019 0f01 	tst.w	r9, #1
 802a926:	5d55      	ldrb	r5, [r2, r5]
 802a928:	bf0c      	ite	eq
 802a92a:	f005 050f 	andeq.w	r5, r5, #15
 802a92e:	112d      	asrne	r5, r5, #4
 802a930:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a934:	b2ed      	uxtb	r5, r5
 802a936:	3001      	adds	r0, #1
 802a938:	d456      	bmi.n	802a9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a93a:	4580      	cmp	r8, r0
 802a93c:	dd54      	ble.n	802a9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a93e:	2f00      	cmp	r7, #0
 802a940:	d054      	beq.n	802a9ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802a942:	3301      	adds	r3, #1
 802a944:	449e      	add	lr, r3
 802a946:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a94a:	f01e 0f01 	tst.w	lr, #1
 802a94e:	5cd0      	ldrb	r0, [r2, r3]
 802a950:	bf0c      	ite	eq
 802a952:	f000 000f 	andeq.w	r0, r0, #15
 802a956:	1100      	asrne	r0, r0, #4
 802a958:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a95c:	b2c3      	uxtb	r3, r0
 802a95e:	b2ba      	uxth	r2, r7
 802a960:	fa1f fc8c 	uxth.w	ip, ip
 802a964:	fb02 f00c 	mul.w	r0, r2, ip
 802a968:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a96c:	0112      	lsls	r2, r2, #4
 802a96e:	fa1f fc8c 	uxth.w	ip, ip
 802a972:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802a976:	1a12      	subs	r2, r2, r0
 802a978:	eba7 070c 	sub.w	r7, r7, ip
 802a97c:	b292      	uxth	r2, r2
 802a97e:	b2bf      	uxth	r7, r7
 802a980:	4362      	muls	r2, r4
 802a982:	fb06 2207 	mla	r2, r6, r7, r2
 802a986:	fb0c 2505 	mla	r5, ip, r5, r2
 802a98a:	fb00 5303 	mla	r3, r0, r3, r5
 802a98e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a992:	b1b3      	cbz	r3, 802a9c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802a994:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802a998:	435a      	muls	r2, r3
 802a99a:	1c53      	adds	r3, r2, #1
 802a99c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a9a0:	4a2d      	ldr	r2, [pc, #180]	; (802aa58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802a9a2:	121b      	asrs	r3, r3, #8
 802a9a4:	6812      	ldr	r2, [r2, #0]
 802a9a6:	2bff      	cmp	r3, #255	; 0xff
 802a9a8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802a9ac:	d120      	bne.n	802a9f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802a9ae:	4b2b      	ldr	r3, [pc, #172]	; (802aa5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802a9b0:	0950      	lsrs	r0, r2, #5
 802a9b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a9b6:	4033      	ands	r3, r6
 802a9b8:	4318      	orrs	r0, r3
 802a9ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a9be:	4302      	orrs	r2, r0
 802a9c0:	800a      	strh	r2, [r1, #0]
 802a9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9c6:	2600      	movs	r6, #0
 802a9c8:	e788      	b.n	802a8dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802a9ca:	2400      	movs	r4, #0
 802a9cc:	4626      	mov	r6, r4
 802a9ce:	e799      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d0:	2400      	movs	r4, #0
 802a9d2:	e797      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d4:	463c      	mov	r4, r7
 802a9d6:	e795      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d8:	2500      	movs	r5, #0
 802a9da:	e7ac      	b.n	802a936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802a9dc:	2300      	movs	r3, #0
 802a9de:	461d      	mov	r5, r3
 802a9e0:	e7bd      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9e2:	4663      	mov	r3, ip
 802a9e4:	4665      	mov	r5, ip
 802a9e6:	e7ba      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9e8:	2300      	movs	r3, #0
 802a9ea:	e7b8      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9ec:	463b      	mov	r3, r7
 802a9ee:	e7b6      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9f0:	880d      	ldrh	r5, [r1, #0]
 802a9f2:	b29f      	uxth	r7, r3
 802a9f4:	122c      	asrs	r4, r5, #8
 802a9f6:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802a9fa:	43db      	mvns	r3, r3
 802a9fc:	b2db      	uxtb	r3, r3
 802a9fe:	fb10 f007 	smulbb	r0, r0, r7
 802aa02:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802aa06:	fb04 0403 	mla	r4, r4, r3, r0
 802aa0a:	b2f6      	uxtb	r6, r6
 802aa0c:	10e8      	asrs	r0, r5, #3
 802aa0e:	b2d2      	uxtb	r2, r2
 802aa10:	00ed      	lsls	r5, r5, #3
 802aa12:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802aa16:	fb12 f207 	smulbb	r2, r2, r7
 802aa1a:	fb16 f607 	smulbb	r6, r6, r7
 802aa1e:	b2ed      	uxtb	r5, r5
 802aa20:	b2a4      	uxth	r4, r4
 802aa22:	fb00 6603 	mla	r6, r0, r3, r6
 802aa26:	fb05 2303 	mla	r3, r5, r3, r2
 802aa2a:	b29a      	uxth	r2, r3
 802aa2c:	1c63      	adds	r3, r4, #1
 802aa2e:	b2b0      	uxth	r0, r6
 802aa30:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802aa34:	1c53      	adds	r3, r2, #1
 802aa36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802aa3a:	1c42      	adds	r2, r0, #1
 802aa3c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aa40:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802aa44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aa48:	0940      	lsrs	r0, r0, #5
 802aa4a:	4323      	orrs	r3, r4
 802aa4c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802aa50:	4303      	orrs	r3, r0
 802aa52:	800b      	strh	r3, [r1, #0]
 802aa54:	e7b5      	b.n	802a9c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802aa56:	bf00      	nop
 802aa58:	2000b4cc 	.word	0x2000b4cc
 802aa5c:	00fff800 	.word	0x00fff800

0802aa60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa64:	b097      	sub	sp, #92	; 0x5c
 802aa66:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802aa6a:	9214      	str	r2, [sp, #80]	; 0x50
 802aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 802aa6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802aa70:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802aa74:	910d      	str	r1, [sp, #52]	; 0x34
 802aa76:	930f      	str	r3, [sp, #60]	; 0x3c
 802aa78:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802aa7c:	9015      	str	r0, [sp, #84]	; 0x54
 802aa7e:	6850      	ldr	r0, [r2, #4]
 802aa80:	6812      	ldr	r2, [r2, #0]
 802aa82:	fb00 1303 	mla	r3, r0, r3, r1
 802aa86:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aa8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802aa8c:	689b      	ldr	r3, [r3, #8]
 802aa8e:	3301      	adds	r3, #1
 802aa90:	f023 0301 	bic.w	r3, r3, #1
 802aa94:	930a      	str	r3, [sp, #40]	; 0x28
 802aa96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802aa98:	681f      	ldr	r7, [r3, #0]
 802aa9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802aa9c:	2b00      	cmp	r3, #0
 802aa9e:	dc03      	bgt.n	802aaa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802aaa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802aaa2:	2b00      	cmp	r3, #0
 802aaa4:	f340 8287 	ble.w	802afb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802aaa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802aaaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aaae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aab2:	1e48      	subs	r0, r1, #1
 802aab4:	f102 3cff 	add.w	ip, r2, #4294967295
 802aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	f340 80c4 	ble.w	802ac48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802aac0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802aac4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aac8:	d406      	bmi.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aaca:	4586      	cmp	lr, r0
 802aacc:	da04      	bge.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aace:	2b00      	cmp	r3, #0
 802aad0:	db02      	blt.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aad2:	4563      	cmp	r3, ip
 802aad4:	f2c0 80b9 	blt.w	802ac4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802aad8:	f11e 0e01 	adds.w	lr, lr, #1
 802aadc:	f100 80aa 	bmi.w	802ac34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802aae0:	4571      	cmp	r1, lr
 802aae2:	f2c0 80a7 	blt.w	802ac34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802aae6:	3301      	adds	r3, #1
 802aae8:	f100 80a4 	bmi.w	802ac34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802aaec:	429a      	cmp	r2, r3
 802aaee:	f2c0 80a1 	blt.w	802ac34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aaf4:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802aaf8:	930e      	str	r3, [sp, #56]	; 0x38
 802aafa:	46c8      	mov	r8, r9
 802aafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802aafe:	2b00      	cmp	r3, #0
 802ab00:	f340 80c3 	ble.w	802ac8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802ab04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802ab06:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ab0a:	1423      	asrs	r3, r4, #16
 802ab0c:	ea4f 4026 	mov.w	r0, r6, asr #16
 802ab10:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ab14:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ab18:	f100 814d 	bmi.w	802adb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802ab1c:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ab20:	455b      	cmp	r3, fp
 802ab22:	f280 8148 	bge.w	802adb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802ab26:	2800      	cmp	r0, #0
 802ab28:	f2c0 8145 	blt.w	802adb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802ab2c:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ab30:	4558      	cmp	r0, fp
 802ab32:	f280 8140 	bge.w	802adb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802ab36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802ab38:	fb00 3305 	mla	r3, r0, r5, r3
 802ab3c:	0858      	lsrs	r0, r3, #1
 802ab3e:	07dd      	lsls	r5, r3, #31
 802ab40:	f817 c000 	ldrb.w	ip, [r7, r0]
 802ab44:	bf54      	ite	pl
 802ab46:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ab4a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ab4e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ab52:	fa5f fc8c 	uxtb.w	ip, ip
 802ab56:	2a00      	cmp	r2, #0
 802ab58:	f000 80db 	beq.w	802ad12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802ab5c:	1c58      	adds	r0, r3, #1
 802ab5e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802ab62:	07c0      	lsls	r0, r0, #31
 802ab64:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802ab68:	bf54      	ite	pl
 802ab6a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ab6e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ab72:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ab76:	fa5f f08e 	uxtb.w	r0, lr
 802ab7a:	9010      	str	r0, [sp, #64]	; 0x40
 802ab7c:	b1c9      	cbz	r1, 802abb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802ab7e:	4453      	add	r3, sl
 802ab80:	0858      	lsrs	r0, r3, #1
 802ab82:	07dd      	lsls	r5, r3, #31
 802ab84:	5c38      	ldrb	r0, [r7, r0]
 802ab86:	bf54      	ite	pl
 802ab88:	f000 000f 	andpl.w	r0, r0, #15
 802ab8c:	1100      	asrmi	r0, r0, #4
 802ab8e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ab92:	3301      	adds	r3, #1
 802ab94:	b2c0      	uxtb	r0, r0
 802ab96:	900b      	str	r0, [sp, #44]	; 0x2c
 802ab98:	0858      	lsrs	r0, r3, #1
 802ab9a:	07dd      	lsls	r5, r3, #31
 802ab9c:	f817 e000 	ldrb.w	lr, [r7, r0]
 802aba0:	bf54      	ite	pl
 802aba2:	f00e 030f 	andpl.w	r3, lr, #15
 802aba6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802abaa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802abae:	b2db      	uxtb	r3, r3
 802abb0:	9311      	str	r3, [sp, #68]	; 0x44
 802abb2:	b292      	uxth	r2, r2
 802abb4:	b289      	uxth	r1, r1
 802abb6:	fb02 f301 	mul.w	r3, r2, r1
 802abba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802abbe:	0112      	lsls	r2, r2, #4
 802abc0:	b289      	uxth	r1, r1
 802abc2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802abc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802abc8:	1ad2      	subs	r2, r2, r3
 802abca:	1a40      	subs	r0, r0, r1
 802abcc:	b292      	uxth	r2, r2
 802abce:	436a      	muls	r2, r5
 802abd0:	b280      	uxth	r0, r0
 802abd2:	fb0c 2c00 	mla	ip, ip, r0, r2
 802abd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802abd8:	fb01 c102 	mla	r1, r1, r2, ip
 802abdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802abde:	fb03 1302 	mla	r3, r3, r2, r1
 802abe2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802abe6:	b1db      	cbz	r3, 802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802abe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802abea:	4353      	muls	r3, r2
 802abec:	1c5a      	adds	r2, r3, #1
 802abee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802abf2:	4ac6      	ldr	r2, [pc, #792]	; (802af0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802abf4:	121b      	asrs	r3, r3, #8
 802abf6:	6812      	ldr	r2, [r2, #0]
 802abf8:	2bff      	cmp	r3, #255	; 0xff
 802abfa:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802abfe:	f040 8099 	bne.w	802ad34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802ac02:	0953      	lsrs	r3, r2, #5
 802ac04:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802ac08:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ac0c:	f02c 0c07 	bic.w	ip, ip, #7
 802ac10:	ea43 0c0c 	orr.w	ip, r3, ip
 802ac14:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac18:	ea4c 0202 	orr.w	r2, ip, r2
 802ac1c:	f8a8 2000 	strh.w	r2, [r8]
 802ac20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802ac22:	441c      	add	r4, r3
 802ac24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802ac26:	441e      	add	r6, r3
 802ac28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ac2a:	3b01      	subs	r3, #1
 802ac2c:	f108 0802 	add.w	r8, r8, #2
 802ac30:	930e      	str	r3, [sp, #56]	; 0x38
 802ac32:	e763      	b.n	802aafc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ac34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802ac36:	441c      	add	r4, r3
 802ac38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802ac3a:	441e      	add	r6, r3
 802ac3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac3e:	3b01      	subs	r3, #1
 802ac40:	9309      	str	r3, [sp, #36]	; 0x24
 802ac42:	f109 0902 	add.w	r9, r9, #2
 802ac46:	e737      	b.n	802aab8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802ac48:	d024      	beq.n	802ac94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802ac4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac4c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802ac4e:	3b01      	subs	r3, #1
 802ac50:	fb00 4003 	mla	r0, r0, r3, r4
 802ac54:	1400      	asrs	r0, r0, #16
 802ac56:	f53f af4c 	bmi.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac5a:	3901      	subs	r1, #1
 802ac5c:	4288      	cmp	r0, r1
 802ac5e:	f6bf af48 	bge.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac62:	9924      	ldr	r1, [sp, #144]	; 0x90
 802ac64:	fb01 6303 	mla	r3, r1, r3, r6
 802ac68:	141b      	asrs	r3, r3, #16
 802ac6a:	f53f af42 	bmi.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac6e:	3a01      	subs	r2, #1
 802ac70:	4293      	cmp	r3, r2
 802ac72:	f6bf af3e 	bge.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac76:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802ac7a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802ac7e:	930e      	str	r3, [sp, #56]	; 0x38
 802ac80:	46c8      	mov	r8, r9
 802ac82:	f1bb 0f00 	cmp.w	fp, #0
 802ac86:	f300 80b7 	bgt.w	802adf8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802ac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ac8c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ac90:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802ac94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802ac96:	2b00      	cmp	r3, #0
 802ac98:	f340 818d 	ble.w	802afb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802ac9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 802aca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802aca4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802aca8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802acaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802acae:	ee31 1a05 	vadd.f32	s2, s2, s10
 802acb2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802acb6:	eef0 6a62 	vmov.f32	s13, s5
 802acba:	ee61 7a27 	vmul.f32	s15, s2, s15
 802acbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802acc6:	ee16 4a90 	vmov	r4, s13
 802acca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802acce:	eef0 6a43 	vmov.f32	s13, s6
 802acd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802acd6:	ee12 2a90 	vmov	r2, s5
 802acda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802acde:	fb92 f3f3 	sdiv	r3, r2, r3
 802ace2:	ee13 2a10 	vmov	r2, s6
 802ace6:	9323      	str	r3, [sp, #140]	; 0x8c
 802ace8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802acea:	fb92 f3f3 	sdiv	r3, r2, r3
 802acee:	9324      	str	r3, [sp, #144]	; 0x90
 802acf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802acf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802acf4:	3b01      	subs	r3, #1
 802acf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acfa:	930d      	str	r3, [sp, #52]	; 0x34
 802acfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802acfe:	bf08      	it	eq
 802ad00:	4613      	moveq	r3, r2
 802ad02:	ee16 6a90 	vmov	r6, s13
 802ad06:	9309      	str	r3, [sp, #36]	; 0x24
 802ad08:	eeb0 3a67 	vmov.f32	s6, s15
 802ad0c:	eef0 2a47 	vmov.f32	s5, s14
 802ad10:	e6c3      	b.n	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802ad12:	2900      	cmp	r1, #0
 802ad14:	f43f af4d 	beq.w	802abb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802ad18:	eb0a 0003 	add.w	r0, sl, r3
 802ad1c:	0843      	lsrs	r3, r0, #1
 802ad1e:	07c0      	lsls	r0, r0, #31
 802ad20:	5cfb      	ldrb	r3, [r7, r3]
 802ad22:	bf54      	ite	pl
 802ad24:	f003 030f 	andpl.w	r3, r3, #15
 802ad28:	111b      	asrmi	r3, r3, #4
 802ad2a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ad2e:	b2db      	uxtb	r3, r3
 802ad30:	930b      	str	r3, [sp, #44]	; 0x2c
 802ad32:	e73e      	b.n	802abb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802ad34:	f8b8 e000 	ldrh.w	lr, [r8]
 802ad38:	fa1f fb83 	uxth.w	fp, r3
 802ad3c:	ea4f 202e 	mov.w	r0, lr, asr #8
 802ad40:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802ad44:	43db      	mvns	r3, r3
 802ad46:	b2db      	uxtb	r3, r3
 802ad48:	fb11 f10b 	smulbb	r1, r1, fp
 802ad4c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802ad50:	fb00 1003 	mla	r0, r0, r3, r1
 802ad54:	fa5f fc8c 	uxtb.w	ip, ip
 802ad58:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802ad5c:	b2d2      	uxtb	r2, r2
 802ad5e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802ad62:	b280      	uxth	r0, r0
 802ad64:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802ad68:	fb1c fc0b 	smulbb	ip, ip, fp
 802ad6c:	fa5f fe8e 	uxtb.w	lr, lr
 802ad70:	fb12 fb0b 	smulbb	fp, r2, fp
 802ad74:	fb01 cc03 	mla	ip, r1, r3, ip
 802ad78:	fb0e bb03 	mla	fp, lr, r3, fp
 802ad7c:	1c43      	adds	r3, r0, #1
 802ad7e:	fa1f fc8c 	uxth.w	ip, ip
 802ad82:	fa1f fb8b 	uxth.w	fp, fp
 802ad86:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ad8a:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802ad8e:	f10c 0101 	add.w	r1, ip, #1
 802ad92:	f10b 0001 	add.w	r0, fp, #1
 802ad96:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802ad9a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ad9e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ada2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802ada6:	4318      	orrs	r0, r3
 802ada8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802adac:	ea40 000c 	orr.w	r0, r0, ip
 802adb0:	f8a8 0000 	strh.w	r0, [r8]
 802adb4:	e734      	b.n	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802adb6:	f113 0b01 	adds.w	fp, r3, #1
 802adba:	f53f af31 	bmi.w	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802adbe:	45dc      	cmp	ip, fp
 802adc0:	f6ff af2e 	blt.w	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802adc4:	f110 0b01 	adds.w	fp, r0, #1
 802adc8:	f53f af2a 	bmi.w	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802adcc:	45de      	cmp	lr, fp
 802adce:	f6ff af27 	blt.w	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802add2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802add4:	9302      	str	r3, [sp, #8]
 802add6:	fa0f f38e 	sxth.w	r3, lr
 802adda:	9301      	str	r3, [sp, #4]
 802addc:	fa0f f38c 	sxth.w	r3, ip
 802ade0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ade4:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802ade8:	9300      	str	r3, [sp, #0]
 802adea:	463a      	mov	r2, r7
 802adec:	4653      	mov	r3, sl
 802adee:	4641      	mov	r1, r8
 802adf0:	9815      	ldr	r0, [sp, #84]	; 0x54
 802adf2:	f7ff fd4d 	bl	802a890 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802adf6:	e713      	b.n	802ac20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802adf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802adfa:	1422      	asrs	r2, r4, #16
 802adfc:	1433      	asrs	r3, r6, #16
 802adfe:	fb05 2303 	mla	r3, r5, r3, r2
 802ae02:	085a      	lsrs	r2, r3, #1
 802ae04:	07dd      	lsls	r5, r3, #31
 802ae06:	5cba      	ldrb	r2, [r7, r2]
 802ae08:	bf54      	ite	pl
 802ae0a:	f002 020f 	andpl.w	r2, r2, #15
 802ae0e:	1112      	asrmi	r2, r2, #4
 802ae10:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ae14:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802ae18:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802ae1c:	b2d2      	uxtb	r2, r2
 802ae1e:	2900      	cmp	r1, #0
 802ae20:	d076      	beq.n	802af10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ae22:	f103 0e01 	add.w	lr, r3, #1
 802ae26:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802ae2a:	f01e 0f01 	tst.w	lr, #1
 802ae2e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae32:	bf0c      	ite	eq
 802ae34:	f00c 0c0f 	andeq.w	ip, ip, #15
 802ae38:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802ae3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae40:	fa5f f58c 	uxtb.w	r5, ip
 802ae44:	9512      	str	r5, [sp, #72]	; 0x48
 802ae46:	b300      	cbz	r0, 802ae8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802ae48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ae4a:	442b      	add	r3, r5
 802ae4c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae50:	07dd      	lsls	r5, r3, #31
 802ae52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae56:	bf54      	ite	pl
 802ae58:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae5c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae60:	3301      	adds	r3, #1
 802ae62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae66:	fa5f f58c 	uxtb.w	r5, ip
 802ae6a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae6e:	950c      	str	r5, [sp, #48]	; 0x30
 802ae70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae74:	07dd      	lsls	r5, r3, #31
 802ae76:	bf54      	ite	pl
 802ae78:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae7c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae80:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae84:	fa5f f38c 	uxtb.w	r3, ip
 802ae88:	9313      	str	r3, [sp, #76]	; 0x4c
 802ae8a:	b289      	uxth	r1, r1
 802ae8c:	b280      	uxth	r0, r0
 802ae8e:	fb01 f300 	mul.w	r3, r1, r0
 802ae92:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802ae96:	0109      	lsls	r1, r1, #4
 802ae98:	b280      	uxth	r0, r0
 802ae9a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802ae9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802aea0:	1ac9      	subs	r1, r1, r3
 802aea2:	ebac 0c00 	sub.w	ip, ip, r0
 802aea6:	b289      	uxth	r1, r1
 802aea8:	4369      	muls	r1, r5
 802aeaa:	fa1f fc8c 	uxth.w	ip, ip
 802aeae:	fb02 120c 	mla	r2, r2, ip, r1
 802aeb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 802aeb4:	fb00 2001 	mla	r0, r0, r1, r2
 802aeb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802aeba:	fb03 0302 	mla	r3, r3, r2, r0
 802aebe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802aec2:	b1d3      	cbz	r3, 802aefa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802aec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802aec6:	4353      	muls	r3, r2
 802aec8:	1c5a      	adds	r2, r3, #1
 802aeca:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802aece:	4a0f      	ldr	r2, [pc, #60]	; (802af0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802aed0:	121b      	asrs	r3, r3, #8
 802aed2:	6812      	ldr	r2, [r2, #0]
 802aed4:	2bff      	cmp	r3, #255	; 0xff
 802aed6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802aeda:	d12d      	bne.n	802af38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802aedc:	0953      	lsrs	r3, r2, #5
 802aede:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802aee2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802aee6:	f02c 0c07 	bic.w	ip, ip, #7
 802aeea:	ea43 0c0c 	orr.w	ip, r3, ip
 802aeee:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802aef2:	ea4c 0202 	orr.w	r2, ip, r2
 802aef6:	f8a8 2000 	strh.w	r2, [r8]
 802aefa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802aefc:	441c      	add	r4, r3
 802aefe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802af00:	f108 0802 	add.w	r8, r8, #2
 802af04:	441e      	add	r6, r3
 802af06:	f10b 3bff 	add.w	fp, fp, #4294967295
 802af0a:	e6ba      	b.n	802ac82 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802af0c:	2000b4cc 	.word	0x2000b4cc
 802af10:	2800      	cmp	r0, #0
 802af12:	d0ba      	beq.n	802ae8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802af14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802af16:	442b      	add	r3, r5
 802af18:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802af1c:	07db      	lsls	r3, r3, #31
 802af1e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802af22:	bf54      	ite	pl
 802af24:	f00c 0c0f 	andpl.w	ip, ip, #15
 802af28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802af2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802af30:	fa5f f38c 	uxtb.w	r3, ip
 802af34:	930c      	str	r3, [sp, #48]	; 0x30
 802af36:	e7a8      	b.n	802ae8a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802af38:	f8b8 e000 	ldrh.w	lr, [r8]
 802af3c:	fa1f fa83 	uxth.w	sl, r3
 802af40:	ea4f 202e 	mov.w	r0, lr, asr #8
 802af44:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802af48:	43db      	mvns	r3, r3
 802af4a:	b2db      	uxtb	r3, r3
 802af4c:	fb11 f10a 	smulbb	r1, r1, sl
 802af50:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802af54:	fb00 1003 	mla	r0, r0, r3, r1
 802af58:	b2d2      	uxtb	r2, r2
 802af5a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802af5e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802af62:	fa5f fe8e 	uxtb.w	lr, lr
 802af66:	fb12 f20a 	smulbb	r2, r2, sl
 802af6a:	fb0e 2203 	mla	r2, lr, r3, r2
 802af6e:	fa5f fc8c 	uxtb.w	ip, ip
 802af72:	b280      	uxth	r0, r0
 802af74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802af78:	b292      	uxth	r2, r2
 802af7a:	fb1c fc0a 	smulbb	ip, ip, sl
 802af7e:	fb01 cc03 	mla	ip, r1, r3, ip
 802af82:	1c43      	adds	r3, r0, #1
 802af84:	1c51      	adds	r1, r2, #1
 802af86:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802af8a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802af8e:	fa1f fc8c 	uxth.w	ip, ip
 802af92:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802af96:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802af9a:	4308      	orrs	r0, r1
 802af9c:	f10c 0101 	add.w	r1, ip, #1
 802afa0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802afa4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802afa8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802afac:	ea40 000c 	orr.w	r0, r0, ip
 802afb0:	f8a8 0000 	strh.w	r0, [r8]
 802afb4:	e7a1      	b.n	802aefa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802afb6:	b017      	add	sp, #92	; 0x5c
 802afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802afbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802afc0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802afc4:	2d00      	cmp	r5, #0
 802afc6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802afca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802afce:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802afd2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802afd6:	fb05 0e03 	mla	lr, r5, r3, r0
 802afda:	f2c0 80b0 	blt.w	802b13e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802afde:	45a9      	cmp	r9, r5
 802afe0:	f340 80ad 	ble.w	802b13e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802afe4:	2800      	cmp	r0, #0
 802afe6:	f2c0 80a8 	blt.w	802b13a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802afea:	4580      	cmp	r8, r0
 802afec:	f340 80a5 	ble.w	802b13a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802aff0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802aff4:	f01e 0f01 	tst.w	lr, #1
 802aff8:	5d16      	ldrb	r6, [r2, r4]
 802affa:	bf0c      	ite	eq
 802affc:	f006 060f 	andeq.w	r6, r6, #15
 802b000:	1136      	asrne	r6, r6, #4
 802b002:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b006:	b2f6      	uxtb	r6, r6
 802b008:	1c44      	adds	r4, r0, #1
 802b00a:	f100 809b 	bmi.w	802b144 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b00e:	45a0      	cmp	r8, r4
 802b010:	f340 8098 	ble.w	802b144 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b014:	2f00      	cmp	r7, #0
 802b016:	f000 8097 	beq.w	802b148 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802b01a:	f10e 0a01 	add.w	sl, lr, #1
 802b01e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802b022:	f01a 0f01 	tst.w	sl, #1
 802b026:	5d14      	ldrb	r4, [r2, r4]
 802b028:	bf0c      	ite	eq
 802b02a:	f004 040f 	andeq.w	r4, r4, #15
 802b02e:	1124      	asrne	r4, r4, #4
 802b030:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b034:	b2e4      	uxtb	r4, r4
 802b036:	3501      	adds	r5, #1
 802b038:	f100 808a 	bmi.w	802b150 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b03c:	45a9      	cmp	r9, r5
 802b03e:	f340 8087 	ble.w	802b150 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b042:	f1bc 0f00 	cmp.w	ip, #0
 802b046:	f000 8086 	beq.w	802b156 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802b04a:	2800      	cmp	r0, #0
 802b04c:	db7e      	blt.n	802b14c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b04e:	4580      	cmp	r8, r0
 802b050:	dd7c      	ble.n	802b14c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b052:	eb03 090e 	add.w	r9, r3, lr
 802b056:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802b05a:	f019 0f01 	tst.w	r9, #1
 802b05e:	5d55      	ldrb	r5, [r2, r5]
 802b060:	bf0c      	ite	eq
 802b062:	f005 050f 	andeq.w	r5, r5, #15
 802b066:	112d      	asrne	r5, r5, #4
 802b068:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b06c:	b2ed      	uxtb	r5, r5
 802b06e:	3001      	adds	r0, #1
 802b070:	d474      	bmi.n	802b15c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b072:	4580      	cmp	r8, r0
 802b074:	dd72      	ble.n	802b15c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b076:	2f00      	cmp	r7, #0
 802b078:	d072      	beq.n	802b160 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b07a:	3301      	adds	r3, #1
 802b07c:	449e      	add	lr, r3
 802b07e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b082:	f01e 0f01 	tst.w	lr, #1
 802b086:	5cd0      	ldrb	r0, [r2, r3]
 802b088:	bf0c      	ite	eq
 802b08a:	f000 000f 	andeq.w	r0, r0, #15
 802b08e:	1100      	asrne	r0, r0, #4
 802b090:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b094:	b2c3      	uxtb	r3, r0
 802b096:	b2ba      	uxth	r2, r7
 802b098:	fa1f fc8c 	uxth.w	ip, ip
 802b09c:	fb02 f00c 	mul.w	r0, r2, ip
 802b0a0:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b0a4:	0112      	lsls	r2, r2, #4
 802b0a6:	fa1f fc8c 	uxth.w	ip, ip
 802b0aa:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802b0ae:	1a12      	subs	r2, r2, r0
 802b0b0:	eba7 070c 	sub.w	r7, r7, ip
 802b0b4:	b292      	uxth	r2, r2
 802b0b6:	b2bf      	uxth	r7, r7
 802b0b8:	4362      	muls	r2, r4
 802b0ba:	fb06 2207 	mla	r2, r6, r7, r2
 802b0be:	fb0c 2505 	mla	r5, ip, r5, r2
 802b0c2:	fb00 5303 	mla	r3, r0, r3, r5
 802b0c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b0ca:	b3a3      	cbz	r3, 802b136 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802b0cc:	4a25      	ldr	r2, [pc, #148]	; (802b164 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802b0ce:	880e      	ldrh	r6, [r1, #0]
 802b0d0:	6815      	ldr	r5, [r2, #0]
 802b0d2:	1234      	asrs	r4, r6, #8
 802b0d4:	b29a      	uxth	r2, r3
 802b0d6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b0da:	43db      	mvns	r3, r3
 802b0dc:	b2db      	uxtb	r3, r3
 802b0de:	fb10 f002 	smulbb	r0, r0, r2
 802b0e2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b0e6:	fb04 0403 	mla	r4, r4, r3, r0
 802b0ea:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b0ee:	10f0      	asrs	r0, r6, #3
 802b0f0:	b2ed      	uxtb	r5, r5
 802b0f2:	00f6      	lsls	r6, r6, #3
 802b0f4:	fb17 f702 	smulbb	r7, r7, r2
 802b0f8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b0fc:	fb15 f202 	smulbb	r2, r5, r2
 802b100:	b2f6      	uxtb	r6, r6
 802b102:	b2a4      	uxth	r4, r4
 802b104:	fb00 7003 	mla	r0, r0, r3, r7
 802b108:	fb06 2303 	mla	r3, r6, r3, r2
 802b10c:	b29a      	uxth	r2, r3
 802b10e:	1c63      	adds	r3, r4, #1
 802b110:	b280      	uxth	r0, r0
 802b112:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b116:	1c53      	adds	r3, r2, #1
 802b118:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b11c:	1c42      	adds	r2, r0, #1
 802b11e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b122:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b126:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b12a:	0940      	lsrs	r0, r0, #5
 802b12c:	4323      	orrs	r3, r4
 802b12e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b132:	4303      	orrs	r3, r0
 802b134:	800b      	strh	r3, [r1, #0]
 802b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b13a:	2600      	movs	r6, #0
 802b13c:	e764      	b.n	802b008 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802b13e:	2400      	movs	r4, #0
 802b140:	4626      	mov	r6, r4
 802b142:	e778      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b144:	2400      	movs	r4, #0
 802b146:	e776      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b148:	463c      	mov	r4, r7
 802b14a:	e774      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b14c:	2500      	movs	r5, #0
 802b14e:	e78e      	b.n	802b06e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802b150:	2300      	movs	r3, #0
 802b152:	461d      	mov	r5, r3
 802b154:	e79f      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b156:	4663      	mov	r3, ip
 802b158:	4665      	mov	r5, ip
 802b15a:	e79c      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b15c:	2300      	movs	r3, #0
 802b15e:	e79a      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b160:	463b      	mov	r3, r7
 802b162:	e798      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b164:	2000b4cc 	.word	0x2000b4cc

0802b168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b16c:	b093      	sub	sp, #76	; 0x4c
 802b16e:	461d      	mov	r5, r3
 802b170:	920c      	str	r2, [sp, #48]	; 0x30
 802b172:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b174:	9107      	str	r1, [sp, #28]
 802b176:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802b17a:	9011      	str	r0, [sp, #68]	; 0x44
 802b17c:	6850      	ldr	r0, [r2, #4]
 802b17e:	6812      	ldr	r2, [r2, #0]
 802b180:	fb00 1303 	mla	r3, r0, r3, r1
 802b184:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b18a:	689b      	ldr	r3, [r3, #8]
 802b18c:	3301      	adds	r3, #1
 802b18e:	f023 0301 	bic.w	r3, r3, #1
 802b192:	9306      	str	r3, [sp, #24]
 802b194:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b196:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802b19a:	681f      	ldr	r7, [r3, #0]
 802b19c:	9b07      	ldr	r3, [sp, #28]
 802b19e:	2b00      	cmp	r3, #0
 802b1a0:	dc03      	bgt.n	802b1aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802b1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	f340 8267 	ble.w	802b678 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802b1aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b1ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b1b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b1b4:	1e48      	subs	r0, r1, #1
 802b1b6:	f102 3cff 	add.w	ip, r2, #4294967295
 802b1ba:	2d00      	cmp	r5, #0
 802b1bc:	f340 80b8 	ble.w	802b330 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b1c0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b1c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b1c8:	d406      	bmi.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1ca:	4586      	cmp	lr, r0
 802b1cc:	da04      	bge.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1ce:	2b00      	cmp	r3, #0
 802b1d0:	db02      	blt.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1d2:	4563      	cmp	r3, ip
 802b1d4:	f2c0 80ad 	blt.w	802b332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802b1d8:	f11e 0e01 	adds.w	lr, lr, #1
 802b1dc:	f100 80a0 	bmi.w	802b320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802b1e0:	4571      	cmp	r1, lr
 802b1e2:	f2c0 809d 	blt.w	802b320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802b1e6:	3301      	adds	r3, #1
 802b1e8:	f100 809a 	bmi.w	802b320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802b1ec:	429a      	cmp	r2, r3
 802b1ee:	f2c0 8097 	blt.w	802b320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802b1f2:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b1f6:	9509      	str	r5, [sp, #36]	; 0x24
 802b1f8:	46c8      	mov	r8, r9
 802b1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b1fc:	2b00      	cmp	r3, #0
 802b1fe:	f340 80b6 	ble.w	802b36e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802b202:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b206:	9308      	str	r3, [sp, #32]
 802b208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b20a:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b20e:	1423      	asrs	r3, r4, #16
 802b210:	ea4f 4026 	mov.w	r0, r6, asr #16
 802b214:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b218:	f100 813e 	bmi.w	802b498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b21c:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b220:	455b      	cmp	r3, fp
 802b222:	f280 8139 	bge.w	802b498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b226:	2800      	cmp	r0, #0
 802b228:	f2c0 8136 	blt.w	802b498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b22c:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b230:	4558      	cmp	r0, fp
 802b232:	f280 8131 	bge.w	802b498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b236:	9a06      	ldr	r2, [sp, #24]
 802b238:	fb00 3302 	mla	r3, r0, r2, r3
 802b23c:	0858      	lsrs	r0, r3, #1
 802b23e:	07da      	lsls	r2, r3, #31
 802b240:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b244:	9a08      	ldr	r2, [sp, #32]
 802b246:	bf54      	ite	pl
 802b248:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b24c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b250:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b254:	fa5f fc8c 	uxtb.w	ip, ip
 802b258:	2a00      	cmp	r2, #0
 802b25a:	f000 80cb 	beq.w	802b3f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802b25e:	1c58      	adds	r0, r3, #1
 802b260:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b264:	07c0      	lsls	r0, r0, #31
 802b266:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b26a:	bf54      	ite	pl
 802b26c:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b270:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b274:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b278:	fa5f fe8e 	uxtb.w	lr, lr
 802b27c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b280:	b1b9      	cbz	r1, 802b2b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802b282:	4453      	add	r3, sl
 802b284:	0858      	lsrs	r0, r3, #1
 802b286:	07da      	lsls	r2, r3, #31
 802b288:	5c38      	ldrb	r0, [r7, r0]
 802b28a:	bf54      	ite	pl
 802b28c:	f000 000f 	andpl.w	r0, r0, #15
 802b290:	1100      	asrmi	r0, r0, #4
 802b292:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b296:	b2c0      	uxtb	r0, r0
 802b298:	900a      	str	r0, [sp, #40]	; 0x28
 802b29a:	1c58      	adds	r0, r3, #1
 802b29c:	0843      	lsrs	r3, r0, #1
 802b29e:	07c2      	lsls	r2, r0, #31
 802b2a0:	5cfb      	ldrb	r3, [r7, r3]
 802b2a2:	bf54      	ite	pl
 802b2a4:	f003 030f 	andpl.w	r3, r3, #15
 802b2a8:	111b      	asrmi	r3, r3, #4
 802b2aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b2ae:	b2db      	uxtb	r3, r3
 802b2b0:	930e      	str	r3, [sp, #56]	; 0x38
 802b2b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b2b6:	b289      	uxth	r1, r1
 802b2b8:	fb02 f301 	mul.w	r3, r2, r1
 802b2bc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b2c0:	0112      	lsls	r2, r2, #4
 802b2c2:	b289      	uxth	r1, r1
 802b2c4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b2c8:	1a40      	subs	r0, r0, r1
 802b2ca:	fa1f fe80 	uxth.w	lr, r0
 802b2ce:	1ad2      	subs	r2, r2, r3
 802b2d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b2d2:	b292      	uxth	r2, r2
 802b2d4:	4342      	muls	r2, r0
 802b2d6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b2dc:	fb01 c102 	mla	r1, r1, r2, ip
 802b2e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b2e2:	fb03 1302 	mla	r3, r3, r2, r1
 802b2e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b2ea:	2bff      	cmp	r3, #255	; 0xff
 802b2ec:	f040 8093 	bne.w	802b416 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802b2f0:	4bbe      	ldr	r3, [pc, #760]	; (802b5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b2f2:	681a      	ldr	r2, [r3, #0]
 802b2f4:	4bbe      	ldr	r3, [pc, #760]	; (802b5f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802b2f6:	0951      	lsrs	r1, r2, #5
 802b2f8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b2fc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b300:	430b      	orrs	r3, r1
 802b302:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b306:	4313      	orrs	r3, r2
 802b308:	f8a8 3000 	strh.w	r3, [r8]
 802b30c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802b30e:	441c      	add	r4, r3
 802b310:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b312:	441e      	add	r6, r3
 802b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b316:	3b01      	subs	r3, #1
 802b318:	f108 0802 	add.w	r8, r8, #2
 802b31c:	9309      	str	r3, [sp, #36]	; 0x24
 802b31e:	e76c      	b.n	802b1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802b322:	441c      	add	r4, r3
 802b324:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b326:	3d01      	subs	r5, #1
 802b328:	441e      	add	r6, r3
 802b32a:	f109 0902 	add.w	r9, r9, #2
 802b32e:	e744      	b.n	802b1ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802b330:	d021      	beq.n	802b376 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802b332:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802b334:	1e6b      	subs	r3, r5, #1
 802b336:	fb00 4003 	mla	r0, r0, r3, r4
 802b33a:	1400      	asrs	r0, r0, #16
 802b33c:	f53f af59 	bmi.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b340:	3901      	subs	r1, #1
 802b342:	4288      	cmp	r0, r1
 802b344:	f6bf af55 	bge.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b348:	9920      	ldr	r1, [sp, #128]	; 0x80
 802b34a:	fb01 6303 	mla	r3, r1, r3, r6
 802b34e:	141b      	asrs	r3, r3, #16
 802b350:	f53f af4f 	bmi.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b354:	3a01      	subs	r2, #1
 802b356:	4293      	cmp	r3, r2
 802b358:	f6bf af4b 	bge.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b35c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b360:	9308      	str	r3, [sp, #32]
 802b362:	46a8      	mov	r8, r5
 802b364:	46ce      	mov	lr, r9
 802b366:	f1b8 0f00 	cmp.w	r8, #0
 802b36a:	f300 80b5 	bgt.w	802b4d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802b36e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b372:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b376:	9b07      	ldr	r3, [sp, #28]
 802b378:	2b00      	cmp	r3, #0
 802b37a:	f340 817d 	ble.w	802b678 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802b37e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b38a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b38c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b390:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b394:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b398:	eef0 6a62 	vmov.f32	s13, s5
 802b39c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b3a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b3a8:	ee16 4a90 	vmov	r4, s13
 802b3ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b3b0:	eef0 6a43 	vmov.f32	s13, s6
 802b3b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b3b8:	ee12 2a90 	vmov	r2, s5
 802b3bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b3c0:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3c4:	ee13 2a10 	vmov	r2, s6
 802b3c8:	931f      	str	r3, [sp, #124]	; 0x7c
 802b3ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b3cc:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3d0:	9320      	str	r3, [sp, #128]	; 0x80
 802b3d2:	9b07      	ldr	r3, [sp, #28]
 802b3d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b3d6:	3b01      	subs	r3, #1
 802b3d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3dc:	9307      	str	r3, [sp, #28]
 802b3de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b3e0:	ee16 6a90 	vmov	r6, s13
 802b3e4:	bf14      	ite	ne
 802b3e6:	461d      	movne	r5, r3
 802b3e8:	4615      	moveq	r5, r2
 802b3ea:	eeb0 3a67 	vmov.f32	s6, s15
 802b3ee:	eef0 2a47 	vmov.f32	s5, s14
 802b3f2:	e6d3      	b.n	802b19c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802b3f4:	2900      	cmp	r1, #0
 802b3f6:	f43f af5c 	beq.w	802b2b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802b3fa:	eb0a 0003 	add.w	r0, sl, r3
 802b3fe:	0843      	lsrs	r3, r0, #1
 802b400:	07c0      	lsls	r0, r0, #31
 802b402:	5cfb      	ldrb	r3, [r7, r3]
 802b404:	bf54      	ite	pl
 802b406:	f003 030f 	andpl.w	r3, r3, #15
 802b40a:	111b      	asrmi	r3, r3, #4
 802b40c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b410:	b2db      	uxtb	r3, r3
 802b412:	930a      	str	r3, [sp, #40]	; 0x28
 802b414:	e74d      	b.n	802b2b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802b416:	2b00      	cmp	r3, #0
 802b418:	f43f af78 	beq.w	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b41c:	4a73      	ldr	r2, [pc, #460]	; (802b5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b41e:	f8b8 c000 	ldrh.w	ip, [r8]
 802b422:	6810      	ldr	r0, [r2, #0]
 802b424:	fa1f fe83 	uxth.w	lr, r3
 802b428:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b42c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b430:	43db      	mvns	r3, r3
 802b432:	b2db      	uxtb	r3, r3
 802b434:	fb12 f20e 	smulbb	r2, r2, lr
 802b438:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b43c:	fb01 2103 	mla	r1, r1, r3, r2
 802b440:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b444:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b448:	b2c0      	uxtb	r0, r0
 802b44a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b44e:	fb1b fb0e 	smulbb	fp, fp, lr
 802b452:	b289      	uxth	r1, r1
 802b454:	fb10 fe0e 	smulbb	lr, r0, lr
 802b458:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b45c:	fa5f fc8c 	uxtb.w	ip, ip
 802b460:	fb02 b203 	mla	r2, r2, r3, fp
 802b464:	1c48      	adds	r0, r1, #1
 802b466:	fb0c e303 	mla	r3, ip, r3, lr
 802b46a:	b292      	uxth	r2, r2
 802b46c:	b29b      	uxth	r3, r3
 802b46e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b472:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802b476:	f102 0b01 	add.w	fp, r2, #1
 802b47a:	1c59      	adds	r1, r3, #1
 802b47c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b480:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b484:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b488:	0952      	lsrs	r2, r2, #5
 802b48a:	4301      	orrs	r1, r0
 802b48c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b490:	4311      	orrs	r1, r2
 802b492:	f8a8 1000 	strh.w	r1, [r8]
 802b496:	e739      	b.n	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b498:	f113 0b01 	adds.w	fp, r3, #1
 802b49c:	f53f af36 	bmi.w	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b4a0:	45dc      	cmp	ip, fp
 802b4a2:	f6ff af33 	blt.w	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b4a6:	f110 0b01 	adds.w	fp, r0, #1
 802b4aa:	f53f af2f 	bmi.w	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b4ae:	45de      	cmp	lr, fp
 802b4b0:	f6ff af2c 	blt.w	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b4b4:	9a08      	ldr	r2, [sp, #32]
 802b4b6:	9302      	str	r3, [sp, #8]
 802b4b8:	fa0f f38e 	sxth.w	r3, lr
 802b4bc:	9301      	str	r3, [sp, #4]
 802b4be:	fa0f f38c 	sxth.w	r3, ip
 802b4c2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b4c6:	9105      	str	r1, [sp, #20]
 802b4c8:	9300      	str	r3, [sp, #0]
 802b4ca:	463a      	mov	r2, r7
 802b4cc:	4653      	mov	r3, sl
 802b4ce:	4641      	mov	r1, r8
 802b4d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 802b4d2:	f7ff fd73 	bl	802afbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b4d6:	e719      	b.n	802b30c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802b4d8:	9906      	ldr	r1, [sp, #24]
 802b4da:	1422      	asrs	r2, r4, #16
 802b4dc:	1433      	asrs	r3, r6, #16
 802b4de:	fb01 2303 	mla	r3, r1, r3, r2
 802b4e2:	085a      	lsrs	r2, r3, #1
 802b4e4:	07d9      	lsls	r1, r3, #31
 802b4e6:	5cba      	ldrb	r2, [r7, r2]
 802b4e8:	bf54      	ite	pl
 802b4ea:	f002 020f 	andpl.w	r2, r2, #15
 802b4ee:	1112      	asrmi	r2, r2, #4
 802b4f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b4f4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b4f8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b4fc:	b2d2      	uxtb	r2, r2
 802b4fe:	2800      	cmp	r0, #0
 802b500:	d062      	beq.n	802b5c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802b502:	f103 0a01 	add.w	sl, r3, #1
 802b506:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b50a:	f01a 0f01 	tst.w	sl, #1
 802b50e:	5c79      	ldrb	r1, [r7, r1]
 802b510:	bf0c      	ite	eq
 802b512:	f001 010f 	andeq.w	r1, r1, #15
 802b516:	1109      	asrne	r1, r1, #4
 802b518:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b51c:	b2c9      	uxtb	r1, r1
 802b51e:	910f      	str	r1, [sp, #60]	; 0x3c
 802b520:	f1bc 0f00 	cmp.w	ip, #0
 802b524:	d019      	beq.n	802b55a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802b526:	9908      	ldr	r1, [sp, #32]
 802b528:	440b      	add	r3, r1
 802b52a:	0859      	lsrs	r1, r3, #1
 802b52c:	f013 0f01 	tst.w	r3, #1
 802b530:	5c79      	ldrb	r1, [r7, r1]
 802b532:	bf0c      	ite	eq
 802b534:	f001 010f 	andeq.w	r1, r1, #15
 802b538:	1109      	asrne	r1, r1, #4
 802b53a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b53e:	b2c9      	uxtb	r1, r1
 802b540:	3301      	adds	r3, #1
 802b542:	910b      	str	r1, [sp, #44]	; 0x2c
 802b544:	0859      	lsrs	r1, r3, #1
 802b546:	07db      	lsls	r3, r3, #31
 802b548:	5c79      	ldrb	r1, [r7, r1]
 802b54a:	bf54      	ite	pl
 802b54c:	f001 010f 	andpl.w	r1, r1, #15
 802b550:	1109      	asrmi	r1, r1, #4
 802b552:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b556:	b2c9      	uxtb	r1, r1
 802b558:	9110      	str	r1, [sp, #64]	; 0x40
 802b55a:	b280      	uxth	r0, r0
 802b55c:	fa1f fc8c 	uxth.w	ip, ip
 802b560:	fb00 f30c 	mul.w	r3, r0, ip
 802b564:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b568:	0100      	lsls	r0, r0, #4
 802b56a:	fa1f fc8c 	uxth.w	ip, ip
 802b56e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802b572:	eba1 010c 	sub.w	r1, r1, ip
 802b576:	fa1f fa81 	uxth.w	sl, r1
 802b57a:	1ac0      	subs	r0, r0, r3
 802b57c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b57e:	b280      	uxth	r0, r0
 802b580:	4348      	muls	r0, r1
 802b582:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802b584:	fb02 020a 	mla	r2, r2, sl, r0
 802b588:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b58c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b58e:	fb03 c302 	mla	r3, r3, r2, ip
 802b592:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b596:	2bff      	cmp	r3, #255	; 0xff
 802b598:	d12c      	bne.n	802b5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802b59a:	4b14      	ldr	r3, [pc, #80]	; (802b5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b59c:	681a      	ldr	r2, [r3, #0]
 802b59e:	4b14      	ldr	r3, [pc, #80]	; (802b5f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802b5a0:	0951      	lsrs	r1, r2, #5
 802b5a2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b5a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b5aa:	430b      	orrs	r3, r1
 802b5ac:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b5b0:	4313      	orrs	r3, r2
 802b5b2:	f8ae 3000 	strh.w	r3, [lr]
 802b5b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802b5b8:	441c      	add	r4, r3
 802b5ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b5bc:	f10e 0e02 	add.w	lr, lr, #2
 802b5c0:	441e      	add	r6, r3
 802b5c2:	f108 38ff 	add.w	r8, r8, #4294967295
 802b5c6:	e6ce      	b.n	802b366 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802b5c8:	f1bc 0f00 	cmp.w	ip, #0
 802b5cc:	d0c5      	beq.n	802b55a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802b5ce:	9908      	ldr	r1, [sp, #32]
 802b5d0:	440b      	add	r3, r1
 802b5d2:	0859      	lsrs	r1, r3, #1
 802b5d4:	07db      	lsls	r3, r3, #31
 802b5d6:	5c79      	ldrb	r1, [r7, r1]
 802b5d8:	bf54      	ite	pl
 802b5da:	f001 010f 	andpl.w	r1, r1, #15
 802b5de:	1109      	asrmi	r1, r1, #4
 802b5e0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5e4:	b2c9      	uxtb	r1, r1
 802b5e6:	910b      	str	r1, [sp, #44]	; 0x2c
 802b5e8:	e7b7      	b.n	802b55a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802b5ea:	bf00      	nop
 802b5ec:	2000b4cc 	.word	0x2000b4cc
 802b5f0:	fffff800 	.word	0xfffff800
 802b5f4:	2b00      	cmp	r3, #0
 802b5f6:	d0de      	beq.n	802b5b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802b5f8:	4a21      	ldr	r2, [pc, #132]	; (802b680 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802b5fa:	f8be c000 	ldrh.w	ip, [lr]
 802b5fe:	6810      	ldr	r0, [r2, #0]
 802b600:	fa1f fa83 	uxth.w	sl, r3
 802b604:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b608:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b60c:	43db      	mvns	r3, r3
 802b60e:	b2db      	uxtb	r3, r3
 802b610:	fb12 f20a 	smulbb	r2, r2, sl
 802b614:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b618:	fb01 2103 	mla	r1, r1, r3, r2
 802b61c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b620:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b624:	b2c0      	uxtb	r0, r0
 802b626:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b62a:	fa5f fc8c 	uxtb.w	ip, ip
 802b62e:	fb10 f00a 	smulbb	r0, r0, sl
 802b632:	fb0c 0003 	mla	r0, ip, r3, r0
 802b636:	b289      	uxth	r1, r1
 802b638:	fb1b fb0a 	smulbb	fp, fp, sl
 802b63c:	b280      	uxth	r0, r0
 802b63e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b642:	fb02 b203 	mla	r2, r2, r3, fp
 802b646:	1c4b      	adds	r3, r1, #1
 802b648:	f100 0b01 	add.w	fp, r0, #1
 802b64c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b650:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b654:	b292      	uxth	r2, r2
 802b656:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b65a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802b65e:	ea4b 0101 	orr.w	r1, fp, r1
 802b662:	f102 0b01 	add.w	fp, r2, #1
 802b666:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b66a:	0952      	lsrs	r2, r2, #5
 802b66c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b670:	4311      	orrs	r1, r2
 802b672:	f8ae 1000 	strh.w	r1, [lr]
 802b676:	e79e      	b.n	802b5b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802b678:	b013      	add	sp, #76	; 0x4c
 802b67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b67e:	bf00      	nop
 802b680:	2000b4cc 	.word	0x2000b4cc

0802b684 <CRC_Lock>:
 802b684:	b530      	push	{r4, r5, lr}
 802b686:	4a20      	ldr	r2, [pc, #128]	; (802b708 <CRC_Lock+0x84>)
 802b688:	6813      	ldr	r3, [r2, #0]
 802b68a:	f023 0301 	bic.w	r3, r3, #1
 802b68e:	6013      	str	r3, [r2, #0]
 802b690:	4b1e      	ldr	r3, [pc, #120]	; (802b70c <CRC_Lock+0x88>)
 802b692:	681a      	ldr	r2, [r3, #0]
 802b694:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802b698:	4022      	ands	r2, r4
 802b69a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802b69e:	42aa      	cmp	r2, r5
 802b6a0:	d005      	beq.n	802b6ae <CRC_Lock+0x2a>
 802b6a2:	681b      	ldr	r3, [r3, #0]
 802b6a4:	f24c 2270 	movw	r2, #49776	; 0xc270
 802b6a8:	4023      	ands	r3, r4
 802b6aa:	4293      	cmp	r3, r2
 802b6ac:	d124      	bne.n	802b6f8 <CRC_Lock+0x74>
 802b6ae:	4b18      	ldr	r3, [pc, #96]	; (802b710 <CRC_Lock+0x8c>)
 802b6b0:	681b      	ldr	r3, [r3, #0]
 802b6b2:	bb0b      	cbnz	r3, 802b6f8 <CRC_Lock+0x74>
 802b6b4:	4b17      	ldr	r3, [pc, #92]	; (802b714 <CRC_Lock+0x90>)
 802b6b6:	681a      	ldr	r2, [r3, #0]
 802b6b8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b6bc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802b6c0:	d00d      	beq.n	802b6de <CRC_Lock+0x5a>
 802b6c2:	681a      	ldr	r2, [r3, #0]
 802b6c4:	f240 4483 	movw	r4, #1155	; 0x483
 802b6c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802b6cc:	42a2      	cmp	r2, r4
 802b6ce:	d006      	beq.n	802b6de <CRC_Lock+0x5a>
 802b6d0:	681b      	ldr	r3, [r3, #0]
 802b6d2:	f240 4285 	movw	r2, #1157	; 0x485
 802b6d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b6da:	4293      	cmp	r3, r2
 802b6dc:	d10c      	bne.n	802b6f8 <CRC_Lock+0x74>
 802b6de:	4b0e      	ldr	r3, [pc, #56]	; (802b718 <CRC_Lock+0x94>)
 802b6e0:	2201      	movs	r2, #1
 802b6e2:	601a      	str	r2, [r3, #0]
 802b6e4:	681a      	ldr	r2, [r3, #0]
 802b6e6:	2a00      	cmp	r2, #0
 802b6e8:	d1fc      	bne.n	802b6e4 <CRC_Lock+0x60>
 802b6ea:	4b0c      	ldr	r3, [pc, #48]	; (802b71c <CRC_Lock+0x98>)
 802b6ec:	6018      	str	r0, [r3, #0]
 802b6ee:	6818      	ldr	r0, [r3, #0]
 802b6f0:	1a43      	subs	r3, r0, r1
 802b6f2:	4258      	negs	r0, r3
 802b6f4:	4158      	adcs	r0, r3
 802b6f6:	bd30      	pop	{r4, r5, pc}
 802b6f8:	4b09      	ldr	r3, [pc, #36]	; (802b720 <CRC_Lock+0x9c>)
 802b6fa:	2201      	movs	r2, #1
 802b6fc:	601a      	str	r2, [r3, #0]
 802b6fe:	681a      	ldr	r2, [r3, #0]
 802b700:	2a00      	cmp	r2, #0
 802b702:	d1fc      	bne.n	802b6fe <CRC_Lock+0x7a>
 802b704:	4b07      	ldr	r3, [pc, #28]	; (802b724 <CRC_Lock+0xa0>)
 802b706:	e7f1      	b.n	802b6ec <CRC_Lock+0x68>
 802b708:	e0002000 	.word	0xe0002000
 802b70c:	e000ed00 	.word	0xe000ed00
 802b710:	e0042000 	.word	0xe0042000
 802b714:	5c001000 	.word	0x5c001000
 802b718:	58024c08 	.word	0x58024c08
 802b71c:	58024c00 	.word	0x58024c00
 802b720:	40023008 	.word	0x40023008
 802b724:	40023000 	.word	0x40023000

0802b728 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802b728:	6101      	str	r1, [r0, #16]
 802b72a:	4770      	bx	lr

0802b72c <_ZN8touchgfx8Gestures4tickEv>:
 802b72c:	7b83      	ldrb	r3, [r0, #14]
 802b72e:	b14b      	cbz	r3, 802b744 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802b730:	8903      	ldrh	r3, [r0, #8]
 802b732:	3301      	adds	r3, #1
 802b734:	b29b      	uxth	r3, r3
 802b736:	2b07      	cmp	r3, #7
 802b738:	8103      	strh	r3, [r0, #8]
 802b73a:	bf81      	itttt	hi
 802b73c:	2300      	movhi	r3, #0
 802b73e:	8143      	strhhi	r3, [r0, #10]
 802b740:	8183      	strhhi	r3, [r0, #12]
 802b742:	7383      	strbhi	r3, [r0, #14]
 802b744:	4770      	bx	lr
	...

0802b748 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802b748:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802b74c:	4698      	mov	r8, r3
 802b74e:	8883      	ldrh	r3, [r0, #4]
 802b750:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b754:	eba8 0303 	sub.w	r3, r8, r3
 802b758:	b21b      	sxth	r3, r3
 802b75a:	4604      	mov	r4, r0
 802b75c:	2b00      	cmp	r3, #0
 802b75e:	4617      	mov	r7, r2
 802b760:	4a18      	ldr	r2, [pc, #96]	; (802b7c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802b762:	9200      	str	r2, [sp, #0]
 802b764:	bfb8      	it	lt
 802b766:	425b      	neglt	r3, r3
 802b768:	8aa2      	ldrh	r2, [r4, #20]
 802b76a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802b76e:	f8ad 800a 	strh.w	r8, [sp, #10]
 802b772:	b21b      	sxth	r3, r3
 802b774:	460e      	mov	r6, r1
 802b776:	4293      	cmp	r3, r2
 802b778:	88c1      	ldrh	r1, [r0, #6]
 802b77a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802b77e:	f04f 0000 	mov.w	r0, #0
 802b782:	f88d 0004 	strb.w	r0, [sp, #4]
 802b786:	f8ad 500c 	strh.w	r5, [sp, #12]
 802b78a:	dc07      	bgt.n	802b79c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 802b78c:	1a69      	subs	r1, r5, r1
 802b78e:	b209      	sxth	r1, r1
 802b790:	2900      	cmp	r1, #0
 802b792:	bfb8      	it	lt
 802b794:	4249      	neglt	r1, r1
 802b796:	b209      	sxth	r1, r1
 802b798:	428a      	cmp	r2, r1
 802b79a:	da10      	bge.n	802b7be <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 802b79c:	6920      	ldr	r0, [r4, #16]
 802b79e:	6803      	ldr	r3, [r0, #0]
 802b7a0:	4669      	mov	r1, sp
 802b7a2:	685b      	ldr	r3, [r3, #4]
 802b7a4:	4798      	blx	r3
 802b7a6:	eba8 0606 	sub.w	r6, r8, r6
 802b7aa:	2300      	movs	r3, #0
 802b7ac:	1bef      	subs	r7, r5, r7
 802b7ae:	2001      	movs	r0, #1
 802b7b0:	8123      	strh	r3, [r4, #8]
 802b7b2:	8166      	strh	r6, [r4, #10]
 802b7b4:	81a7      	strh	r7, [r4, #12]
 802b7b6:	f8a4 8004 	strh.w	r8, [r4, #4]
 802b7ba:	80e5      	strh	r5, [r4, #6]
 802b7bc:	73a0      	strb	r0, [r4, #14]
 802b7be:	b004      	add	sp, #16
 802b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b7c4:	0802f430 	.word	0x0802f430

0802b7c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802b7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b7ca:	461e      	mov	r6, r3
 802b7cc:	1e4b      	subs	r3, r1, #1
 802b7ce:	2b01      	cmp	r3, #1
 802b7d0:	b085      	sub	sp, #20
 802b7d2:	4604      	mov	r4, r0
 802b7d4:	460d      	mov	r5, r1
 802b7d6:	4617      	mov	r7, r2
 802b7d8:	d84b      	bhi.n	802b872 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802b7da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802b7de:	1cd3      	adds	r3, r2, #3
 802b7e0:	b29b      	uxth	r3, r3
 802b7e2:	2b06      	cmp	r3, #6
 802b7e4:	d916      	bls.n	802b814 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802b7e6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802b888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b7ea:	f8cd c004 	str.w	ip, [sp, #4]
 802b7ee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b7f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b7f6:	6900      	ldr	r0, [r0, #16]
 802b7f8:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b7fc:	f04f 0c00 	mov.w	ip, #0
 802b800:	f88d c008 	strb.w	ip, [sp, #8]
 802b804:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b808:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b80c:	6803      	ldr	r3, [r0, #0]
 802b80e:	a901      	add	r1, sp, #4
 802b810:	689b      	ldr	r3, [r3, #8]
 802b812:	4798      	blx	r3
 802b814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b818:	1cd3      	adds	r3, r2, #3
 802b81a:	b29b      	uxth	r3, r3
 802b81c:	2b06      	cmp	r3, #6
 802b81e:	d916      	bls.n	802b84e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b820:	f8df c064 	ldr.w	ip, [pc, #100]	; 802b888 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802b824:	f8cd c004 	str.w	ip, [sp, #4]
 802b828:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802b82c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802b830:	6920      	ldr	r0, [r4, #16]
 802b832:	f8ad 100c 	strh.w	r1, [sp, #12]
 802b836:	f04f 0c01 	mov.w	ip, #1
 802b83a:	f88d c008 	strb.w	ip, [sp, #8]
 802b83e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802b842:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b846:	6803      	ldr	r3, [r0, #0]
 802b848:	a901      	add	r1, sp, #4
 802b84a:	689b      	ldr	r3, [r3, #8]
 802b84c:	4798      	blx	r3
 802b84e:	4b0d      	ldr	r3, [pc, #52]	; (802b884 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802b850:	9301      	str	r3, [sp, #4]
 802b852:	6920      	ldr	r0, [r4, #16]
 802b854:	f88d 5008 	strb.w	r5, [sp, #8]
 802b858:	2300      	movs	r3, #0
 802b85a:	f8ad 700a 	strh.w	r7, [sp, #10]
 802b85e:	f8ad 600c 	strh.w	r6, [sp, #12]
 802b862:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b866:	6803      	ldr	r3, [r0, #0]
 802b868:	a901      	add	r1, sp, #4
 802b86a:	681b      	ldr	r3, [r3, #0]
 802b86c:	4798      	blx	r3
 802b86e:	b005      	add	sp, #20
 802b870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b872:	2900      	cmp	r1, #0
 802b874:	d1eb      	bne.n	802b84e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b876:	80a2      	strh	r2, [r4, #4]
 802b878:	80c6      	strh	r6, [r0, #6]
 802b87a:	60a1      	str	r1, [r4, #8]
 802b87c:	81a1      	strh	r1, [r4, #12]
 802b87e:	73a1      	strb	r1, [r4, #14]
 802b880:	e7e5      	b.n	802b84e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802b882:	bf00      	nop
 802b884:	0802f41c 	.word	0x0802f41c
 802b888:	0802f444 	.word	0x0802f444

0802b88c <__aeabi_atexit>:
 802b88c:	460b      	mov	r3, r1
 802b88e:	4601      	mov	r1, r0
 802b890:	4618      	mov	r0, r3
 802b892:	f000 b853 	b.w	802b93c <__cxa_atexit>

0802b896 <_ZdlPvj>:
 802b896:	f000 b812 	b.w	802b8be <_ZdlPv>

0802b89a <__cxa_guard_acquire>:
 802b89a:	6803      	ldr	r3, [r0, #0]
 802b89c:	07db      	lsls	r3, r3, #31
 802b89e:	d406      	bmi.n	802b8ae <__cxa_guard_acquire+0x14>
 802b8a0:	7843      	ldrb	r3, [r0, #1]
 802b8a2:	b103      	cbz	r3, 802b8a6 <__cxa_guard_acquire+0xc>
 802b8a4:	deff      	udf	#255	; 0xff
 802b8a6:	2301      	movs	r3, #1
 802b8a8:	7043      	strb	r3, [r0, #1]
 802b8aa:	4618      	mov	r0, r3
 802b8ac:	4770      	bx	lr
 802b8ae:	2000      	movs	r0, #0
 802b8b0:	4770      	bx	lr

0802b8b2 <__cxa_guard_release>:
 802b8b2:	2301      	movs	r3, #1
 802b8b4:	6003      	str	r3, [r0, #0]
 802b8b6:	4770      	bx	lr

0802b8b8 <__cxa_pure_virtual>:
 802b8b8:	b508      	push	{r3, lr}
 802b8ba:	f000 f80f 	bl	802b8dc <_ZSt9terminatev>

0802b8be <_ZdlPv>:
 802b8be:	f000 b88f 	b.w	802b9e0 <free>

0802b8c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802b8c2:	b508      	push	{r3, lr}
 802b8c4:	4780      	blx	r0
 802b8c6:	f000 f80e 	bl	802b8e6 <abort>
	...

0802b8cc <_ZSt13get_terminatev>:
 802b8cc:	4b02      	ldr	r3, [pc, #8]	; (802b8d8 <_ZSt13get_terminatev+0xc>)
 802b8ce:	6818      	ldr	r0, [r3, #0]
 802b8d0:	f3bf 8f5b 	dmb	ish
 802b8d4:	4770      	bx	lr
 802b8d6:	bf00      	nop
 802b8d8:	20000384 	.word	0x20000384

0802b8dc <_ZSt9terminatev>:
 802b8dc:	b508      	push	{r3, lr}
 802b8de:	f7ff fff5 	bl	802b8cc <_ZSt13get_terminatev>
 802b8e2:	f7ff ffee 	bl	802b8c2 <_ZN10__cxxabiv111__terminateEPFvvE>

0802b8e6 <abort>:
 802b8e6:	b508      	push	{r3, lr}
 802b8e8:	2006      	movs	r0, #6
 802b8ea:	f000 fc9d 	bl	802c228 <raise>
 802b8ee:	2001      	movs	r0, #1
 802b8f0:	f7d8 f874 	bl	80039dc <_exit>

0802b8f4 <__assert_func>:
 802b8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b8f6:	4614      	mov	r4, r2
 802b8f8:	461a      	mov	r2, r3
 802b8fa:	4b09      	ldr	r3, [pc, #36]	; (802b920 <__assert_func+0x2c>)
 802b8fc:	681b      	ldr	r3, [r3, #0]
 802b8fe:	4605      	mov	r5, r0
 802b900:	68d8      	ldr	r0, [r3, #12]
 802b902:	b14c      	cbz	r4, 802b918 <__assert_func+0x24>
 802b904:	4b07      	ldr	r3, [pc, #28]	; (802b924 <__assert_func+0x30>)
 802b906:	9100      	str	r1, [sp, #0]
 802b908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b90c:	4906      	ldr	r1, [pc, #24]	; (802b928 <__assert_func+0x34>)
 802b90e:	462b      	mov	r3, r5
 802b910:	f000 f828 	bl	802b964 <fiprintf>
 802b914:	f7ff ffe7 	bl	802b8e6 <abort>
 802b918:	4b04      	ldr	r3, [pc, #16]	; (802b92c <__assert_func+0x38>)
 802b91a:	461c      	mov	r4, r3
 802b91c:	e7f3      	b.n	802b906 <__assert_func+0x12>
 802b91e:	bf00      	nop
 802b920:	20000388 	.word	0x20000388
 802b924:	0802f70c 	.word	0x0802f70c
 802b928:	0802f719 	.word	0x0802f719
 802b92c:	0802f747 	.word	0x0802f747

0802b930 <atexit>:
 802b930:	2300      	movs	r3, #0
 802b932:	4601      	mov	r1, r0
 802b934:	461a      	mov	r2, r3
 802b936:	4618      	mov	r0, r3
 802b938:	f000 bdf6 	b.w	802c528 <__register_exitproc>

0802b93c <__cxa_atexit>:
 802b93c:	b510      	push	{r4, lr}
 802b93e:	4c05      	ldr	r4, [pc, #20]	; (802b954 <__cxa_atexit+0x18>)
 802b940:	4613      	mov	r3, r2
 802b942:	b12c      	cbz	r4, 802b950 <__cxa_atexit+0x14>
 802b944:	460a      	mov	r2, r1
 802b946:	4601      	mov	r1, r0
 802b948:	2002      	movs	r0, #2
 802b94a:	f000 fded 	bl	802c528 <__register_exitproc>
 802b94e:	bd10      	pop	{r4, pc}
 802b950:	4620      	mov	r0, r4
 802b952:	e7fc      	b.n	802b94e <__cxa_atexit+0x12>
 802b954:	0802c529 	.word	0x0802c529

0802b958 <__errno>:
 802b958:	4b01      	ldr	r3, [pc, #4]	; (802b960 <__errno+0x8>)
 802b95a:	6818      	ldr	r0, [r3, #0]
 802b95c:	4770      	bx	lr
 802b95e:	bf00      	nop
 802b960:	20000388 	.word	0x20000388

0802b964 <fiprintf>:
 802b964:	b40e      	push	{r1, r2, r3}
 802b966:	b503      	push	{r0, r1, lr}
 802b968:	4601      	mov	r1, r0
 802b96a:	ab03      	add	r3, sp, #12
 802b96c:	4805      	ldr	r0, [pc, #20]	; (802b984 <fiprintf+0x20>)
 802b96e:	f853 2b04 	ldr.w	r2, [r3], #4
 802b972:	6800      	ldr	r0, [r0, #0]
 802b974:	9301      	str	r3, [sp, #4]
 802b976:	f000 f95b 	bl	802bc30 <_vfiprintf_r>
 802b97a:	b002      	add	sp, #8
 802b97c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b980:	b003      	add	sp, #12
 802b982:	4770      	bx	lr
 802b984:	20000388 	.word	0x20000388

0802b988 <__libc_init_array>:
 802b988:	b570      	push	{r4, r5, r6, lr}
 802b98a:	4d0d      	ldr	r5, [pc, #52]	; (802b9c0 <__libc_init_array+0x38>)
 802b98c:	4c0d      	ldr	r4, [pc, #52]	; (802b9c4 <__libc_init_array+0x3c>)
 802b98e:	1b64      	subs	r4, r4, r5
 802b990:	10a4      	asrs	r4, r4, #2
 802b992:	2600      	movs	r6, #0
 802b994:	42a6      	cmp	r6, r4
 802b996:	d109      	bne.n	802b9ac <__libc_init_array+0x24>
 802b998:	4d0b      	ldr	r5, [pc, #44]	; (802b9c8 <__libc_init_array+0x40>)
 802b99a:	4c0c      	ldr	r4, [pc, #48]	; (802b9cc <__libc_init_array+0x44>)
 802b99c:	f001 fee4 	bl	802d768 <_init>
 802b9a0:	1b64      	subs	r4, r4, r5
 802b9a2:	10a4      	asrs	r4, r4, #2
 802b9a4:	2600      	movs	r6, #0
 802b9a6:	42a6      	cmp	r6, r4
 802b9a8:	d105      	bne.n	802b9b6 <__libc_init_array+0x2e>
 802b9aa:	bd70      	pop	{r4, r5, r6, pc}
 802b9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 802b9b0:	4798      	blx	r3
 802b9b2:	3601      	adds	r6, #1
 802b9b4:	e7ee      	b.n	802b994 <__libc_init_array+0xc>
 802b9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 802b9ba:	4798      	blx	r3
 802b9bc:	3601      	adds	r6, #1
 802b9be:	e7f2      	b.n	802b9a6 <__libc_init_array+0x1e>
 802b9c0:	0805c47c 	.word	0x0805c47c
 802b9c4:	0805c47c 	.word	0x0805c47c
 802b9c8:	0805c47c 	.word	0x0805c47c
 802b9cc:	0805c490 	.word	0x0805c490

0802b9d0 <malloc>:
 802b9d0:	4b02      	ldr	r3, [pc, #8]	; (802b9dc <malloc+0xc>)
 802b9d2:	4601      	mov	r1, r0
 802b9d4:	6818      	ldr	r0, [r3, #0]
 802b9d6:	f000 b88d 	b.w	802baf4 <_malloc_r>
 802b9da:	bf00      	nop
 802b9dc:	20000388 	.word	0x20000388

0802b9e0 <free>:
 802b9e0:	4b02      	ldr	r3, [pc, #8]	; (802b9ec <free+0xc>)
 802b9e2:	4601      	mov	r1, r0
 802b9e4:	6818      	ldr	r0, [r3, #0]
 802b9e6:	f000 b819 	b.w	802ba1c <_free_r>
 802b9ea:	bf00      	nop
 802b9ec:	20000388 	.word	0x20000388

0802b9f0 <memcpy>:
 802b9f0:	440a      	add	r2, r1
 802b9f2:	4291      	cmp	r1, r2
 802b9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 802b9f8:	d100      	bne.n	802b9fc <memcpy+0xc>
 802b9fa:	4770      	bx	lr
 802b9fc:	b510      	push	{r4, lr}
 802b9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ba02:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ba06:	4291      	cmp	r1, r2
 802ba08:	d1f9      	bne.n	802b9fe <memcpy+0xe>
 802ba0a:	bd10      	pop	{r4, pc}

0802ba0c <memset>:
 802ba0c:	4402      	add	r2, r0
 802ba0e:	4603      	mov	r3, r0
 802ba10:	4293      	cmp	r3, r2
 802ba12:	d100      	bne.n	802ba16 <memset+0xa>
 802ba14:	4770      	bx	lr
 802ba16:	f803 1b01 	strb.w	r1, [r3], #1
 802ba1a:	e7f9      	b.n	802ba10 <memset+0x4>

0802ba1c <_free_r>:
 802ba1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ba1e:	2900      	cmp	r1, #0
 802ba20:	d044      	beq.n	802baac <_free_r+0x90>
 802ba22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ba26:	9001      	str	r0, [sp, #4]
 802ba28:	2b00      	cmp	r3, #0
 802ba2a:	f1a1 0404 	sub.w	r4, r1, #4
 802ba2e:	bfb8      	it	lt
 802ba30:	18e4      	addlt	r4, r4, r3
 802ba32:	f001 f839 	bl	802caa8 <__malloc_lock>
 802ba36:	4a1e      	ldr	r2, [pc, #120]	; (802bab0 <_free_r+0x94>)
 802ba38:	9801      	ldr	r0, [sp, #4]
 802ba3a:	6813      	ldr	r3, [r2, #0]
 802ba3c:	b933      	cbnz	r3, 802ba4c <_free_r+0x30>
 802ba3e:	6063      	str	r3, [r4, #4]
 802ba40:	6014      	str	r4, [r2, #0]
 802ba42:	b003      	add	sp, #12
 802ba44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ba48:	f001 b834 	b.w	802cab4 <__malloc_unlock>
 802ba4c:	42a3      	cmp	r3, r4
 802ba4e:	d908      	bls.n	802ba62 <_free_r+0x46>
 802ba50:	6825      	ldr	r5, [r4, #0]
 802ba52:	1961      	adds	r1, r4, r5
 802ba54:	428b      	cmp	r3, r1
 802ba56:	bf01      	itttt	eq
 802ba58:	6819      	ldreq	r1, [r3, #0]
 802ba5a:	685b      	ldreq	r3, [r3, #4]
 802ba5c:	1949      	addeq	r1, r1, r5
 802ba5e:	6021      	streq	r1, [r4, #0]
 802ba60:	e7ed      	b.n	802ba3e <_free_r+0x22>
 802ba62:	461a      	mov	r2, r3
 802ba64:	685b      	ldr	r3, [r3, #4]
 802ba66:	b10b      	cbz	r3, 802ba6c <_free_r+0x50>
 802ba68:	42a3      	cmp	r3, r4
 802ba6a:	d9fa      	bls.n	802ba62 <_free_r+0x46>
 802ba6c:	6811      	ldr	r1, [r2, #0]
 802ba6e:	1855      	adds	r5, r2, r1
 802ba70:	42a5      	cmp	r5, r4
 802ba72:	d10b      	bne.n	802ba8c <_free_r+0x70>
 802ba74:	6824      	ldr	r4, [r4, #0]
 802ba76:	4421      	add	r1, r4
 802ba78:	1854      	adds	r4, r2, r1
 802ba7a:	42a3      	cmp	r3, r4
 802ba7c:	6011      	str	r1, [r2, #0]
 802ba7e:	d1e0      	bne.n	802ba42 <_free_r+0x26>
 802ba80:	681c      	ldr	r4, [r3, #0]
 802ba82:	685b      	ldr	r3, [r3, #4]
 802ba84:	6053      	str	r3, [r2, #4]
 802ba86:	4421      	add	r1, r4
 802ba88:	6011      	str	r1, [r2, #0]
 802ba8a:	e7da      	b.n	802ba42 <_free_r+0x26>
 802ba8c:	d902      	bls.n	802ba94 <_free_r+0x78>
 802ba8e:	230c      	movs	r3, #12
 802ba90:	6003      	str	r3, [r0, #0]
 802ba92:	e7d6      	b.n	802ba42 <_free_r+0x26>
 802ba94:	6825      	ldr	r5, [r4, #0]
 802ba96:	1961      	adds	r1, r4, r5
 802ba98:	428b      	cmp	r3, r1
 802ba9a:	bf04      	itt	eq
 802ba9c:	6819      	ldreq	r1, [r3, #0]
 802ba9e:	685b      	ldreq	r3, [r3, #4]
 802baa0:	6063      	str	r3, [r4, #4]
 802baa2:	bf04      	itt	eq
 802baa4:	1949      	addeq	r1, r1, r5
 802baa6:	6021      	streq	r1, [r4, #0]
 802baa8:	6054      	str	r4, [r2, #4]
 802baaa:	e7ca      	b.n	802ba42 <_free_r+0x26>
 802baac:	b003      	add	sp, #12
 802baae:	bd30      	pop	{r4, r5, pc}
 802bab0:	2000b5c0 	.word	0x2000b5c0

0802bab4 <sbrk_aligned>:
 802bab4:	b570      	push	{r4, r5, r6, lr}
 802bab6:	4e0e      	ldr	r6, [pc, #56]	; (802baf0 <sbrk_aligned+0x3c>)
 802bab8:	460c      	mov	r4, r1
 802baba:	6831      	ldr	r1, [r6, #0]
 802babc:	4605      	mov	r5, r0
 802babe:	b911      	cbnz	r1, 802bac6 <sbrk_aligned+0x12>
 802bac0:	f000 fb7a 	bl	802c1b8 <_sbrk_r>
 802bac4:	6030      	str	r0, [r6, #0]
 802bac6:	4621      	mov	r1, r4
 802bac8:	4628      	mov	r0, r5
 802baca:	f000 fb75 	bl	802c1b8 <_sbrk_r>
 802bace:	1c43      	adds	r3, r0, #1
 802bad0:	d00a      	beq.n	802bae8 <sbrk_aligned+0x34>
 802bad2:	1cc4      	adds	r4, r0, #3
 802bad4:	f024 0403 	bic.w	r4, r4, #3
 802bad8:	42a0      	cmp	r0, r4
 802bada:	d007      	beq.n	802baec <sbrk_aligned+0x38>
 802badc:	1a21      	subs	r1, r4, r0
 802bade:	4628      	mov	r0, r5
 802bae0:	f000 fb6a 	bl	802c1b8 <_sbrk_r>
 802bae4:	3001      	adds	r0, #1
 802bae6:	d101      	bne.n	802baec <sbrk_aligned+0x38>
 802bae8:	f04f 34ff 	mov.w	r4, #4294967295
 802baec:	4620      	mov	r0, r4
 802baee:	bd70      	pop	{r4, r5, r6, pc}
 802baf0:	2000b5c4 	.word	0x2000b5c4

0802baf4 <_malloc_r>:
 802baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802baf8:	1ccd      	adds	r5, r1, #3
 802bafa:	f025 0503 	bic.w	r5, r5, #3
 802bafe:	3508      	adds	r5, #8
 802bb00:	2d0c      	cmp	r5, #12
 802bb02:	bf38      	it	cc
 802bb04:	250c      	movcc	r5, #12
 802bb06:	2d00      	cmp	r5, #0
 802bb08:	4607      	mov	r7, r0
 802bb0a:	db01      	blt.n	802bb10 <_malloc_r+0x1c>
 802bb0c:	42a9      	cmp	r1, r5
 802bb0e:	d905      	bls.n	802bb1c <_malloc_r+0x28>
 802bb10:	230c      	movs	r3, #12
 802bb12:	603b      	str	r3, [r7, #0]
 802bb14:	2600      	movs	r6, #0
 802bb16:	4630      	mov	r0, r6
 802bb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb1c:	4e2e      	ldr	r6, [pc, #184]	; (802bbd8 <_malloc_r+0xe4>)
 802bb1e:	f000 ffc3 	bl	802caa8 <__malloc_lock>
 802bb22:	6833      	ldr	r3, [r6, #0]
 802bb24:	461c      	mov	r4, r3
 802bb26:	bb34      	cbnz	r4, 802bb76 <_malloc_r+0x82>
 802bb28:	4629      	mov	r1, r5
 802bb2a:	4638      	mov	r0, r7
 802bb2c:	f7ff ffc2 	bl	802bab4 <sbrk_aligned>
 802bb30:	1c43      	adds	r3, r0, #1
 802bb32:	4604      	mov	r4, r0
 802bb34:	d14d      	bne.n	802bbd2 <_malloc_r+0xde>
 802bb36:	6834      	ldr	r4, [r6, #0]
 802bb38:	4626      	mov	r6, r4
 802bb3a:	2e00      	cmp	r6, #0
 802bb3c:	d140      	bne.n	802bbc0 <_malloc_r+0xcc>
 802bb3e:	6823      	ldr	r3, [r4, #0]
 802bb40:	4631      	mov	r1, r6
 802bb42:	4638      	mov	r0, r7
 802bb44:	eb04 0803 	add.w	r8, r4, r3
 802bb48:	f000 fb36 	bl	802c1b8 <_sbrk_r>
 802bb4c:	4580      	cmp	r8, r0
 802bb4e:	d13a      	bne.n	802bbc6 <_malloc_r+0xd2>
 802bb50:	6821      	ldr	r1, [r4, #0]
 802bb52:	3503      	adds	r5, #3
 802bb54:	1a6d      	subs	r5, r5, r1
 802bb56:	f025 0503 	bic.w	r5, r5, #3
 802bb5a:	3508      	adds	r5, #8
 802bb5c:	2d0c      	cmp	r5, #12
 802bb5e:	bf38      	it	cc
 802bb60:	250c      	movcc	r5, #12
 802bb62:	4629      	mov	r1, r5
 802bb64:	4638      	mov	r0, r7
 802bb66:	f7ff ffa5 	bl	802bab4 <sbrk_aligned>
 802bb6a:	3001      	adds	r0, #1
 802bb6c:	d02b      	beq.n	802bbc6 <_malloc_r+0xd2>
 802bb6e:	6823      	ldr	r3, [r4, #0]
 802bb70:	442b      	add	r3, r5
 802bb72:	6023      	str	r3, [r4, #0]
 802bb74:	e00e      	b.n	802bb94 <_malloc_r+0xa0>
 802bb76:	6822      	ldr	r2, [r4, #0]
 802bb78:	1b52      	subs	r2, r2, r5
 802bb7a:	d41e      	bmi.n	802bbba <_malloc_r+0xc6>
 802bb7c:	2a0b      	cmp	r2, #11
 802bb7e:	d916      	bls.n	802bbae <_malloc_r+0xba>
 802bb80:	1961      	adds	r1, r4, r5
 802bb82:	42a3      	cmp	r3, r4
 802bb84:	6025      	str	r5, [r4, #0]
 802bb86:	bf18      	it	ne
 802bb88:	6059      	strne	r1, [r3, #4]
 802bb8a:	6863      	ldr	r3, [r4, #4]
 802bb8c:	bf08      	it	eq
 802bb8e:	6031      	streq	r1, [r6, #0]
 802bb90:	5162      	str	r2, [r4, r5]
 802bb92:	604b      	str	r3, [r1, #4]
 802bb94:	4638      	mov	r0, r7
 802bb96:	f104 060b 	add.w	r6, r4, #11
 802bb9a:	f000 ff8b 	bl	802cab4 <__malloc_unlock>
 802bb9e:	f026 0607 	bic.w	r6, r6, #7
 802bba2:	1d23      	adds	r3, r4, #4
 802bba4:	1af2      	subs	r2, r6, r3
 802bba6:	d0b6      	beq.n	802bb16 <_malloc_r+0x22>
 802bba8:	1b9b      	subs	r3, r3, r6
 802bbaa:	50a3      	str	r3, [r4, r2]
 802bbac:	e7b3      	b.n	802bb16 <_malloc_r+0x22>
 802bbae:	6862      	ldr	r2, [r4, #4]
 802bbb0:	42a3      	cmp	r3, r4
 802bbb2:	bf0c      	ite	eq
 802bbb4:	6032      	streq	r2, [r6, #0]
 802bbb6:	605a      	strne	r2, [r3, #4]
 802bbb8:	e7ec      	b.n	802bb94 <_malloc_r+0xa0>
 802bbba:	4623      	mov	r3, r4
 802bbbc:	6864      	ldr	r4, [r4, #4]
 802bbbe:	e7b2      	b.n	802bb26 <_malloc_r+0x32>
 802bbc0:	4634      	mov	r4, r6
 802bbc2:	6876      	ldr	r6, [r6, #4]
 802bbc4:	e7b9      	b.n	802bb3a <_malloc_r+0x46>
 802bbc6:	230c      	movs	r3, #12
 802bbc8:	603b      	str	r3, [r7, #0]
 802bbca:	4638      	mov	r0, r7
 802bbcc:	f000 ff72 	bl	802cab4 <__malloc_unlock>
 802bbd0:	e7a1      	b.n	802bb16 <_malloc_r+0x22>
 802bbd2:	6025      	str	r5, [r4, #0]
 802bbd4:	e7de      	b.n	802bb94 <_malloc_r+0xa0>
 802bbd6:	bf00      	nop
 802bbd8:	2000b5c0 	.word	0x2000b5c0

0802bbdc <__sfputc_r>:
 802bbdc:	6893      	ldr	r3, [r2, #8]
 802bbde:	3b01      	subs	r3, #1
 802bbe0:	2b00      	cmp	r3, #0
 802bbe2:	b410      	push	{r4}
 802bbe4:	6093      	str	r3, [r2, #8]
 802bbe6:	da08      	bge.n	802bbfa <__sfputc_r+0x1e>
 802bbe8:	6994      	ldr	r4, [r2, #24]
 802bbea:	42a3      	cmp	r3, r4
 802bbec:	db01      	blt.n	802bbf2 <__sfputc_r+0x16>
 802bbee:	290a      	cmp	r1, #10
 802bbf0:	d103      	bne.n	802bbfa <__sfputc_r+0x1e>
 802bbf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bbf6:	f000 bbc5 	b.w	802c384 <__swbuf_r>
 802bbfa:	6813      	ldr	r3, [r2, #0]
 802bbfc:	1c58      	adds	r0, r3, #1
 802bbfe:	6010      	str	r0, [r2, #0]
 802bc00:	7019      	strb	r1, [r3, #0]
 802bc02:	4608      	mov	r0, r1
 802bc04:	f85d 4b04 	ldr.w	r4, [sp], #4
 802bc08:	4770      	bx	lr

0802bc0a <__sfputs_r>:
 802bc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bc0c:	4606      	mov	r6, r0
 802bc0e:	460f      	mov	r7, r1
 802bc10:	4614      	mov	r4, r2
 802bc12:	18d5      	adds	r5, r2, r3
 802bc14:	42ac      	cmp	r4, r5
 802bc16:	d101      	bne.n	802bc1c <__sfputs_r+0x12>
 802bc18:	2000      	movs	r0, #0
 802bc1a:	e007      	b.n	802bc2c <__sfputs_r+0x22>
 802bc1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bc20:	463a      	mov	r2, r7
 802bc22:	4630      	mov	r0, r6
 802bc24:	f7ff ffda 	bl	802bbdc <__sfputc_r>
 802bc28:	1c43      	adds	r3, r0, #1
 802bc2a:	d1f3      	bne.n	802bc14 <__sfputs_r+0xa>
 802bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802bc30 <_vfiprintf_r>:
 802bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc34:	460d      	mov	r5, r1
 802bc36:	b09d      	sub	sp, #116	; 0x74
 802bc38:	4614      	mov	r4, r2
 802bc3a:	4698      	mov	r8, r3
 802bc3c:	4606      	mov	r6, r0
 802bc3e:	b118      	cbz	r0, 802bc48 <_vfiprintf_r+0x18>
 802bc40:	6983      	ldr	r3, [r0, #24]
 802bc42:	b90b      	cbnz	r3, 802bc48 <_vfiprintf_r+0x18>
 802bc44:	f000 fdfc 	bl	802c840 <__sinit>
 802bc48:	4b89      	ldr	r3, [pc, #548]	; (802be70 <_vfiprintf_r+0x240>)
 802bc4a:	429d      	cmp	r5, r3
 802bc4c:	d11b      	bne.n	802bc86 <_vfiprintf_r+0x56>
 802bc4e:	6875      	ldr	r5, [r6, #4]
 802bc50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bc52:	07d9      	lsls	r1, r3, #31
 802bc54:	d405      	bmi.n	802bc62 <_vfiprintf_r+0x32>
 802bc56:	89ab      	ldrh	r3, [r5, #12]
 802bc58:	059a      	lsls	r2, r3, #22
 802bc5a:	d402      	bmi.n	802bc62 <_vfiprintf_r+0x32>
 802bc5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bc5e:	f000 fe8d 	bl	802c97c <__retarget_lock_acquire_recursive>
 802bc62:	89ab      	ldrh	r3, [r5, #12]
 802bc64:	071b      	lsls	r3, r3, #28
 802bc66:	d501      	bpl.n	802bc6c <_vfiprintf_r+0x3c>
 802bc68:	692b      	ldr	r3, [r5, #16]
 802bc6a:	b9eb      	cbnz	r3, 802bca8 <_vfiprintf_r+0x78>
 802bc6c:	4629      	mov	r1, r5
 802bc6e:	4630      	mov	r0, r6
 802bc70:	f000 fbec 	bl	802c44c <__swsetup_r>
 802bc74:	b1c0      	cbz	r0, 802bca8 <_vfiprintf_r+0x78>
 802bc76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802bc78:	07dc      	lsls	r4, r3, #31
 802bc7a:	d50e      	bpl.n	802bc9a <_vfiprintf_r+0x6a>
 802bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 802bc80:	b01d      	add	sp, #116	; 0x74
 802bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc86:	4b7b      	ldr	r3, [pc, #492]	; (802be74 <_vfiprintf_r+0x244>)
 802bc88:	429d      	cmp	r5, r3
 802bc8a:	d101      	bne.n	802bc90 <_vfiprintf_r+0x60>
 802bc8c:	68b5      	ldr	r5, [r6, #8]
 802bc8e:	e7df      	b.n	802bc50 <_vfiprintf_r+0x20>
 802bc90:	4b79      	ldr	r3, [pc, #484]	; (802be78 <_vfiprintf_r+0x248>)
 802bc92:	429d      	cmp	r5, r3
 802bc94:	bf08      	it	eq
 802bc96:	68f5      	ldreq	r5, [r6, #12]
 802bc98:	e7da      	b.n	802bc50 <_vfiprintf_r+0x20>
 802bc9a:	89ab      	ldrh	r3, [r5, #12]
 802bc9c:	0598      	lsls	r0, r3, #22
 802bc9e:	d4ed      	bmi.n	802bc7c <_vfiprintf_r+0x4c>
 802bca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802bca2:	f000 fe6d 	bl	802c980 <__retarget_lock_release_recursive>
 802bca6:	e7e9      	b.n	802bc7c <_vfiprintf_r+0x4c>
 802bca8:	2300      	movs	r3, #0
 802bcaa:	9309      	str	r3, [sp, #36]	; 0x24
 802bcac:	2320      	movs	r3, #32
 802bcae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802bcb2:	f8cd 800c 	str.w	r8, [sp, #12]
 802bcb6:	2330      	movs	r3, #48	; 0x30
 802bcb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802be7c <_vfiprintf_r+0x24c>
 802bcbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802bcc0:	f04f 0901 	mov.w	r9, #1
 802bcc4:	4623      	mov	r3, r4
 802bcc6:	469a      	mov	sl, r3
 802bcc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bccc:	b10a      	cbz	r2, 802bcd2 <_vfiprintf_r+0xa2>
 802bcce:	2a25      	cmp	r2, #37	; 0x25
 802bcd0:	d1f9      	bne.n	802bcc6 <_vfiprintf_r+0x96>
 802bcd2:	ebba 0b04 	subs.w	fp, sl, r4
 802bcd6:	d00b      	beq.n	802bcf0 <_vfiprintf_r+0xc0>
 802bcd8:	465b      	mov	r3, fp
 802bcda:	4622      	mov	r2, r4
 802bcdc:	4629      	mov	r1, r5
 802bcde:	4630      	mov	r0, r6
 802bce0:	f7ff ff93 	bl	802bc0a <__sfputs_r>
 802bce4:	3001      	adds	r0, #1
 802bce6:	f000 80aa 	beq.w	802be3e <_vfiprintf_r+0x20e>
 802bcea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802bcec:	445a      	add	r2, fp
 802bcee:	9209      	str	r2, [sp, #36]	; 0x24
 802bcf0:	f89a 3000 	ldrb.w	r3, [sl]
 802bcf4:	2b00      	cmp	r3, #0
 802bcf6:	f000 80a2 	beq.w	802be3e <_vfiprintf_r+0x20e>
 802bcfa:	2300      	movs	r3, #0
 802bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 802bd00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bd04:	f10a 0a01 	add.w	sl, sl, #1
 802bd08:	9304      	str	r3, [sp, #16]
 802bd0a:	9307      	str	r3, [sp, #28]
 802bd0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802bd10:	931a      	str	r3, [sp, #104]	; 0x68
 802bd12:	4654      	mov	r4, sl
 802bd14:	2205      	movs	r2, #5
 802bd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bd1a:	4858      	ldr	r0, [pc, #352]	; (802be7c <_vfiprintf_r+0x24c>)
 802bd1c:	f7d4 fa70 	bl	8000200 <memchr>
 802bd20:	9a04      	ldr	r2, [sp, #16]
 802bd22:	b9d8      	cbnz	r0, 802bd5c <_vfiprintf_r+0x12c>
 802bd24:	06d1      	lsls	r1, r2, #27
 802bd26:	bf44      	itt	mi
 802bd28:	2320      	movmi	r3, #32
 802bd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bd2e:	0713      	lsls	r3, r2, #28
 802bd30:	bf44      	itt	mi
 802bd32:	232b      	movmi	r3, #43	; 0x2b
 802bd34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802bd38:	f89a 3000 	ldrb.w	r3, [sl]
 802bd3c:	2b2a      	cmp	r3, #42	; 0x2a
 802bd3e:	d015      	beq.n	802bd6c <_vfiprintf_r+0x13c>
 802bd40:	9a07      	ldr	r2, [sp, #28]
 802bd42:	4654      	mov	r4, sl
 802bd44:	2000      	movs	r0, #0
 802bd46:	f04f 0c0a 	mov.w	ip, #10
 802bd4a:	4621      	mov	r1, r4
 802bd4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bd50:	3b30      	subs	r3, #48	; 0x30
 802bd52:	2b09      	cmp	r3, #9
 802bd54:	d94e      	bls.n	802bdf4 <_vfiprintf_r+0x1c4>
 802bd56:	b1b0      	cbz	r0, 802bd86 <_vfiprintf_r+0x156>
 802bd58:	9207      	str	r2, [sp, #28]
 802bd5a:	e014      	b.n	802bd86 <_vfiprintf_r+0x156>
 802bd5c:	eba0 0308 	sub.w	r3, r0, r8
 802bd60:	fa09 f303 	lsl.w	r3, r9, r3
 802bd64:	4313      	orrs	r3, r2
 802bd66:	9304      	str	r3, [sp, #16]
 802bd68:	46a2      	mov	sl, r4
 802bd6a:	e7d2      	b.n	802bd12 <_vfiprintf_r+0xe2>
 802bd6c:	9b03      	ldr	r3, [sp, #12]
 802bd6e:	1d19      	adds	r1, r3, #4
 802bd70:	681b      	ldr	r3, [r3, #0]
 802bd72:	9103      	str	r1, [sp, #12]
 802bd74:	2b00      	cmp	r3, #0
 802bd76:	bfbb      	ittet	lt
 802bd78:	425b      	neglt	r3, r3
 802bd7a:	f042 0202 	orrlt.w	r2, r2, #2
 802bd7e:	9307      	strge	r3, [sp, #28]
 802bd80:	9307      	strlt	r3, [sp, #28]
 802bd82:	bfb8      	it	lt
 802bd84:	9204      	strlt	r2, [sp, #16]
 802bd86:	7823      	ldrb	r3, [r4, #0]
 802bd88:	2b2e      	cmp	r3, #46	; 0x2e
 802bd8a:	d10c      	bne.n	802bda6 <_vfiprintf_r+0x176>
 802bd8c:	7863      	ldrb	r3, [r4, #1]
 802bd8e:	2b2a      	cmp	r3, #42	; 0x2a
 802bd90:	d135      	bne.n	802bdfe <_vfiprintf_r+0x1ce>
 802bd92:	9b03      	ldr	r3, [sp, #12]
 802bd94:	1d1a      	adds	r2, r3, #4
 802bd96:	681b      	ldr	r3, [r3, #0]
 802bd98:	9203      	str	r2, [sp, #12]
 802bd9a:	2b00      	cmp	r3, #0
 802bd9c:	bfb8      	it	lt
 802bd9e:	f04f 33ff 	movlt.w	r3, #4294967295
 802bda2:	3402      	adds	r4, #2
 802bda4:	9305      	str	r3, [sp, #20]
 802bda6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802be8c <_vfiprintf_r+0x25c>
 802bdaa:	7821      	ldrb	r1, [r4, #0]
 802bdac:	2203      	movs	r2, #3
 802bdae:	4650      	mov	r0, sl
 802bdb0:	f7d4 fa26 	bl	8000200 <memchr>
 802bdb4:	b140      	cbz	r0, 802bdc8 <_vfiprintf_r+0x198>
 802bdb6:	2340      	movs	r3, #64	; 0x40
 802bdb8:	eba0 000a 	sub.w	r0, r0, sl
 802bdbc:	fa03 f000 	lsl.w	r0, r3, r0
 802bdc0:	9b04      	ldr	r3, [sp, #16]
 802bdc2:	4303      	orrs	r3, r0
 802bdc4:	3401      	adds	r4, #1
 802bdc6:	9304      	str	r3, [sp, #16]
 802bdc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bdcc:	482c      	ldr	r0, [pc, #176]	; (802be80 <_vfiprintf_r+0x250>)
 802bdce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802bdd2:	2206      	movs	r2, #6
 802bdd4:	f7d4 fa14 	bl	8000200 <memchr>
 802bdd8:	2800      	cmp	r0, #0
 802bdda:	d03f      	beq.n	802be5c <_vfiprintf_r+0x22c>
 802bddc:	4b29      	ldr	r3, [pc, #164]	; (802be84 <_vfiprintf_r+0x254>)
 802bdde:	bb1b      	cbnz	r3, 802be28 <_vfiprintf_r+0x1f8>
 802bde0:	9b03      	ldr	r3, [sp, #12]
 802bde2:	3307      	adds	r3, #7
 802bde4:	f023 0307 	bic.w	r3, r3, #7
 802bde8:	3308      	adds	r3, #8
 802bdea:	9303      	str	r3, [sp, #12]
 802bdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802bdee:	443b      	add	r3, r7
 802bdf0:	9309      	str	r3, [sp, #36]	; 0x24
 802bdf2:	e767      	b.n	802bcc4 <_vfiprintf_r+0x94>
 802bdf4:	fb0c 3202 	mla	r2, ip, r2, r3
 802bdf8:	460c      	mov	r4, r1
 802bdfa:	2001      	movs	r0, #1
 802bdfc:	e7a5      	b.n	802bd4a <_vfiprintf_r+0x11a>
 802bdfe:	2300      	movs	r3, #0
 802be00:	3401      	adds	r4, #1
 802be02:	9305      	str	r3, [sp, #20]
 802be04:	4619      	mov	r1, r3
 802be06:	f04f 0c0a 	mov.w	ip, #10
 802be0a:	4620      	mov	r0, r4
 802be0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802be10:	3a30      	subs	r2, #48	; 0x30
 802be12:	2a09      	cmp	r2, #9
 802be14:	d903      	bls.n	802be1e <_vfiprintf_r+0x1ee>
 802be16:	2b00      	cmp	r3, #0
 802be18:	d0c5      	beq.n	802bda6 <_vfiprintf_r+0x176>
 802be1a:	9105      	str	r1, [sp, #20]
 802be1c:	e7c3      	b.n	802bda6 <_vfiprintf_r+0x176>
 802be1e:	fb0c 2101 	mla	r1, ip, r1, r2
 802be22:	4604      	mov	r4, r0
 802be24:	2301      	movs	r3, #1
 802be26:	e7f0      	b.n	802be0a <_vfiprintf_r+0x1da>
 802be28:	ab03      	add	r3, sp, #12
 802be2a:	9300      	str	r3, [sp, #0]
 802be2c:	462a      	mov	r2, r5
 802be2e:	4b16      	ldr	r3, [pc, #88]	; (802be88 <_vfiprintf_r+0x258>)
 802be30:	a904      	add	r1, sp, #16
 802be32:	4630      	mov	r0, r6
 802be34:	f3af 8000 	nop.w
 802be38:	4607      	mov	r7, r0
 802be3a:	1c78      	adds	r0, r7, #1
 802be3c:	d1d6      	bne.n	802bdec <_vfiprintf_r+0x1bc>
 802be3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802be40:	07d9      	lsls	r1, r3, #31
 802be42:	d405      	bmi.n	802be50 <_vfiprintf_r+0x220>
 802be44:	89ab      	ldrh	r3, [r5, #12]
 802be46:	059a      	lsls	r2, r3, #22
 802be48:	d402      	bmi.n	802be50 <_vfiprintf_r+0x220>
 802be4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802be4c:	f000 fd98 	bl	802c980 <__retarget_lock_release_recursive>
 802be50:	89ab      	ldrh	r3, [r5, #12]
 802be52:	065b      	lsls	r3, r3, #25
 802be54:	f53f af12 	bmi.w	802bc7c <_vfiprintf_r+0x4c>
 802be58:	9809      	ldr	r0, [sp, #36]	; 0x24
 802be5a:	e711      	b.n	802bc80 <_vfiprintf_r+0x50>
 802be5c:	ab03      	add	r3, sp, #12
 802be5e:	9300      	str	r3, [sp, #0]
 802be60:	462a      	mov	r2, r5
 802be62:	4b09      	ldr	r3, [pc, #36]	; (802be88 <_vfiprintf_r+0x258>)
 802be64:	a904      	add	r1, sp, #16
 802be66:	4630      	mov	r0, r6
 802be68:	f000 f880 	bl	802bf6c <_printf_i>
 802be6c:	e7e4      	b.n	802be38 <_vfiprintf_r+0x208>
 802be6e:	bf00      	nop
 802be70:	0802f7a4 	.word	0x0802f7a4
 802be74:	0802f7c4 	.word	0x0802f7c4
 802be78:	0802f784 	.word	0x0802f784
 802be7c:	0802f74c 	.word	0x0802f74c
 802be80:	0802f756 	.word	0x0802f756
 802be84:	00000000 	.word	0x00000000
 802be88:	0802bc0b 	.word	0x0802bc0b
 802be8c:	0802f752 	.word	0x0802f752

0802be90 <_printf_common>:
 802be90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802be94:	4616      	mov	r6, r2
 802be96:	4699      	mov	r9, r3
 802be98:	688a      	ldr	r2, [r1, #8]
 802be9a:	690b      	ldr	r3, [r1, #16]
 802be9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802bea0:	4293      	cmp	r3, r2
 802bea2:	bfb8      	it	lt
 802bea4:	4613      	movlt	r3, r2
 802bea6:	6033      	str	r3, [r6, #0]
 802bea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802beac:	4607      	mov	r7, r0
 802beae:	460c      	mov	r4, r1
 802beb0:	b10a      	cbz	r2, 802beb6 <_printf_common+0x26>
 802beb2:	3301      	adds	r3, #1
 802beb4:	6033      	str	r3, [r6, #0]
 802beb6:	6823      	ldr	r3, [r4, #0]
 802beb8:	0699      	lsls	r1, r3, #26
 802beba:	bf42      	ittt	mi
 802bebc:	6833      	ldrmi	r3, [r6, #0]
 802bebe:	3302      	addmi	r3, #2
 802bec0:	6033      	strmi	r3, [r6, #0]
 802bec2:	6825      	ldr	r5, [r4, #0]
 802bec4:	f015 0506 	ands.w	r5, r5, #6
 802bec8:	d106      	bne.n	802bed8 <_printf_common+0x48>
 802beca:	f104 0a19 	add.w	sl, r4, #25
 802bece:	68e3      	ldr	r3, [r4, #12]
 802bed0:	6832      	ldr	r2, [r6, #0]
 802bed2:	1a9b      	subs	r3, r3, r2
 802bed4:	42ab      	cmp	r3, r5
 802bed6:	dc26      	bgt.n	802bf26 <_printf_common+0x96>
 802bed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802bedc:	1e13      	subs	r3, r2, #0
 802bede:	6822      	ldr	r2, [r4, #0]
 802bee0:	bf18      	it	ne
 802bee2:	2301      	movne	r3, #1
 802bee4:	0692      	lsls	r2, r2, #26
 802bee6:	d42b      	bmi.n	802bf40 <_printf_common+0xb0>
 802bee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802beec:	4649      	mov	r1, r9
 802beee:	4638      	mov	r0, r7
 802bef0:	47c0      	blx	r8
 802bef2:	3001      	adds	r0, #1
 802bef4:	d01e      	beq.n	802bf34 <_printf_common+0xa4>
 802bef6:	6823      	ldr	r3, [r4, #0]
 802bef8:	68e5      	ldr	r5, [r4, #12]
 802befa:	6832      	ldr	r2, [r6, #0]
 802befc:	f003 0306 	and.w	r3, r3, #6
 802bf00:	2b04      	cmp	r3, #4
 802bf02:	bf08      	it	eq
 802bf04:	1aad      	subeq	r5, r5, r2
 802bf06:	68a3      	ldr	r3, [r4, #8]
 802bf08:	6922      	ldr	r2, [r4, #16]
 802bf0a:	bf0c      	ite	eq
 802bf0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802bf10:	2500      	movne	r5, #0
 802bf12:	4293      	cmp	r3, r2
 802bf14:	bfc4      	itt	gt
 802bf16:	1a9b      	subgt	r3, r3, r2
 802bf18:	18ed      	addgt	r5, r5, r3
 802bf1a:	2600      	movs	r6, #0
 802bf1c:	341a      	adds	r4, #26
 802bf1e:	42b5      	cmp	r5, r6
 802bf20:	d11a      	bne.n	802bf58 <_printf_common+0xc8>
 802bf22:	2000      	movs	r0, #0
 802bf24:	e008      	b.n	802bf38 <_printf_common+0xa8>
 802bf26:	2301      	movs	r3, #1
 802bf28:	4652      	mov	r2, sl
 802bf2a:	4649      	mov	r1, r9
 802bf2c:	4638      	mov	r0, r7
 802bf2e:	47c0      	blx	r8
 802bf30:	3001      	adds	r0, #1
 802bf32:	d103      	bne.n	802bf3c <_printf_common+0xac>
 802bf34:	f04f 30ff 	mov.w	r0, #4294967295
 802bf38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bf3c:	3501      	adds	r5, #1
 802bf3e:	e7c6      	b.n	802bece <_printf_common+0x3e>
 802bf40:	18e1      	adds	r1, r4, r3
 802bf42:	1c5a      	adds	r2, r3, #1
 802bf44:	2030      	movs	r0, #48	; 0x30
 802bf46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802bf4a:	4422      	add	r2, r4
 802bf4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802bf50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802bf54:	3302      	adds	r3, #2
 802bf56:	e7c7      	b.n	802bee8 <_printf_common+0x58>
 802bf58:	2301      	movs	r3, #1
 802bf5a:	4622      	mov	r2, r4
 802bf5c:	4649      	mov	r1, r9
 802bf5e:	4638      	mov	r0, r7
 802bf60:	47c0      	blx	r8
 802bf62:	3001      	adds	r0, #1
 802bf64:	d0e6      	beq.n	802bf34 <_printf_common+0xa4>
 802bf66:	3601      	adds	r6, #1
 802bf68:	e7d9      	b.n	802bf1e <_printf_common+0x8e>
	...

0802bf6c <_printf_i>:
 802bf6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802bf70:	7e0f      	ldrb	r7, [r1, #24]
 802bf72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802bf74:	2f78      	cmp	r7, #120	; 0x78
 802bf76:	4691      	mov	r9, r2
 802bf78:	4680      	mov	r8, r0
 802bf7a:	460c      	mov	r4, r1
 802bf7c:	469a      	mov	sl, r3
 802bf7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802bf82:	d807      	bhi.n	802bf94 <_printf_i+0x28>
 802bf84:	2f62      	cmp	r7, #98	; 0x62
 802bf86:	d80a      	bhi.n	802bf9e <_printf_i+0x32>
 802bf88:	2f00      	cmp	r7, #0
 802bf8a:	f000 80d8 	beq.w	802c13e <_printf_i+0x1d2>
 802bf8e:	2f58      	cmp	r7, #88	; 0x58
 802bf90:	f000 80a3 	beq.w	802c0da <_printf_i+0x16e>
 802bf94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bf98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802bf9c:	e03a      	b.n	802c014 <_printf_i+0xa8>
 802bf9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802bfa2:	2b15      	cmp	r3, #21
 802bfa4:	d8f6      	bhi.n	802bf94 <_printf_i+0x28>
 802bfa6:	a101      	add	r1, pc, #4	; (adr r1, 802bfac <_printf_i+0x40>)
 802bfa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802bfac:	0802c005 	.word	0x0802c005
 802bfb0:	0802c019 	.word	0x0802c019
 802bfb4:	0802bf95 	.word	0x0802bf95
 802bfb8:	0802bf95 	.word	0x0802bf95
 802bfbc:	0802bf95 	.word	0x0802bf95
 802bfc0:	0802bf95 	.word	0x0802bf95
 802bfc4:	0802c019 	.word	0x0802c019
 802bfc8:	0802bf95 	.word	0x0802bf95
 802bfcc:	0802bf95 	.word	0x0802bf95
 802bfd0:	0802bf95 	.word	0x0802bf95
 802bfd4:	0802bf95 	.word	0x0802bf95
 802bfd8:	0802c125 	.word	0x0802c125
 802bfdc:	0802c049 	.word	0x0802c049
 802bfe0:	0802c107 	.word	0x0802c107
 802bfe4:	0802bf95 	.word	0x0802bf95
 802bfe8:	0802bf95 	.word	0x0802bf95
 802bfec:	0802c147 	.word	0x0802c147
 802bff0:	0802bf95 	.word	0x0802bf95
 802bff4:	0802c049 	.word	0x0802c049
 802bff8:	0802bf95 	.word	0x0802bf95
 802bffc:	0802bf95 	.word	0x0802bf95
 802c000:	0802c10f 	.word	0x0802c10f
 802c004:	682b      	ldr	r3, [r5, #0]
 802c006:	1d1a      	adds	r2, r3, #4
 802c008:	681b      	ldr	r3, [r3, #0]
 802c00a:	602a      	str	r2, [r5, #0]
 802c00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c014:	2301      	movs	r3, #1
 802c016:	e0a3      	b.n	802c160 <_printf_i+0x1f4>
 802c018:	6820      	ldr	r0, [r4, #0]
 802c01a:	6829      	ldr	r1, [r5, #0]
 802c01c:	0606      	lsls	r6, r0, #24
 802c01e:	f101 0304 	add.w	r3, r1, #4
 802c022:	d50a      	bpl.n	802c03a <_printf_i+0xce>
 802c024:	680e      	ldr	r6, [r1, #0]
 802c026:	602b      	str	r3, [r5, #0]
 802c028:	2e00      	cmp	r6, #0
 802c02a:	da03      	bge.n	802c034 <_printf_i+0xc8>
 802c02c:	232d      	movs	r3, #45	; 0x2d
 802c02e:	4276      	negs	r6, r6
 802c030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c034:	485e      	ldr	r0, [pc, #376]	; (802c1b0 <_printf_i+0x244>)
 802c036:	230a      	movs	r3, #10
 802c038:	e019      	b.n	802c06e <_printf_i+0x102>
 802c03a:	680e      	ldr	r6, [r1, #0]
 802c03c:	602b      	str	r3, [r5, #0]
 802c03e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802c042:	bf18      	it	ne
 802c044:	b236      	sxthne	r6, r6
 802c046:	e7ef      	b.n	802c028 <_printf_i+0xbc>
 802c048:	682b      	ldr	r3, [r5, #0]
 802c04a:	6820      	ldr	r0, [r4, #0]
 802c04c:	1d19      	adds	r1, r3, #4
 802c04e:	6029      	str	r1, [r5, #0]
 802c050:	0601      	lsls	r1, r0, #24
 802c052:	d501      	bpl.n	802c058 <_printf_i+0xec>
 802c054:	681e      	ldr	r6, [r3, #0]
 802c056:	e002      	b.n	802c05e <_printf_i+0xf2>
 802c058:	0646      	lsls	r6, r0, #25
 802c05a:	d5fb      	bpl.n	802c054 <_printf_i+0xe8>
 802c05c:	881e      	ldrh	r6, [r3, #0]
 802c05e:	4854      	ldr	r0, [pc, #336]	; (802c1b0 <_printf_i+0x244>)
 802c060:	2f6f      	cmp	r7, #111	; 0x6f
 802c062:	bf0c      	ite	eq
 802c064:	2308      	moveq	r3, #8
 802c066:	230a      	movne	r3, #10
 802c068:	2100      	movs	r1, #0
 802c06a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c06e:	6865      	ldr	r5, [r4, #4]
 802c070:	60a5      	str	r5, [r4, #8]
 802c072:	2d00      	cmp	r5, #0
 802c074:	bfa2      	ittt	ge
 802c076:	6821      	ldrge	r1, [r4, #0]
 802c078:	f021 0104 	bicge.w	r1, r1, #4
 802c07c:	6021      	strge	r1, [r4, #0]
 802c07e:	b90e      	cbnz	r6, 802c084 <_printf_i+0x118>
 802c080:	2d00      	cmp	r5, #0
 802c082:	d04d      	beq.n	802c120 <_printf_i+0x1b4>
 802c084:	4615      	mov	r5, r2
 802c086:	fbb6 f1f3 	udiv	r1, r6, r3
 802c08a:	fb03 6711 	mls	r7, r3, r1, r6
 802c08e:	5dc7      	ldrb	r7, [r0, r7]
 802c090:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c094:	4637      	mov	r7, r6
 802c096:	42bb      	cmp	r3, r7
 802c098:	460e      	mov	r6, r1
 802c09a:	d9f4      	bls.n	802c086 <_printf_i+0x11a>
 802c09c:	2b08      	cmp	r3, #8
 802c09e:	d10b      	bne.n	802c0b8 <_printf_i+0x14c>
 802c0a0:	6823      	ldr	r3, [r4, #0]
 802c0a2:	07de      	lsls	r6, r3, #31
 802c0a4:	d508      	bpl.n	802c0b8 <_printf_i+0x14c>
 802c0a6:	6923      	ldr	r3, [r4, #16]
 802c0a8:	6861      	ldr	r1, [r4, #4]
 802c0aa:	4299      	cmp	r1, r3
 802c0ac:	bfde      	ittt	le
 802c0ae:	2330      	movle	r3, #48	; 0x30
 802c0b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c0b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 802c0b8:	1b52      	subs	r2, r2, r5
 802c0ba:	6122      	str	r2, [r4, #16]
 802c0bc:	f8cd a000 	str.w	sl, [sp]
 802c0c0:	464b      	mov	r3, r9
 802c0c2:	aa03      	add	r2, sp, #12
 802c0c4:	4621      	mov	r1, r4
 802c0c6:	4640      	mov	r0, r8
 802c0c8:	f7ff fee2 	bl	802be90 <_printf_common>
 802c0cc:	3001      	adds	r0, #1
 802c0ce:	d14c      	bne.n	802c16a <_printf_i+0x1fe>
 802c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 802c0d4:	b004      	add	sp, #16
 802c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c0da:	4835      	ldr	r0, [pc, #212]	; (802c1b0 <_printf_i+0x244>)
 802c0dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802c0e0:	6829      	ldr	r1, [r5, #0]
 802c0e2:	6823      	ldr	r3, [r4, #0]
 802c0e4:	f851 6b04 	ldr.w	r6, [r1], #4
 802c0e8:	6029      	str	r1, [r5, #0]
 802c0ea:	061d      	lsls	r5, r3, #24
 802c0ec:	d514      	bpl.n	802c118 <_printf_i+0x1ac>
 802c0ee:	07df      	lsls	r7, r3, #31
 802c0f0:	bf44      	itt	mi
 802c0f2:	f043 0320 	orrmi.w	r3, r3, #32
 802c0f6:	6023      	strmi	r3, [r4, #0]
 802c0f8:	b91e      	cbnz	r6, 802c102 <_printf_i+0x196>
 802c0fa:	6823      	ldr	r3, [r4, #0]
 802c0fc:	f023 0320 	bic.w	r3, r3, #32
 802c100:	6023      	str	r3, [r4, #0]
 802c102:	2310      	movs	r3, #16
 802c104:	e7b0      	b.n	802c068 <_printf_i+0xfc>
 802c106:	6823      	ldr	r3, [r4, #0]
 802c108:	f043 0320 	orr.w	r3, r3, #32
 802c10c:	6023      	str	r3, [r4, #0]
 802c10e:	2378      	movs	r3, #120	; 0x78
 802c110:	4828      	ldr	r0, [pc, #160]	; (802c1b4 <_printf_i+0x248>)
 802c112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802c116:	e7e3      	b.n	802c0e0 <_printf_i+0x174>
 802c118:	0659      	lsls	r1, r3, #25
 802c11a:	bf48      	it	mi
 802c11c:	b2b6      	uxthmi	r6, r6
 802c11e:	e7e6      	b.n	802c0ee <_printf_i+0x182>
 802c120:	4615      	mov	r5, r2
 802c122:	e7bb      	b.n	802c09c <_printf_i+0x130>
 802c124:	682b      	ldr	r3, [r5, #0]
 802c126:	6826      	ldr	r6, [r4, #0]
 802c128:	6961      	ldr	r1, [r4, #20]
 802c12a:	1d18      	adds	r0, r3, #4
 802c12c:	6028      	str	r0, [r5, #0]
 802c12e:	0635      	lsls	r5, r6, #24
 802c130:	681b      	ldr	r3, [r3, #0]
 802c132:	d501      	bpl.n	802c138 <_printf_i+0x1cc>
 802c134:	6019      	str	r1, [r3, #0]
 802c136:	e002      	b.n	802c13e <_printf_i+0x1d2>
 802c138:	0670      	lsls	r0, r6, #25
 802c13a:	d5fb      	bpl.n	802c134 <_printf_i+0x1c8>
 802c13c:	8019      	strh	r1, [r3, #0]
 802c13e:	2300      	movs	r3, #0
 802c140:	6123      	str	r3, [r4, #16]
 802c142:	4615      	mov	r5, r2
 802c144:	e7ba      	b.n	802c0bc <_printf_i+0x150>
 802c146:	682b      	ldr	r3, [r5, #0]
 802c148:	1d1a      	adds	r2, r3, #4
 802c14a:	602a      	str	r2, [r5, #0]
 802c14c:	681d      	ldr	r5, [r3, #0]
 802c14e:	6862      	ldr	r2, [r4, #4]
 802c150:	2100      	movs	r1, #0
 802c152:	4628      	mov	r0, r5
 802c154:	f7d4 f854 	bl	8000200 <memchr>
 802c158:	b108      	cbz	r0, 802c15e <_printf_i+0x1f2>
 802c15a:	1b40      	subs	r0, r0, r5
 802c15c:	6060      	str	r0, [r4, #4]
 802c15e:	6863      	ldr	r3, [r4, #4]
 802c160:	6123      	str	r3, [r4, #16]
 802c162:	2300      	movs	r3, #0
 802c164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c168:	e7a8      	b.n	802c0bc <_printf_i+0x150>
 802c16a:	6923      	ldr	r3, [r4, #16]
 802c16c:	462a      	mov	r2, r5
 802c16e:	4649      	mov	r1, r9
 802c170:	4640      	mov	r0, r8
 802c172:	47d0      	blx	sl
 802c174:	3001      	adds	r0, #1
 802c176:	d0ab      	beq.n	802c0d0 <_printf_i+0x164>
 802c178:	6823      	ldr	r3, [r4, #0]
 802c17a:	079b      	lsls	r3, r3, #30
 802c17c:	d413      	bmi.n	802c1a6 <_printf_i+0x23a>
 802c17e:	68e0      	ldr	r0, [r4, #12]
 802c180:	9b03      	ldr	r3, [sp, #12]
 802c182:	4298      	cmp	r0, r3
 802c184:	bfb8      	it	lt
 802c186:	4618      	movlt	r0, r3
 802c188:	e7a4      	b.n	802c0d4 <_printf_i+0x168>
 802c18a:	2301      	movs	r3, #1
 802c18c:	4632      	mov	r2, r6
 802c18e:	4649      	mov	r1, r9
 802c190:	4640      	mov	r0, r8
 802c192:	47d0      	blx	sl
 802c194:	3001      	adds	r0, #1
 802c196:	d09b      	beq.n	802c0d0 <_printf_i+0x164>
 802c198:	3501      	adds	r5, #1
 802c19a:	68e3      	ldr	r3, [r4, #12]
 802c19c:	9903      	ldr	r1, [sp, #12]
 802c19e:	1a5b      	subs	r3, r3, r1
 802c1a0:	42ab      	cmp	r3, r5
 802c1a2:	dcf2      	bgt.n	802c18a <_printf_i+0x21e>
 802c1a4:	e7eb      	b.n	802c17e <_printf_i+0x212>
 802c1a6:	2500      	movs	r5, #0
 802c1a8:	f104 0619 	add.w	r6, r4, #25
 802c1ac:	e7f5      	b.n	802c19a <_printf_i+0x22e>
 802c1ae:	bf00      	nop
 802c1b0:	0802f75d 	.word	0x0802f75d
 802c1b4:	0802f76e 	.word	0x0802f76e

0802c1b8 <_sbrk_r>:
 802c1b8:	b538      	push	{r3, r4, r5, lr}
 802c1ba:	4d06      	ldr	r5, [pc, #24]	; (802c1d4 <_sbrk_r+0x1c>)
 802c1bc:	2300      	movs	r3, #0
 802c1be:	4604      	mov	r4, r0
 802c1c0:	4608      	mov	r0, r1
 802c1c2:	602b      	str	r3, [r5, #0]
 802c1c4:	f7d7 fc82 	bl	8003acc <_sbrk>
 802c1c8:	1c43      	adds	r3, r0, #1
 802c1ca:	d102      	bne.n	802c1d2 <_sbrk_r+0x1a>
 802c1cc:	682b      	ldr	r3, [r5, #0]
 802c1ce:	b103      	cbz	r3, 802c1d2 <_sbrk_r+0x1a>
 802c1d0:	6023      	str	r3, [r4, #0]
 802c1d2:	bd38      	pop	{r3, r4, r5, pc}
 802c1d4:	2000b764 	.word	0x2000b764

0802c1d8 <_raise_r>:
 802c1d8:	291f      	cmp	r1, #31
 802c1da:	b538      	push	{r3, r4, r5, lr}
 802c1dc:	4604      	mov	r4, r0
 802c1de:	460d      	mov	r5, r1
 802c1e0:	d904      	bls.n	802c1ec <_raise_r+0x14>
 802c1e2:	2316      	movs	r3, #22
 802c1e4:	6003      	str	r3, [r0, #0]
 802c1e6:	f04f 30ff 	mov.w	r0, #4294967295
 802c1ea:	bd38      	pop	{r3, r4, r5, pc}
 802c1ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802c1ee:	b112      	cbz	r2, 802c1f6 <_raise_r+0x1e>
 802c1f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802c1f4:	b94b      	cbnz	r3, 802c20a <_raise_r+0x32>
 802c1f6:	4620      	mov	r0, r4
 802c1f8:	f000 f830 	bl	802c25c <_getpid_r>
 802c1fc:	462a      	mov	r2, r5
 802c1fe:	4601      	mov	r1, r0
 802c200:	4620      	mov	r0, r4
 802c202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c206:	f000 b817 	b.w	802c238 <_kill_r>
 802c20a:	2b01      	cmp	r3, #1
 802c20c:	d00a      	beq.n	802c224 <_raise_r+0x4c>
 802c20e:	1c59      	adds	r1, r3, #1
 802c210:	d103      	bne.n	802c21a <_raise_r+0x42>
 802c212:	2316      	movs	r3, #22
 802c214:	6003      	str	r3, [r0, #0]
 802c216:	2001      	movs	r0, #1
 802c218:	e7e7      	b.n	802c1ea <_raise_r+0x12>
 802c21a:	2400      	movs	r4, #0
 802c21c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802c220:	4628      	mov	r0, r5
 802c222:	4798      	blx	r3
 802c224:	2000      	movs	r0, #0
 802c226:	e7e0      	b.n	802c1ea <_raise_r+0x12>

0802c228 <raise>:
 802c228:	4b02      	ldr	r3, [pc, #8]	; (802c234 <raise+0xc>)
 802c22a:	4601      	mov	r1, r0
 802c22c:	6818      	ldr	r0, [r3, #0]
 802c22e:	f7ff bfd3 	b.w	802c1d8 <_raise_r>
 802c232:	bf00      	nop
 802c234:	20000388 	.word	0x20000388

0802c238 <_kill_r>:
 802c238:	b538      	push	{r3, r4, r5, lr}
 802c23a:	4d07      	ldr	r5, [pc, #28]	; (802c258 <_kill_r+0x20>)
 802c23c:	2300      	movs	r3, #0
 802c23e:	4604      	mov	r4, r0
 802c240:	4608      	mov	r0, r1
 802c242:	4611      	mov	r1, r2
 802c244:	602b      	str	r3, [r5, #0]
 802c246:	f7d7 fbb9 	bl	80039bc <_kill>
 802c24a:	1c43      	adds	r3, r0, #1
 802c24c:	d102      	bne.n	802c254 <_kill_r+0x1c>
 802c24e:	682b      	ldr	r3, [r5, #0]
 802c250:	b103      	cbz	r3, 802c254 <_kill_r+0x1c>
 802c252:	6023      	str	r3, [r4, #0]
 802c254:	bd38      	pop	{r3, r4, r5, pc}
 802c256:	bf00      	nop
 802c258:	2000b764 	.word	0x2000b764

0802c25c <_getpid_r>:
 802c25c:	f7d7 bba6 	b.w	80039ac <_getpid>

0802c260 <siprintf>:
 802c260:	b40e      	push	{r1, r2, r3}
 802c262:	b500      	push	{lr}
 802c264:	b09c      	sub	sp, #112	; 0x70
 802c266:	ab1d      	add	r3, sp, #116	; 0x74
 802c268:	9002      	str	r0, [sp, #8]
 802c26a:	9006      	str	r0, [sp, #24]
 802c26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802c270:	4809      	ldr	r0, [pc, #36]	; (802c298 <siprintf+0x38>)
 802c272:	9107      	str	r1, [sp, #28]
 802c274:	9104      	str	r1, [sp, #16]
 802c276:	4909      	ldr	r1, [pc, #36]	; (802c29c <siprintf+0x3c>)
 802c278:	f853 2b04 	ldr.w	r2, [r3], #4
 802c27c:	9105      	str	r1, [sp, #20]
 802c27e:	6800      	ldr	r0, [r0, #0]
 802c280:	9301      	str	r3, [sp, #4]
 802c282:	a902      	add	r1, sp, #8
 802c284:	f000 fca6 	bl	802cbd4 <_svfiprintf_r>
 802c288:	9b02      	ldr	r3, [sp, #8]
 802c28a:	2200      	movs	r2, #0
 802c28c:	701a      	strb	r2, [r3, #0]
 802c28e:	b01c      	add	sp, #112	; 0x70
 802c290:	f85d eb04 	ldr.w	lr, [sp], #4
 802c294:	b003      	add	sp, #12
 802c296:	4770      	bx	lr
 802c298:	20000388 	.word	0x20000388
 802c29c:	ffff0208 	.word	0xffff0208

0802c2a0 <siscanf>:
 802c2a0:	b40e      	push	{r1, r2, r3}
 802c2a2:	b510      	push	{r4, lr}
 802c2a4:	b09f      	sub	sp, #124	; 0x7c
 802c2a6:	ac21      	add	r4, sp, #132	; 0x84
 802c2a8:	f44f 7101 	mov.w	r1, #516	; 0x204
 802c2ac:	f854 2b04 	ldr.w	r2, [r4], #4
 802c2b0:	9201      	str	r2, [sp, #4]
 802c2b2:	f8ad 101c 	strh.w	r1, [sp, #28]
 802c2b6:	9004      	str	r0, [sp, #16]
 802c2b8:	9008      	str	r0, [sp, #32]
 802c2ba:	f7d3 ff99 	bl	80001f0 <strlen>
 802c2be:	4b0c      	ldr	r3, [pc, #48]	; (802c2f0 <siscanf+0x50>)
 802c2c0:	9005      	str	r0, [sp, #20]
 802c2c2:	9009      	str	r0, [sp, #36]	; 0x24
 802c2c4:	930d      	str	r3, [sp, #52]	; 0x34
 802c2c6:	480b      	ldr	r0, [pc, #44]	; (802c2f4 <siscanf+0x54>)
 802c2c8:	9a01      	ldr	r2, [sp, #4]
 802c2ca:	6800      	ldr	r0, [r0, #0]
 802c2cc:	9403      	str	r4, [sp, #12]
 802c2ce:	2300      	movs	r3, #0
 802c2d0:	9311      	str	r3, [sp, #68]	; 0x44
 802c2d2:	9316      	str	r3, [sp, #88]	; 0x58
 802c2d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c2d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 802c2dc:	a904      	add	r1, sp, #16
 802c2de:	4623      	mov	r3, r4
 802c2e0:	f000 fdd2 	bl	802ce88 <__ssvfiscanf_r>
 802c2e4:	b01f      	add	sp, #124	; 0x7c
 802c2e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c2ea:	b003      	add	sp, #12
 802c2ec:	4770      	bx	lr
 802c2ee:	bf00      	nop
 802c2f0:	0802c31b 	.word	0x0802c31b
 802c2f4:	20000388 	.word	0x20000388

0802c2f8 <__sread>:
 802c2f8:	b510      	push	{r4, lr}
 802c2fa:	460c      	mov	r4, r1
 802c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c300:	f001 f88c 	bl	802d41c <_read_r>
 802c304:	2800      	cmp	r0, #0
 802c306:	bfab      	itete	ge
 802c308:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802c30a:	89a3      	ldrhlt	r3, [r4, #12]
 802c30c:	181b      	addge	r3, r3, r0
 802c30e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802c312:	bfac      	ite	ge
 802c314:	6563      	strge	r3, [r4, #84]	; 0x54
 802c316:	81a3      	strhlt	r3, [r4, #12]
 802c318:	bd10      	pop	{r4, pc}

0802c31a <__seofread>:
 802c31a:	2000      	movs	r0, #0
 802c31c:	4770      	bx	lr

0802c31e <__swrite>:
 802c31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c322:	461f      	mov	r7, r3
 802c324:	898b      	ldrh	r3, [r1, #12]
 802c326:	05db      	lsls	r3, r3, #23
 802c328:	4605      	mov	r5, r0
 802c32a:	460c      	mov	r4, r1
 802c32c:	4616      	mov	r6, r2
 802c32e:	d505      	bpl.n	802c33c <__swrite+0x1e>
 802c330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c334:	2302      	movs	r3, #2
 802c336:	2200      	movs	r2, #0
 802c338:	f000 fb24 	bl	802c984 <_lseek_r>
 802c33c:	89a3      	ldrh	r3, [r4, #12]
 802c33e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802c346:	81a3      	strh	r3, [r4, #12]
 802c348:	4632      	mov	r2, r6
 802c34a:	463b      	mov	r3, r7
 802c34c:	4628      	mov	r0, r5
 802c34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c352:	f000 b869 	b.w	802c428 <_write_r>

0802c356 <__sseek>:
 802c356:	b510      	push	{r4, lr}
 802c358:	460c      	mov	r4, r1
 802c35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c35e:	f000 fb11 	bl	802c984 <_lseek_r>
 802c362:	1c43      	adds	r3, r0, #1
 802c364:	89a3      	ldrh	r3, [r4, #12]
 802c366:	bf15      	itete	ne
 802c368:	6560      	strne	r0, [r4, #84]	; 0x54
 802c36a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802c36e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802c372:	81a3      	strheq	r3, [r4, #12]
 802c374:	bf18      	it	ne
 802c376:	81a3      	strhne	r3, [r4, #12]
 802c378:	bd10      	pop	{r4, pc}

0802c37a <__sclose>:
 802c37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c37e:	f000 b935 	b.w	802c5ec <_close_r>
	...

0802c384 <__swbuf_r>:
 802c384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c386:	460e      	mov	r6, r1
 802c388:	4614      	mov	r4, r2
 802c38a:	4605      	mov	r5, r0
 802c38c:	b118      	cbz	r0, 802c396 <__swbuf_r+0x12>
 802c38e:	6983      	ldr	r3, [r0, #24]
 802c390:	b90b      	cbnz	r3, 802c396 <__swbuf_r+0x12>
 802c392:	f000 fa55 	bl	802c840 <__sinit>
 802c396:	4b21      	ldr	r3, [pc, #132]	; (802c41c <__swbuf_r+0x98>)
 802c398:	429c      	cmp	r4, r3
 802c39a:	d12b      	bne.n	802c3f4 <__swbuf_r+0x70>
 802c39c:	686c      	ldr	r4, [r5, #4]
 802c39e:	69a3      	ldr	r3, [r4, #24]
 802c3a0:	60a3      	str	r3, [r4, #8]
 802c3a2:	89a3      	ldrh	r3, [r4, #12]
 802c3a4:	071a      	lsls	r2, r3, #28
 802c3a6:	d52f      	bpl.n	802c408 <__swbuf_r+0x84>
 802c3a8:	6923      	ldr	r3, [r4, #16]
 802c3aa:	b36b      	cbz	r3, 802c408 <__swbuf_r+0x84>
 802c3ac:	6923      	ldr	r3, [r4, #16]
 802c3ae:	6820      	ldr	r0, [r4, #0]
 802c3b0:	1ac0      	subs	r0, r0, r3
 802c3b2:	6963      	ldr	r3, [r4, #20]
 802c3b4:	b2f6      	uxtb	r6, r6
 802c3b6:	4283      	cmp	r3, r0
 802c3b8:	4637      	mov	r7, r6
 802c3ba:	dc04      	bgt.n	802c3c6 <__swbuf_r+0x42>
 802c3bc:	4621      	mov	r1, r4
 802c3be:	4628      	mov	r0, r5
 802c3c0:	f000 f9aa 	bl	802c718 <_fflush_r>
 802c3c4:	bb30      	cbnz	r0, 802c414 <__swbuf_r+0x90>
 802c3c6:	68a3      	ldr	r3, [r4, #8]
 802c3c8:	3b01      	subs	r3, #1
 802c3ca:	60a3      	str	r3, [r4, #8]
 802c3cc:	6823      	ldr	r3, [r4, #0]
 802c3ce:	1c5a      	adds	r2, r3, #1
 802c3d0:	6022      	str	r2, [r4, #0]
 802c3d2:	701e      	strb	r6, [r3, #0]
 802c3d4:	6963      	ldr	r3, [r4, #20]
 802c3d6:	3001      	adds	r0, #1
 802c3d8:	4283      	cmp	r3, r0
 802c3da:	d004      	beq.n	802c3e6 <__swbuf_r+0x62>
 802c3dc:	89a3      	ldrh	r3, [r4, #12]
 802c3de:	07db      	lsls	r3, r3, #31
 802c3e0:	d506      	bpl.n	802c3f0 <__swbuf_r+0x6c>
 802c3e2:	2e0a      	cmp	r6, #10
 802c3e4:	d104      	bne.n	802c3f0 <__swbuf_r+0x6c>
 802c3e6:	4621      	mov	r1, r4
 802c3e8:	4628      	mov	r0, r5
 802c3ea:	f000 f995 	bl	802c718 <_fflush_r>
 802c3ee:	b988      	cbnz	r0, 802c414 <__swbuf_r+0x90>
 802c3f0:	4638      	mov	r0, r7
 802c3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c3f4:	4b0a      	ldr	r3, [pc, #40]	; (802c420 <__swbuf_r+0x9c>)
 802c3f6:	429c      	cmp	r4, r3
 802c3f8:	d101      	bne.n	802c3fe <__swbuf_r+0x7a>
 802c3fa:	68ac      	ldr	r4, [r5, #8]
 802c3fc:	e7cf      	b.n	802c39e <__swbuf_r+0x1a>
 802c3fe:	4b09      	ldr	r3, [pc, #36]	; (802c424 <__swbuf_r+0xa0>)
 802c400:	429c      	cmp	r4, r3
 802c402:	bf08      	it	eq
 802c404:	68ec      	ldreq	r4, [r5, #12]
 802c406:	e7ca      	b.n	802c39e <__swbuf_r+0x1a>
 802c408:	4621      	mov	r1, r4
 802c40a:	4628      	mov	r0, r5
 802c40c:	f000 f81e 	bl	802c44c <__swsetup_r>
 802c410:	2800      	cmp	r0, #0
 802c412:	d0cb      	beq.n	802c3ac <__swbuf_r+0x28>
 802c414:	f04f 37ff 	mov.w	r7, #4294967295
 802c418:	e7ea      	b.n	802c3f0 <__swbuf_r+0x6c>
 802c41a:	bf00      	nop
 802c41c:	0802f7a4 	.word	0x0802f7a4
 802c420:	0802f7c4 	.word	0x0802f7c4
 802c424:	0802f784 	.word	0x0802f784

0802c428 <_write_r>:
 802c428:	b538      	push	{r3, r4, r5, lr}
 802c42a:	4d07      	ldr	r5, [pc, #28]	; (802c448 <_write_r+0x20>)
 802c42c:	4604      	mov	r4, r0
 802c42e:	4608      	mov	r0, r1
 802c430:	4611      	mov	r1, r2
 802c432:	2200      	movs	r2, #0
 802c434:	602a      	str	r2, [r5, #0]
 802c436:	461a      	mov	r2, r3
 802c438:	f7d7 faf7 	bl	8003a2a <_write>
 802c43c:	1c43      	adds	r3, r0, #1
 802c43e:	d102      	bne.n	802c446 <_write_r+0x1e>
 802c440:	682b      	ldr	r3, [r5, #0]
 802c442:	b103      	cbz	r3, 802c446 <_write_r+0x1e>
 802c444:	6023      	str	r3, [r4, #0]
 802c446:	bd38      	pop	{r3, r4, r5, pc}
 802c448:	2000b764 	.word	0x2000b764

0802c44c <__swsetup_r>:
 802c44c:	4b32      	ldr	r3, [pc, #200]	; (802c518 <__swsetup_r+0xcc>)
 802c44e:	b570      	push	{r4, r5, r6, lr}
 802c450:	681d      	ldr	r5, [r3, #0]
 802c452:	4606      	mov	r6, r0
 802c454:	460c      	mov	r4, r1
 802c456:	b125      	cbz	r5, 802c462 <__swsetup_r+0x16>
 802c458:	69ab      	ldr	r3, [r5, #24]
 802c45a:	b913      	cbnz	r3, 802c462 <__swsetup_r+0x16>
 802c45c:	4628      	mov	r0, r5
 802c45e:	f000 f9ef 	bl	802c840 <__sinit>
 802c462:	4b2e      	ldr	r3, [pc, #184]	; (802c51c <__swsetup_r+0xd0>)
 802c464:	429c      	cmp	r4, r3
 802c466:	d10f      	bne.n	802c488 <__swsetup_r+0x3c>
 802c468:	686c      	ldr	r4, [r5, #4]
 802c46a:	89a3      	ldrh	r3, [r4, #12]
 802c46c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c470:	0719      	lsls	r1, r3, #28
 802c472:	d42c      	bmi.n	802c4ce <__swsetup_r+0x82>
 802c474:	06dd      	lsls	r5, r3, #27
 802c476:	d411      	bmi.n	802c49c <__swsetup_r+0x50>
 802c478:	2309      	movs	r3, #9
 802c47a:	6033      	str	r3, [r6, #0]
 802c47c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802c480:	81a3      	strh	r3, [r4, #12]
 802c482:	f04f 30ff 	mov.w	r0, #4294967295
 802c486:	e03e      	b.n	802c506 <__swsetup_r+0xba>
 802c488:	4b25      	ldr	r3, [pc, #148]	; (802c520 <__swsetup_r+0xd4>)
 802c48a:	429c      	cmp	r4, r3
 802c48c:	d101      	bne.n	802c492 <__swsetup_r+0x46>
 802c48e:	68ac      	ldr	r4, [r5, #8]
 802c490:	e7eb      	b.n	802c46a <__swsetup_r+0x1e>
 802c492:	4b24      	ldr	r3, [pc, #144]	; (802c524 <__swsetup_r+0xd8>)
 802c494:	429c      	cmp	r4, r3
 802c496:	bf08      	it	eq
 802c498:	68ec      	ldreq	r4, [r5, #12]
 802c49a:	e7e6      	b.n	802c46a <__swsetup_r+0x1e>
 802c49c:	0758      	lsls	r0, r3, #29
 802c49e:	d512      	bpl.n	802c4c6 <__swsetup_r+0x7a>
 802c4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c4a2:	b141      	cbz	r1, 802c4b6 <__swsetup_r+0x6a>
 802c4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c4a8:	4299      	cmp	r1, r3
 802c4aa:	d002      	beq.n	802c4b2 <__swsetup_r+0x66>
 802c4ac:	4630      	mov	r0, r6
 802c4ae:	f7ff fab5 	bl	802ba1c <_free_r>
 802c4b2:	2300      	movs	r3, #0
 802c4b4:	6363      	str	r3, [r4, #52]	; 0x34
 802c4b6:	89a3      	ldrh	r3, [r4, #12]
 802c4b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802c4bc:	81a3      	strh	r3, [r4, #12]
 802c4be:	2300      	movs	r3, #0
 802c4c0:	6063      	str	r3, [r4, #4]
 802c4c2:	6923      	ldr	r3, [r4, #16]
 802c4c4:	6023      	str	r3, [r4, #0]
 802c4c6:	89a3      	ldrh	r3, [r4, #12]
 802c4c8:	f043 0308 	orr.w	r3, r3, #8
 802c4cc:	81a3      	strh	r3, [r4, #12]
 802c4ce:	6923      	ldr	r3, [r4, #16]
 802c4d0:	b94b      	cbnz	r3, 802c4e6 <__swsetup_r+0x9a>
 802c4d2:	89a3      	ldrh	r3, [r4, #12]
 802c4d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802c4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c4dc:	d003      	beq.n	802c4e6 <__swsetup_r+0x9a>
 802c4de:	4621      	mov	r1, r4
 802c4e0:	4630      	mov	r0, r6
 802c4e2:	f000 fa87 	bl	802c9f4 <__smakebuf_r>
 802c4e6:	89a0      	ldrh	r0, [r4, #12]
 802c4e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c4ec:	f010 0301 	ands.w	r3, r0, #1
 802c4f0:	d00a      	beq.n	802c508 <__swsetup_r+0xbc>
 802c4f2:	2300      	movs	r3, #0
 802c4f4:	60a3      	str	r3, [r4, #8]
 802c4f6:	6963      	ldr	r3, [r4, #20]
 802c4f8:	425b      	negs	r3, r3
 802c4fa:	61a3      	str	r3, [r4, #24]
 802c4fc:	6923      	ldr	r3, [r4, #16]
 802c4fe:	b943      	cbnz	r3, 802c512 <__swsetup_r+0xc6>
 802c500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802c504:	d1ba      	bne.n	802c47c <__swsetup_r+0x30>
 802c506:	bd70      	pop	{r4, r5, r6, pc}
 802c508:	0781      	lsls	r1, r0, #30
 802c50a:	bf58      	it	pl
 802c50c:	6963      	ldrpl	r3, [r4, #20]
 802c50e:	60a3      	str	r3, [r4, #8]
 802c510:	e7f4      	b.n	802c4fc <__swsetup_r+0xb0>
 802c512:	2000      	movs	r0, #0
 802c514:	e7f7      	b.n	802c506 <__swsetup_r+0xba>
 802c516:	bf00      	nop
 802c518:	20000388 	.word	0x20000388
 802c51c:	0802f7a4 	.word	0x0802f7a4
 802c520:	0802f7c4 	.word	0x0802f7c4
 802c524:	0802f784 	.word	0x0802f784

0802c528 <__register_exitproc>:
 802c528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c52c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802c5e8 <__register_exitproc+0xc0>
 802c530:	4606      	mov	r6, r0
 802c532:	f8d8 0000 	ldr.w	r0, [r8]
 802c536:	461f      	mov	r7, r3
 802c538:	460d      	mov	r5, r1
 802c53a:	4691      	mov	r9, r2
 802c53c:	f000 fa1e 	bl	802c97c <__retarget_lock_acquire_recursive>
 802c540:	4b25      	ldr	r3, [pc, #148]	; (802c5d8 <__register_exitproc+0xb0>)
 802c542:	681c      	ldr	r4, [r3, #0]
 802c544:	b934      	cbnz	r4, 802c554 <__register_exitproc+0x2c>
 802c546:	4c25      	ldr	r4, [pc, #148]	; (802c5dc <__register_exitproc+0xb4>)
 802c548:	601c      	str	r4, [r3, #0]
 802c54a:	4b25      	ldr	r3, [pc, #148]	; (802c5e0 <__register_exitproc+0xb8>)
 802c54c:	b113      	cbz	r3, 802c554 <__register_exitproc+0x2c>
 802c54e:	681b      	ldr	r3, [r3, #0]
 802c550:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802c554:	6863      	ldr	r3, [r4, #4]
 802c556:	2b1f      	cmp	r3, #31
 802c558:	dd07      	ble.n	802c56a <__register_exitproc+0x42>
 802c55a:	f8d8 0000 	ldr.w	r0, [r8]
 802c55e:	f000 fa0f 	bl	802c980 <__retarget_lock_release_recursive>
 802c562:	f04f 30ff 	mov.w	r0, #4294967295
 802c566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c56a:	b34e      	cbz	r6, 802c5c0 <__register_exitproc+0x98>
 802c56c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802c570:	b988      	cbnz	r0, 802c596 <__register_exitproc+0x6e>
 802c572:	4b1c      	ldr	r3, [pc, #112]	; (802c5e4 <__register_exitproc+0xbc>)
 802c574:	b923      	cbnz	r3, 802c580 <__register_exitproc+0x58>
 802c576:	f8d8 0000 	ldr.w	r0, [r8]
 802c57a:	f000 fa00 	bl	802c97e <__retarget_lock_release>
 802c57e:	e7f0      	b.n	802c562 <__register_exitproc+0x3a>
 802c580:	f44f 7084 	mov.w	r0, #264	; 0x108
 802c584:	f7ff fa24 	bl	802b9d0 <malloc>
 802c588:	2800      	cmp	r0, #0
 802c58a:	d0f4      	beq.n	802c576 <__register_exitproc+0x4e>
 802c58c:	2300      	movs	r3, #0
 802c58e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802c592:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802c596:	6863      	ldr	r3, [r4, #4]
 802c598:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802c59c:	2201      	movs	r2, #1
 802c59e:	409a      	lsls	r2, r3
 802c5a0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802c5a4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802c5a8:	4313      	orrs	r3, r2
 802c5aa:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802c5ae:	2e02      	cmp	r6, #2
 802c5b0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802c5b4:	bf02      	ittt	eq
 802c5b6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802c5ba:	4313      	orreq	r3, r2
 802c5bc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802c5c0:	6863      	ldr	r3, [r4, #4]
 802c5c2:	f8d8 0000 	ldr.w	r0, [r8]
 802c5c6:	1c5a      	adds	r2, r3, #1
 802c5c8:	3302      	adds	r3, #2
 802c5ca:	6062      	str	r2, [r4, #4]
 802c5cc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802c5d0:	f000 f9d6 	bl	802c980 <__retarget_lock_release_recursive>
 802c5d4:	2000      	movs	r0, #0
 802c5d6:	e7c6      	b.n	802c566 <__register_exitproc+0x3e>
 802c5d8:	2000b75c 	.word	0x2000b75c
 802c5dc:	2000b6d0 	.word	0x2000b6d0
 802c5e0:	0802f780 	.word	0x0802f780
 802c5e4:	0802b9d1 	.word	0x0802b9d1
 802c5e8:	200003ec 	.word	0x200003ec

0802c5ec <_close_r>:
 802c5ec:	b538      	push	{r3, r4, r5, lr}
 802c5ee:	4d06      	ldr	r5, [pc, #24]	; (802c608 <_close_r+0x1c>)
 802c5f0:	2300      	movs	r3, #0
 802c5f2:	4604      	mov	r4, r0
 802c5f4:	4608      	mov	r0, r1
 802c5f6:	602b      	str	r3, [r5, #0]
 802c5f8:	f7d7 fa33 	bl	8003a62 <_close>
 802c5fc:	1c43      	adds	r3, r0, #1
 802c5fe:	d102      	bne.n	802c606 <_close_r+0x1a>
 802c600:	682b      	ldr	r3, [r5, #0]
 802c602:	b103      	cbz	r3, 802c606 <_close_r+0x1a>
 802c604:	6023      	str	r3, [r4, #0]
 802c606:	bd38      	pop	{r3, r4, r5, pc}
 802c608:	2000b764 	.word	0x2000b764

0802c60c <__sflush_r>:
 802c60c:	898a      	ldrh	r2, [r1, #12]
 802c60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c612:	4605      	mov	r5, r0
 802c614:	0710      	lsls	r0, r2, #28
 802c616:	460c      	mov	r4, r1
 802c618:	d458      	bmi.n	802c6cc <__sflush_r+0xc0>
 802c61a:	684b      	ldr	r3, [r1, #4]
 802c61c:	2b00      	cmp	r3, #0
 802c61e:	dc05      	bgt.n	802c62c <__sflush_r+0x20>
 802c620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802c622:	2b00      	cmp	r3, #0
 802c624:	dc02      	bgt.n	802c62c <__sflush_r+0x20>
 802c626:	2000      	movs	r0, #0
 802c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c62e:	2e00      	cmp	r6, #0
 802c630:	d0f9      	beq.n	802c626 <__sflush_r+0x1a>
 802c632:	2300      	movs	r3, #0
 802c634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802c638:	682f      	ldr	r7, [r5, #0]
 802c63a:	602b      	str	r3, [r5, #0]
 802c63c:	d032      	beq.n	802c6a4 <__sflush_r+0x98>
 802c63e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802c640:	89a3      	ldrh	r3, [r4, #12]
 802c642:	075a      	lsls	r2, r3, #29
 802c644:	d505      	bpl.n	802c652 <__sflush_r+0x46>
 802c646:	6863      	ldr	r3, [r4, #4]
 802c648:	1ac0      	subs	r0, r0, r3
 802c64a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c64c:	b10b      	cbz	r3, 802c652 <__sflush_r+0x46>
 802c64e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c650:	1ac0      	subs	r0, r0, r3
 802c652:	2300      	movs	r3, #0
 802c654:	4602      	mov	r2, r0
 802c656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c658:	6a21      	ldr	r1, [r4, #32]
 802c65a:	4628      	mov	r0, r5
 802c65c:	47b0      	blx	r6
 802c65e:	1c43      	adds	r3, r0, #1
 802c660:	89a3      	ldrh	r3, [r4, #12]
 802c662:	d106      	bne.n	802c672 <__sflush_r+0x66>
 802c664:	6829      	ldr	r1, [r5, #0]
 802c666:	291d      	cmp	r1, #29
 802c668:	d82c      	bhi.n	802c6c4 <__sflush_r+0xb8>
 802c66a:	4a2a      	ldr	r2, [pc, #168]	; (802c714 <__sflush_r+0x108>)
 802c66c:	40ca      	lsrs	r2, r1
 802c66e:	07d6      	lsls	r6, r2, #31
 802c670:	d528      	bpl.n	802c6c4 <__sflush_r+0xb8>
 802c672:	2200      	movs	r2, #0
 802c674:	6062      	str	r2, [r4, #4]
 802c676:	04d9      	lsls	r1, r3, #19
 802c678:	6922      	ldr	r2, [r4, #16]
 802c67a:	6022      	str	r2, [r4, #0]
 802c67c:	d504      	bpl.n	802c688 <__sflush_r+0x7c>
 802c67e:	1c42      	adds	r2, r0, #1
 802c680:	d101      	bne.n	802c686 <__sflush_r+0x7a>
 802c682:	682b      	ldr	r3, [r5, #0]
 802c684:	b903      	cbnz	r3, 802c688 <__sflush_r+0x7c>
 802c686:	6560      	str	r0, [r4, #84]	; 0x54
 802c688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802c68a:	602f      	str	r7, [r5, #0]
 802c68c:	2900      	cmp	r1, #0
 802c68e:	d0ca      	beq.n	802c626 <__sflush_r+0x1a>
 802c690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c694:	4299      	cmp	r1, r3
 802c696:	d002      	beq.n	802c69e <__sflush_r+0x92>
 802c698:	4628      	mov	r0, r5
 802c69a:	f7ff f9bf 	bl	802ba1c <_free_r>
 802c69e:	2000      	movs	r0, #0
 802c6a0:	6360      	str	r0, [r4, #52]	; 0x34
 802c6a2:	e7c1      	b.n	802c628 <__sflush_r+0x1c>
 802c6a4:	6a21      	ldr	r1, [r4, #32]
 802c6a6:	2301      	movs	r3, #1
 802c6a8:	4628      	mov	r0, r5
 802c6aa:	47b0      	blx	r6
 802c6ac:	1c41      	adds	r1, r0, #1
 802c6ae:	d1c7      	bne.n	802c640 <__sflush_r+0x34>
 802c6b0:	682b      	ldr	r3, [r5, #0]
 802c6b2:	2b00      	cmp	r3, #0
 802c6b4:	d0c4      	beq.n	802c640 <__sflush_r+0x34>
 802c6b6:	2b1d      	cmp	r3, #29
 802c6b8:	d001      	beq.n	802c6be <__sflush_r+0xb2>
 802c6ba:	2b16      	cmp	r3, #22
 802c6bc:	d101      	bne.n	802c6c2 <__sflush_r+0xb6>
 802c6be:	602f      	str	r7, [r5, #0]
 802c6c0:	e7b1      	b.n	802c626 <__sflush_r+0x1a>
 802c6c2:	89a3      	ldrh	r3, [r4, #12]
 802c6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c6c8:	81a3      	strh	r3, [r4, #12]
 802c6ca:	e7ad      	b.n	802c628 <__sflush_r+0x1c>
 802c6cc:	690f      	ldr	r7, [r1, #16]
 802c6ce:	2f00      	cmp	r7, #0
 802c6d0:	d0a9      	beq.n	802c626 <__sflush_r+0x1a>
 802c6d2:	0793      	lsls	r3, r2, #30
 802c6d4:	680e      	ldr	r6, [r1, #0]
 802c6d6:	bf08      	it	eq
 802c6d8:	694b      	ldreq	r3, [r1, #20]
 802c6da:	600f      	str	r7, [r1, #0]
 802c6dc:	bf18      	it	ne
 802c6de:	2300      	movne	r3, #0
 802c6e0:	eba6 0807 	sub.w	r8, r6, r7
 802c6e4:	608b      	str	r3, [r1, #8]
 802c6e6:	f1b8 0f00 	cmp.w	r8, #0
 802c6ea:	dd9c      	ble.n	802c626 <__sflush_r+0x1a>
 802c6ec:	6a21      	ldr	r1, [r4, #32]
 802c6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802c6f0:	4643      	mov	r3, r8
 802c6f2:	463a      	mov	r2, r7
 802c6f4:	4628      	mov	r0, r5
 802c6f6:	47b0      	blx	r6
 802c6f8:	2800      	cmp	r0, #0
 802c6fa:	dc06      	bgt.n	802c70a <__sflush_r+0xfe>
 802c6fc:	89a3      	ldrh	r3, [r4, #12]
 802c6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c702:	81a3      	strh	r3, [r4, #12]
 802c704:	f04f 30ff 	mov.w	r0, #4294967295
 802c708:	e78e      	b.n	802c628 <__sflush_r+0x1c>
 802c70a:	4407      	add	r7, r0
 802c70c:	eba8 0800 	sub.w	r8, r8, r0
 802c710:	e7e9      	b.n	802c6e6 <__sflush_r+0xda>
 802c712:	bf00      	nop
 802c714:	20400001 	.word	0x20400001

0802c718 <_fflush_r>:
 802c718:	b538      	push	{r3, r4, r5, lr}
 802c71a:	690b      	ldr	r3, [r1, #16]
 802c71c:	4605      	mov	r5, r0
 802c71e:	460c      	mov	r4, r1
 802c720:	b913      	cbnz	r3, 802c728 <_fflush_r+0x10>
 802c722:	2500      	movs	r5, #0
 802c724:	4628      	mov	r0, r5
 802c726:	bd38      	pop	{r3, r4, r5, pc}
 802c728:	b118      	cbz	r0, 802c732 <_fflush_r+0x1a>
 802c72a:	6983      	ldr	r3, [r0, #24]
 802c72c:	b90b      	cbnz	r3, 802c732 <_fflush_r+0x1a>
 802c72e:	f000 f887 	bl	802c840 <__sinit>
 802c732:	4b14      	ldr	r3, [pc, #80]	; (802c784 <_fflush_r+0x6c>)
 802c734:	429c      	cmp	r4, r3
 802c736:	d11b      	bne.n	802c770 <_fflush_r+0x58>
 802c738:	686c      	ldr	r4, [r5, #4]
 802c73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c73e:	2b00      	cmp	r3, #0
 802c740:	d0ef      	beq.n	802c722 <_fflush_r+0xa>
 802c742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802c744:	07d0      	lsls	r0, r2, #31
 802c746:	d404      	bmi.n	802c752 <_fflush_r+0x3a>
 802c748:	0599      	lsls	r1, r3, #22
 802c74a:	d402      	bmi.n	802c752 <_fflush_r+0x3a>
 802c74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c74e:	f000 f915 	bl	802c97c <__retarget_lock_acquire_recursive>
 802c752:	4628      	mov	r0, r5
 802c754:	4621      	mov	r1, r4
 802c756:	f7ff ff59 	bl	802c60c <__sflush_r>
 802c75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802c75c:	07da      	lsls	r2, r3, #31
 802c75e:	4605      	mov	r5, r0
 802c760:	d4e0      	bmi.n	802c724 <_fflush_r+0xc>
 802c762:	89a3      	ldrh	r3, [r4, #12]
 802c764:	059b      	lsls	r3, r3, #22
 802c766:	d4dd      	bmi.n	802c724 <_fflush_r+0xc>
 802c768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802c76a:	f000 f909 	bl	802c980 <__retarget_lock_release_recursive>
 802c76e:	e7d9      	b.n	802c724 <_fflush_r+0xc>
 802c770:	4b05      	ldr	r3, [pc, #20]	; (802c788 <_fflush_r+0x70>)
 802c772:	429c      	cmp	r4, r3
 802c774:	d101      	bne.n	802c77a <_fflush_r+0x62>
 802c776:	68ac      	ldr	r4, [r5, #8]
 802c778:	e7df      	b.n	802c73a <_fflush_r+0x22>
 802c77a:	4b04      	ldr	r3, [pc, #16]	; (802c78c <_fflush_r+0x74>)
 802c77c:	429c      	cmp	r4, r3
 802c77e:	bf08      	it	eq
 802c780:	68ec      	ldreq	r4, [r5, #12]
 802c782:	e7da      	b.n	802c73a <_fflush_r+0x22>
 802c784:	0802f7a4 	.word	0x0802f7a4
 802c788:	0802f7c4 	.word	0x0802f7c4
 802c78c:	0802f784 	.word	0x0802f784

0802c790 <std>:
 802c790:	2300      	movs	r3, #0
 802c792:	b510      	push	{r4, lr}
 802c794:	4604      	mov	r4, r0
 802c796:	e9c0 3300 	strd	r3, r3, [r0]
 802c79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c79e:	6083      	str	r3, [r0, #8]
 802c7a0:	8181      	strh	r1, [r0, #12]
 802c7a2:	6643      	str	r3, [r0, #100]	; 0x64
 802c7a4:	81c2      	strh	r2, [r0, #14]
 802c7a6:	6183      	str	r3, [r0, #24]
 802c7a8:	4619      	mov	r1, r3
 802c7aa:	2208      	movs	r2, #8
 802c7ac:	305c      	adds	r0, #92	; 0x5c
 802c7ae:	f7ff f92d 	bl	802ba0c <memset>
 802c7b2:	4b05      	ldr	r3, [pc, #20]	; (802c7c8 <std+0x38>)
 802c7b4:	6263      	str	r3, [r4, #36]	; 0x24
 802c7b6:	4b05      	ldr	r3, [pc, #20]	; (802c7cc <std+0x3c>)
 802c7b8:	62a3      	str	r3, [r4, #40]	; 0x28
 802c7ba:	4b05      	ldr	r3, [pc, #20]	; (802c7d0 <std+0x40>)
 802c7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c7be:	4b05      	ldr	r3, [pc, #20]	; (802c7d4 <std+0x44>)
 802c7c0:	6224      	str	r4, [r4, #32]
 802c7c2:	6323      	str	r3, [r4, #48]	; 0x30
 802c7c4:	bd10      	pop	{r4, pc}
 802c7c6:	bf00      	nop
 802c7c8:	0802c2f9 	.word	0x0802c2f9
 802c7cc:	0802c31f 	.word	0x0802c31f
 802c7d0:	0802c357 	.word	0x0802c357
 802c7d4:	0802c37b 	.word	0x0802c37b

0802c7d8 <_cleanup_r>:
 802c7d8:	4901      	ldr	r1, [pc, #4]	; (802c7e0 <_cleanup_r+0x8>)
 802c7da:	f000 b8af 	b.w	802c93c <_fwalk_reent>
 802c7de:	bf00      	nop
 802c7e0:	0802c719 	.word	0x0802c719

0802c7e4 <__sfmoreglue>:
 802c7e4:	b570      	push	{r4, r5, r6, lr}
 802c7e6:	2268      	movs	r2, #104	; 0x68
 802c7e8:	1e4d      	subs	r5, r1, #1
 802c7ea:	4355      	muls	r5, r2
 802c7ec:	460e      	mov	r6, r1
 802c7ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802c7f2:	f7ff f97f 	bl	802baf4 <_malloc_r>
 802c7f6:	4604      	mov	r4, r0
 802c7f8:	b140      	cbz	r0, 802c80c <__sfmoreglue+0x28>
 802c7fa:	2100      	movs	r1, #0
 802c7fc:	e9c0 1600 	strd	r1, r6, [r0]
 802c800:	300c      	adds	r0, #12
 802c802:	60a0      	str	r0, [r4, #8]
 802c804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802c808:	f7ff f900 	bl	802ba0c <memset>
 802c80c:	4620      	mov	r0, r4
 802c80e:	bd70      	pop	{r4, r5, r6, pc}

0802c810 <__sfp_lock_acquire>:
 802c810:	4801      	ldr	r0, [pc, #4]	; (802c818 <__sfp_lock_acquire+0x8>)
 802c812:	f000 b8b3 	b.w	802c97c <__retarget_lock_acquire_recursive>
 802c816:	bf00      	nop
 802c818:	2000b762 	.word	0x2000b762

0802c81c <__sfp_lock_release>:
 802c81c:	4801      	ldr	r0, [pc, #4]	; (802c824 <__sfp_lock_release+0x8>)
 802c81e:	f000 b8af 	b.w	802c980 <__retarget_lock_release_recursive>
 802c822:	bf00      	nop
 802c824:	2000b762 	.word	0x2000b762

0802c828 <__sinit_lock_acquire>:
 802c828:	4801      	ldr	r0, [pc, #4]	; (802c830 <__sinit_lock_acquire+0x8>)
 802c82a:	f000 b8a7 	b.w	802c97c <__retarget_lock_acquire_recursive>
 802c82e:	bf00      	nop
 802c830:	2000b763 	.word	0x2000b763

0802c834 <__sinit_lock_release>:
 802c834:	4801      	ldr	r0, [pc, #4]	; (802c83c <__sinit_lock_release+0x8>)
 802c836:	f000 b8a3 	b.w	802c980 <__retarget_lock_release_recursive>
 802c83a:	bf00      	nop
 802c83c:	2000b763 	.word	0x2000b763

0802c840 <__sinit>:
 802c840:	b510      	push	{r4, lr}
 802c842:	4604      	mov	r4, r0
 802c844:	f7ff fff0 	bl	802c828 <__sinit_lock_acquire>
 802c848:	69a3      	ldr	r3, [r4, #24]
 802c84a:	b11b      	cbz	r3, 802c854 <__sinit+0x14>
 802c84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c850:	f7ff bff0 	b.w	802c834 <__sinit_lock_release>
 802c854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802c858:	6523      	str	r3, [r4, #80]	; 0x50
 802c85a:	4b13      	ldr	r3, [pc, #76]	; (802c8a8 <__sinit+0x68>)
 802c85c:	4a13      	ldr	r2, [pc, #76]	; (802c8ac <__sinit+0x6c>)
 802c85e:	681b      	ldr	r3, [r3, #0]
 802c860:	62a2      	str	r2, [r4, #40]	; 0x28
 802c862:	42a3      	cmp	r3, r4
 802c864:	bf04      	itt	eq
 802c866:	2301      	moveq	r3, #1
 802c868:	61a3      	streq	r3, [r4, #24]
 802c86a:	4620      	mov	r0, r4
 802c86c:	f000 f820 	bl	802c8b0 <__sfp>
 802c870:	6060      	str	r0, [r4, #4]
 802c872:	4620      	mov	r0, r4
 802c874:	f000 f81c 	bl	802c8b0 <__sfp>
 802c878:	60a0      	str	r0, [r4, #8]
 802c87a:	4620      	mov	r0, r4
 802c87c:	f000 f818 	bl	802c8b0 <__sfp>
 802c880:	2200      	movs	r2, #0
 802c882:	60e0      	str	r0, [r4, #12]
 802c884:	2104      	movs	r1, #4
 802c886:	6860      	ldr	r0, [r4, #4]
 802c888:	f7ff ff82 	bl	802c790 <std>
 802c88c:	68a0      	ldr	r0, [r4, #8]
 802c88e:	2201      	movs	r2, #1
 802c890:	2109      	movs	r1, #9
 802c892:	f7ff ff7d 	bl	802c790 <std>
 802c896:	68e0      	ldr	r0, [r4, #12]
 802c898:	2202      	movs	r2, #2
 802c89a:	2112      	movs	r1, #18
 802c89c:	f7ff ff78 	bl	802c790 <std>
 802c8a0:	2301      	movs	r3, #1
 802c8a2:	61a3      	str	r3, [r4, #24]
 802c8a4:	e7d2      	b.n	802c84c <__sinit+0xc>
 802c8a6:	bf00      	nop
 802c8a8:	0802f748 	.word	0x0802f748
 802c8ac:	0802c7d9 	.word	0x0802c7d9

0802c8b0 <__sfp>:
 802c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c8b2:	4607      	mov	r7, r0
 802c8b4:	f7ff ffac 	bl	802c810 <__sfp_lock_acquire>
 802c8b8:	4b1e      	ldr	r3, [pc, #120]	; (802c934 <__sfp+0x84>)
 802c8ba:	681e      	ldr	r6, [r3, #0]
 802c8bc:	69b3      	ldr	r3, [r6, #24]
 802c8be:	b913      	cbnz	r3, 802c8c6 <__sfp+0x16>
 802c8c0:	4630      	mov	r0, r6
 802c8c2:	f7ff ffbd 	bl	802c840 <__sinit>
 802c8c6:	3648      	adds	r6, #72	; 0x48
 802c8c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c8cc:	3b01      	subs	r3, #1
 802c8ce:	d503      	bpl.n	802c8d8 <__sfp+0x28>
 802c8d0:	6833      	ldr	r3, [r6, #0]
 802c8d2:	b30b      	cbz	r3, 802c918 <__sfp+0x68>
 802c8d4:	6836      	ldr	r6, [r6, #0]
 802c8d6:	e7f7      	b.n	802c8c8 <__sfp+0x18>
 802c8d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c8dc:	b9d5      	cbnz	r5, 802c914 <__sfp+0x64>
 802c8de:	4b16      	ldr	r3, [pc, #88]	; (802c938 <__sfp+0x88>)
 802c8e0:	60e3      	str	r3, [r4, #12]
 802c8e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c8e6:	6665      	str	r5, [r4, #100]	; 0x64
 802c8e8:	f000 f847 	bl	802c97a <__retarget_lock_init_recursive>
 802c8ec:	f7ff ff96 	bl	802c81c <__sfp_lock_release>
 802c8f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c8f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c8f8:	6025      	str	r5, [r4, #0]
 802c8fa:	61a5      	str	r5, [r4, #24]
 802c8fc:	2208      	movs	r2, #8
 802c8fe:	4629      	mov	r1, r5
 802c900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c904:	f7ff f882 	bl	802ba0c <memset>
 802c908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c90c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c910:	4620      	mov	r0, r4
 802c912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c914:	3468      	adds	r4, #104	; 0x68
 802c916:	e7d9      	b.n	802c8cc <__sfp+0x1c>
 802c918:	2104      	movs	r1, #4
 802c91a:	4638      	mov	r0, r7
 802c91c:	f7ff ff62 	bl	802c7e4 <__sfmoreglue>
 802c920:	4604      	mov	r4, r0
 802c922:	6030      	str	r0, [r6, #0]
 802c924:	2800      	cmp	r0, #0
 802c926:	d1d5      	bne.n	802c8d4 <__sfp+0x24>
 802c928:	f7ff ff78 	bl	802c81c <__sfp_lock_release>
 802c92c:	230c      	movs	r3, #12
 802c92e:	603b      	str	r3, [r7, #0]
 802c930:	e7ee      	b.n	802c910 <__sfp+0x60>
 802c932:	bf00      	nop
 802c934:	0802f748 	.word	0x0802f748
 802c938:	ffff0001 	.word	0xffff0001

0802c93c <_fwalk_reent>:
 802c93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c940:	4606      	mov	r6, r0
 802c942:	4688      	mov	r8, r1
 802c944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c948:	2700      	movs	r7, #0
 802c94a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c94e:	f1b9 0901 	subs.w	r9, r9, #1
 802c952:	d505      	bpl.n	802c960 <_fwalk_reent+0x24>
 802c954:	6824      	ldr	r4, [r4, #0]
 802c956:	2c00      	cmp	r4, #0
 802c958:	d1f7      	bne.n	802c94a <_fwalk_reent+0xe>
 802c95a:	4638      	mov	r0, r7
 802c95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c960:	89ab      	ldrh	r3, [r5, #12]
 802c962:	2b01      	cmp	r3, #1
 802c964:	d907      	bls.n	802c976 <_fwalk_reent+0x3a>
 802c966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c96a:	3301      	adds	r3, #1
 802c96c:	d003      	beq.n	802c976 <_fwalk_reent+0x3a>
 802c96e:	4629      	mov	r1, r5
 802c970:	4630      	mov	r0, r6
 802c972:	47c0      	blx	r8
 802c974:	4307      	orrs	r7, r0
 802c976:	3568      	adds	r5, #104	; 0x68
 802c978:	e7e9      	b.n	802c94e <_fwalk_reent+0x12>

0802c97a <__retarget_lock_init_recursive>:
 802c97a:	4770      	bx	lr

0802c97c <__retarget_lock_acquire_recursive>:
 802c97c:	4770      	bx	lr

0802c97e <__retarget_lock_release>:
 802c97e:	4770      	bx	lr

0802c980 <__retarget_lock_release_recursive>:
 802c980:	4770      	bx	lr
	...

0802c984 <_lseek_r>:
 802c984:	b538      	push	{r3, r4, r5, lr}
 802c986:	4d07      	ldr	r5, [pc, #28]	; (802c9a4 <_lseek_r+0x20>)
 802c988:	4604      	mov	r4, r0
 802c98a:	4608      	mov	r0, r1
 802c98c:	4611      	mov	r1, r2
 802c98e:	2200      	movs	r2, #0
 802c990:	602a      	str	r2, [r5, #0]
 802c992:	461a      	mov	r2, r3
 802c994:	f7d7 f88c 	bl	8003ab0 <_lseek>
 802c998:	1c43      	adds	r3, r0, #1
 802c99a:	d102      	bne.n	802c9a2 <_lseek_r+0x1e>
 802c99c:	682b      	ldr	r3, [r5, #0]
 802c99e:	b103      	cbz	r3, 802c9a2 <_lseek_r+0x1e>
 802c9a0:	6023      	str	r3, [r4, #0]
 802c9a2:	bd38      	pop	{r3, r4, r5, pc}
 802c9a4:	2000b764 	.word	0x2000b764

0802c9a8 <__swhatbuf_r>:
 802c9a8:	b570      	push	{r4, r5, r6, lr}
 802c9aa:	460e      	mov	r6, r1
 802c9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9b0:	2900      	cmp	r1, #0
 802c9b2:	b096      	sub	sp, #88	; 0x58
 802c9b4:	4614      	mov	r4, r2
 802c9b6:	461d      	mov	r5, r3
 802c9b8:	da08      	bge.n	802c9cc <__swhatbuf_r+0x24>
 802c9ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802c9be:	2200      	movs	r2, #0
 802c9c0:	602a      	str	r2, [r5, #0]
 802c9c2:	061a      	lsls	r2, r3, #24
 802c9c4:	d410      	bmi.n	802c9e8 <__swhatbuf_r+0x40>
 802c9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c9ca:	e00e      	b.n	802c9ea <__swhatbuf_r+0x42>
 802c9cc:	466a      	mov	r2, sp
 802c9ce:	f000 fea1 	bl	802d714 <_fstat_r>
 802c9d2:	2800      	cmp	r0, #0
 802c9d4:	dbf1      	blt.n	802c9ba <__swhatbuf_r+0x12>
 802c9d6:	9a01      	ldr	r2, [sp, #4]
 802c9d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c9dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c9e0:	425a      	negs	r2, r3
 802c9e2:	415a      	adcs	r2, r3
 802c9e4:	602a      	str	r2, [r5, #0]
 802c9e6:	e7ee      	b.n	802c9c6 <__swhatbuf_r+0x1e>
 802c9e8:	2340      	movs	r3, #64	; 0x40
 802c9ea:	2000      	movs	r0, #0
 802c9ec:	6023      	str	r3, [r4, #0]
 802c9ee:	b016      	add	sp, #88	; 0x58
 802c9f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802c9f4 <__smakebuf_r>:
 802c9f4:	898b      	ldrh	r3, [r1, #12]
 802c9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c9f8:	079d      	lsls	r5, r3, #30
 802c9fa:	4606      	mov	r6, r0
 802c9fc:	460c      	mov	r4, r1
 802c9fe:	d507      	bpl.n	802ca10 <__smakebuf_r+0x1c>
 802ca00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ca04:	6023      	str	r3, [r4, #0]
 802ca06:	6123      	str	r3, [r4, #16]
 802ca08:	2301      	movs	r3, #1
 802ca0a:	6163      	str	r3, [r4, #20]
 802ca0c:	b002      	add	sp, #8
 802ca0e:	bd70      	pop	{r4, r5, r6, pc}
 802ca10:	ab01      	add	r3, sp, #4
 802ca12:	466a      	mov	r2, sp
 802ca14:	f7ff ffc8 	bl	802c9a8 <__swhatbuf_r>
 802ca18:	9900      	ldr	r1, [sp, #0]
 802ca1a:	4605      	mov	r5, r0
 802ca1c:	4630      	mov	r0, r6
 802ca1e:	f7ff f869 	bl	802baf4 <_malloc_r>
 802ca22:	b948      	cbnz	r0, 802ca38 <__smakebuf_r+0x44>
 802ca24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ca28:	059a      	lsls	r2, r3, #22
 802ca2a:	d4ef      	bmi.n	802ca0c <__smakebuf_r+0x18>
 802ca2c:	f023 0303 	bic.w	r3, r3, #3
 802ca30:	f043 0302 	orr.w	r3, r3, #2
 802ca34:	81a3      	strh	r3, [r4, #12]
 802ca36:	e7e3      	b.n	802ca00 <__smakebuf_r+0xc>
 802ca38:	4b0d      	ldr	r3, [pc, #52]	; (802ca70 <__smakebuf_r+0x7c>)
 802ca3a:	62b3      	str	r3, [r6, #40]	; 0x28
 802ca3c:	89a3      	ldrh	r3, [r4, #12]
 802ca3e:	6020      	str	r0, [r4, #0]
 802ca40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ca44:	81a3      	strh	r3, [r4, #12]
 802ca46:	9b00      	ldr	r3, [sp, #0]
 802ca48:	6163      	str	r3, [r4, #20]
 802ca4a:	9b01      	ldr	r3, [sp, #4]
 802ca4c:	6120      	str	r0, [r4, #16]
 802ca4e:	b15b      	cbz	r3, 802ca68 <__smakebuf_r+0x74>
 802ca50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca54:	4630      	mov	r0, r6
 802ca56:	f000 fe6f 	bl	802d738 <_isatty_r>
 802ca5a:	b128      	cbz	r0, 802ca68 <__smakebuf_r+0x74>
 802ca5c:	89a3      	ldrh	r3, [r4, #12]
 802ca5e:	f023 0303 	bic.w	r3, r3, #3
 802ca62:	f043 0301 	orr.w	r3, r3, #1
 802ca66:	81a3      	strh	r3, [r4, #12]
 802ca68:	89a0      	ldrh	r0, [r4, #12]
 802ca6a:	4305      	orrs	r5, r0
 802ca6c:	81a5      	strh	r5, [r4, #12]
 802ca6e:	e7cd      	b.n	802ca0c <__smakebuf_r+0x18>
 802ca70:	0802c7d9 	.word	0x0802c7d9

0802ca74 <memmove>:
 802ca74:	4288      	cmp	r0, r1
 802ca76:	b510      	push	{r4, lr}
 802ca78:	eb01 0402 	add.w	r4, r1, r2
 802ca7c:	d902      	bls.n	802ca84 <memmove+0x10>
 802ca7e:	4284      	cmp	r4, r0
 802ca80:	4623      	mov	r3, r4
 802ca82:	d807      	bhi.n	802ca94 <memmove+0x20>
 802ca84:	1e43      	subs	r3, r0, #1
 802ca86:	42a1      	cmp	r1, r4
 802ca88:	d008      	beq.n	802ca9c <memmove+0x28>
 802ca8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ca8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ca92:	e7f8      	b.n	802ca86 <memmove+0x12>
 802ca94:	4402      	add	r2, r0
 802ca96:	4601      	mov	r1, r0
 802ca98:	428a      	cmp	r2, r1
 802ca9a:	d100      	bne.n	802ca9e <memmove+0x2a>
 802ca9c:	bd10      	pop	{r4, pc}
 802ca9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802caa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802caa6:	e7f7      	b.n	802ca98 <memmove+0x24>

0802caa8 <__malloc_lock>:
 802caa8:	4801      	ldr	r0, [pc, #4]	; (802cab0 <__malloc_lock+0x8>)
 802caaa:	f7ff bf67 	b.w	802c97c <__retarget_lock_acquire_recursive>
 802caae:	bf00      	nop
 802cab0:	2000b761 	.word	0x2000b761

0802cab4 <__malloc_unlock>:
 802cab4:	4801      	ldr	r0, [pc, #4]	; (802cabc <__malloc_unlock+0x8>)
 802cab6:	f7ff bf63 	b.w	802c980 <__retarget_lock_release_recursive>
 802caba:	bf00      	nop
 802cabc:	2000b761 	.word	0x2000b761

0802cac0 <_realloc_r>:
 802cac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cac4:	4680      	mov	r8, r0
 802cac6:	4614      	mov	r4, r2
 802cac8:	460e      	mov	r6, r1
 802caca:	b921      	cbnz	r1, 802cad6 <_realloc_r+0x16>
 802cacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802cad0:	4611      	mov	r1, r2
 802cad2:	f7ff b80f 	b.w	802baf4 <_malloc_r>
 802cad6:	b92a      	cbnz	r2, 802cae4 <_realloc_r+0x24>
 802cad8:	f7fe ffa0 	bl	802ba1c <_free_r>
 802cadc:	4625      	mov	r5, r4
 802cade:	4628      	mov	r0, r5
 802cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cae4:	f000 fe38 	bl	802d758 <_malloc_usable_size_r>
 802cae8:	4284      	cmp	r4, r0
 802caea:	4607      	mov	r7, r0
 802caec:	d802      	bhi.n	802caf4 <_realloc_r+0x34>
 802caee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802caf2:	d812      	bhi.n	802cb1a <_realloc_r+0x5a>
 802caf4:	4621      	mov	r1, r4
 802caf6:	4640      	mov	r0, r8
 802caf8:	f7fe fffc 	bl	802baf4 <_malloc_r>
 802cafc:	4605      	mov	r5, r0
 802cafe:	2800      	cmp	r0, #0
 802cb00:	d0ed      	beq.n	802cade <_realloc_r+0x1e>
 802cb02:	42bc      	cmp	r4, r7
 802cb04:	4622      	mov	r2, r4
 802cb06:	4631      	mov	r1, r6
 802cb08:	bf28      	it	cs
 802cb0a:	463a      	movcs	r2, r7
 802cb0c:	f7fe ff70 	bl	802b9f0 <memcpy>
 802cb10:	4631      	mov	r1, r6
 802cb12:	4640      	mov	r0, r8
 802cb14:	f7fe ff82 	bl	802ba1c <_free_r>
 802cb18:	e7e1      	b.n	802cade <_realloc_r+0x1e>
 802cb1a:	4635      	mov	r5, r6
 802cb1c:	e7df      	b.n	802cade <_realloc_r+0x1e>

0802cb1e <__ssputs_r>:
 802cb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cb22:	688e      	ldr	r6, [r1, #8]
 802cb24:	429e      	cmp	r6, r3
 802cb26:	4682      	mov	sl, r0
 802cb28:	460c      	mov	r4, r1
 802cb2a:	4690      	mov	r8, r2
 802cb2c:	461f      	mov	r7, r3
 802cb2e:	d838      	bhi.n	802cba2 <__ssputs_r+0x84>
 802cb30:	898a      	ldrh	r2, [r1, #12]
 802cb32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802cb36:	d032      	beq.n	802cb9e <__ssputs_r+0x80>
 802cb38:	6825      	ldr	r5, [r4, #0]
 802cb3a:	6909      	ldr	r1, [r1, #16]
 802cb3c:	eba5 0901 	sub.w	r9, r5, r1
 802cb40:	6965      	ldr	r5, [r4, #20]
 802cb42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802cb46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802cb4a:	3301      	adds	r3, #1
 802cb4c:	444b      	add	r3, r9
 802cb4e:	106d      	asrs	r5, r5, #1
 802cb50:	429d      	cmp	r5, r3
 802cb52:	bf38      	it	cc
 802cb54:	461d      	movcc	r5, r3
 802cb56:	0553      	lsls	r3, r2, #21
 802cb58:	d531      	bpl.n	802cbbe <__ssputs_r+0xa0>
 802cb5a:	4629      	mov	r1, r5
 802cb5c:	f7fe ffca 	bl	802baf4 <_malloc_r>
 802cb60:	4606      	mov	r6, r0
 802cb62:	b950      	cbnz	r0, 802cb7a <__ssputs_r+0x5c>
 802cb64:	230c      	movs	r3, #12
 802cb66:	f8ca 3000 	str.w	r3, [sl]
 802cb6a:	89a3      	ldrh	r3, [r4, #12]
 802cb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cb70:	81a3      	strh	r3, [r4, #12]
 802cb72:	f04f 30ff 	mov.w	r0, #4294967295
 802cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cb7a:	6921      	ldr	r1, [r4, #16]
 802cb7c:	464a      	mov	r2, r9
 802cb7e:	f7fe ff37 	bl	802b9f0 <memcpy>
 802cb82:	89a3      	ldrh	r3, [r4, #12]
 802cb84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802cb88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cb8c:	81a3      	strh	r3, [r4, #12]
 802cb8e:	6126      	str	r6, [r4, #16]
 802cb90:	6165      	str	r5, [r4, #20]
 802cb92:	444e      	add	r6, r9
 802cb94:	eba5 0509 	sub.w	r5, r5, r9
 802cb98:	6026      	str	r6, [r4, #0]
 802cb9a:	60a5      	str	r5, [r4, #8]
 802cb9c:	463e      	mov	r6, r7
 802cb9e:	42be      	cmp	r6, r7
 802cba0:	d900      	bls.n	802cba4 <__ssputs_r+0x86>
 802cba2:	463e      	mov	r6, r7
 802cba4:	6820      	ldr	r0, [r4, #0]
 802cba6:	4632      	mov	r2, r6
 802cba8:	4641      	mov	r1, r8
 802cbaa:	f7ff ff63 	bl	802ca74 <memmove>
 802cbae:	68a3      	ldr	r3, [r4, #8]
 802cbb0:	1b9b      	subs	r3, r3, r6
 802cbb2:	60a3      	str	r3, [r4, #8]
 802cbb4:	6823      	ldr	r3, [r4, #0]
 802cbb6:	4433      	add	r3, r6
 802cbb8:	6023      	str	r3, [r4, #0]
 802cbba:	2000      	movs	r0, #0
 802cbbc:	e7db      	b.n	802cb76 <__ssputs_r+0x58>
 802cbbe:	462a      	mov	r2, r5
 802cbc0:	f7ff ff7e 	bl	802cac0 <_realloc_r>
 802cbc4:	4606      	mov	r6, r0
 802cbc6:	2800      	cmp	r0, #0
 802cbc8:	d1e1      	bne.n	802cb8e <__ssputs_r+0x70>
 802cbca:	6921      	ldr	r1, [r4, #16]
 802cbcc:	4650      	mov	r0, sl
 802cbce:	f7fe ff25 	bl	802ba1c <_free_r>
 802cbd2:	e7c7      	b.n	802cb64 <__ssputs_r+0x46>

0802cbd4 <_svfiprintf_r>:
 802cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cbd8:	4698      	mov	r8, r3
 802cbda:	898b      	ldrh	r3, [r1, #12]
 802cbdc:	061b      	lsls	r3, r3, #24
 802cbde:	b09d      	sub	sp, #116	; 0x74
 802cbe0:	4607      	mov	r7, r0
 802cbe2:	460d      	mov	r5, r1
 802cbe4:	4614      	mov	r4, r2
 802cbe6:	d50e      	bpl.n	802cc06 <_svfiprintf_r+0x32>
 802cbe8:	690b      	ldr	r3, [r1, #16]
 802cbea:	b963      	cbnz	r3, 802cc06 <_svfiprintf_r+0x32>
 802cbec:	2140      	movs	r1, #64	; 0x40
 802cbee:	f7fe ff81 	bl	802baf4 <_malloc_r>
 802cbf2:	6028      	str	r0, [r5, #0]
 802cbf4:	6128      	str	r0, [r5, #16]
 802cbf6:	b920      	cbnz	r0, 802cc02 <_svfiprintf_r+0x2e>
 802cbf8:	230c      	movs	r3, #12
 802cbfa:	603b      	str	r3, [r7, #0]
 802cbfc:	f04f 30ff 	mov.w	r0, #4294967295
 802cc00:	e0d1      	b.n	802cda6 <_svfiprintf_r+0x1d2>
 802cc02:	2340      	movs	r3, #64	; 0x40
 802cc04:	616b      	str	r3, [r5, #20]
 802cc06:	2300      	movs	r3, #0
 802cc08:	9309      	str	r3, [sp, #36]	; 0x24
 802cc0a:	2320      	movs	r3, #32
 802cc0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cc10:	f8cd 800c 	str.w	r8, [sp, #12]
 802cc14:	2330      	movs	r3, #48	; 0x30
 802cc16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802cdc0 <_svfiprintf_r+0x1ec>
 802cc1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cc1e:	f04f 0901 	mov.w	r9, #1
 802cc22:	4623      	mov	r3, r4
 802cc24:	469a      	mov	sl, r3
 802cc26:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cc2a:	b10a      	cbz	r2, 802cc30 <_svfiprintf_r+0x5c>
 802cc2c:	2a25      	cmp	r2, #37	; 0x25
 802cc2e:	d1f9      	bne.n	802cc24 <_svfiprintf_r+0x50>
 802cc30:	ebba 0b04 	subs.w	fp, sl, r4
 802cc34:	d00b      	beq.n	802cc4e <_svfiprintf_r+0x7a>
 802cc36:	465b      	mov	r3, fp
 802cc38:	4622      	mov	r2, r4
 802cc3a:	4629      	mov	r1, r5
 802cc3c:	4638      	mov	r0, r7
 802cc3e:	f7ff ff6e 	bl	802cb1e <__ssputs_r>
 802cc42:	3001      	adds	r0, #1
 802cc44:	f000 80aa 	beq.w	802cd9c <_svfiprintf_r+0x1c8>
 802cc48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cc4a:	445a      	add	r2, fp
 802cc4c:	9209      	str	r2, [sp, #36]	; 0x24
 802cc4e:	f89a 3000 	ldrb.w	r3, [sl]
 802cc52:	2b00      	cmp	r3, #0
 802cc54:	f000 80a2 	beq.w	802cd9c <_svfiprintf_r+0x1c8>
 802cc58:	2300      	movs	r3, #0
 802cc5a:	f04f 32ff 	mov.w	r2, #4294967295
 802cc5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cc62:	f10a 0a01 	add.w	sl, sl, #1
 802cc66:	9304      	str	r3, [sp, #16]
 802cc68:	9307      	str	r3, [sp, #28]
 802cc6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cc6e:	931a      	str	r3, [sp, #104]	; 0x68
 802cc70:	4654      	mov	r4, sl
 802cc72:	2205      	movs	r2, #5
 802cc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cc78:	4851      	ldr	r0, [pc, #324]	; (802cdc0 <_svfiprintf_r+0x1ec>)
 802cc7a:	f7d3 fac1 	bl	8000200 <memchr>
 802cc7e:	9a04      	ldr	r2, [sp, #16]
 802cc80:	b9d8      	cbnz	r0, 802ccba <_svfiprintf_r+0xe6>
 802cc82:	06d0      	lsls	r0, r2, #27
 802cc84:	bf44      	itt	mi
 802cc86:	2320      	movmi	r3, #32
 802cc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc8c:	0711      	lsls	r1, r2, #28
 802cc8e:	bf44      	itt	mi
 802cc90:	232b      	movmi	r3, #43	; 0x2b
 802cc92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc96:	f89a 3000 	ldrb.w	r3, [sl]
 802cc9a:	2b2a      	cmp	r3, #42	; 0x2a
 802cc9c:	d015      	beq.n	802ccca <_svfiprintf_r+0xf6>
 802cc9e:	9a07      	ldr	r2, [sp, #28]
 802cca0:	4654      	mov	r4, sl
 802cca2:	2000      	movs	r0, #0
 802cca4:	f04f 0c0a 	mov.w	ip, #10
 802cca8:	4621      	mov	r1, r4
 802ccaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ccae:	3b30      	subs	r3, #48	; 0x30
 802ccb0:	2b09      	cmp	r3, #9
 802ccb2:	d94e      	bls.n	802cd52 <_svfiprintf_r+0x17e>
 802ccb4:	b1b0      	cbz	r0, 802cce4 <_svfiprintf_r+0x110>
 802ccb6:	9207      	str	r2, [sp, #28]
 802ccb8:	e014      	b.n	802cce4 <_svfiprintf_r+0x110>
 802ccba:	eba0 0308 	sub.w	r3, r0, r8
 802ccbe:	fa09 f303 	lsl.w	r3, r9, r3
 802ccc2:	4313      	orrs	r3, r2
 802ccc4:	9304      	str	r3, [sp, #16]
 802ccc6:	46a2      	mov	sl, r4
 802ccc8:	e7d2      	b.n	802cc70 <_svfiprintf_r+0x9c>
 802ccca:	9b03      	ldr	r3, [sp, #12]
 802cccc:	1d19      	adds	r1, r3, #4
 802ccce:	681b      	ldr	r3, [r3, #0]
 802ccd0:	9103      	str	r1, [sp, #12]
 802ccd2:	2b00      	cmp	r3, #0
 802ccd4:	bfbb      	ittet	lt
 802ccd6:	425b      	neglt	r3, r3
 802ccd8:	f042 0202 	orrlt.w	r2, r2, #2
 802ccdc:	9307      	strge	r3, [sp, #28]
 802ccde:	9307      	strlt	r3, [sp, #28]
 802cce0:	bfb8      	it	lt
 802cce2:	9204      	strlt	r2, [sp, #16]
 802cce4:	7823      	ldrb	r3, [r4, #0]
 802cce6:	2b2e      	cmp	r3, #46	; 0x2e
 802cce8:	d10c      	bne.n	802cd04 <_svfiprintf_r+0x130>
 802ccea:	7863      	ldrb	r3, [r4, #1]
 802ccec:	2b2a      	cmp	r3, #42	; 0x2a
 802ccee:	d135      	bne.n	802cd5c <_svfiprintf_r+0x188>
 802ccf0:	9b03      	ldr	r3, [sp, #12]
 802ccf2:	1d1a      	adds	r2, r3, #4
 802ccf4:	681b      	ldr	r3, [r3, #0]
 802ccf6:	9203      	str	r2, [sp, #12]
 802ccf8:	2b00      	cmp	r3, #0
 802ccfa:	bfb8      	it	lt
 802ccfc:	f04f 33ff 	movlt.w	r3, #4294967295
 802cd00:	3402      	adds	r4, #2
 802cd02:	9305      	str	r3, [sp, #20]
 802cd04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802cdd0 <_svfiprintf_r+0x1fc>
 802cd08:	7821      	ldrb	r1, [r4, #0]
 802cd0a:	2203      	movs	r2, #3
 802cd0c:	4650      	mov	r0, sl
 802cd0e:	f7d3 fa77 	bl	8000200 <memchr>
 802cd12:	b140      	cbz	r0, 802cd26 <_svfiprintf_r+0x152>
 802cd14:	2340      	movs	r3, #64	; 0x40
 802cd16:	eba0 000a 	sub.w	r0, r0, sl
 802cd1a:	fa03 f000 	lsl.w	r0, r3, r0
 802cd1e:	9b04      	ldr	r3, [sp, #16]
 802cd20:	4303      	orrs	r3, r0
 802cd22:	3401      	adds	r4, #1
 802cd24:	9304      	str	r3, [sp, #16]
 802cd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cd2a:	4826      	ldr	r0, [pc, #152]	; (802cdc4 <_svfiprintf_r+0x1f0>)
 802cd2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802cd30:	2206      	movs	r2, #6
 802cd32:	f7d3 fa65 	bl	8000200 <memchr>
 802cd36:	2800      	cmp	r0, #0
 802cd38:	d038      	beq.n	802cdac <_svfiprintf_r+0x1d8>
 802cd3a:	4b23      	ldr	r3, [pc, #140]	; (802cdc8 <_svfiprintf_r+0x1f4>)
 802cd3c:	bb1b      	cbnz	r3, 802cd86 <_svfiprintf_r+0x1b2>
 802cd3e:	9b03      	ldr	r3, [sp, #12]
 802cd40:	3307      	adds	r3, #7
 802cd42:	f023 0307 	bic.w	r3, r3, #7
 802cd46:	3308      	adds	r3, #8
 802cd48:	9303      	str	r3, [sp, #12]
 802cd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cd4c:	4433      	add	r3, r6
 802cd4e:	9309      	str	r3, [sp, #36]	; 0x24
 802cd50:	e767      	b.n	802cc22 <_svfiprintf_r+0x4e>
 802cd52:	fb0c 3202 	mla	r2, ip, r2, r3
 802cd56:	460c      	mov	r4, r1
 802cd58:	2001      	movs	r0, #1
 802cd5a:	e7a5      	b.n	802cca8 <_svfiprintf_r+0xd4>
 802cd5c:	2300      	movs	r3, #0
 802cd5e:	3401      	adds	r4, #1
 802cd60:	9305      	str	r3, [sp, #20]
 802cd62:	4619      	mov	r1, r3
 802cd64:	f04f 0c0a 	mov.w	ip, #10
 802cd68:	4620      	mov	r0, r4
 802cd6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cd6e:	3a30      	subs	r2, #48	; 0x30
 802cd70:	2a09      	cmp	r2, #9
 802cd72:	d903      	bls.n	802cd7c <_svfiprintf_r+0x1a8>
 802cd74:	2b00      	cmp	r3, #0
 802cd76:	d0c5      	beq.n	802cd04 <_svfiprintf_r+0x130>
 802cd78:	9105      	str	r1, [sp, #20]
 802cd7a:	e7c3      	b.n	802cd04 <_svfiprintf_r+0x130>
 802cd7c:	fb0c 2101 	mla	r1, ip, r1, r2
 802cd80:	4604      	mov	r4, r0
 802cd82:	2301      	movs	r3, #1
 802cd84:	e7f0      	b.n	802cd68 <_svfiprintf_r+0x194>
 802cd86:	ab03      	add	r3, sp, #12
 802cd88:	9300      	str	r3, [sp, #0]
 802cd8a:	462a      	mov	r2, r5
 802cd8c:	4b0f      	ldr	r3, [pc, #60]	; (802cdcc <_svfiprintf_r+0x1f8>)
 802cd8e:	a904      	add	r1, sp, #16
 802cd90:	4638      	mov	r0, r7
 802cd92:	f3af 8000 	nop.w
 802cd96:	1c42      	adds	r2, r0, #1
 802cd98:	4606      	mov	r6, r0
 802cd9a:	d1d6      	bne.n	802cd4a <_svfiprintf_r+0x176>
 802cd9c:	89ab      	ldrh	r3, [r5, #12]
 802cd9e:	065b      	lsls	r3, r3, #25
 802cda0:	f53f af2c 	bmi.w	802cbfc <_svfiprintf_r+0x28>
 802cda4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cda6:	b01d      	add	sp, #116	; 0x74
 802cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cdac:	ab03      	add	r3, sp, #12
 802cdae:	9300      	str	r3, [sp, #0]
 802cdb0:	462a      	mov	r2, r5
 802cdb2:	4b06      	ldr	r3, [pc, #24]	; (802cdcc <_svfiprintf_r+0x1f8>)
 802cdb4:	a904      	add	r1, sp, #16
 802cdb6:	4638      	mov	r0, r7
 802cdb8:	f7ff f8d8 	bl	802bf6c <_printf_i>
 802cdbc:	e7eb      	b.n	802cd96 <_svfiprintf_r+0x1c2>
 802cdbe:	bf00      	nop
 802cdc0:	0802f74c 	.word	0x0802f74c
 802cdc4:	0802f756 	.word	0x0802f756
 802cdc8:	00000000 	.word	0x00000000
 802cdcc:	0802cb1f 	.word	0x0802cb1f
 802cdd0:	0802f752 	.word	0x0802f752

0802cdd4 <_sungetc_r>:
 802cdd4:	b538      	push	{r3, r4, r5, lr}
 802cdd6:	1c4b      	adds	r3, r1, #1
 802cdd8:	4614      	mov	r4, r2
 802cdda:	d103      	bne.n	802cde4 <_sungetc_r+0x10>
 802cddc:	f04f 35ff 	mov.w	r5, #4294967295
 802cde0:	4628      	mov	r0, r5
 802cde2:	bd38      	pop	{r3, r4, r5, pc}
 802cde4:	8993      	ldrh	r3, [r2, #12]
 802cde6:	f023 0320 	bic.w	r3, r3, #32
 802cdea:	8193      	strh	r3, [r2, #12]
 802cdec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802cdee:	6852      	ldr	r2, [r2, #4]
 802cdf0:	b2cd      	uxtb	r5, r1
 802cdf2:	b18b      	cbz	r3, 802ce18 <_sungetc_r+0x44>
 802cdf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802cdf6:	4293      	cmp	r3, r2
 802cdf8:	dd08      	ble.n	802ce0c <_sungetc_r+0x38>
 802cdfa:	6823      	ldr	r3, [r4, #0]
 802cdfc:	1e5a      	subs	r2, r3, #1
 802cdfe:	6022      	str	r2, [r4, #0]
 802ce00:	f803 5c01 	strb.w	r5, [r3, #-1]
 802ce04:	6863      	ldr	r3, [r4, #4]
 802ce06:	3301      	adds	r3, #1
 802ce08:	6063      	str	r3, [r4, #4]
 802ce0a:	e7e9      	b.n	802cde0 <_sungetc_r+0xc>
 802ce0c:	4621      	mov	r1, r4
 802ce0e:	f000 fc47 	bl	802d6a0 <__submore>
 802ce12:	2800      	cmp	r0, #0
 802ce14:	d0f1      	beq.n	802cdfa <_sungetc_r+0x26>
 802ce16:	e7e1      	b.n	802cddc <_sungetc_r+0x8>
 802ce18:	6921      	ldr	r1, [r4, #16]
 802ce1a:	6823      	ldr	r3, [r4, #0]
 802ce1c:	b151      	cbz	r1, 802ce34 <_sungetc_r+0x60>
 802ce1e:	4299      	cmp	r1, r3
 802ce20:	d208      	bcs.n	802ce34 <_sungetc_r+0x60>
 802ce22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802ce26:	42a9      	cmp	r1, r5
 802ce28:	d104      	bne.n	802ce34 <_sungetc_r+0x60>
 802ce2a:	3b01      	subs	r3, #1
 802ce2c:	3201      	adds	r2, #1
 802ce2e:	6023      	str	r3, [r4, #0]
 802ce30:	6062      	str	r2, [r4, #4]
 802ce32:	e7d5      	b.n	802cde0 <_sungetc_r+0xc>
 802ce34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802ce38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ce3c:	6363      	str	r3, [r4, #52]	; 0x34
 802ce3e:	2303      	movs	r3, #3
 802ce40:	63a3      	str	r3, [r4, #56]	; 0x38
 802ce42:	4623      	mov	r3, r4
 802ce44:	f803 5f46 	strb.w	r5, [r3, #70]!
 802ce48:	6023      	str	r3, [r4, #0]
 802ce4a:	2301      	movs	r3, #1
 802ce4c:	e7dc      	b.n	802ce08 <_sungetc_r+0x34>

0802ce4e <__ssrefill_r>:
 802ce4e:	b510      	push	{r4, lr}
 802ce50:	460c      	mov	r4, r1
 802ce52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802ce54:	b169      	cbz	r1, 802ce72 <__ssrefill_r+0x24>
 802ce56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ce5a:	4299      	cmp	r1, r3
 802ce5c:	d001      	beq.n	802ce62 <__ssrefill_r+0x14>
 802ce5e:	f7fe fddd 	bl	802ba1c <_free_r>
 802ce62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ce64:	6063      	str	r3, [r4, #4]
 802ce66:	2000      	movs	r0, #0
 802ce68:	6360      	str	r0, [r4, #52]	; 0x34
 802ce6a:	b113      	cbz	r3, 802ce72 <__ssrefill_r+0x24>
 802ce6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802ce6e:	6023      	str	r3, [r4, #0]
 802ce70:	bd10      	pop	{r4, pc}
 802ce72:	6923      	ldr	r3, [r4, #16]
 802ce74:	6023      	str	r3, [r4, #0]
 802ce76:	2300      	movs	r3, #0
 802ce78:	6063      	str	r3, [r4, #4]
 802ce7a:	89a3      	ldrh	r3, [r4, #12]
 802ce7c:	f043 0320 	orr.w	r3, r3, #32
 802ce80:	81a3      	strh	r3, [r4, #12]
 802ce82:	f04f 30ff 	mov.w	r0, #4294967295
 802ce86:	e7f3      	b.n	802ce70 <__ssrefill_r+0x22>

0802ce88 <__ssvfiscanf_r>:
 802ce88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ce8c:	460c      	mov	r4, r1
 802ce8e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802ce92:	2100      	movs	r1, #0
 802ce94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802ce98:	49a6      	ldr	r1, [pc, #664]	; (802d134 <__ssvfiscanf_r+0x2ac>)
 802ce9a:	91a0      	str	r1, [sp, #640]	; 0x280
 802ce9c:	f10d 0804 	add.w	r8, sp, #4
 802cea0:	49a5      	ldr	r1, [pc, #660]	; (802d138 <__ssvfiscanf_r+0x2b0>)
 802cea2:	4fa6      	ldr	r7, [pc, #664]	; (802d13c <__ssvfiscanf_r+0x2b4>)
 802cea4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802d140 <__ssvfiscanf_r+0x2b8>
 802cea8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802ceac:	4606      	mov	r6, r0
 802ceae:	91a1      	str	r1, [sp, #644]	; 0x284
 802ceb0:	9300      	str	r3, [sp, #0]
 802ceb2:	7813      	ldrb	r3, [r2, #0]
 802ceb4:	2b00      	cmp	r3, #0
 802ceb6:	f000 815a 	beq.w	802d16e <__ssvfiscanf_r+0x2e6>
 802ceba:	5dd9      	ldrb	r1, [r3, r7]
 802cebc:	f011 0108 	ands.w	r1, r1, #8
 802cec0:	f102 0501 	add.w	r5, r2, #1
 802cec4:	d019      	beq.n	802cefa <__ssvfiscanf_r+0x72>
 802cec6:	6863      	ldr	r3, [r4, #4]
 802cec8:	2b00      	cmp	r3, #0
 802ceca:	dd0f      	ble.n	802ceec <__ssvfiscanf_r+0x64>
 802cecc:	6823      	ldr	r3, [r4, #0]
 802cece:	781a      	ldrb	r2, [r3, #0]
 802ced0:	5cba      	ldrb	r2, [r7, r2]
 802ced2:	0712      	lsls	r2, r2, #28
 802ced4:	d401      	bmi.n	802ceda <__ssvfiscanf_r+0x52>
 802ced6:	462a      	mov	r2, r5
 802ced8:	e7eb      	b.n	802ceb2 <__ssvfiscanf_r+0x2a>
 802ceda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802cedc:	3201      	adds	r2, #1
 802cede:	9245      	str	r2, [sp, #276]	; 0x114
 802cee0:	6862      	ldr	r2, [r4, #4]
 802cee2:	3301      	adds	r3, #1
 802cee4:	3a01      	subs	r2, #1
 802cee6:	6062      	str	r2, [r4, #4]
 802cee8:	6023      	str	r3, [r4, #0]
 802ceea:	e7ec      	b.n	802cec6 <__ssvfiscanf_r+0x3e>
 802ceec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802ceee:	4621      	mov	r1, r4
 802cef0:	4630      	mov	r0, r6
 802cef2:	4798      	blx	r3
 802cef4:	2800      	cmp	r0, #0
 802cef6:	d0e9      	beq.n	802cecc <__ssvfiscanf_r+0x44>
 802cef8:	e7ed      	b.n	802ced6 <__ssvfiscanf_r+0x4e>
 802cefa:	2b25      	cmp	r3, #37	; 0x25
 802cefc:	d012      	beq.n	802cf24 <__ssvfiscanf_r+0x9c>
 802cefe:	469a      	mov	sl, r3
 802cf00:	6863      	ldr	r3, [r4, #4]
 802cf02:	2b00      	cmp	r3, #0
 802cf04:	f340 8091 	ble.w	802d02a <__ssvfiscanf_r+0x1a2>
 802cf08:	6822      	ldr	r2, [r4, #0]
 802cf0a:	7813      	ldrb	r3, [r2, #0]
 802cf0c:	4553      	cmp	r3, sl
 802cf0e:	f040 812e 	bne.w	802d16e <__ssvfiscanf_r+0x2e6>
 802cf12:	6863      	ldr	r3, [r4, #4]
 802cf14:	3b01      	subs	r3, #1
 802cf16:	6063      	str	r3, [r4, #4]
 802cf18:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802cf1a:	3201      	adds	r2, #1
 802cf1c:	3301      	adds	r3, #1
 802cf1e:	6022      	str	r2, [r4, #0]
 802cf20:	9345      	str	r3, [sp, #276]	; 0x114
 802cf22:	e7d8      	b.n	802ced6 <__ssvfiscanf_r+0x4e>
 802cf24:	9141      	str	r1, [sp, #260]	; 0x104
 802cf26:	9143      	str	r1, [sp, #268]	; 0x10c
 802cf28:	7853      	ldrb	r3, [r2, #1]
 802cf2a:	2b2a      	cmp	r3, #42	; 0x2a
 802cf2c:	bf02      	ittt	eq
 802cf2e:	2310      	moveq	r3, #16
 802cf30:	1c95      	addeq	r5, r2, #2
 802cf32:	9341      	streq	r3, [sp, #260]	; 0x104
 802cf34:	220a      	movs	r2, #10
 802cf36:	46aa      	mov	sl, r5
 802cf38:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802cf3c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802cf40:	2b09      	cmp	r3, #9
 802cf42:	d91d      	bls.n	802cf80 <__ssvfiscanf_r+0xf8>
 802cf44:	487e      	ldr	r0, [pc, #504]	; (802d140 <__ssvfiscanf_r+0x2b8>)
 802cf46:	2203      	movs	r2, #3
 802cf48:	f7d3 f95a 	bl	8000200 <memchr>
 802cf4c:	b140      	cbz	r0, 802cf60 <__ssvfiscanf_r+0xd8>
 802cf4e:	2301      	movs	r3, #1
 802cf50:	eba0 0009 	sub.w	r0, r0, r9
 802cf54:	fa03 f000 	lsl.w	r0, r3, r0
 802cf58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802cf5a:	4318      	orrs	r0, r3
 802cf5c:	9041      	str	r0, [sp, #260]	; 0x104
 802cf5e:	4655      	mov	r5, sl
 802cf60:	f815 3b01 	ldrb.w	r3, [r5], #1
 802cf64:	2b78      	cmp	r3, #120	; 0x78
 802cf66:	d806      	bhi.n	802cf76 <__ssvfiscanf_r+0xee>
 802cf68:	2b57      	cmp	r3, #87	; 0x57
 802cf6a:	d810      	bhi.n	802cf8e <__ssvfiscanf_r+0x106>
 802cf6c:	2b25      	cmp	r3, #37	; 0x25
 802cf6e:	d0c6      	beq.n	802cefe <__ssvfiscanf_r+0x76>
 802cf70:	d856      	bhi.n	802d020 <__ssvfiscanf_r+0x198>
 802cf72:	2b00      	cmp	r3, #0
 802cf74:	d064      	beq.n	802d040 <__ssvfiscanf_r+0x1b8>
 802cf76:	2303      	movs	r3, #3
 802cf78:	9347      	str	r3, [sp, #284]	; 0x11c
 802cf7a:	230a      	movs	r3, #10
 802cf7c:	9342      	str	r3, [sp, #264]	; 0x108
 802cf7e:	e071      	b.n	802d064 <__ssvfiscanf_r+0x1dc>
 802cf80:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802cf82:	fb02 1103 	mla	r1, r2, r3, r1
 802cf86:	3930      	subs	r1, #48	; 0x30
 802cf88:	9143      	str	r1, [sp, #268]	; 0x10c
 802cf8a:	4655      	mov	r5, sl
 802cf8c:	e7d3      	b.n	802cf36 <__ssvfiscanf_r+0xae>
 802cf8e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802cf92:	2a20      	cmp	r2, #32
 802cf94:	d8ef      	bhi.n	802cf76 <__ssvfiscanf_r+0xee>
 802cf96:	a101      	add	r1, pc, #4	; (adr r1, 802cf9c <__ssvfiscanf_r+0x114>)
 802cf98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802cf9c:	0802d04f 	.word	0x0802d04f
 802cfa0:	0802cf77 	.word	0x0802cf77
 802cfa4:	0802cf77 	.word	0x0802cf77
 802cfa8:	0802d0ad 	.word	0x0802d0ad
 802cfac:	0802cf77 	.word	0x0802cf77
 802cfb0:	0802cf77 	.word	0x0802cf77
 802cfb4:	0802cf77 	.word	0x0802cf77
 802cfb8:	0802cf77 	.word	0x0802cf77
 802cfbc:	0802cf77 	.word	0x0802cf77
 802cfc0:	0802cf77 	.word	0x0802cf77
 802cfc4:	0802cf77 	.word	0x0802cf77
 802cfc8:	0802d0c3 	.word	0x0802d0c3
 802cfcc:	0802d099 	.word	0x0802d099
 802cfd0:	0802d027 	.word	0x0802d027
 802cfd4:	0802d027 	.word	0x0802d027
 802cfd8:	0802d027 	.word	0x0802d027
 802cfdc:	0802cf77 	.word	0x0802cf77
 802cfe0:	0802d09d 	.word	0x0802d09d
 802cfe4:	0802cf77 	.word	0x0802cf77
 802cfe8:	0802cf77 	.word	0x0802cf77
 802cfec:	0802cf77 	.word	0x0802cf77
 802cff0:	0802cf77 	.word	0x0802cf77
 802cff4:	0802d0d3 	.word	0x0802d0d3
 802cff8:	0802d0a5 	.word	0x0802d0a5
 802cffc:	0802d047 	.word	0x0802d047
 802d000:	0802cf77 	.word	0x0802cf77
 802d004:	0802cf77 	.word	0x0802cf77
 802d008:	0802d0cf 	.word	0x0802d0cf
 802d00c:	0802cf77 	.word	0x0802cf77
 802d010:	0802d099 	.word	0x0802d099
 802d014:	0802cf77 	.word	0x0802cf77
 802d018:	0802cf77 	.word	0x0802cf77
 802d01c:	0802d04f 	.word	0x0802d04f
 802d020:	3b45      	subs	r3, #69	; 0x45
 802d022:	2b02      	cmp	r3, #2
 802d024:	d8a7      	bhi.n	802cf76 <__ssvfiscanf_r+0xee>
 802d026:	2305      	movs	r3, #5
 802d028:	e01b      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d02a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802d02c:	4621      	mov	r1, r4
 802d02e:	4630      	mov	r0, r6
 802d030:	4798      	blx	r3
 802d032:	2800      	cmp	r0, #0
 802d034:	f43f af68 	beq.w	802cf08 <__ssvfiscanf_r+0x80>
 802d038:	9844      	ldr	r0, [sp, #272]	; 0x110
 802d03a:	2800      	cmp	r0, #0
 802d03c:	f040 808d 	bne.w	802d15a <__ssvfiscanf_r+0x2d2>
 802d040:	f04f 30ff 	mov.w	r0, #4294967295
 802d044:	e08f      	b.n	802d166 <__ssvfiscanf_r+0x2de>
 802d046:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802d048:	f042 0220 	orr.w	r2, r2, #32
 802d04c:	9241      	str	r2, [sp, #260]	; 0x104
 802d04e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802d050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802d054:	9241      	str	r2, [sp, #260]	; 0x104
 802d056:	2210      	movs	r2, #16
 802d058:	2b6f      	cmp	r3, #111	; 0x6f
 802d05a:	9242      	str	r2, [sp, #264]	; 0x108
 802d05c:	bf34      	ite	cc
 802d05e:	2303      	movcc	r3, #3
 802d060:	2304      	movcs	r3, #4
 802d062:	9347      	str	r3, [sp, #284]	; 0x11c
 802d064:	6863      	ldr	r3, [r4, #4]
 802d066:	2b00      	cmp	r3, #0
 802d068:	dd42      	ble.n	802d0f0 <__ssvfiscanf_r+0x268>
 802d06a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802d06c:	0659      	lsls	r1, r3, #25
 802d06e:	d404      	bmi.n	802d07a <__ssvfiscanf_r+0x1f2>
 802d070:	6823      	ldr	r3, [r4, #0]
 802d072:	781a      	ldrb	r2, [r3, #0]
 802d074:	5cba      	ldrb	r2, [r7, r2]
 802d076:	0712      	lsls	r2, r2, #28
 802d078:	d441      	bmi.n	802d0fe <__ssvfiscanf_r+0x276>
 802d07a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802d07c:	2b02      	cmp	r3, #2
 802d07e:	dc50      	bgt.n	802d122 <__ssvfiscanf_r+0x29a>
 802d080:	466b      	mov	r3, sp
 802d082:	4622      	mov	r2, r4
 802d084:	a941      	add	r1, sp, #260	; 0x104
 802d086:	4630      	mov	r0, r6
 802d088:	f000 f876 	bl	802d178 <_scanf_chars>
 802d08c:	2801      	cmp	r0, #1
 802d08e:	d06e      	beq.n	802d16e <__ssvfiscanf_r+0x2e6>
 802d090:	2802      	cmp	r0, #2
 802d092:	f47f af20 	bne.w	802ced6 <__ssvfiscanf_r+0x4e>
 802d096:	e7cf      	b.n	802d038 <__ssvfiscanf_r+0x1b0>
 802d098:	220a      	movs	r2, #10
 802d09a:	e7dd      	b.n	802d058 <__ssvfiscanf_r+0x1d0>
 802d09c:	2300      	movs	r3, #0
 802d09e:	9342      	str	r3, [sp, #264]	; 0x108
 802d0a0:	2303      	movs	r3, #3
 802d0a2:	e7de      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d0a4:	2308      	movs	r3, #8
 802d0a6:	9342      	str	r3, [sp, #264]	; 0x108
 802d0a8:	2304      	movs	r3, #4
 802d0aa:	e7da      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d0ac:	4629      	mov	r1, r5
 802d0ae:	4640      	mov	r0, r8
 802d0b0:	f000 f9c6 	bl	802d440 <__sccl>
 802d0b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802d0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d0ba:	9341      	str	r3, [sp, #260]	; 0x104
 802d0bc:	4605      	mov	r5, r0
 802d0be:	2301      	movs	r3, #1
 802d0c0:	e7cf      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d0c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802d0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d0c8:	9341      	str	r3, [sp, #260]	; 0x104
 802d0ca:	2300      	movs	r3, #0
 802d0cc:	e7c9      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d0ce:	2302      	movs	r3, #2
 802d0d0:	e7c7      	b.n	802d062 <__ssvfiscanf_r+0x1da>
 802d0d2:	9841      	ldr	r0, [sp, #260]	; 0x104
 802d0d4:	06c3      	lsls	r3, r0, #27
 802d0d6:	f53f aefe 	bmi.w	802ced6 <__ssvfiscanf_r+0x4e>
 802d0da:	9b00      	ldr	r3, [sp, #0]
 802d0dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802d0de:	1d19      	adds	r1, r3, #4
 802d0e0:	9100      	str	r1, [sp, #0]
 802d0e2:	681b      	ldr	r3, [r3, #0]
 802d0e4:	f010 0f01 	tst.w	r0, #1
 802d0e8:	bf14      	ite	ne
 802d0ea:	801a      	strhne	r2, [r3, #0]
 802d0ec:	601a      	streq	r2, [r3, #0]
 802d0ee:	e6f2      	b.n	802ced6 <__ssvfiscanf_r+0x4e>
 802d0f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802d0f2:	4621      	mov	r1, r4
 802d0f4:	4630      	mov	r0, r6
 802d0f6:	4798      	blx	r3
 802d0f8:	2800      	cmp	r0, #0
 802d0fa:	d0b6      	beq.n	802d06a <__ssvfiscanf_r+0x1e2>
 802d0fc:	e79c      	b.n	802d038 <__ssvfiscanf_r+0x1b0>
 802d0fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802d100:	3201      	adds	r2, #1
 802d102:	9245      	str	r2, [sp, #276]	; 0x114
 802d104:	6862      	ldr	r2, [r4, #4]
 802d106:	3a01      	subs	r2, #1
 802d108:	2a00      	cmp	r2, #0
 802d10a:	6062      	str	r2, [r4, #4]
 802d10c:	dd02      	ble.n	802d114 <__ssvfiscanf_r+0x28c>
 802d10e:	3301      	adds	r3, #1
 802d110:	6023      	str	r3, [r4, #0]
 802d112:	e7ad      	b.n	802d070 <__ssvfiscanf_r+0x1e8>
 802d114:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802d116:	4621      	mov	r1, r4
 802d118:	4630      	mov	r0, r6
 802d11a:	4798      	blx	r3
 802d11c:	2800      	cmp	r0, #0
 802d11e:	d0a7      	beq.n	802d070 <__ssvfiscanf_r+0x1e8>
 802d120:	e78a      	b.n	802d038 <__ssvfiscanf_r+0x1b0>
 802d122:	2b04      	cmp	r3, #4
 802d124:	dc0e      	bgt.n	802d144 <__ssvfiscanf_r+0x2bc>
 802d126:	466b      	mov	r3, sp
 802d128:	4622      	mov	r2, r4
 802d12a:	a941      	add	r1, sp, #260	; 0x104
 802d12c:	4630      	mov	r0, r6
 802d12e:	f000 f87d 	bl	802d22c <_scanf_i>
 802d132:	e7ab      	b.n	802d08c <__ssvfiscanf_r+0x204>
 802d134:	0802cdd5 	.word	0x0802cdd5
 802d138:	0802ce4f 	.word	0x0802ce4f
 802d13c:	0802f800 	.word	0x0802f800
 802d140:	0802f752 	.word	0x0802f752
 802d144:	4b0b      	ldr	r3, [pc, #44]	; (802d174 <__ssvfiscanf_r+0x2ec>)
 802d146:	2b00      	cmp	r3, #0
 802d148:	f43f aec5 	beq.w	802ced6 <__ssvfiscanf_r+0x4e>
 802d14c:	466b      	mov	r3, sp
 802d14e:	4622      	mov	r2, r4
 802d150:	a941      	add	r1, sp, #260	; 0x104
 802d152:	4630      	mov	r0, r6
 802d154:	f3af 8000 	nop.w
 802d158:	e798      	b.n	802d08c <__ssvfiscanf_r+0x204>
 802d15a:	89a3      	ldrh	r3, [r4, #12]
 802d15c:	f013 0f40 	tst.w	r3, #64	; 0x40
 802d160:	bf18      	it	ne
 802d162:	f04f 30ff 	movne.w	r0, #4294967295
 802d166:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802d16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d16e:	9844      	ldr	r0, [sp, #272]	; 0x110
 802d170:	e7f9      	b.n	802d166 <__ssvfiscanf_r+0x2de>
 802d172:	bf00      	nop
 802d174:	00000000 	.word	0x00000000

0802d178 <_scanf_chars>:
 802d178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d17c:	4615      	mov	r5, r2
 802d17e:	688a      	ldr	r2, [r1, #8]
 802d180:	4680      	mov	r8, r0
 802d182:	460c      	mov	r4, r1
 802d184:	b932      	cbnz	r2, 802d194 <_scanf_chars+0x1c>
 802d186:	698a      	ldr	r2, [r1, #24]
 802d188:	2a00      	cmp	r2, #0
 802d18a:	bf0c      	ite	eq
 802d18c:	2201      	moveq	r2, #1
 802d18e:	f04f 32ff 	movne.w	r2, #4294967295
 802d192:	608a      	str	r2, [r1, #8]
 802d194:	6822      	ldr	r2, [r4, #0]
 802d196:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802d228 <_scanf_chars+0xb0>
 802d19a:	06d1      	lsls	r1, r2, #27
 802d19c:	bf5f      	itttt	pl
 802d19e:	681a      	ldrpl	r2, [r3, #0]
 802d1a0:	1d11      	addpl	r1, r2, #4
 802d1a2:	6019      	strpl	r1, [r3, #0]
 802d1a4:	6816      	ldrpl	r6, [r2, #0]
 802d1a6:	2700      	movs	r7, #0
 802d1a8:	69a0      	ldr	r0, [r4, #24]
 802d1aa:	b188      	cbz	r0, 802d1d0 <_scanf_chars+0x58>
 802d1ac:	2801      	cmp	r0, #1
 802d1ae:	d107      	bne.n	802d1c0 <_scanf_chars+0x48>
 802d1b0:	682a      	ldr	r2, [r5, #0]
 802d1b2:	7811      	ldrb	r1, [r2, #0]
 802d1b4:	6962      	ldr	r2, [r4, #20]
 802d1b6:	5c52      	ldrb	r2, [r2, r1]
 802d1b8:	b952      	cbnz	r2, 802d1d0 <_scanf_chars+0x58>
 802d1ba:	2f00      	cmp	r7, #0
 802d1bc:	d031      	beq.n	802d222 <_scanf_chars+0xaa>
 802d1be:	e022      	b.n	802d206 <_scanf_chars+0x8e>
 802d1c0:	2802      	cmp	r0, #2
 802d1c2:	d120      	bne.n	802d206 <_scanf_chars+0x8e>
 802d1c4:	682b      	ldr	r3, [r5, #0]
 802d1c6:	781b      	ldrb	r3, [r3, #0]
 802d1c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 802d1cc:	071b      	lsls	r3, r3, #28
 802d1ce:	d41a      	bmi.n	802d206 <_scanf_chars+0x8e>
 802d1d0:	6823      	ldr	r3, [r4, #0]
 802d1d2:	06da      	lsls	r2, r3, #27
 802d1d4:	bf5e      	ittt	pl
 802d1d6:	682b      	ldrpl	r3, [r5, #0]
 802d1d8:	781b      	ldrbpl	r3, [r3, #0]
 802d1da:	f806 3b01 	strbpl.w	r3, [r6], #1
 802d1de:	682a      	ldr	r2, [r5, #0]
 802d1e0:	686b      	ldr	r3, [r5, #4]
 802d1e2:	3201      	adds	r2, #1
 802d1e4:	602a      	str	r2, [r5, #0]
 802d1e6:	68a2      	ldr	r2, [r4, #8]
 802d1e8:	3b01      	subs	r3, #1
 802d1ea:	3a01      	subs	r2, #1
 802d1ec:	606b      	str	r3, [r5, #4]
 802d1ee:	3701      	adds	r7, #1
 802d1f0:	60a2      	str	r2, [r4, #8]
 802d1f2:	b142      	cbz	r2, 802d206 <_scanf_chars+0x8e>
 802d1f4:	2b00      	cmp	r3, #0
 802d1f6:	dcd7      	bgt.n	802d1a8 <_scanf_chars+0x30>
 802d1f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d1fc:	4629      	mov	r1, r5
 802d1fe:	4640      	mov	r0, r8
 802d200:	4798      	blx	r3
 802d202:	2800      	cmp	r0, #0
 802d204:	d0d0      	beq.n	802d1a8 <_scanf_chars+0x30>
 802d206:	6823      	ldr	r3, [r4, #0]
 802d208:	f013 0310 	ands.w	r3, r3, #16
 802d20c:	d105      	bne.n	802d21a <_scanf_chars+0xa2>
 802d20e:	68e2      	ldr	r2, [r4, #12]
 802d210:	3201      	adds	r2, #1
 802d212:	60e2      	str	r2, [r4, #12]
 802d214:	69a2      	ldr	r2, [r4, #24]
 802d216:	b102      	cbz	r2, 802d21a <_scanf_chars+0xa2>
 802d218:	7033      	strb	r3, [r6, #0]
 802d21a:	6923      	ldr	r3, [r4, #16]
 802d21c:	443b      	add	r3, r7
 802d21e:	6123      	str	r3, [r4, #16]
 802d220:	2000      	movs	r0, #0
 802d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d226:	bf00      	nop
 802d228:	0802f800 	.word	0x0802f800

0802d22c <_scanf_i>:
 802d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d230:	4698      	mov	r8, r3
 802d232:	4b76      	ldr	r3, [pc, #472]	; (802d40c <_scanf_i+0x1e0>)
 802d234:	460c      	mov	r4, r1
 802d236:	4682      	mov	sl, r0
 802d238:	4616      	mov	r6, r2
 802d23a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802d23e:	b087      	sub	sp, #28
 802d240:	ab03      	add	r3, sp, #12
 802d242:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802d246:	4b72      	ldr	r3, [pc, #456]	; (802d410 <_scanf_i+0x1e4>)
 802d248:	69a1      	ldr	r1, [r4, #24]
 802d24a:	4a72      	ldr	r2, [pc, #456]	; (802d414 <_scanf_i+0x1e8>)
 802d24c:	2903      	cmp	r1, #3
 802d24e:	bf18      	it	ne
 802d250:	461a      	movne	r2, r3
 802d252:	68a3      	ldr	r3, [r4, #8]
 802d254:	9201      	str	r2, [sp, #4]
 802d256:	1e5a      	subs	r2, r3, #1
 802d258:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802d25c:	bf88      	it	hi
 802d25e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802d262:	4627      	mov	r7, r4
 802d264:	bf82      	ittt	hi
 802d266:	eb03 0905 	addhi.w	r9, r3, r5
 802d26a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802d26e:	60a3      	strhi	r3, [r4, #8]
 802d270:	f857 3b1c 	ldr.w	r3, [r7], #28
 802d274:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802d278:	bf98      	it	ls
 802d27a:	f04f 0900 	movls.w	r9, #0
 802d27e:	6023      	str	r3, [r4, #0]
 802d280:	463d      	mov	r5, r7
 802d282:	f04f 0b00 	mov.w	fp, #0
 802d286:	6831      	ldr	r1, [r6, #0]
 802d288:	ab03      	add	r3, sp, #12
 802d28a:	7809      	ldrb	r1, [r1, #0]
 802d28c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802d290:	2202      	movs	r2, #2
 802d292:	f7d2 ffb5 	bl	8000200 <memchr>
 802d296:	b328      	cbz	r0, 802d2e4 <_scanf_i+0xb8>
 802d298:	f1bb 0f01 	cmp.w	fp, #1
 802d29c:	d159      	bne.n	802d352 <_scanf_i+0x126>
 802d29e:	6862      	ldr	r2, [r4, #4]
 802d2a0:	b92a      	cbnz	r2, 802d2ae <_scanf_i+0x82>
 802d2a2:	6822      	ldr	r2, [r4, #0]
 802d2a4:	2308      	movs	r3, #8
 802d2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802d2aa:	6063      	str	r3, [r4, #4]
 802d2ac:	6022      	str	r2, [r4, #0]
 802d2ae:	6822      	ldr	r2, [r4, #0]
 802d2b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802d2b4:	6022      	str	r2, [r4, #0]
 802d2b6:	68a2      	ldr	r2, [r4, #8]
 802d2b8:	1e51      	subs	r1, r2, #1
 802d2ba:	60a1      	str	r1, [r4, #8]
 802d2bc:	b192      	cbz	r2, 802d2e4 <_scanf_i+0xb8>
 802d2be:	6832      	ldr	r2, [r6, #0]
 802d2c0:	1c51      	adds	r1, r2, #1
 802d2c2:	6031      	str	r1, [r6, #0]
 802d2c4:	7812      	ldrb	r2, [r2, #0]
 802d2c6:	f805 2b01 	strb.w	r2, [r5], #1
 802d2ca:	6872      	ldr	r2, [r6, #4]
 802d2cc:	3a01      	subs	r2, #1
 802d2ce:	2a00      	cmp	r2, #0
 802d2d0:	6072      	str	r2, [r6, #4]
 802d2d2:	dc07      	bgt.n	802d2e4 <_scanf_i+0xb8>
 802d2d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802d2d8:	4631      	mov	r1, r6
 802d2da:	4650      	mov	r0, sl
 802d2dc:	4790      	blx	r2
 802d2de:	2800      	cmp	r0, #0
 802d2e0:	f040 8085 	bne.w	802d3ee <_scanf_i+0x1c2>
 802d2e4:	f10b 0b01 	add.w	fp, fp, #1
 802d2e8:	f1bb 0f03 	cmp.w	fp, #3
 802d2ec:	d1cb      	bne.n	802d286 <_scanf_i+0x5a>
 802d2ee:	6863      	ldr	r3, [r4, #4]
 802d2f0:	b90b      	cbnz	r3, 802d2f6 <_scanf_i+0xca>
 802d2f2:	230a      	movs	r3, #10
 802d2f4:	6063      	str	r3, [r4, #4]
 802d2f6:	6863      	ldr	r3, [r4, #4]
 802d2f8:	4947      	ldr	r1, [pc, #284]	; (802d418 <_scanf_i+0x1ec>)
 802d2fa:	6960      	ldr	r0, [r4, #20]
 802d2fc:	1ac9      	subs	r1, r1, r3
 802d2fe:	f000 f89f 	bl	802d440 <__sccl>
 802d302:	f04f 0b00 	mov.w	fp, #0
 802d306:	68a3      	ldr	r3, [r4, #8]
 802d308:	6822      	ldr	r2, [r4, #0]
 802d30a:	2b00      	cmp	r3, #0
 802d30c:	d03d      	beq.n	802d38a <_scanf_i+0x15e>
 802d30e:	6831      	ldr	r1, [r6, #0]
 802d310:	6960      	ldr	r0, [r4, #20]
 802d312:	f891 c000 	ldrb.w	ip, [r1]
 802d316:	f810 000c 	ldrb.w	r0, [r0, ip]
 802d31a:	2800      	cmp	r0, #0
 802d31c:	d035      	beq.n	802d38a <_scanf_i+0x15e>
 802d31e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802d322:	d124      	bne.n	802d36e <_scanf_i+0x142>
 802d324:	0510      	lsls	r0, r2, #20
 802d326:	d522      	bpl.n	802d36e <_scanf_i+0x142>
 802d328:	f10b 0b01 	add.w	fp, fp, #1
 802d32c:	f1b9 0f00 	cmp.w	r9, #0
 802d330:	d003      	beq.n	802d33a <_scanf_i+0x10e>
 802d332:	3301      	adds	r3, #1
 802d334:	f109 39ff 	add.w	r9, r9, #4294967295
 802d338:	60a3      	str	r3, [r4, #8]
 802d33a:	6873      	ldr	r3, [r6, #4]
 802d33c:	3b01      	subs	r3, #1
 802d33e:	2b00      	cmp	r3, #0
 802d340:	6073      	str	r3, [r6, #4]
 802d342:	dd1b      	ble.n	802d37c <_scanf_i+0x150>
 802d344:	6833      	ldr	r3, [r6, #0]
 802d346:	3301      	adds	r3, #1
 802d348:	6033      	str	r3, [r6, #0]
 802d34a:	68a3      	ldr	r3, [r4, #8]
 802d34c:	3b01      	subs	r3, #1
 802d34e:	60a3      	str	r3, [r4, #8]
 802d350:	e7d9      	b.n	802d306 <_scanf_i+0xda>
 802d352:	f1bb 0f02 	cmp.w	fp, #2
 802d356:	d1ae      	bne.n	802d2b6 <_scanf_i+0x8a>
 802d358:	6822      	ldr	r2, [r4, #0]
 802d35a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802d35e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802d362:	d1bf      	bne.n	802d2e4 <_scanf_i+0xb8>
 802d364:	2310      	movs	r3, #16
 802d366:	6063      	str	r3, [r4, #4]
 802d368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802d36c:	e7a2      	b.n	802d2b4 <_scanf_i+0x88>
 802d36e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802d372:	6022      	str	r2, [r4, #0]
 802d374:	780b      	ldrb	r3, [r1, #0]
 802d376:	f805 3b01 	strb.w	r3, [r5], #1
 802d37a:	e7de      	b.n	802d33a <_scanf_i+0x10e>
 802d37c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d380:	4631      	mov	r1, r6
 802d382:	4650      	mov	r0, sl
 802d384:	4798      	blx	r3
 802d386:	2800      	cmp	r0, #0
 802d388:	d0df      	beq.n	802d34a <_scanf_i+0x11e>
 802d38a:	6823      	ldr	r3, [r4, #0]
 802d38c:	05db      	lsls	r3, r3, #23
 802d38e:	d50d      	bpl.n	802d3ac <_scanf_i+0x180>
 802d390:	42bd      	cmp	r5, r7
 802d392:	d909      	bls.n	802d3a8 <_scanf_i+0x17c>
 802d394:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802d398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d39c:	4632      	mov	r2, r6
 802d39e:	4650      	mov	r0, sl
 802d3a0:	4798      	blx	r3
 802d3a2:	f105 39ff 	add.w	r9, r5, #4294967295
 802d3a6:	464d      	mov	r5, r9
 802d3a8:	42bd      	cmp	r5, r7
 802d3aa:	d02d      	beq.n	802d408 <_scanf_i+0x1dc>
 802d3ac:	6822      	ldr	r2, [r4, #0]
 802d3ae:	f012 0210 	ands.w	r2, r2, #16
 802d3b2:	d113      	bne.n	802d3dc <_scanf_i+0x1b0>
 802d3b4:	702a      	strb	r2, [r5, #0]
 802d3b6:	6863      	ldr	r3, [r4, #4]
 802d3b8:	9e01      	ldr	r6, [sp, #4]
 802d3ba:	4639      	mov	r1, r7
 802d3bc:	4650      	mov	r0, sl
 802d3be:	47b0      	blx	r6
 802d3c0:	6821      	ldr	r1, [r4, #0]
 802d3c2:	f8d8 3000 	ldr.w	r3, [r8]
 802d3c6:	f011 0f20 	tst.w	r1, #32
 802d3ca:	d013      	beq.n	802d3f4 <_scanf_i+0x1c8>
 802d3cc:	1d1a      	adds	r2, r3, #4
 802d3ce:	f8c8 2000 	str.w	r2, [r8]
 802d3d2:	681b      	ldr	r3, [r3, #0]
 802d3d4:	6018      	str	r0, [r3, #0]
 802d3d6:	68e3      	ldr	r3, [r4, #12]
 802d3d8:	3301      	adds	r3, #1
 802d3da:	60e3      	str	r3, [r4, #12]
 802d3dc:	1bed      	subs	r5, r5, r7
 802d3de:	44ab      	add	fp, r5
 802d3e0:	6925      	ldr	r5, [r4, #16]
 802d3e2:	445d      	add	r5, fp
 802d3e4:	6125      	str	r5, [r4, #16]
 802d3e6:	2000      	movs	r0, #0
 802d3e8:	b007      	add	sp, #28
 802d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d3ee:	f04f 0b00 	mov.w	fp, #0
 802d3f2:	e7ca      	b.n	802d38a <_scanf_i+0x15e>
 802d3f4:	1d1a      	adds	r2, r3, #4
 802d3f6:	f8c8 2000 	str.w	r2, [r8]
 802d3fa:	681b      	ldr	r3, [r3, #0]
 802d3fc:	f011 0f01 	tst.w	r1, #1
 802d400:	bf14      	ite	ne
 802d402:	8018      	strhne	r0, [r3, #0]
 802d404:	6018      	streq	r0, [r3, #0]
 802d406:	e7e6      	b.n	802d3d6 <_scanf_i+0x1aa>
 802d408:	2001      	movs	r0, #1
 802d40a:	e7ed      	b.n	802d3e8 <_scanf_i+0x1bc>
 802d40c:	0802e36c 	.word	0x0802e36c
 802d410:	0802d69d 	.word	0x0802d69d
 802d414:	0802d5b5 	.word	0x0802d5b5
 802d418:	0802f7fd 	.word	0x0802f7fd

0802d41c <_read_r>:
 802d41c:	b538      	push	{r3, r4, r5, lr}
 802d41e:	4d07      	ldr	r5, [pc, #28]	; (802d43c <_read_r+0x20>)
 802d420:	4604      	mov	r4, r0
 802d422:	4608      	mov	r0, r1
 802d424:	4611      	mov	r1, r2
 802d426:	2200      	movs	r2, #0
 802d428:	602a      	str	r2, [r5, #0]
 802d42a:	461a      	mov	r2, r3
 802d42c:	f7d6 fae0 	bl	80039f0 <_read>
 802d430:	1c43      	adds	r3, r0, #1
 802d432:	d102      	bne.n	802d43a <_read_r+0x1e>
 802d434:	682b      	ldr	r3, [r5, #0]
 802d436:	b103      	cbz	r3, 802d43a <_read_r+0x1e>
 802d438:	6023      	str	r3, [r4, #0]
 802d43a:	bd38      	pop	{r3, r4, r5, pc}
 802d43c:	2000b764 	.word	0x2000b764

0802d440 <__sccl>:
 802d440:	b570      	push	{r4, r5, r6, lr}
 802d442:	780b      	ldrb	r3, [r1, #0]
 802d444:	4604      	mov	r4, r0
 802d446:	2b5e      	cmp	r3, #94	; 0x5e
 802d448:	bf0b      	itete	eq
 802d44a:	784b      	ldrbeq	r3, [r1, #1]
 802d44c:	1c48      	addne	r0, r1, #1
 802d44e:	1c88      	addeq	r0, r1, #2
 802d450:	2200      	movne	r2, #0
 802d452:	bf08      	it	eq
 802d454:	2201      	moveq	r2, #1
 802d456:	1e61      	subs	r1, r4, #1
 802d458:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802d45c:	f801 2f01 	strb.w	r2, [r1, #1]!
 802d460:	42a9      	cmp	r1, r5
 802d462:	d1fb      	bne.n	802d45c <__sccl+0x1c>
 802d464:	b90b      	cbnz	r3, 802d46a <__sccl+0x2a>
 802d466:	3801      	subs	r0, #1
 802d468:	bd70      	pop	{r4, r5, r6, pc}
 802d46a:	f082 0201 	eor.w	r2, r2, #1
 802d46e:	54e2      	strb	r2, [r4, r3]
 802d470:	4605      	mov	r5, r0
 802d472:	4628      	mov	r0, r5
 802d474:	f810 1b01 	ldrb.w	r1, [r0], #1
 802d478:	292d      	cmp	r1, #45	; 0x2d
 802d47a:	d006      	beq.n	802d48a <__sccl+0x4a>
 802d47c:	295d      	cmp	r1, #93	; 0x5d
 802d47e:	d0f3      	beq.n	802d468 <__sccl+0x28>
 802d480:	b909      	cbnz	r1, 802d486 <__sccl+0x46>
 802d482:	4628      	mov	r0, r5
 802d484:	e7f0      	b.n	802d468 <__sccl+0x28>
 802d486:	460b      	mov	r3, r1
 802d488:	e7f1      	b.n	802d46e <__sccl+0x2e>
 802d48a:	786e      	ldrb	r6, [r5, #1]
 802d48c:	2e5d      	cmp	r6, #93	; 0x5d
 802d48e:	d0fa      	beq.n	802d486 <__sccl+0x46>
 802d490:	42b3      	cmp	r3, r6
 802d492:	dcf8      	bgt.n	802d486 <__sccl+0x46>
 802d494:	3502      	adds	r5, #2
 802d496:	4619      	mov	r1, r3
 802d498:	3101      	adds	r1, #1
 802d49a:	428e      	cmp	r6, r1
 802d49c:	5462      	strb	r2, [r4, r1]
 802d49e:	dcfb      	bgt.n	802d498 <__sccl+0x58>
 802d4a0:	1af1      	subs	r1, r6, r3
 802d4a2:	3901      	subs	r1, #1
 802d4a4:	1c58      	adds	r0, r3, #1
 802d4a6:	42b3      	cmp	r3, r6
 802d4a8:	bfa8      	it	ge
 802d4aa:	2100      	movge	r1, #0
 802d4ac:	1843      	adds	r3, r0, r1
 802d4ae:	e7e0      	b.n	802d472 <__sccl+0x32>

0802d4b0 <_strtol_l.constprop.0>:
 802d4b0:	2b01      	cmp	r3, #1
 802d4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d4b6:	d001      	beq.n	802d4bc <_strtol_l.constprop.0+0xc>
 802d4b8:	2b24      	cmp	r3, #36	; 0x24
 802d4ba:	d906      	bls.n	802d4ca <_strtol_l.constprop.0+0x1a>
 802d4bc:	f7fe fa4c 	bl	802b958 <__errno>
 802d4c0:	2316      	movs	r3, #22
 802d4c2:	6003      	str	r3, [r0, #0]
 802d4c4:	2000      	movs	r0, #0
 802d4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d4ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802d5b0 <_strtol_l.constprop.0+0x100>
 802d4ce:	460d      	mov	r5, r1
 802d4d0:	462e      	mov	r6, r5
 802d4d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d4d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 802d4da:	f017 0708 	ands.w	r7, r7, #8
 802d4de:	d1f7      	bne.n	802d4d0 <_strtol_l.constprop.0+0x20>
 802d4e0:	2c2d      	cmp	r4, #45	; 0x2d
 802d4e2:	d132      	bne.n	802d54a <_strtol_l.constprop.0+0x9a>
 802d4e4:	782c      	ldrb	r4, [r5, #0]
 802d4e6:	2701      	movs	r7, #1
 802d4e8:	1cb5      	adds	r5, r6, #2
 802d4ea:	2b00      	cmp	r3, #0
 802d4ec:	d05b      	beq.n	802d5a6 <_strtol_l.constprop.0+0xf6>
 802d4ee:	2b10      	cmp	r3, #16
 802d4f0:	d109      	bne.n	802d506 <_strtol_l.constprop.0+0x56>
 802d4f2:	2c30      	cmp	r4, #48	; 0x30
 802d4f4:	d107      	bne.n	802d506 <_strtol_l.constprop.0+0x56>
 802d4f6:	782c      	ldrb	r4, [r5, #0]
 802d4f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802d4fc:	2c58      	cmp	r4, #88	; 0x58
 802d4fe:	d14d      	bne.n	802d59c <_strtol_l.constprop.0+0xec>
 802d500:	786c      	ldrb	r4, [r5, #1]
 802d502:	2310      	movs	r3, #16
 802d504:	3502      	adds	r5, #2
 802d506:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802d50a:	f108 38ff 	add.w	r8, r8, #4294967295
 802d50e:	f04f 0c00 	mov.w	ip, #0
 802d512:	fbb8 f9f3 	udiv	r9, r8, r3
 802d516:	4666      	mov	r6, ip
 802d518:	fb03 8a19 	mls	sl, r3, r9, r8
 802d51c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802d520:	f1be 0f09 	cmp.w	lr, #9
 802d524:	d816      	bhi.n	802d554 <_strtol_l.constprop.0+0xa4>
 802d526:	4674      	mov	r4, lr
 802d528:	42a3      	cmp	r3, r4
 802d52a:	dd24      	ble.n	802d576 <_strtol_l.constprop.0+0xc6>
 802d52c:	f1bc 0f00 	cmp.w	ip, #0
 802d530:	db1e      	blt.n	802d570 <_strtol_l.constprop.0+0xc0>
 802d532:	45b1      	cmp	r9, r6
 802d534:	d31c      	bcc.n	802d570 <_strtol_l.constprop.0+0xc0>
 802d536:	d101      	bne.n	802d53c <_strtol_l.constprop.0+0x8c>
 802d538:	45a2      	cmp	sl, r4
 802d53a:	db19      	blt.n	802d570 <_strtol_l.constprop.0+0xc0>
 802d53c:	fb06 4603 	mla	r6, r6, r3, r4
 802d540:	f04f 0c01 	mov.w	ip, #1
 802d544:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d548:	e7e8      	b.n	802d51c <_strtol_l.constprop.0+0x6c>
 802d54a:	2c2b      	cmp	r4, #43	; 0x2b
 802d54c:	bf04      	itt	eq
 802d54e:	782c      	ldrbeq	r4, [r5, #0]
 802d550:	1cb5      	addeq	r5, r6, #2
 802d552:	e7ca      	b.n	802d4ea <_strtol_l.constprop.0+0x3a>
 802d554:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802d558:	f1be 0f19 	cmp.w	lr, #25
 802d55c:	d801      	bhi.n	802d562 <_strtol_l.constprop.0+0xb2>
 802d55e:	3c37      	subs	r4, #55	; 0x37
 802d560:	e7e2      	b.n	802d528 <_strtol_l.constprop.0+0x78>
 802d562:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802d566:	f1be 0f19 	cmp.w	lr, #25
 802d56a:	d804      	bhi.n	802d576 <_strtol_l.constprop.0+0xc6>
 802d56c:	3c57      	subs	r4, #87	; 0x57
 802d56e:	e7db      	b.n	802d528 <_strtol_l.constprop.0+0x78>
 802d570:	f04f 3cff 	mov.w	ip, #4294967295
 802d574:	e7e6      	b.n	802d544 <_strtol_l.constprop.0+0x94>
 802d576:	f1bc 0f00 	cmp.w	ip, #0
 802d57a:	da05      	bge.n	802d588 <_strtol_l.constprop.0+0xd8>
 802d57c:	2322      	movs	r3, #34	; 0x22
 802d57e:	6003      	str	r3, [r0, #0]
 802d580:	4646      	mov	r6, r8
 802d582:	b942      	cbnz	r2, 802d596 <_strtol_l.constprop.0+0xe6>
 802d584:	4630      	mov	r0, r6
 802d586:	e79e      	b.n	802d4c6 <_strtol_l.constprop.0+0x16>
 802d588:	b107      	cbz	r7, 802d58c <_strtol_l.constprop.0+0xdc>
 802d58a:	4276      	negs	r6, r6
 802d58c:	2a00      	cmp	r2, #0
 802d58e:	d0f9      	beq.n	802d584 <_strtol_l.constprop.0+0xd4>
 802d590:	f1bc 0f00 	cmp.w	ip, #0
 802d594:	d000      	beq.n	802d598 <_strtol_l.constprop.0+0xe8>
 802d596:	1e69      	subs	r1, r5, #1
 802d598:	6011      	str	r1, [r2, #0]
 802d59a:	e7f3      	b.n	802d584 <_strtol_l.constprop.0+0xd4>
 802d59c:	2430      	movs	r4, #48	; 0x30
 802d59e:	2b00      	cmp	r3, #0
 802d5a0:	d1b1      	bne.n	802d506 <_strtol_l.constprop.0+0x56>
 802d5a2:	2308      	movs	r3, #8
 802d5a4:	e7af      	b.n	802d506 <_strtol_l.constprop.0+0x56>
 802d5a6:	2c30      	cmp	r4, #48	; 0x30
 802d5a8:	d0a5      	beq.n	802d4f6 <_strtol_l.constprop.0+0x46>
 802d5aa:	230a      	movs	r3, #10
 802d5ac:	e7ab      	b.n	802d506 <_strtol_l.constprop.0+0x56>
 802d5ae:	bf00      	nop
 802d5b0:	0802f800 	.word	0x0802f800

0802d5b4 <_strtol_r>:
 802d5b4:	f7ff bf7c 	b.w	802d4b0 <_strtol_l.constprop.0>

0802d5b8 <_strtoul_l.constprop.0>:
 802d5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d5bc:	4f36      	ldr	r7, [pc, #216]	; (802d698 <_strtoul_l.constprop.0+0xe0>)
 802d5be:	4686      	mov	lr, r0
 802d5c0:	460d      	mov	r5, r1
 802d5c2:	4628      	mov	r0, r5
 802d5c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d5c8:	5de6      	ldrb	r6, [r4, r7]
 802d5ca:	f016 0608 	ands.w	r6, r6, #8
 802d5ce:	d1f8      	bne.n	802d5c2 <_strtoul_l.constprop.0+0xa>
 802d5d0:	2c2d      	cmp	r4, #45	; 0x2d
 802d5d2:	d12f      	bne.n	802d634 <_strtoul_l.constprop.0+0x7c>
 802d5d4:	782c      	ldrb	r4, [r5, #0]
 802d5d6:	2601      	movs	r6, #1
 802d5d8:	1c85      	adds	r5, r0, #2
 802d5da:	2b00      	cmp	r3, #0
 802d5dc:	d057      	beq.n	802d68e <_strtoul_l.constprop.0+0xd6>
 802d5de:	2b10      	cmp	r3, #16
 802d5e0:	d109      	bne.n	802d5f6 <_strtoul_l.constprop.0+0x3e>
 802d5e2:	2c30      	cmp	r4, #48	; 0x30
 802d5e4:	d107      	bne.n	802d5f6 <_strtoul_l.constprop.0+0x3e>
 802d5e6:	7828      	ldrb	r0, [r5, #0]
 802d5e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802d5ec:	2858      	cmp	r0, #88	; 0x58
 802d5ee:	d149      	bne.n	802d684 <_strtoul_l.constprop.0+0xcc>
 802d5f0:	786c      	ldrb	r4, [r5, #1]
 802d5f2:	2310      	movs	r3, #16
 802d5f4:	3502      	adds	r5, #2
 802d5f6:	f04f 38ff 	mov.w	r8, #4294967295
 802d5fa:	2700      	movs	r7, #0
 802d5fc:	fbb8 f8f3 	udiv	r8, r8, r3
 802d600:	fb03 f908 	mul.w	r9, r3, r8
 802d604:	ea6f 0909 	mvn.w	r9, r9
 802d608:	4638      	mov	r0, r7
 802d60a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802d60e:	f1bc 0f09 	cmp.w	ip, #9
 802d612:	d814      	bhi.n	802d63e <_strtoul_l.constprop.0+0x86>
 802d614:	4664      	mov	r4, ip
 802d616:	42a3      	cmp	r3, r4
 802d618:	dd22      	ble.n	802d660 <_strtoul_l.constprop.0+0xa8>
 802d61a:	2f00      	cmp	r7, #0
 802d61c:	db1d      	blt.n	802d65a <_strtoul_l.constprop.0+0xa2>
 802d61e:	4580      	cmp	r8, r0
 802d620:	d31b      	bcc.n	802d65a <_strtoul_l.constprop.0+0xa2>
 802d622:	d101      	bne.n	802d628 <_strtoul_l.constprop.0+0x70>
 802d624:	45a1      	cmp	r9, r4
 802d626:	db18      	blt.n	802d65a <_strtoul_l.constprop.0+0xa2>
 802d628:	fb00 4003 	mla	r0, r0, r3, r4
 802d62c:	2701      	movs	r7, #1
 802d62e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802d632:	e7ea      	b.n	802d60a <_strtoul_l.constprop.0+0x52>
 802d634:	2c2b      	cmp	r4, #43	; 0x2b
 802d636:	bf04      	itt	eq
 802d638:	782c      	ldrbeq	r4, [r5, #0]
 802d63a:	1c85      	addeq	r5, r0, #2
 802d63c:	e7cd      	b.n	802d5da <_strtoul_l.constprop.0+0x22>
 802d63e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802d642:	f1bc 0f19 	cmp.w	ip, #25
 802d646:	d801      	bhi.n	802d64c <_strtoul_l.constprop.0+0x94>
 802d648:	3c37      	subs	r4, #55	; 0x37
 802d64a:	e7e4      	b.n	802d616 <_strtoul_l.constprop.0+0x5e>
 802d64c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802d650:	f1bc 0f19 	cmp.w	ip, #25
 802d654:	d804      	bhi.n	802d660 <_strtoul_l.constprop.0+0xa8>
 802d656:	3c57      	subs	r4, #87	; 0x57
 802d658:	e7dd      	b.n	802d616 <_strtoul_l.constprop.0+0x5e>
 802d65a:	f04f 37ff 	mov.w	r7, #4294967295
 802d65e:	e7e6      	b.n	802d62e <_strtoul_l.constprop.0+0x76>
 802d660:	2f00      	cmp	r7, #0
 802d662:	da07      	bge.n	802d674 <_strtoul_l.constprop.0+0xbc>
 802d664:	2322      	movs	r3, #34	; 0x22
 802d666:	f8ce 3000 	str.w	r3, [lr]
 802d66a:	f04f 30ff 	mov.w	r0, #4294967295
 802d66e:	b932      	cbnz	r2, 802d67e <_strtoul_l.constprop.0+0xc6>
 802d670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d674:	b106      	cbz	r6, 802d678 <_strtoul_l.constprop.0+0xc0>
 802d676:	4240      	negs	r0, r0
 802d678:	2a00      	cmp	r2, #0
 802d67a:	d0f9      	beq.n	802d670 <_strtoul_l.constprop.0+0xb8>
 802d67c:	b107      	cbz	r7, 802d680 <_strtoul_l.constprop.0+0xc8>
 802d67e:	1e69      	subs	r1, r5, #1
 802d680:	6011      	str	r1, [r2, #0]
 802d682:	e7f5      	b.n	802d670 <_strtoul_l.constprop.0+0xb8>
 802d684:	2430      	movs	r4, #48	; 0x30
 802d686:	2b00      	cmp	r3, #0
 802d688:	d1b5      	bne.n	802d5f6 <_strtoul_l.constprop.0+0x3e>
 802d68a:	2308      	movs	r3, #8
 802d68c:	e7b3      	b.n	802d5f6 <_strtoul_l.constprop.0+0x3e>
 802d68e:	2c30      	cmp	r4, #48	; 0x30
 802d690:	d0a9      	beq.n	802d5e6 <_strtoul_l.constprop.0+0x2e>
 802d692:	230a      	movs	r3, #10
 802d694:	e7af      	b.n	802d5f6 <_strtoul_l.constprop.0+0x3e>
 802d696:	bf00      	nop
 802d698:	0802f800 	.word	0x0802f800

0802d69c <_strtoul_r>:
 802d69c:	f7ff bf8c 	b.w	802d5b8 <_strtoul_l.constprop.0>

0802d6a0 <__submore>:
 802d6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d6a4:	460c      	mov	r4, r1
 802d6a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802d6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d6ac:	4299      	cmp	r1, r3
 802d6ae:	d11d      	bne.n	802d6ec <__submore+0x4c>
 802d6b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802d6b4:	f7fe fa1e 	bl	802baf4 <_malloc_r>
 802d6b8:	b918      	cbnz	r0, 802d6c2 <__submore+0x22>
 802d6ba:	f04f 30ff 	mov.w	r0, #4294967295
 802d6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d6c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d6c6:	63a3      	str	r3, [r4, #56]	; 0x38
 802d6c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802d6cc:	6360      	str	r0, [r4, #52]	; 0x34
 802d6ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802d6d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802d6d6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802d6da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802d6de:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802d6e2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802d6e6:	6020      	str	r0, [r4, #0]
 802d6e8:	2000      	movs	r0, #0
 802d6ea:	e7e8      	b.n	802d6be <__submore+0x1e>
 802d6ec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802d6ee:	0077      	lsls	r7, r6, #1
 802d6f0:	463a      	mov	r2, r7
 802d6f2:	f7ff f9e5 	bl	802cac0 <_realloc_r>
 802d6f6:	4605      	mov	r5, r0
 802d6f8:	2800      	cmp	r0, #0
 802d6fa:	d0de      	beq.n	802d6ba <__submore+0x1a>
 802d6fc:	eb00 0806 	add.w	r8, r0, r6
 802d700:	4601      	mov	r1, r0
 802d702:	4632      	mov	r2, r6
 802d704:	4640      	mov	r0, r8
 802d706:	f7fe f973 	bl	802b9f0 <memcpy>
 802d70a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802d70e:	f8c4 8000 	str.w	r8, [r4]
 802d712:	e7e9      	b.n	802d6e8 <__submore+0x48>

0802d714 <_fstat_r>:
 802d714:	b538      	push	{r3, r4, r5, lr}
 802d716:	4d07      	ldr	r5, [pc, #28]	; (802d734 <_fstat_r+0x20>)
 802d718:	2300      	movs	r3, #0
 802d71a:	4604      	mov	r4, r0
 802d71c:	4608      	mov	r0, r1
 802d71e:	4611      	mov	r1, r2
 802d720:	602b      	str	r3, [r5, #0]
 802d722:	f7d6 f9aa 	bl	8003a7a <_fstat>
 802d726:	1c43      	adds	r3, r0, #1
 802d728:	d102      	bne.n	802d730 <_fstat_r+0x1c>
 802d72a:	682b      	ldr	r3, [r5, #0]
 802d72c:	b103      	cbz	r3, 802d730 <_fstat_r+0x1c>
 802d72e:	6023      	str	r3, [r4, #0]
 802d730:	bd38      	pop	{r3, r4, r5, pc}
 802d732:	bf00      	nop
 802d734:	2000b764 	.word	0x2000b764

0802d738 <_isatty_r>:
 802d738:	b538      	push	{r3, r4, r5, lr}
 802d73a:	4d06      	ldr	r5, [pc, #24]	; (802d754 <_isatty_r+0x1c>)
 802d73c:	2300      	movs	r3, #0
 802d73e:	4604      	mov	r4, r0
 802d740:	4608      	mov	r0, r1
 802d742:	602b      	str	r3, [r5, #0]
 802d744:	f7d6 f9a9 	bl	8003a9a <_isatty>
 802d748:	1c43      	adds	r3, r0, #1
 802d74a:	d102      	bne.n	802d752 <_isatty_r+0x1a>
 802d74c:	682b      	ldr	r3, [r5, #0]
 802d74e:	b103      	cbz	r3, 802d752 <_isatty_r+0x1a>
 802d750:	6023      	str	r3, [r4, #0]
 802d752:	bd38      	pop	{r3, r4, r5, pc}
 802d754:	2000b764 	.word	0x2000b764

0802d758 <_malloc_usable_size_r>:
 802d758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d75c:	1f18      	subs	r0, r3, #4
 802d75e:	2b00      	cmp	r3, #0
 802d760:	bfbc      	itt	lt
 802d762:	580b      	ldrlt	r3, [r1, r0]
 802d764:	18c0      	addlt	r0, r0, r3
 802d766:	4770      	bx	lr

0802d768 <_init>:
 802d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d76a:	bf00      	nop
 802d76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d76e:	bc08      	pop	{r3}
 802d770:	469e      	mov	lr, r3
 802d772:	4770      	bx	lr

0802d774 <_fini>:
 802d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d776:	bf00      	nop
 802d778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d77a:	bc08      	pop	{r3}
 802d77c:	469e      	mov	lr, r3
 802d77e:	4770      	bx	lr
